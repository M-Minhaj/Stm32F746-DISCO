
Frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08009868  08009868  00019868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5b0  0800b5b0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b8  0800b5b8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800b5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000210  0800b7d0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800b7d0  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abde  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037f6  00000000  00000000  0003ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001868  00000000  00000000  0003e618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00004e49  00000000  00000000  0003fe80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000152ec  00000000  00000000  00044cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00100453  00000000  00000000  00059fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0015a408  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001688  00000000  00000000  0015a488  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00007034  00000000  00000000  0015bb10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009850 	.word	0x08009850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08009850 	.word	0x08009850

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000ef2:	20c8      	movs	r0, #200	; 0xc8
 8000ef4:	f000 fed8 	bl	8001ca8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000ef8:	f000 fa7a 	bl	80013f0 <ft5336_I2C_InitializeIfRequired>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000f30:	f000 fa5e 	bl	80013f0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e010      	b.n	8000f5c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	21a8      	movs	r1, #168	; 0xa8
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fe93 	bl	8001c6c <TS_IO_Read>
 8000f46:	4603      	mov	r3, r0
 8000f48:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000f4a:	7b7b      	ldrb	r3, [r7, #13]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b51      	cmp	r3, #81	; 0x51
 8000f50:	d101      	bne.n	8000f56 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d802      	bhi.n	8000f68 <ft5336_ReadID+0x4e>
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0e8      	beq.n	8000f3a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000f68:	7b7b      	ldrb	r3, [r7, #13]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	b29b      	uxth	r3, r3
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fa44 	bl	8001410 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f932 	bl	80011f4 <ft5336_TS_DisableIT>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2102      	movs	r1, #2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fe5d 	bl	8001c6c <TS_IO_Read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d901      	bls.n	8000fce <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <ft5336_TS_DetectTouch+0x50>)
 8000fd4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <ft5336_TS_DetectTouch+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	b2db      	uxtb	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000022c 	.word	0x2000022c

08000fec <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800100e:	4b6d      	ldr	r3, [pc, #436]	; (80011c4 <ft5336_TS_GetXY+0x1d8>)
 8001010:	789a      	ldrb	r2, [r3, #2]
 8001012:	4b6c      	ldr	r3, [pc, #432]	; (80011c4 <ft5336_TS_GetXY+0x1d8>)
 8001014:	785b      	ldrb	r3, [r3, #1]
 8001016:	429a      	cmp	r2, r3
 8001018:	f080 80cf 	bcs.w	80011ba <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800101c:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <ft5336_TS_GetXY+0x1d8>)
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d871      	bhi.n	8001108 <ft5336_TS_GetXY+0x11c>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <ft5336_TS_GetXY+0x40>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	08001055 	.word	0x08001055
 8001030:	08001067 	.word	0x08001067
 8001034:	08001079 	.word	0x08001079
 8001038:	0800108b 	.word	0x0800108b
 800103c:	0800109d 	.word	0x0800109d
 8001040:	080010af 	.word	0x080010af
 8001044:	080010c1 	.word	0x080010c1
 8001048:	080010d3 	.word	0x080010d3
 800104c:	080010e5 	.word	0x080010e5
 8001050:	080010f7 	.word	0x080010f7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001054:	2304      	movs	r3, #4
 8001056:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001058:	2303      	movs	r3, #3
 800105a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800105c:	2306      	movs	r3, #6
 800105e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001060:	2305      	movs	r3, #5
 8001062:	753b      	strb	r3, [r7, #20]
      break;
 8001064:	e051      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001066:	230a      	movs	r3, #10
 8001068:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800106a:	2309      	movs	r3, #9
 800106c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800106e:	230c      	movs	r3, #12
 8001070:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001072:	230b      	movs	r3, #11
 8001074:	753b      	strb	r3, [r7, #20]
      break;
 8001076:	e048      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001078:	2310      	movs	r3, #16
 800107a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800107c:	230f      	movs	r3, #15
 800107e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001080:	2312      	movs	r3, #18
 8001082:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001084:	2311      	movs	r3, #17
 8001086:	753b      	strb	r3, [r7, #20]
      break;
 8001088:	e03f      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800108a:	2316      	movs	r3, #22
 800108c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800108e:	2315      	movs	r3, #21
 8001090:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001092:	2318      	movs	r3, #24
 8001094:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001096:	2317      	movs	r3, #23
 8001098:	753b      	strb	r3, [r7, #20]
      break;
 800109a:	e036      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800109c:	231c      	movs	r3, #28
 800109e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80010a0:	231b      	movs	r3, #27
 80010a2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80010a4:	231e      	movs	r3, #30
 80010a6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80010a8:	231d      	movs	r3, #29
 80010aa:	753b      	strb	r3, [r7, #20]
      break;
 80010ac:	e02d      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80010ae:	2322      	movs	r3, #34	; 0x22
 80010b0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80010b2:	2321      	movs	r3, #33	; 0x21
 80010b4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80010b6:	2324      	movs	r3, #36	; 0x24
 80010b8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80010ba:	2323      	movs	r3, #35	; 0x23
 80010bc:	753b      	strb	r3, [r7, #20]
      break;
 80010be:	e024      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80010c0:	2328      	movs	r3, #40	; 0x28
 80010c2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80010c4:	2327      	movs	r3, #39	; 0x27
 80010c6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80010c8:	232a      	movs	r3, #42	; 0x2a
 80010ca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80010cc:	2329      	movs	r3, #41	; 0x29
 80010ce:	753b      	strb	r3, [r7, #20]
      break;
 80010d0:	e01b      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80010d2:	232e      	movs	r3, #46	; 0x2e
 80010d4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80010d6:	232d      	movs	r3, #45	; 0x2d
 80010d8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80010da:	2330      	movs	r3, #48	; 0x30
 80010dc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80010de:	232f      	movs	r3, #47	; 0x2f
 80010e0:	753b      	strb	r3, [r7, #20]
      break;
 80010e2:	e012      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80010e4:	2334      	movs	r3, #52	; 0x34
 80010e6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80010e8:	2333      	movs	r3, #51	; 0x33
 80010ea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80010ec:	2336      	movs	r3, #54	; 0x36
 80010ee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80010f0:	2335      	movs	r3, #53	; 0x35
 80010f2:	753b      	strb	r3, [r7, #20]
      break;
 80010f4:	e009      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80010f6:	233a      	movs	r3, #58	; 0x3a
 80010f8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80010fa:	2339      	movs	r3, #57	; 0x39
 80010fc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80010fe:	233c      	movs	r3, #60	; 0x3c
 8001100:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001102:	233b      	movs	r3, #59	; 0x3b
 8001104:	753b      	strb	r3, [r7, #20]
      break;
 8001106:	e000      	b.n	800110a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001108:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fdaa 	bl	8001c6c <TS_IO_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800111c:	7cfb      	ldrb	r3, [r7, #19]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 8001124:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	7dba      	ldrb	r2, [r7, #22]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fd9c 	bl	8001c6c <TS_IO_Read>
 8001134:	4603      	mov	r3, r0
 8001136:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001138:	7cfb      	ldrb	r3, [r7, #19]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 8001152:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	7d7a      	ldrb	r2, [r7, #21]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd81 	bl	8001c6c <TS_IO_Read>
 800116a:	4603      	mov	r3, r0
 800116c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800116e:	7cfb      	ldrb	r3, [r7, #19]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 8001176:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	7d3a      	ldrb	r2, [r7, #20]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fd73 	bl	8001c6c <TS_IO_Read>
 8001186:	4603      	mov	r3, r0
 8001188:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21b      	sxth	r3, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 80011a4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <ft5336_TS_GetXY+0x1dc>)
 80011a8:	881a      	ldrh	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <ft5336_TS_GetXY+0x1d8>)
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <ft5336_TS_GetXY+0x1d8>)
 80011b8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000022c 	.word	0x2000022c
 80011c8:	20000230 	.word	0x20000230

080011cc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	21a4      	movs	r1, #164	; 0xa4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fd26 	bl	8001c38 <TS_IO_Write>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	21a4      	movs	r1, #164	; 0xa4
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fd12 	bl	8001c38 <TS_IO_Write>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	6039      	str	r1, [r7, #0]
 8001254:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fd03 	bl	8001c6c <TS_IO_Read>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4603      	mov	r3, r0
 800128a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800129c:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <ft5336_TS_GetTouchInfo+0x158>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	461a      	mov	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	f080 8090 	bcs.w	80013ca <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d85d      	bhi.n	800136c <ft5336_TS_GetTouchInfo+0xf0>
 80012b0:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <ft5336_TS_GetTouchInfo+0x3c>)
 80012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	080012e1 	.word	0x080012e1
 80012bc:	080012ef 	.word	0x080012ef
 80012c0:	080012fd 	.word	0x080012fd
 80012c4:	0800130b 	.word	0x0800130b
 80012c8:	08001319 	.word	0x08001319
 80012cc:	08001327 	.word	0x08001327
 80012d0:	08001335 	.word	0x08001335
 80012d4:	08001343 	.word	0x08001343
 80012d8:	08001351 	.word	0x08001351
 80012dc:	0800135f 	.word	0x0800135f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80012e4:	2307      	movs	r3, #7
 80012e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80012e8:	2308      	movs	r3, #8
 80012ea:	757b      	strb	r3, [r7, #21]
      break;
 80012ec:	e03f      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80012ee:	2309      	movs	r3, #9
 80012f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80012f2:	230d      	movs	r3, #13
 80012f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80012f6:	230e      	movs	r3, #14
 80012f8:	757b      	strb	r3, [r7, #21]
      break;
 80012fa:	e038      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80012fc:	230f      	movs	r3, #15
 80012fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001300:	2313      	movs	r3, #19
 8001302:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001304:	2314      	movs	r3, #20
 8001306:	757b      	strb	r3, [r7, #21]
      break;
 8001308:	e031      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800130a:	2315      	movs	r3, #21
 800130c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800130e:	2319      	movs	r3, #25
 8001310:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001312:	231a      	movs	r3, #26
 8001314:	757b      	strb	r3, [r7, #21]
      break;
 8001316:	e02a      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001318:	231b      	movs	r3, #27
 800131a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800131c:	231f      	movs	r3, #31
 800131e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001320:	2320      	movs	r3, #32
 8001322:	757b      	strb	r3, [r7, #21]
      break;
 8001324:	e023      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001326:	2321      	movs	r3, #33	; 0x21
 8001328:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800132a:	2325      	movs	r3, #37	; 0x25
 800132c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800132e:	2326      	movs	r3, #38	; 0x26
 8001330:	757b      	strb	r3, [r7, #21]
      break;
 8001332:	e01c      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001334:	2327      	movs	r3, #39	; 0x27
 8001336:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001338:	232b      	movs	r3, #43	; 0x2b
 800133a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800133c:	232c      	movs	r3, #44	; 0x2c
 800133e:	757b      	strb	r3, [r7, #21]
      break;
 8001340:	e015      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001342:	232d      	movs	r3, #45	; 0x2d
 8001344:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001346:	2331      	movs	r3, #49	; 0x31
 8001348:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800134a:	2332      	movs	r3, #50	; 0x32
 800134c:	757b      	strb	r3, [r7, #21]
      break;
 800134e:	e00e      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001350:	2333      	movs	r3, #51	; 0x33
 8001352:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001354:	2337      	movs	r3, #55	; 0x37
 8001356:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001358:	2338      	movs	r3, #56	; 0x38
 800135a:	757b      	strb	r3, [r7, #21]
      break;
 800135c:	e007      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800135e:	2339      	movs	r3, #57	; 0x39
 8001360:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001362:	233d      	movs	r3, #61	; 0x3d
 8001364:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001366:	233e      	movs	r3, #62	; 0x3e
 8001368:	757b      	strb	r3, [r7, #21]
      break;
 800136a:	e000      	b.n	800136e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800136c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	7dfa      	ldrb	r2, [r7, #23]
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fc78 	bl	8001c6c <TS_IO_Read>
 800137c:	4603      	mov	r3, r0
 800137e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001380:	7d3b      	ldrb	r3, [r7, #20]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	119b      	asrs	r3, r3, #6
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	7dba      	ldrb	r2, [r7, #22]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fc68 	bl	8001c6c <TS_IO_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80013a0:	7d3b      	ldrb	r3, [r7, #20]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	7d7a      	ldrb	r2, [r7, #21]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fc5a 	bl	8001c6c <TS_IO_Read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80013bc:	7d3b      	ldrb	r3, [r7, #20]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	111b      	asrs	r3, r3, #4
 80013c2:	f003 0204 	and.w	r2, r3, #4
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000022c 	.word	0x2000022c

080013d8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <ft5336_Get_I2C_InitializedStatus+0x14>)
 80013de:	781b      	ldrb	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000022c 	.word	0x2000022c

080013f0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80013f4:	f7ff fff0 	bl	80013d8 <ft5336_Get_I2C_InitializedStatus>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d104      	bne.n	8001408 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80013fe:	f000 fc11 	bl	8001c24 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001402:	4b02      	ldr	r3, [pc, #8]	; (800140c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
  }
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000022c 	.word	0x2000022c

08001410 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b598      	push	{r3, r4, r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f002 fbdd 	bl	8003bee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f854 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f000 f9b4 	bl	80017a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800143c:	f000 f95e 	bl	80016fc <MX_TIM2_Init>
  MX_RTC_Init();
 8001440:	f000 f936 	bl	80016b0 <MX_RTC_Init>
  MX_CRC_Init();
 8001444:	f000 f8e0 	bl	8001608 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001448:	f000 f900 	bl	800164c <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */




  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800144c:	2100      	movs	r1, #0
 800144e:	481e      	ldr	r0, [pc, #120]	; (80014c8 <main+0x9c>)
 8001450:	f005 fb8a 	bl	8006b68 <HAL_TIM_IC_Start_IT>





  HAL_Delay(100);
 8001454:	2064      	movs	r0, #100	; 0x64
 8001456:	f002 fc27 	bl	8003ca8 <HAL_Delay>


  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 800145a:	f001 f8e3 	bl	8002624 <BSP_SDRAM_Init>

  BSP_TS_Init(480, 272);
 800145e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001462:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001466:	f001 fa93 	bl	8002990 <BSP_TS_Init>
  BSP_LCD_Init();
 800146a:	f000 fc29 	bl	8001cc0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800146e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001472:	2000      	movs	r0, #0
 8001474:	f000 fcbc 	bl	8001df0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001478:	f000 febc 	bl	80021f4 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 800147c:	2000      	movs	r0, #0
 800147e:	f000 fd17 	bl	8001eb0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <main+0xa0>)
 8001484:	f000 fd3e 	bl	8001f04 <BSP_LCD_Clear>


  HAL_Delay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f002 fc0c 	bl	8003ca8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_TS_GetState(&ts);
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <main+0xa4>)
 8001492:	f001 fabd 	bl	8002a10 <BSP_TS_GetState>





	sprintf(freq, "Frequency: %5.1f",Frequency);
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <main+0xa8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f874 	bl	8000588 <__aeabi_f2d>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	461a      	mov	r2, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	490b      	ldr	r1, [pc, #44]	; (80014d8 <main+0xac>)
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <main+0xb0>)
 80014ac:	f006 fdf0 	bl	8008090 <siprintf>

    BSP_LCD_DisplayStringAt(100, 130, (float *)freq, LEFT_MODE);
 80014b0:	2303      	movs	r3, #3
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <main+0xb0>)
 80014b4:	2182      	movs	r1, #130	; 0x82
 80014b6:	2064      	movs	r0, #100	; 0x64
 80014b8:	f000 fd90 	bl	8001fdc <BSP_LCD_DisplayStringAt>

    HAL_Delay(1000);
 80014bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c0:	f002 fbf2 	bl	8003ca8 <HAL_Delay>
  {
 80014c4:	e7e4      	b.n	8001490 <main+0x64>
 80014c6:	bf00      	nop
 80014c8:	20000528 	.word	0x20000528
 80014cc:	ff0000ff 	.word	0xff0000ff
 80014d0:	2000047c 	.word	0x2000047c
 80014d4:	20000240 	.word	0x20000240
 80014d8:	08009868 	.word	0x08009868
 80014dc:	200004a8 	.word	0x200004a8

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0b4      	sub	sp, #208	; 0xd0
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ea:	2230      	movs	r2, #48	; 0x30
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 f96a 	bl	80077c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	2284      	movs	r2, #132	; 0x84
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f006 f95b 	bl	80077c8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001512:	f004 f91f 	bl	8005754 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <SystemClock_Config+0x120>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a39      	ldr	r2, [pc, #228]	; (8001600 <SystemClock_Config+0x120>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <SystemClock_Config+0x120>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <SystemClock_Config+0x124>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a34      	ldr	r2, [pc, #208]	; (8001604 <SystemClock_Config+0x124>)
 8001534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <SystemClock_Config+0x124>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001546:	2309      	movs	r3, #9
 8001548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001554:	2301      	movs	r3, #1
 8001556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001560:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001568:	230c      	movs	r3, #12
 800156a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 800156e:	23c0      	movs	r3, #192	; 0xc0
 8001570:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800157a:	2309      	movs	r3, #9
 800157c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001584:	4618      	mov	r0, r3
 8001586:	f004 f95f 	bl	8005848 <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001590:	f000 f9ee 	bl	8001970 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001594:	f004 f908 	bl	80057a8 <HAL_PWREx_EnableOverDrive>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800159e:	f000 f9e7 	bl	8001970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a2:	230f      	movs	r3, #15
 80015a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80015c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015c8:	2106      	movs	r1, #6
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fbe0 	bl	8005d90 <HAL_RCC_ClockConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80015d6:	f000 f9cb 	bl	8001970 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015da:	2320      	movs	r3, #32
 80015dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fd8f 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80015f4:	f000 f9bc 	bl	8001970 <Error_Handler>
  }
}
 80015f8:	bf00      	nop
 80015fa:	37d0      	adds	r7, #208	; 0xd0
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <MX_CRC_Init+0x3c>)
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <MX_CRC_Init+0x40>)
 8001610:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_CRC_Init+0x3c>)
 8001614:	2200      	movs	r2, #0
 8001616:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_CRC_Init+0x3c>)
 800161a:	2200      	movs	r2, #0
 800161c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_CRC_Init+0x3c>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_CRC_Init+0x3c>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_CRC_Init+0x3c>)
 800162c:	2201      	movs	r2, #1
 800162e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_CRC_Init+0x3c>)
 8001632:	f002 fc6d 	bl	8003f10 <HAL_CRC_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800163c:	f000 f998 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000454 	.word	0x20000454
 8001648:	40023000 	.word	0x40023000

0800164c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 8001652:	4a16      	ldr	r2, [pc, #88]	; (80016ac <MX_DMA2D_Init+0x60>)
 8001654:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 8001670:	2200      	movs	r2, #0
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 8001676:	2200      	movs	r2, #0
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 800167c:	2200      	movs	r2, #0
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001680:	4809      	ldr	r0, [pc, #36]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 8001682:	f002 feeb 	bl	800445c <HAL_DMA2D_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800168c:	f000 f970 	bl	8001970 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001690:	2101      	movs	r1, #1
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_DMA2D_Init+0x5c>)
 8001694:	f003 f840 	bl	8004718 <HAL_DMA2D_ConfigLayer>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800169e:	f000 f967 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200004e8 	.word	0x200004e8
 80016ac:	4002b000 	.word	0x4002b000

080016b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_RTC_Init+0x44>)
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <MX_RTC_Init+0x48>)
 80016b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_RTC_Init+0x44>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_RTC_Init+0x44>)
 80016c2:	227f      	movs	r2, #127	; 0x7f
 80016c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_RTC_Init+0x44>)
 80016c8:	22ff      	movs	r2, #255	; 0xff
 80016ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_RTC_Init+0x44>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_RTC_Init+0x44>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_RTC_Init+0x44>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_RTC_Init+0x44>)
 80016e0:	f005 f904 	bl	80068ec <HAL_RTC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80016ea:	f000 f941 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200004c8 	.word	0x200004c8
 80016f8:	40002800 	.word	0x40002800

080016fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800171c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001720:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001724:	2209      	movs	r2, #9
 8001726:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001742:	4817      	ldr	r0, [pc, #92]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001744:	f005 f9b8 	bl	8006ab8 <HAL_TIM_IC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800174e:	f000 f90f 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001762:	f005 ff5b 	bl	800761c <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800176c:	f000 f900 	bl	8001970 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001774:	2301      	movs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800177c:	230f      	movs	r3, #15
 800177e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001788:	f005 fc57 	bl	800703a <HAL_TIM_IC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001792:	f000 f8ed 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000528 	.word	0x20000528

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a22      	ldr	r2, [pc, #136]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a16      	ldr	r2, [pc, #88]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_GPIO_Init+0xa4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_GPIO_Init+0xa4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <MX_GPIO_Init+0xa4>)
 8001808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_GPIO_Init+0xa4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2102      	movs	r1, #2
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <MX_GPIO_Init+0xa8>)
 8001820:	f003 fa52 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001824:	2302      	movs	r3, #2
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_GPIO_Init+0xa8>)
 800183c:	f003 f89a 	bl	8004974 <HAL_GPIO_Init>

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7f1b      	ldrb	r3, [r3, #28]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d176      	bne.n	800194e <HAL_TIM_IC_CaptureCallback+0xfe>
	{
		if (Is_First_Captured==0)  // is the first value captured ?
 8001860:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10e      	bne.n	8001886 <HAL_TIM_IC_CaptureCallback+0x36>
		{
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f005 fc7a 	bl	8007164 <HAL_TIM_ReadCapturedValue>
 8001870:	ee07 0a90 	vmov	s15, r0
 8001874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001878:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_TIM_IC_CaptureCallback+0x10c>)
 800187a:	edc3 7a00 	vstr	s15, [r3]
			Is_First_Captured =1;  // set the first value captured as true
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]



		}
	}
}
 8001884:	e063      	b.n	800194e <HAL_TIM_IC_CaptureCallback+0xfe>
		else if (Is_First_Captured)  // if the first is captured
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d05f      	beq.n	800194e <HAL_TIM_IC_CaptureCallback+0xfe>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 800188e:	2100      	movs	r1, #0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f005 fc67 	bl	8007164 <HAL_TIM_ReadCapturedValue>
 8001896:	ee07 0a90 	vmov	s15, r0
 800189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_TIM_IC_CaptureCallback+0x110>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
			if (IC_Value2 > IC_Value1)
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <HAL_TIM_IC_CaptureCallback+0x110>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	dd0b      	ble.n	80018d2 <HAL_TIM_IC_CaptureCallback+0x82>
				Difference = IC_Value2-IC_Value1;   // calculate the difference
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_TIM_IC_CaptureCallback+0x110>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_TIM_IC_CaptureCallback+0x114>)
 80018cc:	edc3 7a00 	vstr	s15, [r3]
 80018d0:	e020      	b.n	8001914 <HAL_TIM_IC_CaptureCallback+0xc4>
			else if (IC_Value2 < IC_Value1)
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_TIM_IC_CaptureCallback+0x110>)
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d513      	bpl.n	8001910 <HAL_TIM_IC_CaptureCallback+0xc0>
				Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001968 <HAL_TIM_IC_CaptureCallback+0x118>
 80018f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_TIM_IC_CaptureCallback+0x110>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001904:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_TIM_IC_CaptureCallback+0x114>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
 800190e:	e001      	b.n	8001914 <HAL_TIM_IC_CaptureCallback+0xc4>
				Error_Handler();
 8001910:	f000 f82e 	bl	8001970 <Error_Handler>
			Frequency = (HAL_RCC_GetPCLK1Freq()*2)/Difference;  // calculate frequency
 8001914:	f004 fbe6 	bl	80060e4 <HAL_RCC_GetPCLK1Freq>
 8001918:	4603      	mov	r3, r0
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001930:	edc3 7a00 	vstr	s15, [r3]
			Frequency = Frequency/10.0;
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001936:	ed93 7a00 	vldr	s14, [r3]
 800193a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800193e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001944:	edc3 7a00 	vstr	s15, [r3]
			Is_First_Captured = 0;  // reset the first captured
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_TIM_IC_CaptureCallback+0x108>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000244 	.word	0x20000244
 800195c:	20000234 	.word	0x20000234
 8001960:	20000238 	.word	0x20000238
 8001964:	2000023c 	.word	0x2000023c
 8001968:	477fff00 	.word	0x477fff00
 800196c:	20000240 	.word	0x20000240

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001976:	e7fe      	b.n	8001976 <Error_Handler+0x6>

08001978 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <I2Cx_MspInit+0x150>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d14d      	bne.n	8001a24 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <I2Cx_MspInit+0x154>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a4f      	ldr	r2, [pc, #316]	; (8001acc <I2Cx_MspInit+0x154>)
 800198e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <I2Cx_MspInit+0x154>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80019a4:	2312      	movs	r3, #18
 80019a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80019b0:	2304      	movs	r3, #4
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	4845      	ldr	r0, [pc, #276]	; (8001ad0 <I2Cx_MspInit+0x158>)
 80019bc:	f002 ffda 	bl	8004974 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80019c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4840      	ldr	r0, [pc, #256]	; (8001ad0 <I2Cx_MspInit+0x158>)
 80019ce:	f002 ffd1 	bl	8004974 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <I2Cx_MspInit+0x154>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <I2Cx_MspInit+0x154>)
 80019d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <I2Cx_MspInit+0x154>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <I2Cx_MspInit+0x154>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a37      	ldr	r2, [pc, #220]	; (8001acc <I2Cx_MspInit+0x154>)
 80019f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019f4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <I2Cx_MspInit+0x154>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a34      	ldr	r2, [pc, #208]	; (8001acc <I2Cx_MspInit+0x154>)
 80019fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a00:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	210f      	movs	r1, #15
 8001a06:	2048      	movs	r0, #72	; 0x48
 8001a08:	f002 fa4b 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001a0c:	2048      	movs	r0, #72	; 0x48
 8001a0e:	f002 fa64 	bl	8003eda <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	210f      	movs	r1, #15
 8001a16:	2049      	movs	r0, #73	; 0x49
 8001a18:	f002 fa43 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001a1c:	2049      	movs	r0, #73	; 0x49
 8001a1e:	f002 fa5c 	bl	8003eda <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001a22:	e04d      	b.n	8001ac0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a28      	ldr	r2, [pc, #160]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a40:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001a42:	2312      	movs	r3, #18
 8001a44:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <I2Cx_MspInit+0x15c>)
 8001a5a:	f002 ff8b 	bl	8004974 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	481a      	ldr	r0, [pc, #104]	; (8001ad4 <I2Cx_MspInit+0x15c>)
 8001a6c:	f002 ff82 	bl	8004974 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a92:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <I2Cx_MspInit+0x154>)
 8001a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a9e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	201f      	movs	r0, #31
 8001aa6:	f002 f9fc 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001aaa:	201f      	movs	r0, #31
 8001aac:	f002 fa15 	bl	8003eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	2020      	movs	r0, #32
 8001ab6:	f002 f9f4 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001aba:	2020      	movs	r0, #32
 8001abc:	f002 fa0d 	bl	8003eda <HAL_NVIC_EnableIRQ>
}
 8001ac0:	bf00      	nop
 8001ac2:	3730      	adds	r7, #48	; 0x30
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000248 	.word	0x20000248
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40021c00 	.word	0x40021c00
 8001ad4:	40020400 	.word	0x40020400

08001ad8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f003 fc0d 	bl	8005300 <HAL_I2C_GetState>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d125      	bne.n	8001b38 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <I2Cx_Init+0x68>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d103      	bne.n	8001afc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <I2Cx_Init+0x6c>)
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e002      	b.n	8001b02 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <I2Cx_Init+0x70>)
 8001b00:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <I2Cx_Init+0x74>)
 8001b06:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff23 	bl	8001978 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f003 f8e2 	bl	8004cfc <HAL_I2C_Init>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000248 	.word	0x20000248
 8001b44:	40005c00 	.word	0x40005c00
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40912732 	.word	0x40912732

08001b50 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af04      	add	r7, sp, #16
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	72fb      	strb	r3, [r7, #11]
 8001b62:	460b      	mov	r3, r1
 8001b64:	813b      	strh	r3, [r7, #8]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	b299      	uxth	r1, r3
 8001b72:	88f8      	ldrh	r0, [r7, #6]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4603      	mov	r3, r0
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f003 faa0 	bl	80050cc <HAL_I2C_Mem_Read>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f832 	bl	8001c04 <I2Cx_Error>
  }
  return status;    
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b08a      	sub	sp, #40	; 0x28
 8001bae:	af04      	add	r7, sp, #16
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	72fb      	strb	r3, [r7, #11]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	813b      	strh	r3, [r7, #8]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	88f8      	ldrh	r0, [r7, #6]
 8001bce:	893a      	ldrh	r2, [r7, #8]
 8001bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	4603      	mov	r3, r0
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f003 f95f 	bl	8004ea4 <HAL_I2C_Mem_Write>
 8001be6:	4603      	mov	r3, r0
 8001be8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f805 	bl	8001c04 <I2Cx_Error>
  }
  return status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f003 f903 	bl	8004e1c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff5e 	bl	8001ad8 <I2Cx_Init>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TS_IO_Init+0x10>)
 8001c2a:	f7ff ff55 	bl	8001ad8 <I2Cx_Init>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000248 	.word	0x20000248

08001c38 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	460b      	mov	r3, r1
 8001c44:	71bb      	strb	r3, [r7, #6]
 8001c46:	4613      	mov	r3, r2
 8001c48:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	79f9      	ldrb	r1, [r7, #7]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	1d7b      	adds	r3, r7, #5
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4803      	ldr	r0, [pc, #12]	; (8001c68 <TS_IO_Write+0x30>)
 8001c5c:	f7ff ffa5 	bl	8001baa <I2Cx_WriteMultiple>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000248 	.word	0x20000248

08001c6c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	4603      	mov	r3, r0
 8001c74:	460a      	mov	r2, r1
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	79f9      	ldrb	r1, [r7, #7]
 8001c86:	2301      	movs	r3, #1
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	f107 030f 	add.w	r3, r7, #15
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <TS_IO_Read+0x38>)
 8001c94:	f7ff ff5c 	bl	8001b50 <I2Cx_ReadMultiple>

  return read_value;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000248 	.word	0x20000248

08001ca8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f001 fff9 	bl	8003ca8 <HAL_Delay>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001cc6:	2228      	movs	r2, #40	; 0x28
 8001cc8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001cca:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001ccc:	2209      	movs	r2, #9
 8001cce:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001cd2:	2235      	movs	r2, #53	; 0x35
 8001cd4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001cd8:	220b      	movs	r2, #11
 8001cda:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001cde:	f240 121b 	movw	r2, #283	; 0x11b
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001ce6:	f240 2215 	movw	r2, #533	; 0x215
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001cee:	f240 121d 	movw	r2, #285	; 0x11d
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001cf6:	f240 2235 	movw	r2, #565	; 0x235
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4823      	ldr	r0, [pc, #140]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d00:	f000 fb70 	bl	80023e4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d0e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001d12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <BSP_LCD_Init+0xd0>)
 8001d48:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001d4a:	4810      	ldr	r0, [pc, #64]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d4c:	f001 fa6e 	bl	800322c <HAL_LTDC_GetState>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001d56:	2100      	movs	r1, #0
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d5a:	f000 fa69 	bl	8002230 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001d5e:	480b      	ldr	r0, [pc, #44]	; (8001d8c <BSP_LCD_Init+0xcc>)
 8001d60:	f001 f876 	bl	8002e50 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	480a      	ldr	r0, [pc, #40]	; (8001d94 <BSP_LCD_Init+0xd4>)
 8001d6c:	f002 ffac 	bl	8004cc8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	2108      	movs	r1, #8
 8001d74:	4808      	ldr	r0, [pc, #32]	; (8001d98 <BSP_LCD_Init+0xd8>)
 8001d76:	f002 ffa7 	bl	8004cc8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001d7a:	f000 fc53 	bl	8002624 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001d7e:	4807      	ldr	r0, [pc, #28]	; (8001d9c <BSP_LCD_Init+0xdc>)
 8001d80:	f000 f8a6 	bl	8001ed0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000578 	.word	0x20000578
 8001d90:	40016800 	.word	0x40016800
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40022800 	.word	0x40022800
 8001d9c:	20000000 	.word	0x20000000

08001da0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <BSP_LCD_GetXSize+0x20>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <BSP_LCD_GetXSize+0x24>)
 8001daa:	2134      	movs	r1, #52	; 0x34
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3360      	adds	r3, #96	; 0x60
 8001db4:	681b      	ldr	r3, [r3, #0]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	200002d4 	.word	0x200002d4
 8001dc4:	20000578 	.word	0x20000578

08001dc8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <BSP_LCD_GetYSize+0x20>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <BSP_LCD_GetYSize+0x24>)
 8001dd2:	2134      	movs	r1, #52	; 0x34
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3364      	adds	r3, #100	; 0x64
 8001ddc:	681b      	ldr	r3, [r3, #0]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	200002d4 	.word	0x200002d4
 8001dec:	20000578 	.word	0x20000578

08001df0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b090      	sub	sp, #64	; 0x40
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001e00:	f7ff ffce 	bl	8001da0 <BSP_LCD_GetXSize>
 8001e04:	4603      	mov	r3, r0
 8001e06:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001e0c:	f7ff ffdc 	bl	8001dc8 <BSP_LCD_GetYSize>
 8001e10:	4603      	mov	r3, r0
 8001e12:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8001e1c:	23ff      	movs	r3, #255	; 0xff
 8001e1e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001e40:	f7ff ffae 	bl	8001da0 <BSP_LCD_GetXSize>
 8001e44:	4603      	mov	r3, r0
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001e48:	f7ff ffbe 	bl	8001dc8 <BSP_LCD_GetYSize>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	4619      	mov	r1, r3
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001e5a:	f001 f9a9 	bl	80031b0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001e5e:	88fa      	ldrh	r2, [r7, #6]
 8001e60:	4911      	ldr	r1, [pc, #68]	; (8001ea8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001e74:	88fa      	ldrh	r2, [r7, #6]
 8001e76:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3308      	adds	r3, #8
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <BSP_LCD_LayerDefaultInit+0xbc>)
 8001e86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	3740      	adds	r7, #64	; 0x40
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000578 	.word	0x20000578
 8001ea8:	200002d8 	.word	0x200002d8
 8001eac:	20000000 	.word	0x20000000

08001eb0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <BSP_LCD_SelectLayer+0x1c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
} 
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200002d4 	.word	0x200002d4

08001ed0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <BSP_LCD_SetFont+0x2c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4908      	ldr	r1, [pc, #32]	; (8001f00 <BSP_LCD_SetFont+0x30>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3308      	adds	r3, #8
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	200002d4 	.word	0x200002d4
 8001f00:	200002d8 	.word	0x200002d8

08001f04 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <BSP_LCD_Clear+0x48>)
 8001f0e:	681c      	ldr	r4, [r3, #0]
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <BSP_LCD_Clear+0x48>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <BSP_LCD_Clear+0x4c>)
 8001f16:	2134      	movs	r1, #52	; 0x34
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	335c      	adds	r3, #92	; 0x5c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461d      	mov	r5, r3
 8001f24:	f7ff ff3c 	bl	8001da0 <BSP_LCD_GetXSize>
 8001f28:	4606      	mov	r6, r0
 8001f2a:	f7ff ff4d 	bl	8001dc8 <BSP_LCD_GetYSize>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2300      	movs	r3, #0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	4632      	mov	r2, r6
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f000 fb24 	bl	800258c <LL_FillBuffer>
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4c:	200002d4 	.word	0x200002d4
 8001f50:	20000578 	.word	0x20000578

08001f54 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	80bb      	strh	r3, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <BSP_LCD_DisplayChar+0x80>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	491b      	ldr	r1, [pc, #108]	; (8001fd8 <BSP_LCD_DisplayChar+0x84>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3308      	adds	r3, #8
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <BSP_LCD_DisplayChar+0x80>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4c14      	ldr	r4, [pc, #80]	; (8001fd8 <BSP_LCD_DisplayChar+0x84>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4423      	add	r3, r4
 8001f92:	3308      	adds	r3, #8
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f98:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <BSP_LCD_DisplayChar+0x80>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4c0d      	ldr	r4, [pc, #52]	; (8001fd8 <BSP_LCD_DisplayChar+0x84>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4423      	add	r3, r4
 8001fac:	3308      	adds	r3, #8
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	889b      	ldrh	r3, [r3, #4]
 8001fb2:	3307      	adds	r3, #7
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da00      	bge.n	8001fba <BSP_LCD_DisplayChar+0x66>
 8001fb8:	3307      	adds	r3, #7
 8001fba:	10db      	asrs	r3, r3, #3
 8001fbc:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001fc0:	18ca      	adds	r2, r1, r3
 8001fc2:	88b9      	ldrh	r1, [r7, #4]
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fa28 	bl	800241c <DrawChar>
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}
 8001fd4:	200002d4 	.word	0x200002d4
 8001fd8:	200002d8 	.word	0x200002d8

08001fdc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001fdc:	b5b0      	push	{r4, r5, r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	81fb      	strh	r3, [r7, #14]
 8001fea:	460b      	mov	r3, r1
 8001fec:	81bb      	strh	r3, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	83fb      	strh	r3, [r7, #30]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002006:	e002      	b.n	800200e <BSP_LCD_DisplayStringAt+0x32>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	3301      	adds	r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	617a      	str	r2, [r7, #20]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f6      	bne.n	8002008 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800201a:	f7ff fec1 	bl	8001da0 <BSP_LCD_GetXSize>
 800201e:	4b4f      	ldr	r3, [pc, #316]	; (800215c <BSP_LCD_DisplayStringAt+0x180>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	494f      	ldr	r1, [pc, #316]	; (8002160 <BSP_LCD_DisplayStringAt+0x184>)
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3308      	adds	r3, #8
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	889b      	ldrh	r3, [r3, #4]
 8002034:	fbb0 f3f3 	udiv	r3, r0, r3
 8002038:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d01c      	beq.n	800207a <BSP_LCD_DisplayStringAt+0x9e>
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <BSP_LCD_DisplayStringAt+0x98>
 8002044:	2b01      	cmp	r3, #1
 8002046:	d12e      	bne.n	80020a6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad1      	subs	r1, r2, r3
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <BSP_LCD_DisplayStringAt+0x180>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4843      	ldr	r0, [pc, #268]	; (8002160 <BSP_LCD_DisplayStringAt+0x184>)
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4403      	add	r3, r0
 800205e:	3308      	adds	r3, #8
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	fb03 f301 	mul.w	r3, r3, r1
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	4413      	add	r3, r2
 8002070:	83fb      	strh	r3, [r7, #30]
      break;
 8002072:	e01b      	b.n	80020ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	83fb      	strh	r3, [r7, #30]
      break;
 8002078:	e018      	b.n	80020ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	b299      	uxth	r1, r3
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <BSP_LCD_DisplayStringAt+0x180>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4836      	ldr	r0, [pc, #216]	; (8002160 <BSP_LCD_DisplayStringAt+0x184>)
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4403      	add	r3, r0
 8002092:	3308      	adds	r3, #8
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	889b      	ldrh	r3, [r3, #4]
 8002098:	fb11 f303 	smulbb	r3, r1, r3
 800209c:	b29a      	uxth	r2, r3
 800209e:	89fb      	ldrh	r3, [r7, #14]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	83fb      	strh	r3, [r7, #30]
      break;
 80020a4:	e002      	b.n	80020ac <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80020a6:	89fb      	ldrh	r3, [r7, #14]
 80020a8:	83fb      	strh	r3, [r7, #30]
      break;
 80020aa:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80020ac:	8bfb      	ldrh	r3, [r7, #30]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <BSP_LCD_DisplayStringAt+0xde>
 80020b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da1d      	bge.n	80020f6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80020be:	e01a      	b.n	80020f6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	89b9      	ldrh	r1, [r7, #12]
 80020c6:	8bfb      	ldrh	r3, [r7, #30]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff43 	bl	8001f54 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <BSP_LCD_DisplayStringAt+0x180>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4923      	ldr	r1, [pc, #140]	; (8002160 <BSP_LCD_DisplayStringAt+0x184>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3308      	adds	r3, #8
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	889a      	ldrh	r2, [r3, #4]
 80020e4:	8bfb      	ldrh	r3, [r7, #30]
 80020e6:	4413      	add	r3, r2
 80020e8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
    i++;
 80020f0:	8bbb      	ldrh	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2dc      	uxtb	r4, r3
 8002104:	f7ff fe4c 	bl	8001da0 <BSP_LCD_GetXSize>
 8002108:	4605      	mov	r5, r0
 800210a:	8bb9      	ldrh	r1, [r7, #28]
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <BSP_LCD_DisplayStringAt+0x180>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4813      	ldr	r0, [pc, #76]	; (8002160 <BSP_LCD_DisplayStringAt+0x184>)
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4403      	add	r3, r0
 800211c:	3308      	adds	r3, #8
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	889b      	ldrh	r3, [r3, #4]
 8002122:	fb03 f301 	mul.w	r3, r3, r1
 8002126:	1aeb      	subs	r3, r5, r3
 8002128:	b299      	uxth	r1, r3
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <BSP_LCD_DisplayStringAt+0x180>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	480c      	ldr	r0, [pc, #48]	; (8002160 <BSP_LCD_DisplayStringAt+0x184>)
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4403      	add	r3, r0
 800213a:	3308      	adds	r3, #8
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	889b      	ldrh	r3, [r3, #4]
 8002140:	4299      	cmp	r1, r3
 8002142:	bf2c      	ite	cs
 8002144:	2301      	movcs	r3, #1
 8002146:	2300      	movcc	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4023      	ands	r3, r4
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1b6      	bne.n	80020c0 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bdb0      	pop	{r4, r5, r7, pc}
 800215a:	bf00      	nop
 800215c:	200002d4 	.word	0x200002d4
 8002160:	200002d8 	.word	0x200002d8

08002164 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	603a      	str	r2, [r7, #0]
 800216e:	80fb      	strh	r3, [r7, #6]
 8002170:	460b      	mov	r3, r1
 8002172:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <BSP_LCD_DrawPixel+0x88>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <BSP_LCD_DrawPixel+0x8c>)
 800217a:	2134      	movs	r1, #52	; 0x34
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3348      	adds	r3, #72	; 0x48
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d116      	bne.n	80021b8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <BSP_LCD_DrawPixel+0x88>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <BSP_LCD_DrawPixel+0x8c>)
 8002190:	2134      	movs	r1, #52	; 0x34
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	335c      	adds	r3, #92	; 0x5c
 800219a:	681c      	ldr	r4, [r3, #0]
 800219c:	88bd      	ldrh	r5, [r7, #4]
 800219e:	f7ff fdff 	bl	8001da0 <BSP_LCD_GetXSize>
 80021a2:	4603      	mov	r3, r0
 80021a4:	fb03 f205 	mul.w	r2, r3, r5
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4423      	add	r3, r4
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b292      	uxth	r2, r2
 80021b4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80021b6:	e015      	b.n	80021e4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <BSP_LCD_DrawPixel+0x88>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <BSP_LCD_DrawPixel+0x8c>)
 80021be:	2134      	movs	r1, #52	; 0x34
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	681c      	ldr	r4, [r3, #0]
 80021ca:	88bd      	ldrh	r5, [r7, #4]
 80021cc:	f7ff fde8 	bl	8001da0 <BSP_LCD_GetXSize>
 80021d0:	4603      	mov	r3, r0
 80021d2:	fb03 f205 	mul.w	r2, r3, r5
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4423      	add	r3, r4
 80021de:	461a      	mov	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}
 80021ec:	200002d4 	.word	0x200002d4
 80021f0:	20000578 	.word	0x20000578

080021f4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <BSP_LCD_DisplayOn+0x30>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <BSP_LCD_DisplayOn+0x30>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800220e:	4806      	ldr	r0, [pc, #24]	; (8002228 <BSP_LCD_DisplayOn+0x34>)
 8002210:	f002 fd5a 	bl	8004cc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002214:	2201      	movs	r2, #1
 8002216:	2108      	movs	r1, #8
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <BSP_LCD_DisplayOn+0x38>)
 800221a:	f002 fd55 	bl	8004cc8 <HAL_GPIO_WritePin>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000578 	.word	0x20000578
 8002228:	40022000 	.word	0x40022000
 800222c:	40022800 	.word	0x40022800

08002230 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b090      	sub	sp, #64	; 0x40
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800223a:	4b64      	ldr	r3, [pc, #400]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a63      	ldr	r2, [pc, #396]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b61      	ldr	r3, [pc, #388]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002252:	4b5e      	ldr	r3, [pc, #376]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a5d      	ldr	r2, [pc, #372]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800226a:	4b58      	ldr	r3, [pc, #352]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a57      	ldr	r2, [pc, #348]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002282:	4b52      	ldr	r3, [pc, #328]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a51      	ldr	r2, [pc, #324]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800229a:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a4b      	ldr	r2, [pc, #300]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a45      	ldr	r2, [pc, #276]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b43      	ldr	r3, [pc, #268]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80022ca:	4b40      	ldr	r3, [pc, #256]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80022e2:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a39      	ldr	r2, [pc, #228]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a33      	ldr	r2, [pc, #204]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <BSP_LCD_MspInit+0x19c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002312:	2310      	movs	r3, #16
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800231e:	2302      	movs	r3, #2
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002322:	230e      	movs	r3, #14
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232a:	4619      	mov	r1, r3
 800232c:	4828      	ldr	r0, [pc, #160]	; (80023d0 <BSP_LCD_MspInit+0x1a0>)
 800232e:	f002 fb21 	bl	8004974 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800233c:	2309      	movs	r3, #9
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002344:	4619      	mov	r1, r3
 8002346:	4823      	ldr	r0, [pc, #140]	; (80023d4 <BSP_LCD_MspInit+0x1a4>)
 8002348:	f002 fb14 	bl	8004974 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800234c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002356:	230e      	movs	r3, #14
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800235a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	481d      	ldr	r0, [pc, #116]	; (80023d8 <BSP_LCD_MspInit+0x1a8>)
 8002362:	f002 fb07 	bl	8004974 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002366:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002370:	230e      	movs	r3, #14
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	4818      	ldr	r0, [pc, #96]	; (80023dc <BSP_LCD_MspInit+0x1ac>)
 800237c:	f002 fafa 	bl	8004974 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002380:	23f7      	movs	r3, #247	; 0xf7
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002388:	230e      	movs	r3, #14
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800238c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002390:	4619      	mov	r1, r3
 8002392:	4813      	ldr	r0, [pc, #76]	; (80023e0 <BSP_LCD_MspInit+0x1b0>)
 8002394:	f002 faee 	bl	8004974 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80023a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a6:	4619      	mov	r1, r3
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <BSP_LCD_MspInit+0x1a8>)
 80023aa:	f002 fae3 	bl	8004974 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80023ae:	2308      	movs	r3, #8
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80023b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ba:	4619      	mov	r1, r3
 80023bc:	4808      	ldr	r0, [pc, #32]	; (80023e0 <BSP_LCD_MspInit+0x1b0>)
 80023be:	f002 fad9 	bl	8004974 <HAL_GPIO_Init>
}
 80023c2:	bf00      	nop
 80023c4:	3740      	adds	r7, #64	; 0x40
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40022400 	.word	0x40022400
 80023e0:	40022800 	.word	0x40022800

080023e4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <BSP_LCD_ClockConfig+0x34>)
 80023f0:	2208      	movs	r2, #8
 80023f2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <BSP_LCD_ClockConfig+0x34>)
 80023f6:	22c0      	movs	r2, #192	; 0xc0
 80023f8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <BSP_LCD_ClockConfig+0x34>)
 80023fc:	2205      	movs	r2, #5
 80023fe:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <BSP_LCD_ClockConfig+0x34>)
 8002402:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <BSP_LCD_ClockConfig+0x34>)
 800240a:	f003 fe7f 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200002f0 	.word	0x200002f0

0800241c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	603a      	str	r2, [r7, #0]
 8002426:	80fb      	strh	r3, [r7, #6]
 8002428:	460b      	mov	r3, r1
 800242a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <DrawChar+0x168>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4953      	ldr	r1, [pc, #332]	; (8002588 <DrawChar+0x16c>)
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3308      	adds	r3, #8
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	88db      	ldrh	r3, [r3, #6]
 800244a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <DrawChar+0x168>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	494d      	ldr	r1, [pc, #308]	; (8002588 <DrawChar+0x16c>)
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3308      	adds	r3, #8
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	889b      	ldrh	r3, [r3, #4]
 8002462:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002464:	8a3b      	ldrh	r3, [r7, #16]
 8002466:	3307      	adds	r3, #7
 8002468:	2b00      	cmp	r3, #0
 800246a:	da00      	bge.n	800246e <DrawChar+0x52>
 800246c:	3307      	adds	r3, #7
 800246e:	10db      	asrs	r3, r3, #3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	b2da      	uxtb	r2, r3
 8002476:	8a3b      	ldrh	r3, [r7, #16]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e076      	b.n	8002572 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002484:	8a3b      	ldrh	r3, [r7, #16]
 8002486:	3307      	adds	r3, #7
 8002488:	2b00      	cmp	r3, #0
 800248a:	da00      	bge.n	800248e <DrawChar+0x72>
 800248c:	3307      	adds	r3, #7
 800248e:	10db      	asrs	r3, r3, #3
 8002490:	461a      	mov	r2, r3
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fb03 f302 	mul.w	r3, r3, r2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800249e:	8a3b      	ldrh	r3, [r7, #16]
 80024a0:	3307      	adds	r3, #7
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da00      	bge.n	80024a8 <DrawChar+0x8c>
 80024a6:	3307      	adds	r3, #7
 80024a8:	10db      	asrs	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d002      	beq.n	80024b4 <DrawChar+0x98>
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d004      	beq.n	80024bc <DrawChar+0xa0>
 80024b2:	e00c      	b.n	80024ce <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
      break;
 80024ba:	e016      	b.n	80024ea <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	3201      	adds	r2, #1
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
      break;
 80024cc:	e00d      	b.n	80024ea <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3301      	adds	r3, #1
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	4313      	orrs	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	3202      	adds	r2, #2
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
      break;
 80024e8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	e036      	b.n	800255e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80024f0:	8a3a      	ldrh	r2, [r7, #16]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad2      	subs	r2, r2, r3
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	4413      	add	r3, r2
 80024fa:	3b01      	subs	r3, #1
 80024fc:	2201      	movs	r2, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	461a      	mov	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d012      	beq.n	8002532 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	b29a      	uxth	r2, r3
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	4413      	add	r3, r2
 8002514:	b298      	uxth	r0, r3
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <DrawChar+0x168>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	491b      	ldr	r1, [pc, #108]	; (8002588 <DrawChar+0x16c>)
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	88bb      	ldrh	r3, [r7, #4]
 800252a:	4619      	mov	r1, r3
 800252c:	f7ff fe1a 	bl	8002164 <BSP_LCD_DrawPixel>
 8002530:	e012      	b.n	8002558 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	b29a      	uxth	r2, r3
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	4413      	add	r3, r2
 800253a:	b298      	uxth	r0, r3
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <DrawChar+0x168>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4911      	ldr	r1, [pc, #68]	; (8002588 <DrawChar+0x16c>)
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3304      	adds	r3, #4
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	88bb      	ldrh	r3, [r7, #4]
 8002552:	4619      	mov	r1, r3
 8002554:	f7ff fe06 	bl	8002164 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	3301      	adds	r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	8a3b      	ldrh	r3, [r7, #16]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	429a      	cmp	r2, r3
 8002564:	d3c4      	bcc.n	80024f0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002566:	88bb      	ldrh	r3, [r7, #4]
 8002568:	3301      	adds	r3, #1
 800256a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3301      	adds	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	8a7b      	ldrh	r3, [r7, #18]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	429a      	cmp	r2, r3
 8002578:	d384      	bcc.n	8002484 <DrawChar+0x68>
  }
}
 800257a:	bf00      	nop
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200002d4 	.word	0x200002d4
 8002588:	200002d8 	.word	0x200002d8

0800258c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <LL_FillBuffer+0x88>)
 800259c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025a0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <LL_FillBuffer+0x8c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <LL_FillBuffer+0x90>)
 80025a8:	2134      	movs	r1, #52	; 0x34
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3348      	adds	r3, #72	; 0x48
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d103      	bne.n	80025c0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <LL_FillBuffer+0x88>)
 80025ba:	2202      	movs	r2, #2
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	e002      	b.n	80025c6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <LL_FillBuffer+0x88>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <LL_FillBuffer+0x88>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <LL_FillBuffer+0x88>)
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <LL_FillBuffer+0x94>)
 80025d0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80025d2:	4810      	ldr	r0, [pc, #64]	; (8002614 <LL_FillBuffer+0x88>)
 80025d4:	f001 ff42 	bl	800445c <HAL_DMA2D_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <LL_FillBuffer+0x88>)
 80025e2:	f002 f899 	bl	8004718 <HAL_DMA2D_ConfigLayer>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10e      	bne.n	800260a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69f9      	ldr	r1, [r7, #28]
 80025f6:	4807      	ldr	r0, [pc, #28]	; (8002614 <LL_FillBuffer+0x88>)
 80025f8:	f001 ff7a 	bl	80044f0 <HAL_DMA2D_Start>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002602:	210a      	movs	r1, #10
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <LL_FillBuffer+0x88>)
 8002606:	f001 ff9e 	bl	8004546 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000294 	.word	0x20000294
 8002618:	200002d4 	.word	0x200002d4
 800261c:	20000578 	.word	0x20000578
 8002620:	4002b000 	.word	0x4002b000

08002624 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 800262a:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <BSP_SDRAM_Init+0xb0>)
 800262c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 8002630:	2202      	movs	r2, #2
 8002632:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 8002636:	2207      	movs	r2, #7
 8002638:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800263a:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 800263c:	2204      	movs	r2, #4
 800263e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 8002642:	2207      	movs	r2, #7
 8002644:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 8002648:	2202      	movs	r2, #2
 800264a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800264c:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 800264e:	2202      	movs	r2, #2
 8002650:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 8002654:	2202      	movs	r2, #2
 8002656:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 800265a:	2200      	movs	r2, #0
 800265c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 8002666:	2204      	movs	r2, #4
 8002668:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 800266c:	2210      	movs	r2, #16
 800266e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 8002678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 8002680:	2200      	movs	r2, #0
 8002682:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 8002686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800268a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 800268e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800269a:	2100      	movs	r1, #0
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 800269e:	f000 f87f 	bl	80027a0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80026a2:	490d      	ldr	r1, [pc, #52]	; (80026d8 <BSP_SDRAM_Init+0xb4>)
 80026a4:	480a      	ldr	r0, [pc, #40]	; (80026d0 <BSP_SDRAM_Init+0xac>)
 80026a6:	f001 f83d 	bl	8003724 <HAL_SDRAM_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <BSP_SDRAM_Init+0xb8>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e002      	b.n	80026be <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <BSP_SDRAM_Init+0xb8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80026be:	f240 6003 	movw	r0, #1539	; 0x603
 80026c2:	f000 f80d 	bl	80026e0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <BSP_SDRAM_Init+0xb8>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000620 	.word	0x20000620
 80026d4:	a0000140 	.word	0xa0000140
 80026d8:	20000374 	.word	0x20000374
 80026dc:	20000030 	.word	0x20000030

080026e0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026f4:	2210      	movs	r2, #16
 80026f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002700:	2200      	movs	r2, #0
 8002702:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002708:	4923      	ldr	r1, [pc, #140]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800270a:	4824      	ldr	r0, [pc, #144]	; (800279c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800270c:	f001 f848 	bl	80037a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002710:	2001      	movs	r0, #1
 8002712:	f001 fac9 	bl	8003ca8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002718:	2202      	movs	r2, #2
 800271a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800271e:	2210      	movs	r2, #16
 8002720:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002724:	2201      	movs	r2, #1
 8002726:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800272e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002732:	4919      	ldr	r1, [pc, #100]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002734:	4819      	ldr	r0, [pc, #100]	; (800279c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002736:	f001 f833 	bl	80037a0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800273c:	2203      	movs	r2, #3
 800273e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002742:	2210      	movs	r2, #16
 8002744:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002748:	2208      	movs	r2, #8
 800274a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002756:	4910      	ldr	r1, [pc, #64]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002758:	4810      	ldr	r0, [pc, #64]	; (800279c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800275a:	f001 f821 	bl	80037a0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800275e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002762:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002766:	2204      	movs	r2, #4
 8002768:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800276c:	2210      	movs	r2, #16
 800276e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002772:	2201      	movs	r2, #1
 8002774:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800277a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800277c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002780:	4905      	ldr	r1, [pc, #20]	; (8002798 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002782:	4806      	ldr	r0, [pc, #24]	; (800279c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002784:	f001 f80c 	bl	80037a0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800278c:	f001 f833 	bl	80037f6 <HAL_SDRAM_ProgramRefreshRate>
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000390 	.word	0x20000390
 800279c:	20000620 	.word	0x20000620

080027a0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b090      	sub	sp, #64	; 0x40
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80027aa:	4b70      	ldr	r3, [pc, #448]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	4a6f      	ldr	r2, [pc, #444]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6393      	str	r3, [r2, #56]	; 0x38
 80027b6:	4b6d      	ldr	r3, [pc, #436]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80027c2:	4b6a      	ldr	r3, [pc, #424]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a69      	ldr	r2, [pc, #420]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027da:	4b64      	ldr	r3, [pc, #400]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a63      	ldr	r2, [pc, #396]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f2:	4b5e      	ldr	r3, [pc, #376]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a5d      	ldr	r2, [pc, #372]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b5b      	ldr	r3, [pc, #364]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a57      	ldr	r2, [pc, #348]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b55      	ldr	r3, [pc, #340]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002822:	4b52      	ldr	r3, [pc, #328]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a51      	ldr	r2, [pc, #324]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b4f      	ldr	r3, [pc, #316]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800283a:	4b4c      	ldr	r3, [pc, #304]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a4b      	ldr	r2, [pc, #300]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b49      	ldr	r3, [pc, #292]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002852:	4b46      	ldr	r3, [pc, #280]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a45      	ldr	r2, [pc, #276]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b43      	ldr	r3, [pc, #268]	; (800296c <BSP_SDRAM_MspInit+0x1cc>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800286e:	2301      	movs	r3, #1
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002872:	2302      	movs	r3, #2
 8002874:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002876:	230c      	movs	r3, #12
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800287a:	2308      	movs	r3, #8
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800287e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002882:	4619      	mov	r1, r3
 8002884:	483a      	ldr	r0, [pc, #232]	; (8002970 <BSP_SDRAM_MspInit+0x1d0>)
 8002886:	f002 f875 	bl	8004974 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800288a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002894:	4619      	mov	r1, r3
 8002896:	4837      	ldr	r0, [pc, #220]	; (8002974 <BSP_SDRAM_MspInit+0x1d4>)
 8002898:	f002 f86c 	bl	8004974 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800289c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80028a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a6:	4619      	mov	r1, r3
 80028a8:	4833      	ldr	r0, [pc, #204]	; (8002978 <BSP_SDRAM_MspInit+0x1d8>)
 80028aa:	f002 f863 	bl	8004974 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80028ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80028b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b8:	4619      	mov	r1, r3
 80028ba:	4830      	ldr	r0, [pc, #192]	; (800297c <BSP_SDRAM_MspInit+0x1dc>)
 80028bc:	f002 f85a 	bl	8004974 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80028c0:	f248 1333 	movw	r3, #33075	; 0x8133
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80028c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ca:	4619      	mov	r1, r3
 80028cc:	482c      	ldr	r0, [pc, #176]	; (8002980 <BSP_SDRAM_MspInit+0x1e0>)
 80028ce:	f002 f851 	bl	8004974 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80028d2:	2328      	movs	r3, #40	; 0x28
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80028d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028da:	4619      	mov	r1, r3
 80028dc:	4829      	ldr	r0, [pc, #164]	; (8002984 <BSP_SDRAM_MspInit+0x1e4>)
 80028de:	f002 f849 	bl	8004974 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 80028f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 80028f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002904:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800290c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002910:	2200      	movs	r2, #0
 8002912:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800291a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 800291e:	2200      	movs	r2, #0
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002924:	2203      	movs	r2, #3
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 800292a:	2200      	movs	r2, #0
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <BSP_SDRAM_MspInit+0x1ec>)
 8002938:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002946:	4810      	ldr	r0, [pc, #64]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 8002948:	f001 fc7a 	bl	8004240 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800294c:	480e      	ldr	r0, [pc, #56]	; (8002988 <BSP_SDRAM_MspInit+0x1e8>)
 800294e:	f001 fbc9 	bl	80040e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	210f      	movs	r1, #15
 8002956:	2038      	movs	r0, #56	; 0x38
 8002958:	f001 faa3 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800295c:	2038      	movs	r0, #56	; 0x38
 800295e:	f001 fabc 	bl	8003eda <HAL_NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3740      	adds	r7, #64	; 0x40
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40021400 	.word	0x40021400
 8002980:	40021800 	.word	0x40021800
 8002984:	40021c00 	.word	0x40021c00
 8002988:	200003a0 	.word	0x200003a0
 800298c:	40026410 	.word	0x40026410

08002990 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	460a      	mov	r2, r1
 800299a:	80fb      	strh	r3, [r7, #6]
 800299c:	4613      	mov	r3, r2
 800299e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <BSP_TS_Init+0x68>)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <BSP_TS_Init+0x6c>)
 80029ac:	88bb      	ldrh	r3, [r7, #4]
 80029ae:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <BSP_TS_Init+0x70>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2070      	movs	r0, #112	; 0x70
 80029b6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <BSP_TS_Init+0x70>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2070      	movs	r0, #112	; 0x70
 80029be:	4798      	blx	r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b51      	cmp	r3, #81	; 0x51
 80029c4:	d111      	bne.n	80029ea <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <BSP_TS_Init+0x74>)
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <BSP_TS_Init+0x70>)
 80029ca:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <BSP_TS_Init+0x78>)
 80029ce:	2270      	movs	r2, #112	; 0x70
 80029d0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <BSP_TS_Init+0x7c>)
 80029d4:	2208      	movs	r2, #8
 80029d6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <BSP_TS_Init+0x74>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <BSP_TS_Init+0x78>)
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	b292      	uxth	r2, r2
 80029e4:	4610      	mov	r0, r2
 80029e6:	4798      	blx	r3
 80029e8:	e001      	b.n	80029ee <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80029ea:	2303      	movs	r3, #3
 80029ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000404 	.word	0x20000404
 80029fc:	20000406 	.word	0x20000406
 8002a00:	20000008 	.word	0x20000008
 8002a04:	20000400 	.word	0x20000400
 8002a08:	20000409 	.word	0x20000409
 8002a0c:	20000408 	.word	0x20000408

08002a10 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b097      	sub	sp, #92	; 0x5c
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002a2a:	4b97      	ldr	r3, [pc, #604]	; (8002c88 <BSP_TS_GetState+0x278>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	4a96      	ldr	r2, [pc, #600]	; (8002c8c <BSP_TS_GetState+0x27c>)
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	b292      	uxth	r2, r2
 8002a36:	4610      	mov	r0, r2
 8002a38:	4798      	blx	r3
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 81a8 	beq.w	8002d9c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a50:	e197      	b.n	8002d82 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <BSP_TS_GetState+0x278>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	4a8c      	ldr	r2, [pc, #560]	; (8002c8c <BSP_TS_GetState+0x27c>)
 8002a5a:	7812      	ldrb	r2, [r2, #0]
 8002a5c:	b290      	uxth	r0, r2
 8002a5e:	f107 0120 	add.w	r1, r7, #32
 8002a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a64:	0052      	lsls	r2, r2, #1
 8002a66:	188c      	adds	r4, r1, r2
 8002a68:	f107 0114 	add.w	r1, r7, #20
 8002a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a6e:	0052      	lsls	r2, r2, #1
 8002a70:	440a      	add	r2, r1
 8002a72:	4621      	mov	r1, r4
 8002a74:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8002a76:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <BSP_TS_GetState+0x280>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d11b      	bne.n	8002ab6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8002a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a86:	4413      	add	r3, r2
 8002a88:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002a94:	440b      	add	r3, r1
 8002a96:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <BSP_TS_GetState+0x280>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002aca:	4413      	add	r3, r2
 8002acc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002ad0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ade:	440b      	add	r3, r1
 8002ae0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <BSP_TS_GetState+0x280>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8002af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002af8:	4413      	add	r3, r2
 8002afa:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002afe:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002b0c:	440b      	add	r3, r1
 8002b0e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8002b12:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <BSP_TS_GetState+0x280>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01b      	beq.n	8002b56 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b26:	4413      	add	r3, r2
 8002b28:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002b34:	440b      	add	r3, r1
 8002b36:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b42:	4413      	add	r3, r2
 8002b44:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002b50:	440b      	add	r3, r1
 8002b52:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b5e:	4413      	add	r3, r2
 8002b60:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <BSP_TS_GetState+0x284>)
 8002b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	d90e      	bls.n	8002b90 <BSP_TS_GetState+0x180>
 8002b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002b80:	4944      	ldr	r1, [pc, #272]	; (8002c94 <BSP_TS_GetState+0x284>)
 8002b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	e00d      	b.n	8002bac <BSP_TS_GetState+0x19c>
 8002b90:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <BSP_TS_GetState+0x284>)
 8002b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bb8:	4413      	add	r3, r2
 8002bba:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4a35      	ldr	r2, [pc, #212]	; (8002c98 <BSP_TS_GetState+0x288>)
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	4299      	cmp	r1, r3
 8002bca:	d90e      	bls.n	8002bea <BSP_TS_GetState+0x1da>
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002bda:	492f      	ldr	r1, [pc, #188]	; (8002c98 <BSP_TS_GetState+0x288>)
 8002bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	e00d      	b.n	8002c06 <BSP_TS_GetState+0x1f6>
 8002bea:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <BSP_TS_GetState+0x288>)
 8002bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8002c0a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002c0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c12:	4413      	add	r3, r2
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	dd17      	ble.n	8002c48 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c20:	4413      	add	r3, r2
 8002c22:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c26:	4619      	mov	r1, r3
 8002c28:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <BSP_TS_GetState+0x284>)
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c38:	4413      	add	r3, r2
 8002c3a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <BSP_TS_GetState+0x288>)
 8002c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <BSP_TS_GetState+0x27c>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b70      	cmp	r3, #112	; 0x70
 8002c4e:	d125      	bne.n	8002c9c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c58:	4413      	add	r3, r2
 8002c5a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	460a      	mov	r2, r1
 8002c68:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c72:	4413      	add	r3, r2
 8002c74:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	460a      	mov	r2, r1
 8002c84:	809a      	strh	r2, [r3, #4]
 8002c86:	e02c      	b.n	8002ce2 <BSP_TS_GetState+0x2d2>
 8002c88:	20000400 	.word	0x20000400
 8002c8c:	20000409 	.word	0x20000409
 8002c90:	20000408 	.word	0x20000408
 8002c94:	2000040c 	.word	0x2000040c
 8002c98:	20000420 	.word	0x20000420
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8002c9c:	4b42      	ldr	r3, [pc, #264]	; (8002da8 <BSP_TS_GetState+0x398>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4a42      	ldr	r2, [pc, #264]	; (8002dac <BSP_TS_GetState+0x39c>)
 8002ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	fb03 f301 	mul.w	r3, r3, r1
 8002cae:	0b1b      	lsrs	r3, r3, #12
 8002cb0:	b299      	uxth	r1, r3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	460a      	mov	r2, r1
 8002cbc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <BSP_TS_GetState+0x3a0>)
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <BSP_TS_GetState+0x3a4>)
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ccc:	fb03 f301 	mul.w	r3, r3, r1
 8002cd0:	0b1b      	lsrs	r3, r3, #12
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd8:	3304      	adds	r3, #4
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	460a      	mov	r2, r1
 8002ce0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8002ce2:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <BSP_TS_GetState+0x3a8>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b298      	uxth	r0, r3
 8002ce8:	f107 010c 	add.w	r1, r7, #12
 8002cec:	f107 0210 	add.w	r2, r7, #16
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002cfa:	f7fe fabf 	bl	800127c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	b2d9      	uxtb	r1, r3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d06:	4413      	add	r3, r2
 8002d08:	3316      	adds	r3, #22
 8002d0a:	460a      	mov	r2, r1
 8002d0c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	b2d9      	uxtb	r1, r3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	4413      	add	r3, r2
 8002d18:	3320      	adds	r3, #32
 8002d1a:	460a      	mov	r2, r1
 8002d1c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d827      	bhi.n	8002d74 <BSP_TS_GetState+0x364>
 8002d24:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <BSP_TS_GetState+0x31c>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d4b 	.word	0x08002d4b
 8002d34:	08002d59 	.word	0x08002d59
 8002d38:	08002d67 	.word	0x08002d67
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	4413      	add	r3, r2
 8002d42:	331b      	adds	r3, #27
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
          break;
 8002d48:	e018      	b.n	8002d7c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4e:	4413      	add	r3, r2
 8002d50:	331b      	adds	r3, #27
 8002d52:	2202      	movs	r2, #2
 8002d54:	701a      	strb	r2, [r3, #0]
          break;
 8002d56:	e011      	b.n	8002d7c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5c:	4413      	add	r3, r2
 8002d5e:	331b      	adds	r3, #27
 8002d60:	2203      	movs	r2, #3
 8002d62:	701a      	strb	r2, [r3, #0]
          break;
 8002d64:	e00a      	b.n	8002d7c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6a:	4413      	add	r3, r2
 8002d6c:	331b      	adds	r3, #27
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
          break;
 8002d72:	e003      	b.n	8002d7c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8002d7a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	3301      	adds	r3, #1
 8002d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f4ff ae61 	bcc.w	8002a52 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f813 	bl	8002dbc <BSP_TS_Get_GestureId>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002d9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3754      	adds	r7, #84	; 0x54
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd90      	pop	{r4, r7, pc}
 8002da8:	20000404 	.word	0x20000404
 8002dac:	2000040c 	.word	0x2000040c
 8002db0:	20000406 	.word	0x20000406
 8002db4:	20000420 	.word	0x20000420
 8002db8:	20000409 	.word	0x20000409

08002dbc <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <BSP_TS_Get_GestureId+0x90>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f107 0208 	add.w	r2, r7, #8
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fa36 	bl	800124a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b18      	cmp	r3, #24
 8002de2:	d01b      	beq.n	8002e1c <BSP_TS_Get_GestureId+0x60>
 8002de4:	2b18      	cmp	r3, #24
 8002de6:	d806      	bhi.n	8002df6 <BSP_TS_Get_GestureId+0x3a>
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d00f      	beq.n	8002e0c <BSP_TS_Get_GestureId+0x50>
 8002dec:	2b14      	cmp	r3, #20
 8002dee:	d011      	beq.n	8002e14 <BSP_TS_Get_GestureId+0x58>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <BSP_TS_Get_GestureId+0x48>
 8002df4:	e022      	b.n	8002e3c <BSP_TS_Get_GestureId+0x80>
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d018      	beq.n	8002e2c <BSP_TS_Get_GestureId+0x70>
 8002dfa:	2b49      	cmp	r3, #73	; 0x49
 8002dfc:	d01a      	beq.n	8002e34 <BSP_TS_Get_GestureId+0x78>
 8002dfe:	2b1c      	cmp	r3, #28
 8002e00:	d010      	beq.n	8002e24 <BSP_TS_Get_GestureId+0x68>
 8002e02:	e01b      	b.n	8002e3c <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002e0a:	e01a      	b.n	8002e42 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002e12:	e016      	b.n	8002e42 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002e1a:	e012      	b.n	8002e42 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002e22:	e00e      	b.n	8002e42 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002e2a:	e00a      	b.n	8002e42 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2205      	movs	r2, #5
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002e32:	e006      	b.n	8002e42 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2206      	movs	r2, #6
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002e3a:	e002      	b.n	8002e42 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000409 	.word	0x20000409

08002e50 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0c7      	b.n	8002ffa <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8c2 	bl	8003008 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002e9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6999      	ldr	r1, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002eb0:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <HAL_LTDC_Init+0x1b4>)
 8002ecc:	400b      	ands	r3, r1
 8002ece:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b42      	ldr	r3, [pc, #264]	; (8003004 <HAL_LTDC_Init+0x1b4>)
 8002efa:	400b      	ands	r3, r1
 8002efc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <HAL_LTDC_Init+0x1b4>)
 8002f28:	400b      	ands	r3, r1
 8002f2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	041b      	lsls	r3, r3, #16
 8002f32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6919      	ldr	r1, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6959      	ldr	r1, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <HAL_LTDC_Init+0x1b4>)
 8002f56:	400b      	ands	r3, r1
 8002f58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6959      	ldr	r1, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0204 	orr.w	r2, r2, #4
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0202 	orr.w	r2, r2, #2
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	f000f800 	.word	0xf000f800

08003008 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d025      	beq.n	800307e <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01e      	beq.n	800307e <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2204      	movs	r2, #4
 8003056:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2204      	movs	r2, #4
 800306c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f87b 	bl	8003174 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d025      	beq.n	80030d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01e      	beq.n	80030d8 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0202 	bic.w	r2, r2, #2
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2202      	movs	r2, #2
 80030b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030b8:	f043 0202 	orr.w	r2, r3, #2
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f84e 	bl	8003174 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01d      	beq.n	8003122 <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d016      	beq.n	8003122 <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f833 	bl	8003188 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01d      	beq.n	800316c <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0208 	bic.w	r2, r2, #8
 800314c:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2208      	movs	r2, #8
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f818 	bl	800319c <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_LTDC_ConfigLayer+0x1a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e02c      	b.n	8003224 <HAL_LTDC_ConfigLayer+0x74>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2134      	movs	r1, #52	; 0x34
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f81f 	bl	8003248 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bdb0      	pop	{r4, r5, r7, pc}

0800322c <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800323a:	b2db      	uxtb	r3, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	; 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	4413      	add	r3, r2
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	01db      	lsls	r3, r3, #7
 8003280:	4413      	add	r3, r2
 8003282:	3384      	adds	r3, #132	; 0x84
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	4611      	mov	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	01d2      	lsls	r2, r2, #7
 8003290:	440a      	add	r2, r1
 8003292:	3284      	adds	r2, #132	; 0x84
 8003294:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003298:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	4413      	add	r3, r2
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	01db      	lsls	r3, r3, #7
 80032b8:	440b      	add	r3, r1
 80032ba:	3384      	adds	r3, #132	; 0x84
 80032bc:	4619      	mov	r1, r3
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d2:	4413      	add	r3, r2
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	01db      	lsls	r3, r3, #7
 80032e2:	4413      	add	r3, r2
 80032e4:	3384      	adds	r3, #132	; 0x84
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	4611      	mov	r1, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	01d2      	lsls	r2, r2, #7
 80032f2:	440a      	add	r2, r1
 80032f4:	3284      	adds	r2, #132	; 0x84
 80032f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80032fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330a:	4413      	add	r3, r2
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	01db      	lsls	r3, r3, #7
 8003318:	440b      	add	r3, r1
 800331a:	3384      	adds	r3, #132	; 0x84
 800331c:	4619      	mov	r1, r3
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4313      	orrs	r3, r2
 8003322:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	01db      	lsls	r3, r3, #7
 800332e:	4413      	add	r3, r2
 8003330:	3384      	adds	r3, #132	; 0x84
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	4611      	mov	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	01d2      	lsls	r2, r2, #7
 800333e:	440a      	add	r2, r1
 8003340:	3284      	adds	r2, #132	; 0x84
 8003342:	f023 0307 	bic.w	r3, r3, #7
 8003346:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	01db      	lsls	r3, r3, #7
 8003352:	4413      	add	r3, r2
 8003354:	3384      	adds	r3, #132	; 0x84
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	061b      	lsls	r3, r3, #24
 8003378:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	01db      	lsls	r3, r3, #7
 8003384:	4413      	add	r3, r2
 8003386:	3384      	adds	r3, #132	; 0x84
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	01db      	lsls	r3, r3, #7
 8003394:	4413      	add	r3, r2
 8003396:	3384      	adds	r3, #132	; 0x84
 8003398:	461a      	mov	r2, r3
 800339a:	2300      	movs	r3, #0
 800339c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033a4:	461a      	mov	r2, r3
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4619      	mov	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	01db      	lsls	r3, r3, #7
 80033b8:	440b      	add	r3, r1
 80033ba:	3384      	adds	r3, #132	; 0x84
 80033bc:	4619      	mov	r1, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	01db      	lsls	r3, r3, #7
 80033ce:	4413      	add	r3, r2
 80033d0:	3384      	adds	r3, #132	; 0x84
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4611      	mov	r1, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	01d2      	lsls	r2, r2, #7
 80033de:	440a      	add	r2, r1
 80033e0:	3284      	adds	r2, #132	; 0x84
 80033e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	01db      	lsls	r3, r3, #7
 80033f2:	4413      	add	r3, r2
 80033f4:	3384      	adds	r3, #132	; 0x84
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	01db      	lsls	r3, r3, #7
 8003408:	4413      	add	r3, r2
 800340a:	3384      	adds	r3, #132	; 0x84
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	01db      	lsls	r3, r3, #7
 8003418:	440b      	add	r3, r1
 800341a:	3384      	adds	r3, #132	; 0x84
 800341c:	4619      	mov	r1, r3
 800341e:	4b58      	ldr	r3, [pc, #352]	; (8003580 <LTDC_SetConfig+0x338>)
 8003420:	4013      	ands	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	6809      	ldr	r1, [r1, #0]
 8003430:	4608      	mov	r0, r1
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	01c9      	lsls	r1, r1, #7
 8003436:	4401      	add	r1, r0
 8003438:	3184      	adds	r1, #132	; 0x84
 800343a:	4313      	orrs	r3, r2
 800343c:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4413      	add	r3, r2
 800344a:	3384      	adds	r3, #132	; 0x84
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	01db      	lsls	r3, r3, #7
 8003458:	4413      	add	r3, r2
 800345a:	3384      	adds	r3, #132	; 0x84
 800345c:	461a      	mov	r2, r3
 800345e:	2300      	movs	r3, #0
 8003460:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	01db      	lsls	r3, r3, #7
 800346c:	4413      	add	r3, r2
 800346e:	3384      	adds	r3, #132	; 0x84
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8003480:	2304      	movs	r3, #4
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e01b      	b.n	80034be <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d102      	bne.n	8003494 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 800348e:	2303      	movs	r3, #3
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e014      	b.n	80034be <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d00b      	beq.n	80034b4 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d007      	beq.n	80034b4 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d003      	beq.n	80034b4 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80034b0:	2b07      	cmp	r3, #7
 80034b2:	d102      	bne.n	80034ba <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 80034b4:	2302      	movs	r3, #2
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	e001      	b.n	80034be <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	01db      	lsls	r3, r3, #7
 80034c8:	4413      	add	r3, r2
 80034ca:	3384      	adds	r3, #132	; 0x84
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	4611      	mov	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	01d2      	lsls	r2, r2, #7
 80034d8:	440a      	add	r2, r1
 80034da:	3284      	adds	r2, #132	; 0x84
 80034dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80034e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	041a      	lsls	r2, r3, #16
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1acb      	subs	r3, r1, r3
 80034f8:	69f9      	ldr	r1, [r7, #28]
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	3303      	adds	r3, #3
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	6809      	ldr	r1, [r1, #0]
 8003504:	4608      	mov	r0, r1
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	01c9      	lsls	r1, r1, #7
 800350a:	4401      	add	r1, r0
 800350c:	3184      	adds	r1, #132	; 0x84
 800350e:	4313      	orrs	r3, r2
 8003510:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	01db      	lsls	r3, r3, #7
 800351c:	4413      	add	r3, r2
 800351e:	3384      	adds	r3, #132	; 0x84
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	01db      	lsls	r3, r3, #7
 800352c:	440b      	add	r3, r1
 800352e:	3384      	adds	r3, #132	; 0x84
 8003530:	4619      	mov	r1, r3
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <LTDC_SetConfig+0x33c>)
 8003534:	4013      	ands	r3, r2
 8003536:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	01db      	lsls	r3, r3, #7
 8003542:	4413      	add	r3, r2
 8003544:	3384      	adds	r3, #132	; 0x84
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	01db      	lsls	r3, r3, #7
 8003558:	4413      	add	r3, r2
 800355a:	3384      	adds	r3, #132	; 0x84
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	4611      	mov	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	01d2      	lsls	r2, r2, #7
 8003568:	440a      	add	r2, r1
 800356a:	3284      	adds	r2, #132	; 0x84
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	fffff8f8 	.word	0xfffff8f8
 8003584:	fffff800 	.word	0xfffff800

08003588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_MspInit+0x50>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_MspInit+0x50>)
 8003594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_MspInit+0x50>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_MspInit+0x50>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <HAL_MspInit+0x50>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_MspInit+0x50>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	2100      	movs	r1, #0
 80035c2:	2001      	movs	r0, #1
 80035c4:	f000 fc6d 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80035c8:	2001      	movs	r0, #1
 80035ca:	f000 fc86 	bl	8003eda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <HAL_CRC_MspInit+0x38>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10b      	bne.n	8003606 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_CRC_MspInit+0x3c>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_CRC_MspInit+0x3c>)
 80035f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_CRC_MspInit+0x3c>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023000 	.word	0x40023000
 8003618:	40023800 	.word	0x40023800

0800361c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <HAL_DMA2D_MspInit+0x38>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10b      	bne.n	8003646 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_DMA2D_MspInit+0x3c>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_DMA2D_MspInit+0x3c>)
 8003634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_DMA2D_MspInit+0x3c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	4002b000 	.word	0x4002b000
 8003658:	40023800 	.word	0x40023800

0800365c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_RTC_MspInit+0x2c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d105      	bne.n	800367a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <HAL_RTC_MspInit+0x30>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a06      	ldr	r2, [pc, #24]	; (800368c <HAL_RTC_MspInit+0x30>)
 8003674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40002800 	.word	0x40002800
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d12f      	bne.n	8003712 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_TIM_IC_MspInit+0x8c>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_TIM_IC_MspInit+0x8c>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6413      	str	r3, [r2, #64]	; 0x40
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_TIM_IC_MspInit+0x8c>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_TIM_IC_MspInit+0x8c>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	4a13      	ldr	r2, [pc, #76]	; (800371c <HAL_TIM_IC_MspInit+0x8c>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6313      	str	r3, [r2, #48]	; 0x30
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_TIM_IC_MspInit+0x8c>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036e2:	2301      	movs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ee:	2300      	movs	r3, #0
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036f2:	2301      	movs	r3, #1
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4619      	mov	r1, r3
 80036fc:	4808      	ldr	r0, [pc, #32]	; (8003720 <HAL_TIM_IC_MspInit+0x90>)
 80036fe:	f001 f939 	bl	8004974 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	2100      	movs	r1, #0
 8003706:	201c      	movs	r0, #28
 8003708:	f000 fbcb 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800370c:	201c      	movs	r0, #28
 800370e:	f000 fbe4 	bl	8003eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003712:	bf00      	nop
 8003714:	3728      	adds	r7, #40	; 0x28
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40020000 	.word	0x40020000

08003724 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e025      	b.n	8003784 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f81d 	bl	800378c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 f8ab 	bl	80038c0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	461a      	mov	r2, r3
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	f000 f915 	bl	80039a4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d101      	bne.n	80037bc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
 80037ba:	e018      	b.n	80037ee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f969 	bl	8003aa4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d104      	bne.n	80037e4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2205      	movs	r2, #5
 80037de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80037e2:	e003      	b.n	80037ec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d101      	bne.n	8003810 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	e00e      	b.n	800382e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f961 	bl	8003ae6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800383a:	e7fe      	b.n	800383a <NMI_Handler+0x4>

0800383c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <HardFault_Handler+0x4>

08003842 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003846:	e7fe      	b.n	8003846 <MemManage_Handler+0x4>

08003848 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800384c:	e7fe      	b.n	800384c <BusFault_Handler+0x4>

0800384e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003852:	e7fe      	b.n	8003852 <UsageFault_Handler+0x4>

08003854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003882:	f000 f9f1 	bl	8003c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}

0800388a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800388e:	f001 ff71 	bl	8005774 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <TIM2_IRQHandler+0x10>)
 800389e:	f003 faad 	bl	8006dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000528 	.word	0x20000528

080038ac <LTDC_IRQHandler>:



/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <LTDC_IRQHandler+0x10>)
 80038b2:	f7ff fbb3 	bl	800301c <HAL_LTDC_IRQHandler>
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000578 	.word	0x20000578

080038c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d027      	beq.n	800392a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <FMC_SDRAM_Init+0xe0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80038f0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80038f6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80038fc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8003902:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8003908:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800390e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8003914:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800391a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e032      	b.n	8003990 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003936:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003940:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003946:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <FMC_SDRAM_Init+0xe0>)
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003964:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800396a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8003970:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8003976:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800397c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	ffff8000 	.word	0xffff8000

080039a4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d02e      	beq.n	8003a1c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039ca:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80039da:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80039e4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80039ee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80039f8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003a02:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	e039      	b.n	8003a90 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <FMC_SDRAM_Timing_Init+0xfc>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a4e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003a5e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003a68:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003a72:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	ff0f0fff 	.word	0xff0f0fff

08003aa4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003abc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8003ac6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b14:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <_sbrk+0x5c>)
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <_sbrk+0x60>)
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <_sbrk+0x64>)
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <_sbrk+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <_sbrk+0x64>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d207      	bcs.n	8003b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b3c:	f003 fe1a 	bl	8007774 <__errno>
 8003b40:	4602      	mov	r2, r0
 8003b42:	230c      	movs	r3, #12
 8003b44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	e009      	b.n	8003b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <_sbrk+0x64>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <_sbrk+0x64>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <_sbrk+0x64>)
 8003b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20050000 	.word	0x20050000
 8003b6c:	00000400 	.word	0x00000400
 8003b70:	20000434 	.word	0x20000434
 8003b74:	20000660 	.word	0x20000660

08003b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <SystemInit+0x20>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <SystemInit+0x20>)
 8003b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba0:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ba2:	490e      	ldr	r1, [pc, #56]	; (8003bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ba4:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba8:	e002      	b.n	8003bb0 <LoopCopyDataInit>

08003baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bae:	3304      	adds	r3, #4

08003bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb4:	d3f9      	bcc.n	8003baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bb8:	4c0b      	ldr	r4, [pc, #44]	; (8003be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bbc:	e001      	b.n	8003bc2 <LoopFillZerobss>

08003bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc0:	3204      	adds	r2, #4

08003bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc4:	d3fb      	bcc.n	8003bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bc6:	f7ff ffd7 	bl	8003b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bca:	f003 fdd9 	bl	8007780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bce:	f7fd fc2d 	bl	800142c <main>
  bx  lr    
 8003bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bd4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bdc:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003be0:	0800b5c0 	.word	0x0800b5c0
  ldr r2, =_sbss
 8003be4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003be8:	2000065c 	.word	0x2000065c

08003bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bec:	e7fe      	b.n	8003bec <ADC_IRQHandler>

08003bee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf2:	2003      	movs	r0, #3
 8003bf4:	f000 f94a 	bl	8003e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f000 f805 	bl	8003c08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003bfe:	f7ff fcc3 	bl	8003588 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_InitTick+0x54>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_InitTick+0x58>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f965 	bl	8003ef6 <HAL_SYSTICK_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00e      	b.n	8003c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b0f      	cmp	r3, #15
 8003c3a:	d80a      	bhi.n	8003c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	f000 f92d 	bl	8003ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c48:	4a06      	ldr	r2, [pc, #24]	; (8003c64 <HAL_InitTick+0x5c>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000034 	.word	0x20000034
 8003c60:	2000003c 	.word	0x2000003c
 8003c64:	20000038 	.word	0x20000038

08003c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_IncTick+0x20>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_IncTick+0x24>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <HAL_IncTick+0x24>)
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	2000003c 	.word	0x2000003c
 8003c8c:	20000654 	.word	0x20000654

08003c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return uwTick;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_GetTick+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000654 	.word	0x20000654

08003ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff ffee 	bl	8003c90 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d005      	beq.n	8003cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_Delay+0x40>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cce:	bf00      	nop
 8003cd0:	f7ff ffde 	bl	8003c90 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d8f7      	bhi.n	8003cd0 <HAL_Delay+0x28>
  {
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	2000003c 	.word	0x2000003c

08003cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <__NVIC_SetPriorityGrouping+0x40>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <__NVIC_SetPriorityGrouping+0x44>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d1a:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <__NVIC_SetPriorityGrouping+0x40>)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	60d3      	str	r3, [r2, #12]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00
 8003d30:	05fa0000 	.word	0x05fa0000

08003d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <__NVIC_GetPriorityGrouping+0x18>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	f003 0307 	and.w	r3, r3, #7
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	db0b      	blt.n	8003d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	4907      	ldr	r1, [pc, #28]	; (8003d88 <__NVIC_EnableIRQ+0x38>)
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	2001      	movs	r0, #1
 8003d72:	fa00 f202 	lsl.w	r2, r0, r2
 8003d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	e000e100 	.word	0xe000e100

08003d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	db0a      	blt.n	8003db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	490c      	ldr	r1, [pc, #48]	; (8003dd8 <__NVIC_SetPriority+0x4c>)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	0112      	lsls	r2, r2, #4
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	440b      	add	r3, r1
 8003db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db4:	e00a      	b.n	8003dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4908      	ldr	r1, [pc, #32]	; (8003ddc <__NVIC_SetPriority+0x50>)
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	3b04      	subs	r3, #4
 8003dc4:	0112      	lsls	r2, r2, #4
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	440b      	add	r3, r1
 8003dca:	761a      	strb	r2, [r3, #24]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000e100 	.word	0xe000e100
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f1c3 0307 	rsb	r3, r3, #7
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	bf28      	it	cs
 8003dfe:	2304      	movcs	r3, #4
 8003e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d902      	bls.n	8003e10 <NVIC_EncodePriority+0x30>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3b03      	subs	r3, #3
 8003e0e:	e000      	b.n	8003e12 <NVIC_EncodePriority+0x32>
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	401a      	ands	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e28:	f04f 31ff 	mov.w	r1, #4294967295
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	43d9      	mvns	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	4313      	orrs	r3, r2
         );
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3724      	adds	r7, #36	; 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e58:	d301      	bcc.n	8003e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00f      	b.n	8003e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <SysTick_Config+0x40>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e66:	210f      	movs	r1, #15
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	f7ff ff8e 	bl	8003d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <SysTick_Config+0x40>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <SysTick_Config+0x40>)
 8003e78:	2207      	movs	r2, #7
 8003e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	e000e010 	.word	0xe000e010

08003e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff29 	bl	8003cec <__NVIC_SetPriorityGrouping>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb4:	f7ff ff3e 	bl	8003d34 <__NVIC_GetPriorityGrouping>
 8003eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f7ff ff8e 	bl	8003de0 <NVIC_EncodePriority>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff5d 	bl	8003d8c <__NVIC_SetPriority>
}
 8003ed2:	bf00      	nop
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff31 	bl	8003d50 <__NVIC_EnableIRQ>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff ffa2 	bl	8003e48 <SysTick_Config>
 8003f04:	4603      	mov	r3, r0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e054      	b.n	8003fcc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7f5b      	ldrb	r3, [r3, #29]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fb52 	bl	80035dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	791b      	ldrb	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10c      	bne.n	8003f60 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a22      	ldr	r2, [pc, #136]	; (8003fd4 <HAL_CRC_Init+0xc4>)
 8003f4c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0218 	bic.w	r2, r2, #24
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	e00c      	b.n	8003f7a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6899      	ldr	r1, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f834 	bl	8003fd8 <HAL_CRCEx_Polynomial_Set>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e028      	b.n	8003fcc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	795b      	ldrb	r3, [r3, #5]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	611a      	str	r2, [r3, #16]
 8003f8c:	e004      	b.n	8003f98 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6912      	ldr	r2, [r2, #16]
 8003f96:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	04c11db7 	.word	0x04c11db7

08003fd8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003fe8:	231f      	movs	r3, #31
 8003fea:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003fec:	bf00      	nop
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1e5a      	subs	r2, r3, #1
 8003ff2:	613a      	str	r2, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_CRCEx_Polynomial_Set+0x34>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b18      	cmp	r3, #24
 8004010:	d846      	bhi.n	80040a0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	080040a7 	.word	0x080040a7
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	080040a1 	.word	0x080040a1
 800402c:	080040a1 	.word	0x080040a1
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	08004095 	.word	0x08004095
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	080040a1 	.word	0x080040a1
 8004048:	080040a1 	.word	0x080040a1
 800404c:	080040a1 	.word	0x080040a1
 8004050:	080040a1 	.word	0x080040a1
 8004054:	080040a1 	.word	0x080040a1
 8004058:	08004089 	.word	0x08004089
 800405c:	080040a1 	.word	0x080040a1
 8004060:	080040a1 	.word	0x080040a1
 8004064:	080040a1 	.word	0x080040a1
 8004068:	080040a1 	.word	0x080040a1
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080040a1 	.word	0x080040a1
 8004074:	080040a1 	.word	0x080040a1
 8004078:	0800407d 	.word	0x0800407d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b06      	cmp	r3, #6
 8004080:	d913      	bls.n	80040aa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004086:	e010      	b.n	80040aa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b07      	cmp	r3, #7
 800408c:	d90f      	bls.n	80040ae <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004092:	e00c      	b.n	80040ae <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b0f      	cmp	r3, #15
 8004098:	d90b      	bls.n	80040b2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800409e:	e008      	b.n	80040b2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]
      break;
 80040a4:	e006      	b.n	80040b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040a6:	bf00      	nop
 80040a8:	e004      	b.n	80040b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040aa:	bf00      	nop
 80040ac:	e002      	b.n	80040b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040b2:	bf00      	nop
  }
  if (status == HAL_OK)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 0118 	bic.w	r1, r3, #24
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040f0:	f7ff fdce 	bl	8003c90 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e099      	b.n	8004234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004120:	e00f      	b.n	8004142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004122:	f7ff fdb5 	bl	8003c90 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b05      	cmp	r3, #5
 800412e:	d908      	bls.n	8004142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2203      	movs	r2, #3
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e078      	b.n	8004234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e8      	bne.n	8004122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4b38      	ldr	r3, [pc, #224]	; (800423c <HAL_DMA_Init+0x158>)
 800415c:	4013      	ands	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800416e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2b04      	cmp	r3, #4
 800419a:	d107      	bne.n	80041ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	4313      	orrs	r3, r2
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d117      	bne.n	8004206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f8bd 	bl	8004368 <DMA_CheckFifoParam>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004202:	2301      	movs	r3, #1
 8004204:	e016      	b.n	8004234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f874 	bl	80042fc <DMA_CalcBaseAndBitshift>
 8004214:	4603      	mov	r3, r0
 8004216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	223f      	movs	r2, #63	; 0x3f
 800421e:	409a      	lsls	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	f010803f 	.word	0xf010803f

08004240 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e050      	b.n	80042f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d101      	bne.n	8004262 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
 8004260:	e048      	b.n	80042f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2221      	movs	r2, #33	; 0x21
 80042a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f82a 	bl	80042fc <DMA_CalcBaseAndBitshift>
 80042a8:	4603      	mov	r3, r0
 80042aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	223f      	movs	r2, #63	; 0x3f
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3b10      	subs	r3, #16
 800430c:	4a13      	ldr	r2, [pc, #76]	; (800435c <DMA_CalcBaseAndBitshift+0x60>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	091b      	lsrs	r3, r3, #4
 8004314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <DMA_CalcBaseAndBitshift+0x64>)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d908      	bls.n	800433c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <DMA_CalcBaseAndBitshift+0x68>)
 8004332:	4013      	ands	r3, r2
 8004334:	1d1a      	adds	r2, r3, #4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	659a      	str	r2, [r3, #88]	; 0x58
 800433a:	e006      	b.n	800434a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <DMA_CalcBaseAndBitshift+0x68>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	aaaaaaab 	.word	0xaaaaaaab
 8004360:	0800b34c 	.word	0x0800b34c
 8004364:	fffffc00 	.word	0xfffffc00

08004368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11f      	bne.n	80043c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d855      	bhi.n	8004434 <DMA_CheckFifoParam+0xcc>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <DMA_CheckFifoParam+0x28>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043b3 	.word	0x080043b3
 8004398:	080043a1 	.word	0x080043a1
 800439c:	08004435 	.word	0x08004435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d045      	beq.n	8004438 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b0:	e042      	b.n	8004438 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ba:	d13f      	bne.n	800443c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c0:	e03c      	b.n	800443c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d121      	bne.n	8004410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d836      	bhi.n	8004440 <DMA_CheckFifoParam+0xd8>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <DMA_CheckFifoParam+0x70>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043ef 	.word	0x080043ef
 80043e0:	080043e9 	.word	0x080043e9
 80043e4:	08004401 	.word	0x08004401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      break;
 80043ec:	e02f      	b.n	800444e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d024      	beq.n	8004444 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fe:	e021      	b.n	8004444 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004408:	d11e      	bne.n	8004448 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800440e:	e01b      	b.n	8004448 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d902      	bls.n	800441c <DMA_CheckFifoParam+0xb4>
 8004416:	2b03      	cmp	r3, #3
 8004418:	d003      	beq.n	8004422 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800441a:	e018      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e015      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00e      	beq.n	800444c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      break;
 8004432:	e00b      	b.n	800444c <DMA_CheckFifoParam+0xe4>
      break;
 8004434:	bf00      	nop
 8004436:	e00a      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      break;
 8004438:	bf00      	nop
 800443a:	e008      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      break;
 800443c:	bf00      	nop
 800443e:	e006      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      break;
 8004440:	bf00      	nop
 8004442:	e004      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      break;
 8004444:	bf00      	nop
 8004446:	e002      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      break;   
 8004448:	bf00      	nop
 800444a:	e000      	b.n	800444e <DMA_CheckFifoParam+0xe6>
      break;
 800444c:	bf00      	nop
    }
  } 
  
  return status; 
 800444e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e039      	b.n	80044e2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff f8ca 	bl	800361c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	f023 0107 	bic.w	r1, r3, #7
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_DMA2D_Init+0x90>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68d1      	ldr	r1, [r2, #12]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	ffffc000 	.word	0xffffc000

080044f0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_DMA2D_Start+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e018      	b.n	800453e <HAL_DMA2D_Start+0x4e>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f988 	bl	800483c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d056      	beq.n	8004610 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004562:	f7ff fb95 	bl	8003c90 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004568:	e04b      	b.n	8004602 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004578:	2b00      	cmp	r3, #0
 800457a:	d023      	beq.n	80045c4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	f043 0201 	orr.w	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2221      	movs	r2, #33	; 0x21
 80045ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2204      	movs	r2, #4
 80045b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0a5      	b.n	8004710 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d01a      	beq.n	8004602 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045cc:	f7ff fb60 	bl	8003c90 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d302      	bcc.n	80045e2 <HAL_DMA2D_PollForTransfer+0x9c>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10f      	bne.n	8004602 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2203      	movs	r2, #3
 80045f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e086      	b.n	8004710 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ac      	beq.n	800456a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d061      	beq.n	80046f6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004632:	f7ff fb2d 	bl	8003c90 <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004638:	e056      	b.n	80046e8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02e      	beq.n	80046aa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2229      	movs	r2, #41	; 0x29
 8004694:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e032      	b.n	8004710 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d01a      	beq.n	80046e8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7ff faed 	bl	8003c90 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <HAL_DMA2D_PollForTransfer+0x182>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10f      	bne.n	80046e8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2203      	movs	r2, #3
 80046d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e013      	b.n	8004710 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0a1      	beq.n	800463a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2212      	movs	r2, #18
 80046fc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_DMA2D_ConfigLayer+0x20>
 8004734:	2302      	movs	r3, #2
 8004736:	e079      	b.n	800482c <HAL_DMA2D_ConfigLayer+0x114>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	3318      	adds	r3, #24
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004762:	4b35      	ldr	r3, [pc, #212]	; (8004838 <HAL_DMA2D_ConfigLayer+0x120>)
 8004764:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b0a      	cmp	r3, #10
 800476c:	d003      	beq.n	8004776 <HAL_DMA2D_ConfigLayer+0x5e>
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b09      	cmp	r3, #9
 8004774:	d107      	bne.n	8004786 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e005      	b.n	8004792 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d120      	bne.n	80047da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	ea02 0103 	and.w	r1, r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b0a      	cmp	r3, #10
 80047c0:	d003      	beq.n	80047ca <HAL_DMA2D_ConfigLayer+0xb2>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b09      	cmp	r3, #9
 80047c8:	d127      	bne.n	800481a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
 80047d8:	e01f      	b.n	800481a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	43db      	mvns	r3, r3
 80047e4:	ea02 0103 	and.w	r1, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b0a      	cmp	r3, #10
 8004802:	d003      	beq.n	800480c <HAL_DMA2D_ConfigLayer+0xf4>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b09      	cmp	r3, #9
 800480a:	d106      	bne.n	800481a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004818:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	ff03000f 	.word	0xff03000f

0800483c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800483c:	b480      	push	{r7}
 800483e:	b08b      	sub	sp, #44	; 0x2c
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	041a      	lsls	r2, r3, #16
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	431a      	orrs	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004874:	d174      	bne.n	8004960 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800487c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004884:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800488c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d108      	bne.n	80048ae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	e053      	b.n	8004956 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d106      	bne.n	80048c4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	e048      	b.n	8004956 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d111      	bne.n	80048f0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	0cdb      	lsrs	r3, r3, #19
 80048d0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	0a9b      	lsrs	r3, r3, #10
 80048d6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	08db      	lsrs	r3, r3, #3
 80048dc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	02db      	lsls	r3, r3, #11
 80048e6:	4313      	orrs	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	e032      	b.n	8004956 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d117      	bne.n	8004928 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	0fdb      	lsrs	r3, r3, #31
 80048fc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	0cdb      	lsrs	r3, r3, #19
 8004902:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	0adb      	lsrs	r3, r3, #11
 8004908:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	08db      	lsrs	r3, r3, #3
 800490e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	431a      	orrs	r2, r3
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	03db      	lsls	r3, r3, #15
 800491e:	4313      	orrs	r3, r2
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	e016      	b.n	8004956 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	0f1b      	lsrs	r3, r3, #28
 800492c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	0d1b      	lsrs	r3, r3, #20
 8004932:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	0b1b      	lsrs	r3, r3, #12
 8004938:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	011a      	lsls	r2, r3, #4
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	431a      	orrs	r2, r3
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	4313      	orrs	r3, r2
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800495e:	e003      	b.n	8004968 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	60da      	str	r2, [r3, #12]
}
 8004968:	bf00      	nop
 800496a:	372c      	adds	r7, #44	; 0x2c
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	; 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e175      	b.n	8004c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004994:	2201      	movs	r2, #1
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f040 8164 	bne.w	8004c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d00b      	beq.n	80049d2 <HAL_GPIO_Init+0x5e>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d007      	beq.n	80049d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c6:	2b11      	cmp	r3, #17
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b12      	cmp	r3, #18
 80049d0:	d130      	bne.n	8004a34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 0201 	and.w	r2, r3, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x100>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d123      	bne.n	8004abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3208      	adds	r2, #8
 8004a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	220f      	movs	r2, #15
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	08da      	lsrs	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3208      	adds	r2, #8
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80be 	beq.w	8004c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_GPIO_Init+0x320>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	4a64      	ldr	r2, [pc, #400]	; (8004c94 <HAL_GPIO_Init+0x320>)
 8004b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b08:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0a:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <HAL_GPIO_Init+0x320>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b16:	4a60      	ldr	r2, [pc, #384]	; (8004c98 <HAL_GPIO_Init+0x324>)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	220f      	movs	r2, #15
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a57      	ldr	r2, [pc, #348]	; (8004c9c <HAL_GPIO_Init+0x328>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d037      	beq.n	8004bb2 <HAL_GPIO_Init+0x23e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a56      	ldr	r2, [pc, #344]	; (8004ca0 <HAL_GPIO_Init+0x32c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d031      	beq.n	8004bae <HAL_GPIO_Init+0x23a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a55      	ldr	r2, [pc, #340]	; (8004ca4 <HAL_GPIO_Init+0x330>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02b      	beq.n	8004baa <HAL_GPIO_Init+0x236>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a54      	ldr	r2, [pc, #336]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d025      	beq.n	8004ba6 <HAL_GPIO_Init+0x232>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a53      	ldr	r2, [pc, #332]	; (8004cac <HAL_GPIO_Init+0x338>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01f      	beq.n	8004ba2 <HAL_GPIO_Init+0x22e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a52      	ldr	r2, [pc, #328]	; (8004cb0 <HAL_GPIO_Init+0x33c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d019      	beq.n	8004b9e <HAL_GPIO_Init+0x22a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a51      	ldr	r2, [pc, #324]	; (8004cb4 <HAL_GPIO_Init+0x340>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_GPIO_Init+0x226>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a50      	ldr	r2, [pc, #320]	; (8004cb8 <HAL_GPIO_Init+0x344>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00d      	beq.n	8004b96 <HAL_GPIO_Init+0x222>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a4f      	ldr	r2, [pc, #316]	; (8004cbc <HAL_GPIO_Init+0x348>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <HAL_GPIO_Init+0x21e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a4e      	ldr	r2, [pc, #312]	; (8004cc0 <HAL_GPIO_Init+0x34c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_GPIO_Init+0x21a>
 8004b8a:	2309      	movs	r3, #9
 8004b8c:	e012      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b8e:	230a      	movs	r3, #10
 8004b90:	e010      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b92:	2308      	movs	r3, #8
 8004b94:	e00e      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b96:	2307      	movs	r3, #7
 8004b98:	e00c      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b9a:	2306      	movs	r3, #6
 8004b9c:	e00a      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004b9e:	2305      	movs	r3, #5
 8004ba0:	e008      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	e006      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e004      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e002      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <HAL_GPIO_Init+0x240>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	f002 0203 	and.w	r2, r2, #3
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	4093      	lsls	r3, r2
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004bc4:	4934      	ldr	r1, [pc, #208]	; (8004c98 <HAL_GPIO_Init+0x324>)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bd2:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf6:	4a33      	ldr	r2, [pc, #204]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bfc:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c20:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c50:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c74:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <HAL_GPIO_Init+0x350>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	f67f ae86 	bls.w	8004994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3724      	adds	r7, #36	; 0x24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40013800 	.word	0x40013800
 8004c9c:	40020000 	.word	0x40020000
 8004ca0:	40020400 	.word	0x40020400
 8004ca4:	40020800 	.word	0x40020800
 8004ca8:	40020c00 	.word	0x40020c00
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40021400 	.word	0x40021400
 8004cb4:	40021800 	.word	0x40021800
 8004cb8:	40021c00 	.word	0x40021c00
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	40022400 	.word	0x40022400
 8004cc4:	40013c00 	.word	0x40013c00

08004cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	807b      	strh	r3, [r7, #2]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cd8:	787b      	ldrb	r3, [r7, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ce4:	e003      	b.n	8004cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	041a      	lsls	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	619a      	str	r2, [r3, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e07f      	b.n	8004e0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f8a9 	bl	8004e7a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d107      	bne.n	8004d76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	e006      	b.n	8004d84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d104      	bne.n	8004d96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_I2C_Init+0x11c>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	ea42 0103 	orr.w	r1, r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69d9      	ldr	r1, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1a      	ldr	r2, [r3, #32]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	02008000 	.word	0x02008000

08004e1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e021      	b.n	8004e72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2224      	movs	r2, #36	; 0x24
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f821 	bl	8004e8e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	817b      	strh	r3, [r7, #10]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	813b      	strh	r3, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	f040 80f9 	bne.w	80050be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_I2C_Mem_Write+0x34>
 8004ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d105      	bne.n	8004ee4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0ed      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_I2C_Mem_Write+0x4e>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e0e6      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004efa:	f7fe fec9 	bl	8003c90 <HAL_GetTick>
 8004efe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2319      	movs	r3, #25
 8004f06:	2201      	movs	r2, #1
 8004f08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fad1 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0d1      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2221      	movs	r2, #33	; 0x21
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2240      	movs	r2, #64	; 0x40
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f44:	88f8      	ldrh	r0, [r7, #6]
 8004f46:	893a      	ldrh	r2, [r7, #8]
 8004f48:	8979      	ldrh	r1, [r7, #10]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	4603      	mov	r3, r0
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f9e1 	bl	800531c <I2C_RequestMemoryWrite>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0a9      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2bff      	cmp	r3, #255	; 0xff
 8004f74:	d90e      	bls.n	8004f94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	8979      	ldrh	r1, [r7, #10]
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fbb3 	bl	80056f8 <I2C_TransferConfig>
 8004f92:	e00f      	b.n	8004fb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	8979      	ldrh	r1, [r7, #10]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fba2 	bl	80056f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fabb 	bl	8005534 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e07b      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d034      	beq.n	800506c <HAL_I2C_Mem_Write+0x1c8>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d130      	bne.n	800506c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	2200      	movs	r2, #0
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fa4d 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e04d      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2bff      	cmp	r3, #255	; 0xff
 800502c:	d90e      	bls.n	800504c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	22ff      	movs	r2, #255	; 0xff
 8005032:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	b2da      	uxtb	r2, r3
 800503a:	8979      	ldrh	r1, [r7, #10]
 800503c:	2300      	movs	r3, #0
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fb57 	bl	80056f8 <I2C_TransferConfig>
 800504a:	e00f      	b.n	800506c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	b2da      	uxtb	r2, r3
 800505c:	8979      	ldrh	r1, [r7, #10]
 800505e:	2300      	movs	r3, #0
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fb46 	bl	80056f8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d19e      	bne.n	8004fb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fa9a 	bl	80055b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e01a      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2220      	movs	r2, #32
 8005090:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6859      	ldr	r1, [r3, #4]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <HAL_I2C_Mem_Write+0x224>)
 800509e:	400b      	ands	r3, r1
 80050a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	fe00e800 	.word	0xfe00e800

080050cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	4608      	mov	r0, r1
 80050d6:	4611      	mov	r1, r2
 80050d8:	461a      	mov	r2, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	817b      	strh	r3, [r7, #10]
 80050de:	460b      	mov	r3, r1
 80050e0:	813b      	strh	r3, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	f040 80fd 	bne.w	80052ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_I2C_Mem_Read+0x34>
 80050fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d105      	bne.n	800510c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0f1      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_I2C_Mem_Read+0x4e>
 8005116:	2302      	movs	r3, #2
 8005118:	e0ea      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005122:	f7fe fdb5 	bl	8003c90 <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2319      	movs	r3, #25
 800512e:	2201      	movs	r2, #1
 8005130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f9bd 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0d5      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2222      	movs	r2, #34	; 0x22
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2240      	movs	r2, #64	; 0x40
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800516c:	88f8      	ldrh	r0, [r7, #6]
 800516e:	893a      	ldrh	r2, [r7, #8]
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	4603      	mov	r3, r0
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f921 	bl	80053c4 <I2C_RequestMemoryRead>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0ad      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2bff      	cmp	r3, #255	; 0xff
 800519c:	d90e      	bls.n	80051bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	22ff      	movs	r2, #255	; 0xff
 80051a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	8979      	ldrh	r1, [r7, #10]
 80051ac:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <HAL_I2C_Mem_Read+0x22c>)
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fa9f 	bl	80056f8 <I2C_TransferConfig>
 80051ba:	e00f      	b.n	80051dc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	8979      	ldrh	r1, [r7, #10]
 80051ce:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_I2C_Mem_Read+0x22c>)
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fa8e 	bl	80056f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	2200      	movs	r2, #0
 80051e4:	2104      	movs	r1, #4
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f964 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e07c      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d034      	beq.n	800529c <HAL_I2C_Mem_Read+0x1d0>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	d130      	bne.n	800529c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	2200      	movs	r2, #0
 8005242:	2180      	movs	r1, #128	; 0x80
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f935 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e04d      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	2bff      	cmp	r3, #255	; 0xff
 800525c:	d90e      	bls.n	800527c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	22ff      	movs	r2, #255	; 0xff
 8005262:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	b2da      	uxtb	r2, r3
 800526a:	8979      	ldrh	r1, [r7, #10]
 800526c:	2300      	movs	r3, #0
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fa3f 	bl	80056f8 <I2C_TransferConfig>
 800527a:	e00f      	b.n	800529c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	b2da      	uxtb	r2, r3
 800528c:	8979      	ldrh	r1, [r7, #10]
 800528e:	2300      	movs	r3, #0
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fa2e 	bl	80056f8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d19a      	bne.n	80051dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f982 	bl	80055b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e01a      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2220      	movs	r2, #32
 80052c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_I2C_Mem_Read+0x230>)
 80052ce:	400b      	ands	r3, r1
 80052d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	80002400 	.word	0x80002400
 80052fc:	fe00e800 	.word	0xfe00e800

08005300 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530e:	b2db      	uxtb	r3, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	461a      	mov	r2, r3
 800532a:	4603      	mov	r3, r0
 800532c:	817b      	strh	r3, [r7, #10]
 800532e:	460b      	mov	r3, r1
 8005330:	813b      	strh	r3, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <I2C_RequestMemoryWrite+0xa4>)
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f9d7 	bl	80056f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	69b9      	ldr	r1, [r7, #24]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8f0 	bl	8005534 <I2C_WaitOnTXISFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e02c      	b.n	80053b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d105      	bne.n	8005370 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005364:	893b      	ldrh	r3, [r7, #8]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
 800536e:	e015      	b.n	800539c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005370:	893b      	ldrh	r3, [r7, #8]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	b29b      	uxth	r3, r3
 8005376:	b2da      	uxtb	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	69b9      	ldr	r1, [r7, #24]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f8d6 	bl	8005534 <I2C_WaitOnTXISFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e012      	b.n	80053b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005392:	893b      	ldrh	r3, [r7, #8]
 8005394:	b2da      	uxtb	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2180      	movs	r1, #128	; 0x80
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f884 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	80002000 	.word	0x80002000

080053c4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	461a      	mov	r2, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	817b      	strh	r3, [r7, #10]
 80053d6:	460b      	mov	r3, r1
 80053d8:	813b      	strh	r3, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	8979      	ldrh	r1, [r7, #10]
 80053e4:	4b20      	ldr	r3, [pc, #128]	; (8005468 <I2C_RequestMemoryRead+0xa4>)
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2300      	movs	r3, #0
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f984 	bl	80056f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	69b9      	ldr	r1, [r7, #24]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f89d 	bl	8005534 <I2C_WaitOnTXISFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e02c      	b.n	800545e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d105      	bne.n	8005416 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800540a:	893b      	ldrh	r3, [r7, #8]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28
 8005414:	e015      	b.n	8005442 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005416:	893b      	ldrh	r3, [r7, #8]
 8005418:	0a1b      	lsrs	r3, r3, #8
 800541a:	b29b      	uxth	r3, r3
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	69b9      	ldr	r1, [r7, #24]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f883 	bl	8005534 <I2C_WaitOnTXISFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e012      	b.n	800545e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005438:	893b      	ldrh	r3, [r7, #8]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2200      	movs	r2, #0
 800544a:	2140      	movs	r1, #64	; 0x40
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f831 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	80002000 	.word	0x80002000

0800546c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b02      	cmp	r3, #2
 8005480:	d103      	bne.n	800548a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2200      	movs	r2, #0
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b01      	cmp	r3, #1
 8005496:	d007      	beq.n	80054a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	619a      	str	r2, [r3, #24]
  }
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c4:	e022      	b.n	800550c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d01e      	beq.n	800550c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fe fbdf 	bl	8003c90 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d113      	bne.n	800550c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e00f      	b.n	800552c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4013      	ands	r3, r2
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	429a      	cmp	r2, r3
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	429a      	cmp	r2, r3
 8005528:	d0cd      	beq.n	80054c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005540:	e02c      	b.n	800559c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f870 	bl	800562c <I2C_IsAcknowledgeFailed>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e02a      	b.n	80055ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d01e      	beq.n	800559c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fe fb97 	bl	8003c90 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d113      	bne.n	800559c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e007      	b.n	80055ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d1cb      	bne.n	8005542 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c0:	e028      	b.n	8005614 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f830 	bl	800562c <I2C_IsAcknowledgeFailed>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e026      	b.n	8005624 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fe fb5b 	bl	8003c90 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d113      	bne.n	8005614 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e007      	b.n	8005624 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b20      	cmp	r3, #32
 8005620:	d1cf      	bne.n	80055c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b10      	cmp	r3, #16
 8005644:	d151      	bne.n	80056ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005646:	e022      	b.n	800568e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d01e      	beq.n	800568e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005650:	f7fe fb1e 	bl	8003c90 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <I2C_IsAcknowledgeFailed+0x3a>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d113      	bne.n	800568e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e02e      	b.n	80056ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b20      	cmp	r3, #32
 800569a:	d1d5      	bne.n	8005648 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2210      	movs	r2, #16
 80056a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2220      	movs	r2, #32
 80056aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff fedd 	bl	800546c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80056be:	400b      	ands	r3, r1
 80056c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f043 0204 	orr.w	r2, r3, #4
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	fe00e800 	.word	0xfe00e800

080056f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	460b      	mov	r3, r1
 8005704:	817b      	strh	r3, [r7, #10]
 8005706:	4613      	mov	r3, r2
 8005708:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	0d5b      	lsrs	r3, r3, #21
 8005714:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005718:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <I2C_TransferConfig+0x58>)
 800571a:	430b      	orrs	r3, r1
 800571c:	43db      	mvns	r3, r3
 800571e:	ea02 0103 	and.w	r1, r2, r3
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005728:	7a7b      	ldrb	r3, [r7, #9]
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	431a      	orrs	r2, r3
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	03ff63ff 	.word	0x03ff63ff

08005754 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005758:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a04      	ldr	r2, [pc, #16]	; (8005770 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800575e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40007000 	.word	0x40007000

08005774 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <HAL_PWR_PVD_IRQHandler+0x20>)
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005784:	f000 f808 	bl	8005798 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <HAL_PWR_PVD_IRQHandler+0x20>)
 800578a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800578e:	615a      	str	r2, [r3, #20]
  }
}
 8005790:	bf00      	nop
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40013c00 	.word	0x40013c00

08005798 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800579c:	bf00      	nop
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80057b2:	4b23      	ldr	r3, [pc, #140]	; (8005840 <HAL_PWREx_EnableOverDrive+0x98>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4a22      	ldr	r2, [pc, #136]	; (8005840 <HAL_PWREx_EnableOverDrive+0x98>)
 80057b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6413      	str	r3, [r2, #64]	; 0x40
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_PWREx_EnableOverDrive+0x98>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80057ca:	4b1e      	ldr	r3, [pc, #120]	; (8005844 <HAL_PWREx_EnableOverDrive+0x9c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <HAL_PWREx_EnableOverDrive+0x9c>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057d6:	f7fe fa5b 	bl	8003c90 <HAL_GetTick>
 80057da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057dc:	e009      	b.n	80057f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057de:	f7fe fa57 	bl	8003c90 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ec:	d901      	bls.n	80057f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e022      	b.n	8005838 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057f2:	4b14      	ldr	r3, [pc, #80]	; (8005844 <HAL_PWREx_EnableOverDrive+0x9c>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fe:	d1ee      	bne.n	80057de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005800:	4b10      	ldr	r3, [pc, #64]	; (8005844 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a0f      	ldr	r2, [pc, #60]	; (8005844 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800580c:	f7fe fa40 	bl	8003c90 <HAL_GetTick>
 8005810:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005812:	e009      	b.n	8005828 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005814:	f7fe fa3c 	bl	8003c90 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005822:	d901      	bls.n	8005828 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e007      	b.n	8005838 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <HAL_PWREx_EnableOverDrive+0x9c>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005834:	d1ee      	bne.n	8005814 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40023800 	.word	0x40023800
 8005844:	40007000 	.word	0x40007000

08005848 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005850:	2300      	movs	r3, #0
 8005852:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e291      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8087 	beq.w	800597a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800586c:	4b96      	ldr	r3, [pc, #600]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b04      	cmp	r3, #4
 8005876:	d00c      	beq.n	8005892 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005878:	4b93      	ldr	r3, [pc, #588]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b08      	cmp	r3, #8
 8005882:	d112      	bne.n	80058aa <HAL_RCC_OscConfig+0x62>
 8005884:	4b90      	ldr	r3, [pc, #576]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005890:	d10b      	bne.n	80058aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005892:	4b8d      	ldr	r3, [pc, #564]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d06c      	beq.n	8005978 <HAL_RCC_OscConfig+0x130>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d168      	bne.n	8005978 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e26b      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b2:	d106      	bne.n	80058c2 <HAL_RCC_OscConfig+0x7a>
 80058b4:	4b84      	ldr	r3, [pc, #528]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a83      	ldr	r2, [pc, #524]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	e02e      	b.n	8005920 <HAL_RCC_OscConfig+0xd8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x9c>
 80058ca:	4b7f      	ldr	r3, [pc, #508]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7e      	ldr	r2, [pc, #504]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4b7c      	ldr	r3, [pc, #496]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a7b      	ldr	r2, [pc, #492]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e01d      	b.n	8005920 <HAL_RCC_OscConfig+0xd8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ec:	d10c      	bne.n	8005908 <HAL_RCC_OscConfig+0xc0>
 80058ee:	4b76      	ldr	r3, [pc, #472]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a75      	ldr	r2, [pc, #468]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4b73      	ldr	r3, [pc, #460]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a72      	ldr	r2, [pc, #456]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e00b      	b.n	8005920 <HAL_RCC_OscConfig+0xd8>
 8005908:	4b6f      	ldr	r3, [pc, #444]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a6e      	ldr	r2, [pc, #440]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a6b      	ldr	r2, [pc, #428]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 800591a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800591e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d013      	beq.n	8005950 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fe f9b2 	bl	8003c90 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005930:	f7fe f9ae 	bl	8003c90 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b64      	cmp	r3, #100	; 0x64
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e21f      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005942:	4b61      	ldr	r3, [pc, #388]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0f0      	beq.n	8005930 <HAL_RCC_OscConfig+0xe8>
 800594e:	e014      	b.n	800597a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fe f99e 	bl	8003c90 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005958:	f7fe f99a 	bl	8003c90 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b64      	cmp	r3, #100	; 0x64
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e20b      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800596a:	4b57      	ldr	r3, [pc, #348]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x110>
 8005976:	e000      	b.n	800597a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d069      	beq.n	8005a5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005986:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005992:	4b4d      	ldr	r3, [pc, #308]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b08      	cmp	r3, #8
 800599c:	d11c      	bne.n	80059d8 <HAL_RCC_OscConfig+0x190>
 800599e:	4b4a      	ldr	r3, [pc, #296]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d116      	bne.n	80059d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059aa:	4b47      	ldr	r3, [pc, #284]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_RCC_OscConfig+0x17a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d001      	beq.n	80059c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e1df      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c2:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	493d      	ldr	r1, [pc, #244]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d6:	e040      	b.n	8005a5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d023      	beq.n	8005a28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e0:	4b39      	ldr	r3, [pc, #228]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a38      	ldr	r2, [pc, #224]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fe f950 	bl	8003c90 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f4:	f7fe f94c 	bl	8003c90 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e1bd      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a06:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a12:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4929      	ldr	r1, [pc, #164]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]
 8005a26:	e018      	b.n	8005a5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a28:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fe f92c 	bl	8003c90 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3c:	f7fe f928 	bl	8003c90 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e199      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d038      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d019      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a6e:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fe f909 	bl	8003c90 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a82:	f7fe f905 	bl	8003c90 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e176      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x23a>
 8005aa0:	e01a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa6:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <HAL_RCC_OscConfig+0x280>)
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aae:	f7fe f8ef 	bl	8003c90 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab4:	e00a      	b.n	8005acc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ab6:	f7fe f8eb 	bl	8003c90 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d903      	bls.n	8005acc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e15c      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
 8005ac8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005acc:	4b91      	ldr	r3, [pc, #580]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ee      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80a4 	beq.w	8005c2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ae6:	4b8b      	ldr	r3, [pc, #556]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10d      	bne.n	8005b0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af2:	4b88      	ldr	r3, [pc, #544]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a87      	ldr	r2, [pc, #540]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
 8005afe:	4b85      	ldr	r3, [pc, #532]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b0e:	4b82      	ldr	r3, [pc, #520]	; (8005d18 <HAL_RCC_OscConfig+0x4d0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d118      	bne.n	8005b4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005b1a:	4b7f      	ldr	r3, [pc, #508]	; (8005d18 <HAL_RCC_OscConfig+0x4d0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a7e      	ldr	r2, [pc, #504]	; (8005d18 <HAL_RCC_OscConfig+0x4d0>)
 8005b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b26:	f7fe f8b3 	bl	8003c90 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2e:	f7fe f8af 	bl	8003c90 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b64      	cmp	r3, #100	; 0x64
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e120      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b40:	4b75      	ldr	r3, [pc, #468]	; (8005d18 <HAL_RCC_OscConfig+0x4d0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d106      	bne.n	8005b62 <HAL_RCC_OscConfig+0x31a>
 8005b54:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	4a6e      	ldr	r2, [pc, #440]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b60:	e02d      	b.n	8005bbe <HAL_RCC_OscConfig+0x376>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x33c>
 8005b6a:	4b6a      	ldr	r3, [pc, #424]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a69      	ldr	r2, [pc, #420]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	4b67      	ldr	r3, [pc, #412]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	4a66      	ldr	r2, [pc, #408]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	6713      	str	r3, [r2, #112]	; 0x70
 8005b82:	e01c      	b.n	8005bbe <HAL_RCC_OscConfig+0x376>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d10c      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x35e>
 8005b8c:	4b61      	ldr	r3, [pc, #388]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a60      	ldr	r2, [pc, #384]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b92:	f043 0304 	orr.w	r3, r3, #4
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
 8005b98:	4b5e      	ldr	r3, [pc, #376]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	4a5d      	ldr	r2, [pc, #372]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba4:	e00b      	b.n	8005bbe <HAL_RCC_OscConfig+0x376>
 8005ba6:	4b5b      	ldr	r3, [pc, #364]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	4a5a      	ldr	r2, [pc, #360]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb2:	4b58      	ldr	r3, [pc, #352]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a57      	ldr	r2, [pc, #348]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005bb8:	f023 0304 	bic.w	r3, r3, #4
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d015      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc6:	f7fe f863 	bl	8003c90 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bce:	f7fe f85f 	bl	8003c90 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e0ce      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be4:	4b4b      	ldr	r3, [pc, #300]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ee      	beq.n	8005bce <HAL_RCC_OscConfig+0x386>
 8005bf0:	e014      	b.n	8005c1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf2:	f7fe f84d 	bl	8003c90 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf8:	e00a      	b.n	8005c10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfa:	f7fe f849 	bl	8003c90 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0b8      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c10:	4b40      	ldr	r3, [pc, #256]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1ee      	bne.n	8005bfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d105      	bne.n	8005c2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c22:	4b3c      	ldr	r3, [pc, #240]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	4a3b      	ldr	r2, [pc, #236]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80a4 	beq.w	8005d80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c38:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d06b      	beq.n	8005d1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d149      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4c:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fe f81a 	bl	8003c90 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c60:	f7fe f816 	bl	8003c90 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e087      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c72:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	019b      	lsls	r3, r3, #6
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	3b01      	subs	r3, #1
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	061b      	lsls	r3, r3, #24
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005ca6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005caa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb8:	f7fd ffea 	bl	8003c90 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc0:	f7fd ffe6 	bl	8003c90 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e057      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd2:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f0      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x478>
 8005cde:	e04f      	b.n	8005d80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fd ffd0 	bl	8003c90 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fd ffcc 	bl	8003c90 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e03d      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d06:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <HAL_RCC_OscConfig+0x4cc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x4ac>
 8005d12:	e035      	b.n	8005d80 <HAL_RCC_OscConfig+0x538>
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <HAL_RCC_OscConfig+0x544>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d028      	beq.n	8005d7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d121      	bne.n	8005d7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d11a      	bne.n	8005d7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d111      	bne.n	8005d7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	3b01      	subs	r3, #1
 8005d66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800

08005d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0d0      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005da8:	4b6a      	ldr	r3, [pc, #424]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d910      	bls.n	8005dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db6:	4b67      	ldr	r3, [pc, #412]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 020f 	bic.w	r2, r3, #15
 8005dbe:	4965      	ldr	r1, [pc, #404]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b63      	ldr	r3, [pc, #396]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0b8      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d020      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005df0:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4a58      	ldr	r2, [pc, #352]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e08:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4a52      	ldr	r2, [pc, #328]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e14:	4b50      	ldr	r3, [pc, #320]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	494d      	ldr	r1, [pc, #308]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d040      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d107      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	4b47      	ldr	r3, [pc, #284]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d115      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e07f      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d107      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e52:	4b41      	ldr	r3, [pc, #260]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e073      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e62:	4b3d      	ldr	r3, [pc, #244]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e06b      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e72:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f023 0203 	bic.w	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4936      	ldr	r1, [pc, #216]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e84:	f7fd ff04 	bl	8003c90 <HAL_GetTick>
 8005e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e8c:	f7fd ff00 	bl	8003c90 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e053      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea2:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 020c 	and.w	r2, r3, #12
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d1eb      	bne.n	8005e8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eb4:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d210      	bcs.n	8005ee4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 020f 	bic.w	r2, r3, #15
 8005eca:	4922      	ldr	r1, [pc, #136]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed2:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e032      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4916      	ldr	r1, [pc, #88]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	490e      	ldr	r1, [pc, #56]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f22:	f000 f821 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
 8005f26:	4601      	mov	r1, r0
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <HAL_RCC_ClockConfig+0x1cc>)
 8005f34:	5cd3      	ldrb	r3, [r2, r3]
 8005f36:	fa21 f303 	lsr.w	r3, r1, r3
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <HAL_RCC_ClockConfig+0x1d0>)
 8005f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_ClockConfig+0x1d4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd fe60 	bl	8003c08 <HAL_InitTick>

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40023c00 	.word	0x40023c00
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	0800b334 	.word	0x0800b334
 8005f60:	20000034 	.word	0x20000034
 8005f64:	20000038 	.word	0x20000038

08005f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	607b      	str	r3, [r7, #4]
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	2300      	movs	r3, #0
 8005f78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f7e:	4b50      	ldr	r3, [pc, #320]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d007      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0x32>
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d008      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 808d 	bne.w	80060ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f94:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f96:	60bb      	str	r3, [r7, #8]
      break;
 8005f98:	e08c      	b.n	80060b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f9a:	4b4b      	ldr	r3, [pc, #300]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f9c:	60bb      	str	r3, [r7, #8]
      break;
 8005f9e:	e089      	b.n	80060b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fa0:	4b47      	ldr	r3, [pc, #284]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005faa:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d023      	beq.n	8005ffe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb6:	4b42      	ldr	r3, [pc, #264]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	099b      	lsrs	r3, r3, #6
 8005fbc:	f04f 0400 	mov.w	r4, #0
 8005fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	ea03 0501 	and.w	r5, r3, r1
 8005fcc:	ea04 0602 	and.w	r6, r4, r2
 8005fd0:	4a3d      	ldr	r2, [pc, #244]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005fd2:	fb02 f106 	mul.w	r1, r2, r6
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	fb02 f205 	mul.w	r2, r2, r5
 8005fdc:	440a      	add	r2, r1
 8005fde:	493a      	ldr	r1, [pc, #232]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005fe0:	fba5 0101 	umull	r0, r1, r5, r1
 8005fe4:	1853      	adds	r3, r2, r1
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f04f 0400 	mov.w	r4, #0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4623      	mov	r3, r4
 8005ff2:	f7fa fdf9 	bl	8000be8 <__aeabi_uldivmod>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e049      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ffe:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	099b      	lsrs	r3, r3, #6
 8006004:	f04f 0400 	mov.w	r4, #0
 8006008:	f240 11ff 	movw	r1, #511	; 0x1ff
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	ea03 0501 	and.w	r5, r3, r1
 8006014:	ea04 0602 	and.w	r6, r4, r2
 8006018:	4629      	mov	r1, r5
 800601a:	4632      	mov	r2, r6
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	0154      	lsls	r4, r2, #5
 8006026:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800602a:	014b      	lsls	r3, r1, #5
 800602c:	4619      	mov	r1, r3
 800602e:	4622      	mov	r2, r4
 8006030:	1b49      	subs	r1, r1, r5
 8006032:	eb62 0206 	sbc.w	r2, r2, r6
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	f04f 0400 	mov.w	r4, #0
 800603e:	0194      	lsls	r4, r2, #6
 8006040:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006044:	018b      	lsls	r3, r1, #6
 8006046:	1a5b      	subs	r3, r3, r1
 8006048:	eb64 0402 	sbc.w	r4, r4, r2
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	00e2      	lsls	r2, r4, #3
 8006056:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800605a:	00d9      	lsls	r1, r3, #3
 800605c:	460b      	mov	r3, r1
 800605e:	4614      	mov	r4, r2
 8006060:	195b      	adds	r3, r3, r5
 8006062:	eb44 0406 	adc.w	r4, r4, r6
 8006066:	f04f 0100 	mov.w	r1, #0
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	02a2      	lsls	r2, r4, #10
 8006070:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006074:	0299      	lsls	r1, r3, #10
 8006076:	460b      	mov	r3, r1
 8006078:	4614      	mov	r4, r2
 800607a:	4618      	mov	r0, r3
 800607c:	4621      	mov	r1, r4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f04f 0400 	mov.w	r4, #0
 8006084:	461a      	mov	r2, r3
 8006086:	4623      	mov	r3, r4
 8006088:	f7fa fdae 	bl	8000be8 <__aeabi_uldivmod>
 800608c:	4603      	mov	r3, r0
 800608e:	460c      	mov	r4, r1
 8006090:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	3301      	adds	r3, #1
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060aa:	60bb      	str	r3, [r7, #8]
      break;
 80060ac:	e002      	b.n	80060b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060ae:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80060b0:	60bb      	str	r3, [r7, #8]
      break;
 80060b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060b4:	68bb      	ldr	r3, [r7, #8]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800
 80060c4:	00f42400 	.word	0x00f42400
 80060c8:	017d7840 	.word	0x017d7840

080060cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d0:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060d2:	681b      	ldr	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000034 	.word	0x20000034

080060e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060e8:	f7ff fff0 	bl	80060cc <HAL_RCC_GetHCLKFreq>
 80060ec:	4601      	mov	r1, r0
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	0a9b      	lsrs	r3, r3, #10
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	4a03      	ldr	r2, [pc, #12]	; (8006108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060fa:	5cd3      	ldrb	r3, [r2, r3]
 80060fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006100:	4618      	mov	r0, r3
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40023800 	.word	0x40023800
 8006108:	0800b344 	.word	0x0800b344

0800610c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d012      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006134:	4b69      	ldr	r3, [pc, #420]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4a68      	ldr	r2, [pc, #416]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800613e:	6093      	str	r3, [r2, #8]
 8006140:	4b66      	ldr	r3, [pc, #408]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	4964      	ldr	r1, [pc, #400]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006156:	2301      	movs	r3, #1
 8006158:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d017      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006166:	4b5d      	ldr	r3, [pc, #372]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	4959      	ldr	r1, [pc, #356]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006184:	d101      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006186:	2301      	movs	r3, #1
 8006188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006192:	2301      	movs	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061a2:	4b4e      	ldr	r3, [pc, #312]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	494a      	ldr	r1, [pc, #296]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c0:	d101      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061ce:	2301      	movs	r3, #1
 80061d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061de:	2301      	movs	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 808b 	beq.w	8006306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061f0:	4b3a      	ldr	r3, [pc, #232]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	4a39      	ldr	r2, [pc, #228]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fa:	6413      	str	r3, [r2, #64]	; 0x40
 80061fc:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a34      	ldr	r2, [pc, #208]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800620e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006214:	f7fd fd3c 	bl	8003c90 <HAL_GetTick>
 8006218:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800621c:	f7fd fd38 	bl	8003c90 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	; 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e357      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f0      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800623a:	4b28      	ldr	r3, [pc, #160]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d035      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d02e      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006258:	4b20      	ldr	r3, [pc, #128]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006260:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006262:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800626e:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006278:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800627a:	4a18      	ldr	r2, [pc, #96]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006280:	4b16      	ldr	r3, [pc, #88]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	d114      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fd fd00 	bl	8003c90 <HAL_GetTick>
 8006290:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006292:	e00a      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006294:	f7fd fcfc 	bl	8003c90 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e319      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0ee      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c2:	d111      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062d2:	400b      	ands	r3, r1
 80062d4:	4901      	ldr	r1, [pc, #4]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
 80062da:	e00b      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062dc:	40023800 	.word	0x40023800
 80062e0:	40007000 	.word	0x40007000
 80062e4:	0ffffcff 	.word	0x0ffffcff
 80062e8:	4bb1      	ldr	r3, [pc, #708]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	4ab0      	ldr	r2, [pc, #704]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062f2:	6093      	str	r3, [r2, #8]
 80062f4:	4bae      	ldr	r3, [pc, #696]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006300:	49ab      	ldr	r1, [pc, #684]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006312:	4ba7      	ldr	r3, [pc, #668]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006318:	4aa5      	ldr	r2, [pc, #660]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800631a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800631e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006322:	4ba3      	ldr	r3, [pc, #652]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006324:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	49a0      	ldr	r1, [pc, #640]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006340:	4b9b      	ldr	r3, [pc, #620]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634e:	4998      	ldr	r1, [pc, #608]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006362:	4b93      	ldr	r3, [pc, #588]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006370:	498f      	ldr	r1, [pc, #572]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006384:	4b8a      	ldr	r3, [pc, #552]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006392:	4987      	ldr	r1, [pc, #540]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063a6:	4b82      	ldr	r3, [pc, #520]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	497e      	ldr	r1, [pc, #504]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063c8:	4b79      	ldr	r3, [pc, #484]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f023 0203 	bic.w	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	4976      	ldr	r1, [pc, #472]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063ea:	4b71      	ldr	r3, [pc, #452]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f0:	f023 020c 	bic.w	r2, r3, #12
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f8:	496d      	ldr	r1, [pc, #436]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800640c:	4b68      	ldr	r3, [pc, #416]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641a:	4965      	ldr	r1, [pc, #404]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800642e:	4b60      	ldr	r3, [pc, #384]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643c:	495c      	ldr	r1, [pc, #368]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006450:	4b57      	ldr	r3, [pc, #348]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	4954      	ldr	r1, [pc, #336]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006472:	4b4f      	ldr	r3, [pc, #316]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006478:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	494b      	ldr	r1, [pc, #300]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006494:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	4943      	ldr	r1, [pc, #268]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064b6:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	493a      	ldr	r1, [pc, #232]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064d8:	4b35      	ldr	r3, [pc, #212]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e6:	4932      	ldr	r1, [pc, #200]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d011      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064fa:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006508:	4929      	ldr	r1, [pc, #164]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006518:	d101      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800652a:	2301      	movs	r3, #1
 800652c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006548:	4919      	ldr	r1, [pc, #100]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656c:	4910      	ldr	r1, [pc, #64]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d006      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80d9 	beq.w	800673a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800658e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006594:	f7fd fb7c 	bl	8003c90 <HAL_GetTick>
 8006598:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800659a:	e00b      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800659c:	f7fd fb78 	bl	8003c90 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	; 0x64
 80065a8:	d904      	bls.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e197      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065b4:	4b6c      	ldr	r3, [pc, #432]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ed      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d021      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11d      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065d4:	4b64      	ldr	r3, [pc, #400]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065e2:	4b61      	ldr	r3, [pc, #388]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e8:	0e1b      	lsrs	r3, r3, #24
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	019a      	lsls	r2, r3, #6
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	061b      	lsls	r3, r3, #24
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	071b      	lsls	r3, r3, #28
 8006608:	4957      	ldr	r1, [pc, #348]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006624:	d00a      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02e      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800663a:	d129      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800663c:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800663e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800664c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006650:	0f1b      	lsrs	r3, r3, #28
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	019a      	lsls	r2, r3, #6
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	061b      	lsls	r3, r3, #24
 800666a:	431a      	orrs	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	071b      	lsls	r3, r3, #28
 8006670:	493d      	ldr	r1, [pc, #244]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800667a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800667e:	f023 021f 	bic.w	r2, r3, #31
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	3b01      	subs	r3, #1
 8006688:	4937      	ldr	r1, [pc, #220]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01d      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800669c:	4b32      	ldr	r3, [pc, #200]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800669e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a2:	0e1b      	lsrs	r3, r3, #24
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066aa:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b0:	0f1b      	lsrs	r3, r3, #28
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	019a      	lsls	r2, r3, #6
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	431a      	orrs	r2, r3
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	061b      	lsls	r3, r3, #24
 80066ca:	431a      	orrs	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	071b      	lsls	r3, r3, #28
 80066d0:	4925      	ldr	r1, [pc, #148]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	019a      	lsls	r2, r3, #6
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	041b      	lsls	r3, r3, #16
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	061b      	lsls	r3, r3, #24
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	071b      	lsls	r3, r3, #28
 8006700:	4919      	ldr	r1, [pc, #100]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006708:	4b17      	ldr	r3, [pc, #92]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a16      	ldr	r2, [pc, #88]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800670e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006714:	f7fd fabc 	bl	8003c90 <HAL_GetTick>
 8006718:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800671a:	e008      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800671c:	f7fd fab8 	bl	8003c90 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e0d7      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800672e:	4b0e      	ldr	r3, [pc, #56]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b01      	cmp	r3, #1
 800673e:	f040 80cd 	bne.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800674c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674e:	f7fd fa9f 	bl	8003c90 <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006754:	e00a      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006756:	f7fd fa9b 	bl	8003c90 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b64      	cmp	r3, #100	; 0x64
 8006762:	d903      	bls.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e0ba      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006768:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800676c:	4b5e      	ldr	r3, [pc, #376]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006778:	d0ed      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006796:	2b00      	cmp	r3, #0
 8006798:	d02e      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d12a      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067a2:	4b51      	ldr	r3, [pc, #324]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067b0:	4b4d      	ldr	r3, [pc, #308]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	0f1b      	lsrs	r3, r3, #28
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	019a      	lsls	r2, r3, #6
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	061b      	lsls	r3, r3, #24
 80067d0:	431a      	orrs	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	071b      	lsls	r3, r3, #28
 80067d6:	4944      	ldr	r1, [pc, #272]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067de:	4b42      	ldr	r3, [pc, #264]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	3b01      	subs	r3, #1
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	493d      	ldr	r1, [pc, #244]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d022      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800680c:	d11d      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800680e:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800681c:	4b32      	ldr	r3, [pc, #200]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	0f1b      	lsrs	r3, r3, #28
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	019a      	lsls	r2, r3, #6
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	431a      	orrs	r2, r3
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	061b      	lsls	r3, r3, #24
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	071b      	lsls	r3, r3, #28
 8006842:	4929      	ldr	r1, [pc, #164]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d028      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	0e1b      	lsrs	r3, r3, #24
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006864:	4b20      	ldr	r3, [pc, #128]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	0c1b      	lsrs	r3, r3, #16
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	019a      	lsls	r2, r3, #6
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	431a      	orrs	r2, r3
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	061b      	lsls	r3, r3, #24
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	071b      	lsls	r3, r3, #28
 800688a:	4917      	ldr	r1, [pc, #92]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800688c:	4313      	orrs	r3, r2
 800688e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006892:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4911      	ldr	r1, [pc, #68]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068a8:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a0e      	ldr	r2, [pc, #56]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b4:	f7fd f9ec 	bl	8003c90 <HAL_GetTick>
 80068b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068bc:	f7fd f9e8 	bl	8003c90 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b64      	cmp	r3, #100	; 0x64
 80068c8:	d901      	bls.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e007      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068da:	d1ef      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40023800 	.word	0x40023800

080068ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e081      	b.n	8006a02 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7f5b      	ldrb	r3, [r3, #29]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fc fea4 	bl	800365c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	22ca      	movs	r2, #202	; 0xca
 8006920:	625a      	str	r2, [r3, #36]	; 0x24
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2253      	movs	r2, #83	; 0x53
 8006928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f898 	bl	8006a60 <RTC_EnterInitMode>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	22ff      	movs	r2, #255	; 0xff
 800693c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2204      	movs	r2, #4
 8006942:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e05c      	b.n	8006a02 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6899      	ldr	r1, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <HAL_RTC_Init+0x120>)
 8006954:	400b      	ands	r3, r1
 8006956:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6899      	ldr	r1, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68d2      	ldr	r2, [r2, #12]
 800697e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6919      	ldr	r1, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	041a      	lsls	r2, r3, #16
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a2:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10e      	bne.n	80069d0 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f82c 	bl	8006a10 <HAL_RTC_WaitForSynchro>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	22ff      	movs	r2, #255	; 0xff
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2204      	movs	r2, #4
 80069ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e018      	b.n	8006a02 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0208 	bic.w	r2, r2, #8
 80069de:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006a00:	2300      	movs	r3, #0
  }
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	ff8fffbf 	.word	0xff8fffbf

08006a10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a2a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a2c:	f7fd f930 	bl	8003c90 <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a32:	e009      	b.n	8006a48 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a34:	f7fd f92c 	bl	8003c90 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a42:	d901      	bls.n	8006a48 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e007      	b.n	8006a58 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0ee      	beq.n	8006a34 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d119      	bne.n	8006aae <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a84:	f7fd f904 	bl	8003c90 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006a8a:	e009      	b.n	8006aa0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a8c:	f7fd f900 	bl	8003c90 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a9a:	d901      	bls.n	8006aa0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e007      	b.n	8006ab0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0ee      	beq.n	8006a8c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e049      	b.n	8006b5e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fc fdd6 	bl	8003690 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f000 fba0 	bl	800723c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_IC_Start_IT+0x1a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	e023      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x62>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_IC_Start_IT+0x2a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	e01b      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x62>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_IC_Start_IT+0x3a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	e013      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x62>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_IC_Start_IT+0x4a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	e00b      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x62>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_IC_Start_IT+0x5a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	e003      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x62>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <HAL_TIM_IC_Start_IT+0x74>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	e013      	b.n	8006c04 <HAL_TIM_IC_Start_IT+0x9c>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d104      	bne.n	8006bec <HAL_TIM_IC_Start_IT+0x84>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e00b      	b.n	8006c04 <HAL_TIM_IC_Start_IT+0x9c>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d104      	bne.n	8006bfc <HAL_TIM_IC_Start_IT+0x94>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	e003      	b.n	8006c04 <HAL_TIM_IC_Start_IT+0x9c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d102      	bne.n	8006c12 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d001      	beq.n	8006c16 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e0dd      	b.n	8006dd2 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <HAL_TIM_IC_Start_IT+0xbe>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c24:	e023      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x106>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d104      	bne.n	8006c36 <HAL_TIM_IC_Start_IT+0xce>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c34:	e01b      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x106>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_IC_Start_IT+0xde>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c44:	e013      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x106>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_IC_Start_IT+0xee>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c54:	e00b      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x106>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_IC_Start_IT+0xfe>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c64:	e003      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x106>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_IC_Start_IT+0x116>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c7c:	e013      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x13e>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_IC_Start_IT+0x126>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c8c:	e00b      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x13e>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_IC_Start_IT+0x136>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c9c:	e003      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x13e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d841      	bhi.n	8006d30 <HAL_TIM_IC_Start_IT+0x1c8>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <HAL_TIM_IC_Start_IT+0x14c>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006d31 	.word	0x08006d31
 8006cbc:	08006d31 	.word	0x08006d31
 8006cc0:	08006d31 	.word	0x08006d31
 8006cc4:	08006cfb 	.word	0x08006cfb
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006d31 	.word	0x08006d31
 8006cd0:	08006d31 	.word	0x08006d31
 8006cd4:	08006d0d 	.word	0x08006d0d
 8006cd8:	08006d31 	.word	0x08006d31
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006d31 	.word	0x08006d31
 8006ce4:	08006d1f 	.word	0x08006d1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0202 	orr.w	r2, r2, #2
 8006cf6:	60da      	str	r2, [r3, #12]
      break;
 8006cf8:	e01b      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0204 	orr.w	r2, r2, #4
 8006d08:	60da      	str	r2, [r3, #12]
      break;
 8006d0a:	e012      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0208 	orr.w	r2, r2, #8
 8006d1a:	60da      	str	r2, [r3, #12]
      break;
 8006d1c:	e009      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0210 	orr.w	r2, r2, #16
 8006d2c:	60da      	str	r2, [r3, #12]
      break;
 8006d2e:	e000      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8006d30:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2201      	movs	r2, #1
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fc48 	bl	80075d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <HAL_TIM_IC_Start_IT+0x274>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d022      	beq.n	8006d90 <HAL_TIM_IC_Start_IT+0x228>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d52:	d01d      	beq.n	8006d90 <HAL_TIM_IC_Start_IT+0x228>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a21      	ldr	r2, [pc, #132]	; (8006de0 <HAL_TIM_IC_Start_IT+0x278>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d018      	beq.n	8006d90 <HAL_TIM_IC_Start_IT+0x228>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a20      	ldr	r2, [pc, #128]	; (8006de4 <HAL_TIM_IC_Start_IT+0x27c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d013      	beq.n	8006d90 <HAL_TIM_IC_Start_IT+0x228>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <HAL_TIM_IC_Start_IT+0x280>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00e      	beq.n	8006d90 <HAL_TIM_IC_Start_IT+0x228>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <HAL_TIM_IC_Start_IT+0x284>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d009      	beq.n	8006d90 <HAL_TIM_IC_Start_IT+0x228>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <HAL_TIM_IC_Start_IT+0x288>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <HAL_TIM_IC_Start_IT+0x228>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1a      	ldr	r2, [pc, #104]	; (8006df4 <HAL_TIM_IC_Start_IT+0x28c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d115      	bne.n	8006dbc <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	4b18      	ldr	r3, [pc, #96]	; (8006df8 <HAL_TIM_IC_Start_IT+0x290>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d015      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x266>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da8:	d011      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0201 	orr.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dba:	e008      	b.n	8006dce <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e000      	b.n	8006dd0 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40010000 	.word	0x40010000
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800
 8006de8:	40000c00 	.word	0x40000c00
 8006dec:	40010400 	.word	0x40010400
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40001800 	.word	0x40001800
 8006df8:	00010007 	.word	0x00010007

08006dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d122      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d11b      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0202 	mvn.w	r2, #2
 8006e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fa fd06 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006e44:	e005      	b.n	8006e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f9da 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f9e1 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d122      	bne.n	8006eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d11b      	bne.n	8006eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0204 	mvn.w	r2, #4
 8006e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2202      	movs	r2, #2
 8006e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fa fcdc 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f9b0 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f9b7 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d122      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0208 	mvn.w	r2, #8
 8006ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fa fcb2 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f986 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f98d 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0210 	mvn.w	r2, #16
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fa fc88 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f95c 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f963 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d10e      	bne.n	8006f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d107      	bne.n	8006f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0201 	mvn.w	r2, #1
 8006f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f936 	bl	80071ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d10e      	bne.n	8006fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f98:	2b80      	cmp	r3, #128	; 0x80
 8006f9a:	d107      	bne.n	8006fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fbd0 	bl	800774c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fba:	d10e      	bne.n	8006fda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc6:	2b80      	cmp	r3, #128	; 0x80
 8006fc8:	d107      	bne.n	8006fda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fbc3 	bl	8007760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d10e      	bne.n	8007006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d107      	bne.n	8007006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f911 	bl	8007228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b20      	cmp	r3, #32
 8007012:	d10e      	bne.n	8007032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b20      	cmp	r3, #32
 8007020:	d107      	bne.n	8007032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f06f 0220 	mvn.w	r2, #32
 800702a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb83 	bl	8007738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007050:	2302      	movs	r3, #2
 8007052:	e082      	b.n	800715a <HAL_TIM_IC_ConfigChannel+0x120>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d11b      	bne.n	800709a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6819      	ldr	r1, [r3, #0]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f000 f983 	bl	800737c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 020c 	bic.w	r2, r2, #12
 8007084:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6999      	ldr	r1, [r3, #24]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	619a      	str	r2, [r3, #24]
 8007098:	e05a      	b.n	8007150 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d11c      	bne.n	80070da <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6819      	ldr	r1, [r3, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f000 f9d8 	bl	8007464 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6999      	ldr	r1, [r3, #24]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	021a      	lsls	r2, r3, #8
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	619a      	str	r2, [r3, #24]
 80070d8:	e03a      	b.n	8007150 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d11b      	bne.n	8007118 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6819      	ldr	r1, [r3, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f000 f9f5 	bl	80074de <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69da      	ldr	r2, [r3, #28]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 020c 	bic.w	r2, r2, #12
 8007102:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69d9      	ldr	r1, [r3, #28]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	61da      	str	r2, [r3, #28]
 8007116:	e01b      	b.n	8007150 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f000 fa15 	bl	8007556 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800713a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69d9      	ldr	r1, [r3, #28]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	021a      	lsls	r2, r3, #8
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b0c      	cmp	r3, #12
 8007176:	d831      	bhi.n	80071dc <HAL_TIM_ReadCapturedValue+0x78>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <HAL_TIM_ReadCapturedValue+0x1c>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	080071b5 	.word	0x080071b5
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071dd 	.word	0x080071dd
 800718c:	080071dd 	.word	0x080071dd
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071dd 	.word	0x080071dd
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071dd 	.word	0x080071dd
 80071a0:	080071c9 	.word	0x080071c9
 80071a4:	080071dd 	.word	0x080071dd
 80071a8:	080071dd 	.word	0x080071dd
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	080071d3 	.word	0x080071d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ba:	60fb      	str	r3, [r7, #12]

      break;
 80071bc:	e00f      	b.n	80071de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	60fb      	str	r3, [r7, #12]

      break;
 80071c6:	e00a      	b.n	80071de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	60fb      	str	r3, [r7, #12]

      break;
 80071d0:	e005      	b.n	80071de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	60fb      	str	r3, [r7, #12]

      break;
 80071da:	e000      	b.n	80071de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80071dc:	bf00      	nop
  }

  return tmpreg;
 80071de:	68fb      	ldr	r3, [r7, #12]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a40      	ldr	r2, [pc, #256]	; (8007350 <TIM_Base_SetConfig+0x114>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725a:	d00f      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a3d      	ldr	r2, [pc, #244]	; (8007354 <TIM_Base_SetConfig+0x118>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00b      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a3c      	ldr	r2, [pc, #240]	; (8007358 <TIM_Base_SetConfig+0x11c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d007      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a3b      	ldr	r2, [pc, #236]	; (800735c <TIM_Base_SetConfig+0x120>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a3a      	ldr	r2, [pc, #232]	; (8007360 <TIM_Base_SetConfig+0x124>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d108      	bne.n	800728e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a2f      	ldr	r2, [pc, #188]	; (8007350 <TIM_Base_SetConfig+0x114>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d02b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d027      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2c      	ldr	r2, [pc, #176]	; (8007354 <TIM_Base_SetConfig+0x118>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d023      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2b      	ldr	r2, [pc, #172]	; (8007358 <TIM_Base_SetConfig+0x11c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01f      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2a      	ldr	r2, [pc, #168]	; (800735c <TIM_Base_SetConfig+0x120>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a29      	ldr	r2, [pc, #164]	; (8007360 <TIM_Base_SetConfig+0x124>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d017      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a28      	ldr	r2, [pc, #160]	; (8007364 <TIM_Base_SetConfig+0x128>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a27      	ldr	r2, [pc, #156]	; (8007368 <TIM_Base_SetConfig+0x12c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00f      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a26      	ldr	r2, [pc, #152]	; (800736c <TIM_Base_SetConfig+0x130>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a25      	ldr	r2, [pc, #148]	; (8007370 <TIM_Base_SetConfig+0x134>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a24      	ldr	r2, [pc, #144]	; (8007374 <TIM_Base_SetConfig+0x138>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a23      	ldr	r2, [pc, #140]	; (8007378 <TIM_Base_SetConfig+0x13c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <TIM_Base_SetConfig+0x114>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_Base_SetConfig+0xf8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <TIM_Base_SetConfig+0x124>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d103      	bne.n	800733c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	615a      	str	r2, [r3, #20]
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40010000 	.word	0x40010000
 8007354:	40000400 	.word	0x40000400
 8007358:	40000800 	.word	0x40000800
 800735c:	40000c00 	.word	0x40000c00
 8007360:	40010400 	.word	0x40010400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800
 8007370:	40001800 	.word	0x40001800
 8007374:	40001c00 	.word	0x40001c00
 8007378:	40002000 	.word	0x40002000

0800737c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0201 	bic.w	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a28      	ldr	r2, [pc, #160]	; (8007448 <TIM_TI1_SetConfig+0xcc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01b      	beq.n	80073e2 <TIM_TI1_SetConfig+0x66>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b0:	d017      	beq.n	80073e2 <TIM_TI1_SetConfig+0x66>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4a25      	ldr	r2, [pc, #148]	; (800744c <TIM_TI1_SetConfig+0xd0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d013      	beq.n	80073e2 <TIM_TI1_SetConfig+0x66>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4a24      	ldr	r2, [pc, #144]	; (8007450 <TIM_TI1_SetConfig+0xd4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00f      	beq.n	80073e2 <TIM_TI1_SetConfig+0x66>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a23      	ldr	r2, [pc, #140]	; (8007454 <TIM_TI1_SetConfig+0xd8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00b      	beq.n	80073e2 <TIM_TI1_SetConfig+0x66>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a22      	ldr	r2, [pc, #136]	; (8007458 <TIM_TI1_SetConfig+0xdc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d007      	beq.n	80073e2 <TIM_TI1_SetConfig+0x66>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a21      	ldr	r2, [pc, #132]	; (800745c <TIM_TI1_SetConfig+0xe0>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d003      	beq.n	80073e2 <TIM_TI1_SetConfig+0x66>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a20      	ldr	r2, [pc, #128]	; (8007460 <TIM_TI1_SetConfig+0xe4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d101      	bne.n	80073e6 <TIM_TI1_SetConfig+0x6a>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <TIM_TI1_SetConfig+0x6c>
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e003      	b.n	8007406 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800740c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	b2db      	uxtb	r3, r3
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f023 030a 	bic.w	r3, r3, #10
 8007420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f003 030a 	and.w	r3, r3, #10
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40010000 	.word	0x40010000
 800744c:	40000400 	.word	0x40000400
 8007450:	40000800 	.word	0x40000800
 8007454:	40000c00 	.word	0x40000c00
 8007458:	40010400 	.word	0x40010400
 800745c:	40014000 	.word	0x40014000
 8007460:	40001800 	.word	0x40001800

08007464 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0210 	bic.w	r2, r3, #16
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	031b      	lsls	r3, r3, #12
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	621a      	str	r2, [r3, #32]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800751a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	b2db      	uxtb	r3, r3
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800752e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007556:	b480      	push	{r7}
 8007558:	b087      	sub	sp, #28
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007582:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007594:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	031b      	lsls	r3, r3, #12
 800759a:	b29b      	uxth	r3, r3
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80075a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	031b      	lsls	r3, r3, #12
 80075ae:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	621a      	str	r2, [r3, #32]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2201      	movs	r2, #1
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	43db      	mvns	r3, r3
 80075f2:	401a      	ands	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1a      	ldr	r2, [r3, #32]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	431a      	orrs	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e06d      	b.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a30      	ldr	r2, [pc, #192]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d108      	bne.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800766e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d01d      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1a      	ldr	r2, [pc, #104]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a15      	ldr	r2, [pc, #84]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a16      	ldr	r2, [pc, #88]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a15      	ldr	r2, [pc, #84]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10c      	bne.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40010000 	.word	0x40010000
 8007720:	40010400 	.word	0x40010400
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	40014000 	.word	0x40014000
 8007734:	40001800 	.word	0x40001800

08007738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <__errno>:
 8007774:	4b01      	ldr	r3, [pc, #4]	; (800777c <__errno+0x8>)
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20000040 	.word	0x20000040

08007780 <__libc_init_array>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	4e0d      	ldr	r6, [pc, #52]	; (80077b8 <__libc_init_array+0x38>)
 8007784:	4c0d      	ldr	r4, [pc, #52]	; (80077bc <__libc_init_array+0x3c>)
 8007786:	1ba4      	subs	r4, r4, r6
 8007788:	10a4      	asrs	r4, r4, #2
 800778a:	2500      	movs	r5, #0
 800778c:	42a5      	cmp	r5, r4
 800778e:	d109      	bne.n	80077a4 <__libc_init_array+0x24>
 8007790:	4e0b      	ldr	r6, [pc, #44]	; (80077c0 <__libc_init_array+0x40>)
 8007792:	4c0c      	ldr	r4, [pc, #48]	; (80077c4 <__libc_init_array+0x44>)
 8007794:	f002 f85c 	bl	8009850 <_init>
 8007798:	1ba4      	subs	r4, r4, r6
 800779a:	10a4      	asrs	r4, r4, #2
 800779c:	2500      	movs	r5, #0
 800779e:	42a5      	cmp	r5, r4
 80077a0:	d105      	bne.n	80077ae <__libc_init_array+0x2e>
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077a8:	4798      	blx	r3
 80077aa:	3501      	adds	r5, #1
 80077ac:	e7ee      	b.n	800778c <__libc_init_array+0xc>
 80077ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077b2:	4798      	blx	r3
 80077b4:	3501      	adds	r5, #1
 80077b6:	e7f2      	b.n	800779e <__libc_init_array+0x1e>
 80077b8:	0800b5b8 	.word	0x0800b5b8
 80077bc:	0800b5b8 	.word	0x0800b5b8
 80077c0:	0800b5b8 	.word	0x0800b5b8
 80077c4:	0800b5bc 	.word	0x0800b5bc

080077c8 <memset>:
 80077c8:	4402      	add	r2, r0
 80077ca:	4603      	mov	r3, r0
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d100      	bne.n	80077d2 <memset+0xa>
 80077d0:	4770      	bx	lr
 80077d2:	f803 1b01 	strb.w	r1, [r3], #1
 80077d6:	e7f9      	b.n	80077cc <memset+0x4>

080077d8 <__cvt>:
 80077d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	ec55 4b10 	vmov	r4, r5, d0
 80077e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80077e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077e6:	2d00      	cmp	r5, #0
 80077e8:	460e      	mov	r6, r1
 80077ea:	4691      	mov	r9, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	bfb8      	it	lt
 80077f0:	4622      	movlt	r2, r4
 80077f2:	462b      	mov	r3, r5
 80077f4:	f027 0720 	bic.w	r7, r7, #32
 80077f8:	bfbb      	ittet	lt
 80077fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077fe:	461d      	movlt	r5, r3
 8007800:	2300      	movge	r3, #0
 8007802:	232d      	movlt	r3, #45	; 0x2d
 8007804:	bfb8      	it	lt
 8007806:	4614      	movlt	r4, r2
 8007808:	2f46      	cmp	r7, #70	; 0x46
 800780a:	700b      	strb	r3, [r1, #0]
 800780c:	d004      	beq.n	8007818 <__cvt+0x40>
 800780e:	2f45      	cmp	r7, #69	; 0x45
 8007810:	d100      	bne.n	8007814 <__cvt+0x3c>
 8007812:	3601      	adds	r6, #1
 8007814:	2102      	movs	r1, #2
 8007816:	e000      	b.n	800781a <__cvt+0x42>
 8007818:	2103      	movs	r1, #3
 800781a:	ab03      	add	r3, sp, #12
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	ab02      	add	r3, sp, #8
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	4632      	mov	r2, r6
 8007824:	4653      	mov	r3, sl
 8007826:	ec45 4b10 	vmov	d0, r4, r5
 800782a:	f000 fcdd 	bl	80081e8 <_dtoa_r>
 800782e:	2f47      	cmp	r7, #71	; 0x47
 8007830:	4680      	mov	r8, r0
 8007832:	d102      	bne.n	800783a <__cvt+0x62>
 8007834:	f019 0f01 	tst.w	r9, #1
 8007838:	d026      	beq.n	8007888 <__cvt+0xb0>
 800783a:	2f46      	cmp	r7, #70	; 0x46
 800783c:	eb08 0906 	add.w	r9, r8, r6
 8007840:	d111      	bne.n	8007866 <__cvt+0x8e>
 8007842:	f898 3000 	ldrb.w	r3, [r8]
 8007846:	2b30      	cmp	r3, #48	; 0x30
 8007848:	d10a      	bne.n	8007860 <__cvt+0x88>
 800784a:	2200      	movs	r2, #0
 800784c:	2300      	movs	r3, #0
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f9 f959 	bl	8000b08 <__aeabi_dcmpeq>
 8007856:	b918      	cbnz	r0, 8007860 <__cvt+0x88>
 8007858:	f1c6 0601 	rsb	r6, r6, #1
 800785c:	f8ca 6000 	str.w	r6, [sl]
 8007860:	f8da 3000 	ldr.w	r3, [sl]
 8007864:	4499      	add	r9, r3
 8007866:	2200      	movs	r2, #0
 8007868:	2300      	movs	r3, #0
 800786a:	4620      	mov	r0, r4
 800786c:	4629      	mov	r1, r5
 800786e:	f7f9 f94b 	bl	8000b08 <__aeabi_dcmpeq>
 8007872:	b938      	cbnz	r0, 8007884 <__cvt+0xac>
 8007874:	2230      	movs	r2, #48	; 0x30
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	454b      	cmp	r3, r9
 800787a:	d205      	bcs.n	8007888 <__cvt+0xb0>
 800787c:	1c59      	adds	r1, r3, #1
 800787e:	9103      	str	r1, [sp, #12]
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e7f8      	b.n	8007876 <__cvt+0x9e>
 8007884:	f8cd 900c 	str.w	r9, [sp, #12]
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800788c:	eba3 0308 	sub.w	r3, r3, r8
 8007890:	4640      	mov	r0, r8
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	b004      	add	sp, #16
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800789a <__exponent>:
 800789a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800789c:	2900      	cmp	r1, #0
 800789e:	4604      	mov	r4, r0
 80078a0:	bfba      	itte	lt
 80078a2:	4249      	neglt	r1, r1
 80078a4:	232d      	movlt	r3, #45	; 0x2d
 80078a6:	232b      	movge	r3, #43	; 0x2b
 80078a8:	2909      	cmp	r1, #9
 80078aa:	f804 2b02 	strb.w	r2, [r4], #2
 80078ae:	7043      	strb	r3, [r0, #1]
 80078b0:	dd20      	ble.n	80078f4 <__exponent+0x5a>
 80078b2:	f10d 0307 	add.w	r3, sp, #7
 80078b6:	461f      	mov	r7, r3
 80078b8:	260a      	movs	r6, #10
 80078ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80078be:	fb06 1115 	mls	r1, r6, r5, r1
 80078c2:	3130      	adds	r1, #48	; 0x30
 80078c4:	2d09      	cmp	r5, #9
 80078c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078ca:	f103 32ff 	add.w	r2, r3, #4294967295
 80078ce:	4629      	mov	r1, r5
 80078d0:	dc09      	bgt.n	80078e6 <__exponent+0x4c>
 80078d2:	3130      	adds	r1, #48	; 0x30
 80078d4:	3b02      	subs	r3, #2
 80078d6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80078da:	42bb      	cmp	r3, r7
 80078dc:	4622      	mov	r2, r4
 80078de:	d304      	bcc.n	80078ea <__exponent+0x50>
 80078e0:	1a10      	subs	r0, r2, r0
 80078e2:	b003      	add	sp, #12
 80078e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e6:	4613      	mov	r3, r2
 80078e8:	e7e7      	b.n	80078ba <__exponent+0x20>
 80078ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ee:	f804 2b01 	strb.w	r2, [r4], #1
 80078f2:	e7f2      	b.n	80078da <__exponent+0x40>
 80078f4:	2330      	movs	r3, #48	; 0x30
 80078f6:	4419      	add	r1, r3
 80078f8:	7083      	strb	r3, [r0, #2]
 80078fa:	1d02      	adds	r2, r0, #4
 80078fc:	70c1      	strb	r1, [r0, #3]
 80078fe:	e7ef      	b.n	80078e0 <__exponent+0x46>

08007900 <_printf_float>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	b08d      	sub	sp, #52	; 0x34
 8007906:	460c      	mov	r4, r1
 8007908:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800790c:	4616      	mov	r6, r2
 800790e:	461f      	mov	r7, r3
 8007910:	4605      	mov	r5, r0
 8007912:	f001 fa21 	bl	8008d58 <_localeconv_r>
 8007916:	6803      	ldr	r3, [r0, #0]
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	4618      	mov	r0, r3
 800791c:	f7f8 fc78 	bl	8000210 <strlen>
 8007920:	2300      	movs	r3, #0
 8007922:	930a      	str	r3, [sp, #40]	; 0x28
 8007924:	f8d8 3000 	ldr.w	r3, [r8]
 8007928:	9005      	str	r0, [sp, #20]
 800792a:	3307      	adds	r3, #7
 800792c:	f023 0307 	bic.w	r3, r3, #7
 8007930:	f103 0208 	add.w	r2, r3, #8
 8007934:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007938:	f8d4 b000 	ldr.w	fp, [r4]
 800793c:	f8c8 2000 	str.w	r2, [r8]
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007948:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800794c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007950:	9307      	str	r3, [sp, #28]
 8007952:	f8cd 8018 	str.w	r8, [sp, #24]
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	4ba7      	ldr	r3, [pc, #668]	; (8007bf8 <_printf_float+0x2f8>)
 800795c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007960:	f7f9 f904 	bl	8000b6c <__aeabi_dcmpun>
 8007964:	bb70      	cbnz	r0, 80079c4 <_printf_float+0xc4>
 8007966:	f04f 32ff 	mov.w	r2, #4294967295
 800796a:	4ba3      	ldr	r3, [pc, #652]	; (8007bf8 <_printf_float+0x2f8>)
 800796c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007970:	f7f9 f8de 	bl	8000b30 <__aeabi_dcmple>
 8007974:	bb30      	cbnz	r0, 80079c4 <_printf_float+0xc4>
 8007976:	2200      	movs	r2, #0
 8007978:	2300      	movs	r3, #0
 800797a:	4640      	mov	r0, r8
 800797c:	4649      	mov	r1, r9
 800797e:	f7f9 f8cd 	bl	8000b1c <__aeabi_dcmplt>
 8007982:	b110      	cbz	r0, 800798a <_printf_float+0x8a>
 8007984:	232d      	movs	r3, #45	; 0x2d
 8007986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798a:	4a9c      	ldr	r2, [pc, #624]	; (8007bfc <_printf_float+0x2fc>)
 800798c:	4b9c      	ldr	r3, [pc, #624]	; (8007c00 <_printf_float+0x300>)
 800798e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007992:	bf8c      	ite	hi
 8007994:	4690      	movhi	r8, r2
 8007996:	4698      	movls	r8, r3
 8007998:	2303      	movs	r3, #3
 800799a:	f02b 0204 	bic.w	r2, fp, #4
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	6022      	str	r2, [r4, #0]
 80079a2:	f04f 0900 	mov.w	r9, #0
 80079a6:	9700      	str	r7, [sp, #0]
 80079a8:	4633      	mov	r3, r6
 80079aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80079ac:	4621      	mov	r1, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f9e6 	bl	8007d80 <_printf_common>
 80079b4:	3001      	adds	r0, #1
 80079b6:	f040 808d 	bne.w	8007ad4 <_printf_float+0x1d4>
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
 80079be:	b00d      	add	sp, #52	; 0x34
 80079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	4642      	mov	r2, r8
 80079c6:	464b      	mov	r3, r9
 80079c8:	4640      	mov	r0, r8
 80079ca:	4649      	mov	r1, r9
 80079cc:	f7f9 f8ce 	bl	8000b6c <__aeabi_dcmpun>
 80079d0:	b110      	cbz	r0, 80079d8 <_printf_float+0xd8>
 80079d2:	4a8c      	ldr	r2, [pc, #560]	; (8007c04 <_printf_float+0x304>)
 80079d4:	4b8c      	ldr	r3, [pc, #560]	; (8007c08 <_printf_float+0x308>)
 80079d6:	e7da      	b.n	800798e <_printf_float+0x8e>
 80079d8:	6861      	ldr	r1, [r4, #4]
 80079da:	1c4b      	adds	r3, r1, #1
 80079dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80079e0:	a80a      	add	r0, sp, #40	; 0x28
 80079e2:	d13e      	bne.n	8007a62 <_printf_float+0x162>
 80079e4:	2306      	movs	r3, #6
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	2300      	movs	r3, #0
 80079ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80079ee:	ab09      	add	r3, sp, #36	; 0x24
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	ec49 8b10 	vmov	d0, r8, r9
 80079f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	f8cd a004 	str.w	sl, [sp, #4]
 8007a00:	6861      	ldr	r1, [r4, #4]
 8007a02:	4628      	mov	r0, r5
 8007a04:	f7ff fee8 	bl	80077d8 <__cvt>
 8007a08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007a0c:	2b47      	cmp	r3, #71	; 0x47
 8007a0e:	4680      	mov	r8, r0
 8007a10:	d109      	bne.n	8007a26 <_printf_float+0x126>
 8007a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a14:	1cd8      	adds	r0, r3, #3
 8007a16:	db02      	blt.n	8007a1e <_printf_float+0x11e>
 8007a18:	6862      	ldr	r2, [r4, #4]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	dd47      	ble.n	8007aae <_printf_float+0x1ae>
 8007a1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a22:	fa5f fa8a 	uxtb.w	sl, sl
 8007a26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a2c:	d824      	bhi.n	8007a78 <_printf_float+0x178>
 8007a2e:	3901      	subs	r1, #1
 8007a30:	4652      	mov	r2, sl
 8007a32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a36:	9109      	str	r1, [sp, #36]	; 0x24
 8007a38:	f7ff ff2f 	bl	800789a <__exponent>
 8007a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a3e:	1813      	adds	r3, r2, r0
 8007a40:	2a01      	cmp	r2, #1
 8007a42:	4681      	mov	r9, r0
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	dc02      	bgt.n	8007a4e <_printf_float+0x14e>
 8007a48:	6822      	ldr	r2, [r4, #0]
 8007a4a:	07d1      	lsls	r1, r2, #31
 8007a4c:	d501      	bpl.n	8007a52 <_printf_float+0x152>
 8007a4e:	3301      	adds	r3, #1
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0a5      	beq.n	80079a6 <_printf_float+0xa6>
 8007a5a:	232d      	movs	r3, #45	; 0x2d
 8007a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a60:	e7a1      	b.n	80079a6 <_printf_float+0xa6>
 8007a62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007a66:	f000 8177 	beq.w	8007d58 <_printf_float+0x458>
 8007a6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a6e:	d1bb      	bne.n	80079e8 <_printf_float+0xe8>
 8007a70:	2900      	cmp	r1, #0
 8007a72:	d1b9      	bne.n	80079e8 <_printf_float+0xe8>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e7b6      	b.n	80079e6 <_printf_float+0xe6>
 8007a78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007a7c:	d119      	bne.n	8007ab2 <_printf_float+0x1b2>
 8007a7e:	2900      	cmp	r1, #0
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	dd0c      	ble.n	8007a9e <_printf_float+0x19e>
 8007a84:	6121      	str	r1, [r4, #16]
 8007a86:	b913      	cbnz	r3, 8007a8e <_printf_float+0x18e>
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	07d2      	lsls	r2, r2, #31
 8007a8c:	d502      	bpl.n	8007a94 <_printf_float+0x194>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	440b      	add	r3, r1
 8007a92:	6123      	str	r3, [r4, #16]
 8007a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a96:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a98:	f04f 0900 	mov.w	r9, #0
 8007a9c:	e7d9      	b.n	8007a52 <_printf_float+0x152>
 8007a9e:	b913      	cbnz	r3, 8007aa6 <_printf_float+0x1a6>
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	07d0      	lsls	r0, r2, #31
 8007aa4:	d501      	bpl.n	8007aaa <_printf_float+0x1aa>
 8007aa6:	3302      	adds	r3, #2
 8007aa8:	e7f3      	b.n	8007a92 <_printf_float+0x192>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e7f1      	b.n	8007a92 <_printf_float+0x192>
 8007aae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007ab2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	db05      	blt.n	8007ac6 <_printf_float+0x1c6>
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	07d1      	lsls	r1, r2, #31
 8007ac0:	d5e8      	bpl.n	8007a94 <_printf_float+0x194>
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	e7e5      	b.n	8007a92 <_printf_float+0x192>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bfd4      	ite	le
 8007aca:	f1c3 0302 	rsble	r3, r3, #2
 8007ace:	2301      	movgt	r3, #1
 8007ad0:	4413      	add	r3, r2
 8007ad2:	e7de      	b.n	8007a92 <_printf_float+0x192>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	055a      	lsls	r2, r3, #21
 8007ad8:	d407      	bmi.n	8007aea <_printf_float+0x1ea>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	4642      	mov	r2, r8
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d12b      	bne.n	8007b40 <_printf_float+0x240>
 8007ae8:	e767      	b.n	80079ba <_printf_float+0xba>
 8007aea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007aee:	f240 80dc 	bls.w	8007caa <_printf_float+0x3aa>
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007afa:	f7f9 f805 	bl	8000b08 <__aeabi_dcmpeq>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d033      	beq.n	8007b6a <_printf_float+0x26a>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4a41      	ldr	r2, [pc, #260]	; (8007c0c <_printf_float+0x30c>)
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	f43f af54 	beq.w	80079ba <_printf_float+0xba>
 8007b12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b16:	429a      	cmp	r2, r3
 8007b18:	db02      	blt.n	8007b20 <_printf_float+0x220>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	07d8      	lsls	r0, r3, #31
 8007b1e:	d50f      	bpl.n	8007b40 <_printf_float+0x240>
 8007b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f af45 	beq.w	80079ba <_printf_float+0xba>
 8007b30:	f04f 0800 	mov.w	r8, #0
 8007b34:	f104 091a 	add.w	r9, r4, #26
 8007b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	4543      	cmp	r3, r8
 8007b3e:	dc09      	bgt.n	8007b54 <_printf_float+0x254>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	079b      	lsls	r3, r3, #30
 8007b44:	f100 8103 	bmi.w	8007d4e <_printf_float+0x44e>
 8007b48:	68e0      	ldr	r0, [r4, #12]
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	4298      	cmp	r0, r3
 8007b4e:	bfb8      	it	lt
 8007b50:	4618      	movlt	r0, r3
 8007b52:	e734      	b.n	80079be <_printf_float+0xbe>
 8007b54:	2301      	movs	r3, #1
 8007b56:	464a      	mov	r2, r9
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b8      	blx	r7
 8007b5e:	3001      	adds	r0, #1
 8007b60:	f43f af2b 	beq.w	80079ba <_printf_float+0xba>
 8007b64:	f108 0801 	add.w	r8, r8, #1
 8007b68:	e7e6      	b.n	8007b38 <_printf_float+0x238>
 8007b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc2b      	bgt.n	8007bc8 <_printf_float+0x2c8>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <_printf_float+0x30c>)
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f af1d 	beq.w	80079ba <_printf_float+0xba>
 8007b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b82:	b923      	cbnz	r3, 8007b8e <_printf_float+0x28e>
 8007b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b86:	b913      	cbnz	r3, 8007b8e <_printf_float+0x28e>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	07d9      	lsls	r1, r3, #31
 8007b8c:	d5d8      	bpl.n	8007b40 <_printf_float+0x240>
 8007b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f af0e 	beq.w	80079ba <_printf_float+0xba>
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	f104 0a1a 	add.w	sl, r4, #26
 8007ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba8:	425b      	negs	r3, r3
 8007baa:	454b      	cmp	r3, r9
 8007bac:	dc01      	bgt.n	8007bb2 <_printf_float+0x2b2>
 8007bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb0:	e794      	b.n	8007adc <_printf_float+0x1dc>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4652      	mov	r2, sl
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f aefc 	beq.w	80079ba <_printf_float+0xba>
 8007bc2:	f109 0901 	add.w	r9, r9, #1
 8007bc6:	e7ee      	b.n	8007ba6 <_printf_float+0x2a6>
 8007bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	bfa8      	it	ge
 8007bd0:	461a      	movge	r2, r3
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	4691      	mov	r9, r2
 8007bd6:	dd07      	ble.n	8007be8 <_printf_float+0x2e8>
 8007bd8:	4613      	mov	r3, r2
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4642      	mov	r2, r8
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	f43f aee9 	beq.w	80079ba <_printf_float+0xba>
 8007be8:	f104 031a 	add.w	r3, r4, #26
 8007bec:	f04f 0b00 	mov.w	fp, #0
 8007bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bf4:	9306      	str	r3, [sp, #24]
 8007bf6:	e015      	b.n	8007c24 <_printf_float+0x324>
 8007bf8:	7fefffff 	.word	0x7fefffff
 8007bfc:	0800b358 	.word	0x0800b358
 8007c00:	0800b354 	.word	0x0800b354
 8007c04:	0800b360 	.word	0x0800b360
 8007c08:	0800b35c 	.word	0x0800b35c
 8007c0c:	0800b364 	.word	0x0800b364
 8007c10:	2301      	movs	r3, #1
 8007c12:	9a06      	ldr	r2, [sp, #24]
 8007c14:	4631      	mov	r1, r6
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f43f aecd 	beq.w	80079ba <_printf_float+0xba>
 8007c20:	f10b 0b01 	add.w	fp, fp, #1
 8007c24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007c28:	ebaa 0309 	sub.w	r3, sl, r9
 8007c2c:	455b      	cmp	r3, fp
 8007c2e:	dcef      	bgt.n	8007c10 <_printf_float+0x310>
 8007c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c34:	429a      	cmp	r2, r3
 8007c36:	44d0      	add	r8, sl
 8007c38:	db15      	blt.n	8007c66 <_printf_float+0x366>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	07da      	lsls	r2, r3, #31
 8007c3e:	d412      	bmi.n	8007c66 <_printf_float+0x366>
 8007c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c44:	eba3 020a 	sub.w	r2, r3, sl
 8007c48:	eba3 0a01 	sub.w	sl, r3, r1
 8007c4c:	4592      	cmp	sl, r2
 8007c4e:	bfa8      	it	ge
 8007c50:	4692      	movge	sl, r2
 8007c52:	f1ba 0f00 	cmp.w	sl, #0
 8007c56:	dc0e      	bgt.n	8007c76 <_printf_float+0x376>
 8007c58:	f04f 0800 	mov.w	r8, #0
 8007c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c60:	f104 091a 	add.w	r9, r4, #26
 8007c64:	e019      	b.n	8007c9a <_printf_float+0x39a>
 8007c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	d1e5      	bne.n	8007c40 <_printf_float+0x340>
 8007c74:	e6a1      	b.n	80079ba <_printf_float+0xba>
 8007c76:	4653      	mov	r3, sl
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	d1e9      	bne.n	8007c58 <_printf_float+0x358>
 8007c84:	e699      	b.n	80079ba <_printf_float+0xba>
 8007c86:	2301      	movs	r3, #1
 8007c88:	464a      	mov	r2, r9
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	f43f ae92 	beq.w	80079ba <_printf_float+0xba>
 8007c96:	f108 0801 	add.w	r8, r8, #1
 8007c9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	eba3 030a 	sub.w	r3, r3, sl
 8007ca4:	4543      	cmp	r3, r8
 8007ca6:	dcee      	bgt.n	8007c86 <_printf_float+0x386>
 8007ca8:	e74a      	b.n	8007b40 <_printf_float+0x240>
 8007caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cac:	2a01      	cmp	r2, #1
 8007cae:	dc01      	bgt.n	8007cb4 <_printf_float+0x3b4>
 8007cb0:	07db      	lsls	r3, r3, #31
 8007cb2:	d53a      	bpl.n	8007d2a <_printf_float+0x42a>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f ae7b 	beq.w	80079ba <_printf_float+0xba>
 8007cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f108 0801 	add.w	r8, r8, #1
 8007cd4:	f43f ae71 	beq.w	80079ba <_printf_float+0xba>
 8007cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f103 3aff 	add.w	sl, r3, #4294967295
 8007ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f7f8 ff0f 	bl	8000b08 <__aeabi_dcmpeq>
 8007cea:	b9c8      	cbnz	r0, 8007d20 <_printf_float+0x420>
 8007cec:	4653      	mov	r3, sl
 8007cee:	4642      	mov	r2, r8
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b8      	blx	r7
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d10e      	bne.n	8007d18 <_printf_float+0x418>
 8007cfa:	e65e      	b.n	80079ba <_printf_float+0xba>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4652      	mov	r2, sl
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f ae57 	beq.w	80079ba <_printf_float+0xba>
 8007d0c:	f108 0801 	add.w	r8, r8, #1
 8007d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d12:	3b01      	subs	r3, #1
 8007d14:	4543      	cmp	r3, r8
 8007d16:	dcf1      	bgt.n	8007cfc <_printf_float+0x3fc>
 8007d18:	464b      	mov	r3, r9
 8007d1a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d1e:	e6de      	b.n	8007ade <_printf_float+0x1de>
 8007d20:	f04f 0800 	mov.w	r8, #0
 8007d24:	f104 0a1a 	add.w	sl, r4, #26
 8007d28:	e7f2      	b.n	8007d10 <_printf_float+0x410>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e7df      	b.n	8007cee <_printf_float+0x3ee>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	464a      	mov	r2, r9
 8007d32:	4631      	mov	r1, r6
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b8      	blx	r7
 8007d38:	3001      	adds	r0, #1
 8007d3a:	f43f ae3e 	beq.w	80079ba <_printf_float+0xba>
 8007d3e:	f108 0801 	add.w	r8, r8, #1
 8007d42:	68e3      	ldr	r3, [r4, #12]
 8007d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	4543      	cmp	r3, r8
 8007d4a:	dcf0      	bgt.n	8007d2e <_printf_float+0x42e>
 8007d4c:	e6fc      	b.n	8007b48 <_printf_float+0x248>
 8007d4e:	f04f 0800 	mov.w	r8, #0
 8007d52:	f104 0919 	add.w	r9, r4, #25
 8007d56:	e7f4      	b.n	8007d42 <_printf_float+0x442>
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	f43f ae8b 	beq.w	8007a74 <_printf_float+0x174>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007d64:	ab09      	add	r3, sp, #36	; 0x24
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	ec49 8b10 	vmov	d0, r8, r9
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	f8cd a004 	str.w	sl, [sp, #4]
 8007d72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d76:	4628      	mov	r0, r5
 8007d78:	f7ff fd2e 	bl	80077d8 <__cvt>
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	e648      	b.n	8007a12 <_printf_float+0x112>

08007d80 <_printf_common>:
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	4691      	mov	r9, r2
 8007d86:	461f      	mov	r7, r3
 8007d88:	688a      	ldr	r2, [r1, #8]
 8007d8a:	690b      	ldr	r3, [r1, #16]
 8007d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bfb8      	it	lt
 8007d94:	4613      	movlt	r3, r2
 8007d96:	f8c9 3000 	str.w	r3, [r9]
 8007d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460c      	mov	r4, r1
 8007da2:	b112      	cbz	r2, 8007daa <_printf_common+0x2a>
 8007da4:	3301      	adds	r3, #1
 8007da6:	f8c9 3000 	str.w	r3, [r9]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	0699      	lsls	r1, r3, #26
 8007dae:	bf42      	ittt	mi
 8007db0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007db4:	3302      	addmi	r3, #2
 8007db6:	f8c9 3000 	strmi.w	r3, [r9]
 8007dba:	6825      	ldr	r5, [r4, #0]
 8007dbc:	f015 0506 	ands.w	r5, r5, #6
 8007dc0:	d107      	bne.n	8007dd2 <_printf_common+0x52>
 8007dc2:	f104 0a19 	add.w	sl, r4, #25
 8007dc6:	68e3      	ldr	r3, [r4, #12]
 8007dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8007dcc:	1a9b      	subs	r3, r3, r2
 8007dce:	42ab      	cmp	r3, r5
 8007dd0:	dc28      	bgt.n	8007e24 <_printf_common+0xa4>
 8007dd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	3300      	adds	r3, #0
 8007dda:	bf18      	it	ne
 8007ddc:	2301      	movne	r3, #1
 8007dde:	0692      	lsls	r2, r2, #26
 8007de0:	d42d      	bmi.n	8007e3e <_printf_common+0xbe>
 8007de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007de6:	4639      	mov	r1, r7
 8007de8:	4630      	mov	r0, r6
 8007dea:	47c0      	blx	r8
 8007dec:	3001      	adds	r0, #1
 8007dee:	d020      	beq.n	8007e32 <_printf_common+0xb2>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	68e5      	ldr	r5, [r4, #12]
 8007df4:	f8d9 2000 	ldr.w	r2, [r9]
 8007df8:	f003 0306 	and.w	r3, r3, #6
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	bf08      	it	eq
 8007e00:	1aad      	subeq	r5, r5, r2
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	6922      	ldr	r2, [r4, #16]
 8007e06:	bf0c      	ite	eq
 8007e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e0c:	2500      	movne	r5, #0
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	bfc4      	itt	gt
 8007e12:	1a9b      	subgt	r3, r3, r2
 8007e14:	18ed      	addgt	r5, r5, r3
 8007e16:	f04f 0900 	mov.w	r9, #0
 8007e1a:	341a      	adds	r4, #26
 8007e1c:	454d      	cmp	r5, r9
 8007e1e:	d11a      	bne.n	8007e56 <_printf_common+0xd6>
 8007e20:	2000      	movs	r0, #0
 8007e22:	e008      	b.n	8007e36 <_printf_common+0xb6>
 8007e24:	2301      	movs	r3, #1
 8007e26:	4652      	mov	r2, sl
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	47c0      	blx	r8
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d103      	bne.n	8007e3a <_printf_common+0xba>
 8007e32:	f04f 30ff 	mov.w	r0, #4294967295
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	3501      	adds	r5, #1
 8007e3c:	e7c3      	b.n	8007dc6 <_printf_common+0x46>
 8007e3e:	18e1      	adds	r1, r4, r3
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	2030      	movs	r0, #48	; 0x30
 8007e44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e48:	4422      	add	r2, r4
 8007e4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e52:	3302      	adds	r3, #2
 8007e54:	e7c5      	b.n	8007de2 <_printf_common+0x62>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4622      	mov	r2, r4
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	47c0      	blx	r8
 8007e60:	3001      	adds	r0, #1
 8007e62:	d0e6      	beq.n	8007e32 <_printf_common+0xb2>
 8007e64:	f109 0901 	add.w	r9, r9, #1
 8007e68:	e7d8      	b.n	8007e1c <_printf_common+0x9c>
	...

08007e6c <_printf_i>:
 8007e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e74:	460c      	mov	r4, r1
 8007e76:	7e09      	ldrb	r1, [r1, #24]
 8007e78:	b085      	sub	sp, #20
 8007e7a:	296e      	cmp	r1, #110	; 0x6e
 8007e7c:	4617      	mov	r7, r2
 8007e7e:	4606      	mov	r6, r0
 8007e80:	4698      	mov	r8, r3
 8007e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e84:	f000 80b3 	beq.w	8007fee <_printf_i+0x182>
 8007e88:	d822      	bhi.n	8007ed0 <_printf_i+0x64>
 8007e8a:	2963      	cmp	r1, #99	; 0x63
 8007e8c:	d036      	beq.n	8007efc <_printf_i+0x90>
 8007e8e:	d80a      	bhi.n	8007ea6 <_printf_i+0x3a>
 8007e90:	2900      	cmp	r1, #0
 8007e92:	f000 80b9 	beq.w	8008008 <_printf_i+0x19c>
 8007e96:	2958      	cmp	r1, #88	; 0x58
 8007e98:	f000 8083 	beq.w	8007fa2 <_printf_i+0x136>
 8007e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ea4:	e032      	b.n	8007f0c <_printf_i+0xa0>
 8007ea6:	2964      	cmp	r1, #100	; 0x64
 8007ea8:	d001      	beq.n	8007eae <_printf_i+0x42>
 8007eaa:	2969      	cmp	r1, #105	; 0x69
 8007eac:	d1f6      	bne.n	8007e9c <_printf_i+0x30>
 8007eae:	6820      	ldr	r0, [r4, #0]
 8007eb0:	6813      	ldr	r3, [r2, #0]
 8007eb2:	0605      	lsls	r5, r0, #24
 8007eb4:	f103 0104 	add.w	r1, r3, #4
 8007eb8:	d52a      	bpl.n	8007f10 <_printf_i+0xa4>
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6011      	str	r1, [r2, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da03      	bge.n	8007eca <_printf_i+0x5e>
 8007ec2:	222d      	movs	r2, #45	; 0x2d
 8007ec4:	425b      	negs	r3, r3
 8007ec6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eca:	486f      	ldr	r0, [pc, #444]	; (8008088 <_printf_i+0x21c>)
 8007ecc:	220a      	movs	r2, #10
 8007ece:	e039      	b.n	8007f44 <_printf_i+0xd8>
 8007ed0:	2973      	cmp	r1, #115	; 0x73
 8007ed2:	f000 809d 	beq.w	8008010 <_printf_i+0x1a4>
 8007ed6:	d808      	bhi.n	8007eea <_printf_i+0x7e>
 8007ed8:	296f      	cmp	r1, #111	; 0x6f
 8007eda:	d020      	beq.n	8007f1e <_printf_i+0xb2>
 8007edc:	2970      	cmp	r1, #112	; 0x70
 8007ede:	d1dd      	bne.n	8007e9c <_printf_i+0x30>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	f043 0320 	orr.w	r3, r3, #32
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	e003      	b.n	8007ef2 <_printf_i+0x86>
 8007eea:	2975      	cmp	r1, #117	; 0x75
 8007eec:	d017      	beq.n	8007f1e <_printf_i+0xb2>
 8007eee:	2978      	cmp	r1, #120	; 0x78
 8007ef0:	d1d4      	bne.n	8007e9c <_printf_i+0x30>
 8007ef2:	2378      	movs	r3, #120	; 0x78
 8007ef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ef8:	4864      	ldr	r0, [pc, #400]	; (800808c <_printf_i+0x220>)
 8007efa:	e055      	b.n	8007fa8 <_printf_i+0x13c>
 8007efc:	6813      	ldr	r3, [r2, #0]
 8007efe:	1d19      	adds	r1, r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6011      	str	r1, [r2, #0]
 8007f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e08c      	b.n	800802a <_printf_i+0x1be>
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6011      	str	r1, [r2, #0]
 8007f14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f18:	bf18      	it	ne
 8007f1a:	b21b      	sxthne	r3, r3
 8007f1c:	e7cf      	b.n	8007ebe <_printf_i+0x52>
 8007f1e:	6813      	ldr	r3, [r2, #0]
 8007f20:	6825      	ldr	r5, [r4, #0]
 8007f22:	1d18      	adds	r0, r3, #4
 8007f24:	6010      	str	r0, [r2, #0]
 8007f26:	0628      	lsls	r0, r5, #24
 8007f28:	d501      	bpl.n	8007f2e <_printf_i+0xc2>
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	e002      	b.n	8007f34 <_printf_i+0xc8>
 8007f2e:	0668      	lsls	r0, r5, #25
 8007f30:	d5fb      	bpl.n	8007f2a <_printf_i+0xbe>
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	4854      	ldr	r0, [pc, #336]	; (8008088 <_printf_i+0x21c>)
 8007f36:	296f      	cmp	r1, #111	; 0x6f
 8007f38:	bf14      	ite	ne
 8007f3a:	220a      	movne	r2, #10
 8007f3c:	2208      	moveq	r2, #8
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f44:	6865      	ldr	r5, [r4, #4]
 8007f46:	60a5      	str	r5, [r4, #8]
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	f2c0 8095 	blt.w	8008078 <_printf_i+0x20c>
 8007f4e:	6821      	ldr	r1, [r4, #0]
 8007f50:	f021 0104 	bic.w	r1, r1, #4
 8007f54:	6021      	str	r1, [r4, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d13d      	bne.n	8007fd6 <_printf_i+0x16a>
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	f040 808e 	bne.w	800807c <_printf_i+0x210>
 8007f60:	4665      	mov	r5, ip
 8007f62:	2a08      	cmp	r2, #8
 8007f64:	d10b      	bne.n	8007f7e <_printf_i+0x112>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	07db      	lsls	r3, r3, #31
 8007f6a:	d508      	bpl.n	8007f7e <_printf_i+0x112>
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	6862      	ldr	r2, [r4, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	bfde      	ittt	le
 8007f74:	2330      	movle	r3, #48	; 0x30
 8007f76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f7e:	ebac 0305 	sub.w	r3, ip, r5
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	f8cd 8000 	str.w	r8, [sp]
 8007f88:	463b      	mov	r3, r7
 8007f8a:	aa03      	add	r2, sp, #12
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff fef6 	bl	8007d80 <_printf_common>
 8007f94:	3001      	adds	r0, #1
 8007f96:	d14d      	bne.n	8008034 <_printf_i+0x1c8>
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	b005      	add	sp, #20
 8007f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	4839      	ldr	r0, [pc, #228]	; (8008088 <_printf_i+0x21c>)
 8007fa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007fa8:	6813      	ldr	r3, [r2, #0]
 8007faa:	6821      	ldr	r1, [r4, #0]
 8007fac:	1d1d      	adds	r5, r3, #4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6015      	str	r5, [r2, #0]
 8007fb2:	060a      	lsls	r2, r1, #24
 8007fb4:	d50b      	bpl.n	8007fce <_printf_i+0x162>
 8007fb6:	07ca      	lsls	r2, r1, #31
 8007fb8:	bf44      	itt	mi
 8007fba:	f041 0120 	orrmi.w	r1, r1, #32
 8007fbe:	6021      	strmi	r1, [r4, #0]
 8007fc0:	b91b      	cbnz	r3, 8007fca <_printf_i+0x15e>
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	f022 0220 	bic.w	r2, r2, #32
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	2210      	movs	r2, #16
 8007fcc:	e7b7      	b.n	8007f3e <_printf_i+0xd2>
 8007fce:	064d      	lsls	r5, r1, #25
 8007fd0:	bf48      	it	mi
 8007fd2:	b29b      	uxthmi	r3, r3
 8007fd4:	e7ef      	b.n	8007fb6 <_printf_i+0x14a>
 8007fd6:	4665      	mov	r5, ip
 8007fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fdc:	fb02 3311 	mls	r3, r2, r1, r3
 8007fe0:	5cc3      	ldrb	r3, [r0, r3]
 8007fe2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	d1f5      	bne.n	8007fd8 <_printf_i+0x16c>
 8007fec:	e7b9      	b.n	8007f62 <_printf_i+0xf6>
 8007fee:	6813      	ldr	r3, [r2, #0]
 8007ff0:	6825      	ldr	r5, [r4, #0]
 8007ff2:	6961      	ldr	r1, [r4, #20]
 8007ff4:	1d18      	adds	r0, r3, #4
 8007ff6:	6010      	str	r0, [r2, #0]
 8007ff8:	0628      	lsls	r0, r5, #24
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	d501      	bpl.n	8008002 <_printf_i+0x196>
 8007ffe:	6019      	str	r1, [r3, #0]
 8008000:	e002      	b.n	8008008 <_printf_i+0x19c>
 8008002:	066a      	lsls	r2, r5, #25
 8008004:	d5fb      	bpl.n	8007ffe <_printf_i+0x192>
 8008006:	8019      	strh	r1, [r3, #0]
 8008008:	2300      	movs	r3, #0
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	4665      	mov	r5, ip
 800800e:	e7b9      	b.n	8007f84 <_printf_i+0x118>
 8008010:	6813      	ldr	r3, [r2, #0]
 8008012:	1d19      	adds	r1, r3, #4
 8008014:	6011      	str	r1, [r2, #0]
 8008016:	681d      	ldr	r5, [r3, #0]
 8008018:	6862      	ldr	r2, [r4, #4]
 800801a:	2100      	movs	r1, #0
 800801c:	4628      	mov	r0, r5
 800801e:	f7f8 f8ff 	bl	8000220 <memchr>
 8008022:	b108      	cbz	r0, 8008028 <_printf_i+0x1bc>
 8008024:	1b40      	subs	r0, r0, r5
 8008026:	6060      	str	r0, [r4, #4]
 8008028:	6863      	ldr	r3, [r4, #4]
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	2300      	movs	r3, #0
 800802e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008032:	e7a7      	b.n	8007f84 <_printf_i+0x118>
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	462a      	mov	r2, r5
 8008038:	4639      	mov	r1, r7
 800803a:	4630      	mov	r0, r6
 800803c:	47c0      	blx	r8
 800803e:	3001      	adds	r0, #1
 8008040:	d0aa      	beq.n	8007f98 <_printf_i+0x12c>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	079b      	lsls	r3, r3, #30
 8008046:	d413      	bmi.n	8008070 <_printf_i+0x204>
 8008048:	68e0      	ldr	r0, [r4, #12]
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	4298      	cmp	r0, r3
 800804e:	bfb8      	it	lt
 8008050:	4618      	movlt	r0, r3
 8008052:	e7a3      	b.n	8007f9c <_printf_i+0x130>
 8008054:	2301      	movs	r3, #1
 8008056:	464a      	mov	r2, r9
 8008058:	4639      	mov	r1, r7
 800805a:	4630      	mov	r0, r6
 800805c:	47c0      	blx	r8
 800805e:	3001      	adds	r0, #1
 8008060:	d09a      	beq.n	8007f98 <_printf_i+0x12c>
 8008062:	3501      	adds	r5, #1
 8008064:	68e3      	ldr	r3, [r4, #12]
 8008066:	9a03      	ldr	r2, [sp, #12]
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	42ab      	cmp	r3, r5
 800806c:	dcf2      	bgt.n	8008054 <_printf_i+0x1e8>
 800806e:	e7eb      	b.n	8008048 <_printf_i+0x1dc>
 8008070:	2500      	movs	r5, #0
 8008072:	f104 0919 	add.w	r9, r4, #25
 8008076:	e7f5      	b.n	8008064 <_printf_i+0x1f8>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1ac      	bne.n	8007fd6 <_printf_i+0x16a>
 800807c:	7803      	ldrb	r3, [r0, #0]
 800807e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008082:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008086:	e76c      	b.n	8007f62 <_printf_i+0xf6>
 8008088:	0800b366 	.word	0x0800b366
 800808c:	0800b377 	.word	0x0800b377

08008090 <siprintf>:
 8008090:	b40e      	push	{r1, r2, r3}
 8008092:	b500      	push	{lr}
 8008094:	b09c      	sub	sp, #112	; 0x70
 8008096:	ab1d      	add	r3, sp, #116	; 0x74
 8008098:	9002      	str	r0, [sp, #8]
 800809a:	9006      	str	r0, [sp, #24]
 800809c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080a0:	4809      	ldr	r0, [pc, #36]	; (80080c8 <siprintf+0x38>)
 80080a2:	9107      	str	r1, [sp, #28]
 80080a4:	9104      	str	r1, [sp, #16]
 80080a6:	4909      	ldr	r1, [pc, #36]	; (80080cc <siprintf+0x3c>)
 80080a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	6800      	ldr	r0, [r0, #0]
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	a902      	add	r1, sp, #8
 80080b4:	f001 fa5c 	bl	8009570 <_svfiprintf_r>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	b01c      	add	sp, #112	; 0x70
 80080c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c4:	b003      	add	sp, #12
 80080c6:	4770      	bx	lr
 80080c8:	20000040 	.word	0x20000040
 80080cc:	ffff0208 	.word	0xffff0208

080080d0 <quorem>:
 80080d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	6903      	ldr	r3, [r0, #16]
 80080d6:	690c      	ldr	r4, [r1, #16]
 80080d8:	42a3      	cmp	r3, r4
 80080da:	4680      	mov	r8, r0
 80080dc:	f2c0 8082 	blt.w	80081e4 <quorem+0x114>
 80080e0:	3c01      	subs	r4, #1
 80080e2:	f101 0714 	add.w	r7, r1, #20
 80080e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80080ea:	f100 0614 	add.w	r6, r0, #20
 80080ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80080f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80080f6:	eb06 030c 	add.w	r3, r6, ip
 80080fa:	3501      	adds	r5, #1
 80080fc:	eb07 090c 	add.w	r9, r7, ip
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	fbb0 f5f5 	udiv	r5, r0, r5
 8008106:	b395      	cbz	r5, 800816e <quorem+0x9e>
 8008108:	f04f 0a00 	mov.w	sl, #0
 800810c:	4638      	mov	r0, r7
 800810e:	46b6      	mov	lr, r6
 8008110:	46d3      	mov	fp, sl
 8008112:	f850 2b04 	ldr.w	r2, [r0], #4
 8008116:	b293      	uxth	r3, r2
 8008118:	fb05 a303 	mla	r3, r5, r3, sl
 800811c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008120:	b29b      	uxth	r3, r3
 8008122:	ebab 0303 	sub.w	r3, fp, r3
 8008126:	0c12      	lsrs	r2, r2, #16
 8008128:	f8de b000 	ldr.w	fp, [lr]
 800812c:	fb05 a202 	mla	r2, r5, r2, sl
 8008130:	fa13 f38b 	uxtah	r3, r3, fp
 8008134:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008138:	fa1f fb82 	uxth.w	fp, r2
 800813c:	f8de 2000 	ldr.w	r2, [lr]
 8008140:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008148:	b29b      	uxth	r3, r3
 800814a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800814e:	4581      	cmp	r9, r0
 8008150:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008154:	f84e 3b04 	str.w	r3, [lr], #4
 8008158:	d2db      	bcs.n	8008112 <quorem+0x42>
 800815a:	f856 300c 	ldr.w	r3, [r6, ip]
 800815e:	b933      	cbnz	r3, 800816e <quorem+0x9e>
 8008160:	9b01      	ldr	r3, [sp, #4]
 8008162:	3b04      	subs	r3, #4
 8008164:	429e      	cmp	r6, r3
 8008166:	461a      	mov	r2, r3
 8008168:	d330      	bcc.n	80081cc <quorem+0xfc>
 800816a:	f8c8 4010 	str.w	r4, [r8, #16]
 800816e:	4640      	mov	r0, r8
 8008170:	f001 f828 	bl	80091c4 <__mcmp>
 8008174:	2800      	cmp	r0, #0
 8008176:	db25      	blt.n	80081c4 <quorem+0xf4>
 8008178:	3501      	adds	r5, #1
 800817a:	4630      	mov	r0, r6
 800817c:	f04f 0c00 	mov.w	ip, #0
 8008180:	f857 2b04 	ldr.w	r2, [r7], #4
 8008184:	f8d0 e000 	ldr.w	lr, [r0]
 8008188:	b293      	uxth	r3, r2
 800818a:	ebac 0303 	sub.w	r3, ip, r3
 800818e:	0c12      	lsrs	r2, r2, #16
 8008190:	fa13 f38e 	uxtah	r3, r3, lr
 8008194:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a2:	45b9      	cmp	r9, r7
 80081a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081a8:	f840 3b04 	str.w	r3, [r0], #4
 80081ac:	d2e8      	bcs.n	8008180 <quorem+0xb0>
 80081ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80081b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80081b6:	b92a      	cbnz	r2, 80081c4 <quorem+0xf4>
 80081b8:	3b04      	subs	r3, #4
 80081ba:	429e      	cmp	r6, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	d30b      	bcc.n	80081d8 <quorem+0x108>
 80081c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80081c4:	4628      	mov	r0, r5
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	3b04      	subs	r3, #4
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d1ca      	bne.n	800816a <quorem+0x9a>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	e7c5      	b.n	8008164 <quorem+0x94>
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	3b04      	subs	r3, #4
 80081dc:	2a00      	cmp	r2, #0
 80081de:	d1ef      	bne.n	80081c0 <quorem+0xf0>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	e7ea      	b.n	80081ba <quorem+0xea>
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7ee      	b.n	80081c6 <quorem+0xf6>

080081e8 <_dtoa_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	ec57 6b10 	vmov	r6, r7, d0
 80081f0:	b097      	sub	sp, #92	; 0x5c
 80081f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081f4:	9106      	str	r1, [sp, #24]
 80081f6:	4604      	mov	r4, r0
 80081f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80081fa:	9312      	str	r3, [sp, #72]	; 0x48
 80081fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008200:	e9cd 6700 	strd	r6, r7, [sp]
 8008204:	b93d      	cbnz	r5, 8008216 <_dtoa_r+0x2e>
 8008206:	2010      	movs	r0, #16
 8008208:	f000 fdb4 	bl	8008d74 <malloc>
 800820c:	6260      	str	r0, [r4, #36]	; 0x24
 800820e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008212:	6005      	str	r5, [r0, #0]
 8008214:	60c5      	str	r5, [r0, #12]
 8008216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008218:	6819      	ldr	r1, [r3, #0]
 800821a:	b151      	cbz	r1, 8008232 <_dtoa_r+0x4a>
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	604a      	str	r2, [r1, #4]
 8008220:	2301      	movs	r3, #1
 8008222:	4093      	lsls	r3, r2
 8008224:	608b      	str	r3, [r1, #8]
 8008226:	4620      	mov	r0, r4
 8008228:	f000 fdeb 	bl	8008e02 <_Bfree>
 800822c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	1e3b      	subs	r3, r7, #0
 8008234:	bfbb      	ittet	lt
 8008236:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800823a:	9301      	strlt	r3, [sp, #4]
 800823c:	2300      	movge	r3, #0
 800823e:	2201      	movlt	r2, #1
 8008240:	bfac      	ite	ge
 8008242:	f8c8 3000 	strge.w	r3, [r8]
 8008246:	f8c8 2000 	strlt.w	r2, [r8]
 800824a:	4baf      	ldr	r3, [pc, #700]	; (8008508 <_dtoa_r+0x320>)
 800824c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008250:	ea33 0308 	bics.w	r3, r3, r8
 8008254:	d114      	bne.n	8008280 <_dtoa_r+0x98>
 8008256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008258:	f242 730f 	movw	r3, #9999	; 0x270f
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	9b00      	ldr	r3, [sp, #0]
 8008260:	b923      	cbnz	r3, 800826c <_dtoa_r+0x84>
 8008262:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008266:	2800      	cmp	r0, #0
 8008268:	f000 8542 	beq.w	8008cf0 <_dtoa_r+0xb08>
 800826c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800826e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800851c <_dtoa_r+0x334>
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 8544 	beq.w	8008d00 <_dtoa_r+0xb18>
 8008278:	f10b 0303 	add.w	r3, fp, #3
 800827c:	f000 bd3e 	b.w	8008cfc <_dtoa_r+0xb14>
 8008280:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008284:	2200      	movs	r2, #0
 8008286:	2300      	movs	r3, #0
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 fc3c 	bl	8000b08 <__aeabi_dcmpeq>
 8008290:	4681      	mov	r9, r0
 8008292:	b168      	cbz	r0, 80082b0 <_dtoa_r+0xc8>
 8008294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008296:	2301      	movs	r3, #1
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8524 	beq.w	8008cea <_dtoa_r+0xb02>
 80082a2:	4b9a      	ldr	r3, [pc, #616]	; (800850c <_dtoa_r+0x324>)
 80082a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	f000 bd28 	b.w	8008d00 <_dtoa_r+0xb18>
 80082b0:	aa14      	add	r2, sp, #80	; 0x50
 80082b2:	a915      	add	r1, sp, #84	; 0x54
 80082b4:	ec47 6b10 	vmov	d0, r6, r7
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 fffa 	bl	80092b2 <__d2b>
 80082be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082c2:	9004      	str	r0, [sp, #16]
 80082c4:	2d00      	cmp	r5, #0
 80082c6:	d07c      	beq.n	80083c2 <_dtoa_r+0x1da>
 80082c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80082d0:	46b2      	mov	sl, r6
 80082d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80082d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80082de:	2200      	movs	r2, #0
 80082e0:	4b8b      	ldr	r3, [pc, #556]	; (8008510 <_dtoa_r+0x328>)
 80082e2:	4650      	mov	r0, sl
 80082e4:	4659      	mov	r1, fp
 80082e6:	f7f7 ffef 	bl	80002c8 <__aeabi_dsub>
 80082ea:	a381      	add	r3, pc, #516	; (adr r3, 80084f0 <_dtoa_r+0x308>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f8 f9a2 	bl	8000638 <__aeabi_dmul>
 80082f4:	a380      	add	r3, pc, #512	; (adr r3, 80084f8 <_dtoa_r+0x310>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ffe7 	bl	80002cc <__adddf3>
 80082fe:	4606      	mov	r6, r0
 8008300:	4628      	mov	r0, r5
 8008302:	460f      	mov	r7, r1
 8008304:	f7f8 f92e 	bl	8000564 <__aeabi_i2d>
 8008308:	a37d      	add	r3, pc, #500	; (adr r3, 8008500 <_dtoa_r+0x318>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f8 f993 	bl	8000638 <__aeabi_dmul>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f7 ffd7 	bl	80002cc <__adddf3>
 800831e:	4606      	mov	r6, r0
 8008320:	460f      	mov	r7, r1
 8008322:	f7f8 fc39 	bl	8000b98 <__aeabi_d2iz>
 8008326:	2200      	movs	r2, #0
 8008328:	4682      	mov	sl, r0
 800832a:	2300      	movs	r3, #0
 800832c:	4630      	mov	r0, r6
 800832e:	4639      	mov	r1, r7
 8008330:	f7f8 fbf4 	bl	8000b1c <__aeabi_dcmplt>
 8008334:	b148      	cbz	r0, 800834a <_dtoa_r+0x162>
 8008336:	4650      	mov	r0, sl
 8008338:	f7f8 f914 	bl	8000564 <__aeabi_i2d>
 800833c:	4632      	mov	r2, r6
 800833e:	463b      	mov	r3, r7
 8008340:	f7f8 fbe2 	bl	8000b08 <__aeabi_dcmpeq>
 8008344:	b908      	cbnz	r0, 800834a <_dtoa_r+0x162>
 8008346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800834a:	f1ba 0f16 	cmp.w	sl, #22
 800834e:	d859      	bhi.n	8008404 <_dtoa_r+0x21c>
 8008350:	4970      	ldr	r1, [pc, #448]	; (8008514 <_dtoa_r+0x32c>)
 8008352:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800835a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835e:	f7f8 fbfb 	bl	8000b58 <__aeabi_dcmpgt>
 8008362:	2800      	cmp	r0, #0
 8008364:	d050      	beq.n	8008408 <_dtoa_r+0x220>
 8008366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800836a:	2300      	movs	r3, #0
 800836c:	930f      	str	r3, [sp, #60]	; 0x3c
 800836e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008370:	1b5d      	subs	r5, r3, r5
 8008372:	f1b5 0801 	subs.w	r8, r5, #1
 8008376:	bf49      	itett	mi
 8008378:	f1c5 0301 	rsbmi	r3, r5, #1
 800837c:	2300      	movpl	r3, #0
 800837e:	9305      	strmi	r3, [sp, #20]
 8008380:	f04f 0800 	movmi.w	r8, #0
 8008384:	bf58      	it	pl
 8008386:	9305      	strpl	r3, [sp, #20]
 8008388:	f1ba 0f00 	cmp.w	sl, #0
 800838c:	db3e      	blt.n	800840c <_dtoa_r+0x224>
 800838e:	2300      	movs	r3, #0
 8008390:	44d0      	add	r8, sl
 8008392:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008396:	9307      	str	r3, [sp, #28]
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	2b09      	cmp	r3, #9
 800839c:	f200 8090 	bhi.w	80084c0 <_dtoa_r+0x2d8>
 80083a0:	2b05      	cmp	r3, #5
 80083a2:	bfc4      	itt	gt
 80083a4:	3b04      	subgt	r3, #4
 80083a6:	9306      	strgt	r3, [sp, #24]
 80083a8:	9b06      	ldr	r3, [sp, #24]
 80083aa:	f1a3 0302 	sub.w	r3, r3, #2
 80083ae:	bfcc      	ite	gt
 80083b0:	2500      	movgt	r5, #0
 80083b2:	2501      	movle	r5, #1
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	f200 808f 	bhi.w	80084d8 <_dtoa_r+0x2f0>
 80083ba:	e8df f003 	tbb	[pc, r3]
 80083be:	7f7d      	.short	0x7f7d
 80083c0:	7131      	.short	0x7131
 80083c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80083c6:	441d      	add	r5, r3
 80083c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80083cc:	2820      	cmp	r0, #32
 80083ce:	dd13      	ble.n	80083f8 <_dtoa_r+0x210>
 80083d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	fa08 f800 	lsl.w	r8, r8, r0
 80083da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80083de:	fa23 f000 	lsr.w	r0, r3, r0
 80083e2:	ea48 0000 	orr.w	r0, r8, r0
 80083e6:	f7f8 f8ad 	bl	8000544 <__aeabi_ui2d>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4682      	mov	sl, r0
 80083ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80083f2:	3d01      	subs	r5, #1
 80083f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80083f6:	e772      	b.n	80082de <_dtoa_r+0xf6>
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	f1c0 0020 	rsb	r0, r0, #32
 80083fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008402:	e7f0      	b.n	80083e6 <_dtoa_r+0x1fe>
 8008404:	2301      	movs	r3, #1
 8008406:	e7b1      	b.n	800836c <_dtoa_r+0x184>
 8008408:	900f      	str	r0, [sp, #60]	; 0x3c
 800840a:	e7b0      	b.n	800836e <_dtoa_r+0x186>
 800840c:	9b05      	ldr	r3, [sp, #20]
 800840e:	eba3 030a 	sub.w	r3, r3, sl
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	f1ca 0300 	rsb	r3, sl, #0
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	2300      	movs	r3, #0
 800841c:	930e      	str	r3, [sp, #56]	; 0x38
 800841e:	e7bb      	b.n	8008398 <_dtoa_r+0x1b0>
 8008420:	2301      	movs	r3, #1
 8008422:	930a      	str	r3, [sp, #40]	; 0x28
 8008424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	dd59      	ble.n	80084de <_dtoa_r+0x2f6>
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	4699      	mov	r9, r3
 800842e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008430:	2200      	movs	r2, #0
 8008432:	6072      	str	r2, [r6, #4]
 8008434:	2204      	movs	r2, #4
 8008436:	f102 0014 	add.w	r0, r2, #20
 800843a:	4298      	cmp	r0, r3
 800843c:	6871      	ldr	r1, [r6, #4]
 800843e:	d953      	bls.n	80084e8 <_dtoa_r+0x300>
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fcaa 	bl	8008d9a <_Balloc>
 8008446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008448:	6030      	str	r0, [r6, #0]
 800844a:	f1b9 0f0e 	cmp.w	r9, #14
 800844e:	f8d3 b000 	ldr.w	fp, [r3]
 8008452:	f200 80e6 	bhi.w	8008622 <_dtoa_r+0x43a>
 8008456:	2d00      	cmp	r5, #0
 8008458:	f000 80e3 	beq.w	8008622 <_dtoa_r+0x43a>
 800845c:	ed9d 7b00 	vldr	d7, [sp]
 8008460:	f1ba 0f00 	cmp.w	sl, #0
 8008464:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008468:	dd74      	ble.n	8008554 <_dtoa_r+0x36c>
 800846a:	4a2a      	ldr	r2, [pc, #168]	; (8008514 <_dtoa_r+0x32c>)
 800846c:	f00a 030f 	and.w	r3, sl, #15
 8008470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008474:	ed93 7b00 	vldr	d7, [r3]
 8008478:	ea4f 162a 	mov.w	r6, sl, asr #4
 800847c:	06f0      	lsls	r0, r6, #27
 800847e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008482:	d565      	bpl.n	8008550 <_dtoa_r+0x368>
 8008484:	4b24      	ldr	r3, [pc, #144]	; (8008518 <_dtoa_r+0x330>)
 8008486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800848a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800848e:	f7f8 f9fd 	bl	800088c <__aeabi_ddiv>
 8008492:	e9cd 0100 	strd	r0, r1, [sp]
 8008496:	f006 060f 	and.w	r6, r6, #15
 800849a:	2503      	movs	r5, #3
 800849c:	4f1e      	ldr	r7, [pc, #120]	; (8008518 <_dtoa_r+0x330>)
 800849e:	e04c      	b.n	800853a <_dtoa_r+0x352>
 80084a0:	2301      	movs	r3, #1
 80084a2:	930a      	str	r3, [sp, #40]	; 0x28
 80084a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a6:	4453      	add	r3, sl
 80084a8:	f103 0901 	add.w	r9, r3, #1
 80084ac:	9302      	str	r3, [sp, #8]
 80084ae:	464b      	mov	r3, r9
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	bfb8      	it	lt
 80084b4:	2301      	movlt	r3, #1
 80084b6:	e7ba      	b.n	800842e <_dtoa_r+0x246>
 80084b8:	2300      	movs	r3, #0
 80084ba:	e7b2      	b.n	8008422 <_dtoa_r+0x23a>
 80084bc:	2300      	movs	r3, #0
 80084be:	e7f0      	b.n	80084a2 <_dtoa_r+0x2ba>
 80084c0:	2501      	movs	r5, #1
 80084c2:	2300      	movs	r3, #0
 80084c4:	9306      	str	r3, [sp, #24]
 80084c6:	950a      	str	r5, [sp, #40]	; 0x28
 80084c8:	f04f 33ff 	mov.w	r3, #4294967295
 80084cc:	9302      	str	r3, [sp, #8]
 80084ce:	4699      	mov	r9, r3
 80084d0:	2200      	movs	r2, #0
 80084d2:	2312      	movs	r3, #18
 80084d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80084d6:	e7aa      	b.n	800842e <_dtoa_r+0x246>
 80084d8:	2301      	movs	r3, #1
 80084da:	930a      	str	r3, [sp, #40]	; 0x28
 80084dc:	e7f4      	b.n	80084c8 <_dtoa_r+0x2e0>
 80084de:	2301      	movs	r3, #1
 80084e0:	9302      	str	r3, [sp, #8]
 80084e2:	4699      	mov	r9, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	e7f5      	b.n	80084d4 <_dtoa_r+0x2ec>
 80084e8:	3101      	adds	r1, #1
 80084ea:	6071      	str	r1, [r6, #4]
 80084ec:	0052      	lsls	r2, r2, #1
 80084ee:	e7a2      	b.n	8008436 <_dtoa_r+0x24e>
 80084f0:	636f4361 	.word	0x636f4361
 80084f4:	3fd287a7 	.word	0x3fd287a7
 80084f8:	8b60c8b3 	.word	0x8b60c8b3
 80084fc:	3fc68a28 	.word	0x3fc68a28
 8008500:	509f79fb 	.word	0x509f79fb
 8008504:	3fd34413 	.word	0x3fd34413
 8008508:	7ff00000 	.word	0x7ff00000
 800850c:	0800b365 	.word	0x0800b365
 8008510:	3ff80000 	.word	0x3ff80000
 8008514:	0800b3c0 	.word	0x0800b3c0
 8008518:	0800b398 	.word	0x0800b398
 800851c:	0800b391 	.word	0x0800b391
 8008520:	07f1      	lsls	r1, r6, #31
 8008522:	d508      	bpl.n	8008536 <_dtoa_r+0x34e>
 8008524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852c:	f7f8 f884 	bl	8000638 <__aeabi_dmul>
 8008530:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008534:	3501      	adds	r5, #1
 8008536:	1076      	asrs	r6, r6, #1
 8008538:	3708      	adds	r7, #8
 800853a:	2e00      	cmp	r6, #0
 800853c:	d1f0      	bne.n	8008520 <_dtoa_r+0x338>
 800853e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008546:	f7f8 f9a1 	bl	800088c <__aeabi_ddiv>
 800854a:	e9cd 0100 	strd	r0, r1, [sp]
 800854e:	e01a      	b.n	8008586 <_dtoa_r+0x39e>
 8008550:	2502      	movs	r5, #2
 8008552:	e7a3      	b.n	800849c <_dtoa_r+0x2b4>
 8008554:	f000 80a0 	beq.w	8008698 <_dtoa_r+0x4b0>
 8008558:	f1ca 0600 	rsb	r6, sl, #0
 800855c:	4b9f      	ldr	r3, [pc, #636]	; (80087dc <_dtoa_r+0x5f4>)
 800855e:	4fa0      	ldr	r7, [pc, #640]	; (80087e0 <_dtoa_r+0x5f8>)
 8008560:	f006 020f 	and.w	r2, r6, #15
 8008564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008570:	f7f8 f862 	bl	8000638 <__aeabi_dmul>
 8008574:	e9cd 0100 	strd	r0, r1, [sp]
 8008578:	1136      	asrs	r6, r6, #4
 800857a:	2300      	movs	r3, #0
 800857c:	2502      	movs	r5, #2
 800857e:	2e00      	cmp	r6, #0
 8008580:	d17f      	bne.n	8008682 <_dtoa_r+0x49a>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e1      	bne.n	800854a <_dtoa_r+0x362>
 8008586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8087 	beq.w	800869c <_dtoa_r+0x4b4>
 800858e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008592:	2200      	movs	r2, #0
 8008594:	4b93      	ldr	r3, [pc, #588]	; (80087e4 <_dtoa_r+0x5fc>)
 8008596:	4630      	mov	r0, r6
 8008598:	4639      	mov	r1, r7
 800859a:	f7f8 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d07c      	beq.n	800869c <_dtoa_r+0x4b4>
 80085a2:	f1b9 0f00 	cmp.w	r9, #0
 80085a6:	d079      	beq.n	800869c <_dtoa_r+0x4b4>
 80085a8:	9b02      	ldr	r3, [sp, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dd35      	ble.n	800861a <_dtoa_r+0x432>
 80085ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085b2:	9308      	str	r3, [sp, #32]
 80085b4:	4639      	mov	r1, r7
 80085b6:	2200      	movs	r2, #0
 80085b8:	4b8b      	ldr	r3, [pc, #556]	; (80087e8 <_dtoa_r+0x600>)
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7f8 f83c 	bl	8000638 <__aeabi_dmul>
 80085c0:	e9cd 0100 	strd	r0, r1, [sp]
 80085c4:	9f02      	ldr	r7, [sp, #8]
 80085c6:	3501      	adds	r5, #1
 80085c8:	4628      	mov	r0, r5
 80085ca:	f7f7 ffcb 	bl	8000564 <__aeabi_i2d>
 80085ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d2:	f7f8 f831 	bl	8000638 <__aeabi_dmul>
 80085d6:	2200      	movs	r2, #0
 80085d8:	4b84      	ldr	r3, [pc, #528]	; (80087ec <_dtoa_r+0x604>)
 80085da:	f7f7 fe77 	bl	80002cc <__adddf3>
 80085de:	4605      	mov	r5, r0
 80085e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80085e4:	2f00      	cmp	r7, #0
 80085e6:	d15d      	bne.n	80086a4 <_dtoa_r+0x4bc>
 80085e8:	2200      	movs	r2, #0
 80085ea:	4b81      	ldr	r3, [pc, #516]	; (80087f0 <_dtoa_r+0x608>)
 80085ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f0:	f7f7 fe6a 	bl	80002c8 <__aeabi_dsub>
 80085f4:	462a      	mov	r2, r5
 80085f6:	4633      	mov	r3, r6
 80085f8:	e9cd 0100 	strd	r0, r1, [sp]
 80085fc:	f7f8 faac 	bl	8000b58 <__aeabi_dcmpgt>
 8008600:	2800      	cmp	r0, #0
 8008602:	f040 8288 	bne.w	8008b16 <_dtoa_r+0x92e>
 8008606:	462a      	mov	r2, r5
 8008608:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800860c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008610:	f7f8 fa84 	bl	8000b1c <__aeabi_dcmplt>
 8008614:	2800      	cmp	r0, #0
 8008616:	f040 827c 	bne.w	8008b12 <_dtoa_r+0x92a>
 800861a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800861e:	e9cd 2300 	strd	r2, r3, [sp]
 8008622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008624:	2b00      	cmp	r3, #0
 8008626:	f2c0 8150 	blt.w	80088ca <_dtoa_r+0x6e2>
 800862a:	f1ba 0f0e 	cmp.w	sl, #14
 800862e:	f300 814c 	bgt.w	80088ca <_dtoa_r+0x6e2>
 8008632:	4b6a      	ldr	r3, [pc, #424]	; (80087dc <_dtoa_r+0x5f4>)
 8008634:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008638:	ed93 7b00 	vldr	d7, [r3]
 800863c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863e:	2b00      	cmp	r3, #0
 8008640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008644:	f280 80d8 	bge.w	80087f8 <_dtoa_r+0x610>
 8008648:	f1b9 0f00 	cmp.w	r9, #0
 800864c:	f300 80d4 	bgt.w	80087f8 <_dtoa_r+0x610>
 8008650:	f040 825e 	bne.w	8008b10 <_dtoa_r+0x928>
 8008654:	2200      	movs	r2, #0
 8008656:	4b66      	ldr	r3, [pc, #408]	; (80087f0 <_dtoa_r+0x608>)
 8008658:	ec51 0b17 	vmov	r0, r1, d7
 800865c:	f7f7 ffec 	bl	8000638 <__aeabi_dmul>
 8008660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008664:	f7f8 fa6e 	bl	8000b44 <__aeabi_dcmpge>
 8008668:	464f      	mov	r7, r9
 800866a:	464e      	mov	r6, r9
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 8234 	bne.w	8008ada <_dtoa_r+0x8f2>
 8008672:	2331      	movs	r3, #49	; 0x31
 8008674:	f10b 0501 	add.w	r5, fp, #1
 8008678:	f88b 3000 	strb.w	r3, [fp]
 800867c:	f10a 0a01 	add.w	sl, sl, #1
 8008680:	e22f      	b.n	8008ae2 <_dtoa_r+0x8fa>
 8008682:	07f2      	lsls	r2, r6, #31
 8008684:	d505      	bpl.n	8008692 <_dtoa_r+0x4aa>
 8008686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800868a:	f7f7 ffd5 	bl	8000638 <__aeabi_dmul>
 800868e:	3501      	adds	r5, #1
 8008690:	2301      	movs	r3, #1
 8008692:	1076      	asrs	r6, r6, #1
 8008694:	3708      	adds	r7, #8
 8008696:	e772      	b.n	800857e <_dtoa_r+0x396>
 8008698:	2502      	movs	r5, #2
 800869a:	e774      	b.n	8008586 <_dtoa_r+0x39e>
 800869c:	f8cd a020 	str.w	sl, [sp, #32]
 80086a0:	464f      	mov	r7, r9
 80086a2:	e791      	b.n	80085c8 <_dtoa_r+0x3e0>
 80086a4:	4b4d      	ldr	r3, [pc, #308]	; (80087dc <_dtoa_r+0x5f4>)
 80086a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80086ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d047      	beq.n	8008744 <_dtoa_r+0x55c>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	2000      	movs	r0, #0
 80086ba:	494e      	ldr	r1, [pc, #312]	; (80087f4 <_dtoa_r+0x60c>)
 80086bc:	f7f8 f8e6 	bl	800088c <__aeabi_ddiv>
 80086c0:	462a      	mov	r2, r5
 80086c2:	4633      	mov	r3, r6
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80086cc:	465d      	mov	r5, fp
 80086ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086d2:	f7f8 fa61 	bl	8000b98 <__aeabi_d2iz>
 80086d6:	4606      	mov	r6, r0
 80086d8:	f7f7 ff44 	bl	8000564 <__aeabi_i2d>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086e4:	f7f7 fdf0 	bl	80002c8 <__aeabi_dsub>
 80086e8:	3630      	adds	r6, #48	; 0x30
 80086ea:	f805 6b01 	strb.w	r6, [r5], #1
 80086ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086f2:	e9cd 0100 	strd	r0, r1, [sp]
 80086f6:	f7f8 fa11 	bl	8000b1c <__aeabi_dcmplt>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d163      	bne.n	80087c6 <_dtoa_r+0x5de>
 80086fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008702:	2000      	movs	r0, #0
 8008704:	4937      	ldr	r1, [pc, #220]	; (80087e4 <_dtoa_r+0x5fc>)
 8008706:	f7f7 fddf 	bl	80002c8 <__aeabi_dsub>
 800870a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800870e:	f7f8 fa05 	bl	8000b1c <__aeabi_dcmplt>
 8008712:	2800      	cmp	r0, #0
 8008714:	f040 80b7 	bne.w	8008886 <_dtoa_r+0x69e>
 8008718:	eba5 030b 	sub.w	r3, r5, fp
 800871c:	429f      	cmp	r7, r3
 800871e:	f77f af7c 	ble.w	800861a <_dtoa_r+0x432>
 8008722:	2200      	movs	r2, #0
 8008724:	4b30      	ldr	r3, [pc, #192]	; (80087e8 <_dtoa_r+0x600>)
 8008726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800872a:	f7f7 ff85 	bl	8000638 <__aeabi_dmul>
 800872e:	2200      	movs	r2, #0
 8008730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008734:	4b2c      	ldr	r3, [pc, #176]	; (80087e8 <_dtoa_r+0x600>)
 8008736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800873a:	f7f7 ff7d 	bl	8000638 <__aeabi_dmul>
 800873e:	e9cd 0100 	strd	r0, r1, [sp]
 8008742:	e7c4      	b.n	80086ce <_dtoa_r+0x4e6>
 8008744:	462a      	mov	r2, r5
 8008746:	4633      	mov	r3, r6
 8008748:	f7f7 ff76 	bl	8000638 <__aeabi_dmul>
 800874c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008750:	eb0b 0507 	add.w	r5, fp, r7
 8008754:	465e      	mov	r6, fp
 8008756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800875a:	f7f8 fa1d 	bl	8000b98 <__aeabi_d2iz>
 800875e:	4607      	mov	r7, r0
 8008760:	f7f7 ff00 	bl	8000564 <__aeabi_i2d>
 8008764:	3730      	adds	r7, #48	; 0x30
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800876e:	f7f7 fdab 	bl	80002c8 <__aeabi_dsub>
 8008772:	f806 7b01 	strb.w	r7, [r6], #1
 8008776:	42ae      	cmp	r6, r5
 8008778:	e9cd 0100 	strd	r0, r1, [sp]
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	d126      	bne.n	80087d0 <_dtoa_r+0x5e8>
 8008782:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <_dtoa_r+0x60c>)
 8008784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008788:	f7f7 fda0 	bl	80002cc <__adddf3>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008794:	f7f8 f9e0 	bl	8000b58 <__aeabi_dcmpgt>
 8008798:	2800      	cmp	r0, #0
 800879a:	d174      	bne.n	8008886 <_dtoa_r+0x69e>
 800879c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087a0:	2000      	movs	r0, #0
 80087a2:	4914      	ldr	r1, [pc, #80]	; (80087f4 <_dtoa_r+0x60c>)
 80087a4:	f7f7 fd90 	bl	80002c8 <__aeabi_dsub>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b0:	f7f8 f9b4 	bl	8000b1c <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f43f af30 	beq.w	800861a <_dtoa_r+0x432>
 80087ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087be:	2b30      	cmp	r3, #48	; 0x30
 80087c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80087c4:	d002      	beq.n	80087cc <_dtoa_r+0x5e4>
 80087c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80087ca:	e04a      	b.n	8008862 <_dtoa_r+0x67a>
 80087cc:	4615      	mov	r5, r2
 80087ce:	e7f4      	b.n	80087ba <_dtoa_r+0x5d2>
 80087d0:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <_dtoa_r+0x600>)
 80087d2:	f7f7 ff31 	bl	8000638 <__aeabi_dmul>
 80087d6:	e9cd 0100 	strd	r0, r1, [sp]
 80087da:	e7bc      	b.n	8008756 <_dtoa_r+0x56e>
 80087dc:	0800b3c0 	.word	0x0800b3c0
 80087e0:	0800b398 	.word	0x0800b398
 80087e4:	3ff00000 	.word	0x3ff00000
 80087e8:	40240000 	.word	0x40240000
 80087ec:	401c0000 	.word	0x401c0000
 80087f0:	40140000 	.word	0x40140000
 80087f4:	3fe00000 	.word	0x3fe00000
 80087f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087fc:	465d      	mov	r5, fp
 80087fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008802:	4630      	mov	r0, r6
 8008804:	4639      	mov	r1, r7
 8008806:	f7f8 f841 	bl	800088c <__aeabi_ddiv>
 800880a:	f7f8 f9c5 	bl	8000b98 <__aeabi_d2iz>
 800880e:	4680      	mov	r8, r0
 8008810:	f7f7 fea8 	bl	8000564 <__aeabi_i2d>
 8008814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008818:	f7f7 ff0e 	bl	8000638 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008828:	f7f7 fd4e 	bl	80002c8 <__aeabi_dsub>
 800882c:	f805 6b01 	strb.w	r6, [r5], #1
 8008830:	eba5 060b 	sub.w	r6, r5, fp
 8008834:	45b1      	cmp	r9, r6
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	d139      	bne.n	80088b0 <_dtoa_r+0x6c8>
 800883c:	f7f7 fd46 	bl	80002cc <__adddf3>
 8008840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008844:	4606      	mov	r6, r0
 8008846:	460f      	mov	r7, r1
 8008848:	f7f8 f986 	bl	8000b58 <__aeabi_dcmpgt>
 800884c:	b9c8      	cbnz	r0, 8008882 <_dtoa_r+0x69a>
 800884e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008852:	4630      	mov	r0, r6
 8008854:	4639      	mov	r1, r7
 8008856:	f7f8 f957 	bl	8000b08 <__aeabi_dcmpeq>
 800885a:	b110      	cbz	r0, 8008862 <_dtoa_r+0x67a>
 800885c:	f018 0f01 	tst.w	r8, #1
 8008860:	d10f      	bne.n	8008882 <_dtoa_r+0x69a>
 8008862:	9904      	ldr	r1, [sp, #16]
 8008864:	4620      	mov	r0, r4
 8008866:	f000 facc 	bl	8008e02 <_Bfree>
 800886a:	2300      	movs	r3, #0
 800886c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800886e:	702b      	strb	r3, [r5, #0]
 8008870:	f10a 0301 	add.w	r3, sl, #1
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 8241 	beq.w	8008d00 <_dtoa_r+0xb18>
 800887e:	601d      	str	r5, [r3, #0]
 8008880:	e23e      	b.n	8008d00 <_dtoa_r+0xb18>
 8008882:	f8cd a020 	str.w	sl, [sp, #32]
 8008886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800888a:	2a39      	cmp	r2, #57	; 0x39
 800888c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008890:	d108      	bne.n	80088a4 <_dtoa_r+0x6bc>
 8008892:	459b      	cmp	fp, r3
 8008894:	d10a      	bne.n	80088ac <_dtoa_r+0x6c4>
 8008896:	9b08      	ldr	r3, [sp, #32]
 8008898:	3301      	adds	r3, #1
 800889a:	9308      	str	r3, [sp, #32]
 800889c:	2330      	movs	r3, #48	; 0x30
 800889e:	f88b 3000 	strb.w	r3, [fp]
 80088a2:	465b      	mov	r3, fp
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	3201      	adds	r2, #1
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	e78c      	b.n	80087c6 <_dtoa_r+0x5de>
 80088ac:	461d      	mov	r5, r3
 80088ae:	e7ea      	b.n	8008886 <_dtoa_r+0x69e>
 80088b0:	2200      	movs	r2, #0
 80088b2:	4b9b      	ldr	r3, [pc, #620]	; (8008b20 <_dtoa_r+0x938>)
 80088b4:	f7f7 fec0 	bl	8000638 <__aeabi_dmul>
 80088b8:	2200      	movs	r2, #0
 80088ba:	2300      	movs	r3, #0
 80088bc:	4606      	mov	r6, r0
 80088be:	460f      	mov	r7, r1
 80088c0:	f7f8 f922 	bl	8000b08 <__aeabi_dcmpeq>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d09a      	beq.n	80087fe <_dtoa_r+0x616>
 80088c8:	e7cb      	b.n	8008862 <_dtoa_r+0x67a>
 80088ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	f000 808b 	beq.w	80089e8 <_dtoa_r+0x800>
 80088d2:	9a06      	ldr	r2, [sp, #24]
 80088d4:	2a01      	cmp	r2, #1
 80088d6:	dc6e      	bgt.n	80089b6 <_dtoa_r+0x7ce>
 80088d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088da:	2a00      	cmp	r2, #0
 80088dc:	d067      	beq.n	80089ae <_dtoa_r+0x7c6>
 80088de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088e2:	9f07      	ldr	r7, [sp, #28]
 80088e4:	9d05      	ldr	r5, [sp, #20]
 80088e6:	9a05      	ldr	r2, [sp, #20]
 80088e8:	2101      	movs	r1, #1
 80088ea:	441a      	add	r2, r3
 80088ec:	4620      	mov	r0, r4
 80088ee:	9205      	str	r2, [sp, #20]
 80088f0:	4498      	add	r8, r3
 80088f2:	f000 fb26 	bl	8008f42 <__i2b>
 80088f6:	4606      	mov	r6, r0
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	dd0c      	ble.n	8008916 <_dtoa_r+0x72e>
 80088fc:	f1b8 0f00 	cmp.w	r8, #0
 8008900:	dd09      	ble.n	8008916 <_dtoa_r+0x72e>
 8008902:	4545      	cmp	r5, r8
 8008904:	9a05      	ldr	r2, [sp, #20]
 8008906:	462b      	mov	r3, r5
 8008908:	bfa8      	it	ge
 800890a:	4643      	movge	r3, r8
 800890c:	1ad2      	subs	r2, r2, r3
 800890e:	9205      	str	r2, [sp, #20]
 8008910:	1aed      	subs	r5, r5, r3
 8008912:	eba8 0803 	sub.w	r8, r8, r3
 8008916:	9b07      	ldr	r3, [sp, #28]
 8008918:	b1eb      	cbz	r3, 8008956 <_dtoa_r+0x76e>
 800891a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891c:	2b00      	cmp	r3, #0
 800891e:	d067      	beq.n	80089f0 <_dtoa_r+0x808>
 8008920:	b18f      	cbz	r7, 8008946 <_dtoa_r+0x75e>
 8008922:	4631      	mov	r1, r6
 8008924:	463a      	mov	r2, r7
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fbaa 	bl	8009080 <__pow5mult>
 800892c:	9a04      	ldr	r2, [sp, #16]
 800892e:	4601      	mov	r1, r0
 8008930:	4606      	mov	r6, r0
 8008932:	4620      	mov	r0, r4
 8008934:	f000 fb0e 	bl	8008f54 <__multiply>
 8008938:	9904      	ldr	r1, [sp, #16]
 800893a:	9008      	str	r0, [sp, #32]
 800893c:	4620      	mov	r0, r4
 800893e:	f000 fa60 	bl	8008e02 <_Bfree>
 8008942:	9b08      	ldr	r3, [sp, #32]
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	9b07      	ldr	r3, [sp, #28]
 8008948:	1bda      	subs	r2, r3, r7
 800894a:	d004      	beq.n	8008956 <_dtoa_r+0x76e>
 800894c:	9904      	ldr	r1, [sp, #16]
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fb96 	bl	8009080 <__pow5mult>
 8008954:	9004      	str	r0, [sp, #16]
 8008956:	2101      	movs	r1, #1
 8008958:	4620      	mov	r0, r4
 800895a:	f000 faf2 	bl	8008f42 <__i2b>
 800895e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008960:	4607      	mov	r7, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 81d0 	beq.w	8008d08 <_dtoa_r+0xb20>
 8008968:	461a      	mov	r2, r3
 800896a:	4601      	mov	r1, r0
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fb87 	bl	8009080 <__pow5mult>
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b01      	cmp	r3, #1
 8008976:	4607      	mov	r7, r0
 8008978:	dc40      	bgt.n	80089fc <_dtoa_r+0x814>
 800897a:	9b00      	ldr	r3, [sp, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d139      	bne.n	80089f4 <_dtoa_r+0x80c>
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008986:	2b00      	cmp	r3, #0
 8008988:	d136      	bne.n	80089f8 <_dtoa_r+0x810>
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008990:	0d1b      	lsrs	r3, r3, #20
 8008992:	051b      	lsls	r3, r3, #20
 8008994:	b12b      	cbz	r3, 80089a2 <_dtoa_r+0x7ba>
 8008996:	9b05      	ldr	r3, [sp, #20]
 8008998:	3301      	adds	r3, #1
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	f108 0801 	add.w	r8, r8, #1
 80089a0:	2301      	movs	r3, #1
 80089a2:	9307      	str	r3, [sp, #28]
 80089a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d12a      	bne.n	8008a00 <_dtoa_r+0x818>
 80089aa:	2001      	movs	r0, #1
 80089ac:	e030      	b.n	8008a10 <_dtoa_r+0x828>
 80089ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089b4:	e795      	b.n	80088e2 <_dtoa_r+0x6fa>
 80089b6:	9b07      	ldr	r3, [sp, #28]
 80089b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80089bc:	42bb      	cmp	r3, r7
 80089be:	bfbf      	itttt	lt
 80089c0:	9b07      	ldrlt	r3, [sp, #28]
 80089c2:	9707      	strlt	r7, [sp, #28]
 80089c4:	1afa      	sublt	r2, r7, r3
 80089c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80089c8:	bfbb      	ittet	lt
 80089ca:	189b      	addlt	r3, r3, r2
 80089cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80089ce:	1bdf      	subge	r7, r3, r7
 80089d0:	2700      	movlt	r7, #0
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	bfb5      	itete	lt
 80089d8:	9b05      	ldrlt	r3, [sp, #20]
 80089da:	9d05      	ldrge	r5, [sp, #20]
 80089dc:	eba3 0509 	sublt.w	r5, r3, r9
 80089e0:	464b      	movge	r3, r9
 80089e2:	bfb8      	it	lt
 80089e4:	2300      	movlt	r3, #0
 80089e6:	e77e      	b.n	80088e6 <_dtoa_r+0x6fe>
 80089e8:	9f07      	ldr	r7, [sp, #28]
 80089ea:	9d05      	ldr	r5, [sp, #20]
 80089ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80089ee:	e783      	b.n	80088f8 <_dtoa_r+0x710>
 80089f0:	9a07      	ldr	r2, [sp, #28]
 80089f2:	e7ab      	b.n	800894c <_dtoa_r+0x764>
 80089f4:	2300      	movs	r3, #0
 80089f6:	e7d4      	b.n	80089a2 <_dtoa_r+0x7ba>
 80089f8:	9b00      	ldr	r3, [sp, #0]
 80089fa:	e7d2      	b.n	80089a2 <_dtoa_r+0x7ba>
 80089fc:	2300      	movs	r3, #0
 80089fe:	9307      	str	r3, [sp, #28]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008a06:	6918      	ldr	r0, [r3, #16]
 8008a08:	f000 fa4d 	bl	8008ea6 <__hi0bits>
 8008a0c:	f1c0 0020 	rsb	r0, r0, #32
 8008a10:	4440      	add	r0, r8
 8008a12:	f010 001f 	ands.w	r0, r0, #31
 8008a16:	d047      	beq.n	8008aa8 <_dtoa_r+0x8c0>
 8008a18:	f1c0 0320 	rsb	r3, r0, #32
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	dd3b      	ble.n	8008a98 <_dtoa_r+0x8b0>
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	f1c0 001c 	rsb	r0, r0, #28
 8008a26:	4403      	add	r3, r0
 8008a28:	9305      	str	r3, [sp, #20]
 8008a2a:	4405      	add	r5, r0
 8008a2c:	4480      	add	r8, r0
 8008a2e:	9b05      	ldr	r3, [sp, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd05      	ble.n	8008a40 <_dtoa_r+0x858>
 8008a34:	461a      	mov	r2, r3
 8008a36:	9904      	ldr	r1, [sp, #16]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fb6f 	bl	800911c <__lshift>
 8008a3e:	9004      	str	r0, [sp, #16]
 8008a40:	f1b8 0f00 	cmp.w	r8, #0
 8008a44:	dd05      	ble.n	8008a52 <_dtoa_r+0x86a>
 8008a46:	4639      	mov	r1, r7
 8008a48:	4642      	mov	r2, r8
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fb66 	bl	800911c <__lshift>
 8008a50:	4607      	mov	r7, r0
 8008a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a54:	b353      	cbz	r3, 8008aac <_dtoa_r+0x8c4>
 8008a56:	4639      	mov	r1, r7
 8008a58:	9804      	ldr	r0, [sp, #16]
 8008a5a:	f000 fbb3 	bl	80091c4 <__mcmp>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	da24      	bge.n	8008aac <_dtoa_r+0x8c4>
 8008a62:	2300      	movs	r3, #0
 8008a64:	220a      	movs	r2, #10
 8008a66:	9904      	ldr	r1, [sp, #16]
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 f9e1 	bl	8008e30 <__multadd>
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	9004      	str	r0, [sp, #16]
 8008a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 814d 	beq.w	8008d16 <_dtoa_r+0xb2e>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4631      	mov	r1, r6
 8008a80:	220a      	movs	r2, #10
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 f9d4 	bl	8008e30 <__multadd>
 8008a88:	9b02      	ldr	r3, [sp, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	dc4f      	bgt.n	8008b30 <_dtoa_r+0x948>
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	dd4c      	ble.n	8008b30 <_dtoa_r+0x948>
 8008a96:	e011      	b.n	8008abc <_dtoa_r+0x8d4>
 8008a98:	d0c9      	beq.n	8008a2e <_dtoa_r+0x846>
 8008a9a:	9a05      	ldr	r2, [sp, #20]
 8008a9c:	331c      	adds	r3, #28
 8008a9e:	441a      	add	r2, r3
 8008aa0:	9205      	str	r2, [sp, #20]
 8008aa2:	441d      	add	r5, r3
 8008aa4:	4498      	add	r8, r3
 8008aa6:	e7c2      	b.n	8008a2e <_dtoa_r+0x846>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	e7f6      	b.n	8008a9a <_dtoa_r+0x8b2>
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	dc38      	bgt.n	8008b24 <_dtoa_r+0x93c>
 8008ab2:	9b06      	ldr	r3, [sp, #24]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	dd35      	ble.n	8008b24 <_dtoa_r+0x93c>
 8008ab8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008abc:	9b02      	ldr	r3, [sp, #8]
 8008abe:	b963      	cbnz	r3, 8008ada <_dtoa_r+0x8f2>
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	2205      	movs	r2, #5
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 f9b3 	bl	8008e30 <__multadd>
 8008aca:	4601      	mov	r1, r0
 8008acc:	4607      	mov	r7, r0
 8008ace:	9804      	ldr	r0, [sp, #16]
 8008ad0:	f000 fb78 	bl	80091c4 <__mcmp>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f73f adcc 	bgt.w	8008672 <_dtoa_r+0x48a>
 8008ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008adc:	465d      	mov	r5, fp
 8008ade:	ea6f 0a03 	mvn.w	sl, r3
 8008ae2:	f04f 0900 	mov.w	r9, #0
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 f98a 	bl	8008e02 <_Bfree>
 8008aee:	2e00      	cmp	r6, #0
 8008af0:	f43f aeb7 	beq.w	8008862 <_dtoa_r+0x67a>
 8008af4:	f1b9 0f00 	cmp.w	r9, #0
 8008af8:	d005      	beq.n	8008b06 <_dtoa_r+0x91e>
 8008afa:	45b1      	cmp	r9, r6
 8008afc:	d003      	beq.n	8008b06 <_dtoa_r+0x91e>
 8008afe:	4649      	mov	r1, r9
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 f97e 	bl	8008e02 <_Bfree>
 8008b06:	4631      	mov	r1, r6
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f97a 	bl	8008e02 <_Bfree>
 8008b0e:	e6a8      	b.n	8008862 <_dtoa_r+0x67a>
 8008b10:	2700      	movs	r7, #0
 8008b12:	463e      	mov	r6, r7
 8008b14:	e7e1      	b.n	8008ada <_dtoa_r+0x8f2>
 8008b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008b1a:	463e      	mov	r6, r7
 8008b1c:	e5a9      	b.n	8008672 <_dtoa_r+0x48a>
 8008b1e:	bf00      	nop
 8008b20:	40240000 	.word	0x40240000
 8008b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 80fa 	beq.w	8008d24 <_dtoa_r+0xb3c>
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	dd05      	ble.n	8008b40 <_dtoa_r+0x958>
 8008b34:	4631      	mov	r1, r6
 8008b36:	462a      	mov	r2, r5
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 faef 	bl	800911c <__lshift>
 8008b3e:	4606      	mov	r6, r0
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d04c      	beq.n	8008be0 <_dtoa_r+0x9f8>
 8008b46:	6871      	ldr	r1, [r6, #4]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 f926 	bl	8008d9a <_Balloc>
 8008b4e:	6932      	ldr	r2, [r6, #16]
 8008b50:	3202      	adds	r2, #2
 8008b52:	4605      	mov	r5, r0
 8008b54:	0092      	lsls	r2, r2, #2
 8008b56:	f106 010c 	add.w	r1, r6, #12
 8008b5a:	300c      	adds	r0, #12
 8008b5c:	f000 f912 	bl	8008d84 <memcpy>
 8008b60:	2201      	movs	r2, #1
 8008b62:	4629      	mov	r1, r5
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fad9 	bl	800911c <__lshift>
 8008b6a:	9b00      	ldr	r3, [sp, #0]
 8008b6c:	f8cd b014 	str.w	fp, [sp, #20]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	46b1      	mov	r9, r6
 8008b76:	9307      	str	r3, [sp, #28]
 8008b78:	4606      	mov	r6, r0
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	9804      	ldr	r0, [sp, #16]
 8008b7e:	f7ff faa7 	bl	80080d0 <quorem>
 8008b82:	4649      	mov	r1, r9
 8008b84:	4605      	mov	r5, r0
 8008b86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b8a:	9804      	ldr	r0, [sp, #16]
 8008b8c:	f000 fb1a 	bl	80091c4 <__mcmp>
 8008b90:	4632      	mov	r2, r6
 8008b92:	9000      	str	r0, [sp, #0]
 8008b94:	4639      	mov	r1, r7
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 fb2e 	bl	80091f8 <__mdiff>
 8008b9c:	68c3      	ldr	r3, [r0, #12]
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	bb03      	cbnz	r3, 8008be4 <_dtoa_r+0x9fc>
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	9008      	str	r0, [sp, #32]
 8008ba6:	9804      	ldr	r0, [sp, #16]
 8008ba8:	f000 fb0c 	bl	80091c4 <__mcmp>
 8008bac:	9a08      	ldr	r2, [sp, #32]
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	9308      	str	r3, [sp, #32]
 8008bb6:	f000 f924 	bl	8008e02 <_Bfree>
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	b9a3      	cbnz	r3, 8008be8 <_dtoa_r+0xa00>
 8008bbe:	9a06      	ldr	r2, [sp, #24]
 8008bc0:	b992      	cbnz	r2, 8008be8 <_dtoa_r+0xa00>
 8008bc2:	9a07      	ldr	r2, [sp, #28]
 8008bc4:	b982      	cbnz	r2, 8008be8 <_dtoa_r+0xa00>
 8008bc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bca:	d029      	beq.n	8008c20 <_dtoa_r+0xa38>
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dd01      	ble.n	8008bd6 <_dtoa_r+0x9ee>
 8008bd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008bd6:	9b05      	ldr	r3, [sp, #20]
 8008bd8:	1c5d      	adds	r5, r3, #1
 8008bda:	f883 8000 	strb.w	r8, [r3]
 8008bde:	e782      	b.n	8008ae6 <_dtoa_r+0x8fe>
 8008be0:	4630      	mov	r0, r6
 8008be2:	e7c2      	b.n	8008b6a <_dtoa_r+0x982>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e7e3      	b.n	8008bb0 <_dtoa_r+0x9c8>
 8008be8:	9a00      	ldr	r2, [sp, #0]
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	db04      	blt.n	8008bf8 <_dtoa_r+0xa10>
 8008bee:	d125      	bne.n	8008c3c <_dtoa_r+0xa54>
 8008bf0:	9a06      	ldr	r2, [sp, #24]
 8008bf2:	bb1a      	cbnz	r2, 8008c3c <_dtoa_r+0xa54>
 8008bf4:	9a07      	ldr	r2, [sp, #28]
 8008bf6:	bb0a      	cbnz	r2, 8008c3c <_dtoa_r+0xa54>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	ddec      	ble.n	8008bd6 <_dtoa_r+0x9ee>
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	9904      	ldr	r1, [sp, #16]
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fa8b 	bl	800911c <__lshift>
 8008c06:	4639      	mov	r1, r7
 8008c08:	9004      	str	r0, [sp, #16]
 8008c0a:	f000 fadb 	bl	80091c4 <__mcmp>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	dc03      	bgt.n	8008c1a <_dtoa_r+0xa32>
 8008c12:	d1e0      	bne.n	8008bd6 <_dtoa_r+0x9ee>
 8008c14:	f018 0f01 	tst.w	r8, #1
 8008c18:	d0dd      	beq.n	8008bd6 <_dtoa_r+0x9ee>
 8008c1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c1e:	d1d8      	bne.n	8008bd2 <_dtoa_r+0x9ea>
 8008c20:	9b05      	ldr	r3, [sp, #20]
 8008c22:	9a05      	ldr	r2, [sp, #20]
 8008c24:	1c5d      	adds	r5, r3, #1
 8008c26:	2339      	movs	r3, #57	; 0x39
 8008c28:	7013      	strb	r3, [r2, #0]
 8008c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c2e:	2b39      	cmp	r3, #57	; 0x39
 8008c30:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c34:	d04f      	beq.n	8008cd6 <_dtoa_r+0xaee>
 8008c36:	3301      	adds	r3, #1
 8008c38:	7013      	strb	r3, [r2, #0]
 8008c3a:	e754      	b.n	8008ae6 <_dtoa_r+0x8fe>
 8008c3c:	9a05      	ldr	r2, [sp, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f102 0501 	add.w	r5, r2, #1
 8008c44:	dd06      	ble.n	8008c54 <_dtoa_r+0xa6c>
 8008c46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c4a:	d0e9      	beq.n	8008c20 <_dtoa_r+0xa38>
 8008c4c:	f108 0801 	add.w	r8, r8, #1
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	e7c2      	b.n	8008bda <_dtoa_r+0x9f2>
 8008c54:	9a02      	ldr	r2, [sp, #8]
 8008c56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008c5a:	eba5 030b 	sub.w	r3, r5, fp
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d021      	beq.n	8008ca6 <_dtoa_r+0xabe>
 8008c62:	2300      	movs	r3, #0
 8008c64:	220a      	movs	r2, #10
 8008c66:	9904      	ldr	r1, [sp, #16]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 f8e1 	bl	8008e30 <__multadd>
 8008c6e:	45b1      	cmp	r9, r6
 8008c70:	9004      	str	r0, [sp, #16]
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	f04f 020a 	mov.w	r2, #10
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	d105      	bne.n	8008c8c <_dtoa_r+0xaa4>
 8008c80:	f000 f8d6 	bl	8008e30 <__multadd>
 8008c84:	4681      	mov	r9, r0
 8008c86:	4606      	mov	r6, r0
 8008c88:	9505      	str	r5, [sp, #20]
 8008c8a:	e776      	b.n	8008b7a <_dtoa_r+0x992>
 8008c8c:	f000 f8d0 	bl	8008e30 <__multadd>
 8008c90:	4631      	mov	r1, r6
 8008c92:	4681      	mov	r9, r0
 8008c94:	2300      	movs	r3, #0
 8008c96:	220a      	movs	r2, #10
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 f8c9 	bl	8008e30 <__multadd>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	e7f2      	b.n	8008c88 <_dtoa_r+0xaa0>
 8008ca2:	f04f 0900 	mov.w	r9, #0
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	9904      	ldr	r1, [sp, #16]
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fa36 	bl	800911c <__lshift>
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	9004      	str	r0, [sp, #16]
 8008cb4:	f000 fa86 	bl	80091c4 <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	dcb6      	bgt.n	8008c2a <_dtoa_r+0xa42>
 8008cbc:	d102      	bne.n	8008cc4 <_dtoa_r+0xadc>
 8008cbe:	f018 0f01 	tst.w	r8, #1
 8008cc2:	d1b2      	bne.n	8008c2a <_dtoa_r+0xa42>
 8008cc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cc8:	2b30      	cmp	r3, #48	; 0x30
 8008cca:	f105 32ff 	add.w	r2, r5, #4294967295
 8008cce:	f47f af0a 	bne.w	8008ae6 <_dtoa_r+0x8fe>
 8008cd2:	4615      	mov	r5, r2
 8008cd4:	e7f6      	b.n	8008cc4 <_dtoa_r+0xadc>
 8008cd6:	4593      	cmp	fp, r2
 8008cd8:	d105      	bne.n	8008ce6 <_dtoa_r+0xafe>
 8008cda:	2331      	movs	r3, #49	; 0x31
 8008cdc:	f10a 0a01 	add.w	sl, sl, #1
 8008ce0:	f88b 3000 	strb.w	r3, [fp]
 8008ce4:	e6ff      	b.n	8008ae6 <_dtoa_r+0x8fe>
 8008ce6:	4615      	mov	r5, r2
 8008ce8:	e79f      	b.n	8008c2a <_dtoa_r+0xa42>
 8008cea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008d50 <_dtoa_r+0xb68>
 8008cee:	e007      	b.n	8008d00 <_dtoa_r+0xb18>
 8008cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008d54 <_dtoa_r+0xb6c>
 8008cf6:	b11b      	cbz	r3, 8008d00 <_dtoa_r+0xb18>
 8008cf8:	f10b 0308 	add.w	r3, fp, #8
 8008cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	4658      	mov	r0, fp
 8008d02:	b017      	add	sp, #92	; 0x5c
 8008d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d08:	9b06      	ldr	r3, [sp, #24]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	f77f ae35 	ble.w	800897a <_dtoa_r+0x792>
 8008d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	e649      	b.n	80089aa <_dtoa_r+0x7c2>
 8008d16:	9b02      	ldr	r3, [sp, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dc03      	bgt.n	8008d24 <_dtoa_r+0xb3c>
 8008d1c:	9b06      	ldr	r3, [sp, #24]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	f73f aecc 	bgt.w	8008abc <_dtoa_r+0x8d4>
 8008d24:	465d      	mov	r5, fp
 8008d26:	4639      	mov	r1, r7
 8008d28:	9804      	ldr	r0, [sp, #16]
 8008d2a:	f7ff f9d1 	bl	80080d0 <quorem>
 8008d2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d32:	f805 8b01 	strb.w	r8, [r5], #1
 8008d36:	9a02      	ldr	r2, [sp, #8]
 8008d38:	eba5 030b 	sub.w	r3, r5, fp
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	ddb0      	ble.n	8008ca2 <_dtoa_r+0xaba>
 8008d40:	2300      	movs	r3, #0
 8008d42:	220a      	movs	r2, #10
 8008d44:	9904      	ldr	r1, [sp, #16]
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 f872 	bl	8008e30 <__multadd>
 8008d4c:	9004      	str	r0, [sp, #16]
 8008d4e:	e7ea      	b.n	8008d26 <_dtoa_r+0xb3e>
 8008d50:	0800b364 	.word	0x0800b364
 8008d54:	0800b388 	.word	0x0800b388

08008d58 <_localeconv_r>:
 8008d58:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <_localeconv_r+0x14>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6a18      	ldr	r0, [r3, #32]
 8008d5e:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <_localeconv_r+0x18>)
 8008d60:	2800      	cmp	r0, #0
 8008d62:	bf08      	it	eq
 8008d64:	4618      	moveq	r0, r3
 8008d66:	30f0      	adds	r0, #240	; 0xf0
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20000040 	.word	0x20000040
 8008d70:	200000a4 	.word	0x200000a4

08008d74 <malloc>:
 8008d74:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <malloc+0xc>)
 8008d76:	4601      	mov	r1, r0
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	f000 bb45 	b.w	8009408 <_malloc_r>
 8008d7e:	bf00      	nop
 8008d80:	20000040 	.word	0x20000040

08008d84 <memcpy>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	1e43      	subs	r3, r0, #1
 8008d88:	440a      	add	r2, r1
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	d100      	bne.n	8008d90 <memcpy+0xc>
 8008d8e:	bd10      	pop	{r4, pc}
 8008d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d98:	e7f7      	b.n	8008d8a <memcpy+0x6>

08008d9a <_Balloc>:
 8008d9a:	b570      	push	{r4, r5, r6, lr}
 8008d9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d9e:	4604      	mov	r4, r0
 8008da0:	460e      	mov	r6, r1
 8008da2:	b93d      	cbnz	r5, 8008db4 <_Balloc+0x1a>
 8008da4:	2010      	movs	r0, #16
 8008da6:	f7ff ffe5 	bl	8008d74 <malloc>
 8008daa:	6260      	str	r0, [r4, #36]	; 0x24
 8008dac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008db0:	6005      	str	r5, [r0, #0]
 8008db2:	60c5      	str	r5, [r0, #12]
 8008db4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008db6:	68eb      	ldr	r3, [r5, #12]
 8008db8:	b183      	cbz	r3, 8008ddc <_Balloc+0x42>
 8008dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008dc2:	b9b8      	cbnz	r0, 8008df4 <_Balloc+0x5a>
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	fa01 f506 	lsl.w	r5, r1, r6
 8008dca:	1d6a      	adds	r2, r5, #5
 8008dcc:	0092      	lsls	r2, r2, #2
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fabe 	bl	8009350 <_calloc_r>
 8008dd4:	b160      	cbz	r0, 8008df0 <_Balloc+0x56>
 8008dd6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008dda:	e00e      	b.n	8008dfa <_Balloc+0x60>
 8008ddc:	2221      	movs	r2, #33	; 0x21
 8008dde:	2104      	movs	r1, #4
 8008de0:	4620      	mov	r0, r4
 8008de2:	f000 fab5 	bl	8009350 <_calloc_r>
 8008de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008de8:	60e8      	str	r0, [r5, #12]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e4      	bne.n	8008dba <_Balloc+0x20>
 8008df0:	2000      	movs	r0, #0
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	6802      	ldr	r2, [r0, #0]
 8008df6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e00:	e7f7      	b.n	8008df2 <_Balloc+0x58>

08008e02 <_Bfree>:
 8008e02:	b570      	push	{r4, r5, r6, lr}
 8008e04:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e06:	4606      	mov	r6, r0
 8008e08:	460d      	mov	r5, r1
 8008e0a:	b93c      	cbnz	r4, 8008e1c <_Bfree+0x1a>
 8008e0c:	2010      	movs	r0, #16
 8008e0e:	f7ff ffb1 	bl	8008d74 <malloc>
 8008e12:	6270      	str	r0, [r6, #36]	; 0x24
 8008e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e18:	6004      	str	r4, [r0, #0]
 8008e1a:	60c4      	str	r4, [r0, #12]
 8008e1c:	b13d      	cbz	r5, 8008e2e <_Bfree+0x2c>
 8008e1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e20:	686a      	ldr	r2, [r5, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e28:	6029      	str	r1, [r5, #0]
 8008e2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}

08008e30 <__multadd>:
 8008e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e34:	690d      	ldr	r5, [r1, #16]
 8008e36:	461f      	mov	r7, r3
 8008e38:	4606      	mov	r6, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	f101 0c14 	add.w	ip, r1, #20
 8008e40:	2300      	movs	r3, #0
 8008e42:	f8dc 0000 	ldr.w	r0, [ip]
 8008e46:	b281      	uxth	r1, r0
 8008e48:	fb02 7101 	mla	r1, r2, r1, r7
 8008e4c:	0c0f      	lsrs	r7, r1, #16
 8008e4e:	0c00      	lsrs	r0, r0, #16
 8008e50:	fb02 7000 	mla	r0, r2, r0, r7
 8008e54:	b289      	uxth	r1, r1
 8008e56:	3301      	adds	r3, #1
 8008e58:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008e5c:	429d      	cmp	r5, r3
 8008e5e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008e62:	f84c 1b04 	str.w	r1, [ip], #4
 8008e66:	dcec      	bgt.n	8008e42 <__multadd+0x12>
 8008e68:	b1d7      	cbz	r7, 8008ea0 <__multadd+0x70>
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	dc12      	bgt.n	8008e96 <__multadd+0x66>
 8008e70:	6861      	ldr	r1, [r4, #4]
 8008e72:	4630      	mov	r0, r6
 8008e74:	3101      	adds	r1, #1
 8008e76:	f7ff ff90 	bl	8008d9a <_Balloc>
 8008e7a:	6922      	ldr	r2, [r4, #16]
 8008e7c:	3202      	adds	r2, #2
 8008e7e:	f104 010c 	add.w	r1, r4, #12
 8008e82:	4680      	mov	r8, r0
 8008e84:	0092      	lsls	r2, r2, #2
 8008e86:	300c      	adds	r0, #12
 8008e88:	f7ff ff7c 	bl	8008d84 <memcpy>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff ffb7 	bl	8008e02 <_Bfree>
 8008e94:	4644      	mov	r4, r8
 8008e96:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e9a:	3501      	adds	r5, #1
 8008e9c:	615f      	str	r7, [r3, #20]
 8008e9e:	6125      	str	r5, [r4, #16]
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ea6 <__hi0bits>:
 8008ea6:	0c02      	lsrs	r2, r0, #16
 8008ea8:	0412      	lsls	r2, r2, #16
 8008eaa:	4603      	mov	r3, r0
 8008eac:	b9b2      	cbnz	r2, 8008edc <__hi0bits+0x36>
 8008eae:	0403      	lsls	r3, r0, #16
 8008eb0:	2010      	movs	r0, #16
 8008eb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008eb6:	bf04      	itt	eq
 8008eb8:	021b      	lsleq	r3, r3, #8
 8008eba:	3008      	addeq	r0, #8
 8008ebc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ec0:	bf04      	itt	eq
 8008ec2:	011b      	lsleq	r3, r3, #4
 8008ec4:	3004      	addeq	r0, #4
 8008ec6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008eca:	bf04      	itt	eq
 8008ecc:	009b      	lsleq	r3, r3, #2
 8008ece:	3002      	addeq	r0, #2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	db06      	blt.n	8008ee2 <__hi0bits+0x3c>
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	d503      	bpl.n	8008ee0 <__hi0bits+0x3a>
 8008ed8:	3001      	adds	r0, #1
 8008eda:	4770      	bx	lr
 8008edc:	2000      	movs	r0, #0
 8008ede:	e7e8      	b.n	8008eb2 <__hi0bits+0xc>
 8008ee0:	2020      	movs	r0, #32
 8008ee2:	4770      	bx	lr

08008ee4 <__lo0bits>:
 8008ee4:	6803      	ldr	r3, [r0, #0]
 8008ee6:	f013 0207 	ands.w	r2, r3, #7
 8008eea:	4601      	mov	r1, r0
 8008eec:	d00b      	beq.n	8008f06 <__lo0bits+0x22>
 8008eee:	07da      	lsls	r2, r3, #31
 8008ef0:	d423      	bmi.n	8008f3a <__lo0bits+0x56>
 8008ef2:	0798      	lsls	r0, r3, #30
 8008ef4:	bf49      	itett	mi
 8008ef6:	085b      	lsrmi	r3, r3, #1
 8008ef8:	089b      	lsrpl	r3, r3, #2
 8008efa:	2001      	movmi	r0, #1
 8008efc:	600b      	strmi	r3, [r1, #0]
 8008efe:	bf5c      	itt	pl
 8008f00:	600b      	strpl	r3, [r1, #0]
 8008f02:	2002      	movpl	r0, #2
 8008f04:	4770      	bx	lr
 8008f06:	b298      	uxth	r0, r3
 8008f08:	b9a8      	cbnz	r0, 8008f36 <__lo0bits+0x52>
 8008f0a:	0c1b      	lsrs	r3, r3, #16
 8008f0c:	2010      	movs	r0, #16
 8008f0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f12:	bf04      	itt	eq
 8008f14:	0a1b      	lsreq	r3, r3, #8
 8008f16:	3008      	addeq	r0, #8
 8008f18:	071a      	lsls	r2, r3, #28
 8008f1a:	bf04      	itt	eq
 8008f1c:	091b      	lsreq	r3, r3, #4
 8008f1e:	3004      	addeq	r0, #4
 8008f20:	079a      	lsls	r2, r3, #30
 8008f22:	bf04      	itt	eq
 8008f24:	089b      	lsreq	r3, r3, #2
 8008f26:	3002      	addeq	r0, #2
 8008f28:	07da      	lsls	r2, r3, #31
 8008f2a:	d402      	bmi.n	8008f32 <__lo0bits+0x4e>
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	d006      	beq.n	8008f3e <__lo0bits+0x5a>
 8008f30:	3001      	adds	r0, #1
 8008f32:	600b      	str	r3, [r1, #0]
 8008f34:	4770      	bx	lr
 8008f36:	4610      	mov	r0, r2
 8008f38:	e7e9      	b.n	8008f0e <__lo0bits+0x2a>
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	4770      	bx	lr
 8008f3e:	2020      	movs	r0, #32
 8008f40:	4770      	bx	lr

08008f42 <__i2b>:
 8008f42:	b510      	push	{r4, lr}
 8008f44:	460c      	mov	r4, r1
 8008f46:	2101      	movs	r1, #1
 8008f48:	f7ff ff27 	bl	8008d9a <_Balloc>
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	6144      	str	r4, [r0, #20]
 8008f50:	6102      	str	r2, [r0, #16]
 8008f52:	bd10      	pop	{r4, pc}

08008f54 <__multiply>:
 8008f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	4614      	mov	r4, r2
 8008f5a:	690a      	ldr	r2, [r1, #16]
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	bfb8      	it	lt
 8008f62:	460b      	movlt	r3, r1
 8008f64:	4688      	mov	r8, r1
 8008f66:	bfbc      	itt	lt
 8008f68:	46a0      	movlt	r8, r4
 8008f6a:	461c      	movlt	r4, r3
 8008f6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f7c:	eb07 0609 	add.w	r6, r7, r9
 8008f80:	42b3      	cmp	r3, r6
 8008f82:	bfb8      	it	lt
 8008f84:	3101      	addlt	r1, #1
 8008f86:	f7ff ff08 	bl	8008d9a <_Balloc>
 8008f8a:	f100 0514 	add.w	r5, r0, #20
 8008f8e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f92:	462b      	mov	r3, r5
 8008f94:	2200      	movs	r2, #0
 8008f96:	4573      	cmp	r3, lr
 8008f98:	d316      	bcc.n	8008fc8 <__multiply+0x74>
 8008f9a:	f104 0214 	add.w	r2, r4, #20
 8008f9e:	f108 0114 	add.w	r1, r8, #20
 8008fa2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008fa6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	9b00      	ldr	r3, [sp, #0]
 8008fae:	9201      	str	r2, [sp, #4]
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d80c      	bhi.n	8008fce <__multiply+0x7a>
 8008fb4:	2e00      	cmp	r6, #0
 8008fb6:	dd03      	ble.n	8008fc0 <__multiply+0x6c>
 8008fb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05d      	beq.n	800907c <__multiply+0x128>
 8008fc0:	6106      	str	r6, [r0, #16]
 8008fc2:	b003      	add	sp, #12
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc8:	f843 2b04 	str.w	r2, [r3], #4
 8008fcc:	e7e3      	b.n	8008f96 <__multiply+0x42>
 8008fce:	f8b2 b000 	ldrh.w	fp, [r2]
 8008fd2:	f1bb 0f00 	cmp.w	fp, #0
 8008fd6:	d023      	beq.n	8009020 <__multiply+0xcc>
 8008fd8:	4689      	mov	r9, r1
 8008fda:	46ac      	mov	ip, r5
 8008fdc:	f04f 0800 	mov.w	r8, #0
 8008fe0:	f859 4b04 	ldr.w	r4, [r9], #4
 8008fe4:	f8dc a000 	ldr.w	sl, [ip]
 8008fe8:	b2a3      	uxth	r3, r4
 8008fea:	fa1f fa8a 	uxth.w	sl, sl
 8008fee:	fb0b a303 	mla	r3, fp, r3, sl
 8008ff2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ff6:	f8dc 4000 	ldr.w	r4, [ip]
 8008ffa:	4443      	add	r3, r8
 8008ffc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009000:	fb0b 840a 	mla	r4, fp, sl, r8
 8009004:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009008:	46e2      	mov	sl, ip
 800900a:	b29b      	uxth	r3, r3
 800900c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009010:	454f      	cmp	r7, r9
 8009012:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009016:	f84a 3b04 	str.w	r3, [sl], #4
 800901a:	d82b      	bhi.n	8009074 <__multiply+0x120>
 800901c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009020:	9b01      	ldr	r3, [sp, #4]
 8009022:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009026:	3204      	adds	r2, #4
 8009028:	f1ba 0f00 	cmp.w	sl, #0
 800902c:	d020      	beq.n	8009070 <__multiply+0x11c>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	4689      	mov	r9, r1
 8009032:	46a8      	mov	r8, r5
 8009034:	f04f 0b00 	mov.w	fp, #0
 8009038:	f8b9 c000 	ldrh.w	ip, [r9]
 800903c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009040:	fb0a 440c 	mla	r4, sl, ip, r4
 8009044:	445c      	add	r4, fp
 8009046:	46c4      	mov	ip, r8
 8009048:	b29b      	uxth	r3, r3
 800904a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800904e:	f84c 3b04 	str.w	r3, [ip], #4
 8009052:	f859 3b04 	ldr.w	r3, [r9], #4
 8009056:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800905a:	0c1b      	lsrs	r3, r3, #16
 800905c:	fb0a b303 	mla	r3, sl, r3, fp
 8009060:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009064:	454f      	cmp	r7, r9
 8009066:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800906a:	d805      	bhi.n	8009078 <__multiply+0x124>
 800906c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009070:	3504      	adds	r5, #4
 8009072:	e79b      	b.n	8008fac <__multiply+0x58>
 8009074:	46d4      	mov	ip, sl
 8009076:	e7b3      	b.n	8008fe0 <__multiply+0x8c>
 8009078:	46e0      	mov	r8, ip
 800907a:	e7dd      	b.n	8009038 <__multiply+0xe4>
 800907c:	3e01      	subs	r6, #1
 800907e:	e799      	b.n	8008fb4 <__multiply+0x60>

08009080 <__pow5mult>:
 8009080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009084:	4615      	mov	r5, r2
 8009086:	f012 0203 	ands.w	r2, r2, #3
 800908a:	4606      	mov	r6, r0
 800908c:	460f      	mov	r7, r1
 800908e:	d007      	beq.n	80090a0 <__pow5mult+0x20>
 8009090:	3a01      	subs	r2, #1
 8009092:	4c21      	ldr	r4, [pc, #132]	; (8009118 <__pow5mult+0x98>)
 8009094:	2300      	movs	r3, #0
 8009096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800909a:	f7ff fec9 	bl	8008e30 <__multadd>
 800909e:	4607      	mov	r7, r0
 80090a0:	10ad      	asrs	r5, r5, #2
 80090a2:	d035      	beq.n	8009110 <__pow5mult+0x90>
 80090a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090a6:	b93c      	cbnz	r4, 80090b8 <__pow5mult+0x38>
 80090a8:	2010      	movs	r0, #16
 80090aa:	f7ff fe63 	bl	8008d74 <malloc>
 80090ae:	6270      	str	r0, [r6, #36]	; 0x24
 80090b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090b4:	6004      	str	r4, [r0, #0]
 80090b6:	60c4      	str	r4, [r0, #12]
 80090b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090c0:	b94c      	cbnz	r4, 80090d6 <__pow5mult+0x56>
 80090c2:	f240 2171 	movw	r1, #625	; 0x271
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7ff ff3b 	bl	8008f42 <__i2b>
 80090cc:	2300      	movs	r3, #0
 80090ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80090d2:	4604      	mov	r4, r0
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	f04f 0800 	mov.w	r8, #0
 80090da:	07eb      	lsls	r3, r5, #31
 80090dc:	d50a      	bpl.n	80090f4 <__pow5mult+0x74>
 80090de:	4639      	mov	r1, r7
 80090e0:	4622      	mov	r2, r4
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ff36 	bl	8008f54 <__multiply>
 80090e8:	4639      	mov	r1, r7
 80090ea:	4681      	mov	r9, r0
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7ff fe88 	bl	8008e02 <_Bfree>
 80090f2:	464f      	mov	r7, r9
 80090f4:	106d      	asrs	r5, r5, #1
 80090f6:	d00b      	beq.n	8009110 <__pow5mult+0x90>
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	b938      	cbnz	r0, 800910c <__pow5mult+0x8c>
 80090fc:	4622      	mov	r2, r4
 80090fe:	4621      	mov	r1, r4
 8009100:	4630      	mov	r0, r6
 8009102:	f7ff ff27 	bl	8008f54 <__multiply>
 8009106:	6020      	str	r0, [r4, #0]
 8009108:	f8c0 8000 	str.w	r8, [r0]
 800910c:	4604      	mov	r4, r0
 800910e:	e7e4      	b.n	80090da <__pow5mult+0x5a>
 8009110:	4638      	mov	r0, r7
 8009112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009116:	bf00      	nop
 8009118:	0800b488 	.word	0x0800b488

0800911c <__lshift>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	6849      	ldr	r1, [r1, #4]
 800912a:	eb0a 0903 	add.w	r9, sl, r3
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	4607      	mov	r7, r0
 8009132:	4616      	mov	r6, r2
 8009134:	f109 0501 	add.w	r5, r9, #1
 8009138:	42ab      	cmp	r3, r5
 800913a:	db32      	blt.n	80091a2 <__lshift+0x86>
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff fe2c 	bl	8008d9a <_Balloc>
 8009142:	2300      	movs	r3, #0
 8009144:	4680      	mov	r8, r0
 8009146:	f100 0114 	add.w	r1, r0, #20
 800914a:	461a      	mov	r2, r3
 800914c:	4553      	cmp	r3, sl
 800914e:	db2b      	blt.n	80091a8 <__lshift+0x8c>
 8009150:	6920      	ldr	r0, [r4, #16]
 8009152:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009156:	f104 0314 	add.w	r3, r4, #20
 800915a:	f016 021f 	ands.w	r2, r6, #31
 800915e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009162:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009166:	d025      	beq.n	80091b4 <__lshift+0x98>
 8009168:	f1c2 0e20 	rsb	lr, r2, #32
 800916c:	2000      	movs	r0, #0
 800916e:	681e      	ldr	r6, [r3, #0]
 8009170:	468a      	mov	sl, r1
 8009172:	4096      	lsls	r6, r2
 8009174:	4330      	orrs	r0, r6
 8009176:	f84a 0b04 	str.w	r0, [sl], #4
 800917a:	f853 0b04 	ldr.w	r0, [r3], #4
 800917e:	459c      	cmp	ip, r3
 8009180:	fa20 f00e 	lsr.w	r0, r0, lr
 8009184:	d814      	bhi.n	80091b0 <__lshift+0x94>
 8009186:	6048      	str	r0, [r1, #4]
 8009188:	b108      	cbz	r0, 800918e <__lshift+0x72>
 800918a:	f109 0502 	add.w	r5, r9, #2
 800918e:	3d01      	subs	r5, #1
 8009190:	4638      	mov	r0, r7
 8009192:	f8c8 5010 	str.w	r5, [r8, #16]
 8009196:	4621      	mov	r1, r4
 8009198:	f7ff fe33 	bl	8008e02 <_Bfree>
 800919c:	4640      	mov	r0, r8
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	3101      	adds	r1, #1
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	e7c7      	b.n	8009138 <__lshift+0x1c>
 80091a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80091ac:	3301      	adds	r3, #1
 80091ae:	e7cd      	b.n	800914c <__lshift+0x30>
 80091b0:	4651      	mov	r1, sl
 80091b2:	e7dc      	b.n	800916e <__lshift+0x52>
 80091b4:	3904      	subs	r1, #4
 80091b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80091be:	459c      	cmp	ip, r3
 80091c0:	d8f9      	bhi.n	80091b6 <__lshift+0x9a>
 80091c2:	e7e4      	b.n	800918e <__lshift+0x72>

080091c4 <__mcmp>:
 80091c4:	6903      	ldr	r3, [r0, #16]
 80091c6:	690a      	ldr	r2, [r1, #16]
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	b530      	push	{r4, r5, lr}
 80091cc:	d10c      	bne.n	80091e8 <__mcmp+0x24>
 80091ce:	0092      	lsls	r2, r2, #2
 80091d0:	3014      	adds	r0, #20
 80091d2:	3114      	adds	r1, #20
 80091d4:	1884      	adds	r4, r0, r2
 80091d6:	4411      	add	r1, r2
 80091d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091e0:	4295      	cmp	r5, r2
 80091e2:	d003      	beq.n	80091ec <__mcmp+0x28>
 80091e4:	d305      	bcc.n	80091f2 <__mcmp+0x2e>
 80091e6:	2301      	movs	r3, #1
 80091e8:	4618      	mov	r0, r3
 80091ea:	bd30      	pop	{r4, r5, pc}
 80091ec:	42a0      	cmp	r0, r4
 80091ee:	d3f3      	bcc.n	80091d8 <__mcmp+0x14>
 80091f0:	e7fa      	b.n	80091e8 <__mcmp+0x24>
 80091f2:	f04f 33ff 	mov.w	r3, #4294967295
 80091f6:	e7f7      	b.n	80091e8 <__mcmp+0x24>

080091f8 <__mdiff>:
 80091f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	460d      	mov	r5, r1
 80091fe:	4607      	mov	r7, r0
 8009200:	4611      	mov	r1, r2
 8009202:	4628      	mov	r0, r5
 8009204:	4614      	mov	r4, r2
 8009206:	f7ff ffdd 	bl	80091c4 <__mcmp>
 800920a:	1e06      	subs	r6, r0, #0
 800920c:	d108      	bne.n	8009220 <__mdiff+0x28>
 800920e:	4631      	mov	r1, r6
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff fdc2 	bl	8008d9a <_Balloc>
 8009216:	2301      	movs	r3, #1
 8009218:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800921c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009220:	bfa4      	itt	ge
 8009222:	4623      	movge	r3, r4
 8009224:	462c      	movge	r4, r5
 8009226:	4638      	mov	r0, r7
 8009228:	6861      	ldr	r1, [r4, #4]
 800922a:	bfa6      	itte	ge
 800922c:	461d      	movge	r5, r3
 800922e:	2600      	movge	r6, #0
 8009230:	2601      	movlt	r6, #1
 8009232:	f7ff fdb2 	bl	8008d9a <_Balloc>
 8009236:	692b      	ldr	r3, [r5, #16]
 8009238:	60c6      	str	r6, [r0, #12]
 800923a:	6926      	ldr	r6, [r4, #16]
 800923c:	f105 0914 	add.w	r9, r5, #20
 8009240:	f104 0214 	add.w	r2, r4, #20
 8009244:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009248:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800924c:	f100 0514 	add.w	r5, r0, #20
 8009250:	f04f 0e00 	mov.w	lr, #0
 8009254:	f852 ab04 	ldr.w	sl, [r2], #4
 8009258:	f859 4b04 	ldr.w	r4, [r9], #4
 800925c:	fa1e f18a 	uxtah	r1, lr, sl
 8009260:	b2a3      	uxth	r3, r4
 8009262:	1ac9      	subs	r1, r1, r3
 8009264:	0c23      	lsrs	r3, r4, #16
 8009266:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800926a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800926e:	b289      	uxth	r1, r1
 8009270:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009274:	45c8      	cmp	r8, r9
 8009276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800927a:	4694      	mov	ip, r2
 800927c:	f845 3b04 	str.w	r3, [r5], #4
 8009280:	d8e8      	bhi.n	8009254 <__mdiff+0x5c>
 8009282:	45bc      	cmp	ip, r7
 8009284:	d304      	bcc.n	8009290 <__mdiff+0x98>
 8009286:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800928a:	b183      	cbz	r3, 80092ae <__mdiff+0xb6>
 800928c:	6106      	str	r6, [r0, #16]
 800928e:	e7c5      	b.n	800921c <__mdiff+0x24>
 8009290:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009294:	fa1e f381 	uxtah	r3, lr, r1
 8009298:	141a      	asrs	r2, r3, #16
 800929a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80092a8:	f845 3b04 	str.w	r3, [r5], #4
 80092ac:	e7e9      	b.n	8009282 <__mdiff+0x8a>
 80092ae:	3e01      	subs	r6, #1
 80092b0:	e7e9      	b.n	8009286 <__mdiff+0x8e>

080092b2 <__d2b>:
 80092b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092b6:	460e      	mov	r6, r1
 80092b8:	2101      	movs	r1, #1
 80092ba:	ec59 8b10 	vmov	r8, r9, d0
 80092be:	4615      	mov	r5, r2
 80092c0:	f7ff fd6b 	bl	8008d9a <_Balloc>
 80092c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80092c8:	4607      	mov	r7, r0
 80092ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092ce:	bb34      	cbnz	r4, 800931e <__d2b+0x6c>
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	f1b8 0300 	subs.w	r3, r8, #0
 80092d6:	d027      	beq.n	8009328 <__d2b+0x76>
 80092d8:	a802      	add	r0, sp, #8
 80092da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80092de:	f7ff fe01 	bl	8008ee4 <__lo0bits>
 80092e2:	9900      	ldr	r1, [sp, #0]
 80092e4:	b1f0      	cbz	r0, 8009324 <__d2b+0x72>
 80092e6:	9a01      	ldr	r2, [sp, #4]
 80092e8:	f1c0 0320 	rsb	r3, r0, #32
 80092ec:	fa02 f303 	lsl.w	r3, r2, r3
 80092f0:	430b      	orrs	r3, r1
 80092f2:	40c2      	lsrs	r2, r0
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	9201      	str	r2, [sp, #4]
 80092f8:	9b01      	ldr	r3, [sp, #4]
 80092fa:	61bb      	str	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bf14      	ite	ne
 8009300:	2102      	movne	r1, #2
 8009302:	2101      	moveq	r1, #1
 8009304:	6139      	str	r1, [r7, #16]
 8009306:	b1c4      	cbz	r4, 800933a <__d2b+0x88>
 8009308:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800930c:	4404      	add	r4, r0
 800930e:	6034      	str	r4, [r6, #0]
 8009310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009314:	6028      	str	r0, [r5, #0]
 8009316:	4638      	mov	r0, r7
 8009318:	b003      	add	sp, #12
 800931a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800931e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009322:	e7d5      	b.n	80092d0 <__d2b+0x1e>
 8009324:	6179      	str	r1, [r7, #20]
 8009326:	e7e7      	b.n	80092f8 <__d2b+0x46>
 8009328:	a801      	add	r0, sp, #4
 800932a:	f7ff fddb 	bl	8008ee4 <__lo0bits>
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	2101      	movs	r1, #1
 8009334:	6139      	str	r1, [r7, #16]
 8009336:	3020      	adds	r0, #32
 8009338:	e7e5      	b.n	8009306 <__d2b+0x54>
 800933a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800933e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009342:	6030      	str	r0, [r6, #0]
 8009344:	6918      	ldr	r0, [r3, #16]
 8009346:	f7ff fdae 	bl	8008ea6 <__hi0bits>
 800934a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800934e:	e7e1      	b.n	8009314 <__d2b+0x62>

08009350 <_calloc_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	fb02 f401 	mul.w	r4, r2, r1
 8009356:	4621      	mov	r1, r4
 8009358:	f000 f856 	bl	8009408 <_malloc_r>
 800935c:	4605      	mov	r5, r0
 800935e:	b118      	cbz	r0, 8009368 <_calloc_r+0x18>
 8009360:	4622      	mov	r2, r4
 8009362:	2100      	movs	r1, #0
 8009364:	f7fe fa30 	bl	80077c8 <memset>
 8009368:	4628      	mov	r0, r5
 800936a:	bd38      	pop	{r3, r4, r5, pc}

0800936c <_free_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4605      	mov	r5, r0
 8009370:	2900      	cmp	r1, #0
 8009372:	d045      	beq.n	8009400 <_free_r+0x94>
 8009374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009378:	1f0c      	subs	r4, r1, #4
 800937a:	2b00      	cmp	r3, #0
 800937c:	bfb8      	it	lt
 800937e:	18e4      	addlt	r4, r4, r3
 8009380:	f000 fa29 	bl	80097d6 <__malloc_lock>
 8009384:	4a1f      	ldr	r2, [pc, #124]	; (8009404 <_free_r+0x98>)
 8009386:	6813      	ldr	r3, [r2, #0]
 8009388:	4610      	mov	r0, r2
 800938a:	b933      	cbnz	r3, 800939a <_free_r+0x2e>
 800938c:	6063      	str	r3, [r4, #4]
 800938e:	6014      	str	r4, [r2, #0]
 8009390:	4628      	mov	r0, r5
 8009392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009396:	f000 ba1f 	b.w	80097d8 <__malloc_unlock>
 800939a:	42a3      	cmp	r3, r4
 800939c:	d90c      	bls.n	80093b8 <_free_r+0x4c>
 800939e:	6821      	ldr	r1, [r4, #0]
 80093a0:	1862      	adds	r2, r4, r1
 80093a2:	4293      	cmp	r3, r2
 80093a4:	bf04      	itt	eq
 80093a6:	681a      	ldreq	r2, [r3, #0]
 80093a8:	685b      	ldreq	r3, [r3, #4]
 80093aa:	6063      	str	r3, [r4, #4]
 80093ac:	bf04      	itt	eq
 80093ae:	1852      	addeq	r2, r2, r1
 80093b0:	6022      	streq	r2, [r4, #0]
 80093b2:	6004      	str	r4, [r0, #0]
 80093b4:	e7ec      	b.n	8009390 <_free_r+0x24>
 80093b6:	4613      	mov	r3, r2
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	b10a      	cbz	r2, 80093c0 <_free_r+0x54>
 80093bc:	42a2      	cmp	r2, r4
 80093be:	d9fa      	bls.n	80093b6 <_free_r+0x4a>
 80093c0:	6819      	ldr	r1, [r3, #0]
 80093c2:	1858      	adds	r0, r3, r1
 80093c4:	42a0      	cmp	r0, r4
 80093c6:	d10b      	bne.n	80093e0 <_free_r+0x74>
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	4401      	add	r1, r0
 80093cc:	1858      	adds	r0, r3, r1
 80093ce:	4282      	cmp	r2, r0
 80093d0:	6019      	str	r1, [r3, #0]
 80093d2:	d1dd      	bne.n	8009390 <_free_r+0x24>
 80093d4:	6810      	ldr	r0, [r2, #0]
 80093d6:	6852      	ldr	r2, [r2, #4]
 80093d8:	605a      	str	r2, [r3, #4]
 80093da:	4401      	add	r1, r0
 80093dc:	6019      	str	r1, [r3, #0]
 80093de:	e7d7      	b.n	8009390 <_free_r+0x24>
 80093e0:	d902      	bls.n	80093e8 <_free_r+0x7c>
 80093e2:	230c      	movs	r3, #12
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	e7d3      	b.n	8009390 <_free_r+0x24>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	1821      	adds	r1, r4, r0
 80093ec:	428a      	cmp	r2, r1
 80093ee:	bf04      	itt	eq
 80093f0:	6811      	ldreq	r1, [r2, #0]
 80093f2:	6852      	ldreq	r2, [r2, #4]
 80093f4:	6062      	str	r2, [r4, #4]
 80093f6:	bf04      	itt	eq
 80093f8:	1809      	addeq	r1, r1, r0
 80093fa:	6021      	streq	r1, [r4, #0]
 80093fc:	605c      	str	r4, [r3, #4]
 80093fe:	e7c7      	b.n	8009390 <_free_r+0x24>
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	20000438 	.word	0x20000438

08009408 <_malloc_r>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	1ccd      	adds	r5, r1, #3
 800940c:	f025 0503 	bic.w	r5, r5, #3
 8009410:	3508      	adds	r5, #8
 8009412:	2d0c      	cmp	r5, #12
 8009414:	bf38      	it	cc
 8009416:	250c      	movcc	r5, #12
 8009418:	2d00      	cmp	r5, #0
 800941a:	4606      	mov	r6, r0
 800941c:	db01      	blt.n	8009422 <_malloc_r+0x1a>
 800941e:	42a9      	cmp	r1, r5
 8009420:	d903      	bls.n	800942a <_malloc_r+0x22>
 8009422:	230c      	movs	r3, #12
 8009424:	6033      	str	r3, [r6, #0]
 8009426:	2000      	movs	r0, #0
 8009428:	bd70      	pop	{r4, r5, r6, pc}
 800942a:	f000 f9d4 	bl	80097d6 <__malloc_lock>
 800942e:	4a21      	ldr	r2, [pc, #132]	; (80094b4 <_malloc_r+0xac>)
 8009430:	6814      	ldr	r4, [r2, #0]
 8009432:	4621      	mov	r1, r4
 8009434:	b991      	cbnz	r1, 800945c <_malloc_r+0x54>
 8009436:	4c20      	ldr	r4, [pc, #128]	; (80094b8 <_malloc_r+0xb0>)
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	b91b      	cbnz	r3, 8009444 <_malloc_r+0x3c>
 800943c:	4630      	mov	r0, r6
 800943e:	f000 f98f 	bl	8009760 <_sbrk_r>
 8009442:	6020      	str	r0, [r4, #0]
 8009444:	4629      	mov	r1, r5
 8009446:	4630      	mov	r0, r6
 8009448:	f000 f98a 	bl	8009760 <_sbrk_r>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d124      	bne.n	800949a <_malloc_r+0x92>
 8009450:	230c      	movs	r3, #12
 8009452:	6033      	str	r3, [r6, #0]
 8009454:	4630      	mov	r0, r6
 8009456:	f000 f9bf 	bl	80097d8 <__malloc_unlock>
 800945a:	e7e4      	b.n	8009426 <_malloc_r+0x1e>
 800945c:	680b      	ldr	r3, [r1, #0]
 800945e:	1b5b      	subs	r3, r3, r5
 8009460:	d418      	bmi.n	8009494 <_malloc_r+0x8c>
 8009462:	2b0b      	cmp	r3, #11
 8009464:	d90f      	bls.n	8009486 <_malloc_r+0x7e>
 8009466:	600b      	str	r3, [r1, #0]
 8009468:	50cd      	str	r5, [r1, r3]
 800946a:	18cc      	adds	r4, r1, r3
 800946c:	4630      	mov	r0, r6
 800946e:	f000 f9b3 	bl	80097d8 <__malloc_unlock>
 8009472:	f104 000b 	add.w	r0, r4, #11
 8009476:	1d23      	adds	r3, r4, #4
 8009478:	f020 0007 	bic.w	r0, r0, #7
 800947c:	1ac3      	subs	r3, r0, r3
 800947e:	d0d3      	beq.n	8009428 <_malloc_r+0x20>
 8009480:	425a      	negs	r2, r3
 8009482:	50e2      	str	r2, [r4, r3]
 8009484:	e7d0      	b.n	8009428 <_malloc_r+0x20>
 8009486:	428c      	cmp	r4, r1
 8009488:	684b      	ldr	r3, [r1, #4]
 800948a:	bf16      	itet	ne
 800948c:	6063      	strne	r3, [r4, #4]
 800948e:	6013      	streq	r3, [r2, #0]
 8009490:	460c      	movne	r4, r1
 8009492:	e7eb      	b.n	800946c <_malloc_r+0x64>
 8009494:	460c      	mov	r4, r1
 8009496:	6849      	ldr	r1, [r1, #4]
 8009498:	e7cc      	b.n	8009434 <_malloc_r+0x2c>
 800949a:	1cc4      	adds	r4, r0, #3
 800949c:	f024 0403 	bic.w	r4, r4, #3
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d005      	beq.n	80094b0 <_malloc_r+0xa8>
 80094a4:	1a21      	subs	r1, r4, r0
 80094a6:	4630      	mov	r0, r6
 80094a8:	f000 f95a 	bl	8009760 <_sbrk_r>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d0cf      	beq.n	8009450 <_malloc_r+0x48>
 80094b0:	6025      	str	r5, [r4, #0]
 80094b2:	e7db      	b.n	800946c <_malloc_r+0x64>
 80094b4:	20000438 	.word	0x20000438
 80094b8:	2000043c 	.word	0x2000043c

080094bc <__ssputs_r>:
 80094bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c0:	688e      	ldr	r6, [r1, #8]
 80094c2:	429e      	cmp	r6, r3
 80094c4:	4682      	mov	sl, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	4690      	mov	r8, r2
 80094ca:	4699      	mov	r9, r3
 80094cc:	d837      	bhi.n	800953e <__ssputs_r+0x82>
 80094ce:	898a      	ldrh	r2, [r1, #12]
 80094d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094d4:	d031      	beq.n	800953a <__ssputs_r+0x7e>
 80094d6:	6825      	ldr	r5, [r4, #0]
 80094d8:	6909      	ldr	r1, [r1, #16]
 80094da:	1a6f      	subs	r7, r5, r1
 80094dc:	6965      	ldr	r5, [r4, #20]
 80094de:	2302      	movs	r3, #2
 80094e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80094e8:	f109 0301 	add.w	r3, r9, #1
 80094ec:	443b      	add	r3, r7
 80094ee:	429d      	cmp	r5, r3
 80094f0:	bf38      	it	cc
 80094f2:	461d      	movcc	r5, r3
 80094f4:	0553      	lsls	r3, r2, #21
 80094f6:	d530      	bpl.n	800955a <__ssputs_r+0x9e>
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7ff ff85 	bl	8009408 <_malloc_r>
 80094fe:	4606      	mov	r6, r0
 8009500:	b950      	cbnz	r0, 8009518 <__ssputs_r+0x5c>
 8009502:	230c      	movs	r3, #12
 8009504:	f8ca 3000 	str.w	r3, [sl]
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009518:	463a      	mov	r2, r7
 800951a:	6921      	ldr	r1, [r4, #16]
 800951c:	f7ff fc32 	bl	8008d84 <memcpy>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	6126      	str	r6, [r4, #16]
 800952e:	6165      	str	r5, [r4, #20]
 8009530:	443e      	add	r6, r7
 8009532:	1bed      	subs	r5, r5, r7
 8009534:	6026      	str	r6, [r4, #0]
 8009536:	60a5      	str	r5, [r4, #8]
 8009538:	464e      	mov	r6, r9
 800953a:	454e      	cmp	r6, r9
 800953c:	d900      	bls.n	8009540 <__ssputs_r+0x84>
 800953e:	464e      	mov	r6, r9
 8009540:	4632      	mov	r2, r6
 8009542:	4641      	mov	r1, r8
 8009544:	6820      	ldr	r0, [r4, #0]
 8009546:	f000 f92d 	bl	80097a4 <memmove>
 800954a:	68a3      	ldr	r3, [r4, #8]
 800954c:	1b9b      	subs	r3, r3, r6
 800954e:	60a3      	str	r3, [r4, #8]
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	441e      	add	r6, r3
 8009554:	6026      	str	r6, [r4, #0]
 8009556:	2000      	movs	r0, #0
 8009558:	e7dc      	b.n	8009514 <__ssputs_r+0x58>
 800955a:	462a      	mov	r2, r5
 800955c:	f000 f93d 	bl	80097da <_realloc_r>
 8009560:	4606      	mov	r6, r0
 8009562:	2800      	cmp	r0, #0
 8009564:	d1e2      	bne.n	800952c <__ssputs_r+0x70>
 8009566:	6921      	ldr	r1, [r4, #16]
 8009568:	4650      	mov	r0, sl
 800956a:	f7ff feff 	bl	800936c <_free_r>
 800956e:	e7c8      	b.n	8009502 <__ssputs_r+0x46>

08009570 <_svfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	461d      	mov	r5, r3
 8009576:	898b      	ldrh	r3, [r1, #12]
 8009578:	061f      	lsls	r7, r3, #24
 800957a:	b09d      	sub	sp, #116	; 0x74
 800957c:	4680      	mov	r8, r0
 800957e:	460c      	mov	r4, r1
 8009580:	4616      	mov	r6, r2
 8009582:	d50f      	bpl.n	80095a4 <_svfiprintf_r+0x34>
 8009584:	690b      	ldr	r3, [r1, #16]
 8009586:	b96b      	cbnz	r3, 80095a4 <_svfiprintf_r+0x34>
 8009588:	2140      	movs	r1, #64	; 0x40
 800958a:	f7ff ff3d 	bl	8009408 <_malloc_r>
 800958e:	6020      	str	r0, [r4, #0]
 8009590:	6120      	str	r0, [r4, #16]
 8009592:	b928      	cbnz	r0, 80095a0 <_svfiprintf_r+0x30>
 8009594:	230c      	movs	r3, #12
 8009596:	f8c8 3000 	str.w	r3, [r8]
 800959a:	f04f 30ff 	mov.w	r0, #4294967295
 800959e:	e0c8      	b.n	8009732 <_svfiprintf_r+0x1c2>
 80095a0:	2340      	movs	r3, #64	; 0x40
 80095a2:	6163      	str	r3, [r4, #20]
 80095a4:	2300      	movs	r3, #0
 80095a6:	9309      	str	r3, [sp, #36]	; 0x24
 80095a8:	2320      	movs	r3, #32
 80095aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ae:	2330      	movs	r3, #48	; 0x30
 80095b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095b4:	9503      	str	r5, [sp, #12]
 80095b6:	f04f 0b01 	mov.w	fp, #1
 80095ba:	4637      	mov	r7, r6
 80095bc:	463d      	mov	r5, r7
 80095be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095c2:	b10b      	cbz	r3, 80095c8 <_svfiprintf_r+0x58>
 80095c4:	2b25      	cmp	r3, #37	; 0x25
 80095c6:	d13e      	bne.n	8009646 <_svfiprintf_r+0xd6>
 80095c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80095cc:	d00b      	beq.n	80095e6 <_svfiprintf_r+0x76>
 80095ce:	4653      	mov	r3, sl
 80095d0:	4632      	mov	r2, r6
 80095d2:	4621      	mov	r1, r4
 80095d4:	4640      	mov	r0, r8
 80095d6:	f7ff ff71 	bl	80094bc <__ssputs_r>
 80095da:	3001      	adds	r0, #1
 80095dc:	f000 80a4 	beq.w	8009728 <_svfiprintf_r+0x1b8>
 80095e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e2:	4453      	add	r3, sl
 80095e4:	9309      	str	r3, [sp, #36]	; 0x24
 80095e6:	783b      	ldrb	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 809d 	beq.w	8009728 <_svfiprintf_r+0x1b8>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f04f 32ff 	mov.w	r2, #4294967295
 80095f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009600:	931a      	str	r3, [sp, #104]	; 0x68
 8009602:	462f      	mov	r7, r5
 8009604:	2205      	movs	r2, #5
 8009606:	f817 1b01 	ldrb.w	r1, [r7], #1
 800960a:	4850      	ldr	r0, [pc, #320]	; (800974c <_svfiprintf_r+0x1dc>)
 800960c:	f7f6 fe08 	bl	8000220 <memchr>
 8009610:	9b04      	ldr	r3, [sp, #16]
 8009612:	b9d0      	cbnz	r0, 800964a <_svfiprintf_r+0xda>
 8009614:	06d9      	lsls	r1, r3, #27
 8009616:	bf44      	itt	mi
 8009618:	2220      	movmi	r2, #32
 800961a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800961e:	071a      	lsls	r2, r3, #28
 8009620:	bf44      	itt	mi
 8009622:	222b      	movmi	r2, #43	; 0x2b
 8009624:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009628:	782a      	ldrb	r2, [r5, #0]
 800962a:	2a2a      	cmp	r2, #42	; 0x2a
 800962c:	d015      	beq.n	800965a <_svfiprintf_r+0xea>
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	462f      	mov	r7, r5
 8009632:	2000      	movs	r0, #0
 8009634:	250a      	movs	r5, #10
 8009636:	4639      	mov	r1, r7
 8009638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963c:	3b30      	subs	r3, #48	; 0x30
 800963e:	2b09      	cmp	r3, #9
 8009640:	d94d      	bls.n	80096de <_svfiprintf_r+0x16e>
 8009642:	b1b8      	cbz	r0, 8009674 <_svfiprintf_r+0x104>
 8009644:	e00f      	b.n	8009666 <_svfiprintf_r+0xf6>
 8009646:	462f      	mov	r7, r5
 8009648:	e7b8      	b.n	80095bc <_svfiprintf_r+0x4c>
 800964a:	4a40      	ldr	r2, [pc, #256]	; (800974c <_svfiprintf_r+0x1dc>)
 800964c:	1a80      	subs	r0, r0, r2
 800964e:	fa0b f000 	lsl.w	r0, fp, r0
 8009652:	4318      	orrs	r0, r3
 8009654:	9004      	str	r0, [sp, #16]
 8009656:	463d      	mov	r5, r7
 8009658:	e7d3      	b.n	8009602 <_svfiprintf_r+0x92>
 800965a:	9a03      	ldr	r2, [sp, #12]
 800965c:	1d11      	adds	r1, r2, #4
 800965e:	6812      	ldr	r2, [r2, #0]
 8009660:	9103      	str	r1, [sp, #12]
 8009662:	2a00      	cmp	r2, #0
 8009664:	db01      	blt.n	800966a <_svfiprintf_r+0xfa>
 8009666:	9207      	str	r2, [sp, #28]
 8009668:	e004      	b.n	8009674 <_svfiprintf_r+0x104>
 800966a:	4252      	negs	r2, r2
 800966c:	f043 0302 	orr.w	r3, r3, #2
 8009670:	9207      	str	r2, [sp, #28]
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	783b      	ldrb	r3, [r7, #0]
 8009676:	2b2e      	cmp	r3, #46	; 0x2e
 8009678:	d10c      	bne.n	8009694 <_svfiprintf_r+0x124>
 800967a:	787b      	ldrb	r3, [r7, #1]
 800967c:	2b2a      	cmp	r3, #42	; 0x2a
 800967e:	d133      	bne.n	80096e8 <_svfiprintf_r+0x178>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d1a      	adds	r2, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9203      	str	r2, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfb8      	it	lt
 800968c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009690:	3702      	adds	r7, #2
 8009692:	9305      	str	r3, [sp, #20]
 8009694:	4d2e      	ldr	r5, [pc, #184]	; (8009750 <_svfiprintf_r+0x1e0>)
 8009696:	7839      	ldrb	r1, [r7, #0]
 8009698:	2203      	movs	r2, #3
 800969a:	4628      	mov	r0, r5
 800969c:	f7f6 fdc0 	bl	8000220 <memchr>
 80096a0:	b138      	cbz	r0, 80096b2 <_svfiprintf_r+0x142>
 80096a2:	2340      	movs	r3, #64	; 0x40
 80096a4:	1b40      	subs	r0, r0, r5
 80096a6:	fa03 f000 	lsl.w	r0, r3, r0
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	4303      	orrs	r3, r0
 80096ae:	3701      	adds	r7, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	7839      	ldrb	r1, [r7, #0]
 80096b4:	4827      	ldr	r0, [pc, #156]	; (8009754 <_svfiprintf_r+0x1e4>)
 80096b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096ba:	2206      	movs	r2, #6
 80096bc:	1c7e      	adds	r6, r7, #1
 80096be:	f7f6 fdaf 	bl	8000220 <memchr>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d038      	beq.n	8009738 <_svfiprintf_r+0x1c8>
 80096c6:	4b24      	ldr	r3, [pc, #144]	; (8009758 <_svfiprintf_r+0x1e8>)
 80096c8:	bb13      	cbnz	r3, 8009710 <_svfiprintf_r+0x1a0>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	3307      	adds	r3, #7
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	3308      	adds	r3, #8
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	444b      	add	r3, r9
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	e76d      	b.n	80095ba <_svfiprintf_r+0x4a>
 80096de:	fb05 3202 	mla	r2, r5, r2, r3
 80096e2:	2001      	movs	r0, #1
 80096e4:	460f      	mov	r7, r1
 80096e6:	e7a6      	b.n	8009636 <_svfiprintf_r+0xc6>
 80096e8:	2300      	movs	r3, #0
 80096ea:	3701      	adds	r7, #1
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4619      	mov	r1, r3
 80096f0:	250a      	movs	r5, #10
 80096f2:	4638      	mov	r0, r7
 80096f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f8:	3a30      	subs	r2, #48	; 0x30
 80096fa:	2a09      	cmp	r2, #9
 80096fc:	d903      	bls.n	8009706 <_svfiprintf_r+0x196>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0c8      	beq.n	8009694 <_svfiprintf_r+0x124>
 8009702:	9105      	str	r1, [sp, #20]
 8009704:	e7c6      	b.n	8009694 <_svfiprintf_r+0x124>
 8009706:	fb05 2101 	mla	r1, r5, r1, r2
 800970a:	2301      	movs	r3, #1
 800970c:	4607      	mov	r7, r0
 800970e:	e7f0      	b.n	80096f2 <_svfiprintf_r+0x182>
 8009710:	ab03      	add	r3, sp, #12
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	4622      	mov	r2, r4
 8009716:	4b11      	ldr	r3, [pc, #68]	; (800975c <_svfiprintf_r+0x1ec>)
 8009718:	a904      	add	r1, sp, #16
 800971a:	4640      	mov	r0, r8
 800971c:	f7fe f8f0 	bl	8007900 <_printf_float>
 8009720:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009724:	4681      	mov	r9, r0
 8009726:	d1d6      	bne.n	80096d6 <_svfiprintf_r+0x166>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	065b      	lsls	r3, r3, #25
 800972c:	f53f af35 	bmi.w	800959a <_svfiprintf_r+0x2a>
 8009730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009732:	b01d      	add	sp, #116	; 0x74
 8009734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009738:	ab03      	add	r3, sp, #12
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	4622      	mov	r2, r4
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <_svfiprintf_r+0x1ec>)
 8009740:	a904      	add	r1, sp, #16
 8009742:	4640      	mov	r0, r8
 8009744:	f7fe fb92 	bl	8007e6c <_printf_i>
 8009748:	e7ea      	b.n	8009720 <_svfiprintf_r+0x1b0>
 800974a:	bf00      	nop
 800974c:	0800b494 	.word	0x0800b494
 8009750:	0800b49a 	.word	0x0800b49a
 8009754:	0800b49e 	.word	0x0800b49e
 8009758:	08007901 	.word	0x08007901
 800975c:	080094bd 	.word	0x080094bd

08009760 <_sbrk_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4c06      	ldr	r4, [pc, #24]	; (800977c <_sbrk_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4605      	mov	r5, r0
 8009768:	4608      	mov	r0, r1
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	f7fa f9ce 	bl	8003b0c <_sbrk>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_sbrk_r+0x1a>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	b103      	cbz	r3, 800977a <_sbrk_r+0x1a>
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	20000658 	.word	0x20000658

08009780 <__ascii_mbtowc>:
 8009780:	b082      	sub	sp, #8
 8009782:	b901      	cbnz	r1, 8009786 <__ascii_mbtowc+0x6>
 8009784:	a901      	add	r1, sp, #4
 8009786:	b142      	cbz	r2, 800979a <__ascii_mbtowc+0x1a>
 8009788:	b14b      	cbz	r3, 800979e <__ascii_mbtowc+0x1e>
 800978a:	7813      	ldrb	r3, [r2, #0]
 800978c:	600b      	str	r3, [r1, #0]
 800978e:	7812      	ldrb	r2, [r2, #0]
 8009790:	1c10      	adds	r0, r2, #0
 8009792:	bf18      	it	ne
 8009794:	2001      	movne	r0, #1
 8009796:	b002      	add	sp, #8
 8009798:	4770      	bx	lr
 800979a:	4610      	mov	r0, r2
 800979c:	e7fb      	b.n	8009796 <__ascii_mbtowc+0x16>
 800979e:	f06f 0001 	mvn.w	r0, #1
 80097a2:	e7f8      	b.n	8009796 <__ascii_mbtowc+0x16>

080097a4 <memmove>:
 80097a4:	4288      	cmp	r0, r1
 80097a6:	b510      	push	{r4, lr}
 80097a8:	eb01 0302 	add.w	r3, r1, r2
 80097ac:	d807      	bhi.n	80097be <memmove+0x1a>
 80097ae:	1e42      	subs	r2, r0, #1
 80097b0:	4299      	cmp	r1, r3
 80097b2:	d00a      	beq.n	80097ca <memmove+0x26>
 80097b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80097bc:	e7f8      	b.n	80097b0 <memmove+0xc>
 80097be:	4283      	cmp	r3, r0
 80097c0:	d9f5      	bls.n	80097ae <memmove+0xa>
 80097c2:	1881      	adds	r1, r0, r2
 80097c4:	1ad2      	subs	r2, r2, r3
 80097c6:	42d3      	cmn	r3, r2
 80097c8:	d100      	bne.n	80097cc <memmove+0x28>
 80097ca:	bd10      	pop	{r4, pc}
 80097cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80097d4:	e7f7      	b.n	80097c6 <memmove+0x22>

080097d6 <__malloc_lock>:
 80097d6:	4770      	bx	lr

080097d8 <__malloc_unlock>:
 80097d8:	4770      	bx	lr

080097da <_realloc_r>:
 80097da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097dc:	4607      	mov	r7, r0
 80097de:	4614      	mov	r4, r2
 80097e0:	460e      	mov	r6, r1
 80097e2:	b921      	cbnz	r1, 80097ee <_realloc_r+0x14>
 80097e4:	4611      	mov	r1, r2
 80097e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097ea:	f7ff be0d 	b.w	8009408 <_malloc_r>
 80097ee:	b922      	cbnz	r2, 80097fa <_realloc_r+0x20>
 80097f0:	f7ff fdbc 	bl	800936c <_free_r>
 80097f4:	4625      	mov	r5, r4
 80097f6:	4628      	mov	r0, r5
 80097f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fa:	f000 f821 	bl	8009840 <_malloc_usable_size_r>
 80097fe:	42a0      	cmp	r0, r4
 8009800:	d20f      	bcs.n	8009822 <_realloc_r+0x48>
 8009802:	4621      	mov	r1, r4
 8009804:	4638      	mov	r0, r7
 8009806:	f7ff fdff 	bl	8009408 <_malloc_r>
 800980a:	4605      	mov	r5, r0
 800980c:	2800      	cmp	r0, #0
 800980e:	d0f2      	beq.n	80097f6 <_realloc_r+0x1c>
 8009810:	4631      	mov	r1, r6
 8009812:	4622      	mov	r2, r4
 8009814:	f7ff fab6 	bl	8008d84 <memcpy>
 8009818:	4631      	mov	r1, r6
 800981a:	4638      	mov	r0, r7
 800981c:	f7ff fda6 	bl	800936c <_free_r>
 8009820:	e7e9      	b.n	80097f6 <_realloc_r+0x1c>
 8009822:	4635      	mov	r5, r6
 8009824:	e7e7      	b.n	80097f6 <_realloc_r+0x1c>

08009826 <__ascii_wctomb>:
 8009826:	b149      	cbz	r1, 800983c <__ascii_wctomb+0x16>
 8009828:	2aff      	cmp	r2, #255	; 0xff
 800982a:	bf85      	ittet	hi
 800982c:	238a      	movhi	r3, #138	; 0x8a
 800982e:	6003      	strhi	r3, [r0, #0]
 8009830:	700a      	strbls	r2, [r1, #0]
 8009832:	f04f 30ff 	movhi.w	r0, #4294967295
 8009836:	bf98      	it	ls
 8009838:	2001      	movls	r0, #1
 800983a:	4770      	bx	lr
 800983c:	4608      	mov	r0, r1
 800983e:	4770      	bx	lr

08009840 <_malloc_usable_size_r>:
 8009840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009844:	1f18      	subs	r0, r3, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfbc      	itt	lt
 800984a:	580b      	ldrlt	r3, [r1, r0]
 800984c:	18c0      	addlt	r0, r0, r3
 800984e:	4770      	bx	lr

08009850 <_init>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr

0800985c <_fini>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr
