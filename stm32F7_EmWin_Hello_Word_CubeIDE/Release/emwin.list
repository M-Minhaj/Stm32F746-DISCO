
emwin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b864  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003084  0801ba34  0801ba34  0002ba34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801eab8  0801eab8  00030274  2**0
                  CONTENTS
  4 .ARM          00000008  0801eab8  0801eab8  0002eab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eac0  0801eac0  00030274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eac0  0801eac0  0002eac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801eac4  0801eac4  0002eac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0801eac8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00022444  20000274  0801ed3c  00030274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200226b8  0801ed3c  000326b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007361b  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009a71  00000000  00000000  000a38bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003208  00000000  00000000  000ad330  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003048  00000000  00000000  000b0538  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000396d4  00000000  00000000  000b3580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032bc8  00000000  00000000  000ecc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012d6c6  00000000  00000000  0011f81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0024cee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fcc  00000000  00000000  0024cfcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00026e1a  00000000  00000000  00255f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000274 	.word	0x20000274
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ba1c 	.word	0x0801ba1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000278 	.word	0x20000278
 800020c:	0801ba1c 	.word	0x0801ba1c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <vApplicationGetIdleTaskMemory+0x10>)
 8000512:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <vApplicationGetIdleTaskMemory+0x14>)
 8000516:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800051c:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 800051e:	4770      	bx	lr
 8000520:	200019bc 	.word	0x200019bc
 8000524:	200005bc 	.word	0x200005bc

08000528 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000528:	4770      	bx	lr

0800052a <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800052a:	2000      	movs	r0, #0
 800052c:	4770      	bx	lr

0800052e <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 800052e:	4770      	bx	lr

08000530 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8000530:	4b01      	ldr	r3, [pc, #4]	; (8000538 <ft5336_Get_I2C_InitializedStatus+0x8>)
 8000532:	7818      	ldrb	r0, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20001a14 	.word	0x20001a14

0800053c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800053c:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800053e:	f7ff fff7 	bl	8000530 <ft5336_Get_I2C_InitializedStatus>
 8000542:	b100      	cbz	r0, 8000546 <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8000544:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 8000546:	f001 f837 	bl	80015b8 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800054a:	4b02      	ldr	r3, [pc, #8]	; (8000554 <ft5336_I2C_InitializeIfRequired+0x18>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
}
 8000550:	e7f8      	b.n	8000544 <ft5336_I2C_InitializeIfRequired+0x8>
 8000552:	bf00      	nop
 8000554:	20001a14 	.word	0x20001a14

08000558 <ft5336_Init>:
{
 8000558:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 800055a:	20c8      	movs	r0, #200	; 0xc8
 800055c:	f001 f85c 	bl	8001618 <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 8000560:	f7ff ffec 	bl	800053c <ft5336_I2C_InitializeIfRequired>
}
 8000564:	bd08      	pop	{r3, pc}

08000566 <ft5336_ReadID>:
{
 8000566:	b570      	push	{r4, r5, r6, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 800056c:	2400      	movs	r4, #0
 800056e:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8000572:	f7ff ffe3 	bl	800053c <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000576:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000578:	e001      	b.n	800057e <ft5336_ReadID+0x18>
 800057a:	3401      	adds	r4, #1
 800057c:	b2e4      	uxtb	r4, r4
 800057e:	f085 0301 	eor.w	r3, r5, #1
 8000582:	2c02      	cmp	r4, #2
 8000584:	bf8c      	ite	hi
 8000586:	2300      	movhi	r3, #0
 8000588:	f003 0301 	andls.w	r3, r3, #1
 800058c:	b163      	cbz	r3, 80005a8 <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	21a8      	movs	r1, #168	; 0xa8
 8000590:	b2f0      	uxtb	r0, r6
 8000592:	f001 f82b 	bl	80015ec <TS_IO_Read>
 8000596:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800059a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b51      	cmp	r3, #81	; 0x51
 80005a2:	d1ea      	bne.n	800057a <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 80005a4:	2501      	movs	r5, #1
 80005a6:	e7e8      	b.n	800057a <ft5336_ReadID+0x14>
  return (ucReadId);
 80005a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80005ac:	b002      	add	sp, #8
 80005ae:	bd70      	pop	{r4, r5, r6, pc}

080005b0 <ft5336_TS_DetectTouch>:
{
 80005b0:	b500      	push	{lr}
 80005b2:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005ba:	2102      	movs	r1, #2
 80005bc:	b2c0      	uxtb	r0, r0
 80005be:	f001 f815 	bl	80015ec <TS_IO_Read>
 80005c2:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80005c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005ca:	f003 030f 	and.w	r3, r3, #15
 80005ce:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80005d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <ft5336_TS_DetectTouch+0x48>)
 80005e8:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80005ea:	2200      	movs	r2, #0
 80005ec:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 80005ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80005f2:	b003      	add	sp, #12
 80005f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f8:	20001a14 	.word	0x20001a14

080005fc <ft5336_TS_GetXY>:
{
 80005fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000600:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000608:	4d4f      	ldr	r5, [pc, #316]	; (8000748 <ft5336_TS_GetXY+0x14c>)
 800060a:	78ab      	ldrb	r3, [r5, #2]
 800060c:	786c      	ldrb	r4, [r5, #1]
 800060e:	42a3      	cmp	r3, r4
 8000610:	f080 8096 	bcs.w	8000740 <ft5336_TS_GetXY+0x144>
    switch(ft5336_handle.currActiveTouchIdx)
 8000614:	2b09      	cmp	r3, #9
 8000616:	d806      	bhi.n	8000626 <ft5336_TS_GetXY+0x2a>
 8000618:	e8df f003 	tbb	[pc, r3]
 800061c:	1b130b53 	.word	0x1b130b53
 8000620:	3b332b23 	.word	0x3b332b23
 8000624:	4b43      	.short	0x4b43
  uint8_t regAddressYHigh = 0;
 8000626:	f04f 0800 	mov.w	r8, #0
  uint8_t regAddressYLow = 0;
 800062a:	46c1      	mov	r9, r8
  uint8_t regAddressXHigh = 0;
 800062c:	46c2      	mov	sl, r8
  uint8_t regAddressXLow = 0;
 800062e:	4643      	mov	r3, r8
 8000630:	e04e      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P2_YH_REG;
 8000632:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 8000636:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 800063a:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 800063e:	230a      	movs	r3, #10
      break;
 8000640:	e046      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P3_YH_REG;
 8000642:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 8000646:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 800064a:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 800064e:	2310      	movs	r3, #16
      break;
 8000650:	e03e      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P4_YH_REG;
 8000652:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 8000656:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 800065a:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 800065e:	2316      	movs	r3, #22
      break;
 8000660:	e036      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P5_YH_REG;
 8000662:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8000666:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 800066a:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 800066e:	231c      	movs	r3, #28
      break;
 8000670:	e02e      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P6_YH_REG;
 8000672:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 8000676:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 800067a:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 800067e:	2322      	movs	r3, #34	; 0x22
      break;
 8000680:	e026      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P7_YH_REG;
 8000682:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 8000686:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 800068a:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 800068e:	2328      	movs	r3, #40	; 0x28
      break;
 8000690:	e01e      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P8_YH_REG;
 8000692:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 8000696:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 800069a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 800069e:	232e      	movs	r3, #46	; 0x2e
      break;
 80006a0:	e016      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P9_YH_REG;
 80006a2:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 80006a6:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 80006aa:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 80006ae:	2334      	movs	r3, #52	; 0x34
      break;
 80006b0:	e00e      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P10_YH_REG;
 80006b2:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 80006b6:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 80006ba:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 80006be:	233a      	movs	r3, #58	; 0x3a
      break;
 80006c0:	e006      	b.n	80006d0 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P1_YH_REG;
 80006c2:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 80006c6:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ca:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 80006ce:	2304      	movs	r3, #4
 80006d0:	4616      	mov	r6, r2
 80006d2:	460f      	mov	r7, r1
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80006d4:	b2c4      	uxtb	r4, r0
 80006d6:	4619      	mov	r1, r3
 80006d8:	4620      	mov	r0, r4
 80006da:	f000 ff87 	bl	80015ec <TS_IO_Read>
 80006de:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80006e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006e6:	4d19      	ldr	r5, [pc, #100]	; (800074c <ft5336_TS_GetXY+0x150>)
 80006e8:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80006ea:	4651      	mov	r1, sl
 80006ec:	4620      	mov	r0, r4
 80006ee:	f000 ff7d 	bl	80015ec <TS_IO_Read>
 80006f2:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80006f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000700:	882a      	ldrh	r2, [r5, #0]
 8000702:	4313      	orrs	r3, r2
 8000704:	802b      	strh	r3, [r5, #0]
    *X = coord;
 8000706:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000708:	4649      	mov	r1, r9
 800070a:	4620      	mov	r0, r4
 800070c:	f000 ff6e 	bl	80015ec <TS_IO_Read>
 8000710:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000714:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000718:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800071a:	4641      	mov	r1, r8
 800071c:	4620      	mov	r0, r4
 800071e:	f000 ff65 	bl	80015ec <TS_IO_Read>
 8000722:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000726:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000730:	882a      	ldrh	r2, [r5, #0]
 8000732:	4313      	orrs	r3, r2
 8000734:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 8000736:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <ft5336_TS_GetXY+0x14c>)
 800073a:	7893      	ldrb	r3, [r2, #2]
 800073c:	3301      	adds	r3, #1
 800073e:	7093      	strb	r3, [r2, #2]
}
 8000740:	b002      	add	sp, #8
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	bf00      	nop
 8000748:	20001a14 	.word	0x20001a14
 800074c:	20001a10 	.word	0x20001a10

08000750 <ft5336_TS_EnableIT>:
{
 8000750:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000752:	2201      	movs	r2, #1
 8000754:	21a4      	movs	r1, #164	; 0xa4
 8000756:	b2c0      	uxtb	r0, r0
 8000758:	f000 ff36 	bl	80015c8 <TS_IO_Write>
}
 800075c:	bd08      	pop	{r3, pc}

0800075e <ft5336_TS_DisableIT>:
{
 800075e:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000760:	2200      	movs	r2, #0
 8000762:	21a4      	movs	r1, #164	; 0xa4
 8000764:	b2c0      	uxtb	r0, r0
 8000766:	f000 ff2f 	bl	80015c8 <TS_IO_Write>
}
 800076a:	bd08      	pop	{r3, pc}

0800076c <ft5336_TS_Start>:
{
 800076c:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 800076e:	f7ff fff6 	bl	800075e <ft5336_TS_DisableIT>
}
 8000772:	bd08      	pop	{r3, pc}

08000774 <ft5336_TS_GetGestureID>:
{
 8000774:	b510      	push	{r4, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000780:	2101      	movs	r1, #1
 8000782:	b2c0      	uxtb	r0, r0
 8000784:	f000 ff32 	bl	80015ec <TS_IO_Read>
 8000788:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 800078c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000790:	6023      	str	r3, [r4, #0]
}
 8000792:	b002      	add	sp, #8
 8000794:	bd10      	pop	{r4, pc}
	...

08000798 <ft5336_TS_GetTouchInfo>:
{
 8000798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800079c:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 800079e:	2400      	movs	r4, #0
 80007a0:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80007a4:	4c33      	ldr	r4, [pc, #204]	; (8000874 <ft5336_TS_GetTouchInfo+0xdc>)
 80007a6:	7864      	ldrb	r4, [r4, #1]
 80007a8:	428c      	cmp	r4, r1
 80007aa:	d95f      	bls.n	800086c <ft5336_TS_GetTouchInfo+0xd4>
    switch(touchIdx)
 80007ac:	2909      	cmp	r1, #9
 80007ae:	d806      	bhi.n	80007be <ft5336_TS_GetTouchInfo+0x26>
 80007b0:	e8df f001 	tbb	[pc, r1]
 80007b4:	130e0936 	.word	0x130e0936
 80007b8:	27221d18 	.word	0x27221d18
 80007bc:	312c      	.short	0x312c
  uint8_t regAddressPMisc = 0;
 80007be:	2700      	movs	r7, #0
  uint8_t regAddressPWeight = 0;
 80007c0:	46b8      	mov	r8, r7
  uint8_t regAddressXHigh = 0;
 80007c2:	4639      	mov	r1, r7
 80007c4:	e030      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80007c6:	270e      	movs	r7, #14
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80007c8:	f04f 080d 	mov.w	r8, #13
      regAddressXHigh   = FT5336_P2_XH_REG;
 80007cc:	2109      	movs	r1, #9
      break;
 80007ce:	e02b      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80007d0:	2714      	movs	r7, #20
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80007d2:	f04f 0813 	mov.w	r8, #19
      regAddressXHigh   = FT5336_P3_XH_REG;
 80007d6:	210f      	movs	r1, #15
      break;
 80007d8:	e026      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80007da:	271a      	movs	r7, #26
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80007dc:	f04f 0819 	mov.w	r8, #25
      regAddressXHigh   = FT5336_P4_XH_REG;
 80007e0:	2115      	movs	r1, #21
      break;
 80007e2:	e021      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80007e4:	2720      	movs	r7, #32
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80007e6:	f04f 081f 	mov.w	r8, #31
      regAddressXHigh   = FT5336_P5_XH_REG;
 80007ea:	211b      	movs	r1, #27
      break;
 80007ec:	e01c      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80007ee:	2726      	movs	r7, #38	; 0x26
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80007f0:	f04f 0825 	mov.w	r8, #37	; 0x25
      regAddressXHigh   = FT5336_P6_XH_REG;
 80007f4:	2121      	movs	r1, #33	; 0x21
      break;
 80007f6:	e017      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80007f8:	272c      	movs	r7, #44	; 0x2c
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80007fa:	f04f 082b 	mov.w	r8, #43	; 0x2b
      regAddressXHigh   = FT5336_P7_XH_REG;
 80007fe:	2127      	movs	r1, #39	; 0x27
      break;
 8000800:	e012      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000802:	2732      	movs	r7, #50	; 0x32
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000804:	f04f 0831 	mov.w	r8, #49	; 0x31
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000808:	212d      	movs	r1, #45	; 0x2d
      break;
 800080a:	e00d      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800080c:	2738      	movs	r7, #56	; 0x38
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800080e:	f04f 0837 	mov.w	r8, #55	; 0x37
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000812:	2133      	movs	r1, #51	; 0x33
      break;
 8000814:	e008      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000816:	273e      	movs	r7, #62	; 0x3e
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000818:	f04f 083d 	mov.w	r8, #61	; 0x3d
      regAddressXHigh   = FT5336_P10_XH_REG;
 800081c:	2139      	movs	r1, #57	; 0x39
      break;
 800081e:	e003      	b.n	8000828 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000820:	2708      	movs	r7, #8
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000822:	f04f 0807 	mov.w	r8, #7
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000826:	2103      	movs	r1, #3
 8000828:	461d      	mov	r5, r3
 800082a:	4616      	mov	r6, r2
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800082c:	b2c4      	uxtb	r4, r0
 800082e:	4620      	mov	r0, r4
 8000830:	f000 fedc 	bl	80015ec <TS_IO_Read>
 8000834:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800083c:	099b      	lsrs	r3, r3, #6
 800083e:	9a08      	ldr	r2, [sp, #32]
 8000840:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000842:	4641      	mov	r1, r8
 8000844:	4620      	mov	r0, r4
 8000846:	f000 fed1 	bl	80015ec <TS_IO_Read>
 800084a:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800084e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000852:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000854:	4639      	mov	r1, r7
 8000856:	4620      	mov	r0, r4
 8000858:	f000 fec8 	bl	80015ec <TS_IO_Read>
 800085c:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000860:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000864:	0912      	lsrs	r2, r2, #4
 8000866:	f002 0204 	and.w	r2, r2, #4
 800086a:	602a      	str	r2, [r5, #0]
}
 800086c:	b002      	add	sp, #8
 800086e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000872:	bf00      	nop
 8000874:	20001a14 	.word	0x20001a14

08000878 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <MX_SDMMC1_SD_Init+0x18>)
 800087a:	4a06      	ldr	r2, [pc, #24]	; (8000894 <MX_SDMMC1_SD_Init+0x1c>)
 800087c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000882:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000884:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000886:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000888:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800088a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200214c8 	.word	0x200214c8
 8000894:	40012c00 	.word	0x40012c00

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800089c:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	2400      	movs	r4, #0
 80008a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80008a2:	940c      	str	r4, [sp, #48]	; 0x30
 80008a4:	940d      	str	r4, [sp, #52]	; 0x34
 80008a6:	940e      	str	r4, [sp, #56]	; 0x38
 80008a8:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	4baa      	ldr	r3, [pc, #680]	; (8000b54 <MX_GPIO_Init+0x2bc>)
 80008ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ae:	f042 0210 	orr.w	r2, r2, #16
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
 80008b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b6:	f002 0210 	and.w	r2, r2, #16
 80008ba:	9200      	str	r2, [sp, #0]
 80008bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
 80008c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d2:	f042 0202 	orr.w	r2, r2, #2
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
 80008d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008da:	f002 0202 	and.w	r2, r2, #2
 80008de:	9202      	str	r2, [sp, #8]
 80008e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e4:	f042 0208 	orr.w	r2, r2, #8
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
 80008ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ec:	f002 0208 	and.w	r2, r2, #8
 80008f0:	9203      	str	r2, [sp, #12]
 80008f2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f6:	f042 0204 	orr.w	r2, r2, #4
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
 80008fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008fe:	f002 0204 	and.w	r2, r2, #4
 8000902:	9204      	str	r2, [sp, #16]
 8000904:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000908:	f042 0201 	orr.w	r2, r2, #1
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
 800090e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000910:	f002 0201 	and.w	r2, r2, #1
 8000914:	9205      	str	r2, [sp, #20]
 8000916:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800091a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
 8000920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000922:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000926:	9206      	str	r2, [sp, #24]
 8000928:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800092a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
 8000932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000934:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000938:	9207      	str	r2, [sp, #28]
 800093a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800093c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
 8000944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000946:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800094a:	9208      	str	r2, [sp, #32]
 800094c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000950:	f042 0220 	orr.w	r2, r2, #32
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
 8000956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000958:	f002 0220 	and.w	r2, r2, #32
 800095c:	9209      	str	r2, [sp, #36]	; 0x24
 800095e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	930a      	str	r3, [sp, #40]	; 0x28
 8000970:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2120      	movs	r1, #32
 8000976:	4878      	ldr	r0, [pc, #480]	; (8000b58 <MX_GPIO_Init+0x2c0>)
 8000978:	f002 fadd 	bl	8002f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 800097c:	4622      	mov	r2, r4
 800097e:	210e      	movs	r1, #14
 8000980:	4876      	ldr	r0, [pc, #472]	; (8000b5c <MX_GPIO_Init+0x2c4>)
 8000982:	f002 fad8 	bl	8002f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	4875      	ldr	r0, [pc, #468]	; (8000b60 <MX_GPIO_Init+0x2c8>)
 800098c:	f002 fad3 	bl	8002f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000996:	4871      	ldr	r0, [pc, #452]	; (8000b5c <MX_GPIO_Init+0x2c4>)
 8000998:	f002 facd 	bl	8002f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800099c:	4622      	mov	r2, r4
 800099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <MX_GPIO_Init+0x2cc>)
 80009a4:	f002 fac7 	bl	8002f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80009a8:	4622      	mov	r2, r4
 80009aa:	21c8      	movs	r1, #200	; 0xc8
 80009ac:	486e      	ldr	r0, [pc, #440]	; (8000b68 <MX_GPIO_Init+0x2d0>)
 80009ae:	f002 fac2 	bl	8002f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80009b2:	f04f 0b08 	mov.w	fp, #8
 80009b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	a90b      	add	r1, sp, #44	; 0x2c
 80009c0:	486a      	ldr	r0, [pc, #424]	; (8000b6c <MX_GPIO_Init+0x2d4>)
 80009c2:	f002 f923 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80009c6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80009ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2502      	movs	r5, #2
 80009ce:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2603      	movs	r6, #3
 80009d4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d6:	f04f 090b 	mov.w	r9, #11
 80009da:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009de:	a90b      	add	r1, sp, #44	; 0x2c
 80009e0:	4861      	ldr	r0, [pc, #388]	; (8000b68 <MX_GPIO_Init+0x2d0>)
 80009e2:	f002 f913 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80009e6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80009ea:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009f2:	f04f 080a 	mov.w	r8, #10
 80009f6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	a90b      	add	r1, sp, #44	; 0x2c
 80009fc:	485c      	ldr	r0, [pc, #368]	; (8000b70 <MX_GPIO_Init+0x2d8>)
 80009fe:	f002 f905 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	a90b      	add	r1, sp, #44	; 0x2c
 8000a0e:	4859      	ldr	r0, [pc, #356]	; (8000b74 <MX_GPIO_Init+0x2dc>)
 8000a10:	f002 f8fc 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a18:	4b57      	ldr	r3, [pc, #348]	; (8000b78 <MX_GPIO_Init+0x2e0>)
 8000a1a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a20:	484d      	ldr	r0, [pc, #308]	; (8000b58 <MX_GPIO_Init+0x2c0>)
 8000a22:	f002 f8f3 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a26:	2320      	movs	r3, #32
 8000a28:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2701      	movs	r7, #1
 8000a2c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a32:	a90b      	add	r1, sp, #44	; 0x2c
 8000a34:	4848      	ldr	r0, [pc, #288]	; (8000b58 <MX_GPIO_Init+0x2c0>)
 8000a36:	f002 f8e9 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000a3a:	f241 030e 	movw	r3, #4110	; 0x100e
 8000a3e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a46:	a90b      	add	r1, sp, #44	; 0x2c
 8000a48:	4844      	ldr	r0, [pc, #272]	; (8000b5c <MX_GPIO_Init+0x2c4>)
 8000a4a:	f002 f8df 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a4e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8000a52:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a5c:	4847      	ldr	r0, [pc, #284]	; (8000b7c <MX_GPIO_Init+0x2e4>)
 8000a5e:	f002 f8d5 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a62:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	a90b      	add	r1, sp, #44	; 0x2c
 8000a6e:	483c      	ldr	r0, [pc, #240]	; (8000b60 <MX_GPIO_Init+0x2c8>)
 8000a70:	f002 f8cc 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a74:	f04f 0b10 	mov.w	fp, #16
 8000a78:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	a90b      	add	r1, sp, #44	; 0x2c
 8000a82:	4835      	ldr	r0, [pc, #212]	; (8000b58 <MX_GPIO_Init+0x2c0>)
 8000a84:	f002 f8c2 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000a88:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a8c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a92:	a90b      	add	r1, sp, #44	; 0x2c
 8000a94:	4833      	ldr	r0, [pc, #204]	; (8000b64 <MX_GPIO_Init+0x2cc>)
 8000a96:	f002 f8b9 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000a9a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	a90b      	add	r1, sp, #44	; 0x2c
 8000aa6:	482f      	ldr	r0, [pc, #188]	; (8000b64 <MX_GPIO_Init+0x2cc>)
 8000aa8:	f002 f8b0 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000aac:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <MX_GPIO_Init+0x2e0>)
 8000ab2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	a90b      	add	r1, sp, #44	; 0x2c
 8000ab8:	4828      	ldr	r0, [pc, #160]	; (8000b5c <MX_GPIO_Init+0x2c4>)
 8000aba:	f002 f8a7 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000abe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ac8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000acc:	a90b      	add	r1, sp, #44	; 0x2c
 8000ace:	4825      	ldr	r0, [pc, #148]	; (8000b64 <MX_GPIO_Init+0x2cc>)
 8000ad0:	f002 f89c 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ad4:	23c8      	movs	r3, #200	; 0xc8
 8000ad6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ade:	a90b      	add	r1, sp, #44	; 0x2c
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <MX_GPIO_Init+0x2d0>)
 8000ae2:	f002 f893 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ae6:	2705      	movs	r7, #5
 8000ae8:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000af0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	a90b      	add	r1, sp, #44	; 0x2c
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0x2e4>)
 8000af8:	f002 f888 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000afc:	2332      	movs	r3, #50	; 0x32
 8000afe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b06:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b0c:	481b      	ldr	r0, [pc, #108]	; (8000b7c <MX_GPIO_Init+0x2e4>)
 8000b0e:	f002 f87d 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000b12:	2304      	movs	r3, #4
 8000b14:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b1c:	4812      	ldr	r0, [pc, #72]	; (8000b68 <MX_GPIO_Init+0x2d0>)
 8000b1e:	f002 f875 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b22:	2386      	movs	r3, #134	; 0x86
 8000b24:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8000b80 <MX_GPIO_Init+0x2e8>
 8000b34:	a90b      	add	r1, sp, #44	; 0x2c
 8000b36:	4648      	mov	r0, r9
 8000b38:	f002 f868 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000b3c:	2328      	movs	r3, #40	; 0x28
 8000b3e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b46:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b4c:	4648      	mov	r0, r9
 8000b4e:	f002 f85d 	bl	8002c0c <HAL_GPIO_Init>
 8000b52:	e017      	b.n	8000b84 <MX_GPIO_Init+0x2ec>
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40022800 	.word	0x40022800
 8000b64:	40021c00 	.word	0x40021c00
 8000b68:	40021800 	.word	0x40021800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40022400 	.word	0x40022400
 8000b78:	10120000 	.word	0x10120000
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020000 	.word	0x40020000

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000b84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b88:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b90:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	a90b      	add	r1, sp, #44	; 0x2c
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <MX_GPIO_Init+0x308>)
 8000b96:	f002 f839 	bl	8002c0c <HAL_GPIO_Init>

}
 8000b9a:	b011      	add	sp, #68	; 0x44
 8000b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <MX_ADC3_Init>:
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba8:	2500      	movs	r5, #0
 8000baa:	9500      	str	r5, [sp, #0]
 8000bac:	9501      	str	r5, [sp, #4]
 8000bae:	9502      	str	r5, [sp, #8]
 8000bb0:	9503      	str	r5, [sp, #12]
  hadc3.Instance = ADC3;
 8000bb2:	4c10      	ldr	r4, [pc, #64]	; (8000bf4 <MX_ADC3_Init+0x50>)
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_ADC3_Init+0x54>)
 8000bb6:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	6063      	str	r3, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbe:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc0:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bc2:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bc4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc8:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_ADC3_Init+0x58>)
 8000bcc:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bce:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bd4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd8:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f001 fc6c 	bl	80024b8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8000be0:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be2:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000be4:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be6:	4669      	mov	r1, sp
 8000be8:	4620      	mov	r0, r4
 8000bea:	f001 fc91 	bl	8002510 <HAL_ADC_ConfigChannel>
}
 8000bee:	b004      	add	sp, #16
 8000bf0:	bd70      	pop	{r4, r5, r6, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200215cc 	.word	0x200215cc
 8000bf8:	40012200 	.word	0x40012200
 8000bfc:	0f000001 	.word	0x0f000001

08000c00 <MX_CRC_Init>:
{
 8000c00:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_CRC_Init+0x1c>)
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_CRC_Init+0x20>)
 8000c06:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c0c:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c0e:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c10:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c12:	2301      	movs	r3, #1
 8000c14:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c16:	f001 fdb5 	bl	8002784 <HAL_CRC_Init>
}
 8000c1a:	bd08      	pop	{r3, pc}
 8000c1c:	200214a4 	.word	0x200214a4
 8000c20:	40023000 	.word	0x40023000

08000c24 <MX_DCMI_Init>:
{
 8000c24:	b508      	push	{r3, lr}
  hdcmi.Instance = DCMI;
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <MX_DCMI_Init+0x28>)
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_DCMI_Init+0x2c>)
 8000c2a:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000c30:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000c32:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000c34:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000c36:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000c38:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000c3a:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000c3c:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000c3e:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000c40:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000c42:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c44:	f001 fe14 	bl	8002870 <HAL_DCMI_Init>
}
 8000c48:	bd08      	pop	{r3, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20021614 	.word	0x20021614
 8000c50:	50050000 	.word	0x50050000

08000c54 <MX_I2C1_Init>:
{
 8000c54:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8000c56:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <MX_I2C1_Init+0x38>)
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <MX_I2C1_Init+0x3c>)
 8000c5a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_I2C1_Init+0x40>)
 8000c5e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c60:	2500      	movs	r5, #0
 8000c62:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6a:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c6c:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6e:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c72:	4620      	mov	r0, r4
 8000c74:	f003 f884 	bl	8003d80 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f003 faad 	bl	80041da <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c80:	4629      	mov	r1, r5
 8000c82:	4620      	mov	r0, r4
 8000c84:	f003 fad7 	bl	8004236 <HAL_I2CEx_ConfigDigitalFilter>
}
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20021458 	.word	0x20021458
 8000c90:	40005400 	.word	0x40005400
 8000c94:	00c0eaff 	.word	0x00c0eaff

08000c98 <MX_I2C3_Init>:
{
 8000c98:	b538      	push	{r3, r4, r5, lr}
  hi2c3.Instance = I2C3;
 8000c9a:	4c0d      	ldr	r4, [pc, #52]	; (8000cd0 <MX_I2C3_Init+0x38>)
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <MX_I2C3_Init+0x3c>)
 8000c9e:	6023      	str	r3, [r4, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_I2C3_Init+0x40>)
 8000ca2:	6063      	str	r3, [r4, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	60a5      	str	r5, [r4, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60e3      	str	r3, [r4, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	6125      	str	r5, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cae:	6165      	str	r5, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb0:	61a5      	str	r5, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb2:	61e5      	str	r5, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb4:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f003 f862 	bl	8003d80 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f003 fa8b 	bl	80041da <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cc4:	4629      	mov	r1, r5
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f003 fab5 	bl	8004236 <HAL_I2CEx_ConfigDigitalFilter>
}
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
 8000cce:	bf00      	nop
 8000cd0:	200212fc 	.word	0x200212fc
 8000cd4:	40005c00 	.word	0x40005c00
 8000cd8:	00c0eaff 	.word	0x00c0eaff

08000cdc <MX_QUADSPI_Init>:
{
 8000cdc:	b508      	push	{r3, lr}
  hqspi.Instance = QUADSPI;
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <MX_QUADSPI_Init+0x24>)
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_QUADSPI_Init+0x28>)
 8000ce2:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ce4:	23ff      	movs	r3, #255	; 0xff
 8000ce6:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8000cf0:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cf2:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cf4:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cf6:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cf8:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cfa:	f003 fe51 	bl	80049a0 <HAL_QSPI_Init>
}
 8000cfe:	bd08      	pop	{r3, pc}
 8000d00:	20021848 	.word	0x20021848
 8000d04:	a0001000 	.word	0xa0001000

08000d08 <MX_RTC_Init>:
{
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	940c      	str	r4, [sp, #48]	; 0x30
 8000d10:	940d      	str	r4, [sp, #52]	; 0x34
 8000d12:	940e      	str	r4, [sp, #56]	; 0x38
 8000d14:	940f      	str	r4, [sp, #60]	; 0x3c
 8000d16:	9410      	str	r4, [sp, #64]	; 0x40
 8000d18:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8000d1a:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000d1c:	222c      	movs	r2, #44	; 0x2c
 8000d1e:	4621      	mov	r1, r4
 8000d20:	4668      	mov	r0, sp
 8000d22:	f01a fdb8 	bl	801b896 <memset>
  hrtc.Instance = RTC;
 8000d26:	4d26      	ldr	r5, [pc, #152]	; (8000dc0 <MX_RTC_Init+0xb8>)
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <MX_RTC_Init+0xbc>)
 8000d2a:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d2c:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d2e:	237f      	movs	r3, #127	; 0x7f
 8000d30:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d32:	23ff      	movs	r3, #255	; 0xff
 8000d34:	60eb      	str	r3, [r5, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d36:	4628      	mov	r0, r5
 8000d38:	f004 fdb0 	bl	800589c <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8000d3c:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000d40:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000d44:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d48:	9410      	str	r4, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d4a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	a90c      	add	r1, sp, #48	; 0x30
 8000d50:	4628      	mov	r0, r5
 8000d52:	f004 fe01 	bl	8005958 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d56:	2601      	movs	r6, #1
 8000d58:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000d5c:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8000d60:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8000d64:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d68:	4632      	mov	r2, r6
 8000d6a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	f004 fe73 	bl	8005a58 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0x0;
 8000d72:	f88d 4000 	strb.w	r4, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d76:	f88d 4001 	strb.w	r4, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d7a:	f88d 4002 	strb.w	r4, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d7e:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d80:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d82:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d84:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d86:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d88:	9408      	str	r4, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d8a:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d94:	4632      	mov	r2, r6
 8000d96:	4669      	mov	r1, sp
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f004 fecb 	bl	8005b34 <HAL_RTC_SetAlarm>
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d9e:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000da8:	4632      	mov	r2, r6
 8000daa:	4669      	mov	r1, sp
 8000dac:	4628      	mov	r0, r5
 8000dae:	f004 fec1 	bl	8005b34 <HAL_RTC_SetAlarm>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000db2:	2202      	movs	r2, #2
 8000db4:	4621      	mov	r1, r4
 8000db6:	4628      	mov	r0, r5
 8000db8:	f004 ff6c 	bl	8005c94 <HAL_RTCEx_SetTimeStamp>
}
 8000dbc:	b012      	add	sp, #72	; 0x48
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	200216e8 	.word	0x200216e8
 8000dc4:	40002800 	.word	0x40002800

08000dc8 <MX_SAI2_Init>:
{
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000dca:	481e      	ldr	r0, [pc, #120]	; (8000e44 <MX_SAI2_Init+0x7c>)
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_SAI2_Init+0x80>)
 8000dce:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dd0:	2400      	movs	r4, #0
 8000dd2:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000dd4:	6044      	str	r4, [r0, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000dd6:	2740      	movs	r7, #64	; 0x40
 8000dd8:	6347      	str	r7, [r0, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dda:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ddc:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000dde:	6084      	str	r4, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000de0:	6104      	str	r4, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000de2:	6144      	str	r4, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000de4:	6184      	str	r4, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <MX_SAI2_Init+0x84>)
 8000de8:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dea:	60c4      	str	r4, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dec:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dee:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000df0:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000df2:	2608      	movs	r6, #8
 8000df4:	6406      	str	r6, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000df6:	2501      	movs	r5, #1
 8000df8:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dfa:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000dfc:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dfe:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e00:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e02:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000e04:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000e06:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000e08:	f004 ff94 	bl	8005d34 <HAL_SAI_Init>
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000e0c:	4810      	ldr	r0, [pc, #64]	; (8000e50 <MX_SAI2_Init+0x88>)
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SAI2_Init+0x8c>)
 8000e10:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e12:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e14:	2303      	movs	r3, #3
 8000e16:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e18:	6347      	str	r7, [r0, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e1a:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e1c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e1e:	6085      	str	r5, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e20:	6104      	str	r4, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e22:	6184      	str	r4, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e24:	60c4      	str	r4, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e26:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e28:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e2a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e2c:	6406      	str	r6, [r0, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e2e:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e30:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e32:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e34:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e36:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e38:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e3a:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e3c:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e3e:	f004 ff79 	bl	8005d34 <HAL_SAI_Init>
}
 8000e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e44:	200213d4 	.word	0x200213d4
 8000e48:	40015c04 	.word	0x40015c04
 8000e4c:	0002ee00 	.word	0x0002ee00
 8000e50:	20021274 	.word	0x20021274
 8000e54:	40015c24 	.word	0x40015c24

08000e58 <MX_SPDIFRX_Init>:
{
 8000e58:	b508      	push	{r3, lr}
  hspdif.Instance = SPDIFRX;
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <MX_SPDIFRX_Init+0x28>)
 8000e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000e60:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e66:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000e68:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000e6a:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000e6c:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000e6e:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000e70:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000e72:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000e74:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000e76:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000e78:	f005 fdae 	bl	80069d8 <HAL_SPDIFRX_Init>
}
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	20021388 	.word	0x20021388

08000e84 <MX_TIM8_Init>:
{
 8000e84:	b530      	push	{r4, r5, lr}
 8000e86:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e88:	2400      	movs	r4, #0
 8000e8a:	9404      	str	r4, [sp, #16]
 8000e8c:	9405      	str	r4, [sp, #20]
 8000e8e:	9406      	str	r4, [sp, #24]
 8000e90:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e92:	9401      	str	r4, [sp, #4]
 8000e94:	9402      	str	r4, [sp, #8]
 8000e96:	9403      	str	r4, [sp, #12]
  htim8.Instance = TIM8;
 8000e98:	4d0d      	ldr	r5, [pc, #52]	; (8000ed0 <MX_TIM8_Init+0x4c>)
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_TIM8_Init+0x50>)
 8000e9c:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 0;
 8000e9e:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 0;
 8000ea2:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ea6:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000eaa:	4628      	mov	r0, r5
 8000eac:	f006 f854 	bl	8006f58 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000eb6:	a904      	add	r1, sp, #16
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f006 f95d 	bl	8007178 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec0:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ec4:	a901      	add	r1, sp, #4
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f006 fa38 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
}
 8000ecc:	b009      	add	sp, #36	; 0x24
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	20021348 	.word	0x20021348
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <MX_TIM1_Init>:
{
 8000ed8:	b530      	push	{r4, r5, lr}
 8000eda:	b09b      	sub	sp, #108	; 0x6c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000edc:	2400      	movs	r4, #0
 8000ede:	9416      	str	r4, [sp, #88]	; 0x58
 8000ee0:	9417      	str	r4, [sp, #92]	; 0x5c
 8000ee2:	9418      	str	r4, [sp, #96]	; 0x60
 8000ee4:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	9413      	str	r4, [sp, #76]	; 0x4c
 8000ee8:	9414      	str	r4, [sp, #80]	; 0x50
 8000eea:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eec:	940c      	str	r4, [sp, #48]	; 0x30
 8000eee:	940d      	str	r4, [sp, #52]	; 0x34
 8000ef0:	940e      	str	r4, [sp, #56]	; 0x38
 8000ef2:	940f      	str	r4, [sp, #60]	; 0x3c
 8000ef4:	9410      	str	r4, [sp, #64]	; 0x40
 8000ef6:	9411      	str	r4, [sp, #68]	; 0x44
 8000ef8:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000efa:	222c      	movs	r2, #44	; 0x2c
 8000efc:	4621      	mov	r1, r4
 8000efe:	a801      	add	r0, sp, #4
 8000f00:	f01a fcc9 	bl	801b896 <memset>
  htim1.Instance = TIM1;
 8000f04:	4d20      	ldr	r5, [pc, #128]	; (8000f88 <MX_TIM1_Init+0xb0>)
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_TIM1_Init+0xb4>)
 8000f08:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000f0a:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8000f0e:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f12:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f16:	4628      	mov	r0, r5
 8000f18:	f006 f81e 	bl	8006f58 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f22:	a916      	add	r1, sp, #88	; 0x58
 8000f24:	4628      	mov	r0, r5
 8000f26:	f006 f927 	bl	8007178 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	f006 f82d 	bl	8006f8a <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f32:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f36:	a913      	add	r1, sp, #76	; 0x4c
 8000f38:	4628      	mov	r0, r5
 8000f3a:	f006 f9ff 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	2360      	movs	r3, #96	; 0x60
 8000f40:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f42:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f44:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f46:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f48:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f4a:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4c:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4e:	4622      	mov	r2, r4
 8000f50:	a90c      	add	r1, sp, #48	; 0x30
 8000f52:	4628      	mov	r0, r5
 8000f54:	f006 f86a 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f58:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f5a:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f5c:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f5e:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f60:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f66:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f68:	9407      	str	r4, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f6a:	9408      	str	r4, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f70:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f72:	940a      	str	r4, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f74:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f76:	a901      	add	r1, sp, #4
 8000f78:	4628      	mov	r0, r5
 8000f7a:	f006 fa11 	bl	80073a0 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f000 ffb2 	bl	8001ee8 <HAL_TIM_MspPostInit>
}
 8000f84:	b01b      	add	sp, #108	; 0x6c
 8000f86:	bd30      	pop	{r4, r5, pc}
 8000f88:	20021708 	.word	0x20021708
 8000f8c:	40010000 	.word	0x40010000

08000f90 <MX_TIM2_Init>:
{
 8000f90:	b530      	push	{r4, r5, lr}
 8000f92:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f94:	2400      	movs	r4, #0
 8000f96:	940a      	str	r4, [sp, #40]	; 0x28
 8000f98:	940b      	str	r4, [sp, #44]	; 0x2c
 8000f9a:	940c      	str	r4, [sp, #48]	; 0x30
 8000f9c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9e:	9407      	str	r4, [sp, #28]
 8000fa0:	9408      	str	r4, [sp, #32]
 8000fa2:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa4:	9400      	str	r4, [sp, #0]
 8000fa6:	9401      	str	r4, [sp, #4]
 8000fa8:	9402      	str	r4, [sp, #8]
 8000faa:	9403      	str	r4, [sp, #12]
 8000fac:	9404      	str	r4, [sp, #16]
 8000fae:	9405      	str	r4, [sp, #20]
 8000fb0:	9406      	str	r4, [sp, #24]
  htim2.Instance = TIM2;
 8000fb2:	4d15      	ldr	r5, [pc, #84]	; (8001008 <MX_TIM2_Init+0x78>)
 8000fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb8:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 0;
 8000fba:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8000fbe:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	f005 ffc7 	bl	8006f58 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd0:	a90a      	add	r1, sp, #40	; 0x28
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f006 f8d0 	bl	8007178 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f005 ffd6 	bl	8006f8a <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe2:	a907      	add	r1, sp, #28
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f006 f9a9 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8000fee:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff0:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff2:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	4669      	mov	r1, sp
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f006 f817 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000ffe:	4628      	mov	r0, r5
 8001000:	f000 ff72 	bl	8001ee8 <HAL_TIM_MspPostInit>
}
 8001004:	b00f      	add	sp, #60	; 0x3c
 8001006:	bd30      	pop	{r4, r5, pc}
 8001008:	200217c8 	.word	0x200217c8

0800100c <MX_TIM5_Init>:
{
 800100c:	b530      	push	{r4, r5, lr}
 800100e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001010:	2400      	movs	r4, #0
 8001012:	940a      	str	r4, [sp, #40]	; 0x28
 8001014:	940b      	str	r4, [sp, #44]	; 0x2c
 8001016:	940c      	str	r4, [sp, #48]	; 0x30
 8001018:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101a:	9407      	str	r4, [sp, #28]
 800101c:	9408      	str	r4, [sp, #32]
 800101e:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001020:	9400      	str	r4, [sp, #0]
 8001022:	9401      	str	r4, [sp, #4]
 8001024:	9402      	str	r4, [sp, #8]
 8001026:	9403      	str	r4, [sp, #12]
 8001028:	9404      	str	r4, [sp, #16]
 800102a:	9405      	str	r4, [sp, #20]
 800102c:	9406      	str	r4, [sp, #24]
  htim5.Instance = TIM5;
 800102e:	4d15      	ldr	r5, [pc, #84]	; (8001084 <MX_TIM5_Init+0x78>)
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM5_Init+0x7c>)
 8001032:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 8001034:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 8001038:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800103e:	4628      	mov	r0, r5
 8001040:	f005 ff8a 	bl	8006f58 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800104a:	a90a      	add	r1, sp, #40	; 0x28
 800104c:	4628      	mov	r0, r5
 800104e:	f006 f893 	bl	8007178 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001052:	4628      	mov	r0, r5
 8001054:	f005 ff99 	bl	8006f8a <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800105c:	a907      	add	r1, sp, #28
 800105e:	4628      	mov	r0, r5
 8001060:	f006 f96c 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001068:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106a:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106c:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800106e:	220c      	movs	r2, #12
 8001070:	4669      	mov	r1, sp
 8001072:	4628      	mov	r0, r5
 8001074:	f005 ffda 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8001078:	4628      	mov	r0, r5
 800107a:	f000 ff35 	bl	8001ee8 <HAL_TIM_MspPostInit>
}
 800107e:	b00f      	add	sp, #60	; 0x3c
 8001080:	bd30      	pop	{r4, r5, pc}
 8001082:	bf00      	nop
 8001084:	2002154c 	.word	0x2002154c
 8001088:	40000c00 	.word	0x40000c00

0800108c <MX_TIM12_Init>:
{
 800108c:	b530      	push	{r4, r5, lr}
 800108e:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001090:	2400      	movs	r4, #0
 8001092:	9401      	str	r4, [sp, #4]
 8001094:	9402      	str	r4, [sp, #8]
 8001096:	9403      	str	r4, [sp, #12]
 8001098:	9404      	str	r4, [sp, #16]
 800109a:	9405      	str	r4, [sp, #20]
 800109c:	9406      	str	r4, [sp, #24]
 800109e:	9407      	str	r4, [sp, #28]
  htim12.Instance = TIM12;
 80010a0:	4d0c      	ldr	r5, [pc, #48]	; (80010d4 <MX_TIM12_Init+0x48>)
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_TIM12_Init+0x4c>)
 80010a4:	602b      	str	r3, [r5, #0]
  htim12.Init.Prescaler = 0;
 80010a6:	606c      	str	r4, [r5, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	60ac      	str	r4, [r5, #8]
  htim12.Init.Period = 0;
 80010aa:	60ec      	str	r4, [r5, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	612c      	str	r4, [r5, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010b0:	4628      	mov	r0, r5
 80010b2:	f005 ff6a 	bl	8006f8a <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	; 0x60
 80010b8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80010ba:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010be:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c0:	4622      	mov	r2, r4
 80010c2:	a901      	add	r1, sp, #4
 80010c4:	4628      	mov	r0, r5
 80010c6:	f005 ffb1 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 80010ca:	4628      	mov	r0, r5
 80010cc:	f000 ff0c 	bl	8001ee8 <HAL_TIM_MspPostInit>
}
 80010d0:	b009      	add	sp, #36	; 0x24
 80010d2:	bd30      	pop	{r4, r5, pc}
 80010d4:	20021808 	.word	0x20021808
 80010d8:	40001800 	.word	0x40001800

080010dc <MX_TIM3_Init>:
{
 80010dc:	b530      	push	{r4, r5, lr}
 80010de:	b089      	sub	sp, #36	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010e0:	2400      	movs	r4, #0
 80010e2:	9403      	str	r4, [sp, #12]
 80010e4:	9404      	str	r4, [sp, #16]
 80010e6:	9405      	str	r4, [sp, #20]
 80010e8:	9406      	str	r4, [sp, #24]
 80010ea:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	9400      	str	r4, [sp, #0]
 80010ee:	9401      	str	r4, [sp, #4]
 80010f0:	9402      	str	r4, [sp, #8]
  htim3.Instance = TIM3;
 80010f2:	4d0f      	ldr	r5, [pc, #60]	; (8001130 <MX_TIM3_Init+0x54>)
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_TIM3_Init+0x58>)
 80010f6:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 8999;
 80010f8:	f242 3327 	movw	r3, #8999	; 0x2327
 80010fc:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 499;
 8001100:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001104:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800110a:	4628      	mov	r0, r5
 800110c:	f005 ff24 	bl	8006f58 <HAL_TIM_Base_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001110:	2304      	movs	r3, #4
 8001112:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001114:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001116:	a903      	add	r1, sp, #12
 8001118:	4628      	mov	r0, r5
 800111a:	f006 f8e3 	bl	80072e4 <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001122:	4669      	mov	r1, sp
 8001124:	4628      	mov	r0, r5
 8001126:	f006 f909 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
}
 800112a:	b009      	add	sp, #36	; 0x24
 800112c:	bd30      	pop	{r4, r5, pc}
 800112e:	bf00      	nop
 8001130:	2002158c 	.word	0x2002158c
 8001134:	40000400 	.word	0x40000400

08001138 <MX_USART1_UART_Init>:
{
 8001138:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <MX_USART1_UART_Init+0x28>)
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART1_UART_Init+0x2c>)
 800113e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001140:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001144:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	2300      	movs	r3, #0
 8001148:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800114a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800114e:	220c      	movs	r2, #12
 8001150:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115a:	f006 fbdc 	bl	8007916 <HAL_UART_Init>
}
 800115e:	bd08      	pop	{r3, pc}
 8001160:	20021664 	.word	0x20021664
 8001164:	40011000 	.word	0x40011000

08001168 <MX_USART6_UART_Init>:
{
 8001168:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_USART6_UART_Init+0x28>)
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USART6_UART_Init+0x2c>)
 800116e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8001170:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001174:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	2300      	movs	r3, #0
 8001178:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800117a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800117c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800117e:	220c      	movs	r2, #12
 8001180:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001188:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800118a:	f006 fbc4 	bl	8007916 <HAL_UART_Init>
}
 800118e:	bd08      	pop	{r3, pc}
 8001190:	20021748 	.word	0x20021748
 8001194:	40011400 	.word	0x40011400

08001198 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001198:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 800119a:	f007 fbc3 	bl	8008924 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800119e:	f00b fe31 	bl	800ce04 <MX_USB_HOST_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 80011a2:	f00a fe89 	bl	800beb8 <GRAPHICS_MainTask>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f008 ff57 	bl	800a05a <osDelay>
 80011ac:	e7fb      	b.n	80011a6 <StartDefaultTask+0xe>
	...

080011b0 <SystemClock_Config>:
{
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b4:	2230      	movs	r2, #48	; 0x30
 80011b6:	2100      	movs	r1, #0
 80011b8:	a828      	add	r0, sp, #160	; 0xa0
 80011ba:	f01a fb6c 	bl	801b896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011be:	2400      	movs	r4, #0
 80011c0:	9423      	str	r4, [sp, #140]	; 0x8c
 80011c2:	9424      	str	r4, [sp, #144]	; 0x90
 80011c4:	9425      	str	r4, [sp, #148]	; 0x94
 80011c6:	9426      	str	r4, [sp, #152]	; 0x98
 80011c8:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ca:	2284      	movs	r2, #132	; 0x84
 80011cc:	4621      	mov	r1, r4
 80011ce:	a802      	add	r0, sp, #8
 80011d0:	f01a fb61 	bl	801b896 <memset>
  HAL_PWR_EnableBkUpAccess();
 80011d4:	f003 fb76 	bl	80048c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <SystemClock_Config+0xe8>)
 80011da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <SystemClock_Config+0xec>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001200:	2309      	movs	r3, #9
 8001202:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001208:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800120a:	2601      	movs	r6, #1
 800120c:	962d      	str	r6, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2502      	movs	r5, #2
 8001210:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001216:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001218:	2219      	movs	r2, #25
 800121a:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800121c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001220:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001222:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001224:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	a828      	add	r0, sp, #160	; 0xa0
 8001228:	f003 fc1e 	bl	8004a68 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800122c:	f003 fb52 	bl	80048d4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001238:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800123c:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001244:	2106      	movs	r1, #6
 8001246:	a823      	add	r0, sp, #140	; 0x8c
 8001248:	f003 fe4c 	bl	8004ee4 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <SystemClock_Config+0xf0>)
 800124e:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001254:	9506      	str	r5, [sp, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001256:	9504      	str	r5, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001258:	9505      	str	r5, [sp, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800125a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800125e:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001260:	2305      	movs	r3, #5
 8001262:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001264:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001266:	2303      	movs	r3, #3
 8001268:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800126a:	960b      	str	r6, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800126c:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800127a:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800127c:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800127e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001280:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001282:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001288:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800128a:	9422      	str	r4, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	a802      	add	r0, sp, #8
 800128e:	f003 ff1f 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001292:	b034      	add	sp, #208	; 0xd0
 8001294:	bd70      	pop	{r4, r5, r6, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000
 80012a0:	01b14868 	.word	0x01b14868

080012a4 <TouchTimer_Init>:
{
 80012a4:	b508      	push	{r3, lr}
BSP_TS_Init(800, 272);
 80012a6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80012aa:	f44f 7048 	mov.w	r0, #800	; 0x320
 80012ae:	f000 f9b7 	bl	8001620 <BSP_TS_Init>
if(HAL_TIM_Base_Init(&htim3) != HAL_OK ) { while(1);}
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <TouchTimer_Init+0x24>)
 80012b4:	f005 fe50 	bl	8006f58 <HAL_TIM_Base_Init>
 80012b8:	b100      	cbz	r0, 80012bc <TouchTimer_Init+0x18>
 80012ba:	e7fe      	b.n	80012ba <TouchTimer_Init+0x16>
if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK ) { while(1);}
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <TouchTimer_Init+0x24>)
 80012be:	f005 fcdd 	bl	8006c7c <HAL_TIM_Base_Start_IT>
 80012c2:	b100      	cbz	r0, 80012c6 <TouchTimer_Init+0x22>
 80012c4:	e7fe      	b.n	80012c4 <TouchTimer_Init+0x20>
}
 80012c6:	bd08      	pop	{r3, pc}
 80012c8:	2002158c 	.word	0x2002158c

080012cc <main>:
{
 80012cc:	b500      	push	{lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80012d0:	f001 f827 	bl	8002322 <HAL_Init>
  SystemClock_Config();
 80012d4:	f7ff ff6c 	bl	80011b0 <SystemClock_Config>
  MX_GPIO_Init();
 80012d8:	f7ff fade 	bl	8000898 <MX_GPIO_Init>
  MX_ADC3_Init();
 80012dc:	f7ff fc62 	bl	8000ba4 <MX_ADC3_Init>
  MX_CRC_Init();
 80012e0:	f7ff fc8e 	bl	8000c00 <MX_CRC_Init>
  MX_DCMI_Init();
 80012e4:	f7ff fc9e 	bl	8000c24 <MX_DCMI_Init>
  MX_I2C1_Init();
 80012e8:	f7ff fcb4 	bl	8000c54 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012ec:	f7ff fcd4 	bl	8000c98 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 80012f0:	f7ff fcf4 	bl	8000cdc <MX_QUADSPI_Init>
  MX_RTC_Init();
 80012f4:	f7ff fd08 	bl	8000d08 <MX_RTC_Init>
  MX_SAI2_Init();
 80012f8:	f7ff fd66 	bl	8000dc8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80012fc:	f7ff fabc 	bl	8000878 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001300:	f7ff fdaa 	bl	8000e58 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001304:	f7ff fde8 	bl	8000ed8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001308:	f7ff fe42 	bl	8000f90 <MX_TIM2_Init>
  MX_TIM3_Init();
 800130c:	f7ff fee6 	bl	80010dc <MX_TIM3_Init>
  MX_TIM5_Init();
 8001310:	f7ff fe7c 	bl	800100c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001314:	f7ff fdb6 	bl	8000e84 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001318:	f7ff feb8 	bl	800108c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800131c:	f7ff ff0c 	bl	8001138 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001320:	f7ff ff22 	bl	8001168 <MX_USART6_UART_Init>
  TouchTimer_Init();
 8001324:	f7ff ffbe 	bl	80012a4 <TouchTimer_Init>
  GRAPHICS_HW_Init();
 8001328:	f00b fd42 	bl	800cdb0 <GRAPHICS_HW_Init>
  GRAPHICS_Init();
 800132c:	f00b fd4c 	bl	800cdc8 <GRAPHICS_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 8001330:	ac01      	add	r4, sp, #4
 8001332:	4d08      	ldr	r5, [pc, #32]	; (8001354 <main+0x88>)
 8001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001338:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001340:	2100      	movs	r1, #0
 8001342:	a801      	add	r0, sp, #4
 8001344:	f008 fe4f 	bl	8009fe6 <osThreadCreate>
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <main+0x8c>)
 800134a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800134c:	f008 fe33 	bl	8009fb6 <osKernelStart>
 8001350:	e7fe      	b.n	8001350 <main+0x84>
 8001352:	bf00      	nop
 8001354:	0801ba34 	.word	0x0801ba34
 8001358:	200212f8 	.word	0x200212f8

0800135c <PollTouchScreen>:
{
 800135c:	b500      	push	{lr}
 800135e:	b08f      	sub	sp, #60	; 0x3c
BSP_TS_GetState(&ts);
 8001360:	4668      	mov	r0, sp
 8001362:	f000 f9bf 	bl	80016e4 <BSP_TS_GetState>
TS_State.Pressed = ts.touchDetected;
 8001366:	f89d 3000 	ldrb.w	r3, [sp]
 800136a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
if (prev_state.touchDetected != ts.touchDetected)
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <PollTouchScreen+0x40>)
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	4293      	cmp	r3, r2
 8001374:	d00f      	beq.n	8001396 <PollTouchScreen+0x3a>
		prev_state.touchDetected =ts.touchDetected;
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <PollTouchScreen+0x40>)
 8001378:	7013      	strb	r3, [r2, #0]
			prev_state.touchX[0] =ts.touchX[0];
 800137a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800137e:	8051      	strh	r1, [r2, #2]
			prev_state.touchY[0] =ts.touchY[0];
 8001380:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001384:	8193      	strh	r3, [r2, #12]
	    TS_State.Layer=0;
 8001386:	2200      	movs	r2, #0
 8001388:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	    TS_State.x = prev_state.touchX[0];
 800138c:	910b      	str	r1, [sp, #44]	; 0x2c
	    TS_State.y = prev_state.touchY[0];
 800138e:	930c      	str	r3, [sp, #48]	; 0x30
		GUI_TOUCH_StoreStateEx(&TS_State);
 8001390:	a80b      	add	r0, sp, #44	; 0x2c
 8001392:	f00d f893 	bl	800e4bc <GUI_TOUCH_StoreStateEx>
}
 8001396:	b00f      	add	sp, #60	; 0x3c
 8001398:	f85d fb04 	ldr.w	pc, [sp], #4
 800139c:	20001a18 	.word	0x20001a18

080013a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a0:	b510      	push	{r4, lr}
 80013a2:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013a4:	6802      	ldr	r2, [r0, #0]
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d004      	beq.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM3) {
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d003      	beq.n	80013bc <HAL_TIM_PeriodElapsedCallback+0x1c>
//  PID_X_Exec();
//  BSP_TS_ITClear();
  }

  /* USER CODE END Callback 1 */
}
 80013b4:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80013b6:	f000 ffbf 	bl	8002338 <HAL_IncTick>
 80013ba:	e7f7      	b.n	80013ac <HAL_TIM_PeriodElapsedCallback+0xc>
	  PollTouchScreen();
 80013bc:	f7ff ffce 	bl	800135c <PollTouchScreen>
}
 80013c0:	e7f8      	b.n	80013b4 <HAL_TIM_PeriodElapsedCallback+0x14>
 80013c2:	bf00      	nop
 80013c4:	40001000 	.word	0x40001000
 80013c8:	40000400 	.word	0x40000400

080013cc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013cc:	4770      	bx	lr
	...

080013d0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80013d0:	b570      	push	{r4, r5, r6, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <I2Cx_MspInit+0x118>)
 80013d6:	4283      	cmp	r3, r0
 80013d8:	d043      	beq.n	8001462 <I2Cx_MspInit+0x92>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80013da:	4c44      	ldr	r4, [pc, #272]	; (80014ec <I2Cx_MspInit+0x11c>)
 80013dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	6323      	str	r3, [r4, #48]	; 0x30
 80013e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	9303      	str	r3, [sp, #12]
 80013ec:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80013ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f2:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80013f4:	2312      	movs	r3, #18
 80013f6:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80013f8:	2500      	movs	r5, #0
 80013fa:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80013fc:	2302      	movs	r3, #2
 80013fe:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001400:	2304      	movs	r3, #4
 8001402:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001404:	4e3a      	ldr	r6, [pc, #232]	; (80014f0 <I2Cx_MspInit+0x120>)
 8001406:	a905      	add	r1, sp, #20
 8001408:	4630      	mov	r0, r6
 800140a:	f001 fbff 	bl	8002c0c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001414:	a905      	add	r1, sp, #20
 8001416:	4630      	mov	r0, r6
 8001418:	f001 fbf8 	bl	8002c0c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800141c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800141e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001422:	6423      	str	r3, [r4, #64]	; 0x40
 8001424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	9304      	str	r3, [sp, #16]
 800142c:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800142e:	6a23      	ldr	r3, [r4, #32]
 8001430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001434:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001436:	6a23      	ldr	r3, [r4, #32]
 8001438:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800143c:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800143e:	462a      	mov	r2, r5
 8001440:	210f      	movs	r1, #15
 8001442:	201f      	movs	r0, #31
 8001444:	f001 f94c 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001448:	201f      	movs	r0, #31
 800144a:	f001 f97b 	bl	8002744 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800144e:	462a      	mov	r2, r5
 8001450:	210f      	movs	r1, #15
 8001452:	2020      	movs	r0, #32
 8001454:	f001 f944 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001458:	2020      	movs	r0, #32
 800145a:	f001 f973 	bl	8002744 <HAL_NVIC_EnableIRQ>
  }
}
 800145e:	b00a      	add	sp, #40	; 0x28
 8001460:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001462:	4c22      	ldr	r4, [pc, #136]	; (80014ec <I2Cx_MspInit+0x11c>)
 8001464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146a:	6323      	str	r3, [r4, #48]	; 0x30
 800146c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800147a:	2312      	movs	r3, #18
 800147c:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800147e:	2500      	movs	r5, #0
 8001480:	9507      	str	r5, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001482:	2302      	movs	r3, #2
 8001484:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001486:	2304      	movs	r3, #4
 8001488:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800148a:	4e1a      	ldr	r6, [pc, #104]	; (80014f4 <I2Cx_MspInit+0x124>)
 800148c:	a905      	add	r1, sp, #20
 800148e:	4630      	mov	r0, r6
 8001490:	f001 fbbc 	bl	8002c0c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001498:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800149a:	a905      	add	r1, sp, #20
 800149c:	4630      	mov	r0, r6
 800149e:	f001 fbb5 	bl	8002c0c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80014a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014a8:	6423      	str	r3, [r4, #64]	; 0x40
 80014aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80014b4:	6a23      	ldr	r3, [r4, #32]
 80014b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ba:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80014bc:	6a23      	ldr	r3, [r4, #32]
 80014be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014c2:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80014c4:	462a      	mov	r2, r5
 80014c6:	210f      	movs	r1, #15
 80014c8:	2048      	movs	r0, #72	; 0x48
 80014ca:	f001 f909 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80014ce:	2048      	movs	r0, #72	; 0x48
 80014d0:	f001 f938 	bl	8002744 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80014d4:	462a      	mov	r2, r5
 80014d6:	210f      	movs	r1, #15
 80014d8:	2049      	movs	r0, #73	; 0x49
 80014da:	f001 f901 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80014de:	2049      	movs	r0, #73	; 0x49
 80014e0:	f001 f930 	bl	8002744 <HAL_NVIC_EnableIRQ>
 80014e4:	e7bb      	b.n	800145e <I2Cx_MspInit+0x8e>
 80014e6:	bf00      	nop
 80014e8:	20001a44 	.word	0x20001a44
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40021c00 	.word	0x40021c00

080014f8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80014f8:	b510      	push	{r4, lr}
 80014fa:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80014fc:	f002 fe6a 	bl	80041d4 <HAL_I2C_GetState>
 8001500:	b9a0      	cbnz	r0, 800152c <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <I2Cx_Init+0x3c>)
 8001504:	429c      	cmp	r4, r3
 8001506:	d012      	beq.n	800152e <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <I2Cx_Init+0x40>)
 800150a:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <I2Cx_Init+0x44>)
 800150e:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001514:	2201      	movs	r2, #1
 8001516:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001518:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800151a:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800151c:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800151e:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ff55 	bl	80013d0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001526:	4620      	mov	r0, r4
 8001528:	f002 fc2a 	bl	8003d80 <HAL_I2C_Init>
  }
}
 800152c:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <I2Cx_Init+0x48>)
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	e7eb      	b.n	800150c <I2Cx_Init+0x14>
 8001534:	20001a44 	.word	0x20001a44
 8001538:	40005400 	.word	0x40005400
 800153c:	40912732 	.word	0x40912732
 8001540:	40005c00 	.word	0x40005c00

08001544 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001544:	b510      	push	{r4, lr}
 8001546:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001548:	f002 fc78 	bl	8003e3c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff ffd3 	bl	80014f8 <I2Cx_Init>
}
 8001552:	bd10      	pop	{r4, pc}

08001554 <I2Cx_WriteMultiple>:
{
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	4606      	mov	r6, r0
 800155a:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800155c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001560:	9102      	str	r1, [sp, #8]
 8001562:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001566:	9101      	str	r1, [sp, #4]
 8001568:	9908      	ldr	r1, [sp, #32]
 800156a:	9100      	str	r1, [sp, #0]
 800156c:	4621      	mov	r1, r4
 800156e:	f002 fc7e 	bl	8003e6e <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001572:	4605      	mov	r5, r0
 8001574:	b910      	cbnz	r0, 800157c <I2Cx_WriteMultiple+0x28>
}
 8001576:	4628      	mov	r0, r5
 8001578:	b004      	add	sp, #16
 800157a:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800157c:	4621      	mov	r1, r4
 800157e:	4630      	mov	r0, r6
 8001580:	f7ff ffe0 	bl	8001544 <I2Cx_Error>
 8001584:	e7f7      	b.n	8001576 <I2Cx_WriteMultiple+0x22>

08001586 <I2Cx_ReadMultiple>:
{
 8001586:	b570      	push	{r4, r5, r6, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	4606      	mov	r6, r0
 800158c:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800158e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001592:	9102      	str	r1, [sp, #8]
 8001594:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001598:	9101      	str	r1, [sp, #4]
 800159a:	9908      	ldr	r1, [sp, #32]
 800159c:	9100      	str	r1, [sp, #0]
 800159e:	4621      	mov	r1, r4
 80015a0:	f002 fd3c 	bl	800401c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80015a4:	4605      	mov	r5, r0
 80015a6:	b910      	cbnz	r0, 80015ae <I2Cx_ReadMultiple+0x28>
}
 80015a8:	4628      	mov	r0, r5
 80015aa:	b004      	add	sp, #16
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80015ae:	4621      	mov	r1, r4
 80015b0:	4630      	mov	r0, r6
 80015b2:	f7ff ffc7 	bl	8001544 <I2Cx_Error>
 80015b6:	e7f7      	b.n	80015a8 <I2Cx_ReadMultiple+0x22>

080015b8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80015b8:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <TS_IO_Init+0xc>)
 80015bc:	f7ff ff9c 	bl	80014f8 <I2Cx_Init>
}
 80015c0:	bd08      	pop	{r3, pc}
 80015c2:	bf00      	nop
 80015c4:	20001a44 	.word	0x20001a44

080015c8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	ac04      	add	r4, sp, #16
 80015ce:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80015d2:	2301      	movs	r3, #1
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	9400      	str	r4, [sp, #0]
 80015d8:	460a      	mov	r2, r1
 80015da:	4601      	mov	r1, r0
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TS_IO_Write+0x20>)
 80015de:	f7ff ffb9 	bl	8001554 <I2Cx_WriteMultiple>
}
 80015e2:	b004      	add	sp, #16
 80015e4:	bd10      	pop	{r4, pc}
 80015e6:	bf00      	nop
 80015e8:	20001a44 	.word	0x20001a44

080015ec <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80015ec:	b500      	push	{lr}
 80015ee:	b085      	sub	sp, #20
  uint8_t read_value = 0;
 80015f0:	aa04      	add	r2, sp, #16
 80015f2:	2300      	movs	r3, #0
 80015f4:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	9200      	str	r2, [sp, #0]
 80015fe:	460a      	mov	r2, r1
 8001600:	4601      	mov	r1, r0
 8001602:	4804      	ldr	r0, [pc, #16]	; (8001614 <TS_IO_Read+0x28>)
 8001604:	f7ff ffbf 	bl	8001586 <I2Cx_ReadMultiple>

  return read_value;
}
 8001608:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800160c:	b005      	add	sp, #20
 800160e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001612:	bf00      	nop
 8001614:	20001a44 	.word	0x20001a44

08001618 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8001618:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 800161a:	f000 fe9f 	bl	800235c <HAL_Delay>
}
 800161e:	bd08      	pop	{r3, pc}

08001620 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001620:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <BSP_TS_Init+0x38>)
 8001624:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <BSP_TS_Init+0x3c>)
 8001628:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800162a:	4c0d      	ldr	r4, [pc, #52]	; (8001660 <BSP_TS_Init+0x40>)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	2070      	movs	r0, #112	; 0x70
 8001630:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	2070      	movs	r0, #112	; 0x70
 8001636:	4798      	blx	r3
 8001638:	2851      	cmp	r0, #81	; 0x51
 800163a:	d10b      	bne.n	8001654 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <BSP_TS_Init+0x44>)
 800163e:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8001640:	2070      	movs	r0, #112	; 0x70
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <BSP_TS_Init+0x48>)
 8001644:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <BSP_TS_Init+0x4c>)
 8001648:	2108      	movs	r1, #8
 800164a:	7011      	strb	r1, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800164c:	68e3      	ldr	r3, [r4, #12]
 800164e:	4798      	blx	r3
  uint8_t status = TS_OK;
 8001650:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 8001652:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 8001654:	2003      	movs	r0, #3
 8001656:	e7fc      	b.n	8001652 <BSP_TS_Init+0x32>
 8001658:	20001ac2 	.word	0x20001ac2
 800165c:	20001ac4 	.word	0x20001ac4
 8001660:	200001bc 	.word	0x200001bc
 8001664:	20001abc 	.word	0x20001abc
 8001668:	20001a90 	.word	0x20001a90
 800166c:	20001ac0 	.word	0x20001ac0

08001670 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8001670:	b510      	push	{r4, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	4604      	mov	r4, r0
  uint32_t gestureId = 0;
 8001676:	a902      	add	r1, sp, #8
 8001678:	2300      	movs	r3, #0
 800167a:	f841 3d04 	str.w	r3, [r1, #-4]!
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <BSP_TS_Get_GestureId+0x70>)
 8001680:	7818      	ldrb	r0, [r3, #0]
 8001682:	f7ff f877 	bl	8000774 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8001686:	9b01      	ldr	r3, [sp, #4]
 8001688:	2b18      	cmp	r3, #24
 800168a:	d01d      	beq.n	80016c8 <BSP_TS_Get_GestureId+0x58>
 800168c:	d806      	bhi.n	800169c <BSP_TS_Get_GestureId+0x2c>
 800168e:	2b10      	cmp	r3, #16
 8001690:	d012      	beq.n	80016b8 <BSP_TS_Get_GestureId+0x48>
 8001692:	2b14      	cmp	r3, #20
 8001694:	d014      	beq.n	80016c0 <BSP_TS_Get_GestureId+0x50>
 8001696:	b15b      	cbz	r3, 80016b0 <BSP_TS_Get_GestureId+0x40>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
    default :
      ts_status = TS_ERROR;
 8001698:	2001      	movs	r0, #1
 800169a:	e00b      	b.n	80016b4 <BSP_TS_Get_GestureId+0x44>
  switch(gestureId)
 800169c:	2b40      	cmp	r3, #64	; 0x40
 800169e:	d017      	beq.n	80016d0 <BSP_TS_Get_GestureId+0x60>
 80016a0:	2b49      	cmp	r3, #73	; 0x49
 80016a2:	d019      	beq.n	80016d8 <BSP_TS_Get_GestureId+0x68>
 80016a4:	2b1c      	cmp	r3, #28
 80016a6:	d1f7      	bne.n	8001698 <BSP_TS_Get_GestureId+0x28>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80016a8:	2304      	movs	r3, #4
 80016aa:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80016ac:	2000      	movs	r0, #0
      break;
 80016ae:	e001      	b.n	80016b4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80016b0:	2000      	movs	r0, #0
 80016b2:	62a0      	str	r0, [r4, #40]	; 0x28
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 80016b4:	b002      	add	sp, #8
 80016b6:	bd10      	pop	{r4, pc}
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80016bc:	2000      	movs	r0, #0
      break;
 80016be:	e7f9      	b.n	80016b4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80016c4:	2000      	movs	r0, #0
      break;
 80016c6:	e7f5      	b.n	80016b4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80016c8:	2303      	movs	r3, #3
 80016ca:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80016cc:	2000      	movs	r0, #0
      break;
 80016ce:	e7f1      	b.n	80016b4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80016d0:	2305      	movs	r3, #5
 80016d2:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80016d4:	2000      	movs	r0, #0
      break;
 80016d6:	e7ed      	b.n	80016b4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80016d8:	2306      	movs	r3, #6
 80016da:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80016dc:	2000      	movs	r0, #0
      break;
 80016de:	e7e9      	b.n	80016b4 <BSP_TS_Get_GestureId+0x44>
 80016e0:	20001a90 	.word	0x20001a90

080016e4 <BSP_TS_GetState>:
{
 80016e4:	b530      	push	{r4, r5, lr}
 80016e6:	b093      	sub	sp, #76	; 0x4c
 80016e8:	4605      	mov	r5, r0
  uint32_t weight = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	9305      	str	r3, [sp, #20]
  uint32_t area = 0;
 80016ee:	9304      	str	r3, [sp, #16]
  uint32_t event = 0;
 80016f0:	9303      	str	r3, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80016f2:	4b69      	ldr	r3, [pc, #420]	; (8001898 <BSP_TS_GetState+0x1b4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	4a68      	ldr	r2, [pc, #416]	; (800189c <BSP_TS_GetState+0x1b8>)
 80016fa:	7810      	ldrb	r0, [r2, #0]
 80016fc:	4798      	blx	r3
 80016fe:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 8001700:	2800      	cmp	r0, #0
 8001702:	f000 80c6 	beq.w	8001892 <BSP_TS_GetState+0x1ae>
    for(index=0; index < TS_State->touchDetected; index++)
 8001706:	2400      	movs	r4, #0
 8001708:	e01f      	b.n	800174a <BSP_TS_GetState+0x66>
        x[index] = brute_x[index];
 800170a:	aa12      	add	r2, sp, #72	; 0x48
 800170c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8001710:	f832 1c24 	ldrh.w	r1, [r2, #-36]
 8001714:	f822 1c0c 	strh.w	r1, [r2, #-12]
        y[index] = brute_y[index];
 8001718:	f832 1c30 	ldrh.w	r1, [r2, #-48]
 800171c:	f822 1c18 	strh.w	r1, [r2, #-24]
 8001720:	e026      	b.n	8001770 <BSP_TS_GetState+0x8c>
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001722:	b29b      	uxth	r3, r3
 8001724:	1a5b      	subs	r3, r3, r1
 8001726:	b29b      	uxth	r3, r3
 8001728:	e055      	b.n	80017d6 <BSP_TS_GetState+0xf2>
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800172a:	b292      	uxth	r2, r2
 800172c:	1a12      	subs	r2, r2, r0
 800172e:	b292      	uxth	r2, r2
 8001730:	e05e      	b.n	80017f0 <BSP_TS_GetState+0x10c>
        TS_State->touchX[index] = x[index];
 8001732:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8001736:	8059      	strh	r1, [r3, #2]
        TS_State->touchY[index] = y[index];
 8001738:	1d23      	adds	r3, r4, #4
 800173a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800173e:	8098      	strh	r0, [r3, #4]
 8001740:	e07a      	b.n	8001838 <BSP_TS_GetState+0x154>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8001742:	192b      	adds	r3, r5, r4
 8001744:	2201      	movs	r2, #1
 8001746:	76da      	strb	r2, [r3, #27]
    for(index=0; index < TS_State->touchDetected; index++)
 8001748:	3401      	adds	r4, #1
 800174a:	782b      	ldrb	r3, [r5, #0]
 800174c:	42a3      	cmp	r3, r4
 800174e:	f240 809d 	bls.w	800188c <BSP_TS_GetState+0x1a8>
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8001752:	4b51      	ldr	r3, [pc, #324]	; (8001898 <BSP_TS_GetState+0x1b4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	0061      	lsls	r1, r4, #1
 800175a:	aa06      	add	r2, sp, #24
 800175c:	440a      	add	r2, r1
 800175e:	a809      	add	r0, sp, #36	; 0x24
 8001760:	4401      	add	r1, r0
 8001762:	484e      	ldr	r0, [pc, #312]	; (800189c <BSP_TS_GetState+0x1b8>)
 8001764:	7800      	ldrb	r0, [r0, #0]
 8001766:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8001768:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <BSP_TS_GetState+0x1bc>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d0cc      	beq.n	800170a <BSP_TS_GetState+0x26>
      if(tsOrientation & TS_SWAP_X)
 8001770:	f013 0f02 	tst.w	r3, #2
 8001774:	d008      	beq.n	8001788 <BSP_TS_GetState+0xa4>
        x[index] = 4096 - brute_x[index];
 8001776:	aa12      	add	r2, sp, #72	; 0x48
 8001778:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 800177c:	f831 2c24 	ldrh.w	r2, [r1, #-36]
 8001780:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8001784:	f821 2c0c 	strh.w	r2, [r1, #-12]
      if(tsOrientation & TS_SWAP_Y)
 8001788:	f013 0f04 	tst.w	r3, #4
 800178c:	d008      	beq.n	80017a0 <BSP_TS_GetState+0xbc>
        y[index] = 4096 - brute_y[index];
 800178e:	aa12      	add	r2, sp, #72	; 0x48
 8001790:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8001794:	f831 2c30 	ldrh.w	r2, [r1, #-48]
 8001798:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800179c:	f821 2c18 	strh.w	r2, [r1, #-24]
      if(tsOrientation & TS_SWAP_XY)
 80017a0:	f013 0f08 	tst.w	r3, #8
 80017a4:	d00a      	beq.n	80017bc <BSP_TS_GetState+0xd8>
        y[index] = brute_x[index];
 80017a6:	ab12      	add	r3, sp, #72	; 0x48
 80017a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80017ac:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80017b0:	f823 2c18 	strh.w	r2, [r3, #-24]
        x[index] = brute_y[index];
 80017b4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80017b8:	f823 2c0c 	strh.w	r2, [r3, #-12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80017bc:	ab12      	add	r3, sp, #72	; 0x48
 80017be:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80017c2:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <BSP_TS_GetState+0x1c0>)
 80017c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80017cc:	4299      	cmp	r1, r3
 80017ce:	d9a8      	bls.n	8001722 <BSP_TS_GetState+0x3e>
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	1acb      	subs	r3, r1, r3
 80017d4:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80017d6:	aa12      	add	r2, sp, #72	; 0x48
 80017d8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80017dc:	f832 0c18 	ldrh.w	r0, [r2, #-24]
 80017e0:	4a31      	ldr	r2, [pc, #196]	; (80018a8 <BSP_TS_GetState+0x1c4>)
 80017e2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80017e6:	4290      	cmp	r0, r2
 80017e8:	d99f      	bls.n	800172a <BSP_TS_GetState+0x46>
 80017ea:	b292      	uxth	r2, r2
 80017ec:	1a82      	subs	r2, r0, r2
 80017ee:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 80017f0:	4413      	add	r3, r2
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	dd05      	ble.n	8001802 <BSP_TS_GetState+0x11e>
        _x[index] = x[index];
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <BSP_TS_GetState+0x1c0>)
 80017f8:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        _y[index] = y[index];
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <BSP_TS_GetState+0x1c4>)
 80017fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <BSP_TS_GetState+0x1b8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b70      	cmp	r3, #112	; 0x70
 8001808:	d093      	beq.n	8001732 <BSP_TS_GetState+0x4e>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <BSP_TS_GetState+0x1c0>)
 800180c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <BSP_TS_GetState+0x1c8>)
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	fb03 f302 	mul.w	r3, r3, r2
 8001818:	0b1b      	lsrs	r3, r3, #12
 800181a:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 800181e:	8053      	strh	r3, [r2, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <BSP_TS_GetState+0x1c4>)
 8001822:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001826:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <BSP_TS_GetState+0x1cc>)
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	fb03 f302 	mul.w	r3, r3, r2
 800182e:	0b1b      	lsrs	r3, r3, #12
 8001830:	1d22      	adds	r2, r4, #4
 8001832:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001836:	8093      	strh	r3, [r2, #4]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <BSP_TS_GetState+0x1b8>)
 800183a:	7818      	ldrb	r0, [r3, #0]
 800183c:	ab03      	add	r3, sp, #12
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	ab04      	add	r3, sp, #16
 8001842:	aa05      	add	r2, sp, #20
 8001844:	4621      	mov	r1, r4
 8001846:	f7fe ffa7 	bl	8000798 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 800184a:	192b      	adds	r3, r5, r4
 800184c:	9a05      	ldr	r2, [sp, #20]
 800184e:	759a      	strb	r2, [r3, #22]
      TS_State->touchArea[index]   = area;
 8001850:	9a04      	ldr	r2, [sp, #16]
 8001852:	f883 2020 	strb.w	r2, [r3, #32]
      switch(event)
 8001856:	9b03      	ldr	r3, [sp, #12]
 8001858:	2b03      	cmp	r3, #3
 800185a:	f63f af75 	bhi.w	8001748 <BSP_TS_GetState+0x64>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <BSP_TS_GetState+0x180>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001743 	.word	0x08001743
 8001868:	08001875 	.word	0x08001875
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001885 	.word	0x08001885
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8001874:	192b      	adds	r3, r5, r4
 8001876:	2202      	movs	r2, #2
 8001878:	76da      	strb	r2, [r3, #27]
          break;
 800187a:	e765      	b.n	8001748 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800187c:	192b      	adds	r3, r5, r4
 800187e:	2203      	movs	r2, #3
 8001880:	76da      	strb	r2, [r3, #27]
          break;
 8001882:	e761      	b.n	8001748 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8001884:	192b      	adds	r3, r5, r4
 8001886:	2200      	movs	r2, #0
 8001888:	76da      	strb	r2, [r3, #27]
          break;
 800188a:	e75d      	b.n	8001748 <BSP_TS_GetState+0x64>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800188c:	4628      	mov	r0, r5
 800188e:	f7ff feef 	bl	8001670 <BSP_TS_Get_GestureId>
}
 8001892:	b013      	add	sp, #76	; 0x4c
 8001894:	bd30      	pop	{r4, r5, pc}
 8001896:	bf00      	nop
 8001898:	20001abc 	.word	0x20001abc
 800189c:	20001a90 	.word	0x20001a90
 80018a0:	20001ac0 	.word	0x20001ac0
 80018a4:	20001a94 	.word	0x20001a94
 80018a8:	20001aa8 	.word	0x20001aa8
 80018ac:	20001ac2 	.word	0x20001ac2
 80018b0:	20001ac4 	.word	0x20001ac4

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b500      	push	{lr}
 80018b6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_MspInit+0x3c>)
 80018ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
 80018c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80018c8:	9200      	str	r2, [sp, #0]
 80018ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	210f      	movs	r1, #15
 80018e2:	f06f 0001 	mvn.w	r0, #1
 80018e6:	f000 fefb 	bl	80026e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	b003      	add	sp, #12
 80018ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f4:	b510      	push	{r4, lr}
 80018f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	2300      	movs	r3, #0
 80018fa:	9303      	str	r3, [sp, #12]
 80018fc:	9304      	str	r3, [sp, #16]
 80018fe:	9305      	str	r3, [sp, #20]
 8001900:	9306      	str	r3, [sp, #24]
 8001902:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC3)
 8001904:	6802      	ldr	r2, [r0, #0]
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_ADC_MspInit+0x7c>)
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800190c:	b008      	add	sp, #32
 800190e:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001910:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8001914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001916:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
 800191c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800191e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001922:	9200      	str	r2, [sp, #0]
 8001924:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001928:	f042 0220 	orr.w	r2, r2, #32
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
 800192e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001930:	f002 0220 	and.w	r2, r2, #32
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800194a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800194e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001950:	2403      	movs	r4, #3
 8001952:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001954:	a903      	add	r1, sp, #12
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <HAL_ADC_MspInit+0x80>)
 8001958:	f001 f958 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800195c:	2301      	movs	r3, #1
 800195e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001960:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001966:	a903      	add	r1, sp, #12
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <HAL_ADC_MspInit+0x84>)
 800196a:	f001 f94f 	bl	8002c0c <HAL_GPIO_Init>
}
 800196e:	e7cd      	b.n	800190c <HAL_ADC_MspInit+0x18>
 8001970:	40012200 	.word	0x40012200
 8001974:	40021400 	.word	0x40021400
 8001978:	40020000 	.word	0x40020000

0800197c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800197c:	6802      	ldr	r2, [r0, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_CRC_MspInit+0x28>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d000      	beq.n	8001986 <HAL_CRC_MspInit+0xa>
 8001984:	4770      	bx	lr
{
 8001986:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800198e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800199e:	b002      	add	sp, #8
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023000 	.word	0x40023000

080019a8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	2300      	movs	r3, #0
 80019ae:	9307      	str	r3, [sp, #28]
 80019b0:	9308      	str	r3, [sp, #32]
 80019b2:	9309      	str	r3, [sp, #36]	; 0x24
 80019b4:	930a      	str	r3, [sp, #40]	; 0x28
 80019b6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hdcmi->Instance==DCMI)
 80019b8:	6802      	ldr	r2, [r0, #0]
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_DCMI_MspInit+0xf8>)
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_DCMI_MspInit+0x1c>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80019c0:	b00c      	add	sp, #48	; 0x30
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 80019c4:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_DCMI_MspInit+0xfc>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
 80019ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d0:	f002 0201 	and.w	r2, r2, #1
 80019d4:	9201      	str	r2, [sp, #4]
 80019d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	f042 0210 	orr.w	r2, r2, #16
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e2:	f002 0210 	and.w	r2, r2, #16
 80019e6:	9202      	str	r2, [sp, #8]
 80019e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ec:	f042 0208 	orr.w	r2, r2, #8
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
 80019f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f4:	f002 0208 	and.w	r2, r2, #8
 80019f8:	9203      	str	r2, [sp, #12]
 80019fa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
 8001a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a06:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001a0a:	9204      	str	r2, [sp, #16]
 8001a0c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
 8001a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a18:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a1c:	9205      	str	r2, [sp, #20]
 8001a1e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	9306      	str	r3, [sp, #24]
 8001a30:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001a32:	2360      	movs	r3, #96	; 0x60
 8001a34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2602      	movs	r6, #2
 8001a38:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a3a:	250d      	movs	r5, #13
 8001a3c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3e:	a907      	add	r1, sp, #28
 8001a40:	4819      	ldr	r0, [pc, #100]	; (8001aa8 <HAL_DCMI_MspInit+0x100>)
 8001a42:	f001 f8e3 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001a46:	2308      	movs	r3, #8
 8001a48:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a52:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001a54:	a907      	add	r1, sp, #28
 8001a56:	4815      	ldr	r0, [pc, #84]	; (8001aac <HAL_DCMI_MspInit+0x104>)
 8001a58:	f001 f8d8 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a60:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a68:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	a907      	add	r1, sp, #28
 8001a6c:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <HAL_DCMI_MspInit+0x108>)
 8001a6e:	f001 f8cd 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8001a72:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001a76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a7e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a80:	a907      	add	r1, sp, #28
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <HAL_DCMI_MspInit+0x10c>)
 8001a84:	f001 f8c2 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001a88:	2350      	movs	r3, #80	; 0x50
 8001a8a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a92:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	a907      	add	r1, sp, #28
 8001a96:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <HAL_DCMI_MspInit+0x110>)
 8001a98:	f001 f8b8 	bl	8002c0c <HAL_GPIO_Init>
}
 8001a9c:	e790      	b.n	80019c0 <HAL_DCMI_MspInit+0x18>
 8001a9e:	bf00      	nop
 8001aa0:	50050000 	.word	0x50050000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021800 	.word	0x40021800
 8001ab4:	40021c00 	.word	0x40021c00
 8001ab8:	40020000 	.word	0x40020000

08001abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001abc:	b510      	push	{r4, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9305      	str	r3, [sp, #20]
 8001ac4:	9306      	str	r3, [sp, #24]
 8001ac6:	9307      	str	r3, [sp, #28]
 8001ac8:	9308      	str	r3, [sp, #32]
 8001aca:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8001acc:	6803      	ldr	r3, [r0, #0]
 8001ace:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_I2C_MspInit+0xac>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d004      	beq.n	8001ade <HAL_I2C_MspInit+0x22>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_I2C_MspInit+0xb0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_I2C_MspInit+0x64>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ada:	b00a      	add	sp, #40	; 0x28
 8001adc:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4c24      	ldr	r4, [pc, #144]	; (8001b70 <HAL_I2C_MspInit+0xb4>)
 8001ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8001ae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001af2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af8:	2312      	movs	r3, #18
 8001afa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b00:	2304      	movs	r3, #4
 8001b02:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	a905      	add	r1, sp, #20
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <HAL_I2C_MspInit+0xb8>)
 8001b08:	f001 f880 	bl	8002c0c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6423      	str	r3, [r4, #64]	; 0x40
 8001b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	9b02      	ldr	r3, [sp, #8]
 8001b1e:	e7dc      	b.n	8001ada <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b20:	4c13      	ldr	r4, [pc, #76]	; (8001b70 <HAL_I2C_MspInit+0xb4>)
 8001b22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6323      	str	r3, [r4, #48]	; 0x30
 8001b2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b30:	9303      	str	r3, [sp, #12]
 8001b32:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001b34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b46:	2304      	movs	r3, #4
 8001b48:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b4a:	a905      	add	r1, sp, #20
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <HAL_I2C_MspInit+0xbc>)
 8001b4e:	f001 f85d 	bl	8002c0c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b58:	6423      	str	r3, [r4, #64]	; 0x40
 8001b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	9b04      	ldr	r3, [sp, #16]
}
 8001b64:	e7b9      	b.n	8001ada <HAL_I2C_MspInit+0x1e>
 8001b66:	bf00      	nop
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	40005c00 	.word	0x40005c00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40021c00 	.word	0x40021c00

08001b7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b7c:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8001b7e:	6803      	ldr	r3, [r0, #0]
 8001b80:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_I2C_MspDeInit+0x44>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <HAL_I2C_MspDeInit+0x12>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_I2C_MspDeInit+0x48>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_I2C_MspDeInit+0x2a>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001b8c:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b8e:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
 8001b92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8001b9a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b9e:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <HAL_I2C_MspDeInit+0x4c>)
 8001ba0:	f001 f924 	bl	8002dec <HAL_GPIO_DeInit>
 8001ba4:	e7f2      	b.n	8001b8c <HAL_I2C_MspDeInit+0x10>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001ba6:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
 8001baa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001bb2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <HAL_I2C_MspDeInit+0x50>)
 8001bb8:	f001 f918 	bl	8002dec <HAL_GPIO_DeInit>
}
 8001bbc:	e7e6      	b.n	8001b8c <HAL_I2C_MspDeInit+0x10>
 8001bbe:	bf00      	nop
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	40005c00 	.word	0x40005c00
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40021c00 	.word	0x40021c00

08001bd0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9305      	str	r3, [sp, #20]
 8001bda:	9306      	str	r3, [sp, #24]
 8001bdc:	9307      	str	r3, [sp, #28]
 8001bde:	9308      	str	r3, [sp, #32]
 8001be0:	9309      	str	r3, [sp, #36]	; 0x24
  if(hqspi->Instance==QUADSPI)
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_QSPI_MspInit+0xd0>)
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d002      	beq.n	8001bf0 <HAL_QSPI_MspInit+0x20>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001bea:	b00b      	add	sp, #44	; 0x2c
 8001bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HAL_QSPI_MspInit+0xd4>)
 8001bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf4:	f042 0202 	orr.w	r2, r2, #2
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8001bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bfc:	f002 0202 	and.w	r2, r2, #2
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c06:	f042 0210 	orr.w	r2, r2, #16
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0e:	f002 0210 	and.w	r2, r2, #16
 8001c12:	9202      	str	r2, [sp, #8]
 8001c14:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c18:	f042 0202 	orr.w	r2, r2, #2
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c20:	f002 0202 	and.w	r2, r2, #2
 8001c24:	9203      	str	r2, [sp, #12]
 8001c26:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c2a:	f042 0208 	orr.w	r2, r2, #8
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	9304      	str	r3, [sp, #16]
 8001c38:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c3a:	f04f 0904 	mov.w	r9, #4
 8001c3e:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2502      	movs	r5, #2
 8001c44:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2403      	movs	r4, #3
 8001c48:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c4a:	2609      	movs	r6, #9
 8001c4c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	a905      	add	r1, sp, #20
 8001c50:	4815      	ldr	r0, [pc, #84]	; (8001ca8 <HAL_QSPI_MspInit+0xd8>)
 8001c52:	f000 ffdb 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001c56:	2340      	movs	r3, #64	; 0x40
 8001c58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2700      	movs	r7, #0
 8001c5e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c62:	230a      	movs	r3, #10
 8001c64:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001cb0 <HAL_QSPI_MspInit+0xe0>
 8001c6a:	a905      	add	r1, sp, #20
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	f000 ffcd 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c72:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c7c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	a905      	add	r1, sp, #20
 8001c80:	4640      	mov	r0, r8
 8001c82:	f000 ffc3 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c8a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c92:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c94:	a905      	add	r1, sp, #20
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_QSPI_MspInit+0xdc>)
 8001c98:	f000 ffb8 	bl	8002c0c <HAL_GPIO_Init>
}
 8001c9c:	e7a5      	b.n	8001bea <HAL_QSPI_MspInit+0x1a>
 8001c9e:	bf00      	nop
 8001ca0:	a0001000 	.word	0xa0001000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001cb4:	6802      	ldr	r2, [r0, #0]
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RTC_MspInit+0x18>)
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d000      	beq.n	8001cbe <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cbc:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_RTC_MspInit+0x1c>)
 8001cc0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
}
 8001cc8:	e7f8      	b.n	8001cbc <HAL_RTC_MspInit+0x8>
 8001cca:	bf00      	nop
 8001ccc:	40002800 	.word	0x40002800
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	9304      	str	r3, [sp, #16]
 8001cde:	9305      	str	r3, [sp, #20]
 8001ce0:	9306      	str	r3, [sp, #24]
 8001ce2:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDMMC1)
 8001ce4:	6802      	ldr	r2, [r0, #0]
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_SD_MspInit+0x8c>)
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_SD_MspInit+0x1c>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001cec:	b008      	add	sp, #32
 8001cee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001cf0:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8001cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d08:	f042 0204 	orr.w	r2, r2, #4
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d10:	f002 0204 	and.w	r2, r2, #4
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1a:	f042 0208 	orr.w	r2, r2, #8
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8001d2a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2602      	movs	r6, #2
 8001d32:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2503      	movs	r5, #3
 8001d36:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d38:	240c      	movs	r4, #12
 8001d3a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3c:	eb0d 0104 	add.w	r1, sp, r4
 8001d40:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_SD_MspInit+0x90>)
 8001d42:	f000 ff63 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001d46:	2304      	movs	r3, #4
 8001d48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d52:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d54:	eb0d 0104 	add.w	r1, sp, r4
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <HAL_SD_MspInit+0x94>)
 8001d5a:	f000 ff57 	bl	8002c0c <HAL_GPIO_Init>
}
 8001d5e:	e7c5      	b.n	8001cec <HAL_SD_MspInit+0x18>
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00

08001d6c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001d6c:	b500      	push	{lr}
 8001d6e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	2300      	movs	r3, #0
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	9304      	str	r3, [sp, #16]
 8001d76:	9305      	str	r3, [sp, #20]
 8001d78:	9306      	str	r3, [sp, #24]
 8001d7a:	9307      	str	r3, [sp, #28]
  if(hspdifrx->Instance==SPDIFRX)
 8001d7c:	6803      	ldr	r3, [r0, #0]
 8001d7e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001d82:	d002      	beq.n	8001d8a <HAL_SPDIFRX_MspInit+0x1e>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001d84:	b009      	add	sp, #36	; 0x24
 8001d86:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001d8a:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
 8001d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d98:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001d9c:	9201      	str	r2, [sp, #4]
 8001d9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da2:	f042 0208 	orr.w	r2, r2, #8
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	a903      	add	r1, sp, #12
 8001dc0:	4801      	ldr	r0, [pc, #4]	; (8001dc8 <HAL_SPDIFRX_MspInit+0x5c>)
 8001dc2:	f000 ff23 	bl	8002c0c <HAL_GPIO_Init>
}
 8001dc6:	e7dd      	b.n	8001d84 <HAL_SPDIFRX_MspInit+0x18>
 8001dc8:	40020c00 	.word	0x40020c00

08001dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dcc:	b500      	push	{lr}
 8001dce:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9307      	str	r3, [sp, #28]
 8001dd4:	9308      	str	r3, [sp, #32]
 8001dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8001dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8001dda:	930b      	str	r3, [sp, #44]	; 0x2c
  if(htim_base->Instance==TIM1)
 8001ddc:	6803      	ldr	r3, [r0, #0]
 8001dde:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_TIM_Base_MspInit+0xd8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d016      	beq.n	8001e12 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d020      	beq.n	8001e2c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <HAL_TIM_Base_MspInit+0xdc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d029      	beq.n	8001e44 <HAL_TIM_Base_MspInit+0x78>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8001df0:	4a2e      	ldr	r2, [pc, #184]	; (8001eac <HAL_TIM_Base_MspInit+0xe0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04b      	beq.n	8001e8e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8001df6:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <HAL_TIM_Base_MspInit+0xe4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d114      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_TIM_Base_MspInit+0xe8>)
 8001dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e00:	f042 0202 	orr.w	r2, r2, #2
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	9306      	str	r3, [sp, #24]
 8001e0e:	9b06      	ldr	r3, [sp, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e10:	e009      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_TIM_Base_MspInit+0xe8>)
 8001e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	9b01      	ldr	r3, [sp, #4]
}
 8001e26:	b00d      	add	sp, #52	; 0x34
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	9b02      	ldr	r3, [sp, #8]
 8001e42:	e7f0      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_TIM_Base_MspInit+0xe8>)
 8001e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e48:	f042 0202 	orr.w	r2, r2, #2
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e50:	f002 0202 	and.w	r2, r2, #2
 8001e54:	9203      	str	r2, [sp, #12]
 8001e56:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5a:	f042 0202 	orr.w	r2, r2, #2
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	9304      	str	r3, [sp, #16]
 8001e68:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e72:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001e74:	a907      	add	r1, sp, #28
 8001e76:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <HAL_TIM_Base_MspInit+0xec>)
 8001e78:	f000 fec8 	bl	8002c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2105      	movs	r1, #5
 8001e80:	201d      	movs	r0, #29
 8001e82:	f000 fc2d 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e86:	201d      	movs	r0, #29
 8001e88:	f000 fc5c 	bl	8002744 <HAL_NVIC_EnableIRQ>
 8001e8c:	e7cb      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_TIM_Base_MspInit+0xe8>)
 8001e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e92:	f042 0208 	orr.w	r2, r2, #8
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	9305      	str	r3, [sp, #20]
 8001ea0:	9b05      	ldr	r3, [sp, #20]
 8001ea2:	e7c0      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x5a>
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000c00 	.word	0x40000c00
 8001eb0:	40010400 	.word	0x40010400
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020400 	.word	0x40020400

08001ebc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM12)
 8001ebc:	6802      	ldr	r2, [r0, #0]
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_TIM_PWM_MspInit+0x28>)
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d000      	beq.n	8001ec6 <HAL_TIM_PWM_MspInit+0xa>
 8001ec4:	4770      	bx	lr
{
 8001ec6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ec8:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8001ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001ede:	b002      	add	sp, #8
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40001800 	.word	0x40001800

08001ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee8:	b500      	push	{lr}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	2300      	movs	r3, #0
 8001eee:	9305      	str	r3, [sp, #20]
 8001ef0:	9306      	str	r3, [sp, #24]
 8001ef2:	9307      	str	r3, [sp, #28]
 8001ef4:	9308      	str	r3, [sp, #32]
 8001ef6:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 8001ef8:	6803      	ldr	r3, [r0, #0]
 8001efa:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <HAL_TIM_MspPostInit+0xdc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00b      	beq.n	8001f18 <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d01e      	beq.n	8001f44 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 8001f06:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <HAL_TIM_MspPostInit+0xe0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d032      	beq.n	8001f72 <HAL_TIM_MspPostInit+0x8a>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM12)
 8001f0c:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <HAL_TIM_MspPostInit+0xe4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d043      	beq.n	8001f9a <HAL_TIM_MspPostInit+0xb2>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001f12:	b00b      	add	sp, #44	; 0x2c
 8001f14:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_TIM_MspPostInit+0xe8>)
 8001f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	a905      	add	r1, sp, #20
 8001f3c:	4825      	ldr	r0, [pc, #148]	; (8001fd4 <HAL_TIM_MspPostInit+0xec>)
 8001f3e:	f000 fe65 	bl	8002c0c <HAL_GPIO_Init>
 8001f42:	e7e6      	b.n	8001f12 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f5e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f64:	2301      	movs	r3, #1
 8001f66:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001f68:	a905      	add	r1, sp, #20
 8001f6a:	481a      	ldr	r0, [pc, #104]	; (8001fd4 <HAL_TIM_MspPostInit+0xec>)
 8001f6c:	f000 fe4e 	bl	8002c0c <HAL_GPIO_Init>
 8001f70:	e7cf      	b.n	8001f12 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_TIM_MspPostInit+0xe8>)
 8001f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	9303      	str	r3, [sp, #12]
 8001f84:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001f86:	2301      	movs	r3, #1
 8001f88:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f8e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001f90:	a905      	add	r1, sp, #20
 8001f92:	4811      	ldr	r0, [pc, #68]	; (8001fd8 <HAL_TIM_MspPostInit+0xf0>)
 8001f94:	f000 fe3a 	bl	8002c0c <HAL_GPIO_Init>
 8001f98:	e7bb      	b.n	8001f12 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_TIM_MspPostInit+0xe8>)
 8001f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	9304      	str	r3, [sp, #16]
 8001fac:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001fae:	2340      	movs	r3, #64	; 0x40
 8001fb0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001fba:	a905      	add	r1, sp, #20
 8001fbc:	4807      	ldr	r0, [pc, #28]	; (8001fdc <HAL_TIM_MspPostInit+0xf4>)
 8001fbe:	f000 fe25 	bl	8002c0c <HAL_GPIO_Init>
}
 8001fc2:	e7a6      	b.n	8001f12 <HAL_TIM_MspPostInit+0x2a>
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	40001800 	.word	0x40001800
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021c00 	.word	0x40021c00

08001fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe0:	b530      	push	{r4, r5, lr}
 8001fe2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9305      	str	r3, [sp, #20]
 8001fe8:	9306      	str	r3, [sp, #24]
 8001fea:	9307      	str	r3, [sp, #28]
 8001fec:	9308      	str	r3, [sp, #32]
 8001fee:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8001ff0:	6803      	ldr	r3, [r0, #0]
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_UART_MspInit+0xc8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8001ff8:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <HAL_UART_MspInit+0xcc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d034      	beq.n	8002068 <HAL_UART_MspInit+0x88>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ffe:	b00b      	add	sp, #44	; 0x2c
 8002000:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_UART_MspInit+0xd0>)
 8002004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002006:	f042 0210 	orr.w	r2, r2, #16
 800200a:	645a      	str	r2, [r3, #68]	; 0x44
 800200c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800200e:	f002 0210 	and.w	r2, r2, #16
 8002012:	9200      	str	r2, [sp, #0]
 8002014:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002018:	f042 0202 	orr.w	r2, r2, #2
 800201c:	631a      	str	r2, [r3, #48]	; 0x30
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002020:	f002 0202 	and.w	r2, r2, #2
 8002024:	9201      	str	r2, [sp, #4]
 8002026:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2502      	movs	r5, #2
 8002040:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002042:	2407      	movs	r4, #7
 8002044:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002046:	a905      	add	r1, sp, #20
 8002048:	481a      	ldr	r0, [pc, #104]	; (80020b4 <HAL_UART_MspInit+0xd4>)
 800204a:	f000 fddf 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800204e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002052:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800205c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800205e:	a905      	add	r1, sp, #20
 8002060:	4815      	ldr	r0, [pc, #84]	; (80020b8 <HAL_UART_MspInit+0xd8>)
 8002062:	f000 fdd3 	bl	8002c0c <HAL_GPIO_Init>
 8002066:	e7ca      	b.n	8001ffe <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_UART_MspInit+0xd0>)
 800206a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
 8002072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002074:	f002 0220 	and.w	r2, r2, #32
 8002078:	9203      	str	r2, [sp, #12]
 800207a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207e:	f042 0204 	orr.w	r2, r2, #4
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	9304      	str	r3, [sp, #16]
 800208c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800208e:	23c0      	movs	r3, #192	; 0xc0
 8002090:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800209a:	2308      	movs	r3, #8
 800209c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	a905      	add	r1, sp, #20
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <HAL_UART_MspInit+0xdc>)
 80020a2:	f000 fdb3 	bl	8002c0c <HAL_GPIO_Init>
}
 80020a6:	e7aa      	b.n	8001ffe <HAL_UART_MspInit+0x1e>
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40011400 	.word	0x40011400
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020800 	.word	0x40020800

080020c0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80020c0:	b510      	push	{r4, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80020c6:	6802      	ldr	r2, [r0, #0]
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_SAI_MspInit+0x94>)
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d005      	beq.n	80020da <HAL_SAI_MspInit+0x1a>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI2_Block_B)
 80020ce:	6822      	ldr	r2, [r4, #0]
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_SAI_MspInit+0x98>)
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d01f      	beq.n	8002116 <HAL_SAI_MspInit+0x56>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);

    }
}
 80020d6:	b008      	add	sp, #32
 80020d8:	bd10      	pop	{r4, pc}
    if (SAI2_client == 0)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_SAI_MspInit+0x9c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b94b      	cbnz	r3, 80020f4 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI2_CLK_ENABLE();
 80020e0:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_SAI_MspInit+0xa0>)
 80020e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020e4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80020e8:	6451      	str	r1, [r2, #68]	; 0x44
 80020ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020ec:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80020f0:	9201      	str	r2, [sp, #4]
 80020f2:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_SAI_MspInit+0x9c>)
 80020f8:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80020fa:	23f0      	movs	r3, #240	; 0xf0
 80020fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002108:	230a      	movs	r3, #10
 800210a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800210c:	a903      	add	r1, sp, #12
 800210e:	4815      	ldr	r0, [pc, #84]	; (8002164 <HAL_SAI_MspInit+0xa4>)
 8002110:	f000 fd7c 	bl	8002c0c <HAL_GPIO_Init>
 8002114:	e7db      	b.n	80020ce <HAL_SAI_MspInit+0xe>
      if (SAI2_client == 0)
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_SAI_MspInit+0x9c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b94b      	cbnz	r3, 8002130 <HAL_SAI_MspInit+0x70>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800211c:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_SAI_MspInit+0xa0>)
 800211e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002120:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002124:	6451      	str	r1, [r2, #68]	; 0x44
 8002126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002128:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800212c:	9202      	str	r2, [sp, #8]
 800212e:	9a02      	ldr	r2, [sp, #8]
    SAI2_client ++;
 8002130:	3301      	adds	r3, #1
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_SAI_MspInit+0x9c>)
 8002134:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002146:	230a      	movs	r3, #10
 8002148:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800214a:	a903      	add	r1, sp, #12
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <HAL_SAI_MspInit+0xa8>)
 800214e:	f000 fd5d 	bl	8002c0c <HAL_GPIO_Init>
}
 8002152:	e7c0      	b.n	80020d6 <HAL_SAI_MspInit+0x16>
 8002154:	40015c04 	.word	0x40015c04
 8002158:	40015c24 	.word	0x40015c24
 800215c:	20001ac8 	.word	0x20001ac8
 8002160:	40023800 	.word	0x40023800
 8002164:	40022000 	.word	0x40022000
 8002168:	40021800 	.word	0x40021800

0800216c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b500      	push	{lr}
 800216e:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002170:	2200      	movs	r2, #0
 8002172:	4601      	mov	r1, r0
 8002174:	2036      	movs	r0, #54	; 0x36
 8002176:	f000 fab3 	bl	80026e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800217a:	2036      	movs	r0, #54	; 0x36
 800217c:	f000 fae2 	bl	8002744 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_InitTick+0x6c>)
 8002182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002184:	f042 0210 	orr.w	r2, r2, #16
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002194:	a902      	add	r1, sp, #8
 8002196:	a803      	add	r0, sp, #12
 8002198:	f002 ff7c 	bl	8005094 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800219c:	f002 ff5a 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 80021a0:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80021a2:	480e      	ldr	r0, [pc, #56]	; (80021dc <HAL_InitTick+0x70>)
 80021a4:	fba0 2303 	umull	r2, r3, r0, r3
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <HAL_InitTick+0x74>)
 80021ae:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_InitTick+0x78>)
 80021b0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80021b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021b6:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021b8:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021c0:	f004 feca 	bl	8006f58 <HAL_TIM_Base_Init>
 80021c4:	b118      	cbz	r0, 80021ce <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
}
 80021c8:	b009      	add	sp, #36	; 0x24
 80021ca:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 80021ce:	4804      	ldr	r0, [pc, #16]	; (80021e0 <HAL_InitTick+0x74>)
 80021d0:	f004 fd54 	bl	8006c7c <HAL_TIM_Base_Start_IT>
 80021d4:	e7f8      	b.n	80021c8 <HAL_InitTick+0x5c>
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	20021894 	.word	0x20021894
 80021e4:	40001000 	.word	0x40001000

080021e8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021e8:	4770      	bx	lr

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	e7fe      	b.n	80021ea <HardFault_Handler>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	e7fe      	b.n	80021ec <MemManage_Handler>

080021ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler>

080021f2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f2:	4770      	bx	lr

080021f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021f6:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM3_IRQHandler+0xc>)
 80021f8:	f004 fd5a 	bl	8006cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021fc:	bd08      	pop	{r3, pc}
 80021fe:	bf00      	nop
 8002200:	2002158c 	.word	0x2002158c

08002204 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002206:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM6_DAC_IRQHandler+0xc>)
 8002208:	f004 fd52 	bl	8006cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800220c:	bd08      	pop	{r3, pc}
 800220e:	bf00      	nop
 8002210:	20021894 	.word	0x20021894

08002214 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002216:	4802      	ldr	r0, [pc, #8]	; (8002220 <OTG_FS_IRQHandler+0xc>)
 8002218:	f001 fb69 	bl	80038ee <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800221c:	bd08      	pop	{r3, pc}
 800221e:	bf00      	nop
 8002220:	20022238 	.word	0x20022238

08002224 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002224:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002226:	4802      	ldr	r0, [pc, #8]	; (8002230 <LTDC_IRQHandler+0xc>)
 8002228:	f002 f984 	bl	8004534 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800222c:	bd08      	pop	{r3, pc}
 800222e:	bf00      	nop
 8002230:	20021d44 	.word	0x20021d44

08002234 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002236:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA2D_IRQHandler+0xc>)
 8002238:	f000 fbe8 	bl	8002a0c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800223c:	bd08      	pop	{r3, pc}
 800223e:	bf00      	nop
 8002240:	20021dec 	.word	0x20021dec

08002244 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002244:	b508      	push	{r3, lr}
 8002246:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002248:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <_sbrk+0x34>)
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	b142      	cbz	r2, 8002260 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <_sbrk+0x34>)
 8002250:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002252:	4403      	add	r3, r0
 8002254:	466a      	mov	r2, sp
 8002256:	4293      	cmp	r3, r2
 8002258:	d806      	bhi.n	8002268 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <_sbrk+0x34>)
 800225c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800225e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002260:	4a05      	ldr	r2, [pc, #20]	; (8002278 <_sbrk+0x34>)
 8002262:	4906      	ldr	r1, [pc, #24]	; (800227c <_sbrk+0x38>)
 8002264:	6011      	str	r1, [r2, #0]
 8002266:	e7f2      	b.n	800224e <_sbrk+0xa>
		errno = ENOMEM;
 8002268:	f019 faa8 	bl	801b7bc <__errno>
 800226c:	230c      	movs	r3, #12
 800226e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	e7f3      	b.n	800225e <_sbrk+0x1a>
 8002276:	bf00      	nop
 8002278:	20001acc 	.word	0x20001acc
 800227c:	200226b8 	.word	0x200226b8

08002280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002280:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002282:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <SystemInit+0x40>)
 8002284:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <SystemInit+0x44>)
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	f041 0101 	orr.w	r1, r1, #1
 8002298:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800229a:	2000      	movs	r0, #0
 800229c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	4909      	ldr	r1, [pc, #36]	; (80022c8 <SystemInit+0x48>)
 80022a2:	4021      	ands	r1, r4
 80022a4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022a6:	4909      	ldr	r1, [pc, #36]	; (80022cc <SystemInit+0x4c>)
 80022a8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80022b0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022b2:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022b8:	6093      	str	r3, [r2, #8]
#endif
}
 80022ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	fef6ffff 	.word	0xfef6ffff
 80022cc:	24003010 	.word	0x24003010

080022d0 <Reset_Handler>:
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopFillZerobss+0x14>
 80022d4:	2100      	movs	r1, #0
 80022d6:	e003      	b.n	80022e0 <LoopCopyDataInit>

080022d8 <CopyDataInit>:
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <LoopFillZerobss+0x18>)
 80022da:	585b      	ldr	r3, [r3, r1]
 80022dc:	5043      	str	r3, [r0, r1]
 80022de:	3104      	adds	r1, #4

080022e0 <LoopCopyDataInit>:
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <LoopFillZerobss+0x1c>)
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <LoopFillZerobss+0x20>)
 80022e4:	1842      	adds	r2, r0, r1
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3f6      	bcc.n	80022d8 <CopyDataInit>
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <LoopFillZerobss+0x24>)
 80022ec:	e002      	b.n	80022f4 <LoopFillZerobss>

080022ee <FillZerobss>:
 80022ee:	2300      	movs	r3, #0
 80022f0:	f842 3b04 	str.w	r3, [r2], #4

080022f4 <LoopFillZerobss>:
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <LoopFillZerobss+0x28>)
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d3f9      	bcc.n	80022ee <FillZerobss>
 80022fa:	f7ff ffc1 	bl	8002280 <SystemInit>
 80022fe:	f019 fa63 	bl	801b7c8 <__libc_init_array>
 8002302:	f7fe ffe3 	bl	80012cc <main>
 8002306:	4770      	bx	lr
 8002308:	20050000 	.word	0x20050000
 800230c:	0801eac8 	.word	0x0801eac8
 8002310:	20000000 	.word	0x20000000
 8002314:	20000274 	.word	0x20000274
 8002318:	20000274 	.word	0x20000274
 800231c:	200226b8 	.word	0x200226b8

08002320 <ADC_IRQHandler>:
 8002320:	e7fe      	b.n	8002320 <ADC_IRQHandler>

08002322 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002322:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f9c9 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff ff1e 	bl	800216c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fac0 	bl	80018b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8002334:	2000      	movs	r0, #0
 8002336:	bd08      	pop	{r3, pc}

08002338 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002338:	4a03      	ldr	r2, [pc, #12]	; (8002348 <HAL_IncTick+0x10>)
 800233a:	6811      	ldr	r1, [r2, #0]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_IncTick+0x14>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	440b      	add	r3, r1
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200218d4 	.word	0x200218d4
 800234c:	200001e8 	.word	0x200001e8

08002350 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002350:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_GetTick+0x8>)
 8002352:	6818      	ldr	r0, [r3, #0]
}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200218d4 	.word	0x200218d4

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fff6 	bl	8002350 <HAL_GetTick>
 8002364:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002366:	f1b4 3fff 	cmp.w	r4, #4294967295
 800236a:	d002      	beq.n	8002372 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_Delay+0x24>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002372:	f7ff ffed 	bl	8002350 <HAL_GetTick>
 8002376:	1b40      	subs	r0, r0, r5
 8002378:	42a0      	cmp	r0, r4
 800237a:	d3fa      	bcc.n	8002372 <HAL_Delay+0x16>
  {
  }
}
 800237c:	bd38      	pop	{r3, r4, r5, pc}
 800237e:	bf00      	nop
 8002380:	200001e8 	.word	0x200001e8

08002384 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <ADC_Init+0x12c>)
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800238c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	6841      	ldr	r1, [r0, #4]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002396:	6802      	ldr	r2, [r0, #0]
 8002398:	6853      	ldr	r3, [r2, #4]
 800239a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023a0:	6802      	ldr	r2, [r0, #0]
 80023a2:	6853      	ldr	r3, [r2, #4]
 80023a4:	6901      	ldr	r1, [r0, #16]
 80023a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023aa:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	6853      	ldr	r3, [r2, #4]
 80023b0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80023b4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023b6:	6802      	ldr	r2, [r0, #0]
 80023b8:	6853      	ldr	r3, [r2, #4]
 80023ba:	6881      	ldr	r1, [r0, #8]
 80023bc:	430b      	orrs	r3, r1
 80023be:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c0:	6802      	ldr	r2, [r0, #0]
 80023c2:	6893      	ldr	r3, [r2, #8]
 80023c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023ca:	6802      	ldr	r2, [r0, #0]
 80023cc:	6893      	ldr	r3, [r2, #8]
 80023ce:	68c1      	ldr	r1, [r0, #12]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <ADC_Init+0x130>)
 80023d8:	429a      	cmp	r2, r3
 80023da:	d04b      	beq.n	8002474 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023dc:	6802      	ldr	r2, [r0, #0]
 80023de:	6893      	ldr	r3, [r2, #8]
 80023e0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80023e4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e6:	6802      	ldr	r2, [r0, #0]
 80023e8:	6893      	ldr	r3, [r2, #8]
 80023ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f0:	6802      	ldr	r2, [r0, #0]
 80023f2:	6893      	ldr	r3, [r2, #8]
 80023f4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023f8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023fa:	6802      	ldr	r2, [r0, #0]
 80023fc:	6893      	ldr	r3, [r2, #8]
 80023fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002400:	430b      	orrs	r3, r1
 8002402:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002404:	6802      	ldr	r2, [r0, #0]
 8002406:	6893      	ldr	r3, [r2, #8]
 8002408:	f023 0302 	bic.w	r3, r3, #2
 800240c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240e:	6802      	ldr	r2, [r0, #0]
 8002410:	6893      	ldr	r3, [r2, #8]
 8002412:	6981      	ldr	r1, [r0, #24]
 8002414:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002418:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800241a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d133      	bne.n	800248a <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002422:	6802      	ldr	r2, [r0, #0]
 8002424:	6853      	ldr	r3, [r2, #4]
 8002426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800242a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800242c:	6802      	ldr	r2, [r0, #0]
 800242e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002430:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002434:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002436:	6801      	ldr	r1, [r0, #0]
 8002438:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800243a:	69c2      	ldr	r2, [r0, #28]
 800243c:	3a01      	subs	r2, #1
 800243e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002442:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002444:	6802      	ldr	r2, [r0, #0]
 8002446:	6893      	ldr	r3, [r2, #8]
 8002448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800244c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244e:	6802      	ldr	r2, [r0, #0]
 8002450:	6893      	ldr	r3, [r2, #8]
 8002452:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8002456:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800245a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800245c:	6802      	ldr	r2, [r0, #0]
 800245e:	6893      	ldr	r3, [r2, #8]
 8002460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002464:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002466:	6802      	ldr	r2, [r0, #0]
 8002468:	6893      	ldr	r3, [r2, #8]
 800246a:	6941      	ldr	r1, [r0, #20]
 800246c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002470:	6093      	str	r3, [r2, #8]
}
 8002472:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002474:	6802      	ldr	r2, [r0, #0]
 8002476:	6893      	ldr	r3, [r2, #8]
 8002478:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800247c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800247e:	6802      	ldr	r2, [r0, #0]
 8002480:	6893      	ldr	r3, [r2, #8]
 8002482:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002486:	6093      	str	r3, [r2, #8]
 8002488:	e7bc      	b.n	8002404 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800248a:	6802      	ldr	r2, [r0, #0]
 800248c:	6853      	ldr	r3, [r2, #4]
 800248e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002492:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002494:	6802      	ldr	r2, [r0, #0]
 8002496:	6853      	ldr	r3, [r2, #4]
 8002498:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800249c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800249e:	6801      	ldr	r1, [r0, #0]
 80024a0:	684b      	ldr	r3, [r1, #4]
 80024a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024a4:	3a01      	subs	r2, #1
 80024a6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e7be      	b.n	800242c <ADC_Init+0xa8>
 80024ae:	bf00      	nop
 80024b0:	40012300 	.word	0x40012300
 80024b4:	0f000001 	.word	0x0f000001

080024b8 <HAL_ADC_Init>:
  if(hadc == NULL)
 80024b8:	b328      	cbz	r0, 8002506 <HAL_ADC_Init+0x4e>
{
 80024ba:	b510      	push	{r4, lr}
 80024bc:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024c0:	b143      	cbz	r3, 80024d4 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024c4:	f013 0f10 	tst.w	r3, #16
 80024c8:	d00b      	beq.n	80024e2 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80024ca:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80024cc:	2300      	movs	r3, #0
 80024ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80024d2:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80024d4:	f7ff fa0e 	bl	80018f4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	2300      	movs	r3, #0
 80024da:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80024dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80024e0:	e7ef      	b.n	80024c2 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_ADC_Init+0x54>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff ff48 	bl	8002384 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80024f4:	2000      	movs	r0, #0
 80024f6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80024f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6423      	str	r3, [r4, #64]	; 0x40
 8002504:	e7e2      	b.n	80024cc <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002506:	2001      	movs	r0, #1
}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	ffffeefd 	.word	0xffffeefd

08002510 <HAL_ADC_ConfigChannel>:
{
 8002510:	b430      	push	{r4, r5}
 8002512:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002518:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	f000 80c0 	beq.w	80026a2 <HAL_ADC_ConfigChannel+0x192>
 8002522:	2301      	movs	r3, #1
 8002524:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002528:	680b      	ldr	r3, [r1, #0]
 800252a:	2b09      	cmp	r3, #9
 800252c:	d922      	bls.n	8002574 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800252e:	6805      	ldr	r5, [r0, #0]
 8002530:	68ea      	ldr	r2, [r5, #12]
 8002532:	b29b      	uxth	r3, r3
 8002534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002538:	3b1e      	subs	r3, #30
 800253a:	2407      	movs	r4, #7
 800253c:	fa04 f303 	lsl.w	r3, r4, r3
 8002540:	ea22 0303 	bic.w	r3, r2, r3
 8002544:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002546:	680b      	ldr	r3, [r1, #0]
 8002548:	4a57      	ldr	r2, [pc, #348]	; (80026a8 <HAL_ADC_ConfigChannel+0x198>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800254e:	6805      	ldr	r5, [r0, #0]
 8002550:	68ea      	ldr	r2, [r5, #12]
 8002552:	688c      	ldr	r4, [r1, #8]
 8002554:	b29b      	uxth	r3, r3
 8002556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800255a:	3b1e      	subs	r3, #30
 800255c:	fa04 f303 	lsl.w	r3, r4, r3
 8002560:	4313      	orrs	r3, r2
 8002562:	60eb      	str	r3, [r5, #12]
 8002564:	e01b      	b.n	800259e <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002566:	6802      	ldr	r2, [r0, #0]
 8002568:	68d3      	ldr	r3, [r2, #12]
 800256a:	688c      	ldr	r4, [r1, #8]
 800256c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002570:	60d3      	str	r3, [r2, #12]
 8002572:	e014      	b.n	800259e <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002574:	6805      	ldr	r5, [r0, #0]
 8002576:	692a      	ldr	r2, [r5, #16]
 8002578:	b29b      	uxth	r3, r3
 800257a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800257e:	2407      	movs	r4, #7
 8002580:	fa04 f303 	lsl.w	r3, r4, r3
 8002584:	ea22 0303 	bic.w	r3, r2, r3
 8002588:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800258a:	6805      	ldr	r5, [r0, #0]
 800258c:	692a      	ldr	r2, [r5, #16]
 800258e:	688c      	ldr	r4, [r1, #8]
 8002590:	880b      	ldrh	r3, [r1, #0]
 8002592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002596:	fa04 f303 	lsl.w	r3, r4, r3
 800259a:	4313      	orrs	r3, r2
 800259c:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 800259e:	684b      	ldr	r3, [r1, #4]
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d824      	bhi.n	80025ee <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025a4:	6805      	ldr	r5, [r0, #0]
 80025a6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025ac:	3b05      	subs	r3, #5
 80025ae:	241f      	movs	r4, #31
 80025b0:	fa04 f303 	lsl.w	r3, r4, r3
 80025b4:	ea22 0303 	bic.w	r3, r2, r3
 80025b8:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025ba:	6805      	ldr	r5, [r0, #0]
 80025bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025be:	684b      	ldr	r3, [r1, #4]
 80025c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025c4:	3b05      	subs	r3, #5
 80025c6:	880c      	ldrh	r4, [r1, #0]
 80025c8:	fa04 f303 	lsl.w	r3, r4, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d0:	6802      	ldr	r2, [r0, #0]
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_ADC_ConfigChannel+0x19c>)
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d03a      	beq.n	800264e <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d8:	6802      	ldr	r2, [r0, #0]
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <HAL_ADC_ConfigChannel+0x19c>)
 80025dc:	429a      	cmp	r2, r3
 80025de:	d03f      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 80025e0:	2300      	movs	r3, #0
 80025e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80025e6:	4618      	mov	r0, r3
}
 80025e8:	b002      	add	sp, #8
 80025ea:	bc30      	pop	{r4, r5}
 80025ec:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d816      	bhi.n	8002620 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025f2:	6805      	ldr	r5, [r0, #0]
 80025f4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80025f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025fa:	3b23      	subs	r3, #35	; 0x23
 80025fc:	241f      	movs	r4, #31
 80025fe:	fa04 f303 	lsl.w	r3, r4, r3
 8002602:	ea22 0303 	bic.w	r3, r2, r3
 8002606:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002608:	6805      	ldr	r5, [r0, #0]
 800260a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800260c:	684b      	ldr	r3, [r1, #4]
 800260e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002612:	3b23      	subs	r3, #35	; 0x23
 8002614:	880c      	ldrh	r4, [r1, #0]
 8002616:	fa04 f303 	lsl.w	r3, r4, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	632b      	str	r3, [r5, #48]	; 0x30
 800261e:	e7d7      	b.n	80025d0 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002620:	6805      	ldr	r5, [r0, #0]
 8002622:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002624:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002628:	3b41      	subs	r3, #65	; 0x41
 800262a:	241f      	movs	r4, #31
 800262c:	fa04 f303 	lsl.w	r3, r4, r3
 8002630:	ea22 0303 	bic.w	r3, r2, r3
 8002634:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002636:	6805      	ldr	r5, [r0, #0]
 8002638:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800263a:	684b      	ldr	r3, [r1, #4]
 800263c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002640:	3b41      	subs	r3, #65	; 0x41
 8002642:	880c      	ldrh	r4, [r1, #0]
 8002644:	fa04 f303 	lsl.w	r3, r4, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800264c:	e7c0      	b.n	80025d0 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800264e:	680b      	ldr	r3, [r1, #0]
 8002650:	2b12      	cmp	r3, #18
 8002652:	d1c1      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_ADC_ConfigChannel+0x1a0>)
 8002656:	6853      	ldr	r3, [r2, #4]
 8002658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800265c:	6053      	str	r3, [r2, #4]
 800265e:	e7bb      	b.n	80025d8 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002660:	680b      	ldr	r3, [r1, #0]
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ADC_ConfigChannel+0x198>)
 8002664:	2b11      	cmp	r3, #17
 8002666:	bf18      	it	ne
 8002668:	4293      	cmpne	r3, r2
 800266a:	d1b9      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800266c:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <HAL_ADC_ConfigChannel+0x1a0>)
 800266e:	6853      	ldr	r3, [r2, #4]
 8002670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002674:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002676:	680a      	ldr	r2, [r1, #0]
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_ADC_ConfigChannel+0x198>)
 800267a:	429a      	cmp	r2, r3
 800267c:	d1b0      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_ADC_ConfigChannel+0x1a4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_ADC_ConfigChannel+0x1a8>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	0c9b      	lsrs	r3, r3, #18
 800268a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800268e:	005a      	lsls	r2, r3, #1
 8002690:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8002692:	e002      	b.n	800269a <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 8002694:	9b01      	ldr	r3, [sp, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800269a:	9b01      	ldr	r3, [sp, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x184>
 80026a0:	e79e      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80026a2:	2002      	movs	r0, #2
 80026a4:	e7a0      	b.n	80025e8 <HAL_ADC_ConfigChannel+0xd8>
 80026a6:	bf00      	nop
 80026a8:	10000012 	.word	0x10000012
 80026ac:	40012000 	.word	0x40012000
 80026b0:	40012300 	.word	0x40012300
 80026b4:	200001e4 	.word	0x200001e4
 80026b8:	431bde83 	.word	0x431bde83

080026bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026bc:	4906      	ldr	r1, [pc, #24]	; (80026d8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80026be:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	0200      	lsls	r0, r0, #8
 80026ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ce:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80026d0:	4a02      	ldr	r2, [pc, #8]	; (80026dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80026d2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80026d4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00
 80026dc:	05fa0000 	.word	0x05fa0000

080026e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_NVIC_SetPriority+0x58>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ea:	f1c3 0407 	rsb	r4, r3, #7
 80026ee:	2c04      	cmp	r4, #4
 80026f0:	bf28      	it	cs
 80026f2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f4:	1d1d      	adds	r5, r3, #4
 80026f6:	2d06      	cmp	r5, #6
 80026f8:	d914      	bls.n	8002724 <HAL_NVIC_SetPriority+0x44>
 80026fa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 35ff 	mov.w	r5, #4294967295
 8002700:	fa05 f404 	lsl.w	r4, r5, r4
 8002704:	ea21 0104 	bic.w	r1, r1, r4
 8002708:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270a:	fa05 f303 	lsl.w	r3, r5, r3
 800270e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002712:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002714:	2800      	cmp	r0, #0
 8002716:	db07      	blt.n	8002728 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	0109      	lsls	r1, r1, #4
 800271a:	b2c9      	uxtb	r1, r1
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_NVIC_SetPriority+0x5c>)
 800271e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002720:	bc30      	pop	{r4, r5}
 8002722:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002724:	2300      	movs	r3, #0
 8002726:	e7e9      	b.n	80026fc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	f000 000f 	and.w	r0, r0, #15
 800272c:	0109      	lsls	r1, r1, #4
 800272e:	b2c9      	uxtb	r1, r1
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_NVIC_SetPriority+0x60>)
 8002732:	5419      	strb	r1, [r3, r0]
 8002734:	e7f4      	b.n	8002720 <HAL_NVIC_SetPriority+0x40>
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00
 800273c:	e000e400 	.word	0xe000e400
 8002740:	e000ed14 	.word	0xe000ed14

08002744 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002744:	2800      	cmp	r0, #0
 8002746:	db07      	blt.n	8002758 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002748:	f000 021f 	and.w	r2, r0, #31
 800274c:	0940      	lsrs	r0, r0, #5
 800274e:	2301      	movs	r3, #1
 8002750:	4093      	lsls	r3, r2
 8002752:	4a02      	ldr	r2, [pc, #8]	; (800275c <HAL_NVIC_EnableIRQ+0x18>)
 8002754:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100

08002760 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002760:	2800      	cmp	r0, #0
 8002762:	db0c      	blt.n	800277e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002764:	f000 021f 	and.w	r2, r0, #31
 8002768:	0940      	lsrs	r0, r0, #5
 800276a:	2301      	movs	r3, #1
 800276c:	4093      	lsls	r3, r2
 800276e:	3020      	adds	r0, #32
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <HAL_NVIC_DisableIRQ+0x20>)
 8002772:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002776:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800277a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800277e:	4770      	bx	lr
 8002780:	e000e100 	.word	0xe000e100

08002784 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002784:	2800      	cmp	r0, #0
 8002786:	d038      	beq.n	80027fa <HAL_CRC_Init+0x76>
{
 8002788:	b510      	push	{r4, lr}
 800278a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800278c:	7f43      	ldrb	r3, [r0, #29]
 800278e:	b31b      	cbz	r3, 80027d8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002794:	7923      	ldrb	r3, [r4, #4]
 8002796:	bb1b      	cbnz	r3, 80027e0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_CRC_Init+0x7c>)
 800279c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	6893      	ldr	r3, [r2, #8]
 80027a2:	f023 0318 	bic.w	r3, r3, #24
 80027a6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80027a8:	7963      	ldrb	r3, [r4, #5]
 80027aa:	bb13      	cbnz	r3, 80027f2 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f04f 32ff 	mov.w	r2, #4294967295
 80027b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	6893      	ldr	r3, [r2, #8]
 80027b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80027bc:	6961      	ldr	r1, [r4, #20]
 80027be:	430b      	orrs	r3, r1
 80027c0:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80027c2:	6822      	ldr	r2, [r4, #0]
 80027c4:	6893      	ldr	r3, [r2, #8]
 80027c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ca:	69a1      	ldr	r1, [r4, #24]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027d0:	2301      	movs	r3, #1
 80027d2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80027d4:	2000      	movs	r0, #0
}
 80027d6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80027d8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80027da:	f7ff f8cf 	bl	800197c <HAL_CRC_MspInit>
 80027de:	e7d7      	b.n	8002790 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80027e0:	68e2      	ldr	r2, [r4, #12]
 80027e2:	68a1      	ldr	r1, [r4, #8]
 80027e4:	4620      	mov	r0, r4
 80027e6:	f000 f80d 	bl	8002804 <HAL_CRCEx_Polynomial_Set>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d0dc      	beq.n	80027a8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	e7f1      	b.n	80027d6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	6922      	ldr	r2, [r4, #16]
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	e7dc      	b.n	80027b4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	04c11db7 	.word	0x04c11db7

08002804 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002804:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002806:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002808:	1e65      	subs	r5, r4, #1
 800280a:	b13c      	cbz	r4, 800281c <HAL_CRCEx_Polynomial_Set+0x18>
 800280c:	f005 031f 	and.w	r3, r5, #31
 8002810:	fa21 f303 	lsr.w	r3, r1, r3
 8002814:	462c      	mov	r4, r5
 8002816:	f013 0f01 	tst.w	r3, #1
 800281a:	d0f5      	beq.n	8002808 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800281c:	2a18      	cmp	r2, #24
 800281e:	d823      	bhi.n	8002868 <HAL_CRCEx_Polynomial_Set+0x64>
 8002820:	e8df f002 	tbb	[pc, r2]
 8002824:	2222220f 	.word	0x2222220f
 8002828:	22222222 	.word	0x22222222
 800282c:	2222221e 	.word	0x2222221e
 8002830:	22222222 	.word	0x22222222
 8002834:	2222221a 	.word	0x2222221a
 8002838:	22222222 	.word	0x22222222
 800283c:	0d          	.byte	0x0d
 800283d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800283e:	2d06      	cmp	r5, #6
 8002840:	d814      	bhi.n	800286c <HAL_CRCEx_Polynomial_Set+0x68>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002846:	6801      	ldr	r1, [r0, #0]
 8002848:	688b      	ldr	r3, [r1, #8]
 800284a:	f023 0318 	bic.w	r3, r3, #24
 800284e:	431a      	orrs	r2, r3
 8002850:	608a      	str	r2, [r1, #8]
 8002852:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 8002854:	bc30      	pop	{r4, r5}
 8002856:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 8002858:	2d07      	cmp	r5, #7
 800285a:	d9f2      	bls.n	8002842 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800285c:	2001      	movs	r0, #1
 800285e:	e7f9      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002860:	2d0f      	cmp	r5, #15
 8002862:	d9ee      	bls.n	8002842 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8002864:	2001      	movs	r0, #1
 8002866:	e7f5      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0x50>
      status =  HAL_ERROR;
 8002868:	2001      	movs	r0, #1
 800286a:	e7f3      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 800286c:	2001      	movs	r0, #1
 800286e:	e7f1      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0x50>

08002870 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002870:	2800      	cmp	r0, #0
 8002872:	d044      	beq.n	80028fe <HAL_DCMI_Init+0x8e>
{     
 8002874:	b510      	push	{r4, lr}
 8002876:	4604      	mov	r4, r0
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002878:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02e      	beq.n	80028de <HAL_DCMI_Init+0x6e>
    HAL_DCMI_MspInit(hdcmi);
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8002880:	2302      	movs	r3, #2
 8002882:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002886:	6822      	ldr	r2, [r4, #0]
 8002888:	6811      	ldr	r1, [r2, #0]
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_DCMI_Init+0x94>)
 800288c:	400b      	ands	r3, r1
 800288e:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	6863      	ldr	r3, [r4, #4]
 8002896:	6960      	ldr	r0, [r4, #20]
 8002898:	4303      	orrs	r3, r0
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800289a:	68e0      	ldr	r0, [r4, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800289c:	4303      	orrs	r3, r0
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800289e:	6920      	ldr	r0, [r4, #16]
 80028a0:	4303      	orrs	r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80028a2:	68a0      	ldr	r0, [r4, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80028a4:	4303      	orrs	r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80028a6:	69a0      	ldr	r0, [r4, #24]
 80028a8:	4303      	orrs	r3, r0
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80028aa:	6a20      	ldr	r0, [r4, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80028ac:	4303      	orrs	r3, r0
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80028ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80028b0:	4303      	orrs	r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80028b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80028b4:	4303      	orrs	r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80028b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80028b8:	4303      	orrs	r3, r0
                                     hdcmi->Init.LineSelectStart);
 80028ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80028bc:	4303      	orrs	r3, r0
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80028be:	430b      	orrs	r3, r1
 80028c0:	6013      	str	r3, [r2, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80028c2:	6863      	ldr	r3, [r4, #4]
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d00d      	beq.n	80028e4 <HAL_DCMI_Init+0x74>
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	68d3      	ldr	r3, [r2, #12]
 80028cc:	f043 031e 	orr.w	r3, r3, #30
 80028d0:	60d3      	str	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80028d2:	2000      	movs	r0, #0
 80028d4:	64e0      	str	r0, [r4, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
}
 80028dc:	bd10      	pop	{r4, pc}
    HAL_DCMI_MspInit(hdcmi);
 80028de:	f7ff f863 	bl	80019a8 <HAL_DCMI_MspInit>
 80028e2:	e7cd      	b.n	8002880 <HAL_DCMI_Init+0x10>
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80028e4:	7f23      	ldrb	r3, [r4, #28]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80028e6:	7f62      	ldrb	r2, [r4, #29]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80028e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80028ec:	7fa2      	ldrb	r2, [r4, #30]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80028ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80028f2:	7fe1      	ldrb	r1, [r4, #31]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80028f4:	6822      	ldr	r2, [r4, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80028f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	e7e4      	b.n	80028c8 <HAL_DCMI_Init+0x58>
     return HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	ffe0f007 	.word	0xffe0f007

08002908 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002908:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800290a:	6805      	ldr	r5, [r0, #0]
 800290c:	682c      	ldr	r4, [r5, #0]
 800290e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002912:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002914:	6804      	ldr	r4, [r0, #0]
 8002916:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002918:	6883      	ldr	r3, [r0, #8]
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d005      	beq.n	800292a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800291e:	6803      	ldr	r3, [r0, #0]
 8002920:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002922:	6803      	ldr	r3, [r0, #0]
 8002924:	60da      	str	r2, [r3, #12]
  }
}
 8002926:	bc30      	pop	{r4, r5}
 8002928:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800292a:	6803      	ldr	r3, [r0, #0]
 800292c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800292e:	6803      	ldr	r3, [r0, #0]
 8002930:	60d9      	str	r1, [r3, #12]
 8002932:	e7f8      	b.n	8002926 <DMA_SetConfig+0x1e>

08002934 <HAL_DMA_Start_IT>:
{
 8002934:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002936:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002938:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800293c:	2c01      	cmp	r4, #1
 800293e:	d031      	beq.n	80029a4 <HAL_DMA_Start_IT+0x70>
 8002940:	2401      	movs	r4, #1
 8002942:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002946:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800294a:	b2e4      	uxtb	r4, r4
 800294c:	2c01      	cmp	r4, #1
 800294e:	d004      	beq.n	800295a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002950:	2300      	movs	r3, #0
 8002952:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002956:	2002      	movs	r0, #2
}
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800295c:	2002      	movs	r0, #2
 800295e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002962:	2000      	movs	r0, #0
 8002964:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff ffce 	bl	8002908 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800296c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800296e:	233f      	movs	r3, #63	; 0x3f
 8002970:	4093      	lsls	r3, r2
 8002972:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	6813      	ldr	r3, [r2, #0]
 8002978:	f043 0316 	orr.w	r3, r3, #22
 800297c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	6953      	ldr	r3, [r2, #20]
 8002982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002986:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002988:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800298a:	b123      	cbz	r3, 8002996 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800298c:	6822      	ldr	r2, [r4, #0]
 800298e:	6813      	ldr	r3, [r2, #0]
 8002990:	f043 0308 	orr.w	r3, r3, #8
 8002994:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002996:	6822      	ldr	r2, [r4, #0]
 8002998:	6813      	ldr	r3, [r2, #0]
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	2000      	movs	r0, #0
 80029a2:	e7d9      	b.n	8002958 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80029a4:	2002      	movs	r0, #2
 80029a6:	e7d7      	b.n	8002958 <HAL_DMA_Start_IT+0x24>

080029a8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80029a8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80029aa:	4770      	bx	lr

080029ac <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80029ac:	b338      	cbz	r0, 80029fe <HAL_DMA2D_Init+0x52>
{
 80029ae:	b510      	push	{r4, lr}
 80029b0:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029b6:	b1eb      	cbz	r3, 80029f4 <HAL_DMA2D_Init+0x48>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029b8:	2302      	movs	r3, #2
 80029ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80029be:	6822      	ldr	r2, [r4, #0]
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029c6:	6861      	ldr	r1, [r4, #4]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80029d0:	f023 0307 	bic.w	r3, r3, #7
 80029d4:	68a1      	ldr	r1, [r4, #8]
 80029d6:	430b      	orrs	r3, r1
 80029d8:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_DMA2D_Init+0x58>)
 80029e0:	400b      	ands	r3, r1
 80029e2:	68e1      	ldr	r1, [r4, #12]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029e8:	2000      	movs	r0, #0
 80029ea:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80029f2:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80029f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80029f8:	f009 fcd0 	bl	800c39c <HAL_DMA2D_MspInit>
 80029fc:	e7dc      	b.n	80029b8 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	ffffc000 	.word	0xffffc000

08002a08 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002a08:	4770      	bx	lr

08002a0a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_DMA2D_IRQHandler>:
{
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a14:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a16:	f015 0f01 	tst.w	r5, #1
 8002a1a:	d016      	beq.n	8002a4a <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a1c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002a20:	d013      	beq.n	8002a4a <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a28:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a2a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8002a44:	6943      	ldr	r3, [r0, #20]
 8002a46:	b103      	cbz	r3, 8002a4a <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8002a48:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a4a:	f015 0f20 	tst.w	r5, #32
 8002a4e:	d018      	beq.n	8002a82 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a50:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8002a54:	d015      	beq.n	8002a82 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	6813      	ldr	r3, [r2, #0]
 8002a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a5e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	2220      	movs	r2, #32
 8002a64:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a6e:	2304      	movs	r3, #4
 8002a70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002a74:	2300      	movs	r3, #0
 8002a76:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8002a7a:	6963      	ldr	r3, [r4, #20]
 8002a7c:	b10b      	cbz	r3, 8002a82 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a82:	f015 0f08 	tst.w	r5, #8
 8002a86:	d018      	beq.n	8002aba <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a88:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8002a8c:	d015      	beq.n	8002aba <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a8e:	6822      	ldr	r2, [r4, #0]
 8002a90:	6813      	ldr	r3, [r2, #0]
 8002a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a96:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002aac:	2300      	movs	r3, #0
 8002aae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8002ab2:	6963      	ldr	r3, [r4, #20]
 8002ab4:	b10b      	cbz	r3, 8002aba <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002aba:	f015 0f04 	tst.w	r5, #4
 8002abe:	d002      	beq.n	8002ac6 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ac0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002ac4:	d120      	bne.n	8002b08 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002ac6:	f015 0f02 	tst.w	r5, #2
 8002aca:	d016      	beq.n	8002afa <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002acc:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002ad0:	d013      	beq.n	8002afa <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002ad2:	6822      	ldr	r2, [r4, #0]
 8002ad4:	6813      	ldr	r3, [r2, #0]
 8002ad6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ada:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ae4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002aec:	2300      	movs	r3, #0
 8002aee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8002af2:	6923      	ldr	r3, [r4, #16]
 8002af4:	b10b      	cbz	r3, 8002afa <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8002af6:	4620      	mov	r0, r4
 8002af8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002afa:	f015 0f10 	tst.w	r5, #16
 8002afe:	d002      	beq.n	8002b06 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002b00:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8002b04:	d10c      	bne.n	8002b20 <HAL_DMA2D_IRQHandler+0x114>
}
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b08:	6822      	ldr	r2, [r4, #0]
 8002b0a:	6813      	ldr	r3, [r2, #0]
 8002b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b10:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	2204      	movs	r2, #4
 8002b16:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff ff75 	bl	8002a08 <HAL_DMA2D_LineEventCallback>
 8002b1e:	e7d2      	b.n	8002ac6 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002b20:	6822      	ldr	r2, [r4, #0]
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b28:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b32:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7ff ff62 	bl	8002a0a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8002b46:	e7de      	b.n	8002b06 <HAL_DMA2D_IRQHandler+0xfa>

08002b48 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b48:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d059      	beq.n	8002c04 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8002b50:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8002b52:	2301      	movs	r3, #1
 8002b54:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002b5e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	1c8b      	adds	r3, r1, #2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	58c3      	ldr	r3, [r0, r3]
 8002b6a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b6e:	3a09      	subs	r2, #9
 8002b70:	2a01      	cmp	r2, #1
 8002b72:	d91e      	bls.n	8002bb2 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002b74:	1c8a      	adds	r2, r1, #2
 8002b76:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002b7a:	6852      	ldr	r2, [r2, #4]
 8002b7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b80:	bb41      	cbnz	r1, 8002bd4 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b82:	6804      	ldr	r4, [r0, #0]
 8002b84:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002b88:	402a      	ands	r2, r5
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b8e:	6802      	ldr	r2, [r0, #0]
 8002b90:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002b94:	699c      	ldr	r4, [r3, #24]
 8002b96:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	3b09      	subs	r3, #9
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d910      	bls.n	8002bc2 <HAL_DMA2D_ConfigLayer+0x7a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002bac:	4618      	mov	r0, r3
}
 8002bae:	bc30      	pop	{r4, r5}
 8002bb0:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002bb2:	1c8a      	adds	r2, r1, #2
 8002bb4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002bb8:	6852      	ldr	r2, [r2, #4]
 8002bba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	e7de      	b.n	8002b80 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002bc2:	3102      	adds	r1, #2
 8002bc4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002bc8:	684b      	ldr	r3, [r1, #4]
 8002bca:	6802      	ldr	r2, [r0, #0]
 8002bcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bd0:	6293      	str	r3, [r2, #40]	; 0x28
 8002bd2:	e7e5      	b.n	8002ba0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002bd4:	6804      	ldr	r4, [r0, #0]
 8002bd6:	69e5      	ldr	r5, [r4, #28]
 8002bd8:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002bda:	402a      	ands	r2, r5
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002be0:	6802      	ldr	r2, [r0, #0]
 8002be2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002be6:	699c      	ldr	r4, [r3, #24]
 8002be8:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	3b09      	subs	r3, #9
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d8d6      	bhi.n	8002ba0 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002bf2:	3102      	adds	r1, #2
 8002bf4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002bf8:	684b      	ldr	r3, [r1, #4]
 8002bfa:	6802      	ldr	r2, [r0, #0]
 8002bfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	e7cd      	b.n	8002ba0 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8002c04:	2002      	movs	r0, #2
}
 8002c06:	4770      	bx	lr
 8002c08:	00fcfff0 	.word	0x00fcfff0

08002c0c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b0f      	cmp	r3, #15
 8002c10:	f200 80e2 	bhi.w	8002dd8 <HAL_GPIO_Init+0x1cc>
{
 8002c14:	b4f0      	push	{r4, r5, r6, r7}
 8002c16:	b082      	sub	sp, #8
 8002c18:	e039      	b.n	8002c8e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c1a:	2209      	movs	r2, #9
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	40b2      	lsls	r2, r6
 8002c22:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c24:	3402      	adds	r4, #2
 8002c26:	4e6d      	ldr	r6, [pc, #436]	; (8002ddc <HAL_GPIO_Init+0x1d0>)
 8002c28:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c2c:	4a6c      	ldr	r2, [pc, #432]	; (8002de0 <HAL_GPIO_Init+0x1d4>)
 8002c2e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	43ea      	mvns	r2, r5
 8002c32:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c36:	684f      	ldr	r7, [r1, #4]
 8002c38:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002c3c:	d001      	beq.n	8002c42 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002c3e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002c42:	4c67      	ldr	r4, [pc, #412]	; (8002de0 <HAL_GPIO_Init+0x1d4>)
 8002c44:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002c46:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c4c:	684f      	ldr	r7, [r1, #4]
 8002c4e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002c52:	d001      	beq.n	8002c58 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002c54:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002c58:	4c61      	ldr	r4, [pc, #388]	; (8002de0 <HAL_GPIO_Init+0x1d4>)
 8002c5a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c62:	684f      	ldr	r7, [r1, #4]
 8002c64:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002c68:	d001      	beq.n	8002c6e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002c6a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002c6e:	4c5c      	ldr	r4, [pc, #368]	; (8002de0 <HAL_GPIO_Init+0x1d4>)
 8002c70:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002c72:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c76:	684e      	ldr	r6, [r1, #4]
 8002c78:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002c7c:	d001      	beq.n	8002c82 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002c7e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002c82:	4c57      	ldr	r4, [pc, #348]	; (8002de0 <HAL_GPIO_Init+0x1d4>)
 8002c84:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c86:	3301      	adds	r3, #1
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	f200 80a2 	bhi.w	8002dd2 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c92:	680c      	ldr	r4, [r1, #0]
 8002c94:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002c98:	42aa      	cmp	r2, r5
 8002c9a:	d1f4      	bne.n	8002c86 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c9c:	684c      	ldr	r4, [r1, #4]
 8002c9e:	2c12      	cmp	r4, #18
 8002ca0:	bf18      	it	ne
 8002ca2:	2c02      	cmpne	r4, #2
 8002ca4:	d110      	bne.n	8002cc8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8002ca6:	08de      	lsrs	r6, r3, #3
 8002ca8:	3608      	adds	r6, #8
 8002caa:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cae:	f003 0407 	and.w	r4, r3, #7
 8002cb2:	00a7      	lsls	r7, r4, #2
 8002cb4:	240f      	movs	r4, #15
 8002cb6:	40bc      	lsls	r4, r7
 8002cb8:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cbc:	690c      	ldr	r4, [r1, #16]
 8002cbe:	40bc      	lsls	r4, r7
 8002cc0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8002cc4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002cc8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cca:	005f      	lsls	r7, r3, #1
 8002ccc:	2603      	movs	r6, #3
 8002cce:	40be      	lsls	r6, r7
 8002cd0:	43f6      	mvns	r6, r6
 8002cd2:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cd6:	684c      	ldr	r4, [r1, #4]
 8002cd8:	f004 0403 	and.w	r4, r4, #3
 8002cdc:	40bc      	lsls	r4, r7
 8002cde:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002ce2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce4:	684c      	ldr	r4, [r1, #4]
 8002ce6:	f104 3cff 	add.w	ip, r4, #4294967295
 8002cea:	2c11      	cmp	r4, #17
 8002cec:	bf18      	it	ne
 8002cee:	f1bc 0f01 	cmpne.w	ip, #1
 8002cf2:	d901      	bls.n	8002cf8 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf4:	2c12      	cmp	r4, #18
 8002cf6:	d111      	bne.n	8002d1c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8002cf8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cfa:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cfe:	68cc      	ldr	r4, [r1, #12]
 8002d00:	40bc      	lsls	r4, r7
 8002d02:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002d06:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d08:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0a:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d0e:	684c      	ldr	r4, [r1, #4]
 8002d10:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002d14:	409a      	lsls	r2, r3
 8002d16:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8002d1a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002d1c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d1e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d20:	688a      	ldr	r2, [r1, #8]
 8002d22:	40ba      	lsls	r2, r7
 8002d24:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002d26:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d28:	684a      	ldr	r2, [r1, #4]
 8002d2a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002d2e:	d0aa      	beq.n	8002c86 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d30:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <HAL_GPIO_Init+0x1d8>)
 8002d32:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002d34:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002d38:	6454      	str	r4, [r2, #68]	; 0x44
 8002d3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d3c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d40:	9201      	str	r2, [sp, #4]
 8002d42:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002d44:	089c      	lsrs	r4, r3, #2
 8002d46:	1ca6      	adds	r6, r4, #2
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <HAL_GPIO_Init+0x1d0>)
 8002d4a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	0096      	lsls	r6, r2, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	40b2      	lsls	r2, r6
 8002d58:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_GPIO_Init+0x1dc>)
 8002d5e:	4290      	cmp	r0, r2
 8002d60:	f43f af5d 	beq.w	8002c1e <HAL_GPIO_Init+0x12>
 8002d64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d68:	4290      	cmp	r0, r2
 8002d6a:	d022      	beq.n	8002db2 <HAL_GPIO_Init+0x1a6>
 8002d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d70:	4290      	cmp	r0, r2
 8002d72:	d020      	beq.n	8002db6 <HAL_GPIO_Init+0x1aa>
 8002d74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d78:	4290      	cmp	r0, r2
 8002d7a:	d01e      	beq.n	8002dba <HAL_GPIO_Init+0x1ae>
 8002d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d80:	4290      	cmp	r0, r2
 8002d82:	d01c      	beq.n	8002dbe <HAL_GPIO_Init+0x1b2>
 8002d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d88:	4290      	cmp	r0, r2
 8002d8a:	d01a      	beq.n	8002dc2 <HAL_GPIO_Init+0x1b6>
 8002d8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d90:	4290      	cmp	r0, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_GPIO_Init+0x1ba>
 8002d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d98:	4290      	cmp	r0, r2
 8002d9a:	d016      	beq.n	8002dca <HAL_GPIO_Init+0x1be>
 8002d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da0:	4290      	cmp	r0, r2
 8002da2:	d014      	beq.n	8002dce <HAL_GPIO_Init+0x1c2>
 8002da4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da8:	4290      	cmp	r0, r2
 8002daa:	f43f af36 	beq.w	8002c1a <HAL_GPIO_Init+0xe>
 8002dae:	220a      	movs	r2, #10
 8002db0:	e736      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002db2:	2201      	movs	r2, #1
 8002db4:	e734      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002db6:	2202      	movs	r2, #2
 8002db8:	e732      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002dba:	2203      	movs	r2, #3
 8002dbc:	e730      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	e72e      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002dc2:	2205      	movs	r2, #5
 8002dc4:	e72c      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002dc6:	2206      	movs	r2, #6
 8002dc8:	e72a      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002dca:	2207      	movs	r2, #7
 8002dcc:	e728      	b.n	8002c20 <HAL_GPIO_Init+0x14>
 8002dce:	2208      	movs	r2, #8
 8002dd0:	e726      	b.n	8002c20 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bcf0      	pop	{r4, r5, r6, r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40013c00 	.word	0x40013c00
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000

08002dec <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	f200 8093 	bhi.w	8002f1a <HAL_GPIO_DeInit+0x12e>
{
 8002df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df6:	e029      	b.n	8002e4c <HAL_GPIO_DeInit+0x60>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002df8:	2709      	movs	r7, #9
 8002dfa:	e000      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002dfc:	2700      	movs	r7, #0
 8002dfe:	fa07 f505 	lsl.w	r5, r7, r5
 8002e02:	42b5      	cmp	r5, r6
 8002e04:	d070      	beq.n	8002ee8 <HAL_GPIO_DeInit+0xfc>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e06:	6805      	ldr	r5, [r0, #0]
 8002e08:	005e      	lsls	r6, r3, #1
 8002e0a:	2403      	movs	r4, #3
 8002e0c:	40b4      	lsls	r4, r6
 8002e0e:	43e4      	mvns	r4, r4
 8002e10:	4025      	ands	r5, r4
 8002e12:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e14:	08dd      	lsrs	r5, r3, #3
 8002e16:	3508      	adds	r5, #8
 8002e18:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8002e1c:	f003 0707 	and.w	r7, r3, #7
 8002e20:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8002e24:	270f      	movs	r7, #15
 8002e26:	fa07 f70c 	lsl.w	r7, r7, ip
 8002e2a:	ea26 0607 	bic.w	r6, r6, r7
 8002e2e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e32:	6885      	ldr	r5, [r0, #8]
 8002e34:	4025      	ands	r5, r4
 8002e36:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e38:	6845      	ldr	r5, [r0, #4]
 8002e3a:	ea25 0202 	bic.w	r2, r5, r2
 8002e3e:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e40:	68c2      	ldr	r2, [r0, #12]
 8002e42:	4014      	ands	r4, r2
 8002e44:	60c4      	str	r4, [r0, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e46:	3301      	adds	r3, #1
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d865      	bhi.n	8002f18 <HAL_GPIO_DeInit+0x12c>
    ioposition = ((uint32_t)0x01) << position;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8002e50:	ea02 0401 	and.w	r4, r2, r1
    if(iocurrent == ioposition)
 8002e54:	42a2      	cmp	r2, r4
 8002e56:	d1f6      	bne.n	8002e46 <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2];
 8002e58:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002e5c:	f10c 0602 	add.w	r6, ip, #2
 8002e60:	4d2e      	ldr	r5, [pc, #184]	; (8002f1c <HAL_GPIO_DeInit+0x130>)
 8002e62:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e66:	f003 0503 	and.w	r5, r3, #3
 8002e6a:	00ad      	lsls	r5, r5, #2
 8002e6c:	270f      	movs	r7, #15
 8002e6e:	fa07 fe05 	lsl.w	lr, r7, r5
 8002e72:	ea0e 0606 	and.w	r6, lr, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002e76:	4f2a      	ldr	r7, [pc, #168]	; (8002f20 <HAL_GPIO_DeInit+0x134>)
 8002e78:	42b8      	cmp	r0, r7
 8002e7a:	d0bf      	beq.n	8002dfc <HAL_GPIO_DeInit+0x10>
 8002e7c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002e80:	42b8      	cmp	r0, r7
 8002e82:	d021      	beq.n	8002ec8 <HAL_GPIO_DeInit+0xdc>
 8002e84:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002e88:	42b8      	cmp	r0, r7
 8002e8a:	d01f      	beq.n	8002ecc <HAL_GPIO_DeInit+0xe0>
 8002e8c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002e90:	42b8      	cmp	r0, r7
 8002e92:	d01d      	beq.n	8002ed0 <HAL_GPIO_DeInit+0xe4>
 8002e94:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002e98:	42b8      	cmp	r0, r7
 8002e9a:	d01b      	beq.n	8002ed4 <HAL_GPIO_DeInit+0xe8>
 8002e9c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002ea0:	42b8      	cmp	r0, r7
 8002ea2:	d019      	beq.n	8002ed8 <HAL_GPIO_DeInit+0xec>
 8002ea4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002ea8:	42b8      	cmp	r0, r7
 8002eaa:	d017      	beq.n	8002edc <HAL_GPIO_DeInit+0xf0>
 8002eac:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002eb0:	42b8      	cmp	r0, r7
 8002eb2:	d015      	beq.n	8002ee0 <HAL_GPIO_DeInit+0xf4>
 8002eb4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002eb8:	42b8      	cmp	r0, r7
 8002eba:	d013      	beq.n	8002ee4 <HAL_GPIO_DeInit+0xf8>
 8002ebc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002ec0:	42b8      	cmp	r0, r7
 8002ec2:	d099      	beq.n	8002df8 <HAL_GPIO_DeInit+0xc>
 8002ec4:	270a      	movs	r7, #10
 8002ec6:	e79a      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002ec8:	2701      	movs	r7, #1
 8002eca:	e798      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002ecc:	2702      	movs	r7, #2
 8002ece:	e796      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002ed0:	2703      	movs	r7, #3
 8002ed2:	e794      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002ed4:	2704      	movs	r7, #4
 8002ed6:	e792      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002ed8:	2705      	movs	r7, #5
 8002eda:	e790      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002edc:	2706      	movs	r7, #6
 8002ede:	e78e      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002ee0:	2707      	movs	r7, #7
 8002ee2:	e78c      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
 8002ee4:	2708      	movs	r7, #8
 8002ee6:	e78a      	b.n	8002dfe <HAL_GPIO_DeInit+0x12>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002ee8:	4e0c      	ldr	r6, [pc, #48]	; (8002f1c <HAL_GPIO_DeInit+0x130>)
 8002eea:	f10c 0502 	add.w	r5, ip, #2
 8002eee:	f856 7025 	ldr.w	r7, [r6, r5, lsl #2]
 8002ef2:	ea27 070e 	bic.w	r7, r7, lr
 8002ef6:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002efa:	4d0a      	ldr	r5, [pc, #40]	; (8002f24 <HAL_GPIO_DeInit+0x138>)
 8002efc:	682e      	ldr	r6, [r5, #0]
 8002efe:	43e4      	mvns	r4, r4
 8002f00:	4026      	ands	r6, r4
 8002f02:	602e      	str	r6, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f04:	686e      	ldr	r6, [r5, #4]
 8002f06:	4026      	ands	r6, r4
 8002f08:	606e      	str	r6, [r5, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f0a:	68ae      	ldr	r6, [r5, #8]
 8002f0c:	4026      	ands	r6, r4
 8002f0e:	60ae      	str	r6, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f10:	68ee      	ldr	r6, [r5, #12]
 8002f12:	4034      	ands	r4, r6
 8002f14:	60ec      	str	r4, [r5, #12]
 8002f16:	e776      	b.n	8002e06 <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8002f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1a:	4770      	bx	lr
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40013c00 	.word	0x40013c00

08002f28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f28:	6903      	ldr	r3, [r0, #16]
 8002f2a:	4219      	tst	r1, r3
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f2e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002f30:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002f32:	2001      	movs	r0, #1
 8002f34:	4770      	bx	lr

08002f36 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f36:	b912      	cbnz	r2, 8002f3e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f38:	0409      	lsls	r1, r1, #16
 8002f3a:	6181      	str	r1, [r0, #24]
  }
}
 8002f3c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	6181      	str	r1, [r0, #24]
 8002f40:	4770      	bx	lr
	...

08002f44 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f46:	6806      	ldr	r6, [r0, #0]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002f48:	6a34      	ldr	r4, [r6, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002f4a:	f004 070f 	and.w	r7, r4, #15
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f4e:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f52:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d12e      	bne.n	8002fb8 <HCD_RXQLVL_IRQHandler+0x74>
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f5a:	b36c      	cbz	r4, 8002fb8 <HCD_RXQLVL_IRQHandler+0x74>
 8002f5c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8002f60:	00d3      	lsls	r3, r2, #3
 8002f62:	4403      	add	r3, r0
 8002f64:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f66:	b339      	cbz	r1, 8002fb8 <HCD_RXQLVL_IRQHandler+0x74>
 8002f68:	4605      	mov	r5, r0
      {
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	4630      	mov	r0, r6
 8002f6e:	f005 f9df 	bl	8008330 <USB_ReadPacket>

        /*manage multiple Xfer */
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f72:	00ba      	lsls	r2, r7, #2
 8002f74:	443a      	add	r2, r7
 8002f76:	00d3      	lsls	r3, r2, #3
 8002f78:	442b      	add	r3, r5
 8002f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7c:	4422      	add	r2, r4
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f82:	4422      	add	r2, r4
 8002f84:	64da      	str	r2, [r3, #76]	; 0x4c

        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f86:	eb06 1347 	add.w	r3, r6, r7, lsl #5
 8002f8a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <HCD_RXQLVL_IRQHandler+0x78>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	b18a      	cbz	r2, 8002fb8 <HCD_RXQLVL_IRQHandler+0x74>
        {
          /* re-activate the channel when more packets are expected */
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f94:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f98:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fa0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fa4:	00bb      	lsls	r3, r7, #2
 8002fa6:	19d9      	adds	r1, r3, r7
 8002fa8:	00ca      	lsls	r2, r1, #3
 8002faa:	442a      	add	r2, r5
 8002fac:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002fb0:	f083 0301 	eor.w	r3, r3, #1
 8002fb4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8002fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	1ff80000 	.word	0x1ff80000

08002fc0 <HAL_HCD_HC_Init>:
{
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8002fc8:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8002fcc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8002fd0:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
 8002fd4:	2c01      	cmp	r4, #1
 8002fd6:	d041      	beq.n	800305c <HAL_HCD_HC_Init+0x9c>
 8002fd8:	2401      	movs	r4, #1
 8002fda:	f880 42b8 	strb.w	r4, [r0, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002fde:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8002fe2:	448c      	add	ip, r1
 8002fe4:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8002fe8:	4404      	add	r4, r0
 8002fea:	f04f 0c00 	mov.w	ip, #0
 8002fee:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ff2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8002ff6:	f8a4 7040 	strh.w	r7, [r4, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ffa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ffe:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003002:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8003006:	f884 c03a 	strb.w	ip, [r4, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 800300a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800300e:	d11b      	bne.n	8003048 <HAL_HCD_HC_Init+0x88>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003010:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8003014:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8003018:	4404      	add	r4, r0
 800301a:	f04f 0c00 	mov.w	ip, #0
 800301e:	f884 c03b 	strb.w	ip, [r4, #59]	; 0x3b
 8003022:	4604      	mov	r4, r0
  hhcd->hc[ch_num].speed = speed;
 8003024:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8003028:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800302c:	4420      	add	r0, r4
 800302e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 8003032:	9702      	str	r7, [sp, #8]
 8003034:	9601      	str	r6, [sp, #4]
 8003036:	9500      	str	r5, [sp, #0]
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f005 fa7d 	bl	8008538 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 800303e:	2300      	movs	r3, #0
 8003040:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
}
 8003044:	b005      	add	sp, #20
 8003046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003048:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800304c:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8003050:	4404      	add	r4, r0
 8003052:	f04f 0c01 	mov.w	ip, #1
 8003056:	f884 c03b 	strb.w	ip, [r4, #59]	; 0x3b
 800305a:	e7e2      	b.n	8003022 <HAL_HCD_HC_Init+0x62>
  __HAL_LOCK(hhcd);
 800305c:	2002      	movs	r0, #2
 800305e:	e7f1      	b.n	8003044 <HAL_HCD_HC_Init+0x84>

08003060 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8003060:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8003064:	2b01      	cmp	r3, #1
 8003066:	d00b      	beq.n	8003080 <HAL_HCD_HC_Halt+0x20>
{
 8003068:	b510      	push	{r4, lr}
 800306a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800306c:	2301      	movs	r3, #1
 800306e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003072:	6800      	ldr	r0, [r0, #0]
 8003074:	f005 fae9 	bl	800864a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003078:	2000      	movs	r0, #0
 800307a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800307e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003080:	2002      	movs	r0, #2
}
 8003082:	4770      	bx	lr

08003084 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8003084:	2800      	cmp	r0, #0
 8003086:	d03d      	beq.n	8003104 <HAL_HCD_Init+0x80>
{
 8003088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308a:	b08b      	sub	sp, #44	; 0x2c
 800308c:	4606      	mov	r6, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800308e:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
 8003092:	b393      	cbz	r3, 80030fa <HAL_HCD_Init+0x76>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8003094:	2303      	movs	r3, #3
 8003096:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 800309a:	6830      	ldr	r0, [r6, #0]
 800309c:	f005 f8f0 	bl	8008280 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80030a0:	4634      	mov	r4, r6
 80030a2:	f854 cb10 	ldr.w	ip, [r4], #16
 80030a6:	466d      	mov	r5, sp
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b8:	1d37      	adds	r7, r6, #4
 80030ba:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80030be:	4660      	mov	r0, ip
 80030c0:	f005 f89a 	bl	80081f8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80030c4:	2101      	movs	r1, #1
 80030c6:	6830      	ldr	r0, [r6, #0]
 80030c8:	f005 f8e0 	bl	800828c <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80030cc:	4634      	mov	r4, r6
 80030ce:	f854 cb10 	ldr.w	ip, [r4], #16
 80030d2:	466d      	mov	r5, sp
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80030e8:	4660      	mov	r0, ip
 80030ea:	f005 f99f 	bl	800842c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  return HAL_OK;
 80030f4:	2000      	movs	r0, #0
}
 80030f6:	b00b      	add	sp, #44	; 0x2c
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->Lock = HAL_UNLOCKED;
 80030fa:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80030fe:	f009 fea1 	bl	800ce44 <HAL_HCD_MspInit>
 8003102:	e7c7      	b.n	8003094 <HAL_HCD_Init+0x10>
    return HAL_ERROR;
 8003104:	2001      	movs	r0, #1
}
 8003106:	4770      	bx	lr

08003108 <HAL_HCD_HC_SubmitRequest>:
{
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800310e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003112:	008d      	lsls	r5, r1, #2
 8003114:	440d      	add	r5, r1
 8003116:	00ec      	lsls	r4, r5, #3
 8003118:	4404      	add	r4, r0
 800311a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800311e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  if (token == 0U)
 8003122:	b96f      	cbnz	r7, 8003140 <HAL_HCD_HC_SubmitRequest+0x38>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003124:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8003128:	00ec      	lsls	r4, r5, #3
 800312a:	4404      	add	r4, r0
 800312c:	2503      	movs	r5, #3
 800312e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  switch (ep_type)
 8003132:	2b03      	cmp	r3, #3
 8003134:	f200 8095 	bhi.w	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
 8003138:	e8df f003 	tbb	[pc, r3]
 800313c:	5d2e8c0a 	.word	0x5d2e8c0a
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003140:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8003144:	00ec      	lsls	r4, r5, #3
 8003146:	4404      	add	r4, r0
 8003148:	2502      	movs	r5, #2
 800314a:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
 800314e:	e7f0      	b.n	8003132 <HAL_HCD_HC_SubmitRequest+0x2a>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003150:	2f01      	cmp	r7, #1
 8003152:	bf08      	it	eq
 8003154:	2a00      	cmpeq	r2, #0
 8003156:	f040 8084 	bne.w	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (length == 0U)
 800315a:	b936      	cbnz	r6, 800316a <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 800315c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003160:	00d3      	lsls	r3, r2, #3
 8003162:	4403      	add	r3, r0
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800316a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800316e:	00d3      	lsls	r3, r2, #3
 8003170:	4403      	add	r3, r0
 8003172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003176:	b93b      	cbnz	r3, 8003188 <HAL_HCD_HC_SubmitRequest+0x80>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003178:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800317c:	00d3      	lsls	r3, r2, #3
 800317e:	4403      	add	r3, r0
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003186:	e06c      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003188:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800318c:	00d3      	lsls	r3, r2, #3
 800318e:	4403      	add	r3, r0
 8003190:	2202      	movs	r2, #2
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003196:	e064      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
      if (direction == 0U)
 8003198:	b9b2      	cbnz	r2, 80031c8 <HAL_HCD_HC_SubmitRequest+0xc0>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800319a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800319e:	00d3      	lsls	r3, r2, #3
 80031a0:	4403      	add	r3, r0
 80031a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031a6:	b93b      	cbnz	r3, 80031b8 <HAL_HCD_HC_SubmitRequest+0xb0>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80031ac:	00d3      	lsls	r3, r2, #3
 80031ae:	4403      	add	r3, r0
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b6:	e054      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80031bc:	00d3      	lsls	r3, r2, #3
 80031be:	4403      	add	r3, r0
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c6:	e04c      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80031cc:	00d3      	lsls	r3, r2, #3
 80031ce:	4403      	add	r3, r0
 80031d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031d4:	b93b      	cbnz	r3, 80031e6 <HAL_HCD_HC_SubmitRequest+0xde>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031d6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80031da:	00d3      	lsls	r3, r2, #3
 80031dc:	4403      	add	r3, r0
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e4:	e03d      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031e6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80031ea:	00d3      	lsls	r3, r2, #3
 80031ec:	4403      	add	r3, r0
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f4:	e035      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
      if (direction == 0U)
 80031f6:	b9b2      	cbnz	r2, 8003226 <HAL_HCD_HC_SubmitRequest+0x11e>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031f8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80031fc:	00d3      	lsls	r3, r2, #3
 80031fe:	4403      	add	r3, r0
 8003200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003204:	b93b      	cbnz	r3, 8003216 <HAL_HCD_HC_SubmitRequest+0x10e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003206:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800320a:	00d3      	lsls	r3, r2, #3
 800320c:	4403      	add	r3, r0
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003214:	e025      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003216:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800321a:	00d3      	lsls	r3, r2, #3
 800321c:	4403      	add	r3, r0
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003224:	e01d      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003226:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800322a:	00d3      	lsls	r3, r2, #3
 800322c:	4403      	add	r3, r0
 800322e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003232:	b93b      	cbnz	r3, 8003244 <HAL_HCD_HC_SubmitRequest+0x13c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003234:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003238:	00d3      	lsls	r3, r2, #3
 800323a:	4403      	add	r3, r0
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003242:	e00e      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003244:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003248:	00d3      	lsls	r3, r2, #3
 800324a:	4403      	add	r3, r0
 800324c:	2202      	movs	r2, #2
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003252:	e006      	b.n	8003262 <HAL_HCD_HC_SubmitRequest+0x15a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003254:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003258:	00d3      	lsls	r3, r2, #3
 800325a:	4403      	add	r3, r0
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003262:	008a      	lsls	r2, r1, #2
 8003264:	1854      	adds	r4, r2, r1
 8003266:	00e3      	lsls	r3, r4, #3
 8003268:	4403      	add	r3, r0
 800326a:	9c07      	ldr	r4, [sp, #28]
 800326c:	645c      	str	r4, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 800326e:	649e      	str	r6, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003270:	2400      	movs	r4, #0
 8003272:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8003276:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].ch_num = ch_num;
 8003278:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 800327c:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003280:	4411      	add	r1, r2
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003288:	7c02      	ldrb	r2, [r0, #16]
 800328a:	4401      	add	r1, r0
 800328c:	6800      	ldr	r0, [r0, #0]
 800328e:	f005 fa5d 	bl	800874c <USB_HC_StartXfer>
}
 8003292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003294 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003294:	b530      	push	{r4, r5, lr}
 8003296:	b083      	sub	sp, #12
 8003298:	4605      	mov	r5, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800329a:	6804      	ldr	r4, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800329c:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80032a0:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 80032a2:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80032a6:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032a8:	9b00      	ldr	r3, [sp, #0]
 80032aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032ae:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032b0:	9b01      	ldr	r3, [sp, #4]
 80032b2:	f013 0f02 	tst.w	r3, #2
 80032b6:	d007      	beq.n	80032c8 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032b8:	9b01      	ldr	r3, [sp, #4]
 80032ba:	f013 0f01 	tst.w	r3, #1
 80032be:	d128      	bne.n	8003312 <HCD_Port_IRQHandler+0x7e>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80032c0:	9b00      	ldr	r3, [sp, #0]
 80032c2:	f043 0302 	orr.w	r3, r3, #2
 80032c6:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032c8:	9b01      	ldr	r3, [sp, #4]
 80032ca:	f013 0f08 	tst.w	r3, #8
 80032ce:	d013      	beq.n	80032f8 <HCD_Port_IRQHandler+0x64>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80032d0:	9b00      	ldr	r3, [sp, #0]
 80032d2:	f043 0308 	orr.w	r3, r3, #8
 80032d6:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80032d8:	9b01      	ldr	r3, [sp, #4]
 80032da:	f013 0f04 	tst.w	r3, #4
 80032de:	d034      	beq.n	800334a <HCD_Port_IRQHandler+0xb6>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80032e0:	69ab      	ldr	r3, [r5, #24]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d01c      	beq.n	8003320 <HCD_Port_IRQHandler+0x8c>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032e6:	68eb      	ldr	r3, [r5, #12]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d029      	beq.n	8003340 <HCD_Port_IRQHandler+0xac>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032ec:	4628      	mov	r0, r5
 80032ee:	f009 fe05 	bl	800cefc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80032f2:	4628      	mov	r0, r5
 80032f4:	f009 fdf0 	bl	800ced8 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032f8:	9b01      	ldr	r3, [sp, #4]
 80032fa:	f013 0f20 	tst.w	r3, #32
 80032fe:	d003      	beq.n	8003308 <HCD_Port_IRQHandler+0x74>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003300:	9b00      	ldr	r3, [sp, #0]
 8003302:	f043 0320 	orr.w	r3, r3, #32
 8003306:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003308:	9b00      	ldr	r3, [sp, #0]
 800330a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 800330e:	b003      	add	sp, #12
 8003310:	bd30      	pop	{r4, r5, pc}
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003312:	69a3      	ldr	r3, [r4, #24]
 8003314:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003318:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800331a:	f009 fddd 	bl	800ced8 <HAL_HCD_Connect_Callback>
 800331e:	e7cf      	b.n	80032c0 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003320:	9b01      	ldr	r3, [sp, #4]
 8003322:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003326:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800332a:	d004      	beq.n	8003336 <HCD_Port_IRQHandler+0xa2>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800332c:	2101      	movs	r1, #1
 800332e:	6828      	ldr	r0, [r5, #0]
 8003330:	f005 f81a 	bl	8008368 <USB_InitFSLSPClkSel>
 8003334:	e7da      	b.n	80032ec <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003336:	2102      	movs	r1, #2
 8003338:	6828      	ldr	r0, [r5, #0]
 800333a:	f005 f815 	bl	8008368 <USB_InitFSLSPClkSel>
 800333e:	e7d5      	b.n	80032ec <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8003340:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003344:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 8003348:	e7d0      	b.n	80032ec <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800334a:	4628      	mov	r0, r5
 800334c:	f009 fddc 	bl	800cf08 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003350:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8003354:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003358:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800335c:	682a      	ldr	r2, [r5, #0]
 800335e:	6993      	ldr	r3, [r2, #24]
 8003360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003364:	6193      	str	r3, [r2, #24]
 8003366:	e7c7      	b.n	80032f8 <HCD_Port_IRQHandler+0x64>

08003368 <HCD_HC_IN_IRQHandler>:
{
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	4606      	mov	r6, r0
 800336c:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800336e:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003370:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8003374:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8003378:	68a3      	ldr	r3, [r4, #8]
 800337a:	f013 0f04 	tst.w	r3, #4
 800337e:	d03c      	beq.n	80033fa <HCD_HC_IN_IRQHandler+0x92>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003380:	2304      	movs	r3, #4
 8003382:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003384:	68e3      	ldr	r3, [r4, #12]
 8003386:	f043 0302 	orr.w	r3, r3, #2
 800338a:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800338c:	68a3      	ldr	r3, [r4, #8]
 800338e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003392:	d168      	bne.n	8003466 <HCD_HC_IN_IRQHandler+0xfe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	f013 0f01 	tst.w	r3, #1
 800339a:	f000 808d 	beq.w	80034b8 <HCD_HC_IN_IRQHandler+0x150>
    if (hhcd->Init.dma_enable != 0U)
 800339e:	6933      	ldr	r3, [r6, #16]
 80033a0:	b14b      	cbz	r3, 80033b6 <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80033a2:	00aa      	lsls	r2, r5, #2
 80033a4:	442a      	add	r2, r5
 80033a6:	00d3      	lsls	r3, r2, #3
 80033a8:	4433      	add	r3, r6
 80033aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033ac:	6921      	ldr	r1, [r4, #16]
 80033ae:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80033b2:	1a52      	subs	r2, r2, r1
 80033b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 80033b6:	00aa      	lsls	r2, r5, #2
 80033b8:	442a      	add	r2, r5
 80033ba:	00d3      	lsls	r3, r2, #3
 80033bc:	4433      	add	r3, r6
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033c4:	2100      	movs	r1, #0
 80033c6:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033c8:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033ca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80033ce:	2a02      	cmp	r2, #2
 80033d0:	bf14      	ite	ne
 80033d2:	2300      	movne	r3, #0
 80033d4:	2301      	moveq	r3, #1
 80033d6:	428a      	cmp	r2, r1
 80033d8:	bf08      	it	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d14e      	bne.n	800347e <HCD_HC_IN_IRQHandler+0x116>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033e0:	2a03      	cmp	r2, #3
 80033e2:	d057      	beq.n	8003494 <HCD_HC_IN_IRQHandler+0x12c>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80033e4:	00ab      	lsls	r3, r5, #2
 80033e6:	1959      	adds	r1, r3, r5
 80033e8:	00ca      	lsls	r2, r1, #3
 80033ea:	4432      	add	r2, r6
 80033ec:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80033f0:	f083 0301 	eor.w	r3, r3, #1
 80033f4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 80033f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033fa:	68a3      	ldr	r3, [r4, #8]
 80033fc:	f013 0f20 	tst.w	r3, #32
 8003400:	d002      	beq.n	8003408 <HCD_HC_IN_IRQHandler+0xa0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003402:	2320      	movs	r3, #32
 8003404:	60a3      	str	r3, [r4, #8]
 8003406:	e7c1      	b.n	800338c <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	f013 0f08 	tst.w	r3, #8
 800340e:	d117      	bne.n	8003440 <HCD_HC_IN_IRQHandler+0xd8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003410:	68a3      	ldr	r3, [r4, #8]
 8003412:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003416:	d0b9      	beq.n	800338c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003418:	68e3      	ldr	r3, [r4, #12]
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003420:	6800      	ldr	r0, [r0, #0]
 8003422:	f005 f912 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003426:	2310      	movs	r3, #16
 8003428:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800342a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800342e:	00d3      	lsls	r3, r2, #3
 8003430:	4433      	add	r3, r6
 8003432:	2208      	movs	r2, #8
 8003434:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343c:	60a3      	str	r3, [r4, #8]
 800343e:	e7a5      	b.n	800338c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003440:	68e3      	ldr	r3, [r4, #12]
 8003442:	f043 0302 	orr.w	r3, r3, #2
 8003446:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003448:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800344c:	00d3      	lsls	r3, r2, #3
 800344e:	4403      	add	r3, r0
 8003450:	2205      	movs	r2, #5
 8003452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003456:	2310      	movs	r3, #16
 8003458:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800345a:	2308      	movs	r3, #8
 800345c:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345e:	6800      	ldr	r0, [r0, #0]
 8003460:	f005 f8f3 	bl	800864a <USB_HC_Halt>
 8003464:	e792      	b.n	800338c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003466:	68e3      	ldr	r3, [r4, #12]
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800346e:	4629      	mov	r1, r5
 8003470:	6830      	ldr	r0, [r6, #0]
 8003472:	f005 f8ea 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800347a:	60a3      	str	r3, [r4, #8]
 800347c:	e7bc      	b.n	80033f8 <HCD_HC_IN_IRQHandler+0x90>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800347e:	68e3      	ldr	r3, [r4, #12]
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003486:	4629      	mov	r1, r5
 8003488:	6830      	ldr	r0, [r6, #0]
 800348a:	f005 f8de 	bl	800864a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800348e:	2310      	movs	r3, #16
 8003490:	60a3      	str	r3, [r4, #8]
 8003492:	e7a7      	b.n	80033e4 <HCD_HC_IN_IRQHandler+0x7c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003494:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8003498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800349c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034a0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80034a4:	00d3      	lsls	r3, r2, #3
 80034a6:	4433      	add	r3, r6
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ae:	4629      	mov	r1, r5
 80034b0:	4630      	mov	r0, r6
 80034b2:	f009 fd1d 	bl	800cef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034b6:	e795      	b.n	80033e4 <HCD_HC_IN_IRQHandler+0x7c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034b8:	68a3      	ldr	r3, [r4, #8]
 80034ba:	f013 0f02 	tst.w	r3, #2
 80034be:	d062      	beq.n	8003586 <HCD_HC_IN_IRQHandler+0x21e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034c0:	68e3      	ldr	r3, [r4, #12]
 80034c2:	f023 0302 	bic.w	r3, r3, #2
 80034c6:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034c8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80034cc:	00d3      	lsls	r3, r2, #3
 80034ce:	4433      	add	r3, r6
 80034d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d020      	beq.n	800351a <HCD_HC_IN_IRQHandler+0x1b2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d032      	beq.n	8003542 <HCD_HC_IN_IRQHandler+0x1da>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034dc:	2b08      	cmp	r3, #8
 80034de:	bf18      	it	ne
 80034e0:	2b06      	cmpne	r3, #6
 80034e2:	d13e      	bne.n	8003562 <HCD_HC_IN_IRQHandler+0x1fa>
      hhcd->hc[ch_num].ErrCnt++;
 80034e4:	00aa      	lsls	r2, r5, #2
 80034e6:	442a      	add	r2, r5
 80034e8:	00d3      	lsls	r3, r2, #3
 80034ea:	4433      	add	r3, r6
 80034ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034ee:	3201      	adds	r2, #1
 80034f0:	659a      	str	r2, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80034f2:	2a03      	cmp	r2, #3
 80034f4:	d92d      	bls.n	8003552 <HCD_HC_IN_IRQHandler+0x1ea>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034f6:	00aa      	lsls	r2, r5, #2
 80034f8:	442a      	add	r2, r5
 80034fa:	00d3      	lsls	r3, r2, #3
 80034fc:	4433      	add	r3, r6
 80034fe:	2200      	movs	r2, #0
 8003500:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003502:	2204      	movs	r2, #4
 8003504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003508:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800350c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003514:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8003518:	e006      	b.n	8003528 <HCD_HC_IN_IRQHandler+0x1c0>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800351a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800351e:	00d3      	lsls	r3, r2, #3
 8003520:	4433      	add	r3, r6
 8003522:	2201      	movs	r2, #1
 8003524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003528:	2302      	movs	r3, #2
 800352a:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800352c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003530:	00d3      	lsls	r3, r2, #3
 8003532:	4433      	add	r3, r6
 8003534:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8003538:	4629      	mov	r1, r5
 800353a:	4630      	mov	r0, r6
 800353c:	f009 fcd8 	bl	800cef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003540:	e75a      	b.n	80033f8 <HCD_HC_IN_IRQHandler+0x90>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003542:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003546:	00d3      	lsls	r3, r2, #3
 8003548:	4433      	add	r3, r6
 800354a:	2205      	movs	r2, #5
 800354c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003550:	e7ea      	b.n	8003528 <HCD_HC_IN_IRQHandler+0x1c0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003552:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003556:	00d3      	lsls	r3, r2, #3
 8003558:	4433      	add	r3, r6
 800355a:	2202      	movs	r2, #2
 800355c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003560:	e7d2      	b.n	8003508 <HCD_HC_IN_IRQHandler+0x1a0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003562:	2b03      	cmp	r3, #3
 8003564:	d1e0      	bne.n	8003528 <HCD_HC_IN_IRQHandler+0x1c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003566:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800356a:	00d3      	lsls	r3, r2, #3
 800356c:	4433      	add	r3, r6
 800356e:	2202      	movs	r2, #2
 8003570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003574:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800357c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003580:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8003584:	e7d0      	b.n	8003528 <HCD_HC_IN_IRQHandler+0x1c0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003586:	68a3      	ldr	r3, [r4, #8]
 8003588:	f013 0f80 	tst.w	r3, #128	; 0x80
 800358c:	d121      	bne.n	80035d2 <HCD_HC_IN_IRQHandler+0x26a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800358e:	68a3      	ldr	r3, [r4, #8]
 8003590:	f013 0f10 	tst.w	r3, #16
 8003594:	f43f af30 	beq.w	80033f8 <HCD_HC_IN_IRQHandler+0x90>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003598:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800359c:	00d3      	lsls	r3, r2, #3
 800359e:	461a      	mov	r2, r3
 80035a0:	4433      	add	r3, r6
 80035a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d02b      	beq.n	8003602 <HCD_HC_IN_IRQHandler+0x29a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	bf14      	ite	ne
 80035ae:	2200      	movne	r2, #0
 80035b0:	2201      	moveq	r2, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	4613      	movne	r3, r2
 80035b8:	2301      	moveq	r3, #1
 80035ba:	b13b      	cbz	r3, 80035cc <HCD_HC_IN_IRQHandler+0x264>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035bc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80035c0:	00d3      	lsls	r3, r2, #3
 80035c2:	4433      	add	r3, r6
 80035c4:	2200      	movs	r2, #0
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80035c8:	6933      	ldr	r3, [r6, #16]
 80035ca:	b34b      	cbz	r3, 8003620 <HCD_HC_IN_IRQHandler+0x2b8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035cc:	2310      	movs	r3, #16
 80035ce:	60a3      	str	r3, [r4, #8]
}
 80035d0:	e712      	b.n	80033f8 <HCD_HC_IN_IRQHandler+0x90>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d2:	68e3      	ldr	r3, [r4, #12]
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80035da:	00ab      	lsls	r3, r5, #2
 80035dc:	1959      	adds	r1, r3, r5
 80035de:	00ca      	lsls	r2, r1, #3
 80035e0:	4432      	add	r2, r6
 80035e2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80035e4:	3101      	adds	r1, #1
 80035e6:	6591      	str	r1, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035e8:	442b      	add	r3, r5
 80035ea:	00da      	lsls	r2, r3, #3
 80035ec:	4432      	add	r2, r6
 80035ee:	2306      	movs	r3, #6
 80035f0:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f4:	4629      	mov	r1, r5
 80035f6:	6830      	ldr	r0, [r6, #0]
 80035f8:	f005 f827 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	60a3      	str	r3, [r4, #8]
 8003600:	e6fa      	b.n	80033f8 <HCD_HC_IN_IRQHandler+0x90>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003602:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003606:	00d3      	lsls	r3, r2, #3
 8003608:	4433      	add	r3, r6
 800360a:	2200      	movs	r2, #0
 800360c:	659a      	str	r2, [r3, #88]	; 0x58
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800360e:	68e3      	ldr	r3, [r4, #12]
 8003610:	f043 0302 	orr.w	r3, r3, #2
 8003614:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003616:	4629      	mov	r1, r5
 8003618:	6830      	ldr	r0, [r6, #0]
 800361a:	f005 f816 	bl	800864a <USB_HC_Halt>
 800361e:	e7d5      	b.n	80035cc <HCD_HC_IN_IRQHandler+0x264>
        hhcd->hc[ch_num].state = HC_NAK;
 8003620:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003624:	00d3      	lsls	r3, r2, #3
 8003626:	4433      	add	r3, r6
 8003628:	2203      	movs	r2, #3
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800362e:	68e3      	ldr	r3, [r4, #12]
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003636:	4629      	mov	r1, r5
 8003638:	6830      	ldr	r0, [r6, #0]
 800363a:	f005 f806 	bl	800864a <USB_HC_Halt>
 800363e:	e7c5      	b.n	80035cc <HCD_HC_IN_IRQHandler+0x264>

08003640 <HCD_HC_OUT_IRQHandler>:
{
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003642:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003644:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003648:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 800364c:	68a2      	ldr	r2, [r4, #8]
 800364e:	f012 0f04 	tst.w	r2, #4
 8003652:	d124      	bne.n	800369e <HCD_HC_OUT_IRQHandler+0x5e>
 8003654:	460e      	mov	r6, r1
 8003656:	4605      	mov	r5, r0
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003658:	68a2      	ldr	r2, [r4, #8]
 800365a:	f012 0f20 	tst.w	r2, #32
 800365e:	d025      	beq.n	80036ac <HCD_HC_OUT_IRQHandler+0x6c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003660:	2320      	movs	r3, #32
 8003662:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003664:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003668:	00d3      	lsls	r3, r2, #3
 800366a:	461a      	mov	r2, r3
 800366c:	4403      	add	r3, r0
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003672:	2b01      	cmp	r3, #1
 8003674:	d119      	bne.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
      hhcd->hc[ch_num].do_ping = 0U;
 8003676:	008b      	lsls	r3, r1, #2
 8003678:	4402      	add	r2, r0
 800367a:	2100      	movs	r1, #0
 800367c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003680:	4433      	add	r3, r6
 8003682:	00da      	lsls	r2, r3, #3
 8003684:	4402      	add	r2, r0
 8003686:	2302      	movs	r3, #2
 8003688:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800368c:	68e3      	ldr	r3, [r4, #12]
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003694:	4631      	mov	r1, r6
 8003696:	6800      	ldr	r0, [r0, #0]
 8003698:	f004 ffd7 	bl	800864a <USB_HC_Halt>
 800369c:	e005      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800369e:	2304      	movs	r3, #4
 80036a0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a2:	68e3      	ldr	r3, [r4, #12]
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	60e3      	str	r3, [r4, #12]
}
 80036aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036ac:	68a2      	ldr	r2, [r4, #8]
 80036ae:	f012 0f40 	tst.w	r2, #64	; 0x40
 80036b2:	d134      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0xde>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036b4:	68a2      	ldr	r2, [r4, #8]
 80036b6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036ba:	d14a      	bne.n	8003752 <HCD_HC_OUT_IRQHandler+0x112>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036bc:	68a2      	ldr	r2, [r4, #8]
 80036be:	f012 0f01 	tst.w	r2, #1
 80036c2:	d151      	bne.n	8003768 <HCD_HC_OUT_IRQHandler+0x128>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036c4:	68a2      	ldr	r2, [r4, #8]
 80036c6:	f012 0f08 	tst.w	r2, #8
 80036ca:	d162      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0x152>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036cc:	68a2      	ldr	r2, [r4, #8]
 80036ce:	f012 0f10 	tst.w	r2, #16
 80036d2:	d06f      	beq.n	80037b4 <HCD_HC_OUT_IRQHandler+0x174>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036d4:	008a      	lsls	r2, r1, #2
 80036d6:	440a      	add	r2, r1
 80036d8:	00d3      	lsls	r3, r2, #3
 80036da:	4403      	add	r3, r0
 80036dc:	2200      	movs	r2, #0
 80036de:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 80036e0:	2203      	movs	r2, #3
 80036e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b96b      	cbnz	r3, 8003708 <HCD_HC_OUT_IRQHandler+0xc8>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80036ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80036f0:	00d3      	lsls	r3, r2, #3
 80036f2:	4403      	add	r3, r0
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	b933      	cbnz	r3, 8003708 <HCD_HC_OUT_IRQHandler+0xc8>
        hhcd->hc[ch_num].do_ping = 1U;
 80036fa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80036fe:	00d3      	lsls	r3, r2, #3
 8003700:	4403      	add	r3, r0
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003710:	4631      	mov	r1, r6
 8003712:	6828      	ldr	r0, [r5, #0]
 8003714:	f004 ff99 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003718:	2310      	movs	r3, #16
 800371a:	60a3      	str	r3, [r4, #8]
 800371c:	e7c5      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
    hhcd->hc[ch_num].state = HC_NYET;
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	1859      	adds	r1, r3, r1
 8003722:	00ca      	lsls	r2, r1, #3
 8003724:	4402      	add	r2, r0
 8003726:	2104      	movs	r1, #4
 8003728:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 800372c:	2101      	movs	r1, #1
 800372e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003732:	4433      	add	r3, r6
 8003734:	00da      	lsls	r2, r3, #3
 8003736:	4402      	add	r2, r0
 8003738:	2300      	movs	r3, #0
 800373a:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373c:	68e3      	ldr	r3, [r4, #12]
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003744:	4631      	mov	r1, r6
 8003746:	6800      	ldr	r0, [r0, #0]
 8003748:	f004 ff7f 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800374c:	2340      	movs	r3, #64	; 0x40
 800374e:	60a3      	str	r3, [r4, #8]
 8003750:	e7ab      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003752:	68e3      	ldr	r3, [r4, #12]
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	f004 ff75 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003764:	60a3      	str	r3, [r4, #8]
 8003766:	e7a0      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003768:	008f      	lsls	r7, r1, #2
 800376a:	187a      	adds	r2, r7, r1
 800376c:	00d3      	lsls	r3, r2, #3
 800376e:	4403      	add	r3, r0
 8003770:	2200      	movs	r2, #0
 8003772:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003774:	68e3      	ldr	r3, [r4, #12]
 8003776:	f043 0302 	orr.w	r3, r3, #2
 800377a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800377c:	6800      	ldr	r0, [r0, #0]
 800377e:	f004 ff64 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003782:	2301      	movs	r3, #1
 8003784:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003786:	19b9      	adds	r1, r7, r6
 8003788:	00c8      	lsls	r0, r1, #3
 800378a:	4428      	add	r0, r5
 800378c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 8003790:	e78b      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003792:	2308      	movs	r3, #8
 8003794:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003796:	68e3      	ldr	r3, [r4, #12]
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	f004 ff53 	bl	800864a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037a4:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 80037a8:	00c8      	lsls	r0, r1, #3
 80037aa:	4428      	add	r0, r5
 80037ac:	2305      	movs	r3, #5
 80037ae:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 80037b2:	e77a      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037b4:	68a2      	ldr	r2, [r4, #8]
 80037b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80037ba:	d136      	bne.n	800382a <HCD_HC_OUT_IRQHandler+0x1ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037bc:	68a2      	ldr	r2, [r4, #8]
 80037be:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80037c2:	d143      	bne.n	800384c <HCD_HC_OUT_IRQHandler+0x20c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037c4:	68a2      	ldr	r2, [r4, #8]
 80037c6:	f012 0f02 	tst.w	r2, #2
 80037ca:	f43f af6e 	beq.w	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80037ce:	68e2      	ldr	r2, [r4, #12]
 80037d0:	f022 0202 	bic.w	r2, r2, #2
 80037d4:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80037da:	00ca      	lsls	r2, r1, #3
 80037dc:	4611      	mov	r1, r2
 80037de:	4402      	add	r2, r0
 80037e0:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 80037e4:	2a01      	cmp	r2, #1
 80037e6:	d045      	beq.n	8003874 <HCD_HC_OUT_IRQHandler+0x234>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037e8:	2a03      	cmp	r2, #3
 80037ea:	d057      	beq.n	800389c <HCD_HC_OUT_IRQHandler+0x25c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80037ec:	2a04      	cmp	r2, #4
 80037ee:	d069      	beq.n	80038c4 <HCD_HC_OUT_IRQHandler+0x284>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037f0:	2a05      	cmp	r2, #5
 80037f2:	d06f      	beq.n	80038d4 <HCD_HC_OUT_IRQHandler+0x294>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037f4:	2a08      	cmp	r2, #8
 80037f6:	bf18      	it	ne
 80037f8:	2a06      	cmpne	r2, #6
 80037fa:	d156      	bne.n	80038aa <HCD_HC_OUT_IRQHandler+0x26a>
      hhcd->hc[ch_num].ErrCnt++;
 80037fc:	2128      	movs	r1, #40	; 0x28
 80037fe:	fb01 0106 	mla	r1, r1, r6, r0
 8003802:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003804:	3201      	adds	r2, #1
 8003806:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003808:	2a03      	cmp	r2, #3
 800380a:	d969      	bls.n	80038e0 <HCD_HC_OUT_IRQHandler+0x2a0>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800380c:	460a      	mov	r2, r1
 800380e:	2100      	movs	r1, #0
 8003810:	6591      	str	r1, [r2, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003812:	2104      	movs	r1, #4
 8003814:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003818:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800381c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003820:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003824:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8003828:	e03f      	b.n	80038aa <HCD_HC_OUT_IRQHandler+0x26a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382a:	68e3      	ldr	r3, [r4, #12]
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	f004 ff09 	bl	800864a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003838:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800383c:	00cb      	lsls	r3, r1, #3
 800383e:	442b      	add	r3, r5
 8003840:	2206      	movs	r2, #6
 8003842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	60a3      	str	r3, [r4, #8]
 800384a:	e72e      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800384c:	68e3      	ldr	r3, [r4, #12]
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003854:	6800      	ldr	r0, [r0, #0]
 8003856:	f004 fef8 	bl	800864a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800385a:	2310      	movs	r3, #16
 800385c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800385e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003862:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003864:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8003868:	00cb      	lsls	r3, r1, #3
 800386a:	442b      	add	r3, r5
 800386c:	2208      	movs	r2, #8
 800386e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8003872:	e71a      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003874:	460b      	mov	r3, r1
 8003876:	4403      	add	r3, r0
 8003878:	2201      	movs	r2, #1
 800387a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800387e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003882:	3b02      	subs	r3, #2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4293      	cmp	r3, r2
 8003888:	d80f      	bhi.n	80038aa <HCD_HC_OUT_IRQHandler+0x26a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800388a:	460b      	mov	r3, r1
 800388c:	4403      	add	r3, r0
 800388e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8003892:	f082 0201 	eor.w	r2, r2, #1
 8003896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800389a:	e006      	b.n	80038aa <HCD_HC_OUT_IRQHandler+0x26a>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800389c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80038a0:	00d3      	lsls	r3, r2, #3
 80038a2:	4403      	add	r3, r0
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038aa:	2302      	movs	r3, #2
 80038ac:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038ae:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80038b2:	00d3      	lsls	r3, r2, #3
 80038b4:	442b      	add	r3, r5
 80038b6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80038ba:	4631      	mov	r1, r6
 80038bc:	4628      	mov	r0, r5
 80038be:	f009 fb17 	bl	800cef0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038c2:	e6f2      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x6a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038c4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80038c8:	00d3      	lsls	r3, r2, #3
 80038ca:	4403      	add	r3, r0
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80038d2:	e7ea      	b.n	80038aa <HCD_HC_OUT_IRQHandler+0x26a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80038d4:	2328      	movs	r3, #40	; 0x28
 80038d6:	fb03 0306 	mla	r3, r3, r6, r0
 80038da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80038de:	e7e4      	b.n	80038aa <HCD_HC_OUT_IRQHandler+0x26a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038e0:	2228      	movs	r2, #40	; 0x28
 80038e2:	fb02 0206 	mla	r2, r2, r6, r0
 80038e6:	2102      	movs	r1, #2
 80038e8:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 80038ec:	e794      	b.n	8003818 <HCD_HC_OUT_IRQHandler+0x1d8>

080038ee <HAL_HCD_IRQHandler>:
{
 80038ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f0:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038f2:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80038f4:	4628      	mov	r0, r5
 80038f6:	f004 fd33 	bl	8008360 <USB_GetMode>
 80038fa:	2801      	cmp	r0, #1
 80038fc:	d000      	beq.n	8003900 <HAL_HCD_IRQHandler+0x12>
}
 80038fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	f004 fd29 	bl	8008358 <USB_ReadInterrupts>
 8003906:	2800      	cmp	r0, #0
 8003908:	d0f9      	beq.n	80038fe <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	f004 fd24 	bl	8008358 <USB_ReadInterrupts>
 8003910:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8003914:	d003      	beq.n	800391e <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800391c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	f004 fd1a 	bl	8008358 <USB_ReadInterrupts>
 8003924:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8003928:	d003      	beq.n	8003932 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003930:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003932:	6820      	ldr	r0, [r4, #0]
 8003934:	f004 fd10 	bl	8008358 <USB_ReadInterrupts>
 8003938:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800393c:	d003      	beq.n	8003946 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003944:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003946:	6820      	ldr	r0, [r4, #0]
 8003948:	f004 fd06 	bl	8008358 <USB_ReadInterrupts>
 800394c:	f010 0f02 	tst.w	r0, #2
 8003950:	d002      	beq.n	8003958 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	2202      	movs	r2, #2
 8003956:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	f004 fcfd 	bl	8008358 <USB_ReadInterrupts>
 800395e:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8003962:	d125      	bne.n	80039b0 <HAL_HCD_IRQHandler+0xc2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	f004 fcf7 	bl	8008358 <USB_ReadInterrupts>
 800396a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800396e:	d131      	bne.n	80039d4 <HAL_HCD_IRQHandler+0xe6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	f004 fcf1 	bl	8008358 <USB_ReadInterrupts>
 8003976:	f010 0f08 	tst.w	r0, #8
 800397a:	d12f      	bne.n	80039dc <HAL_HCD_IRQHandler+0xee>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	f004 fceb 	bl	8008358 <USB_ReadInterrupts>
 8003982:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003986:	d130      	bne.n	80039ea <HAL_HCD_IRQHandler+0xfc>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	f004 fce5 	bl	8008358 <USB_ReadInterrupts>
 800398e:	f010 0f10 	tst.w	r0, #16
 8003992:	d0b4      	beq.n	80038fe <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003994:	6822      	ldr	r2, [r4, #0]
 8003996:	6993      	ldr	r3, [r2, #24]
 8003998:	f023 0310 	bic.w	r3, r3, #16
 800399c:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff fad0 	bl	8002f44 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039a4:	6822      	ldr	r2, [r4, #0]
 80039a6:	6993      	ldr	r3, [r2, #24]
 80039a8:	f043 0310 	orr.w	r3, r3, #16
 80039ac:	6193      	str	r3, [r2, #24]
 80039ae:	e7a6      	b.n	80038fe <HAL_HCD_IRQHandler+0x10>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039b0:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80039b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039b8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 80039bc:	4620      	mov	r0, r4
 80039be:	f009 fa91 	bl	800cee4 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039c2:	2101      	movs	r1, #1
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	f004 fccf 	bl	8008368 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039d0:	615a      	str	r2, [r3, #20]
 80039d2:	e7c7      	b.n	8003964 <HAL_HCD_IRQHandler+0x76>
      HCD_Port_IRQHandler(hhcd);
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff fc5d 	bl	8003294 <HCD_Port_IRQHandler>
 80039da:	e7c9      	b.n	8003970 <HAL_HCD_IRQHandler+0x82>
      HAL_HCD_SOF_Callback(hhcd);
 80039dc:	4620      	mov	r0, r4
 80039de:	f009 fa75 	bl	800cecc <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	2208      	movs	r2, #8
 80039e6:	615a      	str	r2, [r3, #20]
 80039e8:	e7c8      	b.n	800397c <HAL_HCD_IRQHandler+0x8e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	f004 fe28 	bl	8008640 <USB_HC_ReadInterrupt>
 80039f0:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039f2:	2600      	movs	r6, #0
 80039f4:	e004      	b.n	8003a00 <HAL_HCD_IRQHandler+0x112>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039f6:	b2f1      	uxtb	r1, r6
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7ff fe21 	bl	8003640 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039fe:	3601      	adds	r6, #1
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	42b3      	cmp	r3, r6
 8003a04:	d912      	bls.n	8003a2c <HAL_HCD_IRQHandler+0x13e>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a06:	f006 030f 	and.w	r3, r6, #15
 8003a0a:	fa27 f303 	lsr.w	r3, r7, r3
 8003a0e:	f013 0f01 	tst.w	r3, #1
 8003a12:	d0f4      	beq.n	80039fe <HAL_HCD_IRQHandler+0x110>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a14:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8003a18:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8003a1c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003a20:	d0e9      	beq.n	80039f6 <HAL_HCD_IRQHandler+0x108>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a22:	b2f1      	uxtb	r1, r6
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff fc9f 	bl	8003368 <HCD_HC_IN_IRQHandler>
 8003a2a:	e7e8      	b.n	80039fe <HAL_HCD_IRQHandler+0x110>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a32:	615a      	str	r2, [r3, #20]
 8003a34:	e7a8      	b.n	8003988 <HAL_HCD_IRQHandler+0x9a>

08003a36 <HAL_HCD_Start>:
{
 8003a36:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8003a38:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d00e      	beq.n	8003a5e <HAL_HCD_Start+0x28>
 8003a40:	4604      	mov	r4, r0
 8003a42:	2501      	movs	r5, #1
 8003a44:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003a48:	6800      	ldr	r0, [r0, #0]
 8003a4a:	f004 fc13 	bl	8008274 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a4e:	4629      	mov	r1, r5
 8003a50:	6820      	ldr	r0, [r4, #0]
 8003a52:	f004 fcc8 	bl	80083e6 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003a56:	2000      	movs	r0, #0
 8003a58:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8003a5c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8003a5e:	2002      	movs	r0, #2
 8003a60:	e7fc      	b.n	8003a5c <HAL_HCD_Start+0x26>

08003a62 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8003a62:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d00b      	beq.n	8003a82 <HAL_HCD_Stop+0x20>
{
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003a74:	6800      	ldr	r0, [r0, #0]
 8003a76:	f004 ff15 	bl	80088a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8003a80:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003a82:	2002      	movs	r0, #2
}
 8003a84:	4770      	bx	lr

08003a86 <HAL_HCD_ResetPort>:
{
 8003a86:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8003a88:	6800      	ldr	r0, [r0, #0]
 8003a8a:	f004 fc8d 	bl	80083a8 <USB_ResetPort>
}
 8003a8e:	bd08      	pop	{r3, pc}

08003a90 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8003a90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a94:	00cb      	lsls	r3, r1, #3
 8003a96:	4418      	add	r0, r3
}
 8003a98:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8003a9c:	4770      	bx	lr

08003a9e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8003a9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003aa2:	00cb      	lsls	r3, r1, #3
 8003aa4:	4418      	add	r0, r3
}
 8003aa6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003aa8:	4770      	bx	lr

08003aaa <HAL_HCD_GetCurrentFrame>:
{
 8003aaa:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003aac:	6800      	ldr	r0, [r0, #0]
 8003aae:	f004 fd3e 	bl	800852e <USB_GetCurrentFrame>
}
 8003ab2:	bd08      	pop	{r3, pc}

08003ab4 <HAL_HCD_GetCurrentSpeed>:
{
 8003ab4:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ab6:	6800      	ldr	r0, [r0, #0]
 8003ab8:	f004 fd2e 	bl	8008518 <USB_GetHostSpeed>
}
 8003abc:	bd08      	pop	{r3, pc}

08003abe <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003abe:	6803      	ldr	r3, [r0, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	f012 0f02 	tst.w	r2, #2
 8003ac6:	d001      	beq.n	8003acc <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ac8:	2200      	movs	r2, #0
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003acc:	6803      	ldr	r3, [r0, #0]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	f012 0f01 	tst.w	r2, #1
 8003ad4:	d103      	bne.n	8003ade <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	619a      	str	r2, [r3, #24]
  }
}
 8003ade:	4770      	bx	lr

08003ae0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003ae0:	b470      	push	{r4, r5, r6}
 8003ae2:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003ae4:	6805      	ldr	r5, [r0, #0]
 8003ae6:	6868      	ldr	r0, [r5, #4]
 8003ae8:	0d74      	lsrs	r4, r6, #21
 8003aea:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003aee:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003af2:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8003af6:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003afa:	f044 0403 	orr.w	r4, r4, #3
 8003afe:	ea20 0004 	bic.w	r0, r0, r4
 8003b02:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003b06:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003b0a:	4319      	orrs	r1, r3
 8003b0c:	4331      	orrs	r1, r6
 8003b0e:	4301      	orrs	r1, r0
 8003b10:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003b12:	bc70      	pop	{r4, r5, r6}
 8003b14:	4770      	bx	lr

08003b16 <I2C_IsAcknowledgeFailed>:
{
 8003b16:	b570      	push	{r4, r5, r6, lr}
 8003b18:	4604      	mov	r4, r0
 8003b1a:	460d      	mov	r5, r1
 8003b1c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1e:	6803      	ldr	r3, [r0, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f013 0f10 	tst.w	r3, #16
 8003b26:	d01c      	beq.n	8003b62 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	f012 0f20 	tst.w	r2, #32
 8003b30:	d119      	bne.n	8003b66 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8003b32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b36:	d0f7      	beq.n	8003b28 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b38:	f7fe fc0a 	bl	8002350 <HAL_GetTick>
 8003b3c:	1b80      	subs	r0, r0, r6
 8003b3e:	42a8      	cmp	r0, r5
 8003b40:	d801      	bhi.n	8003b46 <I2C_IsAcknowledgeFailed+0x30>
 8003b42:	2d00      	cmp	r5, #0
 8003b44:	d1f0      	bne.n	8003b28 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	2320      	movs	r3, #32
 8003b50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003b5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
 8003b60:	e020      	b.n	8003ba4 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8003b62:	2000      	movs	r0, #0
 8003b64:	e01e      	b.n	8003ba4 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b66:	2210      	movs	r2, #16
 8003b68:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	2520      	movs	r5, #32
 8003b6e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff ffa4 	bl	8003abe <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	6853      	ldr	r3, [r2, #4]
 8003b7a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003b7e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003b82:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b8e:	f043 0304 	orr.w	r3, r3, #4
 8003b92:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003b9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
}
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}

08003ba6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003ba6:	b570      	push	{r4, r5, r6, lr}
 8003ba8:	4604      	mov	r4, r0
 8003baa:	460d      	mov	r5, r1
 8003bac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f013 0f02 	tst.w	r3, #2
 8003bb6:	d11d      	bne.n	8003bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb8:	4632      	mov	r2, r6
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff ffaa 	bl	8003b16 <I2C_IsAcknowledgeFailed>
 8003bc2:	b9c8      	cbnz	r0, 8003bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003bc4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003bc8:	d0f1      	beq.n	8003bae <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe fbc1 	bl	8002350 <HAL_GetTick>
 8003bce:	1b80      	subs	r0, r0, r6
 8003bd0:	42a8      	cmp	r0, r5
 8003bd2:	d801      	bhi.n	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	d1ea      	bne.n	8003bae <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bda:	f043 0320 	orr.w	r3, r3, #32
 8003bde:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	2320      	movs	r3, #32
 8003be2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003bec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	e000      	b.n	8003bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003bf4:	2000      	movs	r0, #0
}
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	e7fc      	b.n	8003bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003bfc <I2C_WaitOnFlagUntilTimeout>:
{
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	4605      	mov	r5, r0
 8003c00:	460f      	mov	r7, r1
 8003c02:	4616      	mov	r6, r2
 8003c04:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c06:	682b      	ldr	r3, [r5, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	ea37 0303 	bics.w	r3, r7, r3
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	42b3      	cmp	r3, r6
 8003c16:	d118      	bne.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003c18:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003c1c:	d0f3      	beq.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fe fb97 	bl	8002350 <HAL_GetTick>
 8003c22:	9b06      	ldr	r3, [sp, #24]
 8003c24:	1ac0      	subs	r0, r0, r3
 8003c26:	42a0      	cmp	r0, r4
 8003c28:	d801      	bhi.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x32>
 8003c2a:	2c00      	cmp	r4, #0
 8003c2c:	d1eb      	bne.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003c30:	f043 0320 	orr.w	r3, r3, #32
 8003c34:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	2320      	movs	r3, #32
 8003c38:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003c42:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003c46:	2001      	movs	r0, #1
 8003c48:	e000      	b.n	8003c4c <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8003c4a:	2000      	movs	r0, #0
}
 8003c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c50 <I2C_RequestMemoryWrite>:
{
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	4604      	mov	r4, r0
 8003c56:	4616      	mov	r6, r2
 8003c58:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <I2C_RequestMemoryWrite+0x6c>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c62:	b2ea      	uxtb	r2, r5
 8003c64:	f7ff ff3c 	bl	8003ae0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c68:	9a07      	ldr	r2, [sp, #28]
 8003c6a:	9906      	ldr	r1, [sp, #24]
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ff9a 	bl	8003ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c72:	b9e8      	cbnz	r0, 8003cb0 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c74:	2d01      	cmp	r5, #1
 8003c76:	d10e      	bne.n	8003c96 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	b2f6      	uxtb	r6, r6
 8003c7c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7e:	9b07      	ldr	r3, [sp, #28]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	9b06      	ldr	r3, [sp, #24]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7ff ffb7 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	b178      	cbz	r0, 8003cb2 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e00d      	b.n	8003cb2 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	0a32      	lsrs	r2, r6, #8
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9c:	9a07      	ldr	r2, [sp, #28]
 8003c9e:	9906      	ldr	r1, [sp, #24]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7ff ff80 	bl	8003ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca6:	b938      	cbnz	r0, 8003cb8 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	b2f6      	uxtb	r6, r6
 8003cac:	629e      	str	r6, [r3, #40]	; 0x28
 8003cae:	e7e6      	b.n	8003c7e <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e7fa      	b.n	8003cb2 <I2C_RequestMemoryWrite+0x62>
 8003cbc:	80002000 	.word	0x80002000

08003cc0 <I2C_RequestMemoryRead>:
{
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	4616      	mov	r6, r2
 8003cc8:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <I2C_RequestMemoryRead+0x6c>)
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	b2ea      	uxtb	r2, r5
 8003cd2:	f7ff ff05 	bl	8003ae0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	9a07      	ldr	r2, [sp, #28]
 8003cd8:	9906      	ldr	r1, [sp, #24]
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff ff63 	bl	8003ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce0:	b9e8      	cbnz	r0, 8003d1e <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ce2:	2d01      	cmp	r5, #1
 8003ce4:	d10e      	bne.n	8003d04 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	b2f6      	uxtb	r6, r6
 8003cea:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cec:	9b07      	ldr	r3, [sp, #28]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	9b06      	ldr	r3, [sp, #24]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f7ff ff80 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	b178      	cbz	r0, 8003d20 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e00d      	b.n	8003d20 <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	0a32      	lsrs	r2, r6, #8
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0a:	9a07      	ldr	r2, [sp, #28]
 8003d0c:	9906      	ldr	r1, [sp, #24]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f7ff ff49 	bl	8003ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d14:	b938      	cbnz	r0, 8003d26 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	b2f6      	uxtb	r6, r6
 8003d1a:	629e      	str	r6, [r3, #40]	; 0x28
 8003d1c:	e7e6      	b.n	8003cec <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	b002      	add	sp, #8
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e7fa      	b.n	8003d20 <I2C_RequestMemoryRead+0x60>
 8003d2a:	bf00      	nop
 8003d2c:	80002000 	.word	0x80002000

08003d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4605      	mov	r5, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f013 0f20 	tst.w	r3, #32
 8003d40:	d11a      	bne.n	8003d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	4632      	mov	r2, r6
 8003d44:	4621      	mov	r1, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f7ff fee5 	bl	8003b16 <I2C_IsAcknowledgeFailed>
 8003d4c:	b9b0      	cbnz	r0, 8003d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe faff 	bl	8002350 <HAL_GetTick>
 8003d52:	1b80      	subs	r0, r0, r6
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d801      	bhi.n	8003d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003d58:	2c00      	cmp	r4, #0
 8003d5a:	d1ed      	bne.n	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d5c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003d5e:	f043 0320 	orr.w	r3, r3, #32
 8003d62:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	2320      	movs	r3, #32
 8003d66:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003d70:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003d78:	2000      	movs	r0, #0
 8003d7a:	e7fc      	b.n	8003d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	e7fa      	b.n	8003d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003d80 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d057      	beq.n	8003e34 <HAL_I2C_Init+0xb4>
{
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d041      	beq.n	8003e14 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d90:	2324      	movs	r3, #36	; 0x24
 8003d92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003d96:	6822      	ldr	r2, [r4, #0]
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003da8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	6893      	ldr	r3, [r2, #8]
 8003dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003db2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db4:	68e3      	ldr	r3, [r4, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d031      	beq.n	8003e1e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	6822      	ldr	r2, [r4, #0]
 8003dbe:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003dc2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dc4:	68e3      	ldr	r3, [r4, #12]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d02f      	beq.n	8003e2a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	6851      	ldr	r1, [r2, #4]
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_I2C_Init+0xb8>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd4:	6822      	ldr	r2, [r4, #0]
 8003dd6:	68d3      	ldr	r3, [r2, #12]
 8003dd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ddc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	6962      	ldr	r2, [r4, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	69a1      	ldr	r1, [r4, #24]
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003dec:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dee:	69e3      	ldr	r3, [r4, #28]
 8003df0:	6a21      	ldr	r1, [r4, #32]
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003df8:	6822      	ldr	r2, [r4, #0]
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e02:	2000      	movs	r0, #0
 8003e04:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	2320      	movs	r3, #32
 8003e08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003e12:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003e14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003e18:	f7fd fe50 	bl	8001abc <HAL_I2C_MspInit>
 8003e1c:	e7b8      	b.n	8003d90 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e1e:	68a3      	ldr	r3, [r4, #8]
 8003e20:	6822      	ldr	r2, [r4, #0]
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	6093      	str	r3, [r2, #8]
 8003e28:	e7cc      	b.n	8003dc4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	e7ca      	b.n	8003dca <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
}
 8003e36:	4770      	bx	lr
 8003e38:	02008000 	.word	0x02008000

08003e3c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003e3c:	b1a8      	cbz	r0, 8003e6a <HAL_I2C_DeInit+0x2e>
{
 8003e3e:	b510      	push	{r4, lr}
 8003e40:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e42:	2324      	movs	r3, #36	; 0x24
 8003e44:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003e48:	6802      	ldr	r2, [r0, #0]
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003e52:	f7fd fe93 	bl	8001b7c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e56:	2000      	movs	r0, #0
 8003e58:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003e5a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8003e64:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003e68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e6a:	2001      	movs	r0, #1
}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_I2C_Mem_Write>:
{
 8003e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e78:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8003e7c:	b2ed      	uxtb	r5, r5
 8003e7e:	2d20      	cmp	r5, #32
 8003e80:	f040 80bf 	bne.w	8004002 <HAL_I2C_Mem_Write+0x194>
    if ((pData == NULL) || (Size == 0U))
 8003e84:	fab6 f586 	clz	r5, r6
 8003e88:	096d      	lsrs	r5, r5, #5
 8003e8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003e8c:	2c00      	cmp	r4, #0
 8003e8e:	bf08      	it	eq
 8003e90:	2501      	moveq	r5, #1
 8003e92:	b9d5      	cbnz	r5, 8003eca <HAL_I2C_Mem_Write+0x5c>
    __HAL_LOCK(hi2c);
 8003e94:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003e98:	2c01      	cmp	r4, #1
 8003e9a:	f000 80b7 	beq.w	800400c <HAL_I2C_Mem_Write+0x19e>
 8003e9e:	4698      	mov	r8, r3
 8003ea0:	4691      	mov	r9, r2
 8003ea2:	460d      	mov	r5, r1
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	f04f 0a01 	mov.w	sl, #1
 8003eaa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003eae:	f7fe fa4f 	bl	8002350 <HAL_GetTick>
 8003eb2:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eb4:	9000      	str	r0, [sp, #0]
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	4652      	mov	r2, sl
 8003eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff fe9c 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	b130      	cbz	r0, 8003ed4 <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e09c      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ece:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e097      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed4:	2321      	movs	r3, #33	; 0x21
 8003ed6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eda:	2340      	movs	r3, #64	; 0x40
 8003edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ee6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ee8:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eea:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eec:	9701      	str	r7, [sp, #4]
 8003eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	4643      	mov	r3, r8
 8003ef4:	464a      	mov	r2, r9
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f7ff fea9 	bl	8003c50 <I2C_RequestMemoryWrite>
 8003efe:	b970      	cbnz	r0, 8003f1e <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2bff      	cmp	r3, #255	; 0xff
 8003f06:	d90f      	bls.n	8003f28 <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f08:	22ff      	movs	r2, #255	; 0xff
 8003f0a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f14:	4629      	mov	r1, r5
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff fde2 	bl	8003ae0 <I2C_TransferConfig>
 8003f1c:	e021      	b.n	8003f62 <HAL_I2C_Mem_Write+0xf4>
      __HAL_UNLOCK(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003f24:	4653      	mov	r3, sl
 8003f26:	e06d      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8003f28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f2a:	b292      	uxth	r2, r2
 8003f2c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff fdd0 	bl	8003ae0 <I2C_TransferConfig>
 8003f40:	e00f      	b.n	8003f62 <HAL_I2C_Mem_Write+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 8003f42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f44:	b292      	uxth	r2, r2
 8003f46:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	4629      	mov	r1, r5
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7ff fdc3 	bl	8003ae0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003f5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d032      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	463a      	mov	r2, r7
 8003f64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f66:	4620      	mov	r0, r4
 8003f68:	f7ff fe1d 	bl	8003ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d14f      	bne.n	8004010 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f90:	b292      	uxth	r2, r2
 8003f92:	2a00      	cmp	r2, #0
 8003f94:	d0e1      	beq.n	8003f5a <HAL_I2C_Mem_Write+0xec>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1df      	bne.n	8003f5a <HAL_I2C_Mem_Write+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f9a:	9700      	str	r7, [sp, #0]
 8003f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f7ff fe2a 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003fa8:	bba0      	cbnz	r0, 8004014 <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003faa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2bff      	cmp	r3, #255	; 0xff
 8003fb0:	d9c7      	bls.n	8003f42 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb2:	22ff      	movs	r2, #255	; 0xff
 8003fb4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f7ff fd8d 	bl	8003ae0 <I2C_TransferConfig>
 8003fc6:	e7c8      	b.n	8003f5a <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc8:	463a      	mov	r2, r7
 8003fca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff feaf 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	bb00      	cbnz	r0, 8004018 <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	2120      	movs	r1, #32
 8003fda:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003fdc:	6820      	ldr	r0, [r4, #0]
 8003fde:	6842      	ldr	r2, [r0, #4]
 8003fe0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003fe4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003fe8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003ffc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004000:	e000      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
}
 8004004:	4618      	mov	r0, r3
 8004006:	b002      	add	sp, #8
 8004008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800400c:	2302      	movs	r3, #2
 800400e:	e7f9      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e7f7      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e7f5      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e7f3      	b.n	8004004 <HAL_I2C_Mem_Write+0x196>

0800401c <HAL_I2C_Mem_Read>:
{
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004026:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800402a:	b2ed      	uxtb	r5, r5
 800402c:	2d20      	cmp	r5, #32
 800402e:	f040 80c1 	bne.w	80041b4 <HAL_I2C_Mem_Read+0x198>
    if ((pData == NULL) || (Size == 0U))
 8004032:	fab6 f586 	clz	r5, r6
 8004036:	096d      	lsrs	r5, r5, #5
 8004038:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800403a:	2c00      	cmp	r4, #0
 800403c:	bf08      	it	eq
 800403e:	2501      	moveq	r5, #1
 8004040:	b9d5      	cbnz	r5, 8004078 <HAL_I2C_Mem_Read+0x5c>
    __HAL_LOCK(hi2c);
 8004042:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004046:	2c01      	cmp	r4, #1
 8004048:	f000 80b9 	beq.w	80041be <HAL_I2C_Mem_Read+0x1a2>
 800404c:	4698      	mov	r8, r3
 800404e:	4691      	mov	r9, r2
 8004050:	460d      	mov	r5, r1
 8004052:	4604      	mov	r4, r0
 8004054:	f04f 0a01 	mov.w	sl, #1
 8004058:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800405c:	f7fe f978 	bl	8002350 <HAL_GetTick>
 8004060:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004062:	9000      	str	r0, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	4652      	mov	r2, sl
 8004068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800406c:	4620      	mov	r0, r4
 800406e:	f7ff fdc5 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8004072:	b130      	cbz	r0, 8004082 <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e09e      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800407c:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e099      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004082:	2322      	movs	r3, #34	; 0x22
 8004084:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800408e:	2300      	movs	r3, #0
 8004090:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004094:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004096:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004098:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800409a:	9701      	str	r7, [sp, #4]
 800409c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	4643      	mov	r3, r8
 80040a2:	464a      	mov	r2, r9
 80040a4:	4629      	mov	r1, r5
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7ff fe0a 	bl	8003cc0 <I2C_RequestMemoryRead>
 80040ac:	b970      	cbnz	r0, 80040cc <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2bff      	cmp	r3, #255	; 0xff
 80040b4:	d90f      	bls.n	80040d6 <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b6:	22ff      	movs	r2, #255	; 0xff
 80040b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80040ba:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <HAL_I2C_Mem_Read+0x1b4>)
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c2:	4629      	mov	r1, r5
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7ff fd0b 	bl	8003ae0 <I2C_TransferConfig>
 80040ca:	e021      	b.n	8004110 <HAL_I2C_Mem_Read+0xf4>
      __HAL_UNLOCK(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80040d2:	4653      	mov	r3, sl
 80040d4:	e06f      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 80040d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040d8:	b292      	uxth	r2, r2
 80040da:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80040dc:	4b3c      	ldr	r3, [pc, #240]	; (80041d0 <HAL_I2C_Mem_Read+0x1b4>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	4629      	mov	r1, r5
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff fcf9 	bl	8003ae0 <I2C_TransferConfig>
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Mem_Read+0xf4>
          hi2c->XferSize = hi2c->XferCount;
 80040f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040f2:	b292      	uxth	r2, r2
 80040f4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040f6:	2300      	movs	r3, #0
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	4629      	mov	r1, r5
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff fcec 	bl	8003ae0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004108:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d034      	beq.n	800417a <HAL_I2C_Mem_Read+0x15e>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004110:	9700      	str	r7, [sp, #0]
 8004112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004114:	2200      	movs	r2, #0
 8004116:	2104      	movs	r1, #4
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff fd6f 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800411e:	2800      	cmp	r0, #0
 8004120:	d14f      	bne.n	80041c2 <HAL_I2C_Mem_Read+0x1a6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004128:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800412a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412c:	3301      	adds	r3, #1
 800412e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004130:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29b      	uxth	r3, r3
 8004136:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004138:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800413a:	3a01      	subs	r2, #1
 800413c:	b292      	uxth	r2, r2
 800413e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004140:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004142:	b292      	uxth	r2, r2
 8004144:	2a00      	cmp	r2, #0
 8004146:	d0df      	beq.n	8004108 <HAL_I2C_Mem_Read+0xec>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1dd      	bne.n	8004108 <HAL_I2C_Mem_Read+0xec>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800414c:	9700      	str	r7, [sp, #0]
 800414e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004150:	2200      	movs	r2, #0
 8004152:	2180      	movs	r1, #128	; 0x80
 8004154:	4620      	mov	r0, r4
 8004156:	f7ff fd51 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800415a:	bba0      	cbnz	r0, 80041c6 <HAL_I2C_Mem_Read+0x1aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2bff      	cmp	r3, #255	; 0xff
 8004162:	d9c5      	bls.n	80040f0 <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004164:	22ff      	movs	r2, #255	; 0xff
 8004166:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004168:	2300      	movs	r3, #0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004170:	4629      	mov	r1, r5
 8004172:	4620      	mov	r0, r4
 8004174:	f7ff fcb4 	bl	8003ae0 <I2C_TransferConfig>
 8004178:	e7c6      	b.n	8004108 <HAL_I2C_Mem_Read+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417a:	463a      	mov	r2, r7
 800417c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff fdd6 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	bb00      	cbnz	r0, 80041ca <HAL_I2C_Mem_Read+0x1ae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	2120      	movs	r1, #32
 800418c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	6842      	ldr	r2, [r0, #4]
 8004192:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004196:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800419a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041a8:	2200      	movs	r2, #0
 80041aa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80041ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80041b2:	e000      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	b002      	add	sp, #8
 80041ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80041be:	2302      	movs	r3, #2
 80041c0:	e7f9      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e7f7      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e7f5      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e7f3      	b.n	80041b6 <HAL_I2C_Mem_Read+0x19a>
 80041ce:	bf00      	nop
 80041d0:	80002400 	.word	0x80002400

080041d4 <HAL_I2C_GetState>:
  return hi2c->State;
 80041d4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80041d8:	4770      	bx	lr

080041da <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d124      	bne.n	800422e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d022      	beq.n	8004232 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80041ec:	2301      	movs	r3, #1
 80041ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f2:	2324      	movs	r3, #36	; 0x24
 80041f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f8:	6802      	ldr	r2, [r0, #0]
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004202:	6802      	ldr	r2, [r0, #0]
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800420a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800420c:	6802      	ldr	r2, [r0, #0]
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	4319      	orrs	r1, r3
 8004212:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004214:	6802      	ldr	r2, [r0, #0]
 8004216:	6813      	ldr	r3, [r2, #0]
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800421e:	2320      	movs	r3, #32
 8004220:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800422a:	4618      	mov	r0, r3
 800422c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800422e:	2002      	movs	r0, #2
 8004230:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004232:	2002      	movs	r0, #2
  }
}
 8004234:	4770      	bx	lr

08004236 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004236:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	d122      	bne.n	8004286 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004240:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004244:	2b01      	cmp	r3, #1
 8004246:	d020      	beq.n	800428a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004248:	2301      	movs	r3, #1
 800424a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800424e:	2324      	movs	r3, #36	; 0x24
 8004250:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004254:	6802      	ldr	r2, [r0, #0]
 8004256:	6813      	ldr	r3, [r2, #0]
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800425e:	6802      	ldr	r2, [r0, #0]
 8004260:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004266:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800426a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800426c:	6802      	ldr	r2, [r0, #0]
 800426e:	6813      	ldr	r3, [r2, #0]
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004276:	2320      	movs	r3, #32
 8004278:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	2300      	movs	r3, #0
 800427e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004282:	4618      	mov	r0, r3
 8004284:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004286:	2002      	movs	r0, #2
 8004288:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800428a:	2002      	movs	r0, #2
  }
}
 800428c:	4770      	bx	lr
	...

08004290 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004290:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004292:	684d      	ldr	r5, [r1, #4]
 8004294:	6804      	ldr	r4, [r0, #0]
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800429c:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800429e:	01d2      	lsls	r2, r2, #7
 80042a0:	4414      	add	r4, r2
 80042a2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80042a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042ae:	680b      	ldr	r3, [r1, #0]
 80042b0:	6804      	ldr	r4, [r0, #0]
 80042b2:	68e6      	ldr	r6, [r4, #12]
 80042b4:	f3c6 460b 	ubfx	r6, r6, #16, #12
 80042b8:	4433      	add	r3, r6
 80042ba:	3301      	adds	r3, #1
 80042bc:	4414      	add	r4, r2
 80042be:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80042c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80042c6:	68cd      	ldr	r5, [r1, #12]
 80042c8:	6804      	ldr	r4, [r0, #0]
 80042ca:	68e3      	ldr	r3, [r4, #12]
 80042cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042d0:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80042d2:	4414      	add	r4, r2
 80042d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80042d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042e0:	688b      	ldr	r3, [r1, #8]
 80042e2:	6804      	ldr	r4, [r0, #0]
 80042e4:	68e6      	ldr	r6, [r4, #12]
 80042e6:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80042ea:	4433      	add	r3, r6
 80042ec:	3301      	adds	r3, #1
 80042ee:	4414      	add	r4, r2
 80042f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80042f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042f8:	6803      	ldr	r3, [r0, #0]
 80042fa:	4413      	add	r3, r2
 80042fc:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8004300:	f024 0407 	bic.w	r4, r4, #7
 8004304:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004308:	6803      	ldr	r3, [r0, #0]
 800430a:	4413      	add	r3, r2
 800430c:	690c      	ldr	r4, [r1, #16]
 800430e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004312:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004316:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800431a:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800431c:	6805      	ldr	r5, [r0, #0]
 800431e:	4415      	add	r5, r2
 8004320:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004324:	2400      	movs	r4, #0
 8004326:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800432a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800432e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004332:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004336:	6805      	ldr	r5, [r0, #0]
 8004338:	4415      	add	r5, r2
 800433a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800433e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004342:	6803      	ldr	r3, [r0, #0]
 8004344:	4413      	add	r3, r2
 8004346:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800434a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800434e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004352:	6803      	ldr	r3, [r0, #0]
 8004354:	4413      	add	r3, r2
 8004356:	694d      	ldr	r5, [r1, #20]
 8004358:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800435c:	6803      	ldr	r3, [r0, #0]
 800435e:	4413      	add	r3, r2
 8004360:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8004364:	4d2d      	ldr	r5, [pc, #180]	; (800441c <LTDC_SetConfig+0x18c>)
 8004366:	4035      	ands	r5, r6
 8004368:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800436c:	69cd      	ldr	r5, [r1, #28]
 800436e:	6a0e      	ldr	r6, [r1, #32]
 8004370:	6803      	ldr	r3, [r0, #0]
 8004372:	4413      	add	r3, r2
 8004374:	4335      	orrs	r5, r6
 8004376:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800437a:	6803      	ldr	r3, [r0, #0]
 800437c:	4413      	add	r3, r2
 800437e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8004382:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004386:	6803      	ldr	r3, [r0, #0]
 8004388:	4413      	add	r3, r2
 800438a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800438c:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004390:	690b      	ldr	r3, [r1, #16]
 8004392:	b16b      	cbz	r3, 80043b0 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004394:	2b01      	cmp	r3, #1
 8004396:	d03a      	beq.n	800440e <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004398:	2b02      	cmp	r3, #2
 800439a:	bf18      	it	ne
 800439c:	2b04      	cmpne	r3, #4
 800439e:	d038      	beq.n	8004412 <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d038      	beq.n	8004416 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043a4:	2b07      	cmp	r3, #7
 80043a6:	d001      	beq.n	80043ac <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e002      	b.n	80043b2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 80043ac:	2302      	movs	r3, #2
 80043ae:	e000      	b.n	80043b2 <LTDC_SetConfig+0x122>
    tmp = 4U;
 80043b0:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043b2:	6804      	ldr	r4, [r0, #0]
 80043b4:	4414      	add	r4, r2
 80043b6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80043ba:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80043be:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043c2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80043c4:	fb03 f504 	mul.w	r5, r3, r4
 80043c8:	684c      	ldr	r4, [r1, #4]
 80043ca:	680e      	ldr	r6, [r1, #0]
 80043cc:	1ba4      	subs	r4, r4, r6
 80043ce:	fb03 f304 	mul.w	r3, r3, r4
 80043d2:	3303      	adds	r3, #3
 80043d4:	6804      	ldr	r4, [r0, #0]
 80043d6:	4414      	add	r4, r2
 80043d8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80043dc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043e0:	6803      	ldr	r3, [r0, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 80043e8:	4c0d      	ldr	r4, [pc, #52]	; (8004420 <LTDC_SetConfig+0x190>)
 80043ea:	402c      	ands	r4, r5
 80043ec:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043f0:	6803      	ldr	r3, [r0, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80043f6:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043fa:	6803      	ldr	r3, [r0, #0]
 80043fc:	441a      	add	r2, r3
 80043fe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 800440a:	bcf0      	pop	{r4, r5, r6, r7}
 800440c:	4770      	bx	lr
    tmp = 3U;
 800440e:	2303      	movs	r3, #3
 8004410:	e7cf      	b.n	80043b2 <LTDC_SetConfig+0x122>
    tmp = 2U;
 8004412:	2302      	movs	r3, #2
 8004414:	e7cd      	b.n	80043b2 <LTDC_SetConfig+0x122>
 8004416:	2302      	movs	r3, #2
 8004418:	e7cb      	b.n	80043b2 <LTDC_SetConfig+0x122>
 800441a:	bf00      	nop
 800441c:	fffff8f8 	.word	0xfffff8f8
 8004420:	fffff800 	.word	0xfffff800

08004424 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8004424:	2800      	cmp	r0, #0
 8004426:	d072      	beq.n	800450e <HAL_LTDC_Init+0xea>
{
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800442c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d067      	beq.n	8004504 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	6993      	ldr	r3, [r2, #24]
 800443e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004442:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004444:	6821      	ldr	r1, [r4, #0]
 8004446:	698a      	ldr	r2, [r1, #24]
 8004448:	6863      	ldr	r3, [r4, #4]
 800444a:	68a0      	ldr	r0, [r4, #8]
 800444c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800444e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004450:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004452:	6920      	ldr	r0, [r4, #16]
 8004454:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004456:	4313      	orrs	r3, r2
 8004458:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800445a:	6821      	ldr	r1, [r4, #0]
 800445c:	688a      	ldr	r2, [r1, #8]
 800445e:	4b2d      	ldr	r3, [pc, #180]	; (8004514 <HAL_LTDC_Init+0xf0>)
 8004460:	401a      	ands	r2, r3
 8004462:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004464:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004466:	6820      	ldr	r0, [r4, #0]
 8004468:	6882      	ldr	r2, [r0, #8]
 800446a:	69a1      	ldr	r1, [r4, #24]
 800446c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004470:	430a      	orrs	r2, r1
 8004472:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004474:	6821      	ldr	r1, [r4, #0]
 8004476:	68ca      	ldr	r2, [r1, #12]
 8004478:	401a      	ands	r2, r3
 800447a:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800447c:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	68c2      	ldr	r2, [r0, #12]
 8004482:	6a21      	ldr	r1, [r4, #32]
 8004484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004488:	430a      	orrs	r2, r1
 800448a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800448c:	6821      	ldr	r1, [r4, #0]
 800448e:	690a      	ldr	r2, [r1, #16]
 8004490:	401a      	ands	r2, r3
 8004492:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004494:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	6902      	ldr	r2, [r0, #16]
 800449a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800449c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80044a0:	430a      	orrs	r2, r1
 80044a2:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80044a4:	6821      	ldr	r1, [r4, #0]
 80044a6:	694a      	ldr	r2, [r1, #20]
 80044a8:	4013      	ands	r3, r2
 80044aa:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80044ae:	6821      	ldr	r1, [r4, #0]
 80044b0:	694b      	ldr	r3, [r1, #20]
 80044b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80044b8:	4313      	orrs	r3, r2
 80044ba:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044bc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044c0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80044c4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044c6:	6821      	ldr	r1, [r4, #0]
 80044c8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80044ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80044ce:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80044d0:	6821      	ldr	r1, [r4, #0]
 80044d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80044d4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80044d8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80044dc:	4303      	orrs	r3, r0
 80044de:	4313      	orrs	r3, r2
 80044e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80044e6:	f043 0306 	orr.w	r3, r3, #6
 80044ea:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	6993      	ldr	r3, [r2, #24]
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044f6:	2000      	movs	r0, #0
 80044f8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004502:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004504:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004508:	f007 fe7c 	bl	800c204 <HAL_LTDC_MspInit>
 800450c:	e792      	b.n	8004434 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800450e:	2001      	movs	r0, #1
}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	f000f800 	.word	0xf000f800

08004518 <HAL_LTDC_DeInit>:
{
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 800451c:	f007 ff06 	bl	800c32c <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004520:	2000      	movs	r0, #0
 8004522:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_RESET;
 8004526:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800452a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800452e:	bd10      	pop	{r4, pc}

08004530 <HAL_LTDC_ErrorCallback>:
}
 8004530:	4770      	bx	lr

08004532 <HAL_LTDC_ReloadEventCallback>:
}
 8004532:	4770      	bx	lr

08004534 <HAL_LTDC_IRQHandler>:
{
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004538:	6803      	ldr	r3, [r0, #0]
 800453a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800453c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800453e:	f015 0f04 	tst.w	r5, #4
 8004542:	d002      	beq.n	800454a <HAL_LTDC_IRQHandler+0x16>
 8004544:	f016 0f04 	tst.w	r6, #4
 8004548:	d112      	bne.n	8004570 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800454a:	f015 0f02 	tst.w	r5, #2
 800454e:	d002      	beq.n	8004556 <HAL_LTDC_IRQHandler+0x22>
 8004550:	f016 0f02 	tst.w	r6, #2
 8004554:	d121      	bne.n	800459a <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004556:	f015 0f01 	tst.w	r5, #1
 800455a:	d002      	beq.n	8004562 <HAL_LTDC_IRQHandler+0x2e>
 800455c:	f016 0f01 	tst.w	r6, #1
 8004560:	d132      	bne.n	80045c8 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004562:	f015 0f08 	tst.w	r5, #8
 8004566:	d002      	beq.n	800456e <HAL_LTDC_IRQHandler+0x3a>
 8004568:	f016 0f08 	tst.w	r6, #8
 800456c:	d13d      	bne.n	80045ea <HAL_LTDC_IRQHandler+0xb6>
}
 800456e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004578:	6803      	ldr	r3, [r0, #0]
 800457a:	2204      	movs	r2, #4
 800457c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800457e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800458a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800458e:	2300      	movs	r3, #0
 8004590:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004594:	f7ff ffcc 	bl	8004530 <HAL_LTDC_ErrorCallback>
 8004598:	e7d7      	b.n	800454a <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800459e:	f023 0302 	bic.w	r3, r3, #2
 80045a2:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	2202      	movs	r2, #2
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80045aa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80045b4:	2304      	movs	r3, #4
 80045b6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80045ba:	2300      	movs	r3, #0
 80045bc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff ffb5 	bl	8004530 <HAL_LTDC_ErrorCallback>
 80045c6:	e7c6      	b.n	8004556 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80045c8:	6822      	ldr	r2, [r4, #0]
 80045ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	2301      	movs	r3, #1
 80045d6:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80045d8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80045dc:	2300      	movs	r3, #0
 80045de:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80045e2:	4620      	mov	r0, r4
 80045e4:	f008 fa56 	bl	800ca94 <HAL_LTDC_LineEventCallback>
 80045e8:	e7bb      	b.n	8004562 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80045ee:	f023 0308 	bic.w	r3, r3, #8
 80045f2:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	2208      	movs	r2, #8
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004600:	2300      	movs	r3, #0
 8004602:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff ff93 	bl	8004532 <HAL_LTDC_ReloadEventCallback>
}
 800460c:	e7af      	b.n	800456e <HAL_LTDC_IRQHandler+0x3a>

0800460e <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 800460e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d027      	beq.n	8004666 <HAL_LTDC_ConfigLayer+0x58>
{
 8004616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461a:	4694      	mov	ip, r2
 800461c:	460f      	mov	r7, r1
 800461e:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8004620:	f04f 0801 	mov.w	r8, #1
 8004624:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004628:	2302      	movs	r3, #2
 800462a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800462e:	2434      	movs	r4, #52	; 0x34
 8004630:	fb04 0402 	mla	r4, r4, r2, r0
 8004634:	3438      	adds	r4, #56	; 0x38
 8004636:	460d      	mov	r5, r1
 8004638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800463a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800463c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800463e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004648:	4662      	mov	r2, ip
 800464a:	4639      	mov	r1, r7
 800464c:	4630      	mov	r0, r6
 800464e:	f7ff fe1f 	bl	8004290 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004658:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800465c:	2000      	movs	r0, #0
 800465e:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8004666:	2002      	movs	r0, #2
}
 8004668:	4770      	bx	lr

0800466a <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 800466a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d01d      	beq.n	80046ae <HAL_LTDC_ConfigColorKeying+0x44>
{
 8004672:	b430      	push	{r4, r5}
  __HAL_LOCK(hltdc);
 8004674:	2401      	movs	r4, #1
 8004676:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800467a:	2302      	movs	r3, #2
 800467c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8004680:	6803      	ldr	r3, [r0, #0]
 8004682:	01d2      	lsls	r2, r2, #7
 8004684:	4413      	add	r3, r2
 8004686:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 800468a:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 800468e:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8004692:	6803      	ldr	r3, [r0, #0]
 8004694:	441a      	add	r2, r3
 8004696:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	625c      	str	r4, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800469e:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80046a2:	2300      	movs	r3, #0
 80046a4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80046a8:	4618      	mov	r0, r3
}
 80046aa:	bc30      	pop	{r4, r5}
 80046ac:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80046ae:	2002      	movs	r0, #2
}
 80046b0:	4770      	bx	lr

080046b2 <HAL_LTDC_ConfigCLUT>:
{
 80046b2:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hltdc);
 80046b4:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80046b8:	2c01      	cmp	r4, #1
 80046ba:	d036      	beq.n	800472a <HAL_LTDC_ConfigCLUT+0x78>
 80046bc:	2401      	movs	r4, #1
 80046be:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046c2:	2402      	movs	r4, #2
 80046c4:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  for (counter = 0U; (counter < CLUTSize); counter++)
 80046c8:	2600      	movs	r6, #0
 80046ca:	e012      	b.n	80046f2 <HAL_LTDC_ConfigCLUT+0x40>
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80046cc:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 80046d0:	680f      	ldr	r7, [r1, #0]
 80046d2:	b2fd      	uxtb	r5, r7
 80046d4:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 80046d8:	f407 457f 	and.w	r5, r7, #65280	; 0xff00
 80046dc:	432c      	orrs	r4, r5
 80046de:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 80046e2:	433c      	orrs	r4, r7
    pcolorlut++;
 80046e4:	3104      	adds	r1, #4
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80046e6:	6805      	ldr	r5, [r0, #0]
 80046e8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
 80046ec:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
  for (counter = 0U; (counter < CLUTSize); counter++)
 80046f0:	3601      	adds	r6, #1
 80046f2:	4296      	cmp	r6, r2
 80046f4:	d210      	bcs.n	8004718 <HAL_LTDC_ConfigCLUT+0x66>
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80046f6:	2434      	movs	r4, #52	; 0x34
 80046f8:	fb04 0403 	mla	r4, r4, r3, r0
 80046fc:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 80046fe:	2c06      	cmp	r4, #6
 8004700:	d0e4      	beq.n	80046cc <HAL_LTDC_ConfigCLUT+0x1a>
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8004702:	680d      	ldr	r5, [r1, #0]
 8004704:	b2ec      	uxtb	r4, r5
 8004706:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 800470a:	f405 477f 	and.w	r7, r5, #65280	; 0xff00
 800470e:	433c      	orrs	r4, r7
 8004710:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8004714:	432c      	orrs	r4, r5
 8004716:	e7e5      	b.n	80046e4 <HAL_LTDC_ConfigCLUT+0x32>
  hltdc->State = HAL_LTDC_STATE_READY;
 8004718:	2301      	movs	r3, #1
 800471a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800471e:	2300      	movs	r3, #0
 8004720:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8004724:	4618      	mov	r0, r3
}
 8004726:	bcf0      	pop	{r4, r5, r6, r7}
 8004728:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800472a:	2002      	movs	r0, #2
 800472c:	e7fb      	b.n	8004726 <HAL_LTDC_ConfigCLUT+0x74>

0800472e <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 800472e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d017      	beq.n	8004766 <HAL_LTDC_EnableColorKeying+0x38>
 8004736:	2201      	movs	r2, #1
 8004738:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8004742:	6803      	ldr	r3, [r0, #0]
 8004744:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8004748:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800474c:	f043 0302 	orr.w	r3, r3, #2
 8004750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004754:	6803      	ldr	r3, [r0, #0]
 8004756:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8004758:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800475c:	2300      	movs	r3, #0
 800475e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8004762:	4618      	mov	r0, r3
 8004764:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8004766:	2002      	movs	r0, #2
}
 8004768:	4770      	bx	lr

0800476a <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 800476a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d017      	beq.n	80047a2 <HAL_LTDC_DisableColorKeying+0x38>
 8004772:	2201      	movs	r2, #1
 8004774:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800477e:	6803      	ldr	r3, [r0, #0]
 8004780:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8004784:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8004788:	f023 0302 	bic.w	r3, r3, #2
 800478c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004790:	6803      	ldr	r3, [r0, #0]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8004794:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004798:	2300      	movs	r3, #0
 800479a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800479e:	4618      	mov	r0, r3
 80047a0:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80047a2:	2002      	movs	r0, #2
}
 80047a4:	4770      	bx	lr

080047a6 <HAL_LTDC_SetWindowPosition>:
{
 80047a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80047a8:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80047ac:	2c01      	cmp	r4, #1
 80047ae:	d021      	beq.n	80047f4 <HAL_LTDC_SetWindowPosition+0x4e>
 80047b0:	4604      	mov	r4, r0
 80047b2:	2501      	movs	r5, #1
 80047b4:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047b8:	2002      	movs	r0, #2
 80047ba:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80047be:	2034      	movs	r0, #52	; 0x34
 80047c0:	fb00 f003 	mul.w	r0, r0, r3
 80047c4:	f100 0738 	add.w	r7, r0, #56	; 0x38
  pLayerCfg->WindowX0 = X0;
 80047c8:	4420      	add	r0, r4
 80047ca:	6381      	str	r1, [r0, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80047cc:	6e06      	ldr	r6, [r0, #96]	; 0x60
 80047ce:	440e      	add	r6, r1
 80047d0:	63c6      	str	r6, [r0, #60]	; 0x3c
  pLayerCfg->WindowY0 = Y0;
 80047d2:	6402      	str	r2, [r0, #64]	; 0x40
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80047d4:	6e46      	ldr	r6, [r0, #100]	; 0x64
 80047d6:	4432      	add	r2, r6
 80047d8:	6442      	str	r2, [r0, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047da:	461a      	mov	r2, r3
 80047dc:	19e1      	adds	r1, r4, r7
 80047de:	4620      	mov	r0, r4
 80047e0:	f7ff fd56 	bl	8004290 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80047e8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80047ec:	2000      	movs	r0, #0
 80047ee:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80047f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80047f4:	2002      	movs	r0, #2
 80047f6:	e7fc      	b.n	80047f2 <HAL_LTDC_SetWindowPosition+0x4c>

080047f8 <HAL_LTDC_SetAlpha>:
{
 80047f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 80047fa:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d019      	beq.n	8004836 <HAL_LTDC_SetAlpha+0x3e>
 8004802:	4604      	mov	r4, r0
 8004804:	2501      	movs	r5, #1
 8004806:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800480a:	2302      	movs	r3, #2
 800480c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004810:	2334      	movs	r3, #52	; 0x34
 8004812:	fb03 f302 	mul.w	r3, r3, r2
 8004816:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 800481a:	4423      	add	r3, r4
 800481c:	64d9      	str	r1, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800481e:	1821      	adds	r1, r4, r0
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff fd35 	bl	8004290 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800482a:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800482e:	2000      	movs	r0, #0
 8004830:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004834:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8004836:	2002      	movs	r0, #2
 8004838:	e7fc      	b.n	8004834 <HAL_LTDC_SetAlpha+0x3c>

0800483a <HAL_LTDC_SetAddress>:
{
 800483a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 800483c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004840:	2b01      	cmp	r3, #1
 8004842:	d019      	beq.n	8004878 <HAL_LTDC_SetAddress+0x3e>
 8004844:	4604      	mov	r4, r0
 8004846:	2501      	movs	r5, #1
 8004848:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800484c:	2302      	movs	r3, #2
 800484e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004852:	2334      	movs	r3, #52	; 0x34
 8004854:	fb03 f302 	mul.w	r3, r3, r2
 8004858:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 800485c:	4423      	add	r3, r4
 800485e:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004860:	1821      	adds	r1, r4, r0
 8004862:	4620      	mov	r0, r4
 8004864:	f7ff fd14 	bl	8004290 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800486c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004870:	2000      	movs	r0, #0
 8004872:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004876:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8004878:	2002      	movs	r0, #2
 800487a:	e7fc      	b.n	8004876 <HAL_LTDC_SetAddress+0x3c>

0800487c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800487c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004880:	2b01      	cmp	r3, #1
 8004882:	d01a      	beq.n	80048ba <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8004884:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8004886:	2201      	movs	r2, #1
 8004888:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800488c:	2302      	movs	r3, #2
 800488e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004892:	6804      	ldr	r4, [r0, #0]
 8004894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_LTDC_ProgramLineEvent+0x44>)
 800489e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80048a0:	6801      	ldr	r1, [r0, #0]
 80048a2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80048a4:	4313      	orrs	r3, r2
 80048a6:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80048a8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80048ac:	2300      	movs	r3, #0
 80048ae:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80048b2:	4618      	mov	r0, r3
}
 80048b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b8:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80048ba:	2002      	movs	r0, #2
}
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40016800 	.word	0x40016800

080048c4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c4:	4a02      	ldr	r2, [pc, #8]	; (80048d0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048cc:	6013      	str	r3, [r2, #0]
}
 80048ce:	4770      	bx	lr
 80048d0:	40007000 	.word	0x40007000

080048d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_PWREx_EnableOverDrive+0x74>)
 80048da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048ec:	4a17      	ldr	r2, [pc, #92]	; (800494c <HAL_PWREx_EnableOverDrive+0x78>)
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f6:	f7fd fd2b 	bl	8002350 <HAL_GetTick>
 80048fa:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <HAL_PWREx_EnableOverDrive+0x78>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004904:	d108      	bne.n	8004918 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004906:	f7fd fd23 	bl	8002350 <HAL_GetTick>
 800490a:	1b00      	subs	r0, r0, r4
 800490c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004910:	d9f4      	bls.n	80048fc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8004912:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8004914:	b002      	add	sp, #8
 8004916:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004918:	4a0c      	ldr	r2, [pc, #48]	; (800494c <HAL_PWREx_EnableOverDrive+0x78>)
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004920:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004922:	f7fd fd15 	bl	8002350 <HAL_GetTick>
 8004926:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <HAL_PWREx_EnableOverDrive+0x78>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004930:	d107      	bne.n	8004942 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004932:	f7fd fd0d 	bl	8002350 <HAL_GetTick>
 8004936:	1b00      	subs	r0, r0, r4
 8004938:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800493c:	d9f4      	bls.n	8004928 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800493e:	2003      	movs	r0, #3
 8004940:	e7e8      	b.n	8004914 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8004942:	2000      	movs	r0, #0
 8004944:	e7e6      	b.n	8004914 <HAL_PWREx_EnableOverDrive+0x40>
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40007000 	.word	0x40007000

08004950 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8004950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004954:	4605      	mov	r5, r0
 8004956:	460f      	mov	r7, r1
 8004958:	4616      	mov	r6, r2
 800495a:	4698      	mov	r8, r3
 800495c:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800495e:	682b      	ldr	r3, [r5, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	423b      	tst	r3, r7
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	42b3      	cmp	r3, r6
 800496c:	d012      	beq.n	8004994 <QSPI_WaitFlagStateUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004972:	d0f4      	beq.n	800495e <QSPI_WaitFlagStateUntilTimeout+0xe>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8004974:	b12c      	cbz	r4, 8004982 <QSPI_WaitFlagStateUntilTimeout+0x32>
 8004976:	f7fd fceb 	bl	8002350 <HAL_GetTick>
 800497a:	eba0 0008 	sub.w	r0, r0, r8
 800497e:	42a0      	cmp	r0, r4
 8004980:	d9ed      	bls.n	800495e <QSPI_WaitFlagStateUntilTimeout+0xe>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004982:	2304      	movs	r3, #4
 8004984:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004988:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	646b      	str	r3, [r5, #68]	; 0x44
        
        return HAL_ERROR;
 8004990:	2001      	movs	r0, #1
 8004992:	e000      	b.n	8004996 <QSPI_WaitFlagStateUntilTimeout+0x46>
      }
    }
  }
  return HAL_OK;
 8004994:	2000      	movs	r0, #0
}
 8004996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800499a <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 800499a:	6481      	str	r1, [r0, #72]	; 0x48
}
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_QSPI_Init>:
{
 80049a0:	b530      	push	{r4, r5, lr}
 80049a2:	b083      	sub	sp, #12
 80049a4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049a6:	f7fd fcd3 	bl	8002350 <HAL_GetTick>
  if(hqspi == NULL)
 80049aa:	2c00      	cmp	r4, #0
 80049ac:	d054      	beq.n	8004a58 <HAL_QSPI_Init+0xb8>
 80049ae:	4605      	mov	r5, r0
  __HAL_LOCK(hqspi);
 80049b0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d050      	beq.n	8004a5c <HAL_QSPI_Init+0xbc>
 80049ba:	2301      	movs	r3, #1
 80049bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80049c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d03c      	beq.n	8004a42 <HAL_QSPI_Init+0xa2>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80049c8:	6821      	ldr	r1, [r4, #0]
 80049ca:	680b      	ldr	r3, [r1, #0]
 80049cc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80049d0:	68a2      	ldr	r2, [r4, #8]
 80049d2:	3a01      	subs	r2, #1
 80049d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049d8:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80049da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	462b      	mov	r3, r5
 80049e0:	2200      	movs	r2, #0
 80049e2:	2120      	movs	r1, #32
 80049e4:	4620      	mov	r0, r4
 80049e6:	f7ff ffb3 	bl	8004950 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80049ea:	4602      	mov	r2, r0
 80049ec:	bb18      	cbnz	r0, 8004a36 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	6803      	ldr	r3, [r0, #0]
 80049f2:	491b      	ldr	r1, [pc, #108]	; (8004a60 <HAL_QSPI_Init+0xc0>)
 80049f4:	4019      	ands	r1, r3
 80049f6:	6865      	ldr	r5, [r4, #4]
 80049f8:	68e3      	ldr	r3, [r4, #12]
 80049fa:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80049fe:	69e5      	ldr	r5, [r4, #28]
 8004a00:	432b      	orrs	r3, r5
 8004a02:	6a25      	ldr	r5, [r4, #32]
 8004a04:	432b      	orrs	r3, r5
 8004a06:	430b      	orrs	r3, r1
 8004a08:	6003      	str	r3, [r0, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	6841      	ldr	r1, [r0, #4]
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_QSPI_Init+0xc4>)
 8004a10:	400b      	ands	r3, r1
 8004a12:	6925      	ldr	r5, [r4, #16]
 8004a14:	6961      	ldr	r1, [r4, #20]
 8004a16:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004a1a:	69a5      	ldr	r5, [r4, #24]
 8004a1c:	4329      	orrs	r1, r5
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	6043      	str	r3, [r0, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	680b      	ldr	r3, [r1, #0]
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	600b      	str	r3, [r1, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8004a36:	2300      	movs	r3, #0
 8004a38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	b003      	add	sp, #12
 8004a40:	bd30      	pop	{r4, r5, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8004a42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7fd f8c2 	bl	8001bd0 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004a4c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff ffa2 	bl	800499a <HAL_QSPI_SetTimeout>
 8004a56:	e7b7      	b.n	80049c8 <HAL_QSPI_Init+0x28>
    return HAL_ERROR;
 8004a58:	2201      	movs	r2, #1
 8004a5a:	e7ef      	b.n	8004a3c <HAL_QSPI_Init+0x9c>
  __HAL_LOCK(hqspi);
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	e7ed      	b.n	8004a3c <HAL_QSPI_Init+0x9c>
 8004a60:	00ffff2f 	.word	0x00ffff2f
 8004a64:	ffe0f8fe 	.word	0xffe0f8fe

08004a68 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	f000 81db 	beq.w	8004e24 <HAL_RCC_OscConfig+0x3bc>
{
 8004a6e:	b570      	push	{r4, r5, r6, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a74:	6803      	ldr	r3, [r0, #0]
 8004a76:	f013 0f01 	tst.w	r3, #1
 8004a7a:	d029      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7c:	4ba2      	ldr	r3, [pc, #648]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d01a      	beq.n	8004abe <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a88:	4b9f      	ldr	r3, [pc, #636]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d00f      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	6863      	ldr	r3, [r4, #4]
 8004a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9a:	d040      	beq.n	8004b1e <HAL_RCC_OscConfig+0xb6>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d154      	bne.n	8004b4a <HAL_RCC_OscConfig+0xe2>
 8004aa0:	4b99      	ldr	r3, [pc, #612]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e039      	b.n	8004b28 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab4:	4b94      	ldr	r3, [pc, #592]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004abc:	d0ea      	beq.n	8004a94 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abe:	4b92      	ldr	r3, [pc, #584]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x68>
 8004ac8:	6863      	ldr	r3, [r4, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 81ac 	beq.w	8004e28 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	f013 0f02 	tst.w	r3, #2
 8004ad6:	d075      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ad8:	4b8b      	ldr	r3, [pc, #556]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f013 0f0c 	tst.w	r3, #12
 8004ae0:	d05e      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae2:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d053      	beq.n	8004b96 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 808a 	beq.w	8004c0a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af6:	4a84      	ldr	r2, [pc, #528]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004af8:	6813      	ldr	r3, [r2, #0]
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fd fc26 	bl	8002350 <HAL_GetTick>
 8004b04:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b06:	4b80      	ldr	r3, [pc, #512]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f013 0f02 	tst.w	r3, #2
 8004b0e:	d173      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b10:	f7fd fc1e 	bl	8002350 <HAL_GetTick>
 8004b14:	1b40      	subs	r0, r0, r5
 8004b16:	2802      	cmp	r0, #2
 8004b18:	d9f5      	bls.n	8004b06 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8004b1a:	2003      	movs	r0, #3
 8004b1c:	e187      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1e:	4a7a      	ldr	r2, [pc, #488]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b26:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	b32b      	cbz	r3, 8004b78 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fc10 	bl	8002350 <HAL_GetTick>
 8004b30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	4b75      	ldr	r3, [pc, #468]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b3a:	d1c9      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fd fc08 	bl	8002350 <HAL_GetTick>
 8004b40:	1b40      	subs	r0, r0, r5
 8004b42:	2864      	cmp	r0, #100	; 0x64
 8004b44:	d9f5      	bls.n	8004b32 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8004b46:	2003      	movs	r0, #3
 8004b48:	e171      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4e:	d009      	beq.n	8004b64 <HAL_RCC_OscConfig+0xfc>
 8004b50:	4b6d      	ldr	r3, [pc, #436]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e7e1      	b.n	8004b28 <HAL_RCC_OscConfig+0xc0>
 8004b64:	4b68      	ldr	r3, [pc, #416]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e7d7      	b.n	8004b28 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8004b78:	f7fd fbea 	bl	8002350 <HAL_GetTick>
 8004b7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	4b62      	ldr	r3, [pc, #392]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b86:	d0a3      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fbe2 	bl	8002350 <HAL_GetTick>
 8004b8c:	1b40      	subs	r0, r0, r5
 8004b8e:	2864      	cmp	r0, #100	; 0x64
 8004b90:	d9f5      	bls.n	8004b7e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8004b92:	2003      	movs	r0, #3
 8004b94:	e14b      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b9e:	d1a6      	bne.n	8004aee <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba0:	4b59      	ldr	r3, [pc, #356]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f013 0f02 	tst.w	r3, #2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x14c>
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	e13c      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb4:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004bb6:	6813      	ldr	r3, [r2, #0]
 8004bb8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004bbc:	6921      	ldr	r1, [r4, #16]
 8004bbe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004bc2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	f013 0f08 	tst.w	r3, #8
 8004bca:	d046      	beq.n	8004c5a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bcc:	6963      	ldr	r3, [r4, #20]
 8004bce:	b383      	cbz	r3, 8004c32 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd0:	4a4d      	ldr	r2, [pc, #308]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004bd2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bda:	f7fd fbb9 	bl	8002350 <HAL_GetTick>
 8004bde:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be0:	4b49      	ldr	r3, [pc, #292]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be4:	f013 0f02 	tst.w	r3, #2
 8004be8:	d137      	bne.n	8004c5a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bea:	f7fd fbb1 	bl	8002350 <HAL_GetTick>
 8004bee:	1b40      	subs	r0, r0, r5
 8004bf0:	2802      	cmp	r0, #2
 8004bf2:	d9f5      	bls.n	8004be0 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	e11a      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf8:	4a43      	ldr	r2, [pc, #268]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004bfa:	6813      	ldr	r3, [r2, #0]
 8004bfc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c00:	6921      	ldr	r1, [r4, #16]
 8004c02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e7dc      	b.n	8004bc4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8004c0a:	4a3f      	ldr	r2, [pc, #252]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004c0c:	6813      	ldr	r3, [r2, #0]
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c14:	f7fd fb9c 	bl	8002350 <HAL_GetTick>
 8004c18:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f013 0f02 	tst.w	r3, #2
 8004c22:	d0cf      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c24:	f7fd fb94 	bl	8002350 <HAL_GetTick>
 8004c28:	1b40      	subs	r0, r0, r5
 8004c2a:	2802      	cmp	r0, #2
 8004c2c:	d9f5      	bls.n	8004c1a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8004c2e:	2003      	movs	r0, #3
 8004c30:	e0fd      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c32:	4a35      	ldr	r2, [pc, #212]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004c34:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fd fb88 	bl	8002350 <HAL_GetTick>
 8004c40:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c46:	f013 0f02 	tst.w	r3, #2
 8004c4a:	d006      	beq.n	8004c5a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4c:	f7fd fb80 	bl	8002350 <HAL_GetTick>
 8004c50:	1b40      	subs	r0, r0, r5
 8004c52:	2802      	cmp	r0, #2
 8004c54:	d9f5      	bls.n	8004c42 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8004c56:	2003      	movs	r0, #3
 8004c58:	e0e9      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	f013 0f04 	tst.w	r3, #4
 8004c60:	d07e      	beq.n	8004d60 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c62:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004c6a:	d11e      	bne.n	8004caa <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c80:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c82:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <HAL_RCC_OscConfig+0x2a4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d021      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x26e>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d13c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x2a8>
 8004c96:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004c98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	671a      	str	r2, [r3, #112]	; 0x70
 8004ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	671a      	str	r2, [r3, #112]	; 0x70
 8004ca8:	e01a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8004caa:	2500      	movs	r5, #0
 8004cac:	e7e9      	b.n	8004c82 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_RCC_OscConfig+0x2a4>)
 8004cb0:	6813      	ldr	r3, [r2, #0]
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004cb8:	f7fd fb4a 	bl	8002350 <HAL_GetTick>
 8004cbc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <HAL_RCC_OscConfig+0x2a4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cc6:	d1e1      	bne.n	8004c8c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc8:	f7fd fb42 	bl	8002350 <HAL_GetTick>
 8004ccc:	1b80      	subs	r0, r0, r6
 8004cce:	2864      	cmp	r0, #100	; 0x64
 8004cd0:	d9f5      	bls.n	8004cbe <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	e0ab      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd6:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004cd8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce0:	68a3      	ldr	r3, [r4, #8]
 8004ce2:	b35b      	cbz	r3, 8004d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fd fb34 	bl	8002350 <HAL_GetTick>
 8004ce8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <HAL_RCC_OscConfig+0x2a0>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	f013 0f02 	tst.w	r3, #2
 8004cf2:	d134      	bne.n	8004d5e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fd fb2c 	bl	8002350 <HAL_GetTick>
 8004cf8:	1b80      	subs	r0, r0, r6
 8004cfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	d9f3      	bls.n	8004cea <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8004d02:	2003      	movs	r0, #3
 8004d04:	e093      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d10:	2b05      	cmp	r3, #5
 8004d12:	d009      	beq.n	8004d28 <HAL_RCC_OscConfig+0x2c0>
 8004d14:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	671a      	str	r2, [r3, #112]	; 0x70
 8004d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d20:	f022 0204 	bic.w	r2, r2, #4
 8004d24:	671a      	str	r2, [r3, #112]	; 0x70
 8004d26:	e7db      	b.n	8004ce0 <HAL_RCC_OscConfig+0x278>
 8004d28:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d2c:	f042 0204 	orr.w	r2, r2, #4
 8004d30:	671a      	str	r2, [r3, #112]	; 0x70
 8004d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	671a      	str	r2, [r3, #112]	; 0x70
 8004d3a:	e7d1      	b.n	8004ce0 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fd fb08 	bl	8002350 <HAL_GetTick>
 8004d40:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d42:	4b3d      	ldr	r3, [pc, #244]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	f013 0f02 	tst.w	r3, #2
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fb00 	bl	8002350 <HAL_GetTick>
 8004d50:	1b80      	subs	r0, r0, r6
 8004d52:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d56:	4298      	cmp	r0, r3
 8004d58:	d9f3      	bls.n	8004d42 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8004d5a:	2003      	movs	r0, #3
 8004d5c:	e067      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d5e:	b9f5      	cbnz	r5, 8004d9e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d60:	69a3      	ldr	r3, [r4, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d062      	beq.n	8004e2c <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d66:	4a34      	ldr	r2, [pc, #208]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004d68:	6892      	ldr	r2, [r2, #8]
 8004d6a:	f002 020c 	and.w	r2, r2, #12
 8004d6e:	2a08      	cmp	r2, #8
 8004d70:	d05f      	beq.n	8004e32 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d019      	beq.n	8004daa <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d76:	4a30      	ldr	r2, [pc, #192]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fd fae6 	bl	8002350 <HAL_GetTick>
 8004d84:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d8e:	d047      	beq.n	8004e20 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d90:	f7fd fade 	bl	8002350 <HAL_GetTick>
 8004d94:	1b00      	subs	r0, r0, r4
 8004d96:	2802      	cmp	r0, #2
 8004d98:	d9f5      	bls.n	8004d86 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004d9a:	2003      	movs	r0, #3
 8004d9c:	e047      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9e:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004da0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6413      	str	r3, [r2, #64]	; 0x40
 8004da8:	e7da      	b.n	8004d60 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004db4:	f7fd facc 	bl	8002350 <HAL_GetTick>
 8004db8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dba:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004dc2:	d006      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fd fac4 	bl	8002350 <HAL_GetTick>
 8004dc8:	1b40      	subs	r0, r0, r5
 8004dca:	2802      	cmp	r0, #2
 8004dcc:	d9f5      	bls.n	8004dba <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8004dce:	2003      	movs	r0, #3
 8004dd0:	e02d      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd2:	69e3      	ldr	r3, [r4, #28]
 8004dd4:	6a22      	ldr	r2, [r4, #32]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004dda:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004dde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004de0:	0852      	lsrs	r2, r2, #1
 8004de2:	3a01      	subs	r2, #1
 8004de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004dee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004df2:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004df4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dfc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dfe:	f7fd faa7 	bl	8002350 <HAL_GetTick>
 8004e02:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <HAL_RCC_OscConfig+0x3d0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e0c:	d106      	bne.n	8004e1c <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0e:	f7fd fa9f 	bl	8002350 <HAL_GetTick>
 8004e12:	1b00      	subs	r0, r0, r4
 8004e14:	2802      	cmp	r0, #2
 8004e16:	d9f5      	bls.n	8004e04 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8004e18:	2003      	movs	r0, #3
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	e006      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e004      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
}
 8004e26:	4770      	bx	lr
        return HAL_ERROR;
 8004e28:	2001      	movs	r0, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8004e2c:	2000      	movs	r0, #0
}
 8004e2e:	b002      	add	sp, #8
 8004e30:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004e32:	2001      	movs	r0, #1
 8004e34:	e7fb      	b.n	8004e2e <HAL_RCC_OscConfig+0x3c6>
 8004e36:	bf00      	nop
 8004e38:	40023800 	.word	0x40023800

08004e3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d044      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x96>
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e4c:	4823      	ldr	r0, [pc, #140]	; (8004edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e4e:	4770      	bx	lr
{
 8004e50:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e54:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e64:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e66:	6859      	ldr	r1, [r3, #4]
 8004e68:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	481c      	ldr	r0, [pc, #112]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e70:	fba1 0100 	umull	r0, r1, r1, r0
 8004e74:	f7fb f9cc 	bl	8000210 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004e80:	3301      	adds	r3, #1
 8004e82:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004e84:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004e88:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8c:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004e94:	461e      	mov	r6, r3
 8004e96:	2700      	movs	r7, #0
 8004e98:	015c      	lsls	r4, r3, #5
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	1ae4      	subs	r4, r4, r3
 8004e9e:	eb65 0507 	sbc.w	r5, r5, r7
 8004ea2:	01a9      	lsls	r1, r5, #6
 8004ea4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004ea8:	01a0      	lsls	r0, r4, #6
 8004eaa:	1b00      	subs	r0, r0, r4
 8004eac:	eb61 0105 	sbc.w	r1, r1, r5
 8004eb0:	00cb      	lsls	r3, r1, #3
 8004eb2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004eb6:	00c4      	lsls	r4, r0, #3
 8004eb8:	19a0      	adds	r0, r4, r6
 8004eba:	eb43 0107 	adc.w	r1, r3, r7
 8004ebe:	028b      	lsls	r3, r1, #10
 8004ec0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004ec4:	0284      	lsls	r4, r0, #10
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f7fb f9a0 	bl	8000210 <__aeabi_uldivmod>
 8004ed0:	e7d2      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8004ed2:	4803      	ldr	r0, [pc, #12]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	017d7840 	.word	0x017d7840

08004ee4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	f000 80a2 	beq.w	800502e <HAL_RCC_ClockConfig+0x14a>
{
 8004eea:	b570      	push	{r4, r5, r6, lr}
 8004eec:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eee:	4b52      	ldr	r3, [pc, #328]	; (8005038 <HAL_RCC_ClockConfig+0x154>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	428b      	cmp	r3, r1
 8004ef8:	d20c      	bcs.n	8004f14 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4a4f      	ldr	r2, [pc, #316]	; (8005038 <HAL_RCC_ClockConfig+0x154>)
 8004efc:	6813      	ldr	r3, [r2, #0]
 8004efe:	f023 030f 	bic.w	r3, r3, #15
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8004f10:	2001      	movs	r0, #1
}
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	f013 0f02 	tst.w	r3, #2
 8004f1a:	d017      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	f013 0f04 	tst.w	r3, #4
 8004f20:	d004      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f22:	4a46      	ldr	r2, [pc, #280]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004f24:	6893      	ldr	r3, [r2, #8]
 8004f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f2a:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	f013 0f08 	tst.w	r3, #8
 8004f32:	d004      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f34:	4a41      	ldr	r2, [pc, #260]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004f36:	6893      	ldr	r3, [r2, #8]
 8004f38:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f3c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3e:	4a3f      	ldr	r2, [pc, #252]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004f40:	6893      	ldr	r3, [r2, #8]
 8004f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f46:	68a0      	ldr	r0, [r4, #8]
 8004f48:	4303      	orrs	r3, r0
 8004f4a:	6093      	str	r3, [r2, #8]
 8004f4c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	f013 0f01 	tst.w	r3, #1
 8004f54:	d031      	beq.n	8004fba <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d020      	beq.n	8004f9e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d025      	beq.n	8004fac <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	4a36      	ldr	r2, [pc, #216]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	f012 0f02 	tst.w	r2, #2
 8004f68:	d063      	beq.n	8005032 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f6a:	4934      	ldr	r1, [pc, #208]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	f022 0203 	bic.w	r2, r2, #3
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004f76:	f7fd f9eb 	bl	8002350 <HAL_GetTick>
 8004f7a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7c:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	6862      	ldr	r2, [r4, #4]
 8004f86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004f8a:	d016      	beq.n	8004fba <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8c:	f7fd f9e0 	bl	8002350 <HAL_GetTick>
 8004f90:	1b80      	subs	r0, r0, r6
 8004f92:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f96:	4298      	cmp	r0, r3
 8004f98:	d9f0      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8004f9a:	2003      	movs	r0, #3
 8004f9c:	e7b9      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	4a27      	ldr	r2, [pc, #156]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004fa6:	d1e0      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004fa8:	2001      	movs	r0, #1
 8004faa:	e7b2      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fac:	4a23      	ldr	r2, [pc, #140]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004fb4:	d1d9      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	e7ab      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_RCC_ClockConfig+0x154>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	42ab      	cmp	r3, r5
 8004fc4:	d90c      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4a1c      	ldr	r2, [pc, #112]	; (8005038 <HAL_RCC_ClockConfig+0x154>)
 8004fc8:	6813      	ldr	r3, [r2, #0]
 8004fca:	f023 030f 	bic.w	r3, r3, #15
 8004fce:	432b      	orrs	r3, r5
 8004fd0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	42ab      	cmp	r3, r5
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e798      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f013 0f04 	tst.w	r3, #4
 8004fe6:	d006      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8004fea:	6893      	ldr	r3, [r2, #8]
 8004fec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004ff0:	68e1      	ldr	r1, [r4, #12]
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	f013 0f08 	tst.w	r3, #8
 8004ffc:	d007      	beq.n	800500e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ffe:	4a0f      	ldr	r2, [pc, #60]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8005000:	6893      	ldr	r3, [r2, #8]
 8005002:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005006:	6921      	ldr	r1, [r4, #16]
 8005008:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800500c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800500e:	f7ff ff15 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <HAL_RCC_ClockConfig+0x158>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800501a:	4a09      	ldr	r2, [pc, #36]	; (8005040 <HAL_RCC_ClockConfig+0x15c>)
 800501c:	5cd3      	ldrb	r3, [r2, r3]
 800501e:	40d8      	lsrs	r0, r3
 8005020:	4b08      	ldr	r3, [pc, #32]	; (8005044 <HAL_RCC_ClockConfig+0x160>)
 8005022:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005024:	2000      	movs	r0, #0
 8005026:	f7fd f8a1 	bl	800216c <HAL_InitTick>
  return HAL_OK;
 800502a:	2000      	movs	r0, #0
 800502c:	e771      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800502e:	2001      	movs	r0, #1
}
 8005030:	4770      	bx	lr
        return HAL_ERROR;
 8005032:	2001      	movs	r0, #1
 8005034:	e76d      	b.n	8004f12 <HAL_RCC_ClockConfig+0x2e>
 8005036:	bf00      	nop
 8005038:	40023c00 	.word	0x40023c00
 800503c:	40023800 	.word	0x40023800
 8005040:	0801e9cc 	.word	0x0801e9cc
 8005044:	200001e4 	.word	0x200001e4

08005048 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005048:	4b01      	ldr	r3, [pc, #4]	; (8005050 <HAL_RCC_GetHCLKFreq+0x8>)
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	200001e4 	.word	0x200001e4

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005056:	f7ff fff7 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 800505a:	4b04      	ldr	r3, [pc, #16]	; (800506c <HAL_RCC_GetPCLK1Freq+0x18>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005062:	4a03      	ldr	r2, [pc, #12]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005064:	5cd3      	ldrb	r3, [r2, r3]
}
 8005066:	40d8      	lsrs	r0, r3
 8005068:	bd08      	pop	{r3, pc}
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
 8005070:	0801e9dc 	.word	0x0801e9dc

08005074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005074:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005076:	f7ff ffe7 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 800507a:	4b04      	ldr	r3, [pc, #16]	; (800508c <HAL_RCC_GetPCLK2Freq+0x18>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005082:	4a03      	ldr	r2, [pc, #12]	; (8005090 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005084:	5cd3      	ldrb	r3, [r2, r3]
}
 8005086:	40d8      	lsrs	r0, r3
 8005088:	bd08      	pop	{r3, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	0801e9dc 	.word	0x0801e9dc

08005094 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005094:	230f      	movs	r3, #15
 8005096:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCC_GetClockConfig+0x34>)
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	f002 0203 	and.w	r2, r2, #3
 80050a0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80050a8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80050b0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80050ba:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_GetClockConfig+0x38>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	600b      	str	r3, [r1, #0]
}
 80050c6:	4770      	bx	lr
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40023c00 	.word	0x40023c00

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d2:	b083      	sub	sp, #12
 80050d4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050d6:	6803      	ldr	r3, [r0, #0]
 80050d8:	f013 0f01 	tst.w	r3, #1
 80050dc:	d00c      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050de:	4baf      	ldr	r3, [pc, #700]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050f2:	b1c3      	cbz	r3, 8005126 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80050f4:	2600      	movs	r6, #0
 80050f6:	e000      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80050f8:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005100:	d015      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005102:	4aa6      	ldr	r2, [pc, #664]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005104:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005108:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800510c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800510e:	430b      	orrs	r3, r1
 8005110:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511a:	d006      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 811b 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 8005122:	2500      	movs	r5, #0
 8005124:	e004      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8005126:	2601      	movs	r6, #1
 8005128:	e7e7      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800512a:	2601      	movs	r6, #1
 800512c:	e7f6      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800512e:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005136:	d00f      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005138:	4a98      	ldr	r2, [pc, #608]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800513a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800513e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005142:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005144:	430b      	orrs	r3, r1
 8005146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800514a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800514c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005150:	f000 8104 	beq.w	800535c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005154:	b903      	cbnz	r3, 8005158 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8005156:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800515e:	d000      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8005160:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005162:	f013 0f20 	tst.w	r3, #32
 8005166:	f040 80fb 	bne.w	8005360 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f013 0f10 	tst.w	r3, #16
 8005170:	d00c      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005172:	4b8a      	ldr	r3, [pc, #552]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005174:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005178:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800517c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005180:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005184:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005186:	430a      	orrs	r2, r1
 8005188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005192:	d008      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005194:	4a81      	ldr	r2, [pc, #516]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005196:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800519a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800519e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80051a0:	430b      	orrs	r3, r1
 80051a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80051ac:	d008      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ae:	4a7b      	ldr	r2, [pc, #492]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80051b4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80051b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80051ba:	430b      	orrs	r3, r1
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80051c6:	d008      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051c8:	4a74      	ldr	r2, [pc, #464]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80051ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80051d2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80051d4:	430b      	orrs	r3, r1
 80051d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80051e0:	d008      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051e2:	4a6e      	ldr	r2, [pc, #440]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80051e8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80051ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051fa:	d008      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051fc:	4a67      	ldr	r2, [pc, #412]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005208:	430b      	orrs	r3, r1
 800520a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005214:	d008      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005216:	4a61      	ldr	r2, [pc, #388]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005218:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800521c:	f023 030c 	bic.w	r3, r3, #12
 8005220:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005222:	430b      	orrs	r3, r1
 8005224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800522e:	d008      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005230:	4a5a      	ldr	r2, [pc, #360]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005232:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005236:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800523a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800523c:	430b      	orrs	r3, r1
 800523e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005248:	d008      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800524a:	4a54      	ldr	r2, [pc, #336]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800524c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005250:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005254:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005256:	430b      	orrs	r3, r1
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005262:	d008      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005264:	4a4d      	ldr	r2, [pc, #308]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005266:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005270:	430b      	orrs	r3, r1
 8005272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800527c:	d008      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800527e:	4a47      	ldr	r2, [pc, #284]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005280:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005284:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005288:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800528a:	430b      	orrs	r3, r1
 800528c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005296:	d008      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005298:	4a40      	ldr	r2, [pc, #256]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800529a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800529e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80052a4:	430b      	orrs	r3, r1
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80052b0:	d008      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80052b2:	4a3a      	ldr	r2, [pc, #232]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80052bc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80052be:	430b      	orrs	r3, r1
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80052ca:	d008      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052cc:	4a33      	ldr	r2, [pc, #204]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052d6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80052d8:	430b      	orrs	r3, r1
 80052da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80052e4:	d00d      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052e6:	4a2d      	ldr	r2, [pc, #180]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80052e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052ec:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80052f0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80052fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fe:	f000 8099 	beq.w	8005434 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	f013 0f08 	tst.w	r3, #8
 8005308:	d000      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 800530a:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800530c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005310:	d008      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005312:	4a22      	ldr	r2, [pc, #136]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005314:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005318:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800531c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800531e:	430b      	orrs	r3, r1
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800532a:	d009      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800532c:	4a1b      	ldr	r2, [pc, #108]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800532e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005336:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800533a:	430b      	orrs	r3, r1
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005340:	2e00      	cmp	r6, #0
 8005342:	d179      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800534a:	d075      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800534c:	2d00      	cmp	r5, #0
 800534e:	f040 8106 	bne.w	800555e <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005352:	2000      	movs	r0, #0
}
 8005354:	b003      	add	sp, #12
 8005356:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8005358:	2501      	movs	r5, #1
 800535a:	e6e9      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800535c:	2601      	movs	r6, #1
 800535e:	e6f9      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005364:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005374:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800537e:	f7fc ffe7 	bl	8002350 <HAL_GetTick>
 8005382:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f413 7f80 	tst.w	r3, #256	; 0x100
 800538c:	d10a      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538e:	f7fc ffdf 	bl	8002350 <HAL_GetTick>
 8005392:	1bc0      	subs	r0, r0, r7
 8005394:	2864      	cmp	r0, #100	; 0x64
 8005396:	d9f5      	bls.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 8005398:	2003      	movs	r0, #3
 800539a:	e7db      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800539c:	40023800 	.word	0x40023800
 80053a0:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053a4:	4bb3      	ldr	r3, [pc, #716]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80053ac:	d015      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80053ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80053b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d010      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053b8:	4bae      	ldr	r3, [pc, #696]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80053ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80053c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80053c2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80053c6:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80053ca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80053ce:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80053d0:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	f013 0f01 	tst.w	r3, #1
 80053d8:	d112      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80053e0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80053e4:	d01d      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80053e6:	4aa3      	ldr	r2, [pc, #652]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80053e8:	6893      	ldr	r3, [r2, #8]
 80053ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053ee:	6093      	str	r3, [r2, #8]
 80053f0:	49a0      	ldr	r1, [pc, #640]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80053f2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80053f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80053f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80053fa:	4313      	orrs	r3, r2
 80053fc:	670b      	str	r3, [r1, #112]	; 0x70
 80053fe:	e6b4      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8005400:	f7fc ffa6 	bl	8002350 <HAL_GetTick>
 8005404:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005406:	4b9b      	ldr	r3, [pc, #620]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	f013 0f02 	tst.w	r3, #2
 800540e:	d1e4      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fc ff9e 	bl	8002350 <HAL_GetTick>
 8005414:	1bc0      	subs	r0, r0, r7
 8005416:	f241 3388 	movw	r3, #5000	; 0x1388
 800541a:	4298      	cmp	r0, r3
 800541c:	d9f3      	bls.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 800541e:	2003      	movs	r0, #3
 8005420:	e798      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005422:	4894      	ldr	r0, [pc, #592]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005424:	6882      	ldr	r2, [r0, #8]
 8005426:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800542a:	4993      	ldr	r1, [pc, #588]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800542c:	4019      	ands	r1, r3
 800542e:	430a      	orrs	r2, r1
 8005430:	6082      	str	r2, [r0, #8]
 8005432:	e7dd      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 8005434:	2501      	movs	r5, #1
 8005436:	e764      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8005438:	4a8e      	ldr	r2, [pc, #568]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005440:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005442:	f7fc ff85 	bl	8002350 <HAL_GetTick>
 8005446:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005448:	4b8a      	ldr	r3, [pc, #552]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005450:	d006      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005452:	f7fc ff7d 	bl	8002350 <HAL_GetTick>
 8005456:	1b80      	subs	r0, r0, r6
 8005458:	2864      	cmp	r0, #100	; 0x64
 800545a:	d9f5      	bls.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 800545c:	2003      	movs	r0, #3
 800545e:	e779      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f013 0f01 	tst.w	r3, #1
 8005466:	d013      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005468:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800546a:	b98b      	cbnz	r3, 8005490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800546c:	4a81      	ldr	r2, [pc, #516]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800546e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005472:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005476:	6860      	ldr	r0, [r4, #4]
 8005478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800547c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005480:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005484:	430b      	orrs	r3, r1
 8005486:	68a1      	ldr	r1, [r4, #8]
 8005488:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800548c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005496:	d003      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005498:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800549a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800549e:	d006      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80054a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80054a4:	d01e      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ac:	d11a      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054ae:	4a71      	ldr	r2, [pc, #452]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80054b0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054b4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054b8:	6860      	ldr	r0, [r4, #4]
 80054ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054be:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80054c2:	68e0      	ldr	r0, [r4, #12]
 80054c4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80054c8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80054cc:	430b      	orrs	r3, r1
 80054ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054d2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80054d6:	f023 031f 	bic.w	r3, r3, #31
 80054da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054dc:	3901      	subs	r1, #1
 80054de:	430b      	orrs	r3, r1
 80054e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80054ea:	d011      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054ec:	4a61      	ldr	r2, [pc, #388]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80054ee:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054f2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054f6:	6866      	ldr	r6, [r4, #4]
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005500:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005504:	4303      	orrs	r3, r0
 8005506:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005516:	d00d      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005518:	6862      	ldr	r2, [r4, #4]
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005522:	68e2      	ldr	r2, [r4, #12]
 8005524:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005528:	68a2      	ldr	r2, [r4, #8]
 800552a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800552e:	4a51      	ldr	r2, [pc, #324]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005530:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005534:	4a4f      	ldr	r2, [pc, #316]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005536:	6813      	ldr	r3, [r2, #0]
 8005538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800553c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800553e:	f7fc ff07 	bl	8002350 <HAL_GetTick>
 8005542:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005544:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800554c:	f47f aefe 	bne.w	800534c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005550:	f7fc fefe 	bl	8002350 <HAL_GetTick>
 8005554:	1b80      	subs	r0, r0, r6
 8005556:	2864      	cmp	r0, #100	; 0x64
 8005558:	d9f4      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 800555a:	2003      	movs	r0, #3
 800555c:	e6fa      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLSAI_DISABLE();
 800555e:	4a45      	ldr	r2, [pc, #276]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005560:	6813      	ldr	r3, [r2, #0]
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005566:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005568:	f7fc fef2 	bl	8002350 <HAL_GetTick>
 800556c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800556e:	4b41      	ldr	r3, [pc, #260]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005576:	d006      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005578:	f7fc feea 	bl	8002350 <HAL_GetTick>
 800557c:	1b40      	subs	r0, r0, r5
 800557e:	2864      	cmp	r0, #100	; 0x64
 8005580:	d9f5      	bls.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8005582:	2003      	movs	r0, #3
 8005584:	e6e6      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800558c:	d001      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800558e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005590:	b122      	cbz	r2, 800559c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8005592:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005596:	d01d      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800559a:	b9db      	cbnz	r3, 80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800559c:	4a35      	ldr	r2, [pc, #212]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800559e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055a2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055a6:	6960      	ldr	r0, [r4, #20]
 80055a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055ac:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80055b0:	69a0      	ldr	r0, [r4, #24]
 80055b2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80055b6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80055ba:	430b      	orrs	r3, r1
 80055bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055c0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80055c4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80055c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80055ca:	3901      	subs	r1, #1
 80055cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80055d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80055da:	d003      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055dc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80055de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e2:	d031      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f013 0f08 	tst.w	r3, #8
 80055ea:	d019      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055ec:	4a21      	ldr	r2, [pc, #132]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80055ee:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055f6:	6960      	ldr	r0, [r4, #20]
 80055f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005600:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005604:	430b      	orrs	r3, r1
 8005606:	69e1      	ldr	r1, [r4, #28]
 8005608:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800560c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005610:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005614:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005618:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800561a:	430b      	orrs	r3, r1
 800561c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005620:	4a14      	ldr	r2, [pc, #80]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800562a:	f7fc fe91 	bl	8002350 <HAL_GetTick>
 800562e:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005630:	4b10      	ldr	r3, [pc, #64]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005638:	d119      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800563a:	f7fc fe89 	bl	8002350 <HAL_GetTick>
 800563e:	1b00      	subs	r0, r0, r4
 8005640:	2864      	cmp	r0, #100	; 0x64
 8005642:	d9f5      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8005644:	2003      	movs	r0, #3
 8005646:	e685      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005648:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800564a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800564e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005652:	6965      	ldr	r5, [r4, #20]
 8005654:	6a23      	ldr	r3, [r4, #32]
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800565c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005660:	4303      	orrs	r3, r0
 8005662:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005666:	430b      	orrs	r3, r1
 8005668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800566c:	e7ba      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 800566e:	2000      	movs	r0, #0
 8005670:	e670      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005672:	bf00      	nop
 8005674:	40023800 	.word	0x40023800
 8005678:	0ffffcff 	.word	0x0ffffcff

0800567c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800567c:	b410      	push	{r4}
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800567e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005682:	d007      	beq.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 8005684:	2300      	movs	r3, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005686:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 800568a:	d065      	beq.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      }
    }
  }

  return frequency;
}
 800568c:	4618      	mov	r0, r3
 800568e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005692:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8005694:	4b61      	ldr	r3, [pc, #388]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800569a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 800569e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a2:	d02e      	beq.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 80056a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a8:	d054      	beq.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80056aa:	b10b      	cbz	r3, 80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
  uint32_t frequency = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e7ea      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056b0:	4b5a      	ldr	r3, [pc, #360]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80056b8:	d11b      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056ba:	4b58      	ldr	r3, [pc, #352]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80056c2:	4b57      	ldr	r3, [pc, #348]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80056c4:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80056c8:	4a54      	ldr	r2, [pc, #336]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80056ca:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80056ce:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80056d2:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 80056d6:	f3c4 1488 	ubfx	r4, r4, #6, #9
 80056da:	fb03 f304 	mul.w	r3, r3, r4
 80056de:	fbb3 f3f1 	udiv	r3, r3, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80056e2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80056e6:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80056ea:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80056ec:	fbb3 f3f2 	udiv	r3, r3, r2
        break;
 80056f0:	e7c9      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056f2:	4b4a      	ldr	r3, [pc, #296]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80056fa:	4b4a      	ldr	r3, [pc, #296]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80056fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005700:	e7e2      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005702:	4b46      	ldr	r3, [pc, #280]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800570a:	d11b      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800570c:	4b43      	ldr	r3, [pc, #268]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8005716:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800571a:	4a40      	ldr	r2, [pc, #256]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800571c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8005720:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005724:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 8005728:	f3c4 1488 	ubfx	r4, r4, #6, #9
 800572c:	fb03 f304 	mul.w	r3, r3, r4
 8005730:	fbb3 f3f1 	udiv	r3, r3, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005734:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005738:	f002 021f 	and.w	r2, r2, #31
 800573c:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800573e:	fbb3 f3f2 	udiv	r3, r3, r2
        break;
 8005742:	e7a0      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005744:	4b35      	ldr	r3, [pc, #212]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800574c:	4b35      	ldr	r3, [pc, #212]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800574e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005752:	e7e2      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005754:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8005756:	e796      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 8005758:	4a30      	ldr	r2, [pc, #192]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800575a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800575e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8005762:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005766:	d02d      	beq.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005768:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800576c:	d053      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800576e:	2a00      	cmp	r2, #0
 8005770:	d18c      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005772:	4b2a      	ldr	r3, [pc, #168]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800577a:	d11b      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8005786:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800578a:	4a24      	ldr	r2, [pc, #144]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800578c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8005790:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005794:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005798:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800579c:	fb03 f301 	mul.w	r3, r3, r1
 80057a0:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80057a4:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80057a8:	f3c0 2004 	ubfx	r0, r0, #8, #5
 80057ac:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 80057ae:	fbb3 f3f0 	udiv	r3, r3, r0
        break;
 80057b2:	e76b      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057bc:	4b19      	ldr	r3, [pc, #100]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80057be:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c2:	e7e2      	b.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80057c4:	4b15      	ldr	r3, [pc, #84]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80057cc:	d11b      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80057d8:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80057dc:	4a0f      	ldr	r2, [pc, #60]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80057de:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80057e2:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80057e6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80057ea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80057ee:	fb03 f301 	mul.w	r3, r3, r1
 80057f2:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80057f6:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80057fa:	f000 001f 	and.w	r0, r0, #31
 80057fe:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 8005800:	fbb3 f3f0 	udiv	r3, r3, r0
        break;
 8005804:	e742      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800580e:	4b05      	ldr	r3, [pc, #20]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8005810:	fbb3 f3f2 	udiv	r3, r3, r2
 8005814:	e7e2      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005816:	4b04      	ldr	r3, [pc, #16]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
  return frequency;
 8005818:	e738      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800
 8005820:	00f42400 	.word	0x00f42400
 8005824:	017d7840 	.word	0x017d7840
 8005828:	00bb8000 	.word	0x00bb8000

0800582c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005830:	6802      	ldr	r2, [r0, #0]
 8005832:	68d3      	ldr	r3, [r2, #12]
 8005834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005838:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800583a:	f7fc fd89 	bl	8002350 <HAL_GetTick>
 800583e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f013 0f20 	tst.w	r3, #32
 8005848:	d107      	bne.n	800585a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800584a:	f7fc fd81 	bl	8002350 <HAL_GetTick>
 800584e:	1b40      	subs	r0, r0, r5
 8005850:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005854:	d9f4      	bls.n	8005840 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8005856:	2003      	movs	r0, #3
 8005858:	e000      	b.n	800585c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800585a:	2000      	movs	r0, #0
}
 800585c:	bd38      	pop	{r3, r4, r5, pc}

0800585e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800585e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005860:	6803      	ldr	r3, [r0, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005868:	d001      	beq.n	800586e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800586a:	2000      	movs	r0, #0
}
 800586c:	bd38      	pop	{r3, r4, r5, pc}
 800586e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005876:	f7fc fd6b 	bl	8002350 <HAL_GetTick>
 800587a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005884:	d107      	bne.n	8005896 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005886:	f7fc fd63 	bl	8002350 <HAL_GetTick>
 800588a:	1b40      	subs	r0, r0, r5
 800588c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005890:	d9f4      	bls.n	800587c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005892:	2003      	movs	r0, #3
 8005894:	e7ea      	b.n	800586c <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005896:	2000      	movs	r0, #0
 8005898:	e7e8      	b.n	800586c <RTC_EnterInitMode+0xe>
	...

0800589c <HAL_RTC_Init>:
  if(hrtc == NULL)
 800589c:	2800      	cmp	r0, #0
 800589e:	d04a      	beq.n	8005936 <HAL_RTC_Init+0x9a>
{
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80058a4:	7f43      	ldrb	r3, [r0, #29]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d03a      	beq.n	8005920 <HAL_RTC_Init+0x84>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058aa:	2302      	movs	r3, #2
 80058ac:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	22ca      	movs	r2, #202	; 0xca
 80058b2:	625a      	str	r2, [r3, #36]	; 0x24
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	2253      	movs	r2, #83	; 0x53
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff ffcf 	bl	800585e <RTC_EnterInitMode>
 80058c0:	4602      	mov	r2, r0
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d130      	bne.n	8005928 <HAL_RTC_Init+0x8c>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058c6:	6821      	ldr	r1, [r4, #0]
 80058c8:	6888      	ldr	r0, [r1, #8]
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <HAL_RTC_Init+0xa0>)
 80058cc:	4003      	ands	r3, r0
 80058ce:	608b      	str	r3, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	6881      	ldr	r1, [r0, #8]
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	6925      	ldr	r5, [r4, #16]
 80058d8:	432b      	orrs	r3, r5
 80058da:	6965      	ldr	r5, [r4, #20]
 80058dc:	432b      	orrs	r3, r5
 80058de:	430b      	orrs	r3, r1
 80058e0:	6083      	str	r3, [r0, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	68e1      	ldr	r1, [r4, #12]
 80058e6:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80058e8:	6821      	ldr	r1, [r4, #0]
 80058ea:	690b      	ldr	r3, [r1, #16]
 80058ec:	68a0      	ldr	r0, [r4, #8]
 80058ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058f2:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058f4:	6821      	ldr	r1, [r4, #0]
 80058f6:	68cb      	ldr	r3, [r1, #12]
 80058f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fc:	60cb      	str	r3, [r1, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005902:	f023 0308 	bic.w	r3, r3, #8
 8005906:	64cb      	str	r3, [r1, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005908:	6821      	ldr	r1, [r4, #0]
 800590a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800590c:	69a0      	ldr	r0, [r4, #24]
 800590e:	4303      	orrs	r3, r0
 8005910:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	21ff      	movs	r1, #255	; 0xff
 8005916:	6259      	str	r1, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005918:	2301      	movs	r3, #1
 800591a:	7763      	strb	r3, [r4, #29]
}
 800591c:	4610      	mov	r0, r2
 800591e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005920:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005922:	f7fc f9c7 	bl	8001cb4 <HAL_RTC_MspInit>
 8005926:	e7c0      	b.n	80058aa <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	22ff      	movs	r2, #255	; 0xff
 800592c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800592e:	2304      	movs	r3, #4
 8005930:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8005932:	2201      	movs	r2, #1
 8005934:	e7f2      	b.n	800591c <HAL_RTC_Init+0x80>
     return HAL_ERROR;
 8005936:	2201      	movs	r2, #1
}
 8005938:	4610      	mov	r0, r2
 800593a:	4770      	bx	lr
 800593c:	ff8fffbf 	.word	0xff8fffbf

08005940 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8005940:	2300      	movs	r3, #0

  while(Value >= 10)
 8005942:	e002      	b.n	800594a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005944:	3301      	adds	r3, #1
    Value -= 10;
 8005946:	380a      	subs	r0, #10
 8005948:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 800594a:	2809      	cmp	r0, #9
 800594c:	d8fa      	bhi.n	8005944 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	b2db      	uxtb	r3, r3
}
 8005952:	4318      	orrs	r0, r3
 8005954:	4770      	bx	lr
	...

08005958 <HAL_RTC_SetTime>:
{
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800595a:	7f03      	ldrb	r3, [r0, #28]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d076      	beq.n	8005a4e <HAL_RTC_SetTime+0xf6>
 8005960:	460d      	mov	r5, r1
 8005962:	4604      	mov	r4, r0
 8005964:	2301      	movs	r3, #1
 8005966:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005968:	2302      	movs	r3, #2
 800596a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 800596c:	2a00      	cmp	r2, #0
 800596e:	d144      	bne.n	80059fa <HAL_RTC_SetTime+0xa2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005970:	6803      	ldr	r3, [r0, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005978:	d101      	bne.n	800597e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 800597a:	2300      	movs	r3, #0
 800597c:	730b      	strb	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800597e:	7828      	ldrb	r0, [r5, #0]
 8005980:	f7ff ffde 	bl	8005940 <RTC_ByteToBcd2>
 8005984:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005986:	7868      	ldrb	r0, [r5, #1]
 8005988:	f7ff ffda 	bl	8005940 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800598c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005990:	78a8      	ldrb	r0, [r5, #2]
 8005992:	f7ff ffd5 	bl	8005940 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005996:	4306      	orrs	r6, r0
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005998:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800599a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	22ca      	movs	r2, #202	; 0xca
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	2253      	movs	r2, #83	; 0x53
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7ff ff57 	bl	800585e <RTC_EnterInitMode>
 80059b0:	4607      	mov	r7, r0
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d133      	bne.n	8005a1e <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <HAL_RTC_SetTime+0xfc>)
 80059ba:	4033      	ands	r3, r6
 80059bc:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	6893      	ldr	r3, [r2, #8]
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80059c8:	6821      	ldr	r1, [r4, #0]
 80059ca:	688b      	ldr	r3, [r1, #8]
 80059cc:	692a      	ldr	r2, [r5, #16]
 80059ce:	6968      	ldr	r0, [r5, #20]
 80059d0:	4302      	orrs	r2, r0
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	68d3      	ldr	r3, [r2, #12]
 80059da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059de:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f013 0f20 	tst.w	r3, #32
 80059e8:	d023      	beq.n	8005a32 <HAL_RTC_SetTime+0xda>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80059f0:	2301      	movs	r3, #1
 80059f2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80059f4:	2300      	movs	r3, #0
 80059f6:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80059f8:	e019      	b.n	8005a2e <HAL_RTC_SetTime+0xd6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059fa:	6803      	ldr	r3, [r0, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a02:	d101      	bne.n	8005a08 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8005a04:	2300      	movs	r3, #0
 8005a06:	730b      	strb	r3, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a08:	7828      	ldrb	r0, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005a0a:	786e      	ldrb	r6, [r5, #1]
 8005a0c:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a0e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8005a12:	78a8      	ldrb	r0, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005a14:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005a16:	7b28      	ldrb	r0, [r5, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8005a1c:	e7bf      	b.n	800599e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a24:	2304      	movs	r3, #4
 8005a26:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005a28:	2300      	movs	r3, #0
 8005a2a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005a2c:	2701      	movs	r7, #1
}
 8005a2e:	4638      	mov	r0, r7
 8005a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7ff fefa 	bl	800582c <HAL_RTC_WaitForSynchro>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d0d6      	beq.n	80059ea <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	22ff      	movs	r2, #255	; 0xff
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a42:	2304      	movs	r3, #4
 8005a44:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005a46:	2300      	movs	r3, #0
 8005a48:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005a4a:	2701      	movs	r7, #1
 8005a4c:	e7ef      	b.n	8005a2e <HAL_RTC_SetTime+0xd6>
  __HAL_LOCK(hrtc);
 8005a4e:	2702      	movs	r7, #2
 8005a50:	e7ed      	b.n	8005a2e <HAL_RTC_SetTime+0xd6>
 8005a52:	bf00      	nop
 8005a54:	007f7f7f 	.word	0x007f7f7f

08005a58 <HAL_RTC_SetDate>:
{
 8005a58:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8005a5a:	7f03      	ldrb	r3, [r0, #28]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d064      	beq.n	8005b2a <HAL_RTC_SetDate+0xd2>
 8005a60:	2301      	movs	r3, #1
 8005a62:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a64:	2302      	movs	r3, #2
 8005a66:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a68:	b93a      	cbnz	r2, 8005a7a <HAL_RTC_SetDate+0x22>
 8005a6a:	784b      	ldrb	r3, [r1, #1]
 8005a6c:	f013 0f10 	tst.w	r3, #16
 8005a70:	d003      	beq.n	8005a7a <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a72:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005a76:	330a      	adds	r3, #10
 8005a78:	704b      	strb	r3, [r1, #1]
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	d130      	bne.n	8005ae4 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a82:	78c8      	ldrb	r0, [r1, #3]
 8005a84:	f7ff ff5c 	bl	8005940 <RTC_ByteToBcd2>
 8005a88:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005a8a:	7870      	ldrb	r0, [r6, #1]
 8005a8c:	f7ff ff58 	bl	8005940 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a90:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005a94:	78b0      	ldrb	r0, [r6, #2]
 8005a96:	f7ff ff53 	bl	8005940 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005a9a:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));
 8005a9c:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a9e:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	22ca      	movs	r2, #202	; 0xca
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	2253      	movs	r2, #83	; 0x53
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff fed5 	bl	800585e <RTC_EnterInitMode>
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	bb00      	cbnz	r0, 8005afa <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ab8:	6822      	ldr	r2, [r4, #0]
 8005aba:	4b1d      	ldr	r3, [pc, #116]	; (8005b30 <HAL_RTC_SetDate+0xd8>)
 8005abc:	402b      	ands	r3, r5
 8005abe:	6053      	str	r3, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ac0:	6822      	ldr	r2, [r4, #0]
 8005ac2:	68d3      	ldr	r3, [r2, #12]
 8005ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f013 0f20 	tst.w	r3, #32
 8005ad2:	d01c      	beq.n	8005b0e <HAL_RTC_SetDate+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	22ff      	movs	r2, #255	; 0xff
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005ada:	2301      	movs	r3, #1
 8005adc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8005ae2:	e012      	b.n	8005b0a <HAL_RTC_SetDate+0xb2>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ae4:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8005ae6:	784d      	ldrb	r5, [r1, #1]
 8005ae8:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005aea:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  ((uint32_t)sDate->Date) | \
 8005aee:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005af0:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));
 8005af2:	7808      	ldrb	r0, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005af4:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8005af8:	e7d3      	b.n	8005aa2 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	22ff      	movs	r2, #255	; 0xff
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b00:	2304      	movs	r3, #4
 8005b02:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005b04:	2300      	movs	r3, #0
 8005b06:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005b08:	2601      	movs	r6, #1
}
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff fe8c 	bl	800582c <HAL_RTC_WaitForSynchro>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d0dd      	beq.n	8005ad4 <HAL_RTC_SetDate+0x7c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b1e:	2304      	movs	r3, #4
 8005b20:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005b22:	2300      	movs	r3, #0
 8005b24:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005b26:	2601      	movs	r6, #1
 8005b28:	e7ef      	b.n	8005b0a <HAL_RTC_SetDate+0xb2>
 __HAL_LOCK(hrtc);
 8005b2a:	2602      	movs	r6, #2
 8005b2c:	e7ed      	b.n	8005b0a <HAL_RTC_SetDate+0xb2>
 8005b2e:	bf00      	nop
 8005b30:	00ffff3f 	.word	0x00ffff3f

08005b34 <HAL_RTC_SetAlarm>:
{
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005b36:	7f03      	ldrb	r3, [r0, #28]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	f000 80a9 	beq.w	8005c90 <HAL_RTC_SetAlarm+0x15c>
 8005b3e:	460d      	mov	r5, r1
 8005b40:	4604      	mov	r4, r0
 8005b42:	2301      	movs	r3, #1
 8005b44:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b46:	2302      	movs	r3, #2
 8005b48:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	d14d      	bne.n	8005bea <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b56:	d101      	bne.n	8005b5c <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005b5c:	6a2e      	ldr	r6, [r5, #32]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005b5e:	7828      	ldrb	r0, [r5, #0]
 8005b60:	f7ff feee 	bl	8005940 <RTC_ByteToBcd2>
 8005b64:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b66:	7868      	ldrb	r0, [r5, #1]
 8005b68:	f7ff feea 	bl	8005940 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005b6c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b70:	78a8      	ldrb	r0, [r5, #2]
 8005b72:	f7ff fee5 	bl	8005940 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b76:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005b78:	7b28      	ldrb	r0, [r5, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b7a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005b7e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8005b82:	f7ff fedd 	bl	8005940 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005b86:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005b8a:	4306      	orrs	r6, r0
              ((uint32_t)sAlarm->AlarmMask));
 8005b8c:	69ab      	ldr	r3, [r5, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005b8e:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005b90:	686f      	ldr	r7, [r5, #4]
 8005b92:	69eb      	ldr	r3, [r5, #28]
 8005b94:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	22ca      	movs	r2, #202	; 0xca
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	2253      	movs	r2, #83	; 0x53
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005ba2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba8:	d039      	beq.n	8005c1e <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	6893      	ldr	r3, [r2, #8]
 8005bae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	6893      	ldr	r3, [r2, #8]
 8005bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bbc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005bbe:	f7fc fbc7 	bl	8002350 <HAL_GetTick>
 8005bc2:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	f012 0f02 	tst.w	r2, #2
 8005bcc:	d150      	bne.n	8005c70 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bce:	f7fc fbbf 	bl	8002350 <HAL_GetTick>
 8005bd2:	1b40      	subs	r0, r0, r5
 8005bd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005bd8:	d9f4      	bls.n	8005bc4 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	22ff      	movs	r2, #255	; 0xff
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005be0:	2003      	movs	r0, #3
 8005be2:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005be4:	2300      	movs	r3, #0
 8005be6:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005be8:	e051      	b.n	8005c8e <HAL_RTC_SetAlarm+0x15a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005bea:	6803      	ldr	r3, [r0, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	730b      	strb	r3, [r1, #12]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005bf8:	6a2a      	ldr	r2, [r5, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005bfa:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005bfc:	786b      	ldrb	r3, [r5, #1]
 8005bfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005c04:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005c06:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005c08:	7b29      	ldrb	r1, [r5, #12]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005c0e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005c12:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005c16:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 8005c18:	69ae      	ldr	r6, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005c1a:	431e      	orrs	r6, r3
 8005c1c:	e7b8      	b.n	8005b90 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	6893      	ldr	r3, [r2, #8]
 8005c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c26:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	6893      	ldr	r3, [r2, #8]
 8005c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c30:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005c32:	f7fc fb8d 	bl	8002350 <HAL_GetTick>
 8005c36:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	f012 0f01 	tst.w	r2, #1
 8005c40:	d10d      	bne.n	8005c5e <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c42:	f7fc fb85 	bl	8002350 <HAL_GetTick>
 8005c46:	1b40      	subs	r0, r0, r5
 8005c48:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005c4c:	d9f4      	bls.n	8005c38 <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	22ff      	movs	r2, #255	; 0xff
 8005c52:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c54:	2003      	movs	r0, #3
 8005c56:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8005c5c:	e017      	b.n	8005c8e <HAL_RTC_SetAlarm+0x15a>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c5e:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c64:	6822      	ldr	r2, [r4, #0]
 8005c66:	6893      	ldr	r3, [r2, #8]
 8005c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6c:	6093      	str	r3, [r2, #8]
 8005c6e:	e007      	b.n	8005c80 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c70:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	6893      	ldr	r3, [r2, #8]
 8005c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c7e:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005c86:	2301      	movs	r3, #1
 8005c88:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	7720      	strb	r0, [r4, #28]
}
 8005c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8005c90:	2002      	movs	r0, #2
 8005c92:	e7fc      	b.n	8005c8e <HAL_RTC_SetAlarm+0x15a>

08005c94 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005c94:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c96:	7f04      	ldrb	r4, [r0, #28]
 8005c98:	2c01      	cmp	r4, #1
 8005c9a:	d027      	beq.n	8005cec <HAL_RTCEx_SetTimeStamp+0x58>
 8005c9c:	2401      	movs	r4, #1
 8005c9e:	7704      	strb	r4, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	7743      	strb	r3, [r0, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005ca4:	6805      	ldr	r5, [r0, #0]
 8005ca6:	68ae      	ldr	r6, [r5, #8]
 8005ca8:	f6a3 030b 	subw	r3, r3, #2059	; 0x80b
 8005cac:	4033      	ands	r3, r6

  tmpreg|= TimeStampEdge;
 8005cae:	4319      	orrs	r1, r3

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb0:	23ca      	movs	r3, #202	; 0xca
 8005cb2:	626b      	str	r3, [r5, #36]	; 0x24
 8005cb4:	6803      	ldr	r3, [r0, #0]
 8005cb6:	2553      	movs	r5, #83	; 0x53
 8005cb8:	625d      	str	r5, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005cba:	6805      	ldr	r5, [r0, #0]
 8005cbc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005cbe:	f023 0306 	bic.w	r3, r3, #6
 8005cc2:	64eb      	str	r3, [r5, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005cc4:	6805      	ldr	r5, [r0, #0]
 8005cc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	64ea      	str	r2, [r5, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005ccc:	6803      	ldr	r3, [r0, #0]
 8005cce:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005cd0:	6802      	ldr	r2, [r0, #0]
 8005cd2:	6893      	ldr	r3, [r2, #8]
 8005cd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cd8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cda:	6803      	ldr	r3, [r0, #0]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ce0:	7744      	strb	r4, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8005ce6:	4618      	mov	r0, r3
}
 8005ce8:	bc70      	pop	{r4, r5, r6}
 8005cea:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005cec:	2002      	movs	r0, #2
 8005cee:	e7fb      	b.n	8005ce8 <HAL_RTCEx_SetTimeStamp+0x54>

08005cf0 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <SAI_Disable+0x3c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a0e      	ldr	r2, [pc, #56]	; (8005d30 <SAI_Disable+0x40>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	0b1b      	lsrs	r3, r3, #12
 8005cfc:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005cfe:	6801      	ldr	r1, [r0, #0]
 8005d00:	680a      	ldr	r2, [r1, #0]
 8005d02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d06:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005d08:	1e5a      	subs	r2, r3, #1
 8005d0a:	b13b      	cbz	r3, 8005d1c <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005d0c:	6803      	ldr	r3, [r0, #0]
 8005d0e:	6819      	ldr	r1, [r3, #0]
    if (count-- == 0)
 8005d10:	4613      	mov	r3, r2
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005d12:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8005d16:	d1f7      	bne.n	8005d08 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005d18:	2000      	movs	r0, #0

  return status;
}
 8005d1a:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005d1c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d24:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005d28:	2003      	movs	r0, #3
      break;
 8005d2a:	4770      	bx	lr
 8005d2c:	200001e4 	.word	0x200001e4
 8005d30:	95cbec1b 	.word	0x95cbec1b

08005d34 <HAL_SAI_Init>:
  if(hsai == NULL)
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f000 80eb 	beq.w	8005f10 <HAL_SAI_Init+0x1dc>
{
 8005d3a:	b570      	push	{r4, r5, r6, lr}
 8005d3c:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 8005d3e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80b9 	beq.w	8005eba <HAL_SAI_Init+0x186>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f7ff ffce 	bl	8005cf0 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8005d54:	68e3      	ldr	r3, [r4, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	f000 80b6 	beq.w	8005ec8 <HAL_SAI_Init+0x194>
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	f000 80b1 	beq.w	8005ec4 <HAL_SAI_Init+0x190>
  uint32_t tmpregisterGCR = 0;
 8005d62:	2200      	movs	r2, #0
  switch(hsai->Init.Synchro)
 8005d64:	68a3      	ldr	r3, [r4, #8]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	f000 80b0 	beq.w	8005ecc <HAL_SAI_Init+0x198>
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	f000 80b0 	beq.w	8005ed2 <HAL_SAI_Init+0x19e>
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	f000 80b2 	beq.w	8005edc <HAL_SAI_Init+0x1a8>
  uint32_t syncen_bits = 0;
 8005d78:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	4865      	ldr	r0, [pc, #404]	; (8005f14 <HAL_SAI_Init+0x1e0>)
 8005d7e:	4966      	ldr	r1, [pc, #408]	; (8005f18 <HAL_SAI_Init+0x1e4>)
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf18      	it	ne
 8005d84:	4283      	cmpne	r3, r0
 8005d86:	f040 80ac 	bne.w	8005ee2 <HAL_SAI_Init+0x1ae>
    SAI1->GCR = tmpregisterGCR;
 8005d8a:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <HAL_SAI_Init+0x1e8>)
 8005d8c:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005d8e:	69e3      	ldr	r3, [r4, #28]
 8005d90:	b323      	cbz	r3, 8005ddc <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	495f      	ldr	r1, [pc, #380]	; (8005f14 <HAL_SAI_Init+0x1e0>)
 8005d96:	4a60      	ldr	r2, [pc, #384]	; (8005f18 <HAL_SAI_Init+0x1e4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bf18      	it	ne
 8005d9c:	428b      	cmpne	r3, r1
 8005d9e:	f000 80a3 	beq.w	8005ee8 <HAL_SAI_Init+0x1b4>
    uint32_t freq = 0;
 8005da2:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	495e      	ldr	r1, [pc, #376]	; (8005f20 <HAL_SAI_Init+0x1ec>)
 8005da8:	4a5e      	ldr	r2, [pc, #376]	; (8005f24 <HAL_SAI_Init+0x1f0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	bf18      	it	ne
 8005dae:	428b      	cmpne	r3, r1
 8005db0:	f000 809f 	beq.w	8005ef2 <HAL_SAI_Init+0x1be>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005db4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005db8:	0041      	lsls	r1, r0, #1
 8005dba:	69e3      	ldr	r3, [r4, #28]
 8005dbc:	025b      	lsls	r3, r3, #9
 8005dbe:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8005dc2:	4b59      	ldr	r3, [pc, #356]	; (8005f28 <HAL_SAI_Init+0x1f4>)
 8005dc4:	fba3 2301 	umull	r2, r3, r3, r1
 8005dc8:	08db      	lsrs	r3, r3, #3
 8005dca:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8005dcc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005dd0:	0042      	lsls	r2, r0, #1
 8005dd2:	1a8a      	subs	r2, r1, r2
 8005dd4:	2a08      	cmp	r2, #8
 8005dd6:	d901      	bls.n	8005ddc <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 8005dd8:	3301      	adds	r3, #1
 8005dda:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005ddc:	6862      	ldr	r2, [r4, #4]
 8005dde:	2a02      	cmp	r2, #2
 8005de0:	bf14      	ite	ne
 8005de2:	2300      	movne	r3, #0
 8005de4:	2301      	moveq	r3, #1
 8005de6:	2a00      	cmp	r2, #0
 8005de8:	bf08      	it	eq
 8005dea:	2301      	moveq	r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8087 	beq.w	8005f00 <HAL_SAI_Init+0x1cc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005df2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	f000 8081 	beq.w	8005efc <HAL_SAI_Init+0x1c8>
 8005dfa:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005dfe:	6821      	ldr	r1, [r4, #0]
 8005e00:	680b      	ldr	r3, [r1, #0]
 8005e02:	4a4a      	ldr	r2, [pc, #296]	; (8005f2c <HAL_SAI_Init+0x1f8>)
 8005e04:	401a      	ands	r2, r3
 8005e06:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e08:	6822      	ldr	r2, [r4, #0]
 8005e0a:	6811      	ldr	r1, [r2, #0]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005e10:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e12:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e14:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e18:	4303      	orrs	r3, r0
 8005e1a:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 8005e1c:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005e20:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e22:	6920      	ldr	r0, [r4, #16]
 8005e24:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005e26:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e28:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005e2a:	6a20      	ldr	r0, [r4, #32]
 8005e2c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005e34:	6822      	ldr	r2, [r4, #0]
 8005e36:	6851      	ldr	r1, [r2, #4]
 8005e38:	4b3d      	ldr	r3, [pc, #244]	; (8005f30 <HAL_SAI_Init+0x1fc>)
 8005e3a:	400b      	ands	r3, r1
 8005e3c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005e3e:	6821      	ldr	r1, [r4, #0]
 8005e40:	684a      	ldr	r2, [r1, #4]
 8005e42:	69a3      	ldr	r3, [r4, #24]
 8005e44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005e46:	4303      	orrs	r3, r0
 8005e48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005e4a:	4303      	orrs	r3, r0
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005e50:	6822      	ldr	r2, [r4, #0]
 8005e52:	6891      	ldr	r1, [r2, #8]
 8005e54:	4b37      	ldr	r3, [pc, #220]	; (8005f34 <HAL_SAI_Init+0x200>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005e5a:	6820      	ldr	r0, [r4, #0]
 8005e5c:	6882      	ldr	r2, [r0, #8]
 8005e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e60:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8005e62:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005e64:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8005e66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005e68:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8005e6a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005e6c:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005e6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005e70:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8005e72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005e76:	4313      	orrs	r3, r2
 8005e78:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	68d3      	ldr	r3, [r2, #12]
 8005e7e:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005e82:	f023 030f 	bic.w	r3, r3, #15
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	68c2      	ldr	r2, [r0, #12]
 8005e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005e94:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005e96:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005e98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005e9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005e9e:	3901      	subs	r1, #1
 8005ea0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8005eb4:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 8005eba:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8005ebe:	f7fc f8ff 	bl	80020c0 <HAL_SAI_MspInit>
 8005ec2:	e741      	b.n	8005d48 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ec4:	2220      	movs	r2, #32
      break;
 8005ec6:	e74d      	b.n	8005d64 <HAL_SAI_Init+0x30>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005ec8:	2210      	movs	r2, #16
 8005eca:	e74b      	b.n	8005d64 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ecc:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8005ed0:	e753      	b.n	8005d7a <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ed6:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8005eda:	e74e      	b.n	8005d7a <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005edc:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8005ee0:	e74b      	b.n	8005d7a <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <HAL_SAI_Init+0x204>)
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e752      	b.n	8005d8e <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005ee8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005eec:	f7ff fbc6 	bl	800567c <HAL_RCCEx_GetPeriphCLKFreq>
 8005ef0:	e758      	b.n	8005da4 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005ef2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005ef6:	f7ff fbc1 	bl	800567c <HAL_RCCEx_GetPeriphCLKFreq>
 8005efa:	e75b      	b.n	8005db4 <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005efc:	2600      	movs	r6, #0
 8005efe:	e77e      	b.n	8005dfe <HAL_SAI_Init+0xca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005f00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d001      	beq.n	8005f0a <HAL_SAI_Init+0x1d6>
 8005f06:	2600      	movs	r6, #0
 8005f08:	e779      	b.n	8005dfe <HAL_SAI_Init+0xca>
 8005f0a:	f44f 7600 	mov.w	r6, #512	; 0x200
 8005f0e:	e776      	b.n	8005dfe <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
}
 8005f12:	4770      	bx	lr
 8005f14:	40015804 	.word	0x40015804
 8005f18:	40015824 	.word	0x40015824
 8005f1c:	40015800 	.word	0x40015800
 8005f20:	40015c04 	.word	0x40015c04
 8005f24:	40015c24 	.word	0x40015c24
 8005f28:	cccccccd 	.word	0xcccccccd
 8005f2c:	ff05c010 	.word	0xff05c010
 8005f30:	ffff1ff0 	.word	0xffff1ff0
 8005f34:	fff88000 	.word	0xfff88000
 8005f38:	40015c00 	.word	0x40015c00

08005f3c <SD_DMATransmitCplt>:
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f46:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8005f48:	4770      	bx	lr

08005f4a <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005f4a:	b570      	push	{r4, r5, r6, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	9301      	str	r3, [sp, #4]
  uint32_t response = 0, validvoltage = 0;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f54:	6800      	ldr	r0, [r0, #0]
 8005f56:	f002 f84b 	bl	8007ff0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b110      	cbz	r0, 8005f64 <SD_PowerON+0x1a>
      hsd->SdCard.CardType = CARD_SDSC;
    }
  }
  
  return HAL_SD_ERROR_NONE;
}
 8005f5e:	4628      	mov	r0, r5
 8005f60:	b002      	add	sp, #8
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	f002 f856 	bl	8008016 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	b1f8      	cbz	r0, 8005fae <SD_PowerON+0x64>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 8005f72:	4628      	mov	r0, r5
    while(validvoltage == 0)
 8005f74:	b9c0      	cbnz	r0, 8005fa8 <SD_PowerON+0x5e>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005f76:	9b01      	ldr	r3, [sp, #4]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d040      	beq.n	8006006 <SD_PowerON+0xbc>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f84:	2100      	movs	r1, #0
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	f002 f85c 	bl	8008044 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d13d      	bne.n	800600c <SD_PowerON+0xc2>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005f90:	2100      	movs	r1, #0
 8005f92:	6820      	ldr	r0, [r4, #0]
 8005f94:	f002 f86e 	bl	8008074 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d13a      	bne.n	8006012 <SD_PowerON+0xc8>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	f001 fe65 	bl	8007c6e <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8005fa4:	0fc0      	lsrs	r0, r0, #31
 8005fa6:	e7e5      	b.n	8005f74 <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6463      	str	r3, [r4, #68]	; 0x44
 8005fac:	e7d7      	b.n	8005f5e <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 8005fb2:	4603      	mov	r3, r0
    while(validvoltage == 0)
 8005fb4:	b9e0      	cbnz	r0, 8005ff0 <SD_PowerON+0xa6>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	9201      	str	r2, [sp, #4]
 8005fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d029      	beq.n	8006018 <SD_PowerON+0xce>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	f002 f83c 	bl	8008044 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005fcc:	4605      	mov	r5, r0
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d1c5      	bne.n	8005f5e <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005fd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005fd6:	6820      	ldr	r0, [r4, #0]
 8005fd8:	f002 f84c 	bl	8008074 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005fdc:	4605      	mov	r5, r0
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d1bd      	bne.n	8005f5e <SD_PowerON+0x14>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	f001 fe42 	bl	8007c6e <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8005fea:	4603      	mov	r3, r0
 8005fec:	0fc0      	lsrs	r0, r0, #31
 8005fee:	e7e1      	b.n	8005fb4 <SD_PowerON+0x6a>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005ff0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ff4:	d103      	bne.n	8005ffe <SD_PowerON+0xb4>
      hsd->SdCard.CardType = CARD_SDSC;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8005ffa:	4635      	mov	r5, r6
 8005ffc:	e7af      	b.n	8005f5e <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005ffe:	2301      	movs	r3, #1
 8006000:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8006002:	4635      	mov	r5, r6
 8006004:	e7ab      	b.n	8005f5e <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006006:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800600a:	e7a8      	b.n	8005f5e <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800600c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006010:	e7a5      	b.n	8005f5e <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006012:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006016:	e7a2      	b.n	8005f5e <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006018:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800601c:	e79f      	b.n	8005f5e <SD_PowerON+0x14>

0800601e <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	4604      	mov	r4, r0
 8006026:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8006028:	f7fc f992 	bl	8002350 <HAL_GetTick>
 800602c:	4606      	mov	r6, r0
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800602e:	2300      	movs	r3, #0
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	9301      	str	r3, [sp, #4]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8006034:	2108      	movs	r1, #8
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	f001 ff30 	bl	8007e9c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 800603c:	4605      	mov	r5, r0
 800603e:	b118      	cbz	r0, 8006048 <SD_FindSCR+0x2a>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8006040:	4628      	mov	r0, r5
 8006042:	b008      	add	sp, #32
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8006048:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800604a:	0409      	lsls	r1, r1, #16
 800604c:	6820      	ldr	r0, [r4, #0]
 800604e:	f001 fff9 	bl	8008044 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8006052:	4605      	mov	r5, r0
 8006054:	2800      	cmp	r0, #0
 8006056:	d1f3      	bne.n	8006040 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006058:	f04f 33ff 	mov.w	r3, #4294967295
 800605c:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 800605e:	2308      	movs	r3, #8
 8006060:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006062:	2330      	movs	r3, #48	; 0x30
 8006064:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006066:	2302      	movs	r3, #2
 8006068:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800606a:	2300      	movs	r3, #0
 800606c:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800606e:	2301      	movs	r3, #1
 8006070:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8006072:	a902      	add	r1, sp, #8
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	f001 feff 	bl	8007e78 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	f002 f82c 	bl	80080d8 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8006080:	4605      	mov	r5, r0
 8006082:	2800      	cmp	r0, #0
 8006084:	d1dc      	bne.n	8006040 <SD_FindSCR+0x22>
  uint32_t index = 0;
 8006086:	4680      	mov	r8, r0
 8006088:	e005      	b.n	8006096 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800608a:	f7fc f961 	bl	8002350 <HAL_GetTick>
 800608e:	1b80      	subs	r0, r0, r6
 8006090:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006094:	d043      	beq.n	800611e <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006096:	6820      	ldr	r0, [r4, #0]
 8006098:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800609a:	f240 432a 	movw	r3, #1066	; 0x42a
 800609e:	421a      	tst	r2, r3
 80060a0:	d10a      	bne.n	80060b8 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80060a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060a4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80060a8:	d0ef      	beq.n	800608a <SD_FindSCR+0x6c>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80060aa:	f001 fdbf 	bl	8007c2c <SDMMC_ReadFIFO>
 80060ae:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 80060b2:	f108 0801 	add.w	r8, r8, #1
 80060b6:	e7e8      	b.n	800608a <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060ba:	f013 0f08 	tst.w	r3, #8
 80060be:	d125      	bne.n	800610c <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060c2:	f013 0f02 	tst.w	r3, #2
 80060c6:	d124      	bne.n	8006112 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060ca:	f013 0f20 	tst.w	r3, #32
 80060ce:	d123      	bne.n	8006118 <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060d0:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80060d4:	6383      	str	r3, [r0, #56]	; 0x38
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060d6:	9a00      	ldr	r2, [sp, #0]
 80060d8:	0213      	lsls	r3, r2, #8
 80060da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80060e2:	0a11      	lsrs	r1, r2, #8
 80060e4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060e8:	430b      	orrs	r3, r1
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80060ea:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060ee:	607b      	str	r3, [r7, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060f0:	9a01      	ldr	r2, [sp, #4]
 80060f2:	0213      	lsls	r3, r2, #8
 80060f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80060fc:	0a11      	lsrs	r1, r2, #8
 80060fe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006102:	430b      	orrs	r3, r1
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8006104:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006108:	603b      	str	r3, [r7, #0]
  return HAL_SD_ERROR_NONE;
 800610a:	e799      	b.n	8006040 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800610c:	2508      	movs	r5, #8
 800610e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006110:	e796      	b.n	8006040 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006112:	2502      	movs	r5, #2
 8006114:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006116:	e793      	b.n	8006040 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006118:	2520      	movs	r5, #32
 800611a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800611c:	e790      	b.n	8006040 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 800611e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006122:	e78d      	b.n	8006040 <SD_FindSCR+0x22>

08006124 <SD_WideBus_Enable>:
{
 8006124:	b510      	push	{r4, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 800612a:	2100      	movs	r1, #0
 800612c:	9100      	str	r1, [sp, #0]
 800612e:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006130:	6800      	ldr	r0, [r0, #0]
 8006132:	f001 fd9c 	bl	8007c6e <SDMMC_GetResponse>
 8006136:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800613a:	d116      	bne.n	800616a <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 800613c:	4669      	mov	r1, sp
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ff6d 	bl	800601e <SD_FindSCR>
  if(errorstate != HAL_OK)
 8006144:	4603      	mov	r3, r0
 8006146:	b990      	cbnz	r0, 800616e <SD_WideBus_Enable+0x4a>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800614e:	d011      	beq.n	8006174 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8006150:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006152:	0409      	lsls	r1, r1, #16
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	f001 ff75 	bl	8008044 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800615a:	4603      	mov	r3, r0
 800615c:	b938      	cbnz	r0, 800616e <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800615e:	2102      	movs	r1, #2
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	f001 ffa1 	bl	80080a8 <SDMMC_CmdBusWidth>
 8006166:	4603      	mov	r3, r0
 8006168:	e001      	b.n	800616e <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800616a:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800616e:	4618      	mov	r0, r3
 8006170:	b002      	add	sp, #8
 8006172:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006174:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006178:	e7f9      	b.n	800616e <SD_WideBus_Enable+0x4a>

0800617a <SD_WideBus_Disable>:
{
 800617a:	b510      	push	{r4, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8006180:	2100      	movs	r1, #0
 8006182:	9100      	str	r1, [sp, #0]
 8006184:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006186:	6800      	ldr	r0, [r0, #0]
 8006188:	f001 fd71 	bl	8007c6e <SDMMC_GetResponse>
 800618c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8006190:	d116      	bne.n	80061c0 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8006192:	4669      	mov	r1, sp
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff ff42 	bl	800601e <SD_FindSCR>
  if(errorstate != HAL_OK)
 800619a:	4603      	mov	r3, r0
 800619c:	b990      	cbnz	r0, 80061c4 <SD_WideBus_Disable+0x4a>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800619e:	9b01      	ldr	r3, [sp, #4]
 80061a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80061a4:	d011      	beq.n	80061ca <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80061a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80061a8:	0409      	lsls	r1, r1, #16
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	f001 ff4a 	bl	8008044 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80061b0:	4603      	mov	r3, r0
 80061b2:	b938      	cbnz	r0, 80061c4 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80061b4:	2100      	movs	r1, #0
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	f001 ff76 	bl	80080a8 <SDMMC_CmdBusWidth>
 80061bc:	4603      	mov	r3, r0
 80061be:	e001      	b.n	80061c4 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80061c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	b002      	add	sp, #8
 80061c8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061ce:	e7f9      	b.n	80061c4 <SD_WideBus_Disable+0x4a>

080061d0 <SD_SendStatus>:
{
 80061d0:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80061d2:	b181      	cbz	r1, 80061f6 <SD_SendStatus+0x26>
 80061d4:	460d      	mov	r5, r1
 80061d6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80061d8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80061da:	0409      	lsls	r1, r1, #16
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	f001 ffd5 	bl	800818c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80061e2:	4606      	mov	r6, r0
 80061e4:	b108      	cbz	r0, 80061ea <SD_SendStatus+0x1a>
}
 80061e6:	4630      	mov	r0, r6
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061ea:	2100      	movs	r1, #0
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	f001 fd3e 	bl	8007c6e <SDMMC_GetResponse>
 80061f2:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 80061f4:	e7f7      	b.n	80061e6 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80061f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80061fa:	e7f4      	b.n	80061e6 <SD_SendStatus+0x16>

080061fc <HAL_SD_ReadBlocks_DMA>:
{
 80061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fe:	b087      	sub	sp, #28
 8006200:	4604      	mov	r4, r0
  if(NULL == pData)
 8006202:	b199      	cbz	r1, 800622c <HAL_SD_ReadBlocks_DMA+0x30>
 8006204:	4615      	mov	r5, r2
 8006206:	461e      	mov	r6, r3
 8006208:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800620a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d171      	bne.n	80062f8 <HAL_SD_ReadBlocks_DMA+0xfc>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006214:	2300      	movs	r3, #0
 8006216:	6383      	str	r3, [r0, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006218:	19ab      	adds	r3, r5, r6
 800621a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800621c:	428b      	cmp	r3, r1
 800621e:	d90b      	bls.n	8006238 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006220:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006226:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8006228:	2001      	movs	r0, #1
 800622a:	e066      	b.n	80062fa <HAL_SD_ReadBlocks_DMA+0xfe>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800622c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800622e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006232:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8006234:	2001      	movs	r0, #1
 8006236:	e060      	b.n	80062fa <HAL_SD_ReadBlocks_DMA+0xfe>
    hsd->State = HAL_SD_STATE_BUSY;
 8006238:	2303      	movs	r3, #3
 800623a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800623e:	6803      	ldr	r3, [r0, #0]
 8006240:	2100      	movs	r1, #0
 8006242:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006244:	6800      	ldr	r0, [r0, #0]
 8006246:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006248:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 800624c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800624e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006250:	482c      	ldr	r0, [pc, #176]	; (8006304 <HAL_SD_ReadBlocks_DMA+0x108>)
 8006252:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006254:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006256:	482c      	ldr	r0, [pc, #176]	; (8006308 <HAL_SD_ReadBlocks_DMA+0x10c>)
 8006258:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 800625a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800625c:	6519      	str	r1, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800625e:	6821      	ldr	r1, [r4, #0]
 8006260:	0277      	lsls	r7, r6, #9
 8006262:	08bb      	lsrs	r3, r7, #2
 8006264:	3180      	adds	r1, #128	; 0x80
 8006266:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006268:	f7fc fb64 	bl	8002934 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 800626c:	6822      	ldr	r2, [r4, #0]
 800626e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006276:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006278:	2b01      	cmp	r3, #1
 800627a:	d000      	beq.n	800627e <HAL_SD_ReadBlocks_DMA+0x82>
      BlockAdd *= 512U;
 800627c:	026d      	lsls	r5, r5, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	9300      	str	r3, [sp, #0]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006284:	9701      	str	r7, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006286:	2390      	movs	r3, #144	; 0x90
 8006288:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800628a:	2302      	movs	r3, #2
 800628c:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800628e:	2300      	movs	r3, #0
 8006290:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006292:	2301      	movs	r3, #1
 8006294:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8006296:	4669      	mov	r1, sp
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	f001 fded 	bl	8007e78 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800629e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	f001 fdfa 	bl	8007e9c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80062a8:	4603      	mov	r3, r0
 80062aa:	b998      	cbnz	r0, 80062d4 <HAL_SD_ReadBlocks_DMA+0xd8>
    if(NumberOfBlocks > 1U)
 80062ac:	2e01      	cmp	r6, #1
 80062ae:	d91c      	bls.n	80062ea <HAL_SD_ReadBlocks_DMA+0xee>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062b0:	2382      	movs	r3, #130	; 0x82
 80062b2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80062b4:	4629      	mov	r1, r5
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	f001 fe20 	bl	8007efc <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80062bc:	b1f8      	cbz	r0, 80062fe <HAL_SD_ReadBlocks_DMA+0x102>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80062c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062c8:	4318      	orrs	r0, r3
 80062ca:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062cc:	2001      	movs	r0, #1
 80062ce:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80062d2:	e012      	b.n	80062fa <HAL_SD_ReadBlocks_DMA+0xfe>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80062da:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80062dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80062de:	4318      	orrs	r0, r3
 80062e0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062e2:	2001      	movs	r0, #1
 80062e4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80062e8:	e007      	b.n	80062fa <HAL_SD_ReadBlocks_DMA+0xfe>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062ea:	2381      	movs	r3, #129	; 0x81
 80062ec:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80062ee:	4629      	mov	r1, r5
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	f001 fdeb 	bl	8007ecc <SDMMC_CmdReadSingleBlock>
 80062f6:	e7e1      	b.n	80062bc <HAL_SD_ReadBlocks_DMA+0xc0>
    return HAL_BUSY;
 80062f8:	2002      	movs	r0, #2
}
 80062fa:	b007      	add	sp, #28
 80062fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_OK;
 80062fe:	2000      	movs	r0, #0
 8006300:	e7fb      	b.n	80062fa <HAL_SD_ReadBlocks_DMA+0xfe>
 8006302:	bf00      	nop
 8006304:	0800641f 	.word	0x0800641f
 8006308:	080068d7 	.word	0x080068d7

0800630c <HAL_SD_WriteBlocks_DMA>:
{
 800630c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630e:	b087      	sub	sp, #28
 8006310:	4604      	mov	r4, r0
  if(NULL == pData)
 8006312:	2900      	cmp	r1, #0
 8006314:	d03f      	beq.n	8006396 <HAL_SD_WriteBlocks_DMA+0x8a>
 8006316:	4615      	mov	r5, r2
 8006318:	461e      	mov	r6, r3
 800631a:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800631c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b01      	cmp	r3, #1
 8006324:	d173      	bne.n	800640e <HAL_SD_WriteBlocks_DMA+0x102>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006326:	2300      	movs	r3, #0
 8006328:	6383      	str	r3, [r0, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800632a:	1993      	adds	r3, r2, r6
 800632c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800632e:	4293      	cmp	r3, r2
 8006330:	d837      	bhi.n	80063a2 <HAL_SD_WriteBlocks_DMA+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 8006332:	2303      	movs	r3, #3
 8006334:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8006338:	6803      	ldr	r3, [r0, #0]
 800633a:	2200      	movs	r2, #0
 800633c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 800633e:	6801      	ldr	r1, [r0, #0]
 8006340:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006342:	f043 031a 	orr.w	r3, r3, #26
 8006346:	63cb      	str	r3, [r1, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006348:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800634a:	4932      	ldr	r1, [pc, #200]	; (8006414 <HAL_SD_WriteBlocks_DMA+0x108>)
 800634c:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800634e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006350:	4931      	ldr	r1, [pc, #196]	; (8006418 <HAL_SD_WriteBlocks_DMA+0x10c>)
 8006352:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8006354:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006356:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006358:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800635a:	2b01      	cmp	r3, #1
 800635c:	d000      	beq.n	8006360 <HAL_SD_WriteBlocks_DMA+0x54>
      BlockAdd *= 512U;
 800635e:	026d      	lsls	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	f001 fd99 	bl	8007e9c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800636a:	4603      	mov	r3, r0
 800636c:	b9f8      	cbnz	r0, 80063ae <HAL_SD_WriteBlocks_DMA+0xa2>
    if(NumberOfBlocks > 1U)
 800636e:	2e01      	cmp	r6, #1
 8006370:	d928      	bls.n	80063c4 <HAL_SD_WriteBlocks_DMA+0xb8>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006372:	23a0      	movs	r3, #160	; 0xa0
 8006374:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006376:	4629      	mov	r1, r5
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	f001 fdef 	bl	8007f5c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800637e:	b340      	cbz	r0, 80063d2 <HAL_SD_WriteBlocks_DMA+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800638a:	4318      	orrs	r0, r3
 800638c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800638e:	2001      	movs	r0, #1
 8006390:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8006394:	e03c      	b.n	8006410 <HAL_SD_WriteBlocks_DMA+0x104>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006396:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006398:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800639c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800639e:	2001      	movs	r0, #1
 80063a0:	e036      	b.n	8006410 <HAL_SD_WriteBlocks_DMA+0x104>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063a8:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 80063aa:	2001      	movs	r0, #1
 80063ac:	e030      	b.n	8006410 <HAL_SD_WriteBlocks_DMA+0x104>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80063b4:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063b8:	4318      	orrs	r0, r3
 80063ba:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063bc:	2001      	movs	r0, #1
 80063be:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80063c2:	e025      	b.n	8006410 <HAL_SD_WriteBlocks_DMA+0x104>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063c4:	2390      	movs	r3, #144	; 0x90
 80063c6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80063c8:	4629      	mov	r1, r5
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	f001 fdae 	bl	8007f2c <SDMMC_CmdWriteSingleBlock>
 80063d0:	e7d5      	b.n	800637e <HAL_SD_WriteBlocks_DMA+0x72>
    __HAL_SD_DMA_ENABLE(hsd);
 80063d2:	6822      	ldr	r2, [r4, #0]
 80063d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80063d6:	f043 0308 	orr.w	r3, r3, #8
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	0276      	lsls	r6, r6, #9
 80063e0:	08b3      	lsrs	r3, r6, #2
 80063e2:	3280      	adds	r2, #128	; 0x80
 80063e4:	4639      	mov	r1, r7
 80063e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80063e8:	f7fc faa4 	bl	8002934 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295
 80063f0:	9300      	str	r3, [sp, #0]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80063f2:	9601      	str	r6, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80063f4:	2390      	movs	r3, #144	; 0x90
 80063f6:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80063f8:	2500      	movs	r5, #0
 80063fa:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80063fc:	9504      	str	r5, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80063fe:	2301      	movs	r3, #1
 8006400:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8006402:	4669      	mov	r1, sp
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	f001 fd37 	bl	8007e78 <SDMMC_ConfigData>
    return HAL_OK;
 800640a:	4628      	mov	r0, r5
 800640c:	e000      	b.n	8006410 <HAL_SD_WriteBlocks_DMA+0x104>
    return HAL_BUSY;
 800640e:	2002      	movs	r0, #2
}
 8006410:	b007      	add	sp, #28
 8006412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006414:	08005f3d 	.word	0x08005f3d
 8006418:	080068d7 	.word	0x080068d7

0800641c <HAL_SD_ErrorCallback>:
}
 800641c:	4770      	bx	lr

0800641e <SD_DMAReceiveCplt>:
{
 800641e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006420:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006422:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006424:	2b82      	cmp	r3, #130	; 0x82
 8006426:	d00f      	beq.n	8006448 <SD_DMAReceiveCplt+0x2a>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006428:	6822      	ldr	r2, [r4, #0]
 800642a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800642c:	f023 0308 	bic.w	r3, r3, #8
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800643a:	2301      	movs	r3, #1
 800643c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8006440:	4620      	mov	r0, r4
 8006442:	f002 faa7 	bl	8008994 <HAL_SD_RxCpltCallback>
}
 8006446:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	f001 fd9f 	bl	8007f8c <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800644e:	4603      	mov	r3, r0
 8006450:	2800      	cmp	r0, #0
 8006452:	d0e9      	beq.n	8006428 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8006454:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006456:	4318      	orrs	r0, r3
 8006458:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff ffde 	bl	800641c <HAL_SD_ErrorCallback>
 8006460:	e7e2      	b.n	8006428 <SD_DMAReceiveCplt+0xa>

08006462 <HAL_SD_GetCardCSD>:
{
 8006462:	b430      	push	{r4, r5}
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8006464:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006466:	0f9a      	lsrs	r2, r3, #30
 8006468:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800646a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800646e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8006470:	f3c3 6301 	ubfx	r3, r3, #24, #2
 8006474:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8006476:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800647a:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 800647c:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8006480:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006482:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8006486:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8006488:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	80cb      	strh	r3, [r1, #6]
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8006490:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006494:	88cc      	ldrh	r4, [r1, #6]
 8006496:	f3c3 1203 	ubfx	r2, r3, #4, #4
 800649a:	4322      	orrs	r2, r4
 800649c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80064a4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80064a8:	09da      	lsrs	r2, r3, #7
 80064aa:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80064ac:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80064b0:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80064b2:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80064b6:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80064b8:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80064bc:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80064be:	2200      	movs	r2, #0
 80064c0:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80064c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	f040 8092 	bne.w	80065ee <HAL_SD_GetCardCSD+0x18c>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80064ca:	029b      	lsls	r3, r3, #10
 80064cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064d0:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80064d2:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp) << 2;
 80064d4:	690a      	ldr	r2, [r1, #16]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80064dc:	4313      	orrs	r3, r2
 80064de:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80064e0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80064e2:	690a      	ldr	r2, [r1, #16]
 80064e4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80064e8:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80064ea:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 80064ee:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80064f0:	f3c3 6302 	ubfx	r3, r3, #24, #3
 80064f4:	754b      	strb	r3, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80064f6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80064f8:	f3c2 4307 	ubfx	r3, r2, #16, #8
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80064fc:	f3c2 5442 	ubfx	r4, r2, #21, #3
 8006500:	758c      	strb	r4, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8006502:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8006506:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	f003 0306 	and.w	r3, r3, #6
 800650e:	760b      	strb	r3, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8006510:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006512:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8006516:	7e0c      	ldrb	r4, [r1, #24]
 8006518:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800651c:	4322      	orrs	r2, r4
 800651e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8006520:	690a      	ldr	r2, [r1, #16]
 8006522:	3201      	adds	r2, #1
 8006524:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8006526:	7e0c      	ldrb	r4, [r1, #24]
 8006528:	3402      	adds	r4, #2
 800652a:	fa02 f404 	lsl.w	r4, r2, r4
 800652e:	6544      	str	r4, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8006530:	7a0a      	ldrb	r2, [r1, #8]
 8006532:	b2d5      	uxtb	r5, r2
 8006534:	2201      	movs	r2, #1
 8006536:	40aa      	lsls	r2, r5
 8006538:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800653a:	0a52      	lsrs	r2, r2, #9
 800653c:	fb02 f204 	mul.w	r2, r2, r4
 8006540:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8006542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006546:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8006548:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800654c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006554:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8006556:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8006558:	7e8a      	ldrb	r2, [r1, #26]
 800655a:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 800655e:	4322      	orrs	r2, r4
 8006560:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8006562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006566:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8006568:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800656a:	0e1a      	lsrs	r2, r3, #24
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800656c:	0fdc      	lsrs	r4, r3, #31
 800656e:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8006570:	f3c3 7441 	ubfx	r4, r3, #29, #2
 8006574:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8006576:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800657a:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800657c:	0093      	lsls	r3, r2, #2
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	77cb      	strb	r3, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8006584:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006586:	7fca      	ldrb	r2, [r1, #31]
 8006588:	f3c3 5481 	ubfx	r4, r3, #22, #2
 800658c:	4322      	orrs	r2, r4
 800658e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006590:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006594:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8006598:	2200      	movs	r2, #0
 800659a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800659e:	f3c3 4300 	ubfx	r3, r3, #16, #1
 80065a2:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80065a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80065a8:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 80065ac:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80065b0:	f3c3 3480 	ubfx	r4, r3, #14, #1
 80065b4:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80065b8:	f3c3 3440 	ubfx	r4, r3, #13, #1
 80065bc:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80065c0:	f3c3 3400 	ubfx	r4, r3, #12, #1
 80065c4:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80065c8:	f3c3 2481 	ubfx	r4, r3, #10, #2
 80065cc:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80065d0:	f3c3 2301 	ubfx	r3, r3, #8, #2
 80065d4:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80065d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80065da:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80065de:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 80065e8:	4610      	mov	r0, r2
}
 80065ea:	bc30      	pop	{r4, r5}
 80065ec:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065ee:	2a01      	cmp	r2, #1
 80065f0:	d00c      	beq.n	800660c <HAL_SD_GetCardCSD+0x1aa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80065f2:	6803      	ldr	r3, [r0, #0]
 80065f4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80065fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006600:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006602:	2201      	movs	r2, #1
 8006604:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    return HAL_ERROR;
 8006608:	4610      	mov	r0, r2
 800660a:	e7ee      	b.n	80065ea <HAL_SD_GetCardCSD+0x188>
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800660c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006614:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8006616:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    pCSD->DeviceSize |= (tmp << 8);
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006620:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8006622:	690a      	ldr	r2, [r1, #16]
 8006624:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8006628:	4313      	orrs	r3, r2
 800662a:	610b      	str	r3, [r1, #16]
 800662c:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8006630:	690a      	ldr	r2, [r1, #16]
 8006632:	3201      	adds	r2, #1
 8006634:	0292      	lsls	r2, r2, #10
 8006636:	6542      	str	r2, [r0, #84]	; 0x54
 8006638:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800663a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663e:	6582      	str	r2, [r0, #88]	; 0x58
 8006640:	6602      	str	r2, [r0, #96]	; 0x60
 8006642:	e781      	b.n	8006548 <HAL_SD_GetCardCSD+0xe6>

08006644 <SD_InitCard>:
{
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	b090      	sub	sp, #64	; 0x40
 8006648:	4604      	mov	r4, r0
  uint16_t sd_rca = 1;
 800664a:	2301      	movs	r3, #1
 800664c:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8006650:	6800      	ldr	r0, [r0, #0]
 8006652:	f001 faf2 	bl	8007c3a <SDMMC_GetPowerState>
 8006656:	2800      	cmp	r0, #0
 8006658:	d06a      	beq.n	8006730 <SD_InitCard+0xec>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800665a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800665c:	2b03      	cmp	r3, #3
 800665e:	d143      	bne.n	80066e8 <SD_InitCard+0xa4>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006660:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006662:	2b03      	cmp	r3, #3
 8006664:	d15b      	bne.n	800671e <SD_InitCard+0xda>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006666:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006668:	2b03      	cmp	r3, #3
 800666a:	d01d      	beq.n	80066a8 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 800666c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8006670:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006672:	0409      	lsls	r1, r1, #16
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	f001 fd5c 	bl	8008132 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800667a:	4605      	mov	r5, r0
 800667c:	2800      	cmp	r0, #0
 800667e:	d159      	bne.n	8006734 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006680:	2100      	movs	r1, #0
 8006682:	6820      	ldr	r0, [r4, #0]
 8006684:	f001 faf3 	bl	8007c6e <SDMMC_GetResponse>
 8006688:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800668a:	2104      	movs	r1, #4
 800668c:	6820      	ldr	r0, [r4, #0]
 800668e:	f001 faee 	bl	8007c6e <SDMMC_GetResponse>
 8006692:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006694:	2108      	movs	r1, #8
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	f001 fae9 	bl	8007c6e <SDMMC_GetResponse>
 800669c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800669e:	210c      	movs	r1, #12
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	f001 fae4 	bl	8007c6e <SDMMC_GetResponse>
 80066a6:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80066a8:	2104      	movs	r1, #4
 80066aa:	6820      	ldr	r0, [r4, #0]
 80066ac:	f001 fadf 	bl	8007c6e <SDMMC_GetResponse>
 80066b0:	0d00      	lsrs	r0, r0, #20
 80066b2:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80066b4:	a905      	add	r1, sp, #20
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff fed3 	bl	8006462 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80066bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80066be:	0412      	lsls	r2, r2, #16
 80066c0:	2300      	movs	r3, #0
 80066c2:	6820      	ldr	r0, [r4, #0]
 80066c4:	f001 fc7c 	bl	8007fc0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80066c8:	4605      	mov	r5, r0
 80066ca:	bb98      	cbnz	r0, 8006734 <SD_InitCard+0xf0>
  SDMMC_Init(hsd->Instance, hsd->Init);
 80066cc:	4623      	mov	r3, r4
 80066ce:	f853 6b10 	ldr.w	r6, [r3], #16
 80066d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80066da:	3404      	adds	r4, #4
 80066dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80066e0:	4630      	mov	r0, r6
 80066e2:	f001 fa87 	bl	8007bf4 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 80066e6:	e025      	b.n	8006734 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	f001 fd0d 	bl	8008108 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80066ee:	4605      	mov	r5, r0
 80066f0:	bb00      	cbnz	r0, 8006734 <SD_InitCard+0xf0>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066f2:	2100      	movs	r1, #0
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	f001 faba 	bl	8007c6e <SDMMC_GetResponse>
 80066fa:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066fc:	2104      	movs	r1, #4
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	f001 fab5 	bl	8007c6e <SDMMC_GetResponse>
 8006704:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006706:	2108      	movs	r1, #8
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	f001 fab0 	bl	8007c6e <SDMMC_GetResponse>
 800670e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006710:	210c      	movs	r1, #12
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	f001 faab 	bl	8007c6e <SDMMC_GetResponse>
 8006718:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800671c:	e7a0      	b.n	8006660 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800671e:	f10d 0112 	add.w	r1, sp, #18
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	f001 fd1a 	bl	800815c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006728:	4605      	mov	r5, r0
 800672a:	2800      	cmp	r0, #0
 800672c:	d09b      	beq.n	8006666 <SD_InitCard+0x22>
 800672e:	e001      	b.n	8006734 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006730:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8006734:	4628      	mov	r0, r5
 8006736:	b010      	add	sp, #64	; 0x40
 8006738:	bd70      	pop	{r4, r5, r6, pc}

0800673a <HAL_SD_InitCard>:
{
 800673a:	b510      	push	{r4, lr}
 800673c:	b08a      	sub	sp, #40	; 0x28
 800673e:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006740:	2300      	movs	r3, #0
 8006742:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006744:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006746:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006748:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800674a:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800674c:	2376      	movs	r3, #118	; 0x76
 800674e:	9309      	str	r3, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8006750:	ab0a      	add	r3, sp, #40	; 0x28
 8006752:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006756:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800675a:	ab04      	add	r3, sp, #16
 800675c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	f001 fa48 	bl	8007bf4 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	6853      	ldr	r3, [r2, #4]
 8006768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800676c:	6053      	str	r3, [r2, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 800676e:	6820      	ldr	r0, [r4, #0]
 8006770:	f001 fa5f 	bl	8007c32 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	6853      	ldr	r3, [r2, #4]
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800677e:	2002      	movs	r0, #2
 8006780:	f7fb fdec 	bl	800235c <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8006784:	4620      	mov	r0, r4
 8006786:	f7ff fbe0 	bl	8005f4a <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 800678a:	b140      	cbz	r0, 800679e <HAL_SD_InitCard+0x64>
 800678c:	4602      	mov	r2, r0
    hsd->State = HAL_SD_STATE_READY;
 800678e:	2001      	movs	r0, #1
 8006790:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006796:	4313      	orrs	r3, r2
 8006798:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800679a:	b00a      	add	sp, #40	; 0x28
 800679c:	bd10      	pop	{r4, pc}
  errorstate = SD_InitCard(hsd);
 800679e:	4620      	mov	r0, r4
 80067a0:	f7ff ff50 	bl	8006644 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80067a4:	4602      	mov	r2, r0
 80067a6:	b130      	cbz	r0, 80067b6 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 80067a8:	2001      	movs	r0, #1
 80067aa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067b0:	4313      	orrs	r3, r2
 80067b2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80067b4:	e7f1      	b.n	800679a <HAL_SD_InitCard+0x60>
  return HAL_OK;
 80067b6:	2000      	movs	r0, #0
 80067b8:	e7ef      	b.n	800679a <HAL_SD_InitCard+0x60>

080067ba <HAL_SD_Init>:
  if(hsd == NULL)
 80067ba:	b1a8      	cbz	r0, 80067e8 <HAL_SD_Init+0x2e>
{
 80067bc:	b510      	push	{r4, lr}
 80067be:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80067c0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80067c4:	b163      	cbz	r3, 80067e0 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80067c6:	2303      	movs	r3, #3
 80067c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff ffb4 	bl	800673a <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80067d2:	2000      	movs	r0, #0
 80067d4:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80067d6:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80067d8:	2301      	movs	r3, #1
 80067da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80067de:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80067e0:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80067e2:	f7fb fa77 	bl	8001cd4 <HAL_SD_MspInit>
 80067e6:	e7ee      	b.n	80067c6 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 80067e8:	2001      	movs	r0, #1
}
 80067ea:	4770      	bx	lr

080067ec <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80067ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067ee:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80067f0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80067f2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80067f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80067f6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80067f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80067fa:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80067fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80067fe:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006800:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006802:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006804:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006806:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006808:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800680a:	61cb      	str	r3, [r1, #28]
}
 800680c:	2000      	movs	r0, #0
 800680e:	4770      	bx	lr

08006810 <HAL_SD_ConfigWideBusOperation>:
{
 8006810:	b530      	push	{r4, r5, lr}
 8006812:	b08b      	sub	sp, #44	; 0x2c
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006818:	2303      	movs	r3, #3
 800681a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800681e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006820:	2b03      	cmp	r3, #3
 8006822:	d01c      	beq.n	800685e <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006824:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006828:	d008      	beq.n	800683c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800682a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800682e:	d00a      	beq.n	8006846 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006830:	b179      	cbz	r1, 8006852 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006832:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006838:	6383      	str	r3, [r0, #56]	; 0x38
 800683a:	e014      	b.n	8006866 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800683c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800683e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006842:	6383      	str	r3, [r0, #56]	; 0x38
 8006844:	e00f      	b.n	8006866 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8006846:	f7ff fc6d 	bl	8006124 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800684a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800684c:	4318      	orrs	r0, r3
 800684e:	63a0      	str	r0, [r4, #56]	; 0x38
 8006850:	e009      	b.n	8006866 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8006852:	f7ff fc92 	bl	800617a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8006856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006858:	4318      	orrs	r0, r3
 800685a:	63a0      	str	r0, [r4, #56]	; 0x38
 800685c:	e003      	b.n	8006866 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800685e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006864:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006868:	b143      	cbz	r3, 800687c <HAL_SD_ConfigWideBusOperation+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006872:	2001      	movs	r0, #1
 8006874:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8006878:	b00b      	add	sp, #44	; 0x2c
 800687a:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006880:	68a3      	ldr	r3, [r4, #8]
 8006882:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006884:	68e3      	ldr	r3, [r4, #12]
 8006886:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8006888:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800688a:	6963      	ldr	r3, [r4, #20]
 800688c:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800688e:	69a3      	ldr	r3, [r4, #24]
 8006890:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 8006892:	ab0a      	add	r3, sp, #40	; 0x28
 8006894:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006898:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800689c:	ab04      	add	r3, sp, #16
 800689e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	f001 f9a7 	bl	8007bf4 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80068ac:	2000      	movs	r0, #0
 80068ae:	e7e3      	b.n	8006878 <HAL_SD_ConfigWideBusOperation+0x68>

080068b0 <HAL_SD_GetCardState>:
{
 80068b0:	b510      	push	{r4, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80068b6:	a902      	add	r1, sp, #8
 80068b8:	2300      	movs	r3, #0
 80068ba:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 80068be:	f7ff fc87 	bl	80061d0 <SD_SendStatus>
  if(errorstate != HAL_OK)
 80068c2:	b118      	cbz	r0, 80068cc <HAL_SD_GetCardState+0x1c>
 80068c4:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 80068c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80068c8:	4318      	orrs	r0, r3
 80068ca:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80068cc:	9801      	ldr	r0, [sp, #4]
 80068ce:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80068d2:	b002      	add	sp, #8
 80068d4:	bd10      	pop	{r4, pc}

080068d6 <SD_DMAError>:
{
 80068d6:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80068da:	f7fc f865 	bl	80029a8 <HAL_DMA_GetError>
 80068de:	2802      	cmp	r0, #2
 80068e0:	d00a      	beq.n	80068f8 <SD_DMAError+0x22>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80068e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d007      	beq.n	80068fa <SD_DMAError+0x24>
 80068ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d003      	beq.n	80068fa <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7ff fd92 	bl	800641c <HAL_SD_ErrorCallback>
}
 80068f8:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006906:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800690a:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800690c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800690e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006912:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff ffcb 	bl	80068b0 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800691a:	3805      	subs	r0, #5
 800691c:	b2c0      	uxtb	r0, r0
 800691e:	2801      	cmp	r0, #1
 8006920:	d903      	bls.n	800692a <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8006922:	2301      	movs	r3, #1
 8006924:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006928:	e7e3      	b.n	80068f2 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	f001 fb2e 	bl	8007f8c <SDMMC_CmdStopTransfer>
 8006930:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006932:	4318      	orrs	r0, r3
 8006934:	63a0      	str	r0, [r4, #56]	; 0x38
 8006936:	e7f4      	b.n	8006922 <SD_DMAError+0x4c>

08006938 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006938:	b1d8      	cbz	r0, 8006972 <HAL_SDRAM_Init+0x3a>
{   
 800693a:	b538      	push	{r3, r4, r5, lr}
 800693c:	4604      	mov	r4, r0
 800693e:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006940:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006944:	b183      	cbz	r3, 8006968 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006946:	2302      	movs	r3, #2
 8006948:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800694c:	1d21      	adds	r1, r4, #4
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	f001 f812 	bl	8007978 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006954:	6862      	ldr	r2, [r4, #4]
 8006956:	4629      	mov	r1, r5
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	f001 f847 	bl	80079ec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800695e:	2301      	movs	r3, #1
 8006960:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8006964:	2000      	movs	r0, #0
}
 8006966:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006968:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800696c:	f005 fd12 	bl	800c394 <HAL_SDRAM_MspInit>
 8006970:	e7e9      	b.n	8006946 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8006972:	2001      	movs	r0, #1
}
 8006974:	4770      	bx	lr

08006976 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006976:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006978:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d014      	beq.n	80069ac <HAL_SDRAM_SendCommand+0x36>
 8006982:	460d      	mov	r5, r1
 8006984:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006986:	2302      	movs	r3, #2
 8006988:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800698c:	6800      	ldr	r0, [r0, #0]
 800698e:	f001 f879 	bl	8007a84 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d004      	beq.n	80069a2 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006998:	2301      	movs	r3, #1
 800699a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800699e:	2000      	movs	r0, #0
}
 80069a0:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80069a2:	2305      	movs	r3, #5
 80069a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 80069a8:	2000      	movs	r0, #0
 80069aa:	e7f9      	b.n	80069a0 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 80069ac:	2002      	movs	r0, #2
 80069ae:	e7f7      	b.n	80069a0 <HAL_SDRAM_SendCommand+0x2a>

080069b0 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d00c      	beq.n	80069d4 <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 80069ba:	b510      	push	{r4, lr}
 80069bc:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069be:	2302      	movs	r3, #2
 80069c0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80069c4:	6800      	ldr	r0, [r0, #0]
 80069c6:	f001 f873 	bl	8007ab0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80069d0:	2000      	movs	r0, #0
}
 80069d2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80069d4:	2002      	movs	r0, #2
}
 80069d6:	4770      	bx	lr

080069d8 <HAL_SPDIFRX_Init>:
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80069d8:	2800      	cmp	r0, #0
 80069da:	d030      	beq.n	8006a3e <HAL_SPDIFRX_Init+0x66>
{
 80069dc:	b510      	push	{r4, lr}
 80069de:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80069e0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80069e4:	b333      	cbz	r3, 8006a34 <HAL_SPDIFRX_Init+0x5c>
    HAL_SPDIFRX_MspInit(hspdif);
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80069e6:	2302      	movs	r3, #2
 80069e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	f023 0303 	bic.w	r3, r3, #3
 80069f4:	6013      	str	r3, [r2, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80069f6:	6821      	ldr	r1, [r4, #0]
 80069f8:	680b      	ldr	r3, [r1, #0]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80069fa:	4a12      	ldr	r2, [pc, #72]	; (8006a44 <HAL_SPDIFRX_Init+0x6c>)
 80069fc:	401a      	ands	r2, r3
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80069fe:	69a3      	ldr	r3, [r4, #24]
             hspdif->Init.InputSelection |
 8006a00:	6860      	ldr	r0, [r4, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006a02:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8006a04:	68a0      	ldr	r0, [r4, #8]
             hspdif->Init.InputSelection |
 8006a06:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8006a08:	68e0      	ldr	r0, [r4, #12]
             hspdif->Init.Retries |
 8006a0a:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8006a0c:	6920      	ldr	r0, [r4, #16]
             hspdif->Init.WaitForActivity |
 8006a0e:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8006a10:	6960      	ldr	r0, [r4, #20]
             hspdif->Init.ChannelSelection |
 8006a12:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8006a14:	69e0      	ldr	r0, [r4, #28]
             hspdif->Init.DataFormat |
 8006a16:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8006a18:	6a20      	ldr	r0, [r4, #32]
             hspdif->Init.PreambleTypeMask |
 8006a1a:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8006a1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8006a1e:	4303      	orrs	r3, r0
             hspdif->Init.ParityErrorMask
 8006a20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8006a22:	4303      	orrs	r3, r0
  tmpreg |= (hspdif->Init.StereoMode |
 8006a24:	4313      	orrs	r3, r2
             );


  hspdif->Instance->CR = tmpreg;
 8006a26:	600b      	str	r3, [r1, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006a28:	2000      	movs	r0, #0
 8006a2a:	64a0      	str	r0, [r4, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
}
 8006a32:	bd10      	pop	{r4, pc}
    hspdif->Lock = HAL_UNLOCKED;
 8006a34:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    HAL_SPDIFRX_MspInit(hspdif);
 8006a38:	f7fb f998 	bl	8001d6c <HAL_SPDIFRX_MspInit>
 8006a3c:	e7d3      	b.n	80069e6 <HAL_SPDIFRX_Init+0xe>
    return HAL_ERROR;
 8006a3e:	2001      	movs	r0, #1
}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	fff88407 	.word	0xfff88407

08006a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4a:	6a03      	ldr	r3, [r0, #32]
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a56:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a58:	4c12      	ldr	r4, [pc, #72]	; (8006aa4 <TIM_OC1_SetConfig+0x5c>)
 8006a5a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a5c:	680d      	ldr	r5, [r1, #0]
 8006a5e:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a60:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a64:	688b      	ldr	r3, [r1, #8]
 8006a66:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a68:	4c0f      	ldr	r4, [pc, #60]	; (8006aa8 <TIM_OC1_SetConfig+0x60>)
 8006a6a:	4e10      	ldr	r6, [pc, #64]	; (8006aac <TIM_OC1_SetConfig+0x64>)
 8006a6c:	42b0      	cmp	r0, r6
 8006a6e:	bf18      	it	ne
 8006a70:	42a0      	cmpne	r0, r4
 8006a72:	bf0c      	ite	eq
 8006a74:	2401      	moveq	r4, #1
 8006a76:	2400      	movne	r4, #0
 8006a78:	d105      	bne.n	8006a86 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a7a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a7e:	68ce      	ldr	r6, [r1, #12]
 8006a80:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a82:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a86:	b12c      	cbz	r4, 8006a94 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a8c:	694c      	ldr	r4, [r1, #20]
 8006a8e:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a90:	698a      	ldr	r2, [r1, #24]
 8006a92:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a94:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a96:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a98:	684a      	ldr	r2, [r1, #4]
 8006a9a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9c:	6203      	str	r3, [r0, #32]
}
 8006a9e:	bc70      	pop	{r4, r5, r6}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	fffeff8c 	.word	0xfffeff8c
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400

08006ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ab2:	6a03      	ldr	r3, [r0, #32]
 8006ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006abc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006abe:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac0:	4c14      	ldr	r4, [pc, #80]	; (8006b14 <TIM_OC3_SetConfig+0x64>)
 8006ac2:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac4:	680e      	ldr	r6, [r1, #0]
 8006ac6:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006acc:	688c      	ldr	r4, [r1, #8]
 8006ace:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ad2:	4c11      	ldr	r4, [pc, #68]	; (8006b18 <TIM_OC3_SetConfig+0x68>)
 8006ad4:	4d11      	ldr	r5, [pc, #68]	; (8006b1c <TIM_OC3_SetConfig+0x6c>)
 8006ad6:	42a8      	cmp	r0, r5
 8006ad8:	bf18      	it	ne
 8006ada:	42a0      	cmpne	r0, r4
 8006adc:	bf0c      	ite	eq
 8006ade:	2401      	moveq	r4, #1
 8006ae0:	2400      	movne	r4, #0
 8006ae2:	d106      	bne.n	8006af2 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ae8:	68cd      	ldr	r5, [r1, #12]
 8006aea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af2:	b13c      	cbz	r4, 8006b04 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006af4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006af8:	694c      	ldr	r4, [r1, #20]
 8006afa:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006afe:	698c      	ldr	r4, [r1, #24]
 8006b00:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b06:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b08:	684a      	ldr	r2, [r1, #4]
 8006b0a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0c:	6203      	str	r3, [r0, #32]
}
 8006b0e:	bc70      	pop	{r4, r5, r6}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	fffeff8c 	.word	0xfffeff8c
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40010400 	.word	0x40010400

08006b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b22:	6a03      	ldr	r3, [r0, #32]
 8006b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b28:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b2c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2e:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b30:	4a0d      	ldr	r2, [pc, #52]	; (8006b68 <TIM_OC4_SetConfig+0x48>)
 8006b32:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b34:	680d      	ldr	r5, [r1, #0]
 8006b36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b3e:	688d      	ldr	r5, [r1, #8]
 8006b40:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b44:	4e09      	ldr	r6, [pc, #36]	; (8006b6c <TIM_OC4_SetConfig+0x4c>)
 8006b46:	4d0a      	ldr	r5, [pc, #40]	; (8006b70 <TIM_OC4_SetConfig+0x50>)
 8006b48:	42a8      	cmp	r0, r5
 8006b4a:	bf18      	it	ne
 8006b4c:	42b0      	cmpne	r0, r6
 8006b4e:	d104      	bne.n	8006b5a <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b50:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b54:	694d      	ldr	r5, [r1, #20]
 8006b56:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b5a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b5e:	684a      	ldr	r2, [r1, #4]
 8006b60:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b62:	6203      	str	r3, [r0, #32]
}
 8006b64:	bc70      	pop	{r4, r5, r6}
 8006b66:	4770      	bx	lr
 8006b68:	feff8cff 	.word	0xfeff8cff
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40010400 	.word	0x40010400

08006b74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b74:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b76:	6a03      	ldr	r3, [r0, #32]
 8006b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b82:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b84:	4d0d      	ldr	r5, [pc, #52]	; (8006bbc <TIM_OC5_SetConfig+0x48>)
 8006b86:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b88:	680c      	ldr	r4, [r1, #0]
 8006b8a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b90:	688d      	ldr	r5, [r1, #8]
 8006b92:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b96:	4e0a      	ldr	r6, [pc, #40]	; (8006bc0 <TIM_OC5_SetConfig+0x4c>)
 8006b98:	4d0a      	ldr	r5, [pc, #40]	; (8006bc4 <TIM_OC5_SetConfig+0x50>)
 8006b9a:	42a8      	cmp	r0, r5
 8006b9c:	bf18      	it	ne
 8006b9e:	42b0      	cmpne	r0, r6
 8006ba0:	d104      	bne.n	8006bac <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ba2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ba6:	694d      	ldr	r5, [r1, #20]
 8006ba8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bae:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bb0:	684a      	ldr	r2, [r1, #4]
 8006bb2:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb4:	6203      	str	r3, [r0, #32]
}
 8006bb6:	bc70      	pop	{r4, r5, r6}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	fffeff8f 	.word	0xfffeff8f
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010400 	.word	0x40010400

08006bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bca:	6a03      	ldr	r3, [r0, #32]
 8006bcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bd0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bd6:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	; (8006c10 <TIM_OC6_SetConfig+0x48>)
 8006bda:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bdc:	680d      	ldr	r5, [r1, #0]
 8006bde:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006be2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006be6:	688d      	ldr	r5, [r1, #8]
 8006be8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bec:	4e09      	ldr	r6, [pc, #36]	; (8006c14 <TIM_OC6_SetConfig+0x4c>)
 8006bee:	4d0a      	ldr	r5, [pc, #40]	; (8006c18 <TIM_OC6_SetConfig+0x50>)
 8006bf0:	42a8      	cmp	r0, r5
 8006bf2:	bf18      	it	ne
 8006bf4:	42b0      	cmpne	r0, r6
 8006bf6:	d104      	bne.n	8006c02 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bf8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bfc:	694d      	ldr	r5, [r1, #20]
 8006bfe:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c02:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c04:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c06:	684a      	ldr	r2, [r1, #4]
 8006c08:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0a:	6203      	str	r3, [r0, #32]
}
 8006c0c:	bc70      	pop	{r4, r5, r6}
 8006c0e:	4770      	bx	lr
 8006c10:	feff8fff 	.word	0xfeff8fff
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400

08006c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c1c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c1e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c20:	6a04      	ldr	r4, [r0, #32]
 8006c22:	f024 0401 	bic.w	r4, r4, #1
 8006c26:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c28:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c2a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c2e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c32:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006c36:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c38:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006c3a:	6203      	str	r3, [r0, #32]
}
 8006c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c42:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c44:	6a03      	ldr	r3, [r0, #32]
 8006c46:	f023 0310 	bic.w	r3, r3, #16
 8006c4a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006c4e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c50:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c54:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c5c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c60:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006c62:	6203      	str	r3, [r0, #32]
}
 8006c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c6a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c70:	4319      	orrs	r1, r3
 8006c72:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	6081      	str	r1, [r0, #8]
}
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c7c:	6802      	ldr	r2, [r0, #0]
 8006c7e:	68d3      	ldr	r3, [r2, #12]
 8006c80:	f043 0301 	orr.w	r3, r3, #1
 8006c84:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c86:	6802      	ldr	r2, [r0, #0]
 8006c88:	6891      	ldr	r1, [r2, #8]
 8006c8a:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <HAL_TIM_Base_Start_IT+0x28>)
 8006c8c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	2b06      	cmp	r3, #6
 8006c90:	bf18      	it	ne
 8006c92:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8006c96:	d003      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8006c98:	6813      	ldr	r3, [r2, #0]
 8006c9a:	f043 0301 	orr.w	r3, r3, #1
 8006c9e:	6013      	str	r3, [r2, #0]
}
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	4770      	bx	lr
 8006ca4:	00010007 	.word	0x00010007

08006ca8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006ca8:	4770      	bx	lr

08006caa <HAL_TIM_IC_CaptureCallback>:
}
 8006caa:	4770      	bx	lr

08006cac <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006cac:	4770      	bx	lr

08006cae <HAL_TIM_TriggerCallback>:
}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_IRQHandler>:
{
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cb4:	6803      	ldr	r3, [r0, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	f012 0f02 	tst.w	r2, #2
 8006cbc:	d011      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	f012 0f02 	tst.w	r2, #2
 8006cc4:	d00d      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cc6:	f06f 0202 	mvn.w	r2, #2
 8006cca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cd0:	6803      	ldr	r3, [r0, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f013 0f03 	tst.w	r3, #3
 8006cd8:	d079      	beq.n	8006dce <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	f7ff ffe6 	bl	8006caa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	f012 0f04 	tst.w	r2, #4
 8006cea:	d012      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	f012 0f04 	tst.w	r2, #4
 8006cf2:	d00e      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf4:	f06f 0204 	mvn.w	r2, #4
 8006cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d06:	d068      	beq.n	8006dda <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f7ff ffce 	bl	8006caa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	f012 0f08 	tst.w	r2, #8
 8006d1a:	d012      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	f012 0f08 	tst.w	r2, #8
 8006d22:	d00e      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d24:	f06f 0208 	mvn.w	r2, #8
 8006d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d2a:	2304      	movs	r3, #4
 8006d2c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f013 0f03 	tst.w	r3, #3
 8006d36:	d057      	beq.n	8006de8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7ff ffb6 	bl	8006caa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	691a      	ldr	r2, [r3, #16]
 8006d46:	f012 0f10 	tst.w	r2, #16
 8006d4a:	d012      	beq.n	8006d72 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	f012 0f10 	tst.w	r2, #16
 8006d52:	d00e      	beq.n	8006d72 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d54:	f06f 0210 	mvn.w	r2, #16
 8006d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d66:	d046      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f7ff ff9e 	bl	8006caa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	f012 0f01 	tst.w	r2, #1
 8006d7a:	d003      	beq.n	8006d84 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	f012 0f01 	tst.w	r2, #1
 8006d82:	d13f      	bne.n	8006e04 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d8c:	d003      	beq.n	8006d96 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d94:	d13d      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006d9e:	d003      	beq.n	8006da8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006da6:	d13b      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006db0:	d003      	beq.n	8006dba <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006db8:	d139      	bne.n	8006e2e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	f012 0f20 	tst.w	r2, #32
 8006dc2:	d003      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	f012 0f20 	tst.w	r2, #32
 8006dca:	d137      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x18c>
}
 8006dcc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dce:	f7ff ff6b 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f7ff ff6a 	bl	8006cac <HAL_TIM_PWM_PulseFinishedCallback>
 8006dd8:	e781      	b.n	8006cde <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff ff64 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff ff63 	bl	8006cac <HAL_TIM_PWM_PulseFinishedCallback>
 8006de6:	e792      	b.n	8006d0e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7ff ff5d 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff ff5c 	bl	8006cac <HAL_TIM_PWM_PulseFinishedCallback>
 8006df4:	e7a3      	b.n	8006d3e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff ff56 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff ff55 	bl	8006cac <HAL_TIM_PWM_PulseFinishedCallback>
 8006e02:	e7b4      	b.n	8006d6e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e04:	f06f 0201 	mvn.w	r2, #1
 8006e08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f7fa fac8 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
 8006e10:	e7b8      	b.n	8006d84 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fb0a 	bl	8007432 <HAL_TIMEx_BreakCallback>
 8006e1e:	e7ba      	b.n	8006d96 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fb04 	bl	8007434 <HAL_TIMEx_Break2Callback>
 8006e2c:	e7bc      	b.n	8006da8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e32:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff ff3a 	bl	8006cae <HAL_TIM_TriggerCallback>
 8006e3a:	e7be      	b.n	8006dba <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e3c:	f06f 0220 	mvn.w	r2, #32
 8006e40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 faf4 	bl	8007430 <HAL_TIMEx_CommutCallback>
}
 8006e48:	e7c0      	b.n	8006dcc <HAL_TIM_IRQHandler+0x11c>
	...

08006e4c <TIM_Base_SetConfig>:
{
 8006e4c:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8006e4e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e50:	4c3a      	ldr	r4, [pc, #232]	; (8006f3c <TIM_Base_SetConfig+0xf0>)
 8006e52:	42a0      	cmp	r0, r4
 8006e54:	bf14      	ite	ne
 8006e56:	2400      	movne	r4, #0
 8006e58:	2401      	moveq	r4, #1
 8006e5a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e5e:	bf14      	ite	ne
 8006e60:	4622      	movne	r2, r4
 8006e62:	f044 0201 	orreq.w	r2, r4, #1
 8006e66:	b9aa      	cbnz	r2, 8006e94 <TIM_Base_SetConfig+0x48>
 8006e68:	4d35      	ldr	r5, [pc, #212]	; (8006f40 <TIM_Base_SetConfig+0xf4>)
 8006e6a:	42a8      	cmp	r0, r5
 8006e6c:	bf14      	ite	ne
 8006e6e:	2500      	movne	r5, #0
 8006e70:	2501      	moveq	r5, #1
 8006e72:	4e34      	ldr	r6, [pc, #208]	; (8006f44 <TIM_Base_SetConfig+0xf8>)
 8006e74:	42b0      	cmp	r0, r6
 8006e76:	d00d      	beq.n	8006e94 <TIM_Base_SetConfig+0x48>
 8006e78:	b965      	cbnz	r5, 8006e94 <TIM_Base_SetConfig+0x48>
 8006e7a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8006e7e:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8006e82:	42a8      	cmp	r0, r5
 8006e84:	bf14      	ite	ne
 8006e86:	2500      	movne	r5, #0
 8006e88:	2501      	moveq	r5, #1
 8006e8a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006e8e:	42b0      	cmp	r0, r6
 8006e90:	d000      	beq.n	8006e94 <TIM_Base_SetConfig+0x48>
 8006e92:	b11d      	cbz	r5, 8006e9c <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e98:	684d      	ldr	r5, [r1, #4]
 8006e9a:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	d133      	bne.n	8006f08 <TIM_Base_SetConfig+0xbc>
 8006ea0:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <TIM_Base_SetConfig+0xf4>)
 8006ea2:	4290      	cmp	r0, r2
 8006ea4:	bf14      	ite	ne
 8006ea6:	2200      	movne	r2, #0
 8006ea8:	2201      	moveq	r2, #1
 8006eaa:	4d26      	ldr	r5, [pc, #152]	; (8006f44 <TIM_Base_SetConfig+0xf8>)
 8006eac:	42a8      	cmp	r0, r5
 8006eae:	d02b      	beq.n	8006f08 <TIM_Base_SetConfig+0xbc>
 8006eb0:	bb52      	cbnz	r2, 8006f08 <TIM_Base_SetConfig+0xbc>
 8006eb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006eb6:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8006eba:	4290      	cmp	r0, r2
 8006ebc:	bf14      	ite	ne
 8006ebe:	2200      	movne	r2, #0
 8006ec0:	2201      	moveq	r2, #1
 8006ec2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006ec6:	42a8      	cmp	r0, r5
 8006ec8:	d01e      	beq.n	8006f08 <TIM_Base_SetConfig+0xbc>
 8006eca:	b9ea      	cbnz	r2, 8006f08 <TIM_Base_SetConfig+0xbc>
 8006ecc:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <TIM_Base_SetConfig+0xfc>)
 8006ece:	4290      	cmp	r0, r2
 8006ed0:	bf14      	ite	ne
 8006ed2:	2200      	movne	r2, #0
 8006ed4:	2201      	moveq	r2, #1
 8006ed6:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8006eda:	42a8      	cmp	r0, r5
 8006edc:	d014      	beq.n	8006f08 <TIM_Base_SetConfig+0xbc>
 8006ede:	b99a      	cbnz	r2, 8006f08 <TIM_Base_SetConfig+0xbc>
 8006ee0:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <TIM_Base_SetConfig+0x100>)
 8006ee2:	4290      	cmp	r0, r2
 8006ee4:	bf14      	ite	ne
 8006ee6:	2200      	movne	r2, #0
 8006ee8:	2201      	moveq	r2, #1
 8006eea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006eee:	42a8      	cmp	r0, r5
 8006ef0:	d00a      	beq.n	8006f08 <TIM_Base_SetConfig+0xbc>
 8006ef2:	b94a      	cbnz	r2, 8006f08 <TIM_Base_SetConfig+0xbc>
 8006ef4:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <TIM_Base_SetConfig+0x104>)
 8006ef6:	4290      	cmp	r0, r2
 8006ef8:	bf14      	ite	ne
 8006efa:	2200      	movne	r2, #0
 8006efc:	2201      	moveq	r2, #1
 8006efe:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8006f02:	42a8      	cmp	r0, r5
 8006f04:	d000      	beq.n	8006f08 <TIM_Base_SetConfig+0xbc>
 8006f06:	b11a      	cbz	r2, 8006f10 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f0c:	68ca      	ldr	r2, [r1, #12]
 8006f0e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f14:	694a      	ldr	r2, [r1, #20]
 8006f16:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006f18:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f1a:	688a      	ldr	r2, [r1, #8]
 8006f1c:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006f1e:	680a      	ldr	r2, [r1, #0]
 8006f20:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <TIM_Base_SetConfig+0x108>)
 8006f24:	4298      	cmp	r0, r3
 8006f26:	bf14      	ite	ne
 8006f28:	4623      	movne	r3, r4
 8006f2a:	f044 0301 	orreq.w	r3, r4, #1
 8006f2e:	b10b      	cbz	r3, 8006f34 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8006f30:	690b      	ldr	r3, [r1, #16]
 8006f32:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006f34:	2301      	movs	r3, #1
 8006f36:	6143      	str	r3, [r0, #20]
}
 8006f38:	bc70      	pop	{r4, r5, r6}
 8006f3a:	4770      	bx	lr
 8006f3c:	40010000 	.word	0x40010000
 8006f40:	40000800 	.word	0x40000800
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40001800 	.word	0x40001800
 8006f50:	40002000 	.word	0x40002000
 8006f54:	40010400 	.word	0x40010400

08006f58 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006f58:	b1a8      	cbz	r0, 8006f86 <HAL_TIM_Base_Init+0x2e>
{
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f62:	b15b      	cbz	r3, 8006f7c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	2302      	movs	r3, #2
 8006f66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f6a:	1d21      	adds	r1, r4, #4
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	f7ff ff6d 	bl	8006e4c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006f78:	2000      	movs	r0, #0
}
 8006f7a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006f7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006f80:	f7fa ff24 	bl	8001dcc <HAL_TIM_Base_MspInit>
 8006f84:	e7ee      	b.n	8006f64 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006f86:	2001      	movs	r0, #1
}
 8006f88:	4770      	bx	lr

08006f8a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006f8a:	b1a8      	cbz	r0, 8006fb8 <HAL_TIM_PWM_Init+0x2e>
{
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006f90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f94:	b15b      	cbz	r3, 8006fae <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f96:	2302      	movs	r3, #2
 8006f98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f9c:	1d21      	adds	r1, r4, #4
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	f7ff ff54 	bl	8006e4c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006faa:	2000      	movs	r0, #0
}
 8006fac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006fae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006fb2:	f7fa ff83 	bl	8001ebc <HAL_TIM_PWM_MspInit>
 8006fb6:	e7ee      	b.n	8006f96 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006fb8:	2001      	movs	r0, #1
}
 8006fba:	4770      	bx	lr

08006fbc <TIM_OC2_SetConfig>:
{
 8006fbc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fbe:	6a03      	ldr	r3, [r0, #32]
 8006fc0:	f023 0310 	bic.w	r3, r3, #16
 8006fc4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006fc6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006fc8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006fca:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fcc:	4c14      	ldr	r4, [pc, #80]	; (8007020 <TIM_OC2_SetConfig+0x64>)
 8006fce:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd0:	680d      	ldr	r5, [r1, #0]
 8006fd2:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006fd6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fda:	688c      	ldr	r4, [r1, #8]
 8006fdc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fe0:	4c10      	ldr	r4, [pc, #64]	; (8007024 <TIM_OC2_SetConfig+0x68>)
 8006fe2:	4e11      	ldr	r6, [pc, #68]	; (8007028 <TIM_OC2_SetConfig+0x6c>)
 8006fe4:	42b0      	cmp	r0, r6
 8006fe6:	bf18      	it	ne
 8006fe8:	42a0      	cmpne	r0, r4
 8006fea:	bf0c      	ite	eq
 8006fec:	2401      	moveq	r4, #1
 8006fee:	2400      	movne	r4, #0
 8006ff0:	d106      	bne.n	8007000 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff6:	68ce      	ldr	r6, [r1, #12]
 8006ff8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007000:	b13c      	cbz	r4, 8007012 <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007002:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007006:	694c      	ldr	r4, [r1, #20]
 8007008:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800700c:	698c      	ldr	r4, [r1, #24]
 800700e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8007012:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007014:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007016:	684a      	ldr	r2, [r1, #4]
 8007018:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800701a:	6203      	str	r3, [r0, #32]
}
 800701c:	bc70      	pop	{r4, r5, r6}
 800701e:	4770      	bx	lr
 8007020:	feff8cff 	.word	0xfeff8cff
 8007024:	40010000 	.word	0x40010000
 8007028:	40010400 	.word	0x40010400

0800702c <HAL_TIM_PWM_ConfigChannel>:
{
 800702c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800702e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007032:	2b01      	cmp	r3, #1
 8007034:	f000 8092 	beq.w	800715c <HAL_TIM_PWM_ConfigChannel+0x130>
 8007038:	460d      	mov	r5, r1
 800703a:	4604      	mov	r4, r0
 800703c:	2301      	movs	r3, #1
 800703e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007042:	2302      	movs	r3, #2
 8007044:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8007048:	2a14      	cmp	r2, #20
 800704a:	d81e      	bhi.n	800708a <HAL_TIM_PWM_ConfigChannel+0x5e>
 800704c:	e8df f002 	tbb	[pc, r2]
 8007050:	1d1d1d0b 	.word	0x1d1d1d0b
 8007054:	1d1d1d24 	.word	0x1d1d1d24
 8007058:	1d1d1d38 	.word	0x1d1d1d38
 800705c:	1d1d1d4b 	.word	0x1d1d1d4b
 8007060:	1d1d1d5f 	.word	0x1d1d1d5f
 8007064:	72          	.byte	0x72
 8007065:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007066:	6800      	ldr	r0, [r0, #0]
 8007068:	f7ff fcee 	bl	8006a48 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	6993      	ldr	r3, [r2, #24]
 8007070:	f043 0308 	orr.w	r3, r3, #8
 8007074:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	6993      	ldr	r3, [r2, #24]
 800707a:	f023 0304 	bic.w	r3, r3, #4
 800707e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007080:	6822      	ldr	r2, [r4, #0]
 8007082:	6993      	ldr	r3, [r2, #24]
 8007084:	6929      	ldr	r1, [r5, #16]
 8007086:	430b      	orrs	r3, r1
 8007088:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800708a:	2301      	movs	r3, #1
 800708c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007090:	2000      	movs	r0, #0
 8007092:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007096:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007098:	6800      	ldr	r0, [r0, #0]
 800709a:	f7ff ff8f 	bl	8006fbc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	6993      	ldr	r3, [r2, #24]
 80070a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	6993      	ldr	r3, [r2, #24]
 80070ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	6993      	ldr	r3, [r2, #24]
 80070b6:	6929      	ldr	r1, [r5, #16]
 80070b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070bc:	6193      	str	r3, [r2, #24]
      break;
 80070be:	e7e4      	b.n	800708a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070c0:	6800      	ldr	r0, [r0, #0]
 80070c2:	f7ff fcf5 	bl	8006ab0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	69d3      	ldr	r3, [r2, #28]
 80070ca:	f043 0308 	orr.w	r3, r3, #8
 80070ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	69d3      	ldr	r3, [r2, #28]
 80070d4:	f023 0304 	bic.w	r3, r3, #4
 80070d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	69d3      	ldr	r3, [r2, #28]
 80070de:	6929      	ldr	r1, [r5, #16]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	61d3      	str	r3, [r2, #28]
      break;
 80070e4:	e7d1      	b.n	800708a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	f7ff fd1a 	bl	8006b20 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ec:	6822      	ldr	r2, [r4, #0]
 80070ee:	69d3      	ldr	r3, [r2, #28]
 80070f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	69d3      	ldr	r3, [r2, #28]
 80070fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	69d3      	ldr	r3, [r2, #28]
 8007104:	6929      	ldr	r1, [r5, #16]
 8007106:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800710a:	61d3      	str	r3, [r2, #28]
      break;
 800710c:	e7bd      	b.n	800708a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800710e:	6800      	ldr	r0, [r0, #0]
 8007110:	f7ff fd30 	bl	8006b74 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007118:	f043 0308 	orr.w	r3, r3, #8
 800711c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800711e:	6822      	ldr	r2, [r4, #0]
 8007120:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007122:	f023 0304 	bic.w	r3, r3, #4
 8007126:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007128:	6822      	ldr	r2, [r4, #0]
 800712a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800712c:	6929      	ldr	r1, [r5, #16]
 800712e:	430b      	orrs	r3, r1
 8007130:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8007132:	e7aa      	b.n	800708a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007134:	6800      	ldr	r0, [r0, #0]
 8007136:	f7ff fd47 	bl	8006bc8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800713e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007142:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800714c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007152:	6929      	ldr	r1, [r5, #16]
 8007154:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007158:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800715a:	e796      	b.n	800708a <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800715c:	2002      	movs	r0, #2
 800715e:	e79a      	b.n	8007096 <HAL_TIM_PWM_ConfigChannel+0x6a>

08007160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007160:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007162:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007164:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007168:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800716c:	430b      	orrs	r3, r1
 800716e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007170:	6083      	str	r3, [r0, #8]
}
 8007172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007178:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d064      	beq.n	800724a <HAL_TIM_ConfigClockSource+0xd2>
{
 8007180:	b510      	push	{r4, lr}
 8007182:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007184:	2301      	movs	r3, #1
 8007186:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800718a:	2302      	movs	r3, #2
 800718c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007190:	6802      	ldr	r2, [r0, #0]
 8007192:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007194:	4b2e      	ldr	r3, [pc, #184]	; (8007250 <HAL_TIM_ConfigClockSource+0xd8>)
 8007196:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8007198:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800719a:	680b      	ldr	r3, [r1, #0]
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d04a      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0xbe>
 80071a0:	d913      	bls.n	80071ca <HAL_TIM_ConfigClockSource+0x52>
 80071a2:	2b60      	cmp	r3, #96	; 0x60
 80071a4:	d03d      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0xaa>
 80071a6:	d91e      	bls.n	80071e6 <HAL_TIM_ConfigClockSource+0x6e>
 80071a8:	2b70      	cmp	r3, #112	; 0x70
 80071aa:	d028      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x86>
 80071ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b0:	d130      	bne.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80071b2:	68cb      	ldr	r3, [r1, #12]
 80071b4:	684a      	ldr	r2, [r1, #4]
 80071b6:	6889      	ldr	r1, [r1, #8]
 80071b8:	6820      	ldr	r0, [r4, #0]
 80071ba:	f7ff ffd1 	bl	8007160 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	6893      	ldr	r3, [r2, #8]
 80071c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c6:	6093      	str	r3, [r2, #8]
      break;
 80071c8:	e024      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d006      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x64>
 80071ce:	d904      	bls.n	80071da <HAL_TIM_ConfigClockSource+0x62>
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d003      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x64>
 80071d4:	2b30      	cmp	r3, #48	; 0x30
 80071d6:	d001      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x64>
 80071d8:	e01c      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
 80071da:	b9db      	cbnz	r3, 8007214 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071dc:	4619      	mov	r1, r3
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	f7ff fd43 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 80071e4:	e016      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80071e6:	2b50      	cmp	r3, #80	; 0x50
 80071e8:	d114      	bne.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ea:	68ca      	ldr	r2, [r1, #12]
 80071ec:	6849      	ldr	r1, [r1, #4]
 80071ee:	6820      	ldr	r0, [r4, #0]
 80071f0:	f7ff fd14 	bl	8006c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071f4:	2150      	movs	r1, #80	; 0x50
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	f7ff fd37 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 80071fc:	e00a      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80071fe:	68cb      	ldr	r3, [r1, #12]
 8007200:	684a      	ldr	r2, [r1, #4]
 8007202:	6889      	ldr	r1, [r1, #8]
 8007204:	6820      	ldr	r0, [r4, #0]
 8007206:	f7ff ffab 	bl	8007160 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800720e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007212:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007214:	2301      	movs	r3, #1
 8007216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800721a:	2000      	movs	r0, #0
 800721c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007220:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007222:	68ca      	ldr	r2, [r1, #12]
 8007224:	6849      	ldr	r1, [r1, #4]
 8007226:	6820      	ldr	r0, [r4, #0]
 8007228:	f7ff fd0b 	bl	8006c42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800722c:	2160      	movs	r1, #96	; 0x60
 800722e:	6820      	ldr	r0, [r4, #0]
 8007230:	f7ff fd1b 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 8007234:	e7ee      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007236:	68ca      	ldr	r2, [r1, #12]
 8007238:	6849      	ldr	r1, [r1, #4]
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	f7ff fcee 	bl	8006c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007240:	2140      	movs	r1, #64	; 0x40
 8007242:	6820      	ldr	r0, [r4, #0]
 8007244:	f7ff fd11 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 8007248:	e7e4      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 800724a:	2002      	movs	r0, #2
}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	fffe0088 	.word	0xfffe0088

08007254 <TIM_SlaveTimer_SetConfig>:
{
 8007254:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8007256:	6804      	ldr	r4, [r0, #0]
 8007258:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800725a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800725e:	684b      	ldr	r3, [r1, #4]
 8007260:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007262:	4a1f      	ldr	r2, [pc, #124]	; (80072e0 <TIM_SlaveTimer_SetConfig+0x8c>)
 8007264:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007266:	680b      	ldr	r3, [r1, #0]
 8007268:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800726a:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800726c:	684b      	ldr	r3, [r1, #4]
 800726e:	2b50      	cmp	r3, #80	; 0x50
 8007270:	d023      	beq.n	80072ba <TIM_SlaveTimer_SetConfig+0x66>
 8007272:	d90b      	bls.n	800728c <TIM_SlaveTimer_SetConfig+0x38>
 8007274:	2b60      	cmp	r3, #96	; 0x60
 8007276:	d027      	beq.n	80072c8 <TIM_SlaveTimer_SetConfig+0x74>
 8007278:	2b70      	cmp	r3, #112	; 0x70
 800727a:	d12c      	bne.n	80072d6 <TIM_SlaveTimer_SetConfig+0x82>
      TIM_ETR_SetConfig(htim->Instance,
 800727c:	690b      	ldr	r3, [r1, #16]
 800727e:	688a      	ldr	r2, [r1, #8]
 8007280:	68c9      	ldr	r1, [r1, #12]
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	f7ff ff6c 	bl	8007160 <TIM_ETR_SetConfig>
  return HAL_OK;
 8007288:	2000      	movs	r0, #0
}
 800728a:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 800728c:	2b40      	cmp	r3, #64	; 0x40
 800728e:	d122      	bne.n	80072d6 <TIM_SlaveTimer_SetConfig+0x82>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007290:	680b      	ldr	r3, [r1, #0]
 8007292:	2b05      	cmp	r3, #5
 8007294:	d021      	beq.n	80072da <TIM_SlaveTimer_SetConfig+0x86>
      tmpccer = htim->Instance->CCER;
 8007296:	6803      	ldr	r3, [r0, #0]
 8007298:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80072a2:	6802      	ldr	r2, [r0, #0]
 80072a4:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80072aa:	6909      	ldr	r1, [r1, #16]
 80072ac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80072b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80072b2:	6803      	ldr	r3, [r0, #0]
 80072b4:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 80072b6:	2000      	movs	r0, #0
      break;
 80072b8:	e7e7      	b.n	800728a <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	6889      	ldr	r1, [r1, #8]
 80072be:	6800      	ldr	r0, [r0, #0]
 80072c0:	f7ff fcac 	bl	8006c1c <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 80072c4:	2000      	movs	r0, #0
      break;
 80072c6:	e7e0      	b.n	800728a <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072c8:	690a      	ldr	r2, [r1, #16]
 80072ca:	6889      	ldr	r1, [r1, #8]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f7ff fcb8 	bl	8006c42 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 80072d2:	2000      	movs	r0, #0
      break;
 80072d4:	e7d9      	b.n	800728a <TIM_SlaveTimer_SetConfig+0x36>
  return HAL_OK;
 80072d6:	2000      	movs	r0, #0
 80072d8:	e7d7      	b.n	800728a <TIM_SlaveTimer_SetConfig+0x36>
        return HAL_ERROR;
 80072da:	2001      	movs	r0, #1
 80072dc:	e7d5      	b.n	800728a <TIM_SlaveTimer_SetConfig+0x36>
 80072de:	bf00      	nop
 80072e0:	fffefff8 	.word	0xfffefff8

080072e4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80072e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d024      	beq.n	8007336 <HAL_TIM_SlaveConfigSynchro+0x52>
{
 80072ec:	b510      	push	{r4, lr}
 80072ee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80072f0:	2301      	movs	r3, #1
 80072f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80072f6:	2302      	movs	r3, #2
 80072f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80072fc:	f7ff ffaa 	bl	8007254 <TIM_SlaveTimer_SetConfig>
 8007300:	4603      	mov	r3, r0
 8007302:	b988      	cbnz	r0, 8007328 <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007304:	6821      	ldr	r1, [r4, #0]
 8007306:	68ca      	ldr	r2, [r1, #12]
 8007308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800730c:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800730e:	6821      	ldr	r1, [r4, #0]
 8007310:	68ca      	ldr	r2, [r1, #12]
 8007312:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007316:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007318:	2201      	movs	r2, #1
 800731a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800731e:	2200      	movs	r2, #0
 8007320:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8007324:	4618      	mov	r0, r3
 8007326:	bd10      	pop	{r4, pc}
      htim->State = HAL_TIM_STATE_READY;
 8007328:	2301      	movs	r3, #1
 800732a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800732e:	2200      	movs	r2, #0
 8007330:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8007334:	e7f6      	b.n	8007324 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 8007336:	2302      	movs	r3, #2
}
 8007338:	4618      	mov	r0, r3
 800733a:	4770      	bx	lr

0800733c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800733c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d027      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8007344:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8007346:	2301      	movs	r3, #1
 8007348:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734c:	2302      	movs	r3, #2
 800734e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007352:	6803      	ldr	r3, [r0, #0]
 8007354:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007356:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007358:	4e0f      	ldr	r6, [pc, #60]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 800735a:	4c10      	ldr	r4, [pc, #64]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800735c:	42a3      	cmp	r3, r4
 800735e:	bf18      	it	ne
 8007360:	42b3      	cmpne	r3, r6
 8007362:	d103      	bne.n	800736c <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007364:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007368:	684c      	ldr	r4, [r1, #4]
 800736a:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800736c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007370:	680c      	ldr	r4, [r1, #0]
 8007372:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007374:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007378:	6889      	ldr	r1, [r1, #8]
 800737a:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800737c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800737e:	6803      	ldr	r3, [r0, #0]
 8007380:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007382:	2301      	movs	r3, #1
 8007384:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007388:	2300      	movs	r3, #0
 800738a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800738e:	4618      	mov	r0, r3
}
 8007390:	bc70      	pop	{r4, r5, r6}
 8007392:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007394:	2002      	movs	r0, #2
}
 8007396:	4770      	bx	lr
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d03c      	beq.n	8007422 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 80073a8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80073aa:	2301      	movs	r3, #1
 80073ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073b0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	688a      	ldr	r2, [r1, #8]
 80073b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073be:	684a      	ldr	r2, [r1, #4]
 80073c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073c6:	680a      	ldr	r2, [r1, #0]
 80073c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ce:	690a      	ldr	r2, [r1, #16]
 80073d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073d6:	694a      	ldr	r2, [r1, #20]
 80073d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073de:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80073e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073e2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80073e6:	698a      	ldr	r2, [r1, #24]
 80073e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073ec:	6802      	ldr	r2, [r0, #0]
 80073ee:	4d0e      	ldr	r5, [pc, #56]	; (8007428 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80073f0:	4c0e      	ldr	r4, [pc, #56]	; (800742c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80073f2:	42a2      	cmp	r2, r4
 80073f4:	bf18      	it	ne
 80073f6:	42aa      	cmpne	r2, r5
 80073f8:	d10c      	bne.n	8007414 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073fe:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007400:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007408:	69cc      	ldr	r4, [r1, #28]
 800740a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800740c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007410:	6a09      	ldr	r1, [r1, #32]
 8007412:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007414:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007416:	2300      	movs	r3, #0
 8007418:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800741c:	4618      	mov	r0, r3
}
 800741e:	bc30      	pop	{r4, r5}
 8007420:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007422:	2002      	movs	r0, #2
}
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40010000 	.word	0x40010000
 800742c:	40010400 	.word	0x40010400

08007430 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007430:	4770      	bx	lr

08007432 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007432:	4770      	bx	lr

08007434 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007434:	4770      	bx	lr
	...

08007438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007438:	b510      	push	{r4, lr}
 800743a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800743c:	6883      	ldr	r3, [r0, #8]
 800743e:	6902      	ldr	r2, [r0, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	6942      	ldr	r2, [r0, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	69c2      	ldr	r2, [r0, #28]
 8007448:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800744a:	6801      	ldr	r1, [r0, #0]
 800744c:	6808      	ldr	r0, [r1, #0]
 800744e:	4a99      	ldr	r2, [pc, #612]	; (80076b4 <UART_SetConfig+0x27c>)
 8007450:	4002      	ands	r2, r0
 8007452:	4313      	orrs	r3, r2
 8007454:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	6853      	ldr	r3, [r2, #4]
 800745a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800745e:	68e1      	ldr	r1, [r4, #12]
 8007460:	430b      	orrs	r3, r1
 8007462:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007464:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8007466:	6a23      	ldr	r3, [r4, #32]
 8007468:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800746a:	6821      	ldr	r1, [r4, #0]
 800746c:	688b      	ldr	r3, [r1, #8]
 800746e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007472:	4313      	orrs	r3, r2
 8007474:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	4a8f      	ldr	r2, [pc, #572]	; (80076b8 <UART_SetConfig+0x280>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d018      	beq.n	80074b0 <UART_SetConfig+0x78>
 800747e:	4a8f      	ldr	r2, [pc, #572]	; (80076bc <UART_SetConfig+0x284>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d028      	beq.n	80074d6 <UART_SetConfig+0x9e>
 8007484:	4a8e      	ldr	r2, [pc, #568]	; (80076c0 <UART_SetConfig+0x288>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d03d      	beq.n	8007506 <UART_SetConfig+0xce>
 800748a:	4a8e      	ldr	r2, [pc, #568]	; (80076c4 <UART_SetConfig+0x28c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d050      	beq.n	8007532 <UART_SetConfig+0xfa>
 8007490:	4a8d      	ldr	r2, [pc, #564]	; (80076c8 <UART_SetConfig+0x290>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d062      	beq.n	800755c <UART_SetConfig+0x124>
 8007496:	4a8d      	ldr	r2, [pc, #564]	; (80076cc <UART_SetConfig+0x294>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d077      	beq.n	800758c <UART_SetConfig+0x154>
 800749c:	4a8c      	ldr	r2, [pc, #560]	; (80076d0 <UART_SetConfig+0x298>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	f000 808c 	beq.w	80075bc <UART_SetConfig+0x184>
 80074a4:	4a8b      	ldr	r2, [pc, #556]	; (80076d4 <UART_SetConfig+0x29c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	f000 80a0 	beq.w	80075ec <UART_SetConfig+0x1b4>
 80074ac:	2310      	movs	r3, #16
 80074ae:	e0b6      	b.n	800761e <UART_SetConfig+0x1e6>
 80074b0:	4b89      	ldr	r3, [pc, #548]	; (80076d8 <UART_SetConfig+0x2a0>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d809      	bhi.n	80074d2 <UART_SetConfig+0x9a>
 80074be:	e8df f003 	tbb	[pc, r3]
 80074c2:	0402      	.short	0x0402
 80074c4:	06ad      	.short	0x06ad
 80074c6:	2301      	movs	r3, #1
 80074c8:	e0a9      	b.n	800761e <UART_SetConfig+0x1e6>
 80074ca:	2304      	movs	r3, #4
 80074cc:	e0a7      	b.n	800761e <UART_SetConfig+0x1e6>
 80074ce:	2308      	movs	r3, #8
 80074d0:	e0a5      	b.n	800761e <UART_SetConfig+0x1e6>
 80074d2:	2310      	movs	r3, #16
 80074d4:	e0a3      	b.n	800761e <UART_SetConfig+0x1e6>
 80074d6:	4b80      	ldr	r3, [pc, #512]	; (80076d8 <UART_SetConfig+0x2a0>)
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d80e      	bhi.n	8007502 <UART_SetConfig+0xca>
 80074e4:	e8df f003 	tbb	[pc, r3]
 80074e8:	0d0d0d07 	.word	0x0d0d0d07
 80074ec:	0d0d0d09 	.word	0x0d0d0d09
 80074f0:	0d0d0da9 	.word	0x0d0d0da9
 80074f4:	0b          	.byte	0x0b
 80074f5:	00          	.byte	0x00
 80074f6:	2300      	movs	r3, #0
 80074f8:	e091      	b.n	800761e <UART_SetConfig+0x1e6>
 80074fa:	2304      	movs	r3, #4
 80074fc:	e08f      	b.n	800761e <UART_SetConfig+0x1e6>
 80074fe:	2308      	movs	r3, #8
 8007500:	e08d      	b.n	800761e <UART_SetConfig+0x1e6>
 8007502:	2310      	movs	r3, #16
 8007504:	e08b      	b.n	800761e <UART_SetConfig+0x1e6>
 8007506:	4b74      	ldr	r3, [pc, #464]	; (80076d8 <UART_SetConfig+0x2a0>)
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007510:	2b10      	cmp	r3, #16
 8007512:	d00a      	beq.n	800752a <UART_SetConfig+0xf2>
 8007514:	d906      	bls.n	8007524 <UART_SetConfig+0xec>
 8007516:	2b20      	cmp	r3, #32
 8007518:	f000 8091 	beq.w	800763e <UART_SetConfig+0x206>
 800751c:	2b30      	cmp	r3, #48	; 0x30
 800751e:	d106      	bne.n	800752e <UART_SetConfig+0xf6>
 8007520:	2308      	movs	r3, #8
 8007522:	e07c      	b.n	800761e <UART_SetConfig+0x1e6>
 8007524:	b91b      	cbnz	r3, 800752e <UART_SetConfig+0xf6>
 8007526:	2300      	movs	r3, #0
 8007528:	e079      	b.n	800761e <UART_SetConfig+0x1e6>
 800752a:	2304      	movs	r3, #4
 800752c:	e077      	b.n	800761e <UART_SetConfig+0x1e6>
 800752e:	2310      	movs	r3, #16
 8007530:	e075      	b.n	800761e <UART_SetConfig+0x1e6>
 8007532:	4b69      	ldr	r3, [pc, #420]	; (80076d8 <UART_SetConfig+0x2a0>)
 8007534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007538:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d009      	beq.n	8007554 <UART_SetConfig+0x11c>
 8007540:	d905      	bls.n	800754e <UART_SetConfig+0x116>
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d07d      	beq.n	8007642 <UART_SetConfig+0x20a>
 8007546:	2bc0      	cmp	r3, #192	; 0xc0
 8007548:	d106      	bne.n	8007558 <UART_SetConfig+0x120>
 800754a:	2308      	movs	r3, #8
 800754c:	e067      	b.n	800761e <UART_SetConfig+0x1e6>
 800754e:	b91b      	cbnz	r3, 8007558 <UART_SetConfig+0x120>
 8007550:	2300      	movs	r3, #0
 8007552:	e064      	b.n	800761e <UART_SetConfig+0x1e6>
 8007554:	2304      	movs	r3, #4
 8007556:	e062      	b.n	800761e <UART_SetConfig+0x1e6>
 8007558:	2310      	movs	r3, #16
 800755a:	e060      	b.n	800761e <UART_SetConfig+0x1e6>
 800755c:	4b5e      	ldr	r3, [pc, #376]	; (80076d8 <UART_SetConfig+0x2a0>)
 800755e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756a:	d00b      	beq.n	8007584 <UART_SetConfig+0x14c>
 800756c:	d907      	bls.n	800757e <UART_SetConfig+0x146>
 800756e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007572:	d068      	beq.n	8007646 <UART_SetConfig+0x20e>
 8007574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007578:	d106      	bne.n	8007588 <UART_SetConfig+0x150>
 800757a:	2308      	movs	r3, #8
 800757c:	e04f      	b.n	800761e <UART_SetConfig+0x1e6>
 800757e:	b91b      	cbnz	r3, 8007588 <UART_SetConfig+0x150>
 8007580:	2300      	movs	r3, #0
 8007582:	e04c      	b.n	800761e <UART_SetConfig+0x1e6>
 8007584:	2304      	movs	r3, #4
 8007586:	e04a      	b.n	800761e <UART_SetConfig+0x1e6>
 8007588:	2310      	movs	r3, #16
 800758a:	e048      	b.n	800761e <UART_SetConfig+0x1e6>
 800758c:	4b52      	ldr	r3, [pc, #328]	; (80076d8 <UART_SetConfig+0x2a0>)
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800759a:	d00b      	beq.n	80075b4 <UART_SetConfig+0x17c>
 800759c:	d907      	bls.n	80075ae <UART_SetConfig+0x176>
 800759e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a2:	d052      	beq.n	800764a <UART_SetConfig+0x212>
 80075a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075a8:	d106      	bne.n	80075b8 <UART_SetConfig+0x180>
 80075aa:	2308      	movs	r3, #8
 80075ac:	e037      	b.n	800761e <UART_SetConfig+0x1e6>
 80075ae:	b91b      	cbnz	r3, 80075b8 <UART_SetConfig+0x180>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e034      	b.n	800761e <UART_SetConfig+0x1e6>
 80075b4:	2304      	movs	r3, #4
 80075b6:	e032      	b.n	800761e <UART_SetConfig+0x1e6>
 80075b8:	2310      	movs	r3, #16
 80075ba:	e030      	b.n	800761e <UART_SetConfig+0x1e6>
 80075bc:	4b46      	ldr	r3, [pc, #280]	; (80076d8 <UART_SetConfig+0x2a0>)
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ca:	d00b      	beq.n	80075e4 <UART_SetConfig+0x1ac>
 80075cc:	d907      	bls.n	80075de <UART_SetConfig+0x1a6>
 80075ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d2:	d03c      	beq.n	800764e <UART_SetConfig+0x216>
 80075d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075d8:	d106      	bne.n	80075e8 <UART_SetConfig+0x1b0>
 80075da:	2308      	movs	r3, #8
 80075dc:	e01f      	b.n	800761e <UART_SetConfig+0x1e6>
 80075de:	b91b      	cbnz	r3, 80075e8 <UART_SetConfig+0x1b0>
 80075e0:	2300      	movs	r3, #0
 80075e2:	e01c      	b.n	800761e <UART_SetConfig+0x1e6>
 80075e4:	2304      	movs	r3, #4
 80075e6:	e01a      	b.n	800761e <UART_SetConfig+0x1e6>
 80075e8:	2310      	movs	r3, #16
 80075ea:	e018      	b.n	800761e <UART_SetConfig+0x1e6>
 80075ec:	4b3a      	ldr	r3, [pc, #232]	; (80076d8 <UART_SetConfig+0x2a0>)
 80075ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075fa:	d00b      	beq.n	8007614 <UART_SetConfig+0x1dc>
 80075fc:	d907      	bls.n	800760e <UART_SetConfig+0x1d6>
 80075fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007602:	d026      	beq.n	8007652 <UART_SetConfig+0x21a>
 8007604:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007608:	d106      	bne.n	8007618 <UART_SetConfig+0x1e0>
 800760a:	2308      	movs	r3, #8
 800760c:	e007      	b.n	800761e <UART_SetConfig+0x1e6>
 800760e:	b91b      	cbnz	r3, 8007618 <UART_SetConfig+0x1e0>
 8007610:	2300      	movs	r3, #0
 8007612:	e004      	b.n	800761e <UART_SetConfig+0x1e6>
 8007614:	2304      	movs	r3, #4
 8007616:	e002      	b.n	800761e <UART_SetConfig+0x1e6>
 8007618:	2310      	movs	r3, #16
 800761a:	e000      	b.n	800761e <UART_SetConfig+0x1e6>
 800761c:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800761e:	69e2      	ldr	r2, [r4, #28]
 8007620:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007624:	d017      	beq.n	8007656 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8007626:	2b08      	cmp	r3, #8
 8007628:	f200 80b3 	bhi.w	8007792 <UART_SetConfig+0x35a>
 800762c:	e8df f003 	tbb	[pc, r3]
 8007630:	b1958b76 	.word	0xb1958b76
 8007634:	b1b1b19e 	.word	0xb1b1b19e
 8007638:	a8          	.byte	0xa8
 8007639:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800763a:	2302      	movs	r3, #2
 800763c:	e7ef      	b.n	800761e <UART_SetConfig+0x1e6>
 800763e:	2302      	movs	r3, #2
 8007640:	e7ed      	b.n	800761e <UART_SetConfig+0x1e6>
 8007642:	2302      	movs	r3, #2
 8007644:	e7eb      	b.n	800761e <UART_SetConfig+0x1e6>
 8007646:	2302      	movs	r3, #2
 8007648:	e7e9      	b.n	800761e <UART_SetConfig+0x1e6>
 800764a:	2302      	movs	r3, #2
 800764c:	e7e7      	b.n	800761e <UART_SetConfig+0x1e6>
 800764e:	2302      	movs	r3, #2
 8007650:	e7e5      	b.n	800761e <UART_SetConfig+0x1e6>
 8007652:	2302      	movs	r3, #2
 8007654:	e7e3      	b.n	800761e <UART_SetConfig+0x1e6>
    switch (clocksource)
 8007656:	2b08      	cmp	r3, #8
 8007658:	d85d      	bhi.n	8007716 <UART_SetConfig+0x2de>
 800765a:	e8df f003 	tbb	[pc, r3]
 800765e:	1f05      	.short	0x1f05
 8007660:	5c485c3f 	.word	0x5c485c3f
 8007664:	5c5c      	.short	0x5c5c
 8007666:	53          	.byte	0x53
 8007667:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007668:	f7fd fcf4 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 800766c:	6862      	ldr	r2, [r4, #4]
 800766e:	0853      	lsrs	r3, r2, #1
 8007670:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007674:	fbb3 f3f2 	udiv	r3, r3, r2
 8007678:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800767a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767c:	f1a3 0110 	sub.w	r1, r3, #16
 8007680:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007684:	4291      	cmp	r1, r2
 8007686:	f200 8087 	bhi.w	8007798 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800768a:	b29a      	uxth	r2, r3
 800768c:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007690:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007694:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	60d3      	str	r3, [r2, #12]
 800769a:	e050      	b.n	800773e <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800769c:	f7fd fcea 	bl	8005074 <HAL_RCC_GetPCLK2Freq>
 80076a0:	6862      	ldr	r2, [r4, #4]
 80076a2:	0853      	lsrs	r3, r2, #1
 80076a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80076a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80076ae:	2000      	movs	r0, #0
        break;
 80076b0:	e7e4      	b.n	800767c <UART_SetConfig+0x244>
 80076b2:	bf00      	nop
 80076b4:	efff69f3 	.word	0xefff69f3
 80076b8:	40011000 	.word	0x40011000
 80076bc:	40004400 	.word	0x40004400
 80076c0:	40004800 	.word	0x40004800
 80076c4:	40004c00 	.word	0x40004c00
 80076c8:	40005000 	.word	0x40005000
 80076cc:	40011400 	.word	0x40011400
 80076d0:	40007800 	.word	0x40007800
 80076d4:	40007c00 	.word	0x40007c00
 80076d8:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80076dc:	6862      	ldr	r2, [r4, #4]
 80076de:	4b30      	ldr	r3, [pc, #192]	; (80077a0 <UART_SetConfig+0x368>)
 80076e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80076e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80076ea:	2000      	movs	r0, #0
        break;
 80076ec:	e7c6      	b.n	800767c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80076ee:	f7fd fba5 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 80076f2:	6862      	ldr	r2, [r4, #4]
 80076f4:	0853      	lsrs	r3, r2, #1
 80076f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80076fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007700:	2000      	movs	r0, #0
        break;
 8007702:	e7bb      	b.n	800767c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007704:	6862      	ldr	r2, [r4, #4]
 8007706:	0853      	lsrs	r3, r2, #1
 8007708:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800770c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007710:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007712:	2000      	movs	r0, #0
        break;
 8007714:	e7b2      	b.n	800767c <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8007716:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007718:	2300      	movs	r3, #0
 800771a:	e7af      	b.n	800767c <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800771c:	f7fd fc9a 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007720:	6862      	ldr	r2, [r4, #4]
 8007722:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007726:	fbb3 f3f2 	udiv	r3, r3, r2
 800772a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800772c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800772e:	f1a3 0110 	sub.w	r1, r3, #16
 8007732:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007736:	4291      	cmp	r1, r2
 8007738:	d830      	bhi.n	800779c <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8007742:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8007744:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007746:	f7fd fc95 	bl	8005074 <HAL_RCC_GetPCLK2Freq>
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007750:	fbb3 f3f2 	udiv	r3, r3, r2
 8007754:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007756:	2000      	movs	r0, #0
        break;
 8007758:	e7e9      	b.n	800772e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800775a:	6862      	ldr	r2, [r4, #4]
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <UART_SetConfig+0x36c>)
 800775e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007762:	fbb3 f3f2 	udiv	r3, r3, r2
 8007766:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007768:	2000      	movs	r0, #0
        break;
 800776a:	e7e0      	b.n	800772e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800776c:	f7fd fb66 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8007770:	6862      	ldr	r2, [r4, #4]
 8007772:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007776:	fbb3 f3f2 	udiv	r3, r3, r2
 800777a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800777c:	2000      	movs	r0, #0
        break;
 800777e:	e7d6      	b.n	800772e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007780:	6862      	ldr	r2, [r4, #4]
 8007782:	0853      	lsrs	r3, r2, #1
 8007784:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007788:	fbb3 f3f2 	udiv	r3, r3, r2
 800778c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800778e:	2000      	movs	r0, #0
        break;
 8007790:	e7cd      	b.n	800772e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8007792:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007794:	2300      	movs	r3, #0
 8007796:	e7ca      	b.n	800772e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8007798:	2001      	movs	r0, #1
 800779a:	e7d0      	b.n	800773e <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 800779c:	2001      	movs	r0, #1
 800779e:	e7ce      	b.n	800773e <UART_SetConfig+0x306>
 80077a0:	01e84800 	.word	0x01e84800
 80077a4:	00f42400 	.word	0x00f42400

080077a8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077aa:	f013 0f01 	tst.w	r3, #1
 80077ae:	d006      	beq.n	80077be <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077b0:	6802      	ldr	r2, [r0, #0]
 80077b2:	6853      	ldr	r3, [r2, #4]
 80077b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077b8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077c0:	f013 0f02 	tst.w	r3, #2
 80077c4:	d006      	beq.n	80077d4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	6802      	ldr	r2, [r0, #0]
 80077c8:	6853      	ldr	r3, [r2, #4]
 80077ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80077d0:	430b      	orrs	r3, r1
 80077d2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077d6:	f013 0f04 	tst.w	r3, #4
 80077da:	d006      	beq.n	80077ea <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077dc:	6802      	ldr	r2, [r0, #0]
 80077de:	6853      	ldr	r3, [r2, #4]
 80077e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077e4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80077e6:	430b      	orrs	r3, r1
 80077e8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077ec:	f013 0f08 	tst.w	r3, #8
 80077f0:	d006      	beq.n	8007800 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077f2:	6802      	ldr	r2, [r0, #0]
 80077f4:	6853      	ldr	r3, [r2, #4]
 80077f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80077fc:	430b      	orrs	r3, r1
 80077fe:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007800:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007802:	f013 0f10 	tst.w	r3, #16
 8007806:	d006      	beq.n	8007816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007808:	6802      	ldr	r2, [r0, #0]
 800780a:	6893      	ldr	r3, [r2, #8]
 800780c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007810:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007812:	430b      	orrs	r3, r1
 8007814:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007816:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007818:	f013 0f20 	tst.w	r3, #32
 800781c:	d006      	beq.n	800782c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800781e:	6802      	ldr	r2, [r0, #0]
 8007820:	6893      	ldr	r3, [r2, #8]
 8007822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007826:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007828:	430b      	orrs	r3, r1
 800782a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800782c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800782e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007832:	d00a      	beq.n	800784a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007834:	6802      	ldr	r2, [r0, #0]
 8007836:	6853      	ldr	r3, [r2, #4]
 8007838:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800783c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800783e:	430b      	orrs	r3, r1
 8007840:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007842:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007848:	d00b      	beq.n	8007862 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800784a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800784c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007850:	d006      	beq.n	8007860 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007852:	6802      	ldr	r2, [r0, #0]
 8007854:	6853      	ldr	r3, [r2, #4]
 8007856:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800785a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800785c:	430b      	orrs	r3, r1
 800785e:	6053      	str	r3, [r2, #4]
  }
}
 8007860:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007862:	6802      	ldr	r2, [r0, #0]
 8007864:	6853      	ldr	r3, [r2, #4]
 8007866:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800786a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800786c:	430b      	orrs	r3, r1
 800786e:	6053      	str	r3, [r2, #4]
 8007870:	e7eb      	b.n	800784a <UART_AdvFeatureConfig+0xa2>

08007872 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	4605      	mov	r5, r0
 8007878:	460f      	mov	r7, r1
 800787a:	4616      	mov	r6, r2
 800787c:	4698      	mov	r8, r3
 800787e:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	ea37 0303 	bics.w	r3, r7, r3
 8007888:	bf0c      	ite	eq
 800788a:	2301      	moveq	r3, #1
 800788c:	2300      	movne	r3, #0
 800788e:	42b3      	cmp	r3, r6
 8007890:	d11c      	bne.n	80078cc <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007892:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007896:	d0f3      	beq.n	8007880 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007898:	f7fa fd5a 	bl	8002350 <HAL_GetTick>
 800789c:	eba0 0008 	sub.w	r0, r0, r8
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d801      	bhi.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x36>
 80078a4:	2c00      	cmp	r4, #0
 80078a6:	d1eb      	bne.n	8007880 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078a8:	682a      	ldr	r2, [r5, #0]
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078b0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b2:	682a      	ldr	r2, [r5, #0]
 80078b4:	6893      	ldr	r3, [r2, #8]
 80078b6:	f023 0301 	bic.w	r3, r3, #1
 80078ba:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80078bc:	2320      	movs	r3, #32
 80078be:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80078c0:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078c2:	2300      	movs	r3, #0
 80078c4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 80078c8:	2003      	movs	r0, #3
 80078ca:	e000      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 80078cc:	2000      	movs	r0, #0
}
 80078ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078d2 <UART_CheckIdleState>:
{
 80078d2:	b510      	push	{r4, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d8:	2300      	movs	r3, #0
 80078da:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80078dc:	f7fa fd38 	bl	8002350 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	6812      	ldr	r2, [r2, #0]
 80078e4:	f012 0f08 	tst.w	r2, #8
 80078e8:	d107      	bne.n	80078fa <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80078ea:	2320      	movs	r3, #32
 80078ec:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80078ee:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80078f0:	2000      	movs	r0, #0
 80078f2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80078f6:	b002      	add	sp, #8
 80078f8:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	4603      	mov	r3, r0
 8007902:	2200      	movs	r2, #0
 8007904:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007908:	4620      	mov	r0, r4
 800790a:	f7ff ffb2 	bl	8007872 <UART_WaitOnFlagUntilTimeout>
 800790e:	2800      	cmp	r0, #0
 8007910:	d0eb      	beq.n	80078ea <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8007912:	2003      	movs	r0, #3
 8007914:	e7ef      	b.n	80078f6 <UART_CheckIdleState+0x24>

08007916 <HAL_UART_Init>:
  if (huart == NULL)
 8007916:	b368      	cbz	r0, 8007974 <HAL_UART_Init+0x5e>
{
 8007918:	b510      	push	{r4, lr}
 800791a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800791c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800791e:	b303      	cbz	r3, 8007962 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007920:	2324      	movs	r3, #36	; 0x24
 8007922:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8007924:	6822      	ldr	r2, [r4, #0]
 8007926:	6813      	ldr	r3, [r2, #0]
 8007928:	f023 0301 	bic.w	r3, r3, #1
 800792c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff fd82 	bl	8007438 <UART_SetConfig>
 8007934:	2801      	cmp	r0, #1
 8007936:	d013      	beq.n	8007960 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800793a:	b9bb      	cbnz	r3, 800796c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800793c:	6822      	ldr	r2, [r4, #0]
 800793e:	6853      	ldr	r3, [r2, #4]
 8007940:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007944:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	6893      	ldr	r3, [r2, #8]
 800794a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800794e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007950:	6822      	ldr	r2, [r4, #0]
 8007952:	6813      	ldr	r3, [r2, #0]
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff ffb9 	bl	80078d2 <UART_CheckIdleState>
}
 8007960:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007962:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8007966:	f7fa fb3b 	bl	8001fe0 <HAL_UART_MspInit>
 800796a:	e7d9      	b.n	8007920 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800796c:	4620      	mov	r0, r4
 800796e:	f7ff ff1b 	bl	80077a8 <UART_AdvFeatureConfig>
 8007972:	e7e3      	b.n	800793c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8007974:	2001      	movs	r0, #1
}
 8007976:	4770      	bx	lr

08007978 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007978:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800797a:	680b      	ldr	r3, [r1, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d018      	beq.n	80079b2 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007980:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007982:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <FMC_SDRAM_Init+0x70>)
 8007984:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007986:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8007988:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800798a:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 800798c:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 800798e:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8007990:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8007992:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8007994:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8007996:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8007998:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 800799a:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 800799c:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800799e:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 80079a0:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 80079a2:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 80079a4:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80079a6:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079a8:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80079aa:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80079ac:	2000      	movs	r0, #0
 80079ae:	bc30      	pop	{r4, r5}
 80079b0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80079b2:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80079b4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80079b8:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80079ba:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80079bc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80079be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80079c0:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80079c2:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80079c4:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80079c6:	4c08      	ldr	r4, [pc, #32]	; (80079e8 <FMC_SDRAM_Init+0x70>)
 80079c8:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079ca:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 80079cc:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079ce:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80079d0:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 80079d2:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80079d4:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 80079d6:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 80079d8:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 80079da:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80079dc:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80079de:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079e0:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80079e2:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80079e4:	6043      	str	r3, [r0, #4]
 80079e6:	e7e1      	b.n	80079ac <FMC_SDRAM_Init+0x34>
 80079e8:	ffff8000 	.word	0xffff8000

080079ec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079ec:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80079ee:	2a01      	cmp	r2, #1
 80079f0:	d021      	beq.n	8007a36 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80079f2:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80079f4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80079f8:	680b      	ldr	r3, [r1, #0]
 80079fa:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80079fc:	684c      	ldr	r4, [r1, #4]
 80079fe:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a00:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007a04:	688c      	ldr	r4, [r1, #8]
 8007a06:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007a08:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007a0c:	68cc      	ldr	r4, [r1, #12]
 8007a0e:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007a10:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007a14:	690c      	ldr	r4, [r1, #16]
 8007a16:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007a18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8007a1c:	694c      	ldr	r4, [r1, #20]
 8007a1e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007a20:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8007a24:	6989      	ldr	r1, [r1, #24]
 8007a26:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a28:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007a2c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007a2e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007a30:	2000      	movs	r0, #0
 8007a32:	bc30      	pop	{r4, r5}
 8007a34:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007a36:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007a38:	4c11      	ldr	r4, [pc, #68]	; (8007a80 <FMC_SDRAM_Timing_Init+0x94>)
 8007a3a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007a3c:	68ca      	ldr	r2, [r1, #12]
 8007a3e:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8007a40:	694b      	ldr	r3, [r1, #20]
 8007a42:	1e5a      	subs	r2, r3, #1
 8007a44:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007a46:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8007a4a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007a4c:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007a4e:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a52:	680b      	ldr	r3, [r1, #0]
 8007a54:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007a56:	684d      	ldr	r5, [r1, #4]
 8007a58:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a5a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007a5e:	688d      	ldr	r5, [r1, #8]
 8007a60:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007a62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007a66:	690d      	ldr	r5, [r1, #16]
 8007a68:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007a6a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8007a6e:	6989      	ldr	r1, [r1, #24]
 8007a70:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a72:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007a76:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007a78:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007a7a:	60c3      	str	r3, [r0, #12]
 8007a7c:	e7d8      	b.n	8007a30 <FMC_SDRAM_Timing_Init+0x44>
 8007a7e:	bf00      	nop
 8007a80:	ff0f0fff 	.word	0xff0f0fff

08007a84 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007a84:	b410      	push	{r4}
 8007a86:	b083      	sub	sp, #12
 8007a88:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007a8e:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 8007a90:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007a92:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007a94:	688a      	ldr	r2, [r1, #8]
 8007a96:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8007a98:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8007a9c:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007a9e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8007aa2:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8007aa8:	b003      	add	sp, #12
 8007aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007ab0:	6943      	ldr	r3, [r0, #20]
 8007ab2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007ab6:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8007ab8:	2000      	movs	r0, #0
 8007aba:	4770      	bx	lr

08007abc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007abc:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <SDMMC_GetCmdError+0x34>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0c      	ldr	r2, [pc, #48]	; (8007af4 <SDMMC_GetCmdError+0x38>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	0a5a      	lsrs	r2, r3, #9
 8007ac8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007acc:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 8007ad0:	1e5a      	subs	r2, r3, #1
 8007ad2:	b14b      	cbz	r3, 8007ae8 <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007ad4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 8007ad6:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007ad8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007adc:	d0f8      	beq.n	8007ad0 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007ade:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007ae2:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007ae8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	200001e4 	.word	0x200001e4
 8007af4:	10624dd3 	.word	0x10624dd3

08007af8 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007af8:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <SDMMC_GetCmdResp2+0x54>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a14      	ldr	r2, [pc, #80]	; (8007b50 <SDMMC_GetCmdResp2+0x58>)
 8007afe:	fba2 2303 	umull	r2, r3, r2, r3
 8007b02:	0a5a      	lsrs	r2, r3, #9
 8007b04:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b08:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 8007b0c:	1e5a      	subs	r2, r3, #1
 8007b0e:	b1cb      	cbz	r3, 8007b44 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007b10:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 8007b12:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007b14:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007b18:	d0f8      	beq.n	8007b0c <SDMMC_GetCmdResp2+0x14>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b1c:	f013 0f04 	tst.w	r3, #4
 8007b20:	d108      	bne.n	8007b34 <SDMMC_GetCmdResp2+0x3c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b24:	f013 0f01 	tst.w	r3, #1
 8007b28:	d108      	bne.n	8007b3c <SDMMC_GetCmdResp2+0x44>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007b2a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007b2e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007b30:	2000      	movs	r0, #0
 8007b32:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b34:	2304      	movs	r3, #4
 8007b36:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b38:	4618      	mov	r0, r3
 8007b3a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b40:	4618      	mov	r0, r3
 8007b42:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007b44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	200001e4 	.word	0x200001e4
 8007b50:	10624dd3 	.word	0x10624dd3

08007b54 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007b54:	4b10      	ldr	r3, [pc, #64]	; (8007b98 <SDMMC_GetCmdResp3+0x44>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a10      	ldr	r2, [pc, #64]	; (8007b9c <SDMMC_GetCmdResp3+0x48>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	0a5a      	lsrs	r2, r3, #9
 8007b60:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b64:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	b18b      	cbz	r3, 8007b90 <SDMMC_GetCmdResp3+0x3c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007b6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 8007b6e:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007b70:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007b74:	d0f8      	beq.n	8007b68 <SDMMC_GetCmdResp3+0x14>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b78:	f013 0f04 	tst.w	r3, #4
 8007b7c:	d104      	bne.n	8007b88 <SDMMC_GetCmdResp3+0x34>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007b7e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007b82:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b84:	2000      	movs	r0, #0
 8007b86:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b88:	2304      	movs	r3, #4
 8007b8a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007b90:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	200001e4 	.word	0x200001e4
 8007b9c:	10624dd3 	.word	0x10624dd3

08007ba0 <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007ba0:	4b12      	ldr	r3, [pc, #72]	; (8007bec <SDMMC_GetCmdResp7+0x4c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a12      	ldr	r2, [pc, #72]	; (8007bf0 <SDMMC_GetCmdResp7+0x50>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	0a5a      	lsrs	r2, r3, #9
 8007bac:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bb0:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 8007bb4:	1e5a      	subs	r2, r3, #1
 8007bb6:	b1a3      	cbz	r3, 8007be2 <SDMMC_GetCmdResp7+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007bb8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 8007bba:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007bbc:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007bc0:	d0f8      	beq.n	8007bb4 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007bc4:	f013 0f04 	tst.w	r3, #4
 8007bc8:	d107      	bne.n	8007bda <SDMMC_GetCmdResp7+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007bca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007bcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007bd0:	d00a      	beq.n	8007be8 <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007bd2:	2340      	movs	r3, #64	; 0x40
 8007bd4:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007bda:	2340      	movs	r3, #64	; 0x40
 8007bdc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bde:	2004      	movs	r0, #4
 8007be0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007be2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007be6:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8007be8:	2000      	movs	r0, #0
  
}
 8007bea:	4770      	bx	lr
 8007bec:	200001e4 	.word	0x200001e4
 8007bf0:	10624dd3 	.word	0x10624dd3

08007bf4 <SDMMC_Init>:
{
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	b410      	push	{r4}
 8007bf8:	ac02      	add	r4, sp, #8
 8007bfa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8007bfe:	460b      	mov	r3, r1
 8007c00:	9a03      	ldr	r2, [sp, #12]
 8007c02:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8007c04:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 8007c06:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8007c08:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8007c0a:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8007c0c:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8007c0e:	4313      	orrs	r3, r2
             Init.ClockDiv
 8007c10:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8007c12:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007c14:	6841      	ldr	r1, [r0, #4]
 8007c16:	4a04      	ldr	r2, [pc, #16]	; (8007c28 <SDMMC_Init+0x34>)
 8007c18:	400a      	ands	r2, r1
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	6043      	str	r3, [r0, #4]
}
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c24:	b004      	add	sp, #16
 8007c26:	4770      	bx	lr
 8007c28:	ffff8100 	.word	0xffff8100

08007c2c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8007c2c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007c30:	4770      	bx	lr

08007c32 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007c32:	2303      	movs	r3, #3
 8007c34:	6003      	str	r3, [r0, #0]
}
 8007c36:	2000      	movs	r0, #0
 8007c38:	4770      	bx	lr

08007c3a <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007c3a:	6800      	ldr	r0, [r0, #0]
}
 8007c3c:	f000 0003 	and.w	r0, r0, #3
 8007c40:	4770      	bx	lr
	...

08007c44 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c48:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8007c4a:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c4c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8007c4e:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8007c50:	4313      	orrs	r3, r2
                       Command->CPSM);
 8007c52:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8007c54:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007c56:	68c1      	ldr	r1, [r0, #12]
 8007c58:	4a02      	ldr	r2, [pc, #8]	; (8007c64 <SDMMC_SendCommand+0x20>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60c3      	str	r3, [r0, #12]
}
 8007c60:	2000      	movs	r0, #0
 8007c62:	4770      	bx	lr
 8007c64:	fffff000 	.word	0xfffff000

08007c68 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8007c68:	6900      	ldr	r0, [r0, #16]
}
 8007c6a:	b2c0      	uxtb	r0, r0
 8007c6c:	4770      	bx	lr

08007c6e <SDMMC_GetResponse>:
{
 8007c6e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007c74:	3014      	adds	r0, #20
 8007c76:	4401      	add	r1, r0
 8007c78:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8007c7a:	9b01      	ldr	r3, [sp, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
}  
 8007c7e:	b002      	add	sp, #8
 8007c80:	4770      	bx	lr
	...

08007c84 <SDMMC_GetCmdResp1>:
{
 8007c84:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007c86:	4b51      	ldr	r3, [pc, #324]	; (8007dcc <SDMMC_GetCmdResp1+0x148>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4c51      	ldr	r4, [pc, #324]	; (8007dd0 <SDMMC_GetCmdResp1+0x14c>)
 8007c8c:	fba4 4303 	umull	r4, r3, r4, r3
 8007c90:	0a5b      	lsrs	r3, r3, #9
 8007c92:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0)
 8007c96:	1e53      	subs	r3, r2, #1
 8007c98:	2a00      	cmp	r2, #0
 8007c9a:	d05e      	beq.n	8007d5a <SDMMC_GetCmdResp1+0xd6>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007c9c:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0)
 8007c9e:	461a      	mov	r2, r3
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007ca0:	f014 0f45 	tst.w	r4, #69	; 0x45
 8007ca4:	d0f7      	beq.n	8007c96 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ca6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ca8:	f013 0f04 	tst.w	r3, #4
 8007cac:	d107      	bne.n	8007cbe <SDMMC_GetCmdResp1+0x3a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007cae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007cb0:	f013 0f01 	tst.w	r3, #1
 8007cb4:	d007      	beq.n	8007cc6 <SDMMC_GetCmdResp1+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cba:	4618      	mov	r0, r3
 8007cbc:	e04f      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	e04b      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007cca:	f7ff ffcd 	bl	8007c68 <SDMMC_GetCommandResponse>
 8007cce:	42a8      	cmp	r0, r5
 8007cd0:	d001      	beq.n	8007cd6 <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	e043      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007cd6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007cda:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ffc5 	bl	8007c6e <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007ce4:	4b3b      	ldr	r3, [pc, #236]	; (8007dd4 <SDMMC_GetCmdResp1+0x150>)
 8007ce6:	4003      	ands	r3, r0
 8007ce8:	b3d3      	cbz	r3, 8007d60 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007cea:	2800      	cmp	r0, #0
 8007cec:	db3a      	blt.n	8007d64 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007cee:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cf2:	d13a      	bne.n	8007d6a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007cf4:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8007cf8:	d139      	bne.n	8007d6e <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007cfa:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007cfe:	d138      	bne.n	8007d72 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d00:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8007d04:	d138      	bne.n	8007d78 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d06:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007d0a:	d138      	bne.n	8007d7e <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d0c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8007d10:	d138      	bne.n	8007d84 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007d12:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007d16:	d138      	bne.n	8007d8a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007d18:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8007d1c:	d138      	bne.n	8007d90 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007d1e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007d22:	d138      	bne.n	8007d96 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007d24:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8007d28:	d138      	bne.n	8007d9c <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007d2a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007d2e:	d138      	bne.n	8007da2 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d30:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8007d34:	d138      	bne.n	8007da8 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d36:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8007d3a:	d138      	bne.n	8007dae <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d3c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007d40:	d138      	bne.n	8007db4 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d42:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007d46:	d138      	bne.n	8007dba <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d48:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007d4c:	d138      	bne.n	8007dc0 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d4e:	f010 0f08 	tst.w	r0, #8
 8007d52:	d038      	beq.n	8007dc6 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007d58:	e001      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
      return SDMMC_ERROR_TIMEOUT;
 8007d5a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8007d60:	2000      	movs	r0, #0
 8007d62:	e7fc      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d64:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007d68:	e7f9      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d6a:	2040      	movs	r0, #64	; 0x40
 8007d6c:	e7f7      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d6e:	2080      	movs	r0, #128	; 0x80
 8007d70:	e7f5      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007d76:	e7f2      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007d7c:	e7ef      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007d82:	e7ec      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007d84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007d88:	e7e9      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007d8e:	e7e6      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007d94:	e7e3      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007d96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d9a:	e7e0      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CC_ERR;
 8007d9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007da0:	e7dd      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007da2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007da6:	e7da      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007da8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007dac:	e7d7      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007dae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007db2:	e7d4      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007db4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007db8:	e7d1      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007dba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007dbe:	e7ce      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 8007dc0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007dc4:	e7cb      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007dc6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007dca:	e7c8      	b.n	8007d5e <SDMMC_GetCmdResp1+0xda>
 8007dcc:	200001e4 	.word	0x200001e4
 8007dd0:	10624dd3 	.word	0x10624dd3
 8007dd4:	fdffe008 	.word	0xfdffe008

08007dd8 <SDMMC_GetCmdResp6>:
{
 8007dd8:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007dda:	4b25      	ldr	r3, [pc, #148]	; (8007e70 <SDMMC_GetCmdResp6+0x98>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4c25      	ldr	r4, [pc, #148]	; (8007e74 <SDMMC_GetCmdResp6+0x9c>)
 8007de0:	fba4 4303 	umull	r4, r3, r4, r3
 8007de4:	0a5c      	lsrs	r4, r3, #9
 8007de6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dea:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0)
 8007dee:	1e5c      	subs	r4, r3, #1
 8007df0:	b3a3      	cbz	r3, 8007e5c <SDMMC_GetCmdResp6+0x84>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007df2:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0)
 8007df4:	4623      	mov	r3, r4
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007df6:	f015 0f45 	tst.w	r5, #69	; 0x45
 8007dfa:	d0f8      	beq.n	8007dee <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007dfe:	f013 0f04 	tst.w	r3, #4
 8007e02:	d107      	bne.n	8007e14 <SDMMC_GetCmdResp6+0x3c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e06:	f013 0f01 	tst.w	r3, #1
 8007e0a:	d007      	beq.n	8007e1c <SDMMC_GetCmdResp6+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e10:	4618      	mov	r0, r3
 8007e12:	e025      	b.n	8007e60 <SDMMC_GetCmdResp6+0x88>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e14:	2304      	movs	r3, #4
 8007e16:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e18:	4618      	mov	r0, r3
 8007e1a:	e021      	b.n	8007e60 <SDMMC_GetCmdResp6+0x88>
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	460d      	mov	r5, r1
 8007e20:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007e22:	f7ff ff21 	bl	8007c68 <SDMMC_GetCommandResponse>
 8007e26:	42a8      	cmp	r0, r5
 8007e28:	d001      	beq.n	8007e2e <SDMMC_GetCmdResp6+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e2a:	2001      	movs	r0, #1
 8007e2c:	e018      	b.n	8007e60 <SDMMC_GetCmdResp6+0x88>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007e2e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007e32:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007e34:	2100      	movs	r1, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	f7ff ff19 	bl	8007c6e <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e3c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007e40:	d008      	beq.n	8007e54 <SDMMC_GetCmdResp6+0x7c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007e42:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007e46:	d10c      	bne.n	8007e62 <SDMMC_GetCmdResp6+0x8a>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007e48:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007e4c:	d00c      	beq.n	8007e68 <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e52:	e005      	b.n	8007e60 <SDMMC_GetCmdResp6+0x88>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e54:	0c00      	lsrs	r0, r0, #16
 8007e56:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e001      	b.n	8007e60 <SDMMC_GetCmdResp6+0x88>
      return SDMMC_ERROR_TIMEOUT;
 8007e5c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007e60:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e66:	e7fb      	b.n	8007e60 <SDMMC_GetCmdResp6+0x88>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007e6c:	e7f8      	b.n	8007e60 <SDMMC_GetCmdResp6+0x88>
 8007e6e:	bf00      	nop
 8007e70:	200001e4 	.word	0x200001e4
 8007e74:	10624dd3 	.word	0x10624dd3

08007e78 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007e78:	680b      	ldr	r3, [r1, #0]
 8007e7a:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007e7c:	684b      	ldr	r3, [r1, #4]
 8007e7e:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e80:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8007e82:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e84:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8007e86:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8007e88:	4313      	orrs	r3, r2
                       Data->DPSM);
 8007e8a:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8007e8c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e8e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007e90:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8007e94:	4313      	orrs	r3, r2
 8007e96:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007e98:	2000      	movs	r0, #0
 8007e9a:	4770      	bx	lr

08007e9c <SDMMC_CmdBlockLength>:
{
 8007e9c:	b530      	push	{r4, r5, lr}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ea2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007ea4:	2410      	movs	r4, #16
 8007ea6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007eac:	2300      	movs	r3, #0
 8007eae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eb6:	a901      	add	r1, sp, #4
 8007eb8:	f7ff fec4 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f7ff fede 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8007ec8:	b007      	add	sp, #28
 8007eca:	bd30      	pop	{r4, r5, pc}

08007ecc <SDMMC_CmdReadSingleBlock>:
{
 8007ecc:	b530      	push	{r4, r5, lr}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007ed2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007ed4:	2411      	movs	r4, #17
 8007ed6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ed8:	2340      	movs	r3, #64	; 0x40
 8007eda:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007edc:	2300      	movs	r3, #0
 8007ede:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ee6:	a901      	add	r1, sp, #4
 8007ee8:	f7ff feac 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f7ff fec6 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8007ef8:	b007      	add	sp, #28
 8007efa:	bd30      	pop	{r4, r5, pc}

08007efc <SDMMC_CmdReadMultiBlock>:
{
 8007efc:	b530      	push	{r4, r5, lr}
 8007efe:	b087      	sub	sp, #28
 8007f00:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f02:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f04:	2412      	movs	r4, #18
 8007f06:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f14:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f16:	a901      	add	r1, sp, #4
 8007f18:	f7ff fe94 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f20:	4621      	mov	r1, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f7ff feae 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8007f28:	b007      	add	sp, #28
 8007f2a:	bd30      	pop	{r4, r5, pc}

08007f2c <SDMMC_CmdWriteSingleBlock>:
{
 8007f2c:	b530      	push	{r4, r5, lr}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f32:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f34:	2418      	movs	r4, #24
 8007f36:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f44:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f46:	a901      	add	r1, sp, #4
 8007f48:	f7ff fe7c 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f50:	4621      	mov	r1, r4
 8007f52:	4628      	mov	r0, r5
 8007f54:	f7ff fe96 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8007f58:	b007      	add	sp, #28
 8007f5a:	bd30      	pop	{r4, r5, pc}

08007f5c <SDMMC_CmdWriteMultiBlock>:
{
 8007f5c:	b530      	push	{r4, r5, lr}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f62:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007f64:	2419      	movs	r4, #25
 8007f66:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f74:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f76:	a901      	add	r1, sp, #4
 8007f78:	f7ff fe64 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f7ff fe7e 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8007f88:	b007      	add	sp, #28
 8007f8a:	bd30      	pop	{r4, r5, pc}

08007f8c <SDMMC_CmdStopTransfer>:
{
 8007f8c:	b530      	push	{r4, r5, lr}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007f96:	240c      	movs	r4, #12
 8007f98:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f9a:	2240      	movs	r2, #64	; 0x40
 8007f9c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f9e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fa6:	a901      	add	r1, sp, #4
 8007fa8:	f7ff fe4c 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8007fac:	4a03      	ldr	r2, [pc, #12]	; (8007fbc <SDMMC_CmdStopTransfer+0x30>)
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7ff fe67 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8007fb6:	b007      	add	sp, #28
 8007fb8:	bd30      	pop	{r4, r5, pc}
 8007fba:	bf00      	nop
 8007fbc:	05f5e100 	.word	0x05f5e100

08007fc0 <SDMMC_CmdSelDesel>:
{
 8007fc0:	b530      	push	{r4, r5, lr}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007fc6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007fc8:	2407      	movs	r4, #7
 8007fca:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fcc:	2340      	movs	r3, #64	; 0x40
 8007fce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fda:	a901      	add	r1, sp, #4
 8007fdc:	f7ff fe32 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7ff fe4c 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8007fec:	b007      	add	sp, #28
 8007fee:	bd30      	pop	{r4, r5, pc}

08007ff0 <SDMMC_CmdGoIdleState>:
{
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007ffa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007ffc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ffe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008004:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008006:	a901      	add	r1, sp, #4
 8008008:	f7ff fe1c 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff fd55 	bl	8007abc <SDMMC_GetCmdError>
}
 8008012:	b006      	add	sp, #24
 8008014:	bd10      	pop	{r4, pc}

08008016 <SDMMC_CmdOperCond>:
{
 8008016:	b510      	push	{r4, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800801c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008020:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008022:	2308      	movs	r3, #8
 8008024:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008026:	2340      	movs	r3, #64	; 0x40
 8008028:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800802a:	2300      	movs	r3, #0
 800802c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800802e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008032:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008034:	a901      	add	r1, sp, #4
 8008036:	f7ff fe05 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800803a:	4620      	mov	r0, r4
 800803c:	f7ff fdb0 	bl	8007ba0 <SDMMC_GetCmdResp7>
}
 8008040:	b006      	add	sp, #24
 8008042:	bd10      	pop	{r4, pc}

08008044 <SDMMC_CmdAppCommand>:
{
 8008044:	b530      	push	{r4, r5, lr}
 8008046:	b087      	sub	sp, #28
 8008048:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800804a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800804c:	2437      	movs	r4, #55	; 0x37
 800804e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008054:	2300      	movs	r3, #0
 8008056:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800805e:	a901      	add	r1, sp, #4
 8008060:	f7ff fdf0 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008064:	f241 3288 	movw	r2, #5000	; 0x1388
 8008068:	4621      	mov	r1, r4
 800806a:	4628      	mov	r0, r5
 800806c:	f7ff fe0a 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8008070:	b007      	add	sp, #28
 8008072:	bd30      	pop	{r4, r5, pc}

08008074 <SDMMC_CmdAppOperCommand>:
{
 8008074:	b510      	push	{r4, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800807a:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <SDMMC_CmdAppOperCommand+0x30>)
 800807c:	430b      	orrs	r3, r1
 800807e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008080:	2329      	movs	r3, #41	; 0x29
 8008082:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008084:	2340      	movs	r3, #64	; 0x40
 8008086:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008088:	2300      	movs	r3, #0
 800808a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800808c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008090:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008092:	a901      	add	r1, sp, #4
 8008094:	f7ff fdd6 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008098:	4620      	mov	r0, r4
 800809a:	f7ff fd5b 	bl	8007b54 <SDMMC_GetCmdResp3>
}
 800809e:	b006      	add	sp, #24
 80080a0:	bd10      	pop	{r4, pc}
 80080a2:	bf00      	nop
 80080a4:	80100000 	.word	0x80100000

080080a8 <SDMMC_CmdBusWidth>:
{
 80080a8:	b530      	push	{r4, r5, lr}
 80080aa:	b087      	sub	sp, #28
 80080ac:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80080ae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80080b0:	2406      	movs	r4, #6
 80080b2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080b8:	2300      	movs	r3, #0
 80080ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080c2:	a901      	add	r1, sp, #4
 80080c4:	f7ff fdbe 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80080c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080cc:	4621      	mov	r1, r4
 80080ce:	4628      	mov	r0, r5
 80080d0:	f7ff fdd8 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 80080d4:	b007      	add	sp, #28
 80080d6:	bd30      	pop	{r4, r5, pc}

080080d8 <SDMMC_CmdSendSCR>:
{
 80080d8:	b530      	push	{r4, r5, lr}
 80080da:	b087      	sub	sp, #28
 80080dc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80080e2:	2433      	movs	r4, #51	; 0x33
 80080e4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080e6:	2240      	movs	r2, #64	; 0x40
 80080e8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080f2:	a901      	add	r1, sp, #4
 80080f4:	f7ff fda6 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80080f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080fc:	4621      	mov	r1, r4
 80080fe:	4628      	mov	r0, r5
 8008100:	f7ff fdc0 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 8008104:	b007      	add	sp, #28
 8008106:	bd30      	pop	{r4, r5, pc}

08008108 <SDMMC_CmdSendCID>:
{
 8008108:	b510      	push	{r4, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008112:	2202      	movs	r2, #2
 8008114:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008116:	22c0      	movs	r2, #192	; 0xc0
 8008118:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800811a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800811c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008120:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008122:	a901      	add	r1, sp, #4
 8008124:	f7ff fd8e 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff fce5 	bl	8007af8 <SDMMC_GetCmdResp2>
}
 800812e:	b006      	add	sp, #24
 8008130:	bd10      	pop	{r4, pc}

08008132 <SDMMC_CmdSendCSD>:
{
 8008132:	b510      	push	{r4, lr}
 8008134:	b086      	sub	sp, #24
 8008136:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008138:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800813a:	2309      	movs	r3, #9
 800813c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800813e:	23c0      	movs	r3, #192	; 0xc0
 8008140:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008142:	2300      	movs	r3, #0
 8008144:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800814a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800814c:	a901      	add	r1, sp, #4
 800814e:	f7ff fd79 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008152:	4620      	mov	r0, r4
 8008154:	f7ff fcd0 	bl	8007af8 <SDMMC_GetCmdResp2>
}
 8008158:	b006      	add	sp, #24
 800815a:	bd10      	pop	{r4, pc}

0800815c <SDMMC_CmdSetRelAdd>:
{
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	4605      	mov	r5, r0
 8008162:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008168:	2403      	movs	r4, #3
 800816a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800816c:	2240      	movs	r2, #64	; 0x40
 800816e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008170:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008176:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008178:	a901      	add	r1, sp, #4
 800817a:	f7ff fd63 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800817e:	4632      	mov	r2, r6
 8008180:	4621      	mov	r1, r4
 8008182:	4628      	mov	r0, r5
 8008184:	f7ff fe28 	bl	8007dd8 <SDMMC_GetCmdResp6>
}
 8008188:	b006      	add	sp, #24
 800818a:	bd70      	pop	{r4, r5, r6, pc}

0800818c <SDMMC_CmdSendStatus>:
{
 800818c:	b530      	push	{r4, r5, lr}
 800818e:	b087      	sub	sp, #28
 8008190:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008192:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008194:	240d      	movs	r4, #13
 8008196:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008198:	2340      	movs	r3, #64	; 0x40
 800819a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800819c:	2300      	movs	r3, #0
 800819e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081a6:	a901      	add	r1, sp, #4
 80081a8:	f7ff fd4c 	bl	8007c44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80081ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b0:	4621      	mov	r1, r4
 80081b2:	4628      	mov	r0, r5
 80081b4:	f7ff fd66 	bl	8007c84 <SDMMC_GetCmdResp1>
}
 80081b8:	b007      	add	sp, #28
 80081ba:	bd30      	pop	{r4, r5, pc}

080081bc <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80081bc:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081be:	3301      	adds	r3, #1
 80081c0:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <USB_CoreReset+0x38>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d811      	bhi.n	80081ea <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081c6:	6902      	ldr	r2, [r0, #16]
 80081c8:	2a00      	cmp	r2, #0
 80081ca:	daf8      	bge.n	80081be <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081cc:	6903      	ldr	r3, [r0, #16]
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	6103      	str	r3, [r0, #16]
  count = 0U;
 80081d4:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80081d6:	3301      	adds	r3, #1
 80081d8:	4a06      	ldr	r2, [pc, #24]	; (80081f4 <USB_CoreReset+0x38>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d807      	bhi.n	80081ee <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081de:	6902      	ldr	r2, [r0, #16]
 80081e0:	f012 0f01 	tst.w	r2, #1
 80081e4:	d1f7      	bne.n	80081d6 <USB_CoreReset+0x1a>

  return HAL_OK;
 80081e6:	2000      	movs	r0, #0
 80081e8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80081ea:	2003      	movs	r0, #3
 80081ec:	4770      	bx	lr
      return HAL_TIMEOUT;
 80081ee:	2003      	movs	r0, #3
}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	00030d40 	.word	0x00030d40

080081f8 <USB_CoreInit>:
{
 80081f8:	b084      	sub	sp, #16
 80081fa:	b510      	push	{r4, lr}
 80081fc:	4604      	mov	r4, r0
 80081fe:	a803      	add	r0, sp, #12
 8008200:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d11d      	bne.n	8008246 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800820a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800820c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008210:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008212:	68e2      	ldr	r2, [r4, #12]
 8008214:	4b16      	ldr	r3, [pc, #88]	; (8008270 <USB_CoreInit+0x78>)
 8008216:	4013      	ands	r3, r2
 8008218:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800821a:	68e3      	ldr	r3, [r4, #12]
 800821c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008220:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8008222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008224:	2b01      	cmp	r3, #1
 8008226:	d009      	beq.n	800823c <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8008228:	4620      	mov	r0, r4
 800822a:	f7ff ffc7 	bl	80081bc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800822e:	9b06      	ldr	r3, [sp, #24]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d014      	beq.n	800825e <USB_CoreInit+0x66>
}
 8008234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008238:	b004      	add	sp, #16
 800823a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800823c:	68e3      	ldr	r3, [r4, #12]
 800823e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008242:	60e3      	str	r3, [r4, #12]
 8008244:	e7f0      	b.n	8008228 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff ffb4 	bl	80081bc <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800825a:	63a3      	str	r3, [r4, #56]	; 0x38
 800825c:	e7e7      	b.n	800822e <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	f043 0306 	orr.w	r3, r3, #6
 8008264:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	f043 0320 	orr.w	r3, r3, #32
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	e7e1      	b.n	8008234 <USB_CoreInit+0x3c>
 8008270:	ffbdffbf 	.word	0xffbdffbf

08008274 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008274:	6883      	ldr	r3, [r0, #8]
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	6083      	str	r3, [r0, #8]
}
 800827c:	2000      	movs	r0, #0
 800827e:	4770      	bx	lr

08008280 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008280:	6883      	ldr	r3, [r0, #8]
 8008282:	f023 0301 	bic.w	r3, r3, #1
 8008286:	6083      	str	r3, [r0, #8]
}
 8008288:	2000      	movs	r0, #0
 800828a:	4770      	bx	lr

0800828c <USB_SetCurrentMode>:
{
 800828c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800828e:	68c3      	ldr	r3, [r0, #12]
 8008290:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008294:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008296:	2901      	cmp	r1, #1
 8008298:	d009      	beq.n	80082ae <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800829a:	b969      	cbnz	r1, 80082b8 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800829c:	68c3      	ldr	r3, [r0, #12]
 800829e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082a2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80082a4:	2032      	movs	r0, #50	; 0x32
 80082a6:	f7fa f859 	bl	800235c <HAL_Delay>
  return HAL_OK;
 80082aa:	2000      	movs	r0, #0
}
 80082ac:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082ae:	68c3      	ldr	r3, [r0, #12]
 80082b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082b4:	60c3      	str	r3, [r0, #12]
 80082b6:	e7f5      	b.n	80082a4 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80082b8:	2001      	movs	r0, #1
 80082ba:	e7f7      	b.n	80082ac <USB_SetCurrentMode+0x20>

080082bc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082bc:	0189      	lsls	r1, r1, #6
 80082be:	f041 0120 	orr.w	r1, r1, #32
 80082c2:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80082c4:	2300      	movs	r3, #0
    if (++count > 200000U)
 80082c6:	3301      	adds	r3, #1
 80082c8:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <USB_FlushTxFifo+0x24>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d805      	bhi.n	80082da <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082ce:	6902      	ldr	r2, [r0, #16]
 80082d0:	f012 0f20 	tst.w	r2, #32
 80082d4:	d1f7      	bne.n	80082c6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80082d6:	2000      	movs	r0, #0
 80082d8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80082da:	2003      	movs	r0, #3
}
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	00030d40 	.word	0x00030d40

080082e4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082e4:	2310      	movs	r3, #16
 80082e6:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 80082e8:	2300      	movs	r3, #0
    if (++count > 200000U)
 80082ea:	3301      	adds	r3, #1
 80082ec:	4a05      	ldr	r2, [pc, #20]	; (8008304 <USB_FlushRxFifo+0x20>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d805      	bhi.n	80082fe <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082f2:	6902      	ldr	r2, [r0, #16]
 80082f4:	f012 0f10 	tst.w	r2, #16
 80082f8:	d1f7      	bne.n	80082ea <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80082fa:	2000      	movs	r0, #0
 80082fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80082fe:	2003      	movs	r0, #3
}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	00030d40 	.word	0x00030d40

08008308 <USB_WritePacket>:
{
 8008308:	b470      	push	{r4, r5, r6}
 800830a:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 800830e:	b964      	cbnz	r4, 800832a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008310:	3303      	adds	r3, #3
 8008312:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8008314:	e007      	b.n	8008326 <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8008316:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800831a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008322:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8008324:	3401      	adds	r4, #1
 8008326:	42ac      	cmp	r4, r5
 8008328:	d3f5      	bcc.n	8008316 <USB_WritePacket+0xe>
}
 800832a:	2000      	movs	r0, #0
 800832c:	bc70      	pop	{r4, r5, r6}
 800832e:	4770      	bx	lr

08008330 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008330:	3203      	adds	r2, #3
 8008332:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 8008334:	2300      	movs	r3, #0
 8008336:	4293      	cmp	r3, r2
 8008338:	d20c      	bcs.n	8008354 <USB_ReadPacket+0x24>
{
 800833a:	b410      	push	{r4}
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800833c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8008340:	6824      	ldr	r4, [r4, #0]
 8008342:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8008346:	3301      	adds	r3, #1
 8008348:	4293      	cmp	r3, r2
 800834a:	d3f7      	bcc.n	800833c <USB_ReadPacket+0xc>
}
 800834c:	4608      	mov	r0, r1
 800834e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	4608      	mov	r0, r1
 8008356:	4770      	bx	lr

08008358 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008358:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800835a:	6980      	ldr	r0, [r0, #24]
}
 800835c:	4010      	ands	r0, r2
 800835e:	4770      	bx	lr

08008360 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008360:	6940      	ldr	r0, [r0, #20]
}
 8008362:	f000 0001 	and.w	r0, r0, #1
 8008366:	4770      	bx	lr

08008368 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008368:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800836a:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800836e:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800837a:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800837e:	f001 0203 	and.w	r2, r1, #3
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8008388:	2901      	cmp	r1, #1
 800838a:	d005      	beq.n	8008398 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800838c:	2902      	cmp	r1, #2
 800838e:	d007      	beq.n	80083a0 <USB_InitFSLSPClkSel+0x38>
  {
    /* ... */
  }

  return HAL_OK;
}
 8008390:	2000      	movs	r0, #0
 8008392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008396:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8008398:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800839c:	6063      	str	r3, [r4, #4]
 800839e:	e7f7      	b.n	8008390 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 80083a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80083a4:	6063      	str	r3, [r4, #4]
 80083a6:	e7f3      	b.n	8008390 <USB_InitFSLSPClkSel+0x28>

080083a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80083a8:	b530      	push	{r4, r5, lr}
 80083aa:	b083      	sub	sp, #12
 80083ac:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80083ae:	2500      	movs	r5, #0
 80083b0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80083b2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80083b6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083be:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083c0:	9b01      	ldr	r3, [sp, #4]
 80083c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c6:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80083ca:	2064      	movs	r0, #100	; 0x64
 80083cc:	f7f9 ffc6 	bl	800235c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083d0:	9b01      	ldr	r3, [sp, #4]
 80083d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083d6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80083da:	200a      	movs	r0, #10
 80083dc:	f7f9 ffbe 	bl	800235c <HAL_Delay>

  return HAL_OK;
}
 80083e0:	4628      	mov	r0, r5
 80083e2:	b003      	add	sp, #12
 80083e4:	bd30      	pop	{r4, r5, pc}

080083e6 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083e6:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80083ec:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80083f0:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083f2:	9b01      	ldr	r3, [sp, #4]
 80083f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083f8:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80083fa:	9b01      	ldr	r3, [sp, #4]
 80083fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008400:	d101      	bne.n	8008406 <USB_DriveVbus+0x20>
 8008402:	2901      	cmp	r1, #1
 8008404:	d00c      	beq.n	8008420 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008406:	9b01      	ldr	r3, [sp, #4]
 8008408:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800840c:	d005      	beq.n	800841a <USB_DriveVbus+0x34>
 800840e:	b921      	cbnz	r1, 800841a <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008410:	9b01      	ldr	r3, [sp, #4]
 8008412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008416:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800841a:	2000      	movs	r0, #0
 800841c:	b002      	add	sp, #8
 800841e:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008426:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 800842a:	e7ec      	b.n	8008406 <USB_DriveVbus+0x20>

0800842c <USB_HostInit>:
{
 800842c:	b084      	sub	sp, #16
 800842e:	b538      	push	{r3, r4, r5, lr}
 8008430:	4604      	mov	r4, r0
 8008432:	a805      	add	r0, sp, #20
 8008434:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008438:	4625      	mov	r5, r4
  USBx_PCGCCTL = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008440:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008446:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800844a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800844e:	d010      	beq.n	8008472 <USB_HostInit+0x46>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8008450:	9b07      	ldr	r3, [sp, #28]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d006      	beq.n	8008464 <USB_HostInit+0x38>
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008456:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800845a:	f023 0304 	bic.w	r3, r3, #4
 800845e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008462:	e00c      	b.n	800847e <USB_HostInit+0x52>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008464:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008468:	f043 0304 	orr.w	r3, r3, #4
 800846c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008470:	e005      	b.n	800847e <USB_HostInit+0x52>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008472:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008476:	f023 0304 	bic.w	r3, r3, #4
 800847a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800847e:	2110      	movs	r1, #16
 8008480:	4620      	mov	r0, r4
 8008482:	f7ff ff1b 	bl	80082bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008486:	4620      	mov	r0, r4
 8008488:	f7ff ff2c 	bl	80082e4 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 800848c:	2200      	movs	r2, #0
 800848e:	e009      	b.n	80084a4 <USB_HostInit+0x78>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008490:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 8008494:	f04f 31ff 	mov.w	r1, #4294967295
 8008498:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 800849c:	2100      	movs	r1, #0
 800849e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 80084a2:	3201      	adds	r2, #1
 80084a4:	9b06      	ldr	r3, [sp, #24]
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d8f2      	bhi.n	8008490 <USB_HostInit+0x64>
  (void)USB_DriveVbus(USBx, 1U);
 80084aa:	2101      	movs	r1, #1
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff ff9a 	bl	80083e6 <USB_DriveVbus>
  HAL_Delay(200U);
 80084b2:	20c8      	movs	r0, #200	; 0xc8
 80084b4:	f7f9 ff52 	bl	800235c <HAL_Delay>
  USBx->GINTMSK = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80084bc:	f04f 33ff 	mov.w	r3, #4294967295
 80084c0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80084c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80084c8:	d017      	beq.n	80084fa <USB_HostInit+0xce>
    USBx->GRXFSIZ  = 0x200U;
 80084ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ce:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80084d0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80084d4:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80084d6:	4b0d      	ldr	r3, [pc, #52]	; (800850c <USB_HostInit+0xe0>)
 80084d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	b91b      	cbnz	r3, 80084e8 <USB_HostInit+0xbc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084e0:	69a3      	ldr	r3, [r4, #24]
 80084e2:	f043 0310 	orr.w	r3, r3, #16
 80084e6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80084e8:	69a2      	ldr	r2, [r4, #24]
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <USB_HostInit+0xe4>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	61a3      	str	r3, [r4, #24]
}
 80084f0:	2000      	movs	r0, #0
 80084f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f6:	b004      	add	sp, #16
 80084f8:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 80084fa:	2380      	movs	r3, #128	; 0x80
 80084fc:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80084fe:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8008502:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008504:	4b03      	ldr	r3, [pc, #12]	; (8008514 <USB_HostInit+0xe8>)
 8008506:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800850a:	e7e7      	b.n	80084dc <USB_HostInit+0xb0>
 800850c:	00e00300 	.word	0x00e00300
 8008510:	a3200008 	.word	0xa3200008
 8008514:	004000e0 	.word	0x004000e0

08008518 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008518:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800851e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008522:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008524:	9801      	ldr	r0, [sp, #4]
}
 8008526:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800852a:	b002      	add	sp, #8
 800852c:	4770      	bx	lr

0800852e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800852e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008532:	6880      	ldr	r0, [r0, #8]
}
 8008534:	b280      	uxth	r0, r0
 8008536:	4770      	bx	lr

08008538 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853a:	4606      	mov	r6, r0
 800853c:	f89d 4018 	ldrb.w	r4, [sp, #24]
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008540:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8008544:	f505 60a0 	add.w	r0, r5, #1280	; 0x500
 8008548:	f04f 37ff 	mov.w	r7, #4294967295
 800854c:	6087      	str	r7, [r0, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800854e:	2c03      	cmp	r4, #3
 8008550:	d865      	bhi.n	800861e <USB_HC_Init+0xe6>
 8008552:	e8df f004 	tbb	[pc, r4]
 8008556:	5602      	.short	0x5602
 8008558:	1802      	.short	0x1802
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800855a:	f240 479d 	movw	r7, #1181	; 0x49d
 800855e:	60c7      	str	r7, [r0, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008560:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008564:	d109      	bne.n	800857a <USB_HC_Init+0x42>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008566:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
 8008568:	f417 7f80 	tst.w	r7, #256	; 0x100
 800856c:	d059      	beq.n	8008622 <USB_HC_Init+0xea>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800856e:	68c7      	ldr	r7, [r0, #12]
 8008570:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 8008574:	60c7      	str	r7, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008576:	2000      	movs	r0, #0
 8008578:	e00c      	b.n	8008594 <USB_HC_Init+0x5c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800857a:	68c7      	ldr	r7, [r0, #12]
 800857c:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8008580:	60c7      	str	r7, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008582:	2000      	movs	r0, #0
 8008584:	e006      	b.n	8008594 <USB_HC_Init+0x5c>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008586:	f240 679d 	movw	r7, #1693	; 0x69d
 800858a:	60c7      	str	r7, [r0, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800858c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008590:	d131      	bne.n	80085f6 <USB_HC_Init+0xbe>
  HAL_StatusTypeDef ret = HAL_OK;
 8008592:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008594:	f506 6e80 	add.w	lr, r6, #1024	; 0x400
 8008598:	f8d6 7418 	ldr.w	r7, [r6, #1048]	; 0x418
 800859c:	f001 010f 	and.w	r1, r1, #15
 80085a0:	f04f 0c01 	mov.w	ip, #1
 80085a4:	fa0c f101 	lsl.w	r1, ip, r1
 80085a8:	4339      	orrs	r1, r7
 80085aa:	f8c6 1418 	str.w	r1, [r6, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80085ae:	69b1      	ldr	r1, [r6, #24]
 80085b0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80085b4:	61b1      	str	r1, [r6, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80085b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80085ba:	d134      	bne.n	8008626 <USB_HC_Init+0xee>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80085bc:	2600      	movs	r6, #0
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80085be:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80085c2:	2902      	cmp	r1, #2
 80085c4:	d032      	beq.n	800862c <USB_HC_Init+0xf4>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 80085c6:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085c8:	059b      	lsls	r3, r3, #22
 80085ca:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085ce:	02d2      	lsls	r2, r2, #11
 80085d0:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085d4:	4313      	orrs	r3, r2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085d6:	04a2      	lsls	r2, r4, #18
 80085d8:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085dc:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80085e2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085e6:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085e8:	4333      	orrs	r3, r6
 80085ea:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085ec:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 80085f0:	2c03      	cmp	r4, #3
 80085f2:	d01e      	beq.n	8008632 <USB_HC_Init+0xfa>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 80085f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085f6:	68c7      	ldr	r7, [r0, #12]
 80085f8:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 80085fc:	60c7      	str	r7, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80085fe:	2000      	movs	r0, #0
 8008600:	e7c8      	b.n	8008594 <USB_HC_Init+0x5c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008602:	f240 2725 	movw	r7, #549	; 0x225
 8008606:	60c7      	str	r7, [r0, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008608:	f012 0f80 	tst.w	r2, #128	; 0x80
 800860c:	d101      	bne.n	8008612 <USB_HC_Init+0xda>
  HAL_StatusTypeDef ret = HAL_OK;
 800860e:	2000      	movs	r0, #0
 8008610:	e7c0      	b.n	8008594 <USB_HC_Init+0x5c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008612:	68c7      	ldr	r7, [r0, #12]
 8008614:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 8008618:	60c7      	str	r7, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800861a:	2000      	movs	r0, #0
 800861c:	e7ba      	b.n	8008594 <USB_HC_Init+0x5c>
      ret = HAL_ERROR;
 800861e:	2001      	movs	r0, #1
 8008620:	e7b8      	b.n	8008594 <USB_HC_Init+0x5c>
  HAL_StatusTypeDef ret = HAL_OK;
 8008622:	2000      	movs	r0, #0
 8008624:	e7b6      	b.n	8008594 <USB_HC_Init+0x5c>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008626:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800862a:	e7c8      	b.n	80085be <USB_HC_Init+0x86>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800862c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008630:	e7ca      	b.n	80085c8 <USB_HC_Init+0x90>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008632:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 8008636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800863a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
 800863e:	e7d9      	b.n	80085f4 <USB_HC_Init+0xbc>

08008640 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008640:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008644:	6940      	ldr	r0, [r0, #20]
}
 8008646:	b280      	uxth	r0, r0
 8008648:	4770      	bx	lr

0800864a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800864a:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800864c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008650:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8008654:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008658:	f3c3 4381 	ubfx	r3, r3, #18, #2

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800865c:	2b02      	cmp	r3, #2
 800865e:	bf14      	ite	ne
 8008660:	2400      	movne	r4, #0
 8008662:	2401      	moveq	r4, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	bf14      	ite	ne
 8008668:	4623      	movne	r3, r4
 800866a:	2301      	moveq	r3, #1
 800866c:	b35b      	cbz	r3, 80086c6 <USB_HC_Halt+0x7c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800866e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008676:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800867a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800867c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8008680:	d11a      	bne.n	80086b8 <USB_HC_Halt+0x6e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008682:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800868a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800868e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008696:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800869a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800869e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086a2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  uint32_t count = 0U;
 80086a6:	2300      	movs	r3, #0
      do
      {
        if (++count > 1000U)
 80086a8:	3301      	adds	r3, #1
 80086aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086ae:	d836      	bhi.n	800871e <USB_HC_Halt+0xd4>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086b0:	6811      	ldr	r1, [r2, #0]
 80086b2:	2900      	cmp	r1, #0
 80086b4:	dbf8      	blt.n	80086a8 <USB_HC_Halt+0x5e>
 80086b6:	e032      	b.n	800871e <USB_HC_Halt+0xd4>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80086bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086c0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80086c4:	e02b      	b.n	800871e <USB_HC_Halt+0xd4>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086c6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80086ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086ce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80086d2:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80086d6:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80086da:	d11a      	bne.n	8008712 <USB_HC_Halt+0xc8>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086dc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80086e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086e4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086e8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80086ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086f0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80086f4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80086f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086fc:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  uint32_t count = 0U;
 8008700:	2300      	movs	r3, #0
      do
      {
        if (++count > 1000U)
 8008702:	3301      	adds	r3, #1
 8008704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008708:	d809      	bhi.n	800871e <USB_HC_Halt+0xd4>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800870a:	6811      	ldr	r1, [r2, #0]
 800870c:	2900      	cmp	r1, #0
 800870e:	dbf8      	blt.n	8008702 <USB_HC_Halt+0xb8>
 8008710:	e005      	b.n	800871e <USB_HC_Halt+0xd4>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008712:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800871a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    }
  }

  return HAL_OK;
}
 800871e:	2000      	movs	r0, #0
 8008720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008724:	4770      	bx	lr
	...

08008728 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008728:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800872c:	4a06      	ldr	r2, [pc, #24]	; (8008748 <USB_DoPing+0x20>)
 800872e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008732:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800873a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800873e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8008742:	2000      	movs	r0, #0
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	80080000 	.word	0x80080000

0800874c <USB_HC_StartXfer>:
{
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	b082      	sub	sp, #8
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008750:	784c      	ldrb	r4, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8008752:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008754:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008758:	d007      	beq.n	800876a <USB_HC_StartXfer+0x1e>
 800875a:	790b      	ldrb	r3, [r1, #4]
 800875c:	b92b      	cbnz	r3, 800876a <USB_HC_StartXfer+0x1e>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800875e:	b912      	cbnz	r2, 8008766 <USB_HC_StartXfer+0x1a>
 8008760:	794b      	ldrb	r3, [r1, #5]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d011      	beq.n	800878a <USB_HC_StartXfer+0x3e>
    else if (dma == 1U)
 8008766:	2a01      	cmp	r2, #1
 8008768:	d013      	beq.n	8008792 <USB_HC_StartXfer+0x46>
  if (hc->xfer_len > 0U)
 800876a:	690b      	ldr	r3, [r1, #16]
 800876c:	b1e3      	cbz	r3, 80087a8 <USB_HC_StartXfer+0x5c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800876e:	890d      	ldrh	r5, [r1, #8]
 8008770:	442b      	add	r3, r5
 8008772:	3b01      	subs	r3, #1
 8008774:	fbb3 f3f5 	udiv	r3, r3, r5
 8008778:	b29b      	uxth	r3, r3
    if (num_packets > max_hc_pkt_count)
 800877a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877e:	d914      	bls.n	80087aa <USB_HC_StartXfer+0x5e>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008780:	022d      	lsls	r5, r5, #8
 8008782:	610d      	str	r5, [r1, #16]
      num_packets = max_hc_pkt_count;
 8008784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008788:	e00f      	b.n	80087aa <USB_HC_StartXfer+0x5e>
      (void)USB_DoPing(USBx, hc->ch_num);
 800878a:	4621      	mov	r1, r4
 800878c:	f7ff ffcc 	bl	8008728 <USB_DoPing>
      return HAL_OK;
 8008790:	e075      	b.n	800887e <USB_HC_StartXfer+0x132>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008792:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008796:	f8d3 550c 	ldr.w	r5, [r3, #1292]	; 0x50c
 800879a:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 800879e:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	714b      	strb	r3, [r1, #5]
 80087a6:	e7e0      	b.n	800876a <USB_HC_StartXfer+0x1e>
    num_packets = 1U;
 80087a8:	2301      	movs	r3, #1
  if (hc->ep_is_in != 0U)
 80087aa:	78cd      	ldrb	r5, [r1, #3]
 80087ac:	b11d      	cbz	r5, 80087b6 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80087ae:	890d      	ldrh	r5, [r1, #8]
 80087b0:	fb05 f503 	mul.w	r5, r5, r3
 80087b4:	610d      	str	r5, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80087b6:	690d      	ldr	r5, [r1, #16]
 80087b8:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087bc:	4e37      	ldr	r6, [pc, #220]	; (800889c <USB_HC_StartXfer+0x150>)
 80087be:	ea06 43c3 	and.w	r3, r6, r3, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80087c2:	432b      	orrs	r3, r5
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087c4:	7a8d      	ldrb	r5, [r1, #10]
 80087c6:	076d      	lsls	r5, r5, #29
 80087c8:	f005 45c0 	and.w	r5, r5, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80087cc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087d0:	432b      	orrs	r3, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80087d2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
  if (dma != 0U)
 80087d6:	b112      	cbz	r2, 80087de <USB_HC_StartXfer+0x92>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087d8:	68cb      	ldr	r3, [r1, #12]
 80087da:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80087de:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 80087e2:	68b3      	ldr	r3, [r6, #8]
 80087e4:	f013 0f01 	tst.w	r3, #1
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087e8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 80087ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087f0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087f4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 80087f8:	bf0c      	ite	eq
 80087fa:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 80087fe:	2500      	movne	r5, #0
 8008800:	432b      	orrs	r3, r5
 8008802:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008806:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
 800880a:	4b25      	ldr	r3, [pc, #148]	; (80088a0 <USB_HC_StartXfer+0x154>)
 800880c:	601d      	str	r5, [r3, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800880e:	681d      	ldr	r5, [r3, #0]
 8008810:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 8008814:	601d      	str	r5, [r3, #0]
  if (hc->ep_is_in != 0U)
 8008816:	78cb      	ldrb	r3, [r1, #3]
 8008818:	b1c3      	cbz	r3, 800884c <USB_HC_StartXfer+0x100>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800881a:	4d21      	ldr	r5, [pc, #132]	; (80088a0 <USB_HC_StartXfer+0x154>)
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008822:	602b      	str	r3, [r5, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008824:	4b1e      	ldr	r3, [pc, #120]	; (80088a0 <USB_HC_StartXfer+0x154>)
 8008826:	681d      	ldr	r5, [r3, #0]
 8008828:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800882c:	601d      	str	r5, [r3, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8008834:	bb1a      	cbnz	r2, 800887e <USB_HC_StartXfer+0x132>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008836:	78cb      	ldrb	r3, [r1, #3]
 8008838:	bb0b      	cbnz	r3, 800887e <USB_HC_StartXfer+0x132>
 800883a:	690b      	ldr	r3, [r1, #16]
 800883c:	b1fb      	cbz	r3, 800887e <USB_HC_StartXfer+0x132>
      switch (hc->ep_type)
 800883e:	79ca      	ldrb	r2, [r1, #7]
 8008840:	2a03      	cmp	r2, #3
 8008842:	d814      	bhi.n	800886e <USB_HC_StartXfer+0x122>
 8008844:	e8df f002 	tbb	[pc, r2]
 8008848:	1e081e08 	.word	0x1e081e08
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800884c:	4d14      	ldr	r5, [pc, #80]	; (80088a0 <USB_HC_StartXfer+0x154>)
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	e7e5      	b.n	8008824 <USB_HC_StartXfer+0xd8>
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008858:	3303      	adds	r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800885a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800885c:	b292      	uxth	r2, r2
 800885e:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008862:	429a      	cmp	r2, r3
 8008864:	d203      	bcs.n	800886e <USB_HC_StartXfer+0x122>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008866:	6983      	ldr	r3, [r0, #24]
 8008868:	f043 0320 	orr.w	r3, r3, #32
 800886c:	6183      	str	r3, [r0, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800886e:	68cc      	ldr	r4, [r1, #12]
 8008870:	784a      	ldrb	r2, [r1, #1]
 8008872:	8a0b      	ldrh	r3, [r1, #16]
 8008874:	2100      	movs	r1, #0
 8008876:	9100      	str	r1, [sp, #0]
 8008878:	4621      	mov	r1, r4
 800887a:	f7ff fd45 	bl	8008308 <USB_WritePacket>
}
 800887e:	2000      	movs	r0, #0
 8008880:	b002      	add	sp, #8
 8008882:	bd70      	pop	{r4, r5, r6, pc}
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008884:	3303      	adds	r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008886:	6932      	ldr	r2, [r6, #16]
 8008888:	b292      	uxth	r2, r2
 800888a:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800888e:	429a      	cmp	r2, r3
 8008890:	d2ed      	bcs.n	800886e <USB_HC_StartXfer+0x122>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008892:	6983      	ldr	r3, [r0, #24]
 8008894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008898:	6183      	str	r3, [r0, #24]
 800889a:	e7e8      	b.n	800886e <USB_HC_StartXfer+0x122>
 800889c:	1ff80000 	.word	0x1ff80000
 80088a0:	20001ad0 	.word	0x20001ad0

080088a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a8:	4604      	mov	r4, r0
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80088aa:	f7ff fce9 	bl	8008280 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80088ae:	2110      	movs	r1, #16
 80088b0:	4628      	mov	r0, r5
 80088b2:	f7ff fd03 	bl	80082bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80088b6:	4628      	mov	r0, r5
 80088b8:	f7ff fd14 	bl	80082e4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80088bc:	2200      	movs	r2, #0
 80088be:	e00a      	b.n	80088d6 <USB_StopHost+0x32>
  {
    value = USBx_HC(i)->HCCHAR;
 80088c0:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 80088c4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80088c8:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80088d0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 80088d4:	3201      	adds	r2, #1
 80088d6:	2a0f      	cmp	r2, #15
 80088d8:	d9f2      	bls.n	80088c0 <USB_StopHost+0x1c>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80088da:	2000      	movs	r0, #0
  uint32_t count = 0U;
 80088dc:	4603      	mov	r3, r0
 80088de:	e000      	b.n	80088e2 <USB_StopHost+0x3e>
  for (i = 0U; i <= 15U; i++)
 80088e0:	3001      	adds	r0, #1
 80088e2:	280f      	cmp	r0, #15
 80088e4:	d813      	bhi.n	800890e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80088e6:	eb04 1640 	add.w	r6, r4, r0, lsl #5
 80088ea:	f506 61a0 	add.w	r1, r6, #1280	; 0x500
 80088ee:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
 80088f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088f6:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80088fa:	f8c6 2500 	str.w	r2, [r6, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 80088fe:	3301      	adds	r3, #1
 8008900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008904:	d8ec      	bhi.n	80088e0 <USB_StopHost+0x3c>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008906:	680a      	ldr	r2, [r1, #0]
 8008908:	2a00      	cmp	r2, #0
 800890a:	dbf8      	blt.n	80088fe <USB_StopHost+0x5a>
 800890c:	e7e8      	b.n	80088e0 <USB_StopHost+0x3c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800890e:	f04f 33ff 	mov.w	r3, #4294967295
 8008912:	f8c5 3414 	str.w	r3, [r5, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008916:	616b      	str	r3, [r5, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008918:	4628      	mov	r0, r5
 800891a:	f7ff fcab 	bl	8008274 <USB_EnableGlobalInt>

  return HAL_OK;
}
 800891e:	2000      	movs	r0, #0
 8008920:	bd70      	pop	{r4, r5, r6, pc}
	...

08008924 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008924:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008926:	4903      	ldr	r1, [pc, #12]	; (8008934 <MX_FATFS_Init+0x10>)
 8008928:	4803      	ldr	r0, [pc, #12]	; (8008938 <MX_FATFS_Init+0x14>)
 800892a:	f001 fb33 	bl	8009f94 <FATFS_LinkDriver>
 800892e:	4b03      	ldr	r3, [pc, #12]	; (800893c <MX_FATFS_Init+0x18>)
 8008930:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008932:	bd08      	pop	{r3, pc}
 8008934:	200218dc 	.word	0x200218dc
 8008938:	0801e9e4 	.word	0x0801e9e4
 800893c:	200218d8 	.word	0x200218d8

08008940 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008940:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008942:	4613      	mov	r3, r2
 8008944:	460a      	mov	r2, r1
 8008946:	4601      	mov	r1, r0
 8008948:	4802      	ldr	r0, [pc, #8]	; (8008954 <BSP_SD_ReadBlocks_DMA+0x14>)
 800894a:	f7fd fc57 	bl	80061fc <HAL_SD_ReadBlocks_DMA>
 800894e:	b100      	cbz	r0, 8008952 <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8008950:	2001      	movs	r0, #1
  }
  
  return sd_state; 
}
 8008952:	bd08      	pop	{r3, pc}
 8008954:	200214c8 	.word	0x200214c8

08008958 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008958:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800895a:	4613      	mov	r3, r2
 800895c:	460a      	mov	r2, r1
 800895e:	4601      	mov	r1, r0
 8008960:	4802      	ldr	r0, [pc, #8]	; (800896c <BSP_SD_WriteBlocks_DMA+0x14>)
 8008962:	f7fd fcd3 	bl	800630c <HAL_SD_WriteBlocks_DMA>
 8008966:	b100      	cbz	r0, 800896a <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8008968:	2001      	movs	r0, #1
  }
  
  return sd_state; 
}
 800896a:	bd08      	pop	{r3, pc}
 800896c:	200214c8 	.word	0x200214c8

08008970 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8008970:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008972:	4803      	ldr	r0, [pc, #12]	; (8008980 <BSP_SD_GetCardState+0x10>)
 8008974:	f7fd ff9c 	bl	80068b0 <HAL_SD_GetCardState>
}
 8008978:	3804      	subs	r0, #4
 800897a:	bf18      	it	ne
 800897c:	2001      	movne	r0, #1
 800897e:	bd08      	pop	{r3, pc}
 8008980:	200214c8 	.word	0x200214c8

08008984 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008984:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008986:	4601      	mov	r1, r0
 8008988:	4801      	ldr	r0, [pc, #4]	; (8008990 <BSP_SD_GetCardInfo+0xc>)
 800898a:	f7fd ff2f 	bl	80067ec <HAL_SD_GetCardInfo>
}
 800898e:	bd08      	pop	{r3, pc}
 8008990:	200214c8 	.word	0x200214c8

08008994 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008994:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8008996:	f000 f99f 	bl	8008cd8 <BSP_SD_ReadCpltCallback>
}
 800899a:	bd08      	pop	{r3, pc}

0800899c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800899c:	b500      	push	{lr}
 800899e:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80089a0:	2301      	movs	r3, #1
 80089a2:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80089a6:	f000 f823 	bl	80089f0 <BSP_PlatformIsDetected>
 80089aa:	b910      	cbnz	r0, 80089b2 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80089b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80089b6:	b003      	add	sp, #12
 80089b8:	f85d fb04 	ldr.w	pc, [sp], #4

080089bc <BSP_SD_Init>:
{
 80089bc:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80089be:	f7ff ffed 	bl	800899c <BSP_SD_IsDetected>
 80089c2:	2801      	cmp	r0, #1
 80089c4:	d002      	beq.n	80089cc <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 80089c6:	2402      	movs	r4, #2
}
 80089c8:	4620      	mov	r0, r4
 80089ca:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 80089cc:	4807      	ldr	r0, [pc, #28]	; (80089ec <BSP_SD_Init+0x30>)
 80089ce:	f7fd fef4 	bl	80067ba <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80089d2:	4604      	mov	r4, r0
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d1f7      	bne.n	80089c8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80089d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80089dc:	4803      	ldr	r0, [pc, #12]	; (80089ec <BSP_SD_Init+0x30>)
 80089de:	f7fd ff17 	bl	8006810 <HAL_SD_ConfigWideBusOperation>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d0f0      	beq.n	80089c8 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 80089e6:	2401      	movs	r4, #1
 80089e8:	e7ee      	b.n	80089c8 <BSP_SD_Init+0xc>
 80089ea:	bf00      	nop
 80089ec:	200214c8 	.word	0x200214c8

080089f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80089f0:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80089f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089f6:	4804      	ldr	r0, [pc, #16]	; (8008a08 <BSP_PlatformIsDetected+0x18>)
 80089f8:	f7fa fa96 	bl	8002f28 <HAL_GPIO_ReadPin>
 80089fc:	b108      	cbz	r0, 8008a02 <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 80089fe:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8008a00:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 8008a02:	2001      	movs	r0, #1
 8008a04:	e7fc      	b.n	8008a00 <BSP_PlatformIsDetected+0x10>
 8008a06:	bf00      	nop
 8008a08:	40020800 	.word	0x40020800

08008a0c <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008a0c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8008a0e:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <SD_CheckStatus+0x20>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008a14:	f7ff ffac 	bl	8008970 <BSP_SD_GetCardState>
 8008a18:	b920      	cbnz	r0, 8008a24 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008a1a:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <SD_CheckStatus+0x20>)
 8008a1c:	7813      	ldrb	r3, [r2, #0]
 8008a1e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008a22:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8008a24:	4b01      	ldr	r3, [pc, #4]	; (8008a2c <SD_CheckStatus+0x20>)
 8008a26:	7818      	ldrb	r0, [r3, #0]
}
 8008a28:	bd08      	pop	{r3, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200001e9 	.word	0x200001e9

08008a30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008a30:	b510      	push	{r4, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	4604      	mov	r4, r0
Stat = STA_NOINIT; 
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <SD_initialize+0x58>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8008a3c:	f001 fac0 	bl	8009fc0 <osKernelRunning>
 8008a40:	b918      	cbnz	r0, 8008a4a <SD_initialize+0x1a>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
    }
  }
  return Stat;
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <SD_initialize+0x58>)
 8008a44:	7818      	ldrb	r0, [r3, #0]
}
 8008a46:	b004      	add	sp, #16
 8008a48:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 8008a4a:	f7ff ffb7 	bl	80089bc <BSP_SD_Init>
 8008a4e:	b1a0      	cbz	r0, 8008a7a <SD_initialize+0x4a>
    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <SD_initialize+0x58>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d0f3      	beq.n	8008a42 <SD_initialize+0x12>
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <SD_initialize+0x5c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ef      	bne.n	8008a42 <SD_initialize+0x12>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <SD_initialize+0x60>)
 8008a64:	466c      	mov	r4, sp
 8008a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f001 fb93 	bl	800a19a <osMessageCreate>
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <SD_initialize+0x5c>)
 8008a76:	6018      	str	r0, [r3, #0]
 8008a78:	e7e3      	b.n	8008a42 <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f7ff ffc6 	bl	8008a0c <SD_CheckStatus>
 8008a80:	4b01      	ldr	r3, [pc, #4]	; (8008a88 <SD_initialize+0x58>)
 8008a82:	7018      	strb	r0, [r3, #0]
 8008a84:	e7e4      	b.n	8008a50 <SD_initialize+0x20>
 8008a86:	bf00      	nop
 8008a88:	200001e9 	.word	0x200001e9
 8008a8c:	20001ad4 	.word	0x20001ad4
 8008a90:	0801ba50 	.word	0x0801ba50

08008a94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008a94:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8008a96:	f7ff ffb9 	bl	8008a0c <SD_CheckStatus>
}
 8008a9a:	bd08      	pop	{r3, pc}

08008a9c <SD_CheckStatusWithTimeout>:
{
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4605      	mov	r5, r0
  uint32_t timer = osKernelSysTick();
 8008aa0:	f001 fa97 	bl	8009fd2 <osKernelSysTick>
 8008aa4:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 8008aa6:	f001 fa94 	bl	8009fd2 <osKernelSysTick>
 8008aaa:	1b00      	subs	r0, r0, r4
 8008aac:	42a8      	cmp	r0, r5
 8008aae:	d205      	bcs.n	8008abc <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ab0:	f7ff ff5e 	bl	8008970 <BSP_SD_GetCardState>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d1f6      	bne.n	8008aa6 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e001      	b.n	8008ac0 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

08008ac4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	b088      	sub	sp, #32
 8008aca:	4689      	mov	r9, r1
 8008acc:	4614      	mov	r4, r2
 8008ace:	461f      	mov	r7, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008ad0:	f247 5030 	movw	r0, #30000	; 0x7530
 8008ad4:	f7ff ffe2 	bl	8008a9c <SD_CheckStatusWithTimeout>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	db4f      	blt.n	8008b7c <SD_read+0xb8>
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8008adc:	f019 0f03 	tst.w	r9, #3
 8008ae0:	d001      	beq.n	8008ae6 <SD_read+0x22>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	e01a      	b.n	8008b1c <SD_read+0x58>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008ae6:	463a      	mov	r2, r7
 8008ae8:	4621      	mov	r1, r4
 8008aea:	4648      	mov	r0, r9
 8008aec:	f7ff ff28 	bl	8008940 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8008af0:	b108      	cbz	r0, 8008af6 <SD_read+0x32>
  DRESULT res = RES_ERROR;
 8008af2:	2001      	movs	r0, #1
 8008af4:	e043      	b.n	8008b7e <SD_read+0xba>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008af6:	f247 5230 	movw	r2, #30000	; 0x7530
 8008afa:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <SD_read+0xc4>)
 8008afc:	6819      	ldr	r1, [r3, #0]
 8008afe:	a805      	add	r0, sp, #20
 8008b00:	f001 fb94 	bl	800a22c <osMessageGet>
      if (event.status == osEventMessage) {
 8008b04:	9b05      	ldr	r3, [sp, #20]
 8008b06:	2b10      	cmp	r3, #16
 8008b08:	d001      	beq.n	8008b0e <SD_read+0x4a>
  DRESULT res = RES_ERROR;
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	e037      	b.n	8008b7e <SD_read+0xba>
        if (event.value.v == READ_CPLT_MSG) {
 8008b0e:	9b06      	ldr	r3, [sp, #24]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d037      	beq.n	8008b84 <SD_read+0xc0>
  DRESULT res = RES_ERROR;
 8008b14:	2001      	movs	r0, #1
 8008b16:	e032      	b.n	8008b7e <SD_read+0xba>
    for (i = 0; i < count; i++) {
 8008b18:	3501      	adds	r5, #1
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008b1a:	4634      	mov	r4, r6
    for (i = 0; i < count; i++) {
 8008b1c:	46aa      	mov	sl, r5
 8008b1e:	42bd      	cmp	r5, r7
 8008b20:	d223      	bcs.n	8008b6a <SD_read+0xa6>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008b22:	1c66      	adds	r6, r4, #1
 8008b24:	2201      	movs	r2, #1
 8008b26:	4621      	mov	r1, r4
 8008b28:	4818      	ldr	r0, [pc, #96]	; (8008b8c <SD_read+0xc8>)
 8008b2a:	f7ff ff09 	bl	8008940 <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 8008b2e:	4680      	mov	r8, r0
 8008b30:	b9d8      	cbnz	r0, 8008b6a <SD_read+0xa6>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008b32:	466c      	mov	r4, sp
 8008b34:	f247 5230 	movw	r2, #30000	; 0x7530
 8008b38:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <SD_read+0xc4>)
 8008b3a:	6819      	ldr	r1, [r3, #0]
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f001 fb75 	bl	800a22c <osMessageGet>
 8008b42:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008b46:	ab08      	add	r3, sp, #32
 8008b48:	e903 0007 	stmdb	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8008b4c:	9b05      	ldr	r3, [sp, #20]
 8008b4e:	2b10      	cmp	r3, #16
 8008b50:	d1e2      	bne.n	8008b18 <SD_read+0x54>
          if (event.value.v == READ_CPLT_MSG) {
 8008b52:	9b06      	ldr	r3, [sp, #24]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d1df      	bne.n	8008b18 <SD_read+0x54>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8008b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b5c:	490b      	ldr	r1, [pc, #44]	; (8008b8c <SD_read+0xc8>)
 8008b5e:	4648      	mov	r0, r9
 8008b60:	f012 fe75 	bl	801b84e <memcpy>
            buff += BLOCKSIZE;
 8008b64:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8008b68:	e7d6      	b.n	8008b18 <SD_read+0x54>
      {
        break;
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8008b6a:	45ba      	cmp	sl, r7
 8008b6c:	bf08      	it	eq
 8008b6e:	f1b8 0f00 	cmpeq.w	r8, #0
 8008b72:	d101      	bne.n	8008b78 <SD_read+0xb4>
      res = RES_OK;
 8008b74:	2000      	movs	r0, #0
 8008b76:	e002      	b.n	8008b7e <SD_read+0xba>
  DRESULT res = RES_ERROR;
 8008b78:	2001      	movs	r0, #1
 8008b7a:	e000      	b.n	8008b7e <SD_read+0xba>
    return res;
 8008b7c:	2001      	movs	r0, #1
  }

#endif

  return res;
} 
 8008b7e:	b008      	add	sp, #32
 8008b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          res = RES_OK;
 8008b84:	2000      	movs	r0, #0
 8008b86:	e7fa      	b.n	8008b7e <SD_read+0xba>
 8008b88:	20001ad4 	.word	0x20001ad4
 8008b8c:	20001ad8 	.word	0x20001ad8

08008b90 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	b088      	sub	sp, #32
 8008b96:	4689      	mov	r9, r1
 8008b98:	4614      	mov	r4, r2
 8008b9a:	461f      	mov	r7, r3

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008b9c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008ba0:	f7ff ff7c 	bl	8008a9c <SD_CheckStatusWithTimeout>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	db60      	blt.n	8008c6a <SD_write+0xda>
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8008ba8:	f019 0f03 	tst.w	r9, #3
 8008bac:	d001      	beq.n	8008bb2 <SD_write+0x22>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8008bae:	2500      	movs	r5, #0
 8008bb0:	e02b      	b.n	8008c0a <SD_write+0x7a>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008bb2:	463a      	mov	r2, r7
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4648      	mov	r0, r9
 8008bb8:	f7ff fece 	bl	8008958 <BSP_SD_WriteBlocks_DMA>
 8008bbc:	b108      	cbz	r0, 8008bc2 <SD_write+0x32>
  DRESULT res = RES_ERROR;
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e054      	b.n	8008c6c <SD_write+0xdc>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008bc2:	f247 5230 	movw	r2, #30000	; 0x7530
 8008bc6:	4b2b      	ldr	r3, [pc, #172]	; (8008c74 <SD_write+0xe4>)
 8008bc8:	6819      	ldr	r1, [r3, #0]
 8008bca:	a805      	add	r0, sp, #20
 8008bcc:	f001 fb2e 	bl	800a22c <osMessageGet>
      if (event.status == osEventMessage)
 8008bd0:	9b05      	ldr	r3, [sp, #20]
 8008bd2:	2b10      	cmp	r3, #16
 8008bd4:	d001      	beq.n	8008bda <SD_write+0x4a>
  DRESULT res = RES_ERROR;
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	e048      	b.n	8008c6c <SD_write+0xdc>
        if (event.value.v == WRITE_CPLT_MSG)
 8008bda:	9b06      	ldr	r3, [sp, #24]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d001      	beq.n	8008be4 <SD_write+0x54>
  DRESULT res = RES_ERROR;
 8008be0:	2001      	movs	r0, #1
 8008be2:	e043      	b.n	8008c6c <SD_write+0xdc>
          timer = osKernelSysTick() + SD_TIMEOUT;
 8008be4:	f001 f9f5 	bl	8009fd2 <osKernelSysTick>
 8008be8:	f247 5430 	movw	r4, #30000	; 0x7530
 8008bec:	4404      	add	r4, r0
          while(timer > osKernelSysTick())
 8008bee:	f001 f9f0 	bl	8009fd2 <osKernelSysTick>
 8008bf2:	42a0      	cmp	r0, r4
 8008bf4:	d205      	bcs.n	8008c02 <SD_write+0x72>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008bf6:	f7ff febb 	bl	8008970 <BSP_SD_GetCardState>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d1f7      	bne.n	8008bee <SD_write+0x5e>
              res = RES_OK;
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e034      	b.n	8008c6c <SD_write+0xdc>
  DRESULT res = RES_ERROR;
 8008c02:	2001      	movs	r0, #1
 8008c04:	e032      	b.n	8008c6c <SD_write+0xdc>
    for (i = 0; i < count; i++) {
 8008c06:	3501      	adds	r5, #1
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008c08:	4634      	mov	r4, r6
    for (i = 0; i < count; i++) {
 8008c0a:	46aa      	mov	sl, r5
 8008c0c:	42bd      	cmp	r5, r7
 8008c0e:	d223      	bcs.n	8008c58 <SD_write+0xc8>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8008c10:	1c66      	adds	r6, r4, #1
 8008c12:	2201      	movs	r2, #1
 8008c14:	4621      	mov	r1, r4
 8008c16:	4818      	ldr	r0, [pc, #96]	; (8008c78 <SD_write+0xe8>)
 8008c18:	f7ff fe9e 	bl	8008958 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	b9d8      	cbnz	r0, 8008c58 <SD_write+0xc8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008c20:	466c      	mov	r4, sp
 8008c22:	f247 5230 	movw	r2, #30000	; 0x7530
 8008c26:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <SD_write+0xe4>)
 8008c28:	6819      	ldr	r1, [r3, #0]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f001 fafe 	bl	800a22c <osMessageGet>
 8008c30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008c34:	ab08      	add	r3, sp, #32
 8008c36:	e903 0007 	stmdb	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8008c3a:	9b05      	ldr	r3, [sp, #20]
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d1e2      	bne.n	8008c06 <SD_write+0x76>
          if (event.value.v == WRITE_CPLT_MSG) {
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d1df      	bne.n	8008c06 <SD_write+0x76>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8008c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c4a:	490b      	ldr	r1, [pc, #44]	; (8008c78 <SD_write+0xe8>)
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f012 fdfe 	bl	801b84e <memcpy>
            buff += BLOCKSIZE;
 8008c52:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8008c56:	e7d6      	b.n	8008c06 <SD_write+0x76>
      {
        break;
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8008c58:	45ba      	cmp	sl, r7
 8008c5a:	bf08      	it	eq
 8008c5c:	f1b8 0f00 	cmpeq.w	r8, #0
 8008c60:	d101      	bne.n	8008c66 <SD_write+0xd6>
      res = RES_OK;
 8008c62:	2000      	movs	r0, #0
 8008c64:	e002      	b.n	8008c6c <SD_write+0xdc>
  DRESULT res = RES_ERROR;
 8008c66:	2001      	movs	r0, #1
 8008c68:	e000      	b.n	8008c6c <SD_write+0xdc>
    return res;
 8008c6a:	2001      	movs	r0, #1
  }
#endif
  return res;
} 
 8008c6c:	b008      	add	sp, #32
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	bf00      	nop
 8008c74:	20001ad4 	.word	0x20001ad4
 8008c78:	20001ad8 	.word	0x20001ad8

08008c7c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008c7c:	4b15      	ldr	r3, [pc, #84]	; (8008cd4 <SD_ioctl+0x58>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	f013 0f01 	tst.w	r3, #1
 8008c84:	d121      	bne.n	8008cca <SD_ioctl+0x4e>
{
 8008c86:	b510      	push	{r4, lr}
 8008c88:	b088      	sub	sp, #32
 8008c8a:	4614      	mov	r4, r2

  switch (cmd)
 8008c8c:	2903      	cmp	r1, #3
 8008c8e:	d81e      	bhi.n	8008cce <SD_ioctl+0x52>
 8008c90:	e8df f001 	tbb	[pc, r1]
 8008c94:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008c98:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8008c9a:	b008      	add	sp, #32
 8008c9c:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008c9e:	4668      	mov	r0, sp
 8008ca0:	f7ff fe70 	bl	8008984 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008ca4:	9b06      	ldr	r3, [sp, #24]
 8008ca6:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008ca8:	2000      	movs	r0, #0
    break;
 8008caa:	e7f6      	b.n	8008c9a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8008cac:	4668      	mov	r0, sp
 8008cae:	f7ff fe69 	bl	8008984 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008cb2:	9b07      	ldr	r3, [sp, #28]
 8008cb4:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8008cb6:	2000      	movs	r0, #0
    break;
 8008cb8:	e7ef      	b.n	8008c9a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8008cba:	4668      	mov	r0, sp
 8008cbc:	f7ff fe62 	bl	8008984 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	0a5b      	lsrs	r3, r3, #9
 8008cc4:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008cc6:	2000      	movs	r0, #0
    break;
 8008cc8:	e7e7      	b.n	8008c9a <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008cca:	2003      	movs	r0, #3
}
 8008ccc:	4770      	bx	lr
    res = RES_PARERR;
 8008cce:	2004      	movs	r0, #4
 8008cd0:	e7e3      	b.n	8008c9a <SD_ioctl+0x1e>
 8008cd2:	bf00      	nop
 8008cd4:	200001e9 	.word	0x200001e9

08008cd8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008cd8:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <BSP_SD_ReadCpltCallback+0x14>)
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	f001 fa6e 	bl	800a1c4 <osMessagePut>
}
 8008ce8:	bd08      	pop	{r3, pc}
 8008cea:	bf00      	nop
 8008cec:	20001ad4 	.word	0x20001ad4

08008cf0 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	4770      	bx	lr

08008cf4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008cf4:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008cf6:	2221      	movs	r2, #33	; 0x21
 8008cf8:	7402      	strb	r2, [r0, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008cfe:	2200      	movs	r2, #0
 8008d00:	8242      	strh	r2, [r0, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008d02:	8282      	strh	r2, [r0, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d04:	2207      	movs	r2, #7
 8008d06:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d08:	f000 ff6d 	bl	8009be6 <USBH_CtlReq>
}
 8008d0c:	bd08      	pop	{r3, pc}

08008d0e <GetLineCoding>:
{
 8008d0e:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008d10:	22a1      	movs	r2, #161	; 0xa1
 8008d12:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008d14:	2221      	movs	r2, #33	; 0x21
 8008d16:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d18:	2200      	movs	r2, #0
 8008d1a:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008d1c:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d1e:	2207      	movs	r2, #7
 8008d20:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d22:	f000 ff60 	bl	8009be6 <USBH_CtlReq>
}
 8008d26:	bd08      	pop	{r3, pc}

08008d28 <USBH_CDC_ClassRequest>:
{
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008d2c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8008d30:	69d9      	ldr	r1, [r3, #28]
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d32:	3140      	adds	r1, #64	; 0x40
 8008d34:	f7ff ffeb 	bl	8008d0e <GetLineCoding>
  if(status == USBH_OK)
 8008d38:	4605      	mov	r5, r0
 8008d3a:	b920      	cbnz	r0, 8008d46 <USBH_CDC_ClassRequest+0x1e>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d3c:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8008d40:	2102      	movs	r1, #2
 8008d42:	4620      	mov	r0, r4
 8008d44:	4798      	blx	r3
}
 8008d46:	4628      	mov	r0, r5
 8008d48:	bd38      	pop	{r3, r4, r5, pc}

08008d4a <USBH_CDC_InterfaceDeInit>:
{
 8008d4a:	b538      	push	{r3, r4, r5, lr}
 8008d4c:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008d4e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8008d52:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8008d54:	7821      	ldrb	r1, [r4, #0]
 8008d56:	b979      	cbnz	r1, 8008d78 <USBH_CDC_InterfaceDeInit+0x2e>
  if ( CDC_Handle->DataItf.InPipe)
 8008d58:	7b21      	ldrb	r1, [r4, #12]
 8008d5a:	b9b1      	cbnz	r1, 8008d8a <USBH_CDC_InterfaceDeInit+0x40>
  if ( CDC_Handle->DataItf.OutPipe)
 8008d5c:	7b61      	ldrb	r1, [r4, #13]
 8008d5e:	b9f1      	cbnz	r1, 8008d9e <USBH_CDC_InterfaceDeInit+0x54>
  if(phost->pActiveClass->pData)
 8008d60:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8008d64:	69d8      	ldr	r0, [r3, #28]
 8008d66:	b128      	cbz	r0, 8008d74 <USBH_CDC_InterfaceDeInit+0x2a>
    USBH_free (phost->pActiveClass->pData);
 8008d68:	f012 fd5a 	bl	801b820 <free>
    phost->pActiveClass->pData = 0U;
 8008d6c:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8008d70:	2200      	movs	r2, #0
 8008d72:	61da      	str	r2, [r3, #28]
}
 8008d74:	2000      	movs	r0, #0
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d78:	f001 f88f 	bl	8009e9a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8008d7c:	7821      	ldrb	r1, [r4, #0]
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f001 f8a1 	bl	8009ec6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d84:	2300      	movs	r3, #0
 8008d86:	7023      	strb	r3, [r4, #0]
 8008d88:	e7e6      	b.n	8008d58 <USBH_CDC_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f001 f885 	bl	8009e9a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8008d90:	7b21      	ldrb	r1, [r4, #12]
 8008d92:	4628      	mov	r0, r5
 8008d94:	f001 f897 	bl	8009ec6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d98:	2300      	movs	r3, #0
 8008d9a:	7323      	strb	r3, [r4, #12]
 8008d9c:	e7de      	b.n	8008d5c <USBH_CDC_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f001 f87b 	bl	8009e9a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8008da4:	7b61      	ldrb	r1, [r4, #13]
 8008da6:	4628      	mov	r0, r5
 8008da8:	f001 f88d 	bl	8009ec6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008dac:	2300      	movs	r3, #0
 8008dae:	7363      	strb	r3, [r4, #13]
 8008db0:	e7d6      	b.n	8008d60 <USBH_CDC_InterfaceDeInit+0x16>

08008db2 <USBH_CDC_InterfaceInit>:
{
 8008db2:	b570      	push	{r4, r5, r6, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost,
 8008db8:	2301      	movs	r3, #1
 8008dba:	2202      	movs	r2, #2
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	f000 fafb 	bl	80093b8 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8008dc2:	28ff      	cmp	r0, #255	; 0xff
 8008dc4:	f000 80a1 	beq.w	8008f0a <USBH_CDC_InterfaceInit+0x158>
 8008dc8:	4606      	mov	r6, r0
    USBH_SelectInterface (phost, interface);
 8008dca:	4601      	mov	r1, r0
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fae9 	bl	80093a4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8008dd2:	f8d4 5378 	ldr.w	r5, [r4, #888]	; 0x378
 8008dd6:	2050      	movs	r0, #80	; 0x50
 8008dd8:	f012 fd1a 	bl	801b810 <malloc>
 8008ddc:	61e8      	str	r0, [r5, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008dde:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8008de2:	69dd      	ldr	r5, [r3, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008de4:	231a      	movs	r3, #26
 8008de6:	fb03 4306 	mla	r3, r3, r6, r4
 8008dea:	f893 334a 	ldrb.w	r3, [r3, #842]	; 0x34a
 8008dee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008df2:	d172      	bne.n	8008eda <USBH_CDC_InterfaceInit+0x128>
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008df4:	7869      	ldrb	r1, [r5, #1]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f001 f854 	bl	8009ea4 <USBH_AllocPipe>
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	7028      	strb	r0, [r5, #0]
    USBH_OpenPipe  (phost,
 8008e00:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8008e04:	786a      	ldrb	r2, [r5, #1]
 8008e06:	8968      	ldrh	r0, [r5, #10]
 8008e08:	9002      	str	r0, [sp, #8]
 8008e0a:	2003      	movs	r0, #3
 8008e0c:	9001      	str	r0, [sp, #4]
 8008e0e:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8008e12:	9000      	str	r0, [sp, #0]
 8008e14:	4620      	mov	r0, r4
 8008e16:	f001 f830 	bl	8009e7a <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	7829      	ldrb	r1, [r5, #0]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f004 f8ca 	bl	800cfb8 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8008e24:	2300      	movs	r3, #0
 8008e26:	461a      	mov	r2, r3
 8008e28:	210a      	movs	r1, #10
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fac4 	bl	80093b8 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8008e30:	28ff      	cmp	r0, #255	; 0xff
 8008e32:	d06c      	beq.n	8008f0e <USBH_CDC_InterfaceInit+0x15c>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008e34:	231a      	movs	r3, #26
 8008e36:	fb03 4300 	mla	r3, r3, r0, r4
 8008e3a:	f893 334a 	ldrb.w	r3, [r3, #842]	; 0x34a
 8008e3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e42:	d152      	bne.n	8008eea <USBH_CDC_InterfaceInit+0x138>
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e44:	73ab      	strb	r3, [r5, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e46:	231a      	movs	r3, #26
 8008e48:	fb03 4300 	mla	r3, r3, r0, r4
 8008e4c:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 8008e50:	832b      	strh	r3, [r5, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008e52:	231a      	movs	r3, #26
 8008e54:	fb03 4300 	mla	r3, r3, r0, r4
 8008e58:	f893 3352 	ldrb.w	r3, [r3, #850]	; 0x352
 8008e5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e60:	d14b      	bne.n	8008efa <USBH_CDC_InterfaceInit+0x148>
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e62:	73ab      	strb	r3, [r5, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e64:	231a      	movs	r3, #26
 8008e66:	fb03 4000 	mla	r0, r3, r0, r4
 8008e6a:	f8b0 3354 	ldrh.w	r3, [r0, #852]	; 0x354
 8008e6e:	832b      	strh	r3, [r5, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008e70:	7ba9      	ldrb	r1, [r5, #14]
 8008e72:	4620      	mov	r0, r4
 8008e74:	f001 f816 	bl	8009ea4 <USBH_AllocPipe>
 8008e78:	7368      	strb	r0, [r5, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008e7a:	7be9      	ldrb	r1, [r5, #15]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f001 f811 	bl	8009ea4 <USBH_AllocPipe>
 8008e82:	7328      	strb	r0, [r5, #12]
      USBH_OpenPipe  (phost,
 8008e84:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8008e88:	7baa      	ldrb	r2, [r5, #14]
 8008e8a:	7b69      	ldrb	r1, [r5, #13]
 8008e8c:	8b28      	ldrh	r0, [r5, #24]
 8008e8e:	9002      	str	r0, [sp, #8]
 8008e90:	2602      	movs	r6, #2
 8008e92:	9601      	str	r6, [sp, #4]
 8008e94:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8008e98:	9000      	str	r0, [sp, #0]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 ffed 	bl	8009e7a <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8008ea0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8008ea4:	7bea      	ldrb	r2, [r5, #15]
 8008ea6:	7b29      	ldrb	r1, [r5, #12]
 8008ea8:	8b68      	ldrh	r0, [r5, #26]
 8008eaa:	9002      	str	r0, [sp, #8]
 8008eac:	9601      	str	r6, [sp, #4]
 8008eae:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8008eb2:	9000      	str	r0, [sp, #0]
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 ffe0 	bl	8009e7a <USBH_OpenPipe>
      CDC_Handle->state = CDC_IDLE_STATE;
 8008eba:	2600      	movs	r6, #0
 8008ebc:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	7b69      	ldrb	r1, [r5, #13]
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f004 f877 	bl	800cfb8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008eca:	4632      	mov	r2, r6
 8008ecc:	7b29      	ldrb	r1, [r5, #12]
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f004 f872 	bl	800cfb8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8008ed4:	4630      	mov	r0, r6
}
 8008ed6:	b004      	add	sp, #16
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008eda:	706b      	strb	r3, [r5, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008edc:	231a      	movs	r3, #26
 8008ede:	fb03 4606 	mla	r6, r3, r6, r4
 8008ee2:	f8b6 334c 	ldrh.w	r3, [r6, #844]	; 0x34c
 8008ee6:	816b      	strh	r3, [r5, #10]
 8008ee8:	e784      	b.n	8008df4 <USBH_CDC_InterfaceInit+0x42>
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008eea:	73eb      	strb	r3, [r5, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008eec:	231a      	movs	r3, #26
 8008eee:	fb03 4300 	mla	r3, r3, r0, r4
 8008ef2:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 8008ef6:	836b      	strh	r3, [r5, #26]
 8008ef8:	e7ab      	b.n	8008e52 <USBH_CDC_InterfaceInit+0xa0>
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008efa:	73eb      	strb	r3, [r5, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008efc:	231a      	movs	r3, #26
 8008efe:	fb03 4000 	mla	r0, r3, r0, r4
 8008f02:	f8b0 3354 	ldrh.w	r3, [r0, #852]	; 0x354
 8008f06:	836b      	strh	r3, [r5, #26]
 8008f08:	e7b2      	b.n	8008e70 <USBH_CDC_InterfaceInit+0xbe>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8008f0a:	2002      	movs	r0, #2
 8008f0c:	e7e3      	b.n	8008ed6 <USBH_CDC_InterfaceInit+0x124>
 8008f0e:	2002      	movs	r0, #2
 8008f10:	e7e1      	b.n	8008ed6 <USBH_CDC_InterfaceInit+0x124>

08008f12 <USBH_CDC_TransmitCallback>:
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{

}
 8008f12:	4770      	bx	lr

08008f14 <CDC_ProcessTransmission>:
{
 8008f14:	b530      	push	{r4, r5, lr}
 8008f16:	b083      	sub	sp, #12
 8008f18:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008f1a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8008f1e:	69dc      	ldr	r4, [r3, #28]
  switch (CDC_Handle->data_tx_state)
 8008f20:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d003      	beq.n	8008f30 <CDC_ProcessTransmission+0x1c>
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d019      	beq.n	8008f60 <CDC_ProcessTransmission+0x4c>
}
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bd30      	pop	{r4, r5, pc}
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f32:	8b22      	ldrh	r2, [r4, #24]
 8008f34:	4290      	cmp	r0, r2
 8008f36:	d90a      	bls.n	8008f4e <CDC_ProcessTransmission+0x3a>
      USBH_BulkSendData (phost,
 8008f38:	7b63      	ldrb	r3, [r4, #13]
 8008f3a:	69e1      	ldr	r1, [r4, #28]
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	9000      	str	r0, [sp, #0]
 8008f40:	4628      	mov	r0, r5
 8008f42:	f000 ff62 	bl	8009e0a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008f46:	2302      	movs	r3, #2
 8008f48:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    break;
 8008f4c:	e7ee      	b.n	8008f2c <CDC_ProcessTransmission+0x18>
      USBH_BulkSendData (phost,
 8008f4e:	7b63      	ldrb	r3, [r4, #13]
 8008f50:	69e1      	ldr	r1, [r4, #28]
 8008f52:	2201      	movs	r2, #1
 8008f54:	9200      	str	r2, [sp, #0]
 8008f56:	b282      	uxth	r2, r0
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f000 ff56 	bl	8009e0a <USBH_BulkSendData>
 8008f5e:	e7f2      	b.n	8008f46 <CDC_ProcessTransmission+0x32>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008f60:	7b61      	ldrb	r1, [r4, #13]
 8008f62:	f004 f815 	bl	800cf90 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8008f66:	2801      	cmp	r0, #1
 8008f68:	d00d      	beq.n	8008f86 <CDC_ProcessTransmission+0x72>
      if (URB_Status == USBH_URB_NOTREADY)
 8008f6a:	2802      	cmp	r0, #2
 8008f6c:	d1de      	bne.n	8008f2c <CDC_ProcessTransmission+0x18>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008f74:	2104      	movs	r1, #4
 8008f76:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8008f80:	f001 f920 	bl	800a1c4 <osMessagePut>
}
 8008f84:	e7d2      	b.n	8008f2c <CDC_ProcessTransmission+0x18>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	8b22      	ldrh	r2, [r4, #24]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d912      	bls.n	8008fb4 <CDC_ProcessTransmission+0xa0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	6263      	str	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008f92:	69e3      	ldr	r3, [r4, #28]
 8008f94:	441a      	add	r2, r3
 8008f96:	61e2      	str	r2, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8008f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f9a:	b173      	cbz	r3, 8008fba <CDC_ProcessTransmission+0xa6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008fa2:	2104      	movs	r1, #4
 8008fa4:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8008fae:	f001 f909 	bl	800a1c4 <osMessagePut>
 8008fb2:	e7bb      	b.n	8008f2c <CDC_ProcessTransmission+0x18>
        CDC_Handle->TxDataLength = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6263      	str	r3, [r4, #36]	; 0x24
 8008fb8:	e7ee      	b.n	8008f98 <CDC_ProcessTransmission+0x84>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f7ff ffa6 	bl	8008f12 <USBH_CDC_TransmitCallback>
 8008fc6:	e7ec      	b.n	8008fa2 <CDC_ProcessTransmission+0x8e>

08008fc8 <USBH_CDC_ReceiveCallback>:
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{

}
 8008fc8:	4770      	bx	lr

08008fca <CDC_ProcessReception>:
{
 8008fca:	b538      	push	{r3, r4, r5, lr}
 8008fcc:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008fce:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8008fd2:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8008fd4:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d002      	beq.n	8008fe2 <CDC_ProcessReception+0x18>
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d009      	beq.n	8008ff4 <CDC_ProcessReception+0x2a>
}
 8008fe0:	bd38      	pop	{r3, r4, r5, pc}
    USBH_BulkReceiveData (phost,
 8008fe2:	7b23      	ldrb	r3, [r4, #12]
 8008fe4:	8b62      	ldrh	r2, [r4, #26]
 8008fe6:	6a21      	ldr	r1, [r4, #32]
 8008fe8:	f000 ff25 	bl	8009e36 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008fec:	2304      	movs	r3, #4
 8008fee:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
    break;
 8008ff2:	e7f5      	b.n	8008fe0 <CDC_ProcessReception+0x16>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ff4:	7b21      	ldrb	r1, [r4, #12]
 8008ff6:	f003 ffcb 	bl	800cf90 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8008ffa:	2801      	cmp	r0, #1
 8008ffc:	d1f0      	bne.n	8008fe0 <CDC_ProcessReception+0x16>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008ffe:	7b21      	ldrb	r1, [r4, #12]
 8009000:	4628      	mov	r0, r5
 8009002:	f003 ffbf 	bl	800cf84 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009008:	4283      	cmp	r3, r0
 800900a:	d00b      	beq.n	8009024 <CDC_ProcessReception+0x5a>
 800900c:	8b62      	ldrh	r2, [r4, #26]
 800900e:	4282      	cmp	r2, r0
 8009010:	d208      	bcs.n	8009024 <CDC_ProcessReception+0x5a>
        CDC_Handle->RxDataLength -= length ;
 8009012:	1a1b      	subs	r3, r3, r0
 8009014:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8009016:	6a23      	ldr	r3, [r4, #32]
 8009018:	4418      	add	r0, r3
 800901a:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800901c:	2303      	movs	r3, #3
 800901e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 8009022:	e005      	b.n	8009030 <CDC_ProcessReception+0x66>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8009024:	2300      	movs	r3, #0
 8009026:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800902a:	4628      	mov	r0, r5
 800902c:	f7ff ffcc 	bl	8008fc8 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009030:	2104      	movs	r1, #4
 8009032:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009036:	2200      	movs	r2, #0
 8009038:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 800903c:	f001 f8c2 	bl	800a1c4 <osMessagePut>
}
 8009040:	e7ce      	b.n	8008fe0 <CDC_ProcessReception+0x16>

08009042 <USBH_CDC_LineCodingChanged>:
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{

}
 8009042:	4770      	bx	lr

08009044 <USBH_CDC_Process>:
{
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009048:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800904c:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 800904e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8009052:	2b04      	cmp	r3, #4
 8009054:	d804      	bhi.n	8009060 <USBH_CDC_Process+0x1c>
 8009056:	e8df f003 	tbb	[pc, r3]
 800905a:	054c      	.short	0x054c
 800905c:	3c16      	.short	0x3c16
 800905e:	43          	.byte	0x43
 800905f:	00          	.byte	0x00
  USBH_StatusTypeDef status = USBH_BUSY;
 8009060:	2301      	movs	r3, #1
 8009062:	e047      	b.n	80090f4 <USBH_CDC_Process+0xb0>
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009064:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009066:	f7ff fe45 	bl	8008cf4 <SetLineCoding>
    if(req_status == USBH_OK)
 800906a:	4603      	mov	r3, r0
 800906c:	b130      	cbz	r0, 800907c <USBH_CDC_Process+0x38>
      if(req_status != USBH_BUSY)
 800906e:	2801      	cmp	r0, #1
 8009070:	d040      	beq.n	80090f4 <USBH_CDC_Process+0xb0>
        CDC_Handle->state = CDC_ERROR_STATE;
 8009072:	2304      	movs	r3, #4
 8009074:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8009078:	2301      	movs	r3, #1
 800907a:	e03b      	b.n	80090f4 <USBH_CDC_Process+0xb0>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800907c:	2302      	movs	r3, #2
 800907e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8009082:	2301      	movs	r3, #1
 8009084:	e036      	b.n	80090f4 <USBH_CDC_Process+0xb0>
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009086:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800908a:	f7ff fe40 	bl	8008d0e <GetLineCoding>
    if(req_status == USBH_OK)
 800908e:	4603      	mov	r3, r0
 8009090:	b9c0      	cbnz	r0, 80090c4 <USBH_CDC_Process+0x80>
      CDC_Handle->state = CDC_IDLE_STATE;
 8009092:	2300      	movs	r3, #0
 8009094:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009098:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800909a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800909e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80090a0:	684b      	ldr	r3, [r1, #4]
 80090a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d001      	beq.n	80090ae <USBH_CDC_Process+0x6a>
  USBH_StatusTypeDef status = USBH_BUSY;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e022      	b.n	80090f4 <USBH_CDC_Process+0xb0>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80090ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80090b0:	680b      	ldr	r3, [r1, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d001      	beq.n	80090ba <USBH_CDC_Process+0x76>
  USBH_StatusTypeDef status = USBH_BUSY;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e01c      	b.n	80090f4 <USBH_CDC_Process+0xb0>
        USBH_CDC_LineCodingChanged(phost);
 80090ba:	4628      	mov	r0, r5
 80090bc:	f7ff ffc1 	bl	8009042 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e017      	b.n	80090f4 <USBH_CDC_Process+0xb0>
      if(req_status != USBH_BUSY)
 80090c4:	2801      	cmp	r0, #1
 80090c6:	d015      	beq.n	80090f4 <USBH_CDC_Process+0xb0>
        CDC_Handle->state = CDC_ERROR_STATE;
 80090c8:	2304      	movs	r3, #4
 80090ca:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e010      	b.n	80090f4 <USBH_CDC_Process+0xb0>
    CDC_ProcessTransmission(phost);
 80090d2:	f7ff ff1f 	bl	8008f14 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80090d6:	4628      	mov	r0, r5
 80090d8:	f7ff ff77 	bl	8008fca <CDC_ProcessReception>
  USBH_StatusTypeDef status = USBH_BUSY;
 80090dc:	2301      	movs	r3, #1
    break;
 80090de:	e009      	b.n	80090f4 <USBH_CDC_Process+0xb0>
    req_status = USBH_ClrFeature(phost, 0x00U);
 80090e0:	2100      	movs	r1, #0
 80090e2:	f000 fe49 	bl	8009d78 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 80090e6:	b938      	cbnz	r0, 80090f8 <USBH_CDC_Process+0xb4>
      CDC_Handle->state = CDC_IDLE_STATE ;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <USBH_CDC_Process+0xb0>
    status = USBH_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
  USBH_StatusTypeDef status = USBH_BUSY;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7fb      	b.n	80090f4 <USBH_CDC_Process+0xb0>

080090fc <DeInitStateMachine>:
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
  uint32_t i = 0U;
 80090fc:	2300      	movs	r3, #0

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80090fe:	e005      	b.n	800910c <DeInitStateMachine+0x10>
  {
    phost->Pipes[i] = 0U;
 8009100:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8009104:	2100      	movs	r1, #0
 8009106:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800910a:	3301      	adds	r3, #1
 800910c:	2b0e      	cmp	r3, #14
 800910e:	d9f7      	bls.n	8009100 <DeInitStateMachine+0x4>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009110:	2300      	movs	r3, #0
 8009112:	e004      	b.n	800911e <DeInitStateMachine+0x22>
  {
    phost->device.Data[i] = 0U;
 8009114:	18c2      	adds	r2, r0, r3
 8009116:	2100      	movs	r1, #0
 8009118:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800911c:	3301      	adds	r3, #1
 800911e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009122:	d3f7      	bcc.n	8009114 <DeInitStateMachine+0x18>
  }

  phost->gState = HOST_IDLE;
 8009124:	2300      	movs	r3, #0
 8009126:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8009128:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800912a:	2201      	movs	r2, #1
 800912c:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 800912e:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8009132:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009134:	2140      	movs	r1, #64	; 0x40
 8009136:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8009138:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800913a:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800913e:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8009142:	4618      	mov	r0, r3
 8009144:	4770      	bx	lr

08009146 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009146:	b508      	push	{r3, lr}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009148:	7803      	ldrb	r3, [r0, #0]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b0b      	cmp	r3, #11
 800914e:	d000      	beq.n	8009152 <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8009150:	bd08      	pop	{r3, pc}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009152:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0fa      	beq.n	8009150 <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	4798      	blx	r3
}
 800915e:	e7f7      	b.n	8009150 <USBH_HandleSof+0xa>

08009160 <USBH_HandleEnum>:
{
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8009166:	7843      	ldrb	r3, [r0, #1]
 8009168:	2b07      	cmp	r3, #7
 800916a:	f200 80c8 	bhi.w	80092fe <USBH_HandleEnum+0x19e>
 800916e:	e8df f003 	tbb	[pc, r3]
 8009172:	2c04      	.short	0x2c04
 8009174:	72685f36 	.word	0x72685f36
 8009178:	ae95      	.short	0xae95
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800917a:	2108      	movs	r1, #8
 800917c:	f000 fd7f 	bl	8009c7e <USBH_Get_DevDesc>
 8009180:	b118      	cbz	r0, 800918a <USBH_HandleEnum+0x2a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009182:	2501      	movs	r5, #1
}
 8009184:	4628      	mov	r0, r5
 8009186:	b004      	add	sp, #16
 8009188:	bd70      	pop	{r4, r5, r6, pc}
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800918a:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
 800918e:	71a2      	strb	r2, [r4, #6]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009190:	2501      	movs	r5, #1
 8009192:	7065      	strb	r5, [r4, #1]
      USBH_OpenPipe (phost,
 8009194:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009198:	7921      	ldrb	r1, [r4, #4]
 800919a:	9202      	str	r2, [sp, #8]
 800919c:	2600      	movs	r6, #0
 800919e:	9601      	str	r6, [sp, #4]
 80091a0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80091a4:	9200      	str	r2, [sp, #0]
 80091a6:	2280      	movs	r2, #128	; 0x80
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fe66 	bl	8009e7a <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80091ae:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80091b2:	7961      	ldrb	r1, [r4, #5]
 80091b4:	79a2      	ldrb	r2, [r4, #6]
 80091b6:	9202      	str	r2, [sp, #8]
 80091b8:	9601      	str	r6, [sp, #4]
 80091ba:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80091be:	9200      	str	r2, [sp, #0]
 80091c0:	4632      	mov	r2, r6
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fe59 	bl	8009e7a <USBH_OpenPipe>
 80091c8:	e7dc      	b.n	8009184 <USBH_HandleEnum+0x24>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80091ca:	2112      	movs	r1, #18
 80091cc:	f000 fd57 	bl	8009c7e <USBH_Get_DevDesc>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f040 8096 	bne.w	8009302 <USBH_HandleEnum+0x1a2>
      phost->EnumState = ENUM_SET_ADDR;
 80091d6:	2302      	movs	r3, #2
 80091d8:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091da:	2501      	movs	r5, #1
 80091dc:	e7d2      	b.n	8009184 <USBH_HandleEnum+0x24>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80091de:	2101      	movs	r1, #1
 80091e0:	f000 fd97 	bl	8009d12 <USBH_SetAddress>
 80091e4:	b108      	cbz	r0, 80091ea <USBH_HandleEnum+0x8a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091e6:	2501      	movs	r5, #1
 80091e8:	e7cc      	b.n	8009184 <USBH_HandleEnum+0x24>
      USBH_Delay(2U);
 80091ea:	2002      	movs	r0, #2
 80091ec:	f003 fefd 	bl	800cfea <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80091f0:	2501      	movs	r5, #1
 80091f2:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
      phost->EnumState = ENUM_GET_CFG_DESC;
 80091f6:	2303      	movs	r3, #3
 80091f8:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 80091fa:	7921      	ldrb	r1, [r4, #4]
 80091fc:	79a3      	ldrb	r3, [r4, #6]
 80091fe:	9302      	str	r3, [sp, #8]
 8009200:	2600      	movs	r6, #0
 8009202:	9601      	str	r6, [sp, #4]
 8009204:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	462b      	mov	r3, r5
 800920c:	2280      	movs	r2, #128	; 0x80
 800920e:	4620      	mov	r0, r4
 8009210:	f000 fe33 	bl	8009e7a <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8009214:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009218:	7961      	ldrb	r1, [r4, #5]
 800921a:	79a2      	ldrb	r2, [r4, #6]
 800921c:	9202      	str	r2, [sp, #8]
 800921e:	9601      	str	r6, [sp, #4]
 8009220:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8009224:	9200      	str	r2, [sp, #0]
 8009226:	4632      	mov	r2, r6
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fe26 	bl	8009e7a <USBH_OpenPipe>
 800922e:	e7a9      	b.n	8009184 <USBH_HandleEnum+0x24>
    if ( USBH_Get_CfgDesc(phost,
 8009230:	2109      	movs	r1, #9
 8009232:	f000 fd3d 	bl	8009cb0 <USBH_Get_CfgDesc>
 8009236:	2800      	cmp	r0, #0
 8009238:	d165      	bne.n	8009306 <USBH_HandleEnum+0x1a6>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800923a:	2304      	movs	r3, #4
 800923c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800923e:	2501      	movs	r5, #1
 8009240:	e7a0      	b.n	8009184 <USBH_HandleEnum+0x24>
    if (USBH_Get_CfgDesc(phost,
 8009242:	f8b0 1336 	ldrh.w	r1, [r0, #822]	; 0x336
 8009246:	f000 fd33 	bl	8009cb0 <USBH_Get_CfgDesc>
 800924a:	2800      	cmp	r0, #0
 800924c:	d15d      	bne.n	800930a <USBH_HandleEnum+0x1aa>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800924e:	2305      	movs	r3, #5
 8009250:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009252:	2501      	movs	r5, #1
 8009254:	e796      	b.n	8009184 <USBH_HandleEnum+0x24>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8009256:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 800925a:	b199      	cbz	r1, 8009284 <USBH_HandleEnum+0x124>
      if ( USBH_Get_StringDesc(phost,
 800925c:	23ff      	movs	r3, #255	; 0xff
 800925e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8009262:	f000 fd3e 	bl	8009ce2 <USBH_Get_StringDesc>
 8009266:	b108      	cbz	r0, 800926c <USBH_HandleEnum+0x10c>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009268:	2501      	movs	r5, #1
 800926a:	e78b      	b.n	8009184 <USBH_HandleEnum+0x24>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800926c:	2306      	movs	r3, #6
 800926e:	7063      	strb	r3, [r4, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009270:	2105      	movs	r1, #5
 8009272:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009276:	2200      	movs	r2, #0
 8009278:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800927c:	f000 ffa2 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009280:	2501      	movs	r5, #1
 8009282:	e77f      	b.n	8009184 <USBH_HandleEnum+0x24>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009284:	2306      	movs	r3, #6
 8009286:	7043      	strb	r3, [r0, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009288:	2105      	movs	r1, #5
 800928a:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800928e:	2200      	movs	r2, #0
 8009290:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8009294:	f000 ff96 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009298:	2501      	movs	r5, #1
 800929a:	e773      	b.n	8009184 <USBH_HandleEnum+0x24>
    if (phost->device.DevDesc.iProduct != 0U)
 800929c:	f890 1331 	ldrb.w	r1, [r0, #817]	; 0x331
 80092a0:	b149      	cbz	r1, 80092b6 <USBH_HandleEnum+0x156>
      if ( USBH_Get_StringDesc(phost,
 80092a2:	23ff      	movs	r3, #255	; 0xff
 80092a4:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80092a8:	f000 fd1b 	bl	8009ce2 <USBH_Get_StringDesc>
 80092ac:	bb78      	cbnz	r0, 800930e <USBH_HandleEnum+0x1ae>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092ae:	2307      	movs	r3, #7
 80092b0:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80092b2:	2501      	movs	r5, #1
 80092b4:	e766      	b.n	8009184 <USBH_HandleEnum+0x24>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092b6:	2307      	movs	r3, #7
 80092b8:	7043      	strb	r3, [r0, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80092ba:	2105      	movs	r1, #5
 80092bc:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 80092c6:	f000 ff7d 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80092ca:	2501      	movs	r5, #1
 80092cc:	e75a      	b.n	8009184 <USBH_HandleEnum+0x24>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80092ce:	f890 1332 	ldrb.w	r1, [r0, #818]	; 0x332
 80092d2:	b151      	cbz	r1, 80092ea <USBH_HandleEnum+0x18a>
      if ( USBH_Get_StringDesc(phost,
 80092d4:	23ff      	movs	r3, #255	; 0xff
 80092d6:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80092da:	f000 fd02 	bl	8009ce2 <USBH_Get_StringDesc>
 80092de:	4605      	mov	r5, r0
 80092e0:	2800      	cmp	r0, #0
 80092e2:	f43f af4f 	beq.w	8009184 <USBH_HandleEnum+0x24>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80092e6:	2501      	movs	r5, #1
 80092e8:	e74c      	b.n	8009184 <USBH_HandleEnum+0x24>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80092ea:	2105      	movs	r1, #5
 80092ec:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 80092f6:	f000 ff65 	bl	800a1c4 <osMessagePut>
      Status = USBH_OK;
 80092fa:	2500      	movs	r5, #0
 80092fc:	e742      	b.n	8009184 <USBH_HandleEnum+0x24>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80092fe:	2501      	movs	r5, #1
 8009300:	e740      	b.n	8009184 <USBH_HandleEnum+0x24>
 8009302:	2501      	movs	r5, #1
 8009304:	e73e      	b.n	8009184 <USBH_HandleEnum+0x24>
 8009306:	2501      	movs	r5, #1
 8009308:	e73c      	b.n	8009184 <USBH_HandleEnum+0x24>
 800930a:	2501      	movs	r5, #1
 800930c:	e73a      	b.n	8009184 <USBH_HandleEnum+0x24>
 800930e:	2501      	movs	r5, #1
 8009310:	e738      	b.n	8009184 <USBH_HandleEnum+0x24>
	...

08009314 <USBH_Init>:
  if(phost == NULL)
 8009314:	b378      	cbz	r0, 8009376 <USBH_Init+0x62>
{
 8009316:	b570      	push	{r4, r5, r6, lr}
 8009318:	b08c      	sub	sp, #48	; 0x30
 800931a:	4605      	mov	r5, r0
 800931c:	460c      	mov	r4, r1
  phost->id = id;
 800931e:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009328:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800932c:	f7ff fee6 	bl	80090fc <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8009330:	b10c      	cbz	r4, 8009336 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 8009332:	f8c5 43c8 	str.w	r4, [r5, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009336:	4c11      	ldr	r4, [pc, #68]	; (800937c <USBH_Init+0x68>)
 8009338:	ae08      	add	r6, sp, #32
 800933a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800933e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8009342:	2100      	movs	r1, #0
 8009344:	4630      	mov	r0, r6
 8009346:	f000 ff28 	bl	800a19a <osMessageCreate>
 800934a:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800934e:	ae01      	add	r6, sp, #4
 8009350:	3410      	adds	r4, #16
 8009352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009354:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009356:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800935a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800935e:	4629      	mov	r1, r5
 8009360:	a801      	add	r0, sp, #4
 8009362:	f000 fe40 	bl	8009fe6 <osThreadCreate>
 8009366:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
  USBH_LL_Init(phost);
 800936a:	4628      	mov	r0, r5
 800936c:	f003 fdd2 	bl	800cf14 <USBH_LL_Init>
  return USBH_OK;
 8009370:	2000      	movs	r0, #0
}
 8009372:	b00c      	add	sp, #48	; 0x30
 8009374:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8009376:	2002      	movs	r0, #2
}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	0801ba60 	.word	0x0801ba60

08009380 <USBH_RegisterClass>:
  if(pclass != 0)
 8009380:	460a      	mov	r2, r1
 8009382:	b159      	cbz	r1, 800939c <USBH_RegisterClass+0x1c>
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009384:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009388:	b953      	cbnz	r3, 80093a0 <USBH_RegisterClass+0x20>
      phost->pClass[phost->ClassNumber++] = pclass;
 800938a:	1c59      	adds	r1, r3, #1
 800938c:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
 8009390:	33dc      	adds	r3, #220	; 0xdc
 8009392:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009396:	6042      	str	r2, [r0, #4]
      status = USBH_OK;
 8009398:	2000      	movs	r0, #0
 800939a:	4770      	bx	lr
    status = USBH_FAIL;
 800939c:	2002      	movs	r0, #2
 800939e:	4770      	bx	lr
      status = USBH_FAIL;
 80093a0:	2002      	movs	r0, #2
}
 80093a2:	4770      	bx	lr

080093a4 <USBH_SelectInterface>:
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80093a4:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80093a8:	428b      	cmp	r3, r1
 80093aa:	d903      	bls.n	80093b4 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 80093ac:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 80093b0:	2000      	movs	r0, #0
 80093b2:	4770      	bx	lr
    status = USBH_FAIL;
 80093b4:	2002      	movs	r0, #2
}
 80093b6:	4770      	bx	lr

080093b8 <USBH_FindInterface>:
{
 80093b8:	b470      	push	{r4, r5, r6}
 80093ba:	4606      	mov	r6, r0
  uint8_t                        if_ix = 0U;
 80093bc:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093be:	e00a      	b.n	80093d6 <USBH_FindInterface+0x1e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093c0:	241a      	movs	r4, #26
 80093c2:	fb04 6505 	mla	r5, r4, r5, r6
 80093c6:	f895 4345 	ldrb.w	r4, [r5, #837]	; 0x345
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d01a      	beq.n	8009404 <USBH_FindInterface+0x4c>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093ce:	2bff      	cmp	r3, #255	; 0xff
 80093d0:	d018      	beq.n	8009404 <USBH_FindInterface+0x4c>
    if_ix++;
 80093d2:	1c44      	adds	r4, r0, #1
 80093d4:	b2e0      	uxtb	r0, r4
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093d6:	2801      	cmp	r0, #1
 80093d8:	d813      	bhi.n	8009402 <USBH_FindInterface+0x4a>
    pif = &pcfg->Itf_Desc[if_ix];
 80093da:	4605      	mov	r5, r0
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80093dc:	241a      	movs	r4, #26
 80093de:	fb04 6400 	mla	r4, r4, r0, r6
 80093e2:	f894 4343 	ldrb.w	r4, [r4, #835]	; 0x343
 80093e6:	428c      	cmp	r4, r1
 80093e8:	d001      	beq.n	80093ee <USBH_FindInterface+0x36>
 80093ea:	29ff      	cmp	r1, #255	; 0xff
 80093ec:	d1f1      	bne.n	80093d2 <USBH_FindInterface+0x1a>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093ee:	241a      	movs	r4, #26
 80093f0:	fb04 6405 	mla	r4, r4, r5, r6
 80093f4:	f894 4344 	ldrb.w	r4, [r4, #836]	; 0x344
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80093f8:	4294      	cmp	r4, r2
 80093fa:	d0e1      	beq.n	80093c0 <USBH_FindInterface+0x8>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80093fc:	2aff      	cmp	r2, #255	; 0xff
 80093fe:	d1e8      	bne.n	80093d2 <USBH_FindInterface+0x1a>
 8009400:	e7de      	b.n	80093c0 <USBH_FindInterface+0x8>
  return 0xFFU;
 8009402:	20ff      	movs	r0, #255	; 0xff
}
 8009404:	bc70      	pop	{r4, r5, r6}
 8009406:	4770      	bx	lr

08009408 <USBH_Start>:
{
 8009408:	b510      	push	{r4, lr}
 800940a:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 800940c:	f003 fdfa 	bl	800d004 <USBH_LL_Start>
  USBH_LL_DriverVBUS (phost, TRUE);
 8009410:	2101      	movs	r1, #1
 8009412:	4620      	mov	r0, r4
 8009414:	f003 fdc2 	bl	800cf9c <USBH_LL_DriverVBUS>
}
 8009418:	2000      	movs	r0, #0
 800941a:	bd10      	pop	{r4, pc}

0800941c <USBH_LL_SetTimer>:
  phost->Timer = time;
 800941c:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 8009420:	4770      	bx	lr

08009422 <USBH_LL_IncTimer>:
{
 8009422:	b508      	push	{r3, lr}
  phost->Timer ++;
 8009424:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 8009428:	3301      	adds	r3, #1
 800942a:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800942e:	f7ff fe8a 	bl	8009146 <USBH_HandleSof>
}
 8009432:	bd08      	pop	{r3, pc}

08009434 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8009434:	2301      	movs	r3, #1
 8009436:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 800943a:	4770      	bx	lr

0800943c <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 8009442:	4770      	bx	lr

08009444 <USBH_IsPortEnabled>:
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
}
 8009444:	f890 031f 	ldrb.w	r0, [r0, #799]	; 0x31f
 8009448:	4770      	bx	lr

0800944a <USBH_Process>:
{
 800944a:	b530      	push	{r4, r5, lr}
 800944c:	b087      	sub	sp, #28
 800944e:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009450:	2302      	movs	r3, #2
 8009452:	f88d 3017 	strb.w	r3, [sp, #23]
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8009456:	f7ff fff5 	bl	8009444 <USBH_IsPortEnabled>
 800945a:	b938      	cbnz	r0, 800946c <USBH_Process+0x22>
 800945c:	7823      	ldrb	r3, [r4, #0]
 800945e:	b12b      	cbz	r3, 800946c <USBH_Process+0x22>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8009460:	7823      	ldrb	r3, [r4, #0]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b03      	cmp	r3, #3
 8009466:	d001      	beq.n	800946c <USBH_Process+0x22>
      phost->gState = HOST_DEV_DISCONNECTED;
 8009468:	2303      	movs	r3, #3
 800946a:	7023      	strb	r3, [r4, #0]
  switch (phost->gState)
 800946c:	7823      	ldrb	r3, [r4, #0]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b0b      	cmp	r3, #11
 8009472:	d860      	bhi.n	8009536 <USBH_Process+0xec>
 8009474:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009478:	0021000c 	.word	0x0021000c
 800947c:	010d0028 	.word	0x010d0028
 8009480:	0062005f 	.word	0x0062005f
 8009484:	007400e9 	.word	0x007400e9
 8009488:	00970086 	.word	0x00970086
 800948c:	010400b0 	.word	0x010400b0
    if (phost->device.is_connected)
 8009490:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8009494:	2b00      	cmp	r3, #0
 8009496:	d04e      	beq.n	8009536 <USBH_Process+0xec>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009498:	2501      	movs	r5, #1
 800949a:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 800949c:	20c8      	movs	r0, #200	; 0xc8
 800949e:	f003 fda4 	bl	800cfea <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80094a2:	4620      	mov	r0, r4
 80094a4:	f003 fdbe 	bl	800d024 <USBH_LL_ResetPort>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094a8:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094ac:	2200      	movs	r2, #0
 80094ae:	4629      	mov	r1, r5
 80094b0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80094b4:	f000 fe86 	bl	800a1c4 <osMessagePut>
 80094b8:	e03d      	b.n	8009536 <USBH_Process+0xec>
    if (phost->device.PortEnabled == 1U)
 80094ba:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d139      	bne.n	8009536 <USBH_Process+0xec>
      phost->gState = HOST_DEV_ATTACHED;
 80094c2:	2302      	movs	r3, #2
 80094c4:	7023      	strb	r3, [r4, #0]
 80094c6:	e036      	b.n	8009536 <USBH_Process+0xec>
    USBH_Delay(100U);
 80094c8:	2064      	movs	r0, #100	; 0x64
 80094ca:	f003 fd8e 	bl	800cfea <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80094ce:	4620      	mov	r0, r4
 80094d0:	f003 fd4a 	bl	800cf68 <USBH_LL_GetSpeed>
 80094d4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->gState = HOST_ENUMERATION;
 80094d8:	2305      	movs	r3, #5
 80094da:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80094dc:	2100      	movs	r1, #0
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 fce0 	bl	8009ea4 <USBH_AllocPipe>
 80094e4:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80094e6:	2180      	movs	r1, #128	; 0x80
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 fcdb 	bl	8009ea4 <USBH_AllocPipe>
 80094ee:	4601      	mov	r1, r0
 80094f0:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 80094f2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80094f6:	79a2      	ldrb	r2, [r4, #6]
 80094f8:	9202      	str	r2, [sp, #8]
 80094fa:	2500      	movs	r5, #0
 80094fc:	9501      	str	r5, [sp, #4]
 80094fe:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8009502:	9200      	str	r2, [sp, #0]
 8009504:	2280      	movs	r2, #128	; 0x80
 8009506:	4620      	mov	r0, r4
 8009508:	f000 fcb7 	bl	8009e7a <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 800950c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009510:	7961      	ldrb	r1, [r4, #5]
 8009512:	79a2      	ldrb	r2, [r4, #6]
 8009514:	9202      	str	r2, [sp, #8]
 8009516:	9501      	str	r5, [sp, #4]
 8009518:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800951c:	9200      	str	r2, [sp, #0]
 800951e:	462a      	mov	r2, r5
 8009520:	4620      	mov	r0, r4
 8009522:	f000 fcaa 	bl	8009e7a <USBH_OpenPipe>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009526:	2101      	movs	r1, #1
 8009528:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800952c:	462a      	mov	r2, r5
 800952e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009532:	f000 fe47 	bl	800a1c4 <osMessagePut>
}
 8009536:	2000      	movs	r0, #0
 8009538:	b007      	add	sp, #28
 800953a:	bd30      	pop	{r4, r5, pc}
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800953c:	4620      	mov	r0, r4
 800953e:	f7ff fe0f 	bl	8009160 <USBH_HandleEnum>
 8009542:	2800      	cmp	r0, #0
 8009544:	d1f7      	bne.n	8009536 <USBH_Process+0xec>
      phost->device.current_interface = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800954c:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8009550:	2b01      	cmp	r3, #1
 8009552:	d002      	beq.n	800955a <USBH_Process+0x110>
        phost->gState  = HOST_INPUT;
 8009554:	2307      	movs	r3, #7
 8009556:	7023      	strb	r3, [r4, #0]
 8009558:	e7ed      	b.n	8009536 <USBH_Process+0xec>
        phost->gState  = HOST_SET_CONFIGURATION;
 800955a:	2308      	movs	r3, #8
 800955c:	7023      	strb	r3, [r4, #0]
 800955e:	e7ea      	b.n	8009536 <USBH_Process+0xec>
      if(phost->pUser != NULL)
 8009560:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0e6      	beq.n	8009536 <USBH_Process+0xec>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009568:	2101      	movs	r1, #1
 800956a:	4620      	mov	r0, r4
 800956c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800956e:	2308      	movs	r3, #8
 8009570:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009572:	2105      	movs	r1, #5
 8009574:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009578:	2200      	movs	r2, #0
 800957a:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800957e:	f000 fe21 	bl	800a1c4 <osMessagePut>
 8009582:	e7d8      	b.n	8009536 <USBH_Process+0xec>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009584:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fbd3 	bl	8009d34 <USBH_SetCfg>
 800958e:	b908      	cbnz	r0, 8009594 <USBH_Process+0x14a>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8009590:	2309      	movs	r3, #9
 8009592:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009594:	2101      	movs	r1, #1
 8009596:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800959a:	2200      	movs	r2, #0
 800959c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80095a0:	f000 fe10 	bl	800a1c4 <osMessagePut>
    break;
 80095a4:	e7c7      	b.n	8009536 <USBH_Process+0xec>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80095a6:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80095aa:	f013 0f20 	tst.w	r3, #32
 80095ae:	d10a      	bne.n	80095c6 <USBH_Process+0x17c>
      phost->gState  = HOST_CHECK_CLASS;
 80095b0:	230a      	movs	r3, #10
 80095b2:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80095b4:	2101      	movs	r1, #1
 80095b6:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80095c0:	f000 fe00 	bl	800a1c4 <osMessagePut>
    break;
 80095c4:	e7b7      	b.n	8009536 <USBH_Process+0xec>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80095c6:	2101      	movs	r1, #1
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fbc4 	bl	8009d56 <USBH_SetFeature>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d1f0      	bne.n	80095b4 <USBH_Process+0x16a>
        phost->gState  = HOST_CHECK_CLASS;
 80095d2:	230a      	movs	r3, #10
 80095d4:	7023      	strb	r3, [r4, #0]
 80095d6:	e7ed      	b.n	80095b4 <USBH_Process+0x16a>
    if(phost->ClassNumber == 0U)
 80095d8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80095dc:	b18b      	cbz	r3, 8009602 <USBH_Process+0x1b8>
      phost->pActiveClass = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80095e4:	b1b3      	cbz	r3, 8009614 <USBH_Process+0x1ca>
      if(phost->pActiveClass != NULL)
 80095e6:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80095ea:	b35b      	cbz	r3, 8009644 <USBH_Process+0x1fa>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	4620      	mov	r0, r4
 80095f0:	4798      	blx	r3
 80095f2:	bb20      	cbnz	r0, 800963e <USBH_Process+0x1f4>
          phost->gState  = HOST_CLASS_REQUEST;
 80095f4:	2306      	movs	r3, #6
 80095f6:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80095f8:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80095fc:	2103      	movs	r1, #3
 80095fe:	4620      	mov	r0, r4
 8009600:	4798      	blx	r3
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009602:	2105      	movs	r1, #5
 8009604:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009608:	2200      	movs	r2, #0
 800960a:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800960e:	f000 fdd9 	bl	800a1c4 <osMessagePut>
    break;
 8009612:	e790      	b.n	8009536 <USBH_Process+0xec>
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009614:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8009618:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800961c:	6852      	ldr	r2, [r2, #4]
 800961e:	7911      	ldrb	r1, [r2, #4]
 8009620:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8009624:	4291      	cmp	r1, r2
 8009626:	d002      	beq.n	800962e <USBH_Process+0x1e4>
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009628:	3301      	adds	r3, #1
 800962a:	b2db      	uxtb	r3, r3
 800962c:	e7da      	b.n	80095e4 <USBH_Process+0x19a>
          phost->pActiveClass = phost->pClass[idx];
 800962e:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8009632:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009636:	6852      	ldr	r2, [r2, #4]
 8009638:	f8c4 2378 	str.w	r2, [r4, #888]	; 0x378
 800963c:	e7f4      	b.n	8009628 <USBH_Process+0x1de>
          phost->gState  = HOST_ABORT_STATE;
 800963e:	230d      	movs	r3, #13
 8009640:	7023      	strb	r3, [r4, #0]
 8009642:	e7de      	b.n	8009602 <USBH_Process+0x1b8>
        phost->gState  = HOST_ABORT_STATE;
 8009644:	230d      	movs	r3, #13
 8009646:	7023      	strb	r3, [r4, #0]
 8009648:	e7db      	b.n	8009602 <USBH_Process+0x1b8>
    if(phost->pActiveClass != NULL)
 800964a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800964e:	b163      	cbz	r3, 800966a <USBH_Process+0x220>
      status = phost->pActiveClass->Requests(phost);
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	4620      	mov	r0, r4
 8009654:	4798      	blx	r3
 8009656:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800965a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f47f af69 	bne.w	8009536 <USBH_Process+0xec>
        phost->gState  = HOST_CLASS;
 8009664:	230b      	movs	r3, #11
 8009666:	7023      	strb	r3, [r4, #0]
 8009668:	e765      	b.n	8009536 <USBH_Process+0xec>
      phost->gState  = HOST_ABORT_STATE;
 800966a:	230d      	movs	r3, #13
 800966c:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800966e:	2105      	movs	r1, #5
 8009670:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009674:	2200      	movs	r2, #0
 8009676:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800967a:	f000 fda3 	bl	800a1c4 <osMessagePut>
 800967e:	e75a      	b.n	8009536 <USBH_Process+0xec>
    if(phost->pActiveClass != NULL)
 8009680:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8009684:	2b00      	cmp	r3, #0
 8009686:	f43f af56 	beq.w	8009536 <USBH_Process+0xec>
      phost->pActiveClass->BgndProcess(phost);
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	4620      	mov	r0, r4
 800968e:	4798      	blx	r3
 8009690:	e751      	b.n	8009536 <USBH_Process+0xec>
    DeInitStateMachine(phost);
 8009692:	4620      	mov	r0, r4
 8009694:	f7ff fd32 	bl	80090fc <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8009698:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800969c:	2b00      	cmp	r3, #0
 800969e:	f43f af4a 	beq.w	8009536 <USBH_Process+0xec>
      phost->pActiveClass->DeInit(phost);
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	4620      	mov	r0, r4
 80096a6:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 80096ae:	e742      	b.n	8009536 <USBH_Process+0xec>

080096b0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80096b0:	b500      	push	{lr}
 80096b2:	b085      	sub	sp, #20
 80096b4:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80096b6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ba:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 80096be:	a801      	add	r0, sp, #4
 80096c0:	f000 fdb4 	bl	800a22c <osMessageGet>
    if(event.status == osEventMessage)
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	2b10      	cmp	r3, #16
 80096c8:	d1f5      	bne.n	80096b6 <USBH_Process_OS+0x6>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80096ca:	4620      	mov	r0, r4
 80096cc:	f7ff febd 	bl	800944a <USBH_Process>
 80096d0:	e7f1      	b.n	80096b6 <USBH_Process_OS+0x6>

080096d2 <USBH_LL_Connect>:
{
 80096d2:	b510      	push	{r4, lr}
 80096d4:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 80096d6:	7803      	ldrb	r3, [r0, #0]
 80096d8:	b98b      	cbnz	r3, 80096fe <USBH_LL_Connect+0x2c>
    phost->device.is_connected = 1U;
 80096da:	2301      	movs	r3, #1
 80096dc:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80096e0:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 80096e4:	b10b      	cbz	r3, 80096ea <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 80096e6:	2104      	movs	r1, #4
 80096e8:	4798      	blx	r3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096ea:	2101      	movs	r1, #1
 80096ec:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80096f6:	f000 fd65 	bl	800a1c4 <osMessagePut>
}
 80096fa:	2000      	movs	r0, #0
 80096fc:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 80096fe:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8009702:	2b01      	cmp	r3, #1
 8009704:	d1f1      	bne.n	80096ea <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 8009706:	2302      	movs	r3, #2
 8009708:	7003      	strb	r3, [r0, #0]
 800970a:	e7ee      	b.n	80096ea <USBH_LL_Connect+0x18>

0800970c <USBH_LL_Disconnect>:
{
 800970c:	b510      	push	{r4, lr}
 800970e:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 8009710:	f003 fc80 	bl	800d014 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009714:	7921      	ldrb	r1, [r4, #4]
 8009716:	4620      	mov	r0, r4
 8009718:	f000 fbd5 	bl	8009ec6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800971c:	7961      	ldrb	r1, [r4, #5]
 800971e:	4620      	mov	r0, r4
 8009720:	f000 fbd1 	bl	8009ec6 <USBH_FreePipe>
  phost->device.is_connected = 0U;
 8009724:	2300      	movs	r3, #0
 8009726:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 800972a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800972e:	b113      	cbz	r3, 8009736 <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009730:	2105      	movs	r1, #5
 8009732:	4620      	mov	r0, r4
 8009734:	4798      	blx	r3
  USBH_LL_Start(phost);
 8009736:	4620      	mov	r0, r4
 8009738:	f003 fc64 	bl	800d004 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 800973c:	2303      	movs	r3, #3
 800973e:	7023      	strb	r3, [r4, #0]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009740:	2101      	movs	r1, #1
 8009742:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009746:	2200      	movs	r2, #0
 8009748:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800974c:	f000 fd3a 	bl	800a1c4 <osMessagePut>
}
 8009750:	2000      	movs	r0, #0
 8009752:	bd10      	pop	{r4, pc}

08009754 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8009754:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009756:	2101      	movs	r1, #1
 8009758:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800975c:	2200      	movs	r2, #0
 800975e:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8009762:	f000 fd2f 	bl	800a1c4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 8009766:	2000      	movs	r0, #0
 8009768:	bd08      	pop	{r3, pc}

0800976a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800976a:	b410      	push	{r4}
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800976c:	780b      	ldrb	r3, [r1, #0]
 800976e:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009770:	784b      	ldrb	r3, [r1, #1]
 8009772:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009774:	788b      	ldrb	r3, [r1, #2]
 8009776:	78cc      	ldrb	r4, [r1, #3]
 8009778:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800977c:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800977e:	790b      	ldrb	r3, [r1, #4]
 8009780:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009782:	794b      	ldrb	r3, [r1, #5]
 8009784:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8009786:	798b      	ldrb	r3, [r1, #6]
 8009788:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800978a:	79cb      	ldrb	r3, [r1, #7]
 800978c:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 800978e:	2a08      	cmp	r2, #8
 8009790:	d916      	bls.n	80097c0 <USBH_ParseDevDesc+0x56>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009792:	7a0b      	ldrb	r3, [r1, #8]
 8009794:	7a4a      	ldrb	r2, [r1, #9]
 8009796:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800979a:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800979c:	7a8b      	ldrb	r3, [r1, #10]
 800979e:	7aca      	ldrb	r2, [r1, #11]
 80097a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80097a4:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80097a6:	7b0b      	ldrb	r3, [r1, #12]
 80097a8:	7b4a      	ldrb	r2, [r1, #13]
 80097aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80097ae:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80097b0:	7b8b      	ldrb	r3, [r1, #14]
 80097b2:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80097b4:	7bcb      	ldrb	r3, [r1, #15]
 80097b6:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80097b8:	7c0b      	ldrb	r3, [r1, #16]
 80097ba:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80097bc:	7c4b      	ldrb	r3, [r1, #17]
 80097be:	7443      	strb	r3, [r0, #17]
  }
}
 80097c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80097c6:	780b      	ldrb	r3, [r1, #0]
 80097c8:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80097ca:	784b      	ldrb	r3, [r1, #1]
 80097cc:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80097ce:	788b      	ldrb	r3, [r1, #2]
 80097d0:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80097d2:	78cb      	ldrb	r3, [r1, #3]
 80097d4:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80097d6:	790b      	ldrb	r3, [r1, #4]
 80097d8:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80097da:	794b      	ldrb	r3, [r1, #5]
 80097dc:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80097de:	798b      	ldrb	r3, [r1, #6]
 80097e0:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80097e2:	79cb      	ldrb	r3, [r1, #7]
 80097e4:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80097e6:	7a0b      	ldrb	r3, [r1, #8]
 80097e8:	7203      	strb	r3, [r0, #8]
}
 80097ea:	4770      	bx	lr

080097ec <USBH_ParseEPDesc>:
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80097ec:	780b      	ldrb	r3, [r1, #0]
 80097ee:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80097f0:	784b      	ldrb	r3, [r1, #1]
 80097f2:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80097f4:	788b      	ldrb	r3, [r1, #2]
 80097f6:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80097f8:	78cb      	ldrb	r3, [r1, #3]
 80097fa:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80097fc:	790b      	ldrb	r3, [r1, #4]
 80097fe:	794a      	ldrb	r2, [r1, #5]
 8009800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009804:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009806:	798b      	ldrb	r3, [r1, #6]
 8009808:	7183      	strb	r3, [r0, #6]
}
 800980a:	4770      	bx	lr

0800980c <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800980c:	7843      	ldrb	r3, [r0, #1]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d000      	beq.n	8009814 <USBH_ParseStringDesc+0x8>
 8009812:	4770      	bx	lr
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009814:	7803      	ldrb	r3, [r0, #0]
 8009816:	3b02      	subs	r3, #2
 8009818:	429a      	cmp	r2, r3
 800981a:	bf28      	it	cs
 800981c:	461a      	movcs	r2, r3
 800981e:	b292      	uxth	r2, r2

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;

    for (idx = 0U; idx < strlength; idx += 2U)
 8009820:	2300      	movs	r3, #0
 8009822:	4293      	cmp	r3, r2
 8009824:	d20d      	bcs.n	8009842 <USBH_ParseStringDesc+0x36>
{
 8009826:	b410      	push	{r4}
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009828:	18c4      	adds	r4, r0, r3
 800982a:	78a4      	ldrb	r4, [r4, #2]
 800982c:	f801 4b01 	strb.w	r4, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8009830:	3302      	adds	r3, #2
 8009832:	b29b      	uxth	r3, r3
 8009834:	4293      	cmp	r3, r2
 8009836:	d3f7      	bcc.n	8009828 <USBH_ParseStringDesc+0x1c>
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
 8009838:	2300      	movs	r3, #0
 800983a:	700b      	strb	r3, [r1, #0]
  }
}
 800983c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009840:	4770      	bx	lr
    *pdest = 0U; /* mark end of string */
 8009842:	2300      	movs	r3, #0
 8009844:	700b      	strb	r3, [r1, #0]
 8009846:	4770      	bx	lr

08009848 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009848:	b530      	push	{r4, r5, lr}
 800984a:	b083      	sub	sp, #12
 800984c:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800984e:	7e03      	ldrb	r3, [r0, #24]
 8009850:	3b01      	subs	r3, #1
 8009852:	2b0a      	cmp	r3, #10
 8009854:	f200 815d 	bhi.w	8009b12 <USBH_HandleControl+0x2ca>
 8009858:	e8df f013 	tbh	[pc, r3, lsl #1]
 800985c:	0015000b 	.word	0x0015000b
 8009860:	0056004a 	.word	0x0056004a
 8009864:	00920084 	.word	0x00920084
 8009868:	00dc00d0 	.word	0x00dc00d0
 800986c:	0118010a 	.word	0x0118010a
 8009870:	0147      	.short	0x0147
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009872:	7942      	ldrb	r2, [r0, #5]
 8009874:	f100 0110 	add.w	r1, r0, #16
 8009878:	f000 fa90 	bl	8009d9c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800987c:	2302      	movs	r3, #2
 800987e:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009880:	2001      	movs	r0, #1

  default:
    break;
  }
  return status;
}
 8009882:	b003      	add	sp, #12
 8009884:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009886:	7941      	ldrb	r1, [r0, #5]
 8009888:	f003 fb82 	bl	800cf90 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800988c:	2801      	cmp	r0, #1
 800988e:	d005      	beq.n	800989c <USBH_HandleControl+0x54>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009890:	2802      	cmp	r0, #2
 8009892:	bf18      	it	ne
 8009894:	2804      	cmpne	r0, #4
 8009896:	d01f      	beq.n	80098d8 <USBH_HandleControl+0x90>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009898:	2001      	movs	r0, #1
 800989a:	e7f2      	b.n	8009882 <USBH_HandleControl+0x3a>
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800989c:	7c23      	ldrb	r3, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 800989e:	8ae2      	ldrh	r2, [r4, #22]
 80098a0:	b18a      	cbz	r2, 80098c6 <USBH_HandleControl+0x7e>
        if (direction == USB_D2H)
 80098a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098a6:	d10b      	bne.n	80098c0 <USBH_HandleControl+0x78>
          phost->Control.state = CTRL_DATA_OUT;
 80098a8:	2305      	movs	r3, #5
 80098aa:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098ac:	2103      	movs	r1, #3
 80098ae:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80098b8:	f000 fc84 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80098bc:	2001      	movs	r0, #1
 80098be:	e7e0      	b.n	8009882 <USBH_HandleControl+0x3a>
          phost->Control.state = CTRL_DATA_IN;
 80098c0:	2303      	movs	r3, #3
 80098c2:	7623      	strb	r3, [r4, #24]
 80098c4:	e7f2      	b.n	80098ac <USBH_HandleControl+0x64>
        if (direction == USB_D2H)
 80098c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098ca:	d102      	bne.n	80098d2 <USBH_HandleControl+0x8a>
          phost->Control.state = CTRL_STATUS_IN;
 80098cc:	2307      	movs	r3, #7
 80098ce:	7623      	strb	r3, [r4, #24]
 80098d0:	e7ec      	b.n	80098ac <USBH_HandleControl+0x64>
          phost->Control.state = CTRL_STATUS_OUT;
 80098d2:	2309      	movs	r3, #9
 80098d4:	7623      	strb	r3, [r4, #24]
 80098d6:	e7e9      	b.n	80098ac <USBH_HandleControl+0x64>
        phost->Control.state = CTRL_ERROR;
 80098d8:	230b      	movs	r3, #11
 80098da:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098dc:	2103      	movs	r1, #3
 80098de:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80098e8:	f000 fc6c 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80098ec:	2001      	movs	r0, #1
 80098ee:	e7c8      	b.n	8009882 <USBH_HandleControl+0x3a>
    phost->Control.timer = (uint16_t)phost->Timer;
 80098f0:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 80098f4:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 80098f6:	7903      	ldrb	r3, [r0, #4]
 80098f8:	8982      	ldrh	r2, [r0, #12]
 80098fa:	6881      	ldr	r1, [r0, #8]
 80098fc:	f000 fa75 	bl	8009dea <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009900:	2304      	movs	r3, #4
 8009902:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009904:	2001      	movs	r0, #1
    break;
 8009906:	e7bc      	b.n	8009882 <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009908:	7901      	ldrb	r1, [r0, #4]
 800990a:	f003 fb41 	bl	800cf90 <USBH_LL_GetURBState>
 800990e:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 8009910:	2801      	cmp	r0, #1
 8009912:	d005      	beq.n	8009920 <USBH_HandleControl+0xd8>
    if  (URB_Status == USBH_URB_STALL)
 8009914:	2d05      	cmp	r5, #5
 8009916:	d00e      	beq.n	8009936 <USBH_HandleControl+0xee>
      if (URB_Status == USBH_URB_ERROR)
 8009918:	2d04      	cmp	r5, #4
 800991a:	d017      	beq.n	800994c <USBH_HandleControl+0x104>
  USBH_StatusTypeDef status = USBH_BUSY;
 800991c:	2001      	movs	r0, #1
 800991e:	e7b0      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STATUS_OUT;
 8009920:	2309      	movs	r3, #9
 8009922:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009924:	2103      	movs	r1, #3
 8009926:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800992a:	2200      	movs	r2, #0
 800992c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009930:	f000 fc48 	bl	800a1c4 <osMessagePut>
 8009934:	e7ee      	b.n	8009914 <USBH_HandleControl+0xcc>
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009936:	2503      	movs	r5, #3
 8009938:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800993c:	2200      	movs	r2, #0
 800993e:	4629      	mov	r1, r5
 8009940:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009944:	f000 fc3e 	bl	800a1c4 <osMessagePut>
      status = USBH_NOT_SUPPORTED;
 8009948:	4628      	mov	r0, r5
 800994a:	e79a      	b.n	8009882 <USBH_HandleControl+0x3a>
        phost->Control.state = CTRL_ERROR;
 800994c:	230b      	movs	r3, #11
 800994e:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009950:	2103      	movs	r1, #3
 8009952:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009956:	2200      	movs	r2, #0
 8009958:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800995c:	f000 fc32 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009960:	2001      	movs	r0, #1
 8009962:	e78e      	b.n	8009882 <USBH_HandleControl+0x3a>
    USBH_CtlSendData (phost,
 8009964:	7943      	ldrb	r3, [r0, #5]
 8009966:	8982      	ldrh	r2, [r0, #12]
 8009968:	2501      	movs	r5, #1
 800996a:	9500      	str	r5, [sp, #0]
 800996c:	6881      	ldr	r1, [r0, #8]
 800996e:	f000 fa26 	bl	8009dbe <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8009972:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8009976:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009978:	2306      	movs	r3, #6
 800997a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800997c:	4628      	mov	r0, r5
    break;
 800997e:	e780      	b.n	8009882 <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009980:	7941      	ldrb	r1, [r0, #5]
 8009982:	f003 fb05 	bl	800cf90 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009986:	2801      	cmp	r0, #1
 8009988:	d007      	beq.n	800999a <USBH_HandleControl+0x152>
    else if  (URB_Status == USBH_URB_STALL)
 800998a:	2805      	cmp	r0, #5
 800998c:	d011      	beq.n	80099b2 <USBH_HandleControl+0x16a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800998e:	2802      	cmp	r0, #2
 8009990:	d01c      	beq.n	80099cc <USBH_HandleControl+0x184>
      if (URB_Status == USBH_URB_ERROR)
 8009992:	2804      	cmp	r0, #4
 8009994:	d026      	beq.n	80099e4 <USBH_HandleControl+0x19c>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009996:	2001      	movs	r0, #1
 8009998:	e773      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STATUS_IN;
 800999a:	2307      	movs	r3, #7
 800999c:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800999e:	2103      	movs	r1, #3
 80099a0:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80099aa:	f000 fc0b 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80099ae:	2001      	movs	r0, #1
 80099b0:	e767      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STALLED;
 80099b2:	230c      	movs	r3, #12
 80099b4:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80099b6:	2503      	movs	r5, #3
 80099b8:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099bc:	2200      	movs	r2, #0
 80099be:	4629      	mov	r1, r5
 80099c0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80099c4:	f000 fbfe 	bl	800a1c4 <osMessagePut>
      status = USBH_NOT_SUPPORTED;
 80099c8:	4628      	mov	r0, r5
 80099ca:	e75a      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_DATA_OUT;
 80099cc:	2305      	movs	r3, #5
 80099ce:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80099d0:	2103      	movs	r1, #3
 80099d2:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80099dc:	f000 fbf2 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80099e0:	2001      	movs	r0, #1
 80099e2:	e74e      	b.n	8009882 <USBH_HandleControl+0x3a>
        phost->Control.state = CTRL_ERROR;
 80099e4:	230b      	movs	r3, #11
 80099e6:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80099e8:	2103      	movs	r1, #3
 80099ea:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80099f4:	f000 fbe6 	bl	800a1c4 <osMessagePut>
        status = USBH_FAIL;
 80099f8:	2002      	movs	r0, #2
 80099fa:	e742      	b.n	8009882 <USBH_HandleControl+0x3a>
    USBH_CtlReceiveData (phost,
 80099fc:	7903      	ldrb	r3, [r0, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	4611      	mov	r1, r2
 8009a02:	f000 f9f2 	bl	8009dea <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009a06:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8009a0a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a10:	2001      	movs	r0, #1
    break;
 8009a12:	e736      	b.n	8009882 <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009a14:	7901      	ldrb	r1, [r0, #4]
 8009a16:	f003 fabb 	bl	800cf90 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8009a1a:	2801      	cmp	r0, #1
 8009a1c:	d005      	beq.n	8009a2a <USBH_HandleControl+0x1e2>
    else if (URB_Status == USBH_URB_ERROR)
 8009a1e:	2804      	cmp	r0, #4
 8009a20:	d00f      	beq.n	8009a42 <USBH_HandleControl+0x1fa>
      if(URB_Status == USBH_URB_STALL)
 8009a22:	2805      	cmp	r0, #5
 8009a24:	d019      	beq.n	8009a5a <USBH_HandleControl+0x212>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a26:	2001      	movs	r0, #1
 8009a28:	e72b      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_COMPLETE;
 8009a2a:	230d      	movs	r3, #13
 8009a2c:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a2e:	2103      	movs	r1, #3
 8009a30:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009a3a:	f000 fbc3 	bl	800a1c4 <osMessagePut>
      status = USBH_OK;
 8009a3e:	2000      	movs	r0, #0
 8009a40:	e71f      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_ERROR;
 8009a42:	230b      	movs	r3, #11
 8009a44:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a46:	2103      	movs	r1, #3
 8009a48:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009a52:	f000 fbb7 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a56:	2001      	movs	r0, #1
 8009a58:	e713      	b.n	8009882 <USBH_HandleControl+0x3a>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a5a:	2503      	movs	r5, #3
 8009a5c:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a60:	2200      	movs	r2, #0
 8009a62:	4629      	mov	r1, r5
 8009a64:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009a68:	f000 fbac 	bl	800a1c4 <osMessagePut>
        status = USBH_NOT_SUPPORTED;
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	e708      	b.n	8009882 <USBH_HandleControl+0x3a>
    USBH_CtlSendData (phost,
 8009a70:	7943      	ldrb	r3, [r0, #5]
 8009a72:	2501      	movs	r5, #1
 8009a74:	9500      	str	r5, [sp, #0]
 8009a76:	2200      	movs	r2, #0
 8009a78:	4611      	mov	r1, r2
 8009a7a:	f000 f9a0 	bl	8009dbe <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8009a7e:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8009a82:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a84:	230a      	movs	r3, #10
 8009a86:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a88:	4628      	mov	r0, r5
    break;
 8009a8a:	e6fa      	b.n	8009882 <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009a8c:	7941      	ldrb	r1, [r0, #5]
 8009a8e:	f003 fa7f 	bl	800cf90 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009a92:	2801      	cmp	r0, #1
 8009a94:	d005      	beq.n	8009aa2 <USBH_HandleControl+0x25a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009a96:	2802      	cmp	r0, #2
 8009a98:	d00f      	beq.n	8009aba <USBH_HandleControl+0x272>
      if (URB_Status == USBH_URB_ERROR)
 8009a9a:	2804      	cmp	r0, #4
 8009a9c:	d019      	beq.n	8009ad2 <USBH_HandleControl+0x28a>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	e6ef      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_COMPLETE;
 8009aa2:	230d      	movs	r3, #13
 8009aa4:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009aa6:	2103      	movs	r1, #3
 8009aa8:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009aac:	2200      	movs	r2, #0
 8009aae:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009ab2:	f000 fb87 	bl	800a1c4 <osMessagePut>
      status = USBH_OK;
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	e6e3      	b.n	8009882 <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STATUS_OUT;
 8009aba:	2309      	movs	r3, #9
 8009abc:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009abe:	2103      	movs	r1, #3
 8009ac0:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009aca:	f000 fb7b 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ace:	2001      	movs	r0, #1
 8009ad0:	e6d7      	b.n	8009882 <USBH_HandleControl+0x3a>
        phost->Control.state = CTRL_ERROR;
 8009ad2:	230b      	movs	r3, #11
 8009ad4:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ad6:	2103      	movs	r1, #3
 8009ad8:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009adc:	2200      	movs	r2, #0
 8009ade:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009ae2:	f000 fb6f 	bl	800a1c4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e6cb      	b.n	8009882 <USBH_HandleControl+0x3a>
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009aea:	7e43      	ldrb	r3, [r0, #25]
 8009aec:	3301      	adds	r3, #1
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	7643      	strb	r3, [r0, #25]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d907      	bls.n	8009b06 <USBH_HandleControl+0x2be>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009af6:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8009afa:	2106      	movs	r1, #6
 8009afc:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	7663      	strb	r3, [r4, #25]
      status = USBH_FAIL;
 8009b02:	2002      	movs	r0, #2
 8009b04:	e6bd      	b.n	8009882 <USBH_HandleControl+0x3a>
      USBH_LL_Stop(phost);
 8009b06:	f003 fa85 	bl	800d014 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8009b0e:	70a0      	strb	r0, [r4, #2]
 8009b10:	e6b7      	b.n	8009882 <USBH_HandleControl+0x3a>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b12:	2001      	movs	r0, #1
 8009b14:	e6b5      	b.n	8009882 <USBH_HandleControl+0x3a>

08009b16 <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009b16:	7803      	ldrb	r3, [r0, #0]
 8009b18:	880a      	ldrh	r2, [r1, #0]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	800b      	strh	r3, [r1, #0]
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b1e:	7803      	ldrb	r3, [r0, #0]
}
 8009b20:	4418      	add	r0, r3
 8009b22:	4770      	bx	lr

08009b24 <USBH_ParseCfgDesc>:
{
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	b082      	sub	sp, #8
 8009b2a:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8009b2c:	780b      	ldrb	r3, [r1, #0]
 8009b2e:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8009b30:	784b      	ldrb	r3, [r1, #1]
 8009b32:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8009b34:	788b      	ldrb	r3, [r1, #2]
 8009b36:	78c9      	ldrb	r1, [r1, #3]
 8009b38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009b3c:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8009b3e:	7923      	ldrb	r3, [r4, #4]
 8009b40:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8009b42:	7963      	ldrb	r3, [r4, #5]
 8009b44:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8009b46:	79a3      	ldrb	r3, [r4, #6]
 8009b48:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8009b4a:	79e3      	ldrb	r3, [r4, #7]
 8009b4c:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8009b4e:	7a23      	ldrb	r3, [r4, #8]
 8009b50:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009b52:	2a09      	cmp	r2, #9
 8009b54:	d944      	bls.n	8009be0 <USBH_ParseCfgDesc+0xbc>
 8009b56:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 8009b58:	2309      	movs	r3, #9
 8009b5a:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8009b5e:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b60:	2e01      	cmp	r6, #1
 8009b62:	d83d      	bhi.n	8009be0 <USBH_ParseCfgDesc+0xbc>
 8009b64:	886a      	ldrh	r2, [r5, #2]
 8009b66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d938      	bls.n	8009be0 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009b6e:	f10d 0106 	add.w	r1, sp, #6
 8009b72:	4620      	mov	r0, r4
 8009b74:	f7ff ffcf 	bl	8009b16 <USBH_GetNextDesc>
 8009b78:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009b7a:	7843      	ldrb	r3, [r0, #1]
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d1ef      	bne.n	8009b60 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009b80:	46b0      	mov	r8, r6
 8009b82:	201a      	movs	r0, #26
 8009b84:	fb00 f006 	mul.w	r0, r0, r6
 8009b88:	3008      	adds	r0, #8
 8009b8a:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	3002      	adds	r0, #2
 8009b90:	f7ff fe19 	bl	80097c6 <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8009b94:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b96:	231a      	movs	r3, #26
 8009b98:	fb03 5308 	mla	r3, r3, r8, r5
 8009b9c:	7b9b      	ldrb	r3, [r3, #14]
 8009b9e:	42bb      	cmp	r3, r7
 8009ba0:	d91b      	bls.n	8009bda <USBH_ParseCfgDesc+0xb6>
 8009ba2:	886a      	ldrh	r2, [r5, #2]
 8009ba4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d916      	bls.n	8009bda <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8009bac:	f10d 0106 	add.w	r1, sp, #6
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f7ff ffb0 	bl	8009b16 <USBH_GetNextDesc>
 8009bb6:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009bb8:	7843      	ldrb	r3, [r0, #1]
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d1eb      	bne.n	8009b96 <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009bbe:	3701      	adds	r7, #1
 8009bc0:	201a      	movs	r0, #26
 8009bc2:	fb00 f008 	mul.w	r0, r0, r8
 8009bc6:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8009bca:	3008      	adds	r0, #8
 8009bcc:	4428      	add	r0, r5
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8009bce:	4621      	mov	r1, r4
 8009bd0:	3004      	adds	r0, #4
 8009bd2:	f7ff fe0b 	bl	80097ec <USBH_ParseEPDesc>
            ep_ix++;
 8009bd6:	b2ff      	uxtb	r7, r7
 8009bd8:	e7dd      	b.n	8009b96 <USBH_ParseCfgDesc+0x72>
        if_ix++;
 8009bda:	3601      	adds	r6, #1
 8009bdc:	b2f6      	uxtb	r6, r6
 8009bde:	e7bf      	b.n	8009b60 <USBH_ParseCfgDesc+0x3c>
}
 8009be0:	b002      	add	sp, #8
 8009be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009be6 <USBH_CtlReq>:
{
 8009be6:	b538      	push	{r3, r4, r5, lr}
 8009be8:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8009bea:	7883      	ldrb	r3, [r0, #2]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d003      	beq.n	8009bf8 <USBH_CtlReq+0x12>
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d011      	beq.n	8009c18 <USBH_CtlReq+0x32>
  status = USBH_BUSY;
 8009bf4:	2501      	movs	r5, #1
 8009bf6:	e00d      	b.n	8009c14 <USBH_CtlReq+0x2e>
    phost->Control.buff = buff;
 8009bf8:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8009bfa:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 8009bfc:	2501      	movs	r5, #1
 8009bfe:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8009c00:	2302      	movs	r3, #2
 8009c02:	7083      	strb	r3, [r0, #2]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009c04:	2103      	movs	r1, #3
 8009c06:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8009c10:	f000 fad8 	bl	800a1c4 <osMessagePut>
}
 8009c14:	4628      	mov	r0, r5
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
    status = USBH_HandleControl(phost);
 8009c18:	f7ff fe16 	bl	8009848 <USBH_HandleControl>
    if (status == USBH_OK)
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	b130      	cbz	r0, 8009c2e <USBH_CtlReq+0x48>
    else if (status == USBH_NOT_SUPPORTED)
 8009c20:	2803      	cmp	r0, #3
 8009c22:	d009      	beq.n	8009c38 <USBH_CtlReq+0x52>
      if (status == USBH_FAIL)
 8009c24:	2802      	cmp	r0, #2
 8009c26:	d1f5      	bne.n	8009c14 <USBH_CtlReq+0x2e>
        phost->RequestState = CMD_SEND;
 8009c28:	2201      	movs	r2, #1
 8009c2a:	70a2      	strb	r2, [r4, #2]
 8009c2c:	e7f2      	b.n	8009c14 <USBH_CtlReq+0x2e>
      phost->RequestState = CMD_SEND;
 8009c2e:	2201      	movs	r2, #1
 8009c30:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8009c32:	2200      	movs	r2, #0
 8009c34:	7622      	strb	r2, [r4, #24]
 8009c36:	e7ed      	b.n	8009c14 <USBH_CtlReq+0x2e>
      phost->RequestState = CMD_SEND;
 8009c38:	2201      	movs	r2, #1
 8009c3a:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	7622      	strb	r2, [r4, #24]
 8009c40:	e7e8      	b.n	8009c14 <USBH_CtlReq+0x2e>

08009c42 <USBH_GetDescriptor>:
{
 8009c42:	b538      	push	{r3, r4, r5, lr}
 8009c44:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if(phost->RequestState == CMD_SEND)
 8009c48:	7884      	ldrb	r4, [r0, #2]
 8009c4a:	2c01      	cmp	r4, #1
 8009c4c:	d004      	beq.n	8009c58 <USBH_GetDescriptor+0x16>
  return USBH_CtlReq(phost, buff, length);
 8009c4e:	462a      	mov	r2, r5
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7ff ffc8 	bl	8009be6 <USBH_CtlReq>
}
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009c58:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8009c5c:	7404      	strb	r4, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009c5e:	2106      	movs	r1, #6
 8009c60:	7441      	strb	r1, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009c62:	8242      	strh	r2, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009c64:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8009c68:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8009c6c:	d003      	beq.n	8009c76 <USBH_GetDescriptor+0x34>
      phost->Control.setup.b.wIndex.w = 0U;
 8009c6e:	2200      	movs	r2, #0
 8009c70:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8009c72:	82c5      	strh	r5, [r0, #22]
 8009c74:	e7eb      	b.n	8009c4e <USBH_GetDescriptor+0xc>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009c76:	f240 4209 	movw	r2, #1033	; 0x409
 8009c7a:	8282      	strh	r2, [r0, #20]
 8009c7c:	e7f9      	b.n	8009c72 <USBH_GetDescriptor+0x30>

08009c7e <USBH_Get_DevDesc>:
{
 8009c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c80:	b083      	sub	sp, #12
 8009c82:	4604      	mov	r4, r0
                                  phost->device.Data,
 8009c84:	f500 758e 	add.w	r5, r0, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009c88:	460e      	mov	r6, r1
 8009c8a:	9100      	str	r1, [sp, #0]
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c92:	2100      	movs	r1, #0
 8009c94:	f7ff ffd5 	bl	8009c42 <USBH_GetDescriptor>
 8009c98:	4607      	mov	r7, r0
 8009c9a:	b110      	cbz	r0, 8009ca2 <USBH_Get_DevDesc+0x24>
}
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	b003      	add	sp, #12
 8009ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009ca2:	4632      	mov	r2, r6
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f204 3022 	addw	r0, r4, #802	; 0x322
 8009caa:	f7ff fd5e 	bl	800976a <USBH_ParseDevDesc>
 8009cae:	e7f5      	b.n	8009c9c <USBH_Get_DevDesc+0x1e>

08009cb0 <USBH_Get_CfgDesc>:
{
 8009cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	460e      	mov	r6, r1
  pData = phost->device.CfgDesc_Raw;
 8009cb8:	f100 051c 	add.w	r5, r0, #28
  if((status = USBH_GetDescriptor(phost,
 8009cbc:	9100      	str	r1, [sp, #0]
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	f7ff ffbc 	bl	8009c42 <USBH_GetDescriptor>
 8009cca:	4607      	mov	r7, r0
 8009ccc:	b110      	cbz	r0, 8009cd4 <USBH_Get_CfgDesc+0x24>
}
 8009cce:	4638      	mov	r0, r7
 8009cd0:	b003      	add	sp, #12
 8009cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f504 704d 	add.w	r0, r4, #820	; 0x334
 8009cdc:	f7ff ff22 	bl	8009b24 <USBH_ParseCfgDesc>
 8009ce0:	e7f5      	b.n	8009cce <USBH_Get_CfgDesc+0x1e>

08009ce2 <USBH_Get_StringDesc>:
{
 8009ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	4617      	mov	r7, r2
 8009ce8:	461d      	mov	r5, r3
                                  phost->device.Data,
 8009cea:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	f7ff ffa3 	bl	8009c42 <USBH_GetDescriptor>
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	b110      	cbz	r0, 8009d06 <USBH_Get_StringDesc+0x24>
}
 8009d00:	4630      	mov	r0, r6
 8009d02:	b003      	add	sp, #12
 8009d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009d06:	462a      	mov	r2, r5
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff fd7e 	bl	800980c <USBH_ParseStringDesc>
 8009d10:	e7f6      	b.n	8009d00 <USBH_Get_StringDesc+0x1e>

08009d12 <USBH_SetAddress>:
{
 8009d12:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8009d14:	7883      	ldrb	r3, [r0, #2]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d004      	beq.n	8009d24 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	f7ff ff62 	bl	8009be6 <USBH_CtlReq>
}
 8009d22:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009d24:	2300      	movs	r3, #0
 8009d26:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009d28:	2205      	movs	r2, #5
 8009d2a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009d2c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d2e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d30:	82c3      	strh	r3, [r0, #22]
 8009d32:	e7f2      	b.n	8009d1a <USBH_SetAddress+0x8>

08009d34 <USBH_SetCfg>:
{
 8009d34:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8009d36:	7883      	ldrb	r3, [r0, #2]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d004      	beq.n	8009d46 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U , 0U);
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4611      	mov	r1, r2
 8009d40:	f7ff ff51 	bl	8009be6 <USBH_CtlReq>
}
 8009d44:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d46:	2300      	movs	r3, #0
 8009d48:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009d4a:	2209      	movs	r2, #9
 8009d4c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009d4e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d50:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d52:	82c3      	strh	r3, [r0, #22]
 8009d54:	e7f2      	b.n	8009d3c <USBH_SetCfg+0x8>

08009d56 <USBH_SetFeature>:
{
 8009d56:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8009d58:	7883      	ldrb	r3, [r0, #2]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d004      	beq.n	8009d68 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4611      	mov	r1, r2
 8009d62:	f7ff ff40 	bl	8009be6 <USBH_CtlReq>
}
 8009d66:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d68:	2300      	movs	r3, #0
 8009d6a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009d6c:	2203      	movs	r2, #3
 8009d6e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009d70:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d72:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d74:	82c3      	strh	r3, [r0, #22]
 8009d76:	e7f2      	b.n	8009d5e <USBH_SetFeature+0x8>

08009d78 <USBH_ClrFeature>:
{
 8009d78:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8009d7a:	7883      	ldrb	r3, [r0, #2]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d004      	beq.n	8009d8a <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U , 0U);
 8009d80:	2200      	movs	r2, #0
 8009d82:	4611      	mov	r1, r2
 8009d84:	f7ff ff2f 	bl	8009be6 <USBH_CtlReq>
}
 8009d88:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009d92:	2300      	movs	r3, #0
 8009d94:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009d96:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d98:	82c3      	strh	r3, [r0, #22]
 8009d9a:	e7f1      	b.n	8009d80 <USBH_ClrFeature+0x8>

08009d9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8009d9c:	b530      	push	{r4, r5, lr}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	4615      	mov	r5, r2

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009da2:	2400      	movs	r4, #0
 8009da4:	9403      	str	r4, [sp, #12]
 8009da6:	2308      	movs	r3, #8
 8009da8:	9302      	str	r3, [sp, #8]
 8009daa:	9101      	str	r1, [sp, #4]
 8009dac:	9400      	str	r4, [sp, #0]
 8009dae:	4623      	mov	r3, r4
 8009db0:	4622      	mov	r2, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f003 f959 	bl	800d06a <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8009db8:	4620      	mov	r0, r4
 8009dba:	b005      	add	sp, #20
 8009dbc:	bd30      	pop	{r4, r5, pc}

08009dbe <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009dbe:	b530      	push	{r4, r5, lr}
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009dca:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8009dce:	b105      	cbz	r5, 8009dd2 <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8009dd0:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009dd2:	9303      	str	r3, [sp, #12]
 8009dd4:	9202      	str	r2, [sp, #8]
 8009dd6:	9401      	str	r4, [sp, #4]
 8009dd8:	2301      	movs	r3, #1
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	461a      	mov	r2, r3
 8009de0:	f003 f943 	bl	800d06a <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8009de4:	2000      	movs	r0, #0
 8009de6:	b005      	add	sp, #20
 8009de8:	bd30      	pop	{r4, r5, pc}

08009dea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009dea:	b530      	push	{r4, r5, lr}
 8009dec:	b085      	sub	sp, #20
 8009dee:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009df0:	2400      	movs	r4, #0
 8009df2:	9403      	str	r4, [sp, #12]
 8009df4:	9202      	str	r2, [sp, #8]
 8009df6:	9101      	str	r1, [sp, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	9200      	str	r2, [sp, #0]
 8009dfc:	4623      	mov	r3, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	f003 f933 	bl	800d06a <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8009e04:	4620      	mov	r0, r4
 8009e06:	b005      	add	sp, #20
 8009e08:	bd30      	pop	{r4, r5, pc}

08009e0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8009e0a:	b530      	push	{r4, r5, lr}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	460c      	mov	r4, r1
 8009e10:	4619      	mov	r1, r3
 8009e12:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009e16:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8009e1a:	b105      	cbz	r5, 8009e1e <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 8009e1c:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009e1e:	9303      	str	r3, [sp, #12]
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	9401      	str	r4, [sp, #4]
 8009e24:	2301      	movs	r3, #1
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f003 f91d 	bl	800d06a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8009e30:	2000      	movs	r0, #0
 8009e32:	b005      	add	sp, #20
 8009e34:	bd30      	pop	{r4, r5, pc}

08009e36 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009e36:	b530      	push	{r4, r5, lr}
 8009e38:	b085      	sub	sp, #20
 8009e3a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009e3c:	2400      	movs	r4, #0
 8009e3e:	9403      	str	r4, [sp, #12]
 8009e40:	9202      	str	r2, [sp, #8]
 8009e42:	9101      	str	r1, [sp, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	9200      	str	r2, [sp, #0]
 8009e48:	2302      	movs	r3, #2
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	f003 f90d 	bl	800d06a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8009e50:	4620      	mov	r0, r4
 8009e52:	b005      	add	sp, #20
 8009e54:	bd30      	pop	{r4, r5, pc}

08009e56 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b0a      	cmp	r3, #10
 8009e5a:	d80b      	bhi.n	8009e74 <USBH_GetFreePipe+0x1e>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009e5c:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8009e60:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009e64:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009e68:	d002      	beq.n	8009e70 <USBH_GetFreePipe+0x1a>
  for (idx = 0U ; idx < 11U ; idx++)
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	e7f3      	b.n	8009e58 <USBH_GetFreePipe+0x2>
	{
	   return (uint16_t)idx;
 8009e70:	b298      	uxth	r0, r3
 8009e72:	4770      	bx	lr
	}
  }
  return 0xFFFFU;
 8009e74:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8009e78:	4770      	bx	lr

08009e7a <USBH_OpenPipe>:
{
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost,
 8009e7e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009e82:	9402      	str	r4, [sp, #8]
 8009e84:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8009e88:	9401      	str	r4, [sp, #4]
 8009e8a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009e8e:	9400      	str	r4, [sp, #0]
 8009e90:	f003 f8d0 	bl	800d034 <USBH_LL_OpenPipe>
}
 8009e94:	2000      	movs	r0, #0
 8009e96:	b004      	add	sp, #16
 8009e98:	bd10      	pop	{r4, pc}

08009e9a <USBH_ClosePipe>:
{
 8009e9a:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8009e9c:	f003 f8dd 	bl	800d05a <USBH_LL_ClosePipe>
}
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	bd08      	pop	{r3, pc}

08009ea4 <USBH_AllocPipe>:
{
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	460c      	mov	r4, r1
  pipe =  USBH_GetFreePipe(phost);
 8009eaa:	f7ff ffd4 	bl	8009e56 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8009eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009eb2:	4298      	cmp	r0, r3
 8009eb4:	d005      	beq.n	8009ec2 <USBH_AllocPipe+0x1e>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009eb6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8009eba:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8009ebe:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 8009ec2:	b2c0      	uxtb	r0, r0
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}

08009ec6 <USBH_FreePipe>:
   if(idx < 11U)
 8009ec6:	290a      	cmp	r1, #10
 8009ec8:	d806      	bhi.n	8009ed8 <USBH_FreePipe+0x12>
	 phost->Pipes[idx] &= 0x7FFFU;
 8009eca:	31e0      	adds	r1, #224	; 0xe0
 8009ecc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8009ed0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009ed4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8009ed8:	2000      	movs	r0, #0
 8009eda:	4770      	bx	lr

08009edc <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 8009edc:	b508      	push	{r3, lr}
  return ((int) osKernelSysTick());
 8009ede:	f000 f878 	bl	8009fd2 <osKernelSysTick>
}
 8009ee2:	bd08      	pop	{r3, pc}

08009ee4 <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 8009ee4:	b508      	push	{r3, lr}
  osDelay( ms );
 8009ee6:	f000 f8b8 	bl	800a05a <osDelay>
}
 8009eea:	bd08      	pop	{r3, pc}

08009eec <GUI_X_Init>:
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
}
 8009eec:	4770      	bx	lr
	...

08009ef0 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	b084      	sub	sp, #16
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 8009ef4:	2400      	movs	r4, #0
 8009ef6:	9402      	str	r4, [sp, #8]
 8009ef8:	9403      	str	r4, [sp, #12]
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 8009efa:	a802      	add	r0, sp, #8
 8009efc:	f000 f8b6 	bl	800a06c <osMutexCreate>
 8009f00:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <GUI_X_InitOS+0x28>)
 8009f02:	6018      	str	r0, [r3, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 8009f04:	9400      	str	r4, [sp, #0]
 8009f06:	9401      	str	r4, [sp, #4]
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 8009f08:	2101      	movs	r1, #1
 8009f0a:	4668      	mov	r0, sp
 8009f0c:	f000 f920 	bl	800a150 <osSemaphoreCreate>
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <GUI_X_InitOS+0x2c>)
 8009f12:	6018      	str	r0, [r3, #0]
}
 8009f14:	b004      	add	sp, #16
 8009f16:	bd10      	pop	{r4, pc}
 8009f18:	20001cd8 	.word	0x20001cd8
 8009f1c:	20001cdc 	.word	0x20001cdc

08009f20 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 8009f20:	b508      	push	{r3, lr}
  osMutexRelease(osMutex);
 8009f22:	4b02      	ldr	r3, [pc, #8]	; (8009f2c <GUI_X_Unlock+0xc>)
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f000 f8e5 	bl	800a0f4 <osMutexRelease>
}
 8009f2a:	bd08      	pop	{r3, pc}
 8009f2c:	20001cd8 	.word	0x20001cd8

08009f30 <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 8009f30:	b508      	push	{r3, lr}
  osMutexWait(osMutex , osWaitForever) ;
 8009f32:	f04f 31ff 	mov.w	r1, #4294967295
 8009f36:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <GUI_X_Lock+0x10>)
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	f000 f8a3 	bl	800a084 <osMutexWait>
}
 8009f3e:	bd08      	pop	{r3, pc}
 8009f40:	20001cd8 	.word	0x20001cd8

08009f44 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 8009f44:	b508      	push	{r3, lr}
  return ((U32) osThreadGetId());
 8009f46:	f000 f884 	bl	800a052 <osThreadGetId>
}
 8009f4a:	bd08      	pop	{r3, pc}

08009f4c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009f4c:	4b10      	ldr	r3, [pc, #64]	; (8009f90 <FATFS_LinkDriverEx+0x44>)
 8009f4e:	7a5b      	ldrb	r3, [r3, #9]
 8009f50:	b9db      	cbnz	r3, 8009f8a <FATFS_LinkDriverEx+0x3e>
{
 8009f52:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f54:	4b0e      	ldr	r3, [pc, #56]	; (8009f90 <FATFS_LinkDriverEx+0x44>)
 8009f56:	7a5d      	ldrb	r5, [r3, #9]
 8009f58:	b2ed      	uxtb	r5, r5
 8009f5a:	2400      	movs	r4, #0
 8009f5c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009f5e:	7a5d      	ldrb	r5, [r3, #9]
 8009f60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009f64:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009f66:	7a58      	ldrb	r0, [r3, #9]
 8009f68:	4418      	add	r0, r3
 8009f6a:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009f6c:	7a5a      	ldrb	r2, [r3, #9]
 8009f6e:	b2d2      	uxtb	r2, r2
 8009f70:	1c50      	adds	r0, r2, #1
 8009f72:	b2c0      	uxtb	r0, r0
 8009f74:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 8009f76:	3230      	adds	r2, #48	; 0x30
 8009f78:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8009f7a:	233a      	movs	r3, #58	; 0x3a
 8009f7c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009f7e:	232f      	movs	r3, #47	; 0x2f
 8009f80:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009f82:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 8009f84:	4620      	mov	r0, r4
  }

  return ret;
}
 8009f86:	bc30      	pop	{r4, r5}
 8009f88:	4770      	bx	lr
  uint8_t ret = 1;
 8009f8a:	2001      	movs	r0, #1
}
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20001ce0 	.word	0x20001ce0

08009f94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f94:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f96:	2200      	movs	r2, #0
 8009f98:	f7ff ffd8 	bl	8009f4c <FATFS_LinkDriverEx>
}
 8009f9c:	bd08      	pop	{r3, pc}

08009f9e <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8009f9e:	2884      	cmp	r0, #132	; 0x84
 8009fa0:	d001      	beq.n	8009fa6 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8009fa2:	3003      	adds	r0, #3
 8009fa4:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009fa6:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8009fa8:	4770      	bx	lr

08009faa <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009faa:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8009fae:	3000      	adds	r0, #0
 8009fb0:	bf18      	it	ne
 8009fb2:	2001      	movne	r0, #1
 8009fb4:	4770      	bx	lr

08009fb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009fb6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8009fb8:	f001 f8ea 	bl	800b190 <vTaskStartScheduler>
  
  return osOK;
}
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	bd08      	pop	{r3, pc}

08009fc0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8009fc0:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8009fc2:	f001 fb71 	bl	800b6a8 <xTaskGetSchedulerState>
 8009fc6:	2801      	cmp	r0, #1
 8009fc8:	d001      	beq.n	8009fce <osKernelRunning+0xe>
    return 0;
  else
    return 1;
 8009fca:	2001      	movs	r0, #1
#else
	return (-1);
#endif	
}
 8009fcc:	bd08      	pop	{r3, pc}
    return 0;
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e7fc      	b.n	8009fcc <osKernelRunning+0xc>

08009fd2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009fd2:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8009fd4:	f7ff ffe9 	bl	8009faa <inHandlerMode>
 8009fd8:	b910      	cbnz	r0, 8009fe0 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8009fda:	f001 f919 	bl	800b210 <xTaskGetTickCount>
  }
}
 8009fde:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8009fe0:	f001 f91c 	bl	800b21c <xTaskGetTickCountFromISR>
 8009fe4:	e7fb      	b.n	8009fde <osKernelSysTick+0xc>

08009fe6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009fe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fea:	b087      	sub	sp, #28
 8009fec:	4604      	mov	r4, r0
 8009fee:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009ff0:	6945      	ldr	r5, [r0, #20]
 8009ff2:	b1a5      	cbz	r5, 800a01e <osThreadCreate+0x38>
 8009ff4:	6986      	ldr	r6, [r0, #24]
 8009ff6:	b196      	cbz	r6, 800a01e <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ff8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009ffc:	f8d0 9000 	ldr.w	r9, [r0]
 800a000:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800a004:	f7ff ffcb 	bl	8009f9e <makeFreeRtosPriority>
 800a008:	6922      	ldr	r2, [r4, #16]
 800a00a:	9602      	str	r6, [sp, #8]
 800a00c:	9501      	str	r5, [sp, #4]
 800a00e:	9000      	str	r0, [sp, #0]
 800a010:	463b      	mov	r3, r7
 800a012:	4649      	mov	r1, r9
 800a014:	4640      	mov	r0, r8
 800a016:	f001 f849 	bl	800b0ac <xTaskCreateStatic>
 800a01a:	9005      	str	r0, [sp, #20]
 800a01c:	e013      	b.n	800a046 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a01e:	6865      	ldr	r5, [r4, #4]
 800a020:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a022:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a026:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800a02a:	f7ff ffb8 	bl	8009f9e <makeFreeRtosPriority>
 800a02e:	ab05      	add	r3, sp, #20
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	9000      	str	r0, [sp, #0]
 800a034:	463b      	mov	r3, r7
 800a036:	fa1f f288 	uxth.w	r2, r8
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	f001 f874 	bl	800b12a <xTaskCreate>
 800a042:	2801      	cmp	r0, #1
 800a044:	d103      	bne.n	800a04e <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a046:	9805      	ldr	r0, [sp, #20]
}
 800a048:	b007      	add	sp, #28
 800a04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 800a04e:	2000      	movs	r0, #0
 800a050:	e7fa      	b.n	800a048 <osThreadCreate+0x62>

0800a052 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800a052:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800a054:	f001 fb22 	bl	800b69c <xTaskGetCurrentTaskHandle>
#else
	return NULL;
#endif
}
 800a058:	bd08      	pop	{r3, pc}

0800a05a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a05a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a05c:	4603      	mov	r3, r0
 800a05e:	b900      	cbnz	r0, 800a062 <osDelay+0x8>
 800a060:	2301      	movs	r3, #1
 800a062:	4618      	mov	r0, r3
 800a064:	f001 f9ec 	bl	800b440 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a068:	2000      	movs	r0, #0
 800a06a:	bd08      	pop	{r3, pc}

0800a06c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a06c:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a06e:	6841      	ldr	r1, [r0, #4]
 800a070:	b119      	cbz	r1, 800a07a <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a072:	2001      	movs	r0, #1
 800a074:	f000 fbd1 	bl	800a81a <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a078:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 800a07a:	2001      	movs	r0, #1
 800a07c:	f000 fbc2 	bl	800a804 <xQueueCreateMutex>
 800a080:	e7fa      	b.n	800a078 <osMutexCreate+0xc>
	...

0800a084 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a084:	b530      	push	{r4, r5, lr}
 800a086:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a088:	2300      	movs	r3, #0
 800a08a:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800a08c:	b350      	cbz	r0, 800a0e4 <osMutexWait+0x60>
 800a08e:	460c      	mov	r4, r1
 800a090:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800a092:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a096:	d002      	beq.n	800a09e <osMutexWait+0x1a>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 800a098:	b919      	cbnz	r1, 800a0a2 <osMutexWait+0x1e>
  ticks = 0;
 800a09a:	461c      	mov	r4, r3
 800a09c:	e001      	b.n	800a0a2 <osMutexWait+0x1e>
    ticks = portMAX_DELAY;
 800a09e:	f04f 34ff 	mov.w	r4, #4294967295
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800a0a2:	f7ff ff82 	bl	8009faa <inHandlerMode>
 800a0a6:	b190      	cbz	r0, 800a0ce <osMutexWait+0x4a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a0a8:	aa01      	add	r2, sp, #4
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f000 fe1b 	bl	800ace8 <xQueueReceiveFromISR>
 800a0b2:	2801      	cmp	r0, #1
 800a0b4:	d118      	bne.n	800a0e8 <osMutexWait+0x64>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	b1c3      	cbz	r3, 800a0ec <osMutexWait+0x68>
 800a0ba:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <osMutexWait+0x6c>)
 800a0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	e006      	b.n	800a0dc <osMutexWait+0x58>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f000 fd33 	bl	800ab3c <xQueueSemaphoreTake>
 800a0d6:	2801      	cmp	r0, #1
 800a0d8:	d102      	bne.n	800a0e0 <osMutexWait+0x5c>
  return osOK;
 800a0da:	2000      	movs	r0, #0
}
 800a0dc:	b003      	add	sp, #12
 800a0de:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 800a0e0:	20ff      	movs	r0, #255	; 0xff
 800a0e2:	e7fb      	b.n	800a0dc <osMutexWait+0x58>
    return osErrorParameter;
 800a0e4:	2080      	movs	r0, #128	; 0x80
 800a0e6:	e7f9      	b.n	800a0dc <osMutexWait+0x58>
      return osErrorOS;
 800a0e8:	20ff      	movs	r0, #255	; 0xff
 800a0ea:	e7f7      	b.n	800a0dc <osMutexWait+0x58>
  return osOK;
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e7f5      	b.n	800a0dc <osMutexWait+0x58>
 800a0f0:	e000ed04 	.word	0xe000ed04

0800a0f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 800a0fe:	f7ff ff54 	bl	8009faa <inHandlerMode>
 800a102:	b188      	cbz	r0, 800a128 <osMutexRelease+0x34>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a104:	a901      	add	r1, sp, #4
 800a106:	4620      	mov	r0, r4
 800a108:	f000 fc04 	bl	800a914 <xQueueGiveFromISR>
 800a10c:	2801      	cmp	r0, #1
 800a10e:	d116      	bne.n	800a13e <osMutexRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a110:	9b01      	ldr	r3, [sp, #4]
 800a112:	b1b3      	cbz	r3, 800a142 <osMutexRelease+0x4e>
 800a114:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <osMutexRelease+0x58>)
 800a116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800a124:	2000      	movs	r0, #0
 800a126:	e008      	b.n	800a13a <osMutexRelease+0x46>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a128:	2300      	movs	r3, #0
 800a12a:	461a      	mov	r2, r3
 800a12c:	4619      	mov	r1, r3
 800a12e:	4620      	mov	r0, r4
 800a130:	f000 fa96 	bl	800a660 <xQueueGenericSend>
 800a134:	2801      	cmp	r0, #1
 800a136:	d106      	bne.n	800a146 <osMutexRelease+0x52>
  osStatus result = osOK;
 800a138:	2000      	movs	r0, #0
  {
    result = osErrorOS;
  }
  return result;
}
 800a13a:	b002      	add	sp, #8
 800a13c:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800a13e:	20ff      	movs	r0, #255	; 0xff
 800a140:	e7fb      	b.n	800a13a <osMutexRelease+0x46>
  osStatus result = osOK;
 800a142:	2000      	movs	r0, #0
 800a144:	e7f9      	b.n	800a13a <osMutexRelease+0x46>
    result = osErrorOS;
 800a146:	20ff      	movs	r0, #255	; 0xff
 800a148:	e7f7      	b.n	800a13a <osMutexRelease+0x46>
 800a14a:	bf00      	nop
 800a14c:	e000ed04 	.word	0xe000ed04

0800a150 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a150:	b510      	push	{r4, lr}
 800a152:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a154:	6843      	ldr	r3, [r0, #4]
 800a156:	b163      	cbz	r3, 800a172 <osSemaphoreCreate+0x22>
    if (count == 1) {
 800a158:	2901      	cmp	r1, #1
 800a15a:	d11a      	bne.n	800a192 <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a15c:	2203      	movs	r2, #3
 800a15e:	9200      	str	r2, [sp, #0]
 800a160:	2200      	movs	r2, #0
 800a162:	4611      	mov	r1, r2
 800a164:	2001      	movs	r0, #1
 800a166:	f000 f9f5 	bl	800a554 <xQueueGenericCreateStatic>
 800a16a:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 800a16c:	4620      	mov	r0, r4
 800a16e:	b002      	add	sp, #8
 800a170:	bd10      	pop	{r4, pc}
    if (count == 1) {
 800a172:	2901      	cmp	r1, #1
 800a174:	d10f      	bne.n	800a196 <osSemaphoreCreate+0x46>
      vSemaphoreCreateBinary(sema);
 800a176:	2203      	movs	r2, #3
 800a178:	2100      	movs	r1, #0
 800a17a:	2001      	movs	r0, #1
 800a17c:	f000 fa46 	bl	800a60c <xQueueGenericCreate>
 800a180:	4604      	mov	r4, r0
 800a182:	2800      	cmp	r0, #0
 800a184:	d0f2      	beq.n	800a16c <osSemaphoreCreate+0x1c>
 800a186:	2300      	movs	r3, #0
 800a188:	461a      	mov	r2, r3
 800a18a:	4619      	mov	r1, r3
 800a18c:	f000 fa68 	bl	800a660 <xQueueGenericSend>
 800a190:	e7ec      	b.n	800a16c <osSemaphoreCreate+0x1c>
      return NULL;
 800a192:	2400      	movs	r4, #0
 800a194:	e7ea      	b.n	800a16c <osSemaphoreCreate+0x1c>
      return NULL;
 800a196:	2400      	movs	r4, #0
 800a198:	e7e8      	b.n	800a16c <osSemaphoreCreate+0x1c>

0800a19a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a19a:	b510      	push	{r4, lr}
 800a19c:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a19e:	6882      	ldr	r2, [r0, #8]
 800a1a0:	b10a      	cbz	r2, 800a1a6 <osMessageCreate+0xc>
 800a1a2:	68c3      	ldr	r3, [r0, #12]
 800a1a4:	b933      	cbnz	r3, 800a1b4 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	6841      	ldr	r1, [r0, #4]
 800a1aa:	6800      	ldr	r0, [r0, #0]
 800a1ac:	f000 fa2e 	bl	800a60c <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a1b0:	b002      	add	sp, #8
 800a1b2:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a1b4:	6841      	ldr	r1, [r0, #4]
 800a1b6:	6800      	ldr	r0, [r0, #0]
 800a1b8:	2400      	movs	r4, #0
 800a1ba:	9400      	str	r4, [sp, #0]
 800a1bc:	f000 f9ca 	bl	800a554 <xQueueGenericCreateStatic>
 800a1c0:	e7f6      	b.n	800a1b0 <osMessageCreate+0x16>
	...

0800a1c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a1c4:	b530      	push	{r4, r5, lr}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 800a1d0:	4615      	mov	r5, r2
 800a1d2:	b902      	cbnz	r2, 800a1d6 <osMessagePut+0x12>
    ticks = 1;
 800a1d4:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 800a1d6:	f7ff fee8 	bl	8009faa <inHandlerMode>
 800a1da:	b198      	cbz	r0, 800a204 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a1dc:	2300      	movs	r3, #0
 800a1de:	aa03      	add	r2, sp, #12
 800a1e0:	a901      	add	r1, sp, #4
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fb28 	bl	800a838 <xQueueGenericSendFromISR>
 800a1e8:	2801      	cmp	r0, #1
 800a1ea:	d118      	bne.n	800a21e <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	b1c3      	cbz	r3, 800a222 <osMessagePut+0x5e>
 800a1f0:	4b0d      	ldr	r3, [pc, #52]	; (800a228 <osMessagePut+0x64>)
 800a1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800a200:	2000      	movs	r0, #0
 800a202:	e008      	b.n	800a216 <osMessagePut+0x52>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a204:	2300      	movs	r3, #0
 800a206:	462a      	mov	r2, r5
 800a208:	a901      	add	r1, sp, #4
 800a20a:	4620      	mov	r0, r4
 800a20c:	f000 fa28 	bl	800a660 <xQueueGenericSend>
 800a210:	2801      	cmp	r0, #1
 800a212:	d102      	bne.n	800a21a <osMessagePut+0x56>
  return osOK;
 800a214:	2000      	movs	r0, #0
}
 800a216:	b005      	add	sp, #20
 800a218:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 800a21a:	20ff      	movs	r0, #255	; 0xff
 800a21c:	e7fb      	b.n	800a216 <osMessagePut+0x52>
      return osErrorOS;
 800a21e:	20ff      	movs	r0, #255	; 0xff
 800a220:	e7f9      	b.n	800a216 <osMessagePut+0x52>
  return osOK;
 800a222:	2000      	movs	r0, #0
 800a224:	e7f7      	b.n	800a216 <osMessagePut+0x52>
 800a226:	bf00      	nop
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a232:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 800a238:	b149      	cbz	r1, 800a24e <osMessageGet+0x22>
 800a23a:	460d      	mov	r5, r1
 800a23c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800a242:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a246:	d00b      	beq.n	800a260 <osMessageGet+0x34>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 800a248:	b962      	cbnz	r2, 800a264 <osMessageGet+0x38>
  ticks = 0;
 800a24a:	461e      	mov	r6, r3
 800a24c:	e00a      	b.n	800a264 <osMessageGet+0x38>
    event.status = osErrorParameter;
 800a24e:	ab04      	add	r3, sp, #16
 800a250:	2280      	movs	r2, #128	; 0x80
 800a252:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 800a256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a25a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a25e:	e02a      	b.n	800a2b6 <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 800a260:	f04f 36ff 	mov.w	r6, #4294967295
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800a264:	f7ff fea1 	bl	8009faa <inHandlerMode>
 800a268:	b1b0      	cbz	r0, 800a298 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a26a:	aa03      	add	r2, sp, #12
 800a26c:	a901      	add	r1, sp, #4
 800a26e:	4628      	mov	r0, r5
 800a270:	f000 fd3a 	bl	800ace8 <xQueueReceiveFromISR>
 800a274:	2801      	cmp	r0, #1
 800a276:	d00c      	beq.n	800a292 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 800a278:	2300      	movs	r3, #0
 800a27a:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	b1ab      	cbz	r3, 800a2ac <osMessageGet+0x80>
 800a280:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <osMessageGet+0x9c>)
 800a282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	e00c      	b.n	800a2ac <osMessageGet+0x80>
      event.status = osEventMessage;
 800a292:	2310      	movs	r3, #16
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	e7f1      	b.n	800a27c <osMessageGet+0x50>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a298:	4632      	mov	r2, r6
 800a29a:	a901      	add	r1, sp, #4
 800a29c:	4628      	mov	r0, r5
 800a29e:	f000 fb9b 	bl	800a9d8 <xQueueReceive>
 800a2a2:	2801      	cmp	r0, #1
 800a2a4:	d00a      	beq.n	800a2bc <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a2a6:	b966      	cbnz	r6, 800a2c2 <osMessageGet+0x96>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 800a2ac:	466b      	mov	r3, sp
 800a2ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	b004      	add	sp, #16
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 800a2bc:	2310      	movs	r3, #16
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	e7f4      	b.n	800a2ac <osMessageGet+0x80>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a2c2:	2340      	movs	r3, #64	; 0x40
 800a2c4:	e7f1      	b.n	800a2aa <osMessageGet+0x7e>
 800a2c6:	bf00      	nop
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2cc:	f100 0308 	add.w	r3, r0, #8
 800a2d0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2d8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2da:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2e0:	4770      	bx	lr

0800a2e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2e6:	4770      	bx	lr

0800a2e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2e8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2ea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2f0:	689a      	ldr	r2, [r3, #8]
 800a2f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a2f6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800a2f8:	6803      	ldr	r3, [r0, #0]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	6003      	str	r3, [r0, #0]
}
 800a2fe:	4770      	bx	lr

0800a300 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a300:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a302:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a304:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a308:	d002      	beq.n	800a310 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a30a:	f100 0208 	add.w	r2, r0, #8
 800a30e:	e002      	b.n	800a316 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800a310:	6902      	ldr	r2, [r0, #16]
 800a312:	e004      	b.n	800a31e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a314:	461a      	mov	r2, r3
 800a316:	6853      	ldr	r3, [r2, #4]
 800a318:	681c      	ldr	r4, [r3, #0]
 800a31a:	42ac      	cmp	r4, r5
 800a31c:	d9fa      	bls.n	800a314 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a31e:	6853      	ldr	r3, [r2, #4]
 800a320:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a322:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a324:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a326:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a328:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800a32a:	6803      	ldr	r3, [r0, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	6003      	str	r3, [r0, #0]
}
 800a330:	bc30      	pop	{r4, r5}
 800a332:	4770      	bx	lr

0800a334 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a334:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a336:	6842      	ldr	r2, [r0, #4]
 800a338:	6881      	ldr	r1, [r0, #8]
 800a33a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a33c:	6882      	ldr	r2, [r0, #8]
 800a33e:	6841      	ldr	r1, [r0, #4]
 800a340:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	4282      	cmp	r2, r0
 800a346:	d006      	beq.n	800a356 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a348:	2200      	movs	r2, #0
 800a34a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	3a01      	subs	r2, #1
 800a350:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a352:	6818      	ldr	r0, [r3, #0]
}
 800a354:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a356:	6882      	ldr	r2, [r0, #8]
 800a358:	605a      	str	r2, [r3, #4]
 800a35a:	e7f5      	b.n	800a348 <uxListRemove+0x14>

0800a35c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a35c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a35e:	b123      	cbz	r3, 800a36a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a360:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	f1c0 0007 	rsb	r0, r0, #7
 800a368:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a36a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800a36c:	4770      	bx	lr

0800a36e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a36e:	b510      	push	{r4, lr}
 800a370:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a372:	f001 fb3f 	bl	800b9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a376:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a378:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d004      	beq.n	800a388 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800a37e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800a380:	f001 fb5e 	bl	800ba40 <vPortExitCritical>

	return xReturn;
}
 800a384:	4620      	mov	r0, r4
 800a386:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800a388:	2401      	movs	r4, #1
 800a38a:	e7f9      	b.n	800a380 <prvIsQueueFull+0x12>

0800a38c <prvIsQueueEmpty>:
{
 800a38c:	b510      	push	{r4, lr}
 800a38e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a390:	f001 fb30 	bl	800b9f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a396:	b123      	cbz	r3, 800a3a2 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800a398:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a39a:	f001 fb51 	bl	800ba40 <vPortExitCritical>
}
 800a39e:	4620      	mov	r0, r4
 800a3a0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800a3a2:	2401      	movs	r4, #1
 800a3a4:	e7f9      	b.n	800a39a <prvIsQueueEmpty+0xe>

0800a3a6 <prvCopyDataToQueue>:
{
 800a3a6:	b570      	push	{r4, r5, r6, lr}
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ac:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a3b0:	b95a      	cbnz	r2, 800a3ca <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3b2:	6803      	ldr	r3, [r0, #0]
 800a3b4:	b11b      	cbz	r3, 800a3be <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800a3b6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a3be:	6840      	ldr	r0, [r0, #4]
 800a3c0:	f001 f9de 	bl	800b780 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6063      	str	r3, [r4, #4]
 800a3c8:	e7f6      	b.n	800a3b8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800a3ca:	b96e      	cbnz	r6, 800a3e8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a3cc:	6880      	ldr	r0, [r0, #8]
 800a3ce:	f011 fa3e 	bl	801b84e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a3d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d319      	bcc.n	800a414 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e7e7      	b.n	800a3b8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3e8:	68c0      	ldr	r0, [r0, #12]
 800a3ea:	f011 fa30 	bl	801b84e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a3ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a3f0:	4252      	negs	r2, r2
 800a3f2:	68e3      	ldr	r3, [r4, #12]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3f8:	6821      	ldr	r1, [r4, #0]
 800a3fa:	428b      	cmp	r3, r1
 800a3fc:	d202      	bcs.n	800a404 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a3fe:	6863      	ldr	r3, [r4, #4]
 800a400:	441a      	add	r2, r3
 800a402:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a404:	2e02      	cmp	r6, #2
 800a406:	d001      	beq.n	800a40c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800a408:	2000      	movs	r0, #0
 800a40a:	e7d5      	b.n	800a3b8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a40c:	b125      	cbz	r5, 800a418 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800a40e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800a410:	2000      	movs	r0, #0
 800a412:	e7d1      	b.n	800a3b8 <prvCopyDataToQueue+0x12>
 800a414:	2000      	movs	r0, #0
 800a416:	e7cf      	b.n	800a3b8 <prvCopyDataToQueue+0x12>
 800a418:	2000      	movs	r0, #0
 800a41a:	e7cd      	b.n	800a3b8 <prvCopyDataToQueue+0x12>

0800a41c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a41c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a41e:	b172      	cbz	r2, 800a43e <prvCopyDataFromQueue+0x22>
{
 800a420:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a422:	68c3      	ldr	r3, [r0, #12]
 800a424:	4413      	add	r3, r2
 800a426:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a428:	6844      	ldr	r4, [r0, #4]
 800a42a:	42a3      	cmp	r3, r4
 800a42c:	d301      	bcc.n	800a432 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a42e:	6803      	ldr	r3, [r0, #0]
 800a430:	60c3      	str	r3, [r0, #12]
 800a432:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a434:	68c1      	ldr	r1, [r0, #12]
 800a436:	4620      	mov	r0, r4
 800a438:	f011 fa09 	bl	801b84e <memcpy>
}
 800a43c:	bd10      	pop	{r4, pc}
 800a43e:	4770      	bx	lr

0800a440 <prvUnlockQueue>:
{
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800a444:	f001 fad6 	bl	800b9f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a448:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800a44c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a44e:	e003      	b.n	800a458 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800a450:	f001 f91e 	bl	800b690 <vTaskMissedYield>
			--cTxLock;
 800a454:	3c01      	subs	r4, #1
 800a456:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a458:	2c00      	cmp	r4, #0
 800a45a:	dd08      	ble.n	800a46e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a45c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a45e:	b133      	cbz	r3, 800a46e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a460:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a464:	f001 f87c 	bl	800b560 <xTaskRemoveFromEventList>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d0f3      	beq.n	800a454 <prvUnlockQueue+0x14>
 800a46c:	e7f0      	b.n	800a450 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800a46e:	23ff      	movs	r3, #255	; 0xff
 800a470:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a474:	f001 fae4 	bl	800ba40 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a478:	f001 fabc 	bl	800b9f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a47c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800a480:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a482:	e003      	b.n	800a48c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800a484:	f001 f904 	bl	800b690 <vTaskMissedYield>
				--cRxLock;
 800a488:	3c01      	subs	r4, #1
 800a48a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a48c:	2c00      	cmp	r4, #0
 800a48e:	dd08      	ble.n	800a4a2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a490:	692b      	ldr	r3, [r5, #16]
 800a492:	b133      	cbz	r3, 800a4a2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a494:	f105 0010 	add.w	r0, r5, #16
 800a498:	f001 f862 	bl	800b560 <xTaskRemoveFromEventList>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d0f3      	beq.n	800a488 <prvUnlockQueue+0x48>
 800a4a0:	e7f0      	b.n	800a484 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800a4a2:	23ff      	movs	r3, #255	; 0xff
 800a4a4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a4a8:	f001 faca 	bl	800ba40 <vPortExitCritical>
}
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a4b0 <xQueueGenericReset>:
{
 800a4b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800a4b2:	b950      	cbnz	r0, 800a4ca <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	b672      	cpsid	i
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	b662      	cpsie	i
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueGenericReset+0x18>
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800a4ce:	f001 fa91 	bl	800b9f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a4d2:	6821      	ldr	r1, [r4, #0]
 800a4d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a4d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4d8:	fb03 1002 	mla	r0, r3, r2, r1
 800a4dc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4de:	2000      	movs	r0, #0
 800a4e0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4e2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a4e4:	3a01      	subs	r2, #1
 800a4e6:	fb02 1303 	mla	r3, r2, r3, r1
 800a4ea:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4ec:	23ff      	movs	r3, #255	; 0xff
 800a4ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800a4f6:	b9a5      	cbnz	r5, 800a522 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	b91b      	cbnz	r3, 800a504 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 800a4fc:	f001 faa0 	bl	800ba40 <vPortExitCritical>
}
 800a500:	2001      	movs	r0, #1
 800a502:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a504:	f104 0010 	add.w	r0, r4, #16
 800a508:	f001 f82a 	bl	800b560 <xTaskRemoveFromEventList>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d0f5      	beq.n	800a4fc <xQueueGenericReset+0x4c>
					queueYIELD_IF_USING_PREEMPTION();
 800a510:	4b08      	ldr	r3, [pc, #32]	; (800a534 <xQueueGenericReset+0x84>)
 800a512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	e7ec      	b.n	800a4fc <xQueueGenericReset+0x4c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a522:	f104 0010 	add.w	r0, r4, #16
 800a526:	f7ff fed1 	bl	800a2cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a52a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a52e:	f7ff fecd 	bl	800a2cc <vListInitialise>
 800a532:	e7e3      	b.n	800a4fc <xQueueGenericReset+0x4c>
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <prvInitialiseNewQueue>:
{
 800a538:	b510      	push	{r4, lr}
 800a53a:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a53c:	460c      	mov	r4, r1
 800a53e:	b139      	cbz	r1, 800a550 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a540:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a542:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a544:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a546:	2101      	movs	r1, #1
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff ffb1 	bl	800a4b0 <xQueueGenericReset>
}
 800a54e:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a550:	601b      	str	r3, [r3, #0]
 800a552:	e7f6      	b.n	800a542 <prvInitialiseNewQueue+0xa>

0800a554 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a554:	b950      	cbnz	r0, 800a56c <xQueueGenericCreateStatic+0x18>
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	b672      	cpsid	i
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	b662      	cpsie	i
 800a56a:	e7fe      	b.n	800a56a <xQueueGenericCreateStatic+0x16>
	{
 800a56c:	b510      	push	{r4, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 800a572:	b18b      	cbz	r3, 800a598 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a574:	1c08      	adds	r0, r1, #0
 800a576:	bf18      	it	ne
 800a578:	2001      	movne	r0, #1
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	bf08      	it	eq
 800a57e:	2001      	moveq	r0, #1
 800a580:	b9a8      	cbnz	r0, 800a5ae <xQueueGenericCreateStatic+0x5a>
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	b672      	cpsid	i
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	b662      	cpsie	i
 800a596:	e7fe      	b.n	800a596 <xQueueGenericCreateStatic+0x42>
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	b672      	cpsid	i
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	b662      	cpsie	i
 800a5ac:	e7fe      	b.n	800a5ac <xQueueGenericCreateStatic+0x58>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5ae:	fab1 f081 	clz	r0, r1
 800a5b2:	0940      	lsrs	r0, r0, #5
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	bf18      	it	ne
 800a5b8:	2001      	movne	r0, #1
 800a5ba:	b950      	cbnz	r0, 800a5d2 <xQueueGenericCreateStatic+0x7e>
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	b672      	cpsid	i
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	b662      	cpsie	i
 800a5d0:	e7fe      	b.n	800a5d0 <xQueueGenericCreateStatic+0x7c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5d2:	2048      	movs	r0, #72	; 0x48
 800a5d4:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5d6:	9803      	ldr	r0, [sp, #12]
 800a5d8:	2848      	cmp	r0, #72	; 0x48
 800a5da:	d00a      	beq.n	800a5f2 <xQueueGenericCreateStatic+0x9e>
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	b672      	cpsid	i
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	b662      	cpsie	i
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericCreateStatic+0x9c>
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5fc:	9400      	str	r4, [sp, #0]
 800a5fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a602:	f7ff ff99 	bl	800a538 <prvInitialiseNewQueue>
	}
 800a606:	4620      	mov	r0, r4
 800a608:	b004      	add	sp, #16
 800a60a:	bd10      	pop	{r4, pc}

0800a60c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a60c:	b950      	cbnz	r0, 800a624 <xQueueGenericCreate+0x18>
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	b672      	cpsid	i
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	b662      	cpsie	i
 800a622:	e7fe      	b.n	800a622 <xQueueGenericCreate+0x16>
	{
 800a624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a626:	b083      	sub	sp, #12
 800a628:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800a62a:	b111      	cbz	r1, 800a632 <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a62c:	fb01 f000 	mul.w	r0, r1, r0
 800a630:	e000      	b.n	800a634 <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 800a632:	2000      	movs	r0, #0
 800a634:	4617      	mov	r7, r2
 800a636:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a638:	3048      	adds	r0, #72	; 0x48
 800a63a:	f001 fb77 	bl	800bd2c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a63e:	4605      	mov	r5, r0
 800a640:	b150      	cbz	r0, 800a658 <xQueueGenericCreate+0x4c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a642:	2300      	movs	r3, #0
 800a644:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a648:	9000      	str	r0, [sp, #0]
 800a64a:	463b      	mov	r3, r7
 800a64c:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800a650:	4621      	mov	r1, r4
 800a652:	4630      	mov	r0, r6
 800a654:	f7ff ff70 	bl	800a538 <prvInitialiseNewQueue>
	}
 800a658:	4628      	mov	r0, r5
 800a65a:	b003      	add	sp, #12
 800a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a660 <xQueueGenericSend>:
{
 800a660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a662:	b085      	sub	sp, #20
 800a664:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a666:	b170      	cbz	r0, 800a686 <xQueueGenericSend+0x26>
 800a668:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a66a:	b9b9      	cbnz	r1, 800a69c <xQueueGenericSend+0x3c>
 800a66c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a66e:	b1aa      	cbz	r2, 800a69c <xQueueGenericSend+0x3c>
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	b672      	cpsid	i
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	b662      	cpsie	i
 800a684:	e7fe      	b.n	800a684 <xQueueGenericSend+0x24>
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	b672      	cpsid	i
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	b662      	cpsie	i
 800a69a:	e7fe      	b.n	800a69a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d10d      	bne.n	800a6bc <xQueueGenericSend+0x5c>
 800a6a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a6a2:	2a01      	cmp	r2, #1
 800a6a4:	d00a      	beq.n	800a6bc <xQueueGenericSend+0x5c>
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	b672      	cpsid	i
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	b662      	cpsie	i
 800a6ba:	e7fe      	b.n	800a6ba <xQueueGenericSend+0x5a>
 800a6bc:	461e      	mov	r6, r3
 800a6be:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6c0:	f000 fff2 	bl	800b6a8 <xTaskGetSchedulerState>
 800a6c4:	b960      	cbnz	r0, 800a6e0 <xQueueGenericSend+0x80>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	b163      	cbz	r3, 800a6e4 <xQueueGenericSend+0x84>
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	b672      	cpsid	i
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	b662      	cpsie	i
 800a6de:	e7fe      	b.n	800a6de <xQueueGenericSend+0x7e>
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	e03a      	b.n	800a75a <xQueueGenericSend+0xfa>
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	e038      	b.n	800a75a <xQueueGenericSend+0xfa>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff fe5a 	bl	800a3a6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6f4:	b94b      	cbnz	r3, 800a70a <xQueueGenericSend+0xaa>
					else if( xYieldRequired != pdFALSE )
 800a6f6:	b1a8      	cbz	r0, 800a724 <xQueueGenericSend+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
 800a6f8:	4b3b      	ldr	r3, [pc, #236]	; (800a7e8 <xQueueGenericSend+0x188>)
 800a6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	e00c      	b.n	800a724 <xQueueGenericSend+0xc4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a70a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a70e:	f000 ff27 	bl	800b560 <xTaskRemoveFromEventList>
 800a712:	b138      	cbz	r0, 800a724 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
 800a714:	4b34      	ldr	r3, [pc, #208]	; (800a7e8 <xQueueGenericSend+0x188>)
 800a716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a724:	f001 f98c 	bl	800ba40 <vPortExitCritical>
				return pdPASS;
 800a728:	2001      	movs	r0, #1
}
 800a72a:	b005      	add	sp, #20
 800a72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800a72e:	f001 f987 	bl	800ba40 <vPortExitCritical>
					return errQUEUE_FULL;
 800a732:	2000      	movs	r0, #0
 800a734:	e7f9      	b.n	800a72a <xQueueGenericSend+0xca>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a736:	a802      	add	r0, sp, #8
 800a738:	f000 ff5a 	bl	800b5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a73c:	2501      	movs	r5, #1
 800a73e:	e019      	b.n	800a774 <xQueueGenericSend+0x114>
		prvLockQueue( pxQueue );
 800a740:	2300      	movs	r3, #0
 800a742:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a746:	e021      	b.n	800a78c <xQueueGenericSend+0x12c>
 800a748:	2300      	movs	r3, #0
 800a74a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a74e:	e023      	b.n	800a798 <xQueueGenericSend+0x138>
				prvUnlockQueue( pxQueue );
 800a750:	4620      	mov	r0, r4
 800a752:	f7ff fe75 	bl	800a440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a756:	f000 fdf7 	bl	800b348 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800a75a:	f001 f94b 	bl	800b9f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a75e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a762:	429a      	cmp	r2, r3
 800a764:	d3c0      	bcc.n	800a6e8 <xQueueGenericSend+0x88>
 800a766:	2e02      	cmp	r6, #2
 800a768:	d0be      	beq.n	800a6e8 <xQueueGenericSend+0x88>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0de      	beq.n	800a72e <xQueueGenericSend+0xce>
				else if( xEntryTimeSet == pdFALSE )
 800a770:	2d00      	cmp	r5, #0
 800a772:	d0e0      	beq.n	800a736 <xQueueGenericSend+0xd6>
		taskEXIT_CRITICAL();
 800a774:	f001 f964 	bl	800ba40 <vPortExitCritical>
		vTaskSuspendAll();
 800a778:	f000 fd42 	bl	800b200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a77c:	f001 f93a 	bl	800b9f4 <vPortEnterCritical>
 800a780:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a784:	b25b      	sxtb	r3, r3
 800a786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78a:	d0d9      	beq.n	800a740 <xQueueGenericSend+0xe0>
 800a78c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a790:	b25b      	sxtb	r3, r3
 800a792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a796:	d0d7      	beq.n	800a748 <xQueueGenericSend+0xe8>
 800a798:	f001 f952 	bl	800ba40 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a79c:	a901      	add	r1, sp, #4
 800a79e:	a802      	add	r0, sp, #8
 800a7a0:	f000 ff32 	bl	800b608 <xTaskCheckForTimeOut>
 800a7a4:	b9c8      	cbnz	r0, 800a7da <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f7ff fde1 	bl	800a36e <prvIsQueueFull>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d0cf      	beq.n	800a750 <xQueueGenericSend+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7b0:	9901      	ldr	r1, [sp, #4]
 800a7b2:	f104 0010 	add.w	r0, r4, #16
 800a7b6:	f000 feb9 	bl	800b52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f7ff fe40 	bl	800a440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c0:	f000 fdc2 	bl	800b348 <xTaskResumeAll>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d1c8      	bne.n	800a75a <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800a7c8:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <xQueueGenericSend+0x188>)
 800a7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	e7bf      	b.n	800a75a <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7ff fe30 	bl	800a440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7e0:	f000 fdb2 	bl	800b348 <xTaskResumeAll>
			return errQUEUE_FULL;
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e7a0      	b.n	800a72a <xQueueGenericSend+0xca>
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800a7ec:	b148      	cbz	r0, 800a802 <prvInitialiseMutex+0x16>
	{
 800a7ee:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a7f4:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a7f6:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	460a      	mov	r2, r1
 800a7fc:	f7ff ff30 	bl	800a660 <xQueueGenericSend>
	}
 800a800:	bd08      	pop	{r3, pc}
 800a802:	4770      	bx	lr

0800a804 <xQueueCreateMutex>:
	{
 800a804:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a806:	4602      	mov	r2, r0
 800a808:	2100      	movs	r1, #0
 800a80a:	2001      	movs	r0, #1
 800a80c:	f7ff fefe 	bl	800a60c <xQueueGenericCreate>
 800a810:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800a812:	f7ff ffeb 	bl	800a7ec <prvInitialiseMutex>
	}
 800a816:	4620      	mov	r0, r4
 800a818:	bd10      	pop	{r4, pc}

0800a81a <xQueueCreateMutexStatic>:
	{
 800a81a:	b510      	push	{r4, lr}
 800a81c:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a81e:	9000      	str	r0, [sp, #0]
 800a820:	460b      	mov	r3, r1
 800a822:	2200      	movs	r2, #0
 800a824:	4611      	mov	r1, r2
 800a826:	2001      	movs	r0, #1
 800a828:	f7ff fe94 	bl	800a554 <xQueueGenericCreateStatic>
 800a82c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800a82e:	f7ff ffdd 	bl	800a7ec <prvInitialiseMutex>
	}
 800a832:	4620      	mov	r0, r4
 800a834:	b002      	add	sp, #8
 800a836:	bd10      	pop	{r4, pc}

0800a838 <xQueueGenericSendFromISR>:
{
 800a838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a83c:	b170      	cbz	r0, 800a85c <xQueueGenericSendFromISR+0x24>
 800a83e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a840:	b9b9      	cbnz	r1, 800a872 <xQueueGenericSendFromISR+0x3a>
 800a842:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a844:	b1a8      	cbz	r0, 800a872 <xQueueGenericSendFromISR+0x3a>
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	b672      	cpsid	i
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	b662      	cpsie	i
 800a85a:	e7fe      	b.n	800a85a <xQueueGenericSendFromISR+0x22>
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	b672      	cpsid	i
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	b662      	cpsie	i
 800a870:	e7fe      	b.n	800a870 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a872:	2b02      	cmp	r3, #2
 800a874:	d10d      	bne.n	800a892 <xQueueGenericSendFromISR+0x5a>
 800a876:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a878:	2801      	cmp	r0, #1
 800a87a:	d00a      	beq.n	800a892 <xQueueGenericSendFromISR+0x5a>
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	b672      	cpsid	i
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	b662      	cpsie	i
 800a890:	e7fe      	b.n	800a890 <xQueueGenericSendFromISR+0x58>
 800a892:	461f      	mov	r7, r3
 800a894:	4690      	mov	r8, r2
 800a896:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a898:	f001 f9b8 	bl	800bc0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a89c:	f3ef 8611 	mrs	r6, BASEPRI
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	b672      	cpsid	i
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a8b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d303      	bcc.n	800a8c4 <xQueueGenericSendFromISR+0x8c>
 800a8bc:	2f02      	cmp	r7, #2
 800a8be:	d001      	beq.n	800a8c4 <xQueueGenericSendFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e00f      	b.n	800a8e4 <xQueueGenericSendFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8c4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a8c8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8ca:	463a      	mov	r2, r7
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f7ff fd69 	bl	800a3a6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a8d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a8d8:	d008      	beq.n	800a8ec <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8da:	1c6b      	adds	r3, r5, #1
 800a8dc:	b25b      	sxtb	r3, r3
 800a8de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800a8e2:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8e4:	f386 8811 	msr	BASEPRI, r6
}
 800a8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ee:	b15b      	cbz	r3, 800a908 <xQueueGenericSendFromISR+0xd0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a8f4:	f000 fe34 	bl	800b560 <xTaskRemoveFromEventList>
 800a8f8:	b140      	cbz	r0, 800a90c <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 800a8fa:	f1b8 0f00 	cmp.w	r8, #0
 800a8fe:	d007      	beq.n	800a910 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a900:	2001      	movs	r0, #1
 800a902:	f8c8 0000 	str.w	r0, [r8]
 800a906:	e7ed      	b.n	800a8e4 <xQueueGenericSendFromISR+0xac>
			xReturn = pdPASS;
 800a908:	2001      	movs	r0, #1
 800a90a:	e7eb      	b.n	800a8e4 <xQueueGenericSendFromISR+0xac>
 800a90c:	2001      	movs	r0, #1
 800a90e:	e7e9      	b.n	800a8e4 <xQueueGenericSendFromISR+0xac>
 800a910:	2001      	movs	r0, #1
 800a912:	e7e7      	b.n	800a8e4 <xQueueGenericSendFromISR+0xac>

0800a914 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800a914:	b170      	cbz	r0, 800a934 <xQueueGiveFromISR+0x20>
{
 800a916:	b570      	push	{r4, r5, r6, lr}
 800a918:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a91a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a91c:	b1ab      	cbz	r3, 800a94a <xQueueGiveFromISR+0x36>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	b672      	cpsid	i
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	b662      	cpsie	i
 800a932:	e7fe      	b.n	800a932 <xQueueGiveFromISR+0x1e>
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	b672      	cpsid	i
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	b662      	cpsie	i
 800a948:	e7fe      	b.n	800a948 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a94a:	6803      	ldr	r3, [r0, #0]
 800a94c:	b33b      	cbz	r3, 800a99e <xQueueGiveFromISR+0x8a>
 800a94e:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a950:	f001 f95c 	bl	800bc0c <vPortValidateInterruptPriority>
	__asm volatile
 800a954:	f3ef 8511 	mrs	r5, BASEPRI
 800a958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95c:	b672      	cpsid	i
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a96c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a96e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a970:	4293      	cmp	r3, r2
 800a972:	d928      	bls.n	800a9c6 <xQueueGiveFromISR+0xb2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a974:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a978:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a97a:	3201      	adds	r2, #1
 800a97c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a982:	d11a      	bne.n	800a9ba <xQueueGiveFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a986:	b303      	cbz	r3, 800a9ca <xQueueGiveFromISR+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a988:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a98c:	f000 fde8 	bl	800b560 <xTaskRemoveFromEventList>
 800a990:	b1e8      	cbz	r0, 800a9ce <xQueueGiveFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 800a992:	b1f6      	cbz	r6, 800a9d2 <xQueueGiveFromISR+0xbe>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a994:	2001      	movs	r0, #1
 800a996:	6030      	str	r0, [r6, #0]
	__asm volatile
 800a998:	f385 8811 	msr	BASEPRI, r5
}
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a99e:	6843      	ldr	r3, [r0, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0d4      	beq.n	800a94e <xQueueGiveFromISR+0x3a>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	b672      	cpsid	i
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	b662      	cpsie	i
 800a9b8:	e7fe      	b.n	800a9b8 <xQueueGiveFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	b25b      	sxtb	r3, r3
 800a9be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	e7e8      	b.n	800a998 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	e7e6      	b.n	800a998 <xQueueGiveFromISR+0x84>
			xReturn = pdPASS;
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	e7e4      	b.n	800a998 <xQueueGiveFromISR+0x84>
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	e7e2      	b.n	800a998 <xQueueGiveFromISR+0x84>
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	e7e0      	b.n	800a998 <xQueueGiveFromISR+0x84>
	...

0800a9d8 <xQueueReceive>:
{
 800a9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a9de:	b170      	cbz	r0, 800a9fe <xQueueReceive+0x26>
 800a9e0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9e2:	b9b9      	cbnz	r1, 800aa14 <xQueueReceive+0x3c>
 800a9e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a9e6:	b1ab      	cbz	r3, 800aa14 <xQueueReceive+0x3c>
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	b672      	cpsid	i
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	b662      	cpsie	i
 800a9fc:	e7fe      	b.n	800a9fc <xQueueReceive+0x24>
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	b672      	cpsid	i
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	b662      	cpsie	i
 800aa12:	e7fe      	b.n	800aa12 <xQueueReceive+0x3a>
 800aa14:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa16:	f000 fe47 	bl	800b6a8 <xTaskGetSchedulerState>
 800aa1a:	b960      	cbnz	r0, 800aa36 <xQueueReceive+0x5e>
 800aa1c:	9b01      	ldr	r3, [sp, #4]
 800aa1e:	b163      	cbz	r3, 800aa3a <xQueueReceive+0x62>
 800aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa24:	b672      	cpsid	i
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	b662      	cpsie	i
 800aa34:	e7fe      	b.n	800aa34 <xQueueReceive+0x5c>
 800aa36:	2600      	movs	r6, #0
 800aa38:	e03e      	b.n	800aab8 <xQueueReceive+0xe0>
 800aa3a:	2600      	movs	r6, #0
 800aa3c:	e03c      	b.n	800aab8 <xQueueReceive+0xe0>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa3e:	4639      	mov	r1, r7
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7ff fceb 	bl	800a41c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa46:	3d01      	subs	r5, #1
 800aa48:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	b923      	cbnz	r3, 800aa58 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 800aa4e:	f000 fff7 	bl	800ba40 <vPortExitCritical>
				return pdPASS;
 800aa52:	2001      	movs	r0, #1
}
 800aa54:	b005      	add	sp, #20
 800aa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa58:	f104 0010 	add.w	r0, r4, #16
 800aa5c:	f000 fd80 	bl	800b560 <xTaskRemoveFromEventList>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d0f4      	beq.n	800aa4e <xQueueReceive+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800aa64:	4b34      	ldr	r3, [pc, #208]	; (800ab38 <xQueueReceive+0x160>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	e7eb      	b.n	800aa4e <xQueueReceive+0x76>
					taskEXIT_CRITICAL();
 800aa76:	f000 ffe3 	bl	800ba40 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e7ea      	b.n	800aa54 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa7e:	a802      	add	r0, sp, #8
 800aa80:	f000 fdb6 	bl	800b5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa84:	2601      	movs	r6, #1
 800aa86:	e021      	b.n	800aacc <xQueueReceive+0xf4>
		prvLockQueue( pxQueue );
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800aa8e:	e029      	b.n	800aae4 <xQueueReceive+0x10c>
 800aa90:	2300      	movs	r3, #0
 800aa92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa96:	e02b      	b.n	800aaf0 <xQueueReceive+0x118>
				prvUnlockQueue( pxQueue );
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f7ff fcd1 	bl	800a440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa9e:	f000 fc53 	bl	800b348 <xTaskResumeAll>
 800aaa2:	e009      	b.n	800aab8 <xQueueReceive+0xe0>
			prvUnlockQueue( pxQueue );
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f7ff fccb 	bl	800a440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaaa:	f000 fc4d 	bl	800b348 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaae:	4620      	mov	r0, r4
 800aab0:	f7ff fc6c 	bl	800a38c <prvIsQueueEmpty>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d13d      	bne.n	800ab34 <xQueueReceive+0x15c>
		taskENTER_CRITICAL();
 800aab8:	f000 ff9c 	bl	800b9f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aabc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aabe:	2d00      	cmp	r5, #0
 800aac0:	d1bd      	bne.n	800aa3e <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 800aac2:	9b01      	ldr	r3, [sp, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0d6      	beq.n	800aa76 <xQueueReceive+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	d0d8      	beq.n	800aa7e <xQueueReceive+0xa6>
		taskEXIT_CRITICAL();
 800aacc:	f000 ffb8 	bl	800ba40 <vPortExitCritical>
		vTaskSuspendAll();
 800aad0:	f000 fb96 	bl	800b200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aad4:	f000 ff8e 	bl	800b9f4 <vPortEnterCritical>
 800aad8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aadc:	b25b      	sxtb	r3, r3
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d0d1      	beq.n	800aa88 <xQueueReceive+0xb0>
 800aae4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aae8:	b25b      	sxtb	r3, r3
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaee:	d0cf      	beq.n	800aa90 <xQueueReceive+0xb8>
 800aaf0:	f000 ffa6 	bl	800ba40 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf4:	a901      	add	r1, sp, #4
 800aaf6:	a802      	add	r0, sp, #8
 800aaf8:	f000 fd86 	bl	800b608 <xTaskCheckForTimeOut>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d1d1      	bne.n	800aaa4 <xQueueReceive+0xcc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab00:	4620      	mov	r0, r4
 800ab02:	f7ff fc43 	bl	800a38c <prvIsQueueEmpty>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d0c6      	beq.n	800aa98 <xQueueReceive+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab0a:	9901      	ldr	r1, [sp, #4]
 800ab0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab10:	f000 fd0c 	bl	800b52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab14:	4620      	mov	r0, r4
 800ab16:	f7ff fc93 	bl	800a440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab1a:	f000 fc15 	bl	800b348 <xTaskResumeAll>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d1ca      	bne.n	800aab8 <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 800ab22:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <xQueueReceive+0x160>)
 800ab24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	e7c1      	b.n	800aab8 <xQueueReceive+0xe0>
				return errQUEUE_EMPTY;
 800ab34:	2000      	movs	r0, #0
 800ab36:	e78d      	b.n	800aa54 <xQueueReceive+0x7c>
 800ab38:	e000ed04 	.word	0xe000ed04

0800ab3c <xQueueSemaphoreTake>:
{
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ab42:	b950      	cbnz	r0, 800ab5a <xQueueSemaphoreTake+0x1e>
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	b672      	cpsid	i
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	b662      	cpsie	i
 800ab58:	e7fe      	b.n	800ab58 <xQueueSemaphoreTake+0x1c>
 800ab5a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ab5e:	b153      	cbz	r3, 800ab76 <xQueueSemaphoreTake+0x3a>
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	b672      	cpsid	i
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	b662      	cpsie	i
 800ab74:	e7fe      	b.n	800ab74 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab76:	f000 fd97 	bl	800b6a8 <xTaskGetSchedulerState>
 800ab7a:	b960      	cbnz	r0, 800ab96 <xQueueSemaphoreTake+0x5a>
 800ab7c:	9b01      	ldr	r3, [sp, #4]
 800ab7e:	b16b      	cbz	r3, 800ab9c <xQueueSemaphoreTake+0x60>
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	b672      	cpsid	i
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	b662      	cpsie	i
 800ab94:	e7fe      	b.n	800ab94 <xQueueSemaphoreTake+0x58>
 800ab96:	2500      	movs	r5, #0
 800ab98:	462e      	mov	r6, r5
 800ab9a:	e053      	b.n	800ac44 <xQueueSemaphoreTake+0x108>
 800ab9c:	2500      	movs	r5, #0
 800ab9e:	462e      	mov	r6, r5
 800aba0:	e050      	b.n	800ac44 <xQueueSemaphoreTake+0x108>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aba2:	3b01      	subs	r3, #1
 800aba4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	b913      	cbnz	r3, 800abb0 <xQueueSemaphoreTake+0x74>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800abaa:	f000 fea9 	bl	800b900 <pvTaskIncrementMutexHeldCount>
 800abae:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	b163      	cbz	r3, 800abce <xQueueSemaphoreTake+0x92>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abb4:	f104 0010 	add.w	r0, r4, #16
 800abb8:	f000 fcd2 	bl	800b560 <xTaskRemoveFromEventList>
 800abbc:	b138      	cbz	r0, 800abce <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
 800abbe:	4b49      	ldr	r3, [pc, #292]	; (800ace4 <xQueueSemaphoreTake+0x1a8>)
 800abc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800abce:	f000 ff37 	bl	800ba40 <vPortExitCritical>
				return pdPASS;
 800abd2:	2501      	movs	r5, #1
}
 800abd4:	4628      	mov	r0, r5
 800abd6:	b004      	add	sp, #16
 800abd8:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800abda:	b155      	cbz	r5, 800abf2 <xQueueSemaphoreTake+0xb6>
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	b672      	cpsid	i
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	b662      	cpsie	i
 800abf0:	e7fe      	b.n	800abf0 <xQueueSemaphoreTake+0xb4>
					taskEXIT_CRITICAL();
 800abf2:	f000 ff25 	bl	800ba40 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800abf6:	e7ed      	b.n	800abd4 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abf8:	a802      	add	r0, sp, #8
 800abfa:	f000 fcf9 	bl	800b5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abfe:	2601      	movs	r6, #1
 800ac00:	e02a      	b.n	800ac58 <xQueueSemaphoreTake+0x11c>
		prvLockQueue( pxQueue );
 800ac02:	2300      	movs	r3, #0
 800ac04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ac08:	e032      	b.n	800ac70 <xQueueSemaphoreTake+0x134>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac10:	e034      	b.n	800ac7c <xQueueSemaphoreTake+0x140>
						taskENTER_CRITICAL();
 800ac12:	f000 feef 	bl	800b9f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ac16:	6860      	ldr	r0, [r4, #4]
 800ac18:	f000 fd56 	bl	800b6c8 <xTaskPriorityInherit>
 800ac1c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800ac1e:	f000 ff0f 	bl	800ba40 <vPortExitCritical>
 800ac22:	e03b      	b.n	800ac9c <xQueueSemaphoreTake+0x160>
				prvUnlockQueue( pxQueue );
 800ac24:	4620      	mov	r0, r4
 800ac26:	f7ff fc0b 	bl	800a440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac2a:	f000 fb8d 	bl	800b348 <xTaskResumeAll>
 800ac2e:	e009      	b.n	800ac44 <xQueueSemaphoreTake+0x108>
			prvUnlockQueue( pxQueue );
 800ac30:	4620      	mov	r0, r4
 800ac32:	f7ff fc05 	bl	800a440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac36:	f000 fb87 	bl	800b348 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f7ff fba6 	bl	800a38c <prvIsQueueEmpty>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d140      	bne.n	800acc6 <xQueueSemaphoreTake+0x18a>
		taskENTER_CRITICAL();
 800ac44:	f000 fed6 	bl	800b9f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1a9      	bne.n	800aba2 <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0c2      	beq.n	800abda <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800ac54:	2e00      	cmp	r6, #0
 800ac56:	d0cf      	beq.n	800abf8 <xQueueSemaphoreTake+0xbc>
		taskEXIT_CRITICAL();
 800ac58:	f000 fef2 	bl	800ba40 <vPortExitCritical>
		vTaskSuspendAll();
 800ac5c:	f000 fad0 	bl	800b200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac60:	f000 fec8 	bl	800b9f4 <vPortEnterCritical>
 800ac64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ac68:	b25b      	sxtb	r3, r3
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6e:	d0c8      	beq.n	800ac02 <xQueueSemaphoreTake+0xc6>
 800ac70:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ac74:	b25b      	sxtb	r3, r3
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d0c6      	beq.n	800ac0a <xQueueSemaphoreTake+0xce>
 800ac7c:	f000 fee0 	bl	800ba40 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac80:	a901      	add	r1, sp, #4
 800ac82:	a802      	add	r0, sp, #8
 800ac84:	f000 fcc0 	bl	800b608 <xTaskCheckForTimeOut>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d1d1      	bne.n	800ac30 <xQueueSemaphoreTake+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7ff fb7d 	bl	800a38c <prvIsQueueEmpty>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0c6      	beq.n	800ac24 <xQueueSemaphoreTake+0xe8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d0ba      	beq.n	800ac12 <xQueueSemaphoreTake+0xd6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac9c:	9901      	ldr	r1, [sp, #4]
 800ac9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aca2:	f000 fc43 	bl	800b52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aca6:	4620      	mov	r0, r4
 800aca8:	f7ff fbca 	bl	800a440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acac:	f000 fb4c 	bl	800b348 <xTaskResumeAll>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d1c7      	bne.n	800ac44 <xQueueSemaphoreTake+0x108>
					portYIELD_WITHIN_API();
 800acb4:	4b0b      	ldr	r3, [pc, #44]	; (800ace4 <xQueueSemaphoreTake+0x1a8>)
 800acb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	e7be      	b.n	800ac44 <xQueueSemaphoreTake+0x108>
					if( xInheritanceOccurred != pdFALSE )
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	d084      	beq.n	800abd4 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
 800acca:	f000 fe93 	bl	800b9f4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800acce:	4620      	mov	r0, r4
 800acd0:	f7ff fb44 	bl	800a35c <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800acd4:	4601      	mov	r1, r0
 800acd6:	6860      	ldr	r0, [r4, #4]
 800acd8:	f000 fdae 	bl	800b838 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800acdc:	f000 feb0 	bl	800ba40 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800ace0:	2500      	movs	r5, #0
 800ace2:	e777      	b.n	800abd4 <xQueueSemaphoreTake+0x98>
 800ace4:	e000ed04 	.word	0xe000ed04

0800ace8 <xQueueReceiveFromISR>:
{
 800ace8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800acec:	b170      	cbz	r0, 800ad0c <xQueueReceiveFromISR+0x24>
 800acee:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acf0:	b9b9      	cbnz	r1, 800ad22 <xQueueReceiveFromISR+0x3a>
 800acf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800acf4:	b1ab      	cbz	r3, 800ad22 <xQueueReceiveFromISR+0x3a>
 800acf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfa:	b672      	cpsid	i
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	b662      	cpsie	i
 800ad0a:	e7fe      	b.n	800ad0a <xQueueReceiveFromISR+0x22>
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	b672      	cpsid	i
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	b662      	cpsie	i
 800ad20:	e7fe      	b.n	800ad20 <xQueueReceiveFromISR+0x38>
 800ad22:	4617      	mov	r7, r2
 800ad24:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad26:	f000 ff71 	bl	800bc0c <vPortValidateInterruptPriority>
	__asm volatile
 800ad2a:	f3ef 8611 	mrs	r6, BASEPRI
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	b672      	cpsid	i
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad42:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad46:	f1b8 0f00 	cmp.w	r8, #0
 800ad4a:	d01d      	beq.n	800ad88 <xQueueReceiveFromISR+0xa0>
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad4c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ad50:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad52:	4649      	mov	r1, r9
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7ff fb61 	bl	800a41c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad5e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800ad60:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ad64:	d005      	beq.n	800ad72 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad66:	1c6b      	adds	r3, r5, #1
 800ad68:	b25b      	sxtb	r3, r3
 800ad6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800ad6e:	2001      	movs	r0, #1
 800ad70:	e00b      	b.n	800ad8a <xQueueReceiveFromISR+0xa2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad72:	6923      	ldr	r3, [r4, #16]
 800ad74:	b16b      	cbz	r3, 800ad92 <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad76:	f104 0010 	add.w	r0, r4, #16
 800ad7a:	f000 fbf1 	bl	800b560 <xTaskRemoveFromEventList>
 800ad7e:	b150      	cbz	r0, 800ad96 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 800ad80:	b15f      	cbz	r7, 800ad9a <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad82:	2001      	movs	r0, #1
 800ad84:	6038      	str	r0, [r7, #0]
 800ad86:	e000      	b.n	800ad8a <xQueueReceiveFromISR+0xa2>
			xReturn = pdFAIL;
 800ad88:	2000      	movs	r0, #0
	__asm volatile
 800ad8a:	f386 8811 	msr	BASEPRI, r6
}
 800ad8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 800ad92:	2001      	movs	r0, #1
 800ad94:	e7f9      	b.n	800ad8a <xQueueReceiveFromISR+0xa2>
 800ad96:	2001      	movs	r0, #1
 800ad98:	e7f7      	b.n	800ad8a <xQueueReceiveFromISR+0xa2>
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	e7f5      	b.n	800ad8a <xQueueReceiveFromISR+0xa2>
	...

0800ada0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ada0:	4b08      	ldr	r3, [pc, #32]	; (800adc4 <prvResetNextTaskUnblockTime+0x24>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	b13b      	cbz	r3, 800adb8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ada8:	4b06      	ldr	r3, [pc, #24]	; (800adc4 <prvResetNextTaskUnblockTime+0x24>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <prvResetNextTaskUnblockTime+0x28>)
 800adb4:	601a      	str	r2, [r3, #0]
	}
}
 800adb6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800adb8:	4b03      	ldr	r3, [pc, #12]	; (800adc8 <prvResetNextTaskUnblockTime+0x28>)
 800adba:	f04f 32ff 	mov.w	r2, #4294967295
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20001cf0 	.word	0x20001cf0
 800adc8:	20001dc4 	.word	0x20001dc4

0800adcc <prvInitialiseNewTask>:
{
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	4680      	mov	r8, r0
 800add2:	4699      	mov	r9, r3
 800add4:	9d08      	ldr	r5, [sp, #32]
 800add6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800add8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800adda:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800addc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ade0:	4413      	add	r3, r2
 800ade2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ade6:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adea:	2300      	movs	r3, #0
 800adec:	2b0f      	cmp	r3, #15
 800adee:	d807      	bhi.n	800ae00 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adf0:	5cc8      	ldrb	r0, [r1, r3]
 800adf2:	18e2      	adds	r2, r4, r3
 800adf4:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800adf8:	5cca      	ldrb	r2, [r1, r3]
 800adfa:	b10a      	cbz	r2, 800ae00 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adfc:	3301      	adds	r3, #1
 800adfe:	e7f5      	b.n	800adec <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae00:	2300      	movs	r3, #0
 800ae02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae06:	2d06      	cmp	r5, #6
 800ae08:	d900      	bls.n	800ae0c <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae0a:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800ae0c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ae0e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae10:	f04f 0a00 	mov.w	sl, #0
 800ae14:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae18:	1d20      	adds	r0, r4, #4
 800ae1a:	f7ff fa62 	bl	800a2e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae1e:	f104 0018 	add.w	r0, r4, #24
 800ae22:	f7ff fa5e 	bl	800a2e2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae26:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae28:	f1c5 0507 	rsb	r5, r5, #7
 800ae2c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae2e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800ae30:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae34:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae38:	464a      	mov	r2, r9
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f000 fdaf 	bl	800b9a0 <pxPortInitialiseStack>
 800ae42:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800ae44:	b107      	cbz	r7, 800ae48 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae46:	603c      	str	r4, [r7, #0]
}
 800ae48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ae4c <prvInitialiseTaskLists>:
{
 800ae4c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae4e:	2400      	movs	r4, #0
 800ae50:	e007      	b.n	800ae62 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae52:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800ae56:	0093      	lsls	r3, r2, #2
 800ae58:	480e      	ldr	r0, [pc, #56]	; (800ae94 <prvInitialiseTaskLists+0x48>)
 800ae5a:	4418      	add	r0, r3
 800ae5c:	f7ff fa36 	bl	800a2cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae60:	3401      	adds	r4, #1
 800ae62:	2c06      	cmp	r4, #6
 800ae64:	d9f5      	bls.n	800ae52 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800ae66:	4d0c      	ldr	r5, [pc, #48]	; (800ae98 <prvInitialiseTaskLists+0x4c>)
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f7ff fa2f 	bl	800a2cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae6e:	4c0b      	ldr	r4, [pc, #44]	; (800ae9c <prvInitialiseTaskLists+0x50>)
 800ae70:	4620      	mov	r0, r4
 800ae72:	f7ff fa2b 	bl	800a2cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae76:	480a      	ldr	r0, [pc, #40]	; (800aea0 <prvInitialiseTaskLists+0x54>)
 800ae78:	f7ff fa28 	bl	800a2cc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ae7c:	4809      	ldr	r0, [pc, #36]	; (800aea4 <prvInitialiseTaskLists+0x58>)
 800ae7e:	f7ff fa25 	bl	800a2cc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ae82:	4809      	ldr	r0, [pc, #36]	; (800aea8 <prvInitialiseTaskLists+0x5c>)
 800ae84:	f7ff fa22 	bl	800a2cc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae88:	4b08      	ldr	r3, [pc, #32]	; (800aeac <prvInitialiseTaskLists+0x60>)
 800ae8a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae8c:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <prvInitialiseTaskLists+0x64>)
 800ae8e:	601c      	str	r4, [r3, #0]
}
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
 800ae92:	bf00      	nop
 800ae94:	20001cf8 	.word	0x20001cf8
 800ae98:	20001d9c 	.word	0x20001d9c
 800ae9c:	20001db0 	.word	0x20001db0
 800aea0:	20001dcc 	.word	0x20001dcc
 800aea4:	20001df8 	.word	0x20001df8
 800aea8:	20001de4 	.word	0x20001de4
 800aeac:	20001cf0 	.word	0x20001cf0
 800aeb0:	20001cf4 	.word	0x20001cf4

0800aeb4 <prvAddNewTaskToReadyList>:
{
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800aeb8:	f000 fd9c 	bl	800b9f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800aebc:	4a20      	ldr	r2, [pc, #128]	; (800af40 <prvAddNewTaskToReadyList+0x8c>)
 800aebe:	6813      	ldr	r3, [r2, #0]
 800aec0:	3301      	adds	r3, #1
 800aec2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aec4:	4b1f      	ldr	r3, [pc, #124]	; (800af44 <prvAddNewTaskToReadyList+0x90>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	b15b      	cbz	r3, 800aee2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800aeca:	4b1f      	ldr	r3, [pc, #124]	; (800af48 <prvAddNewTaskToReadyList+0x94>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	b96b      	cbnz	r3, 800aeec <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aed0:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <prvAddNewTaskToReadyList+0x90>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d807      	bhi.n	800aeec <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800aedc:	4b19      	ldr	r3, [pc, #100]	; (800af44 <prvAddNewTaskToReadyList+0x90>)
 800aede:	601c      	str	r4, [r3, #0]
 800aee0:	e004      	b.n	800aeec <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800aee2:	4b18      	ldr	r3, [pc, #96]	; (800af44 <prvAddNewTaskToReadyList+0x90>)
 800aee4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aee6:	6813      	ldr	r3, [r2, #0]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d026      	beq.n	800af3a <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 800aeec:	4a17      	ldr	r2, [pc, #92]	; (800af4c <prvAddNewTaskToReadyList+0x98>)
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800aef4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aef6:	2201      	movs	r2, #1
 800aef8:	409a      	lsls	r2, r3
 800aefa:	4915      	ldr	r1, [pc, #84]	; (800af50 <prvAddNewTaskToReadyList+0x9c>)
 800aefc:	6808      	ldr	r0, [r1, #0]
 800aefe:	4302      	orrs	r2, r0
 800af00:	600a      	str	r2, [r1, #0]
 800af02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800af06:	009a      	lsls	r2, r3, #2
 800af08:	1d21      	adds	r1, r4, #4
 800af0a:	4812      	ldr	r0, [pc, #72]	; (800af54 <prvAddNewTaskToReadyList+0xa0>)
 800af0c:	4410      	add	r0, r2
 800af0e:	f7ff f9eb 	bl	800a2e8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800af12:	f000 fd95 	bl	800ba40 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800af16:	4b0c      	ldr	r3, [pc, #48]	; (800af48 <prvAddNewTaskToReadyList+0x94>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	b16b      	cbz	r3, 800af38 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af1c:	4b09      	ldr	r3, [pc, #36]	; (800af44 <prvAddNewTaskToReadyList+0x90>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af24:	429a      	cmp	r2, r3
 800af26:	d207      	bcs.n	800af38 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 800af28:	4b0b      	ldr	r3, [pc, #44]	; (800af58 <prvAddNewTaskToReadyList+0xa4>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
}
 800af38:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800af3a:	f7ff ff87 	bl	800ae4c <prvInitialiseTaskLists>
 800af3e:	e7d5      	b.n	800aeec <prvAddNewTaskToReadyList+0x38>
 800af40:	20001d84 	.word	0x20001d84
 800af44:	20001cec 	.word	0x20001cec
 800af48:	20001de0 	.word	0x20001de0
 800af4c:	20001d94 	.word	0x20001d94
 800af50:	20001d98 	.word	0x20001d98
 800af54:	20001cf8 	.word	0x20001cf8
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <prvDeleteTCB>:
	{
 800af5c:	b510      	push	{r4, lr}
 800af5e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af60:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800af64:	b933      	cbnz	r3, 800af74 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800af66:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800af68:	f000 ff6a 	bl	800be40 <vPortFree>
				vPortFree( pxTCB );
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 ff67 	bl	800be40 <vPortFree>
	}
 800af72:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af74:	2b01      	cmp	r3, #1
 800af76:	d00c      	beq.n	800af92 <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d0fa      	beq.n	800af72 <prvDeleteTCB+0x16>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	b672      	cpsid	i
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	b662      	cpsie	i
 800af90:	e7fe      	b.n	800af90 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
 800af92:	f000 ff55 	bl	800be40 <vPortFree>
 800af96:	e7ec      	b.n	800af72 <prvDeleteTCB+0x16>

0800af98 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af98:	4b0f      	ldr	r3, [pc, #60]	; (800afd8 <prvCheckTasksWaitingTermination+0x40>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	b1d3      	cbz	r3, 800afd4 <prvCheckTasksWaitingTermination+0x3c>
{
 800af9e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800afa0:	f000 fd28 	bl	800b9f4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <prvCheckTasksWaitingTermination+0x44>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afaa:	1d20      	adds	r0, r4, #4
 800afac:	f7ff f9c2 	bl	800a334 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afb0:	4a0b      	ldr	r2, [pc, #44]	; (800afe0 <prvCheckTasksWaitingTermination+0x48>)
 800afb2:	6813      	ldr	r3, [r2, #0]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afb8:	4a07      	ldr	r2, [pc, #28]	; (800afd8 <prvCheckTasksWaitingTermination+0x40>)
 800afba:	6813      	ldr	r3, [r2, #0]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800afc0:	f000 fd3e 	bl	800ba40 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800afc4:	4620      	mov	r0, r4
 800afc6:	f7ff ffc9 	bl	800af5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afca:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <prvCheckTasksWaitingTermination+0x40>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e6      	bne.n	800afa0 <prvCheckTasksWaitingTermination+0x8>
}
 800afd2:	bd10      	pop	{r4, pc}
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20001d88 	.word	0x20001d88
 800afdc:	20001df8 	.word	0x20001df8
 800afe0:	20001d84 	.word	0x20001d84

0800afe4 <prvIdleTask>:
{
 800afe4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800afe6:	f7ff ffd7 	bl	800af98 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afea:	4b06      	ldr	r3, [pc, #24]	; (800b004 <prvIdleTask+0x20>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d9f9      	bls.n	800afe6 <prvIdleTask+0x2>
				taskYIELD();
 800aff2:	4b05      	ldr	r3, [pc, #20]	; (800b008 <prvIdleTask+0x24>)
 800aff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	e7f0      	b.n	800afe6 <prvIdleTask+0x2>
 800b004:	20001cf8 	.word	0x20001cf8
 800b008:	e000ed04 	.word	0xe000ed04

0800b00c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	4604      	mov	r4, r0
 800b010:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b012:	4b1f      	ldr	r3, [pc, #124]	; (800b090 <prvAddCurrentTaskToDelayedList+0x84>)
 800b014:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b016:	4b1f      	ldr	r3, [pc, #124]	; (800b094 <prvAddCurrentTaskToDelayedList+0x88>)
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	3004      	adds	r0, #4
 800b01c:	f7ff f98a 	bl	800a334 <uxListRemove>
 800b020:	b950      	cbnz	r0, 800b038 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b022:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <prvAddCurrentTaskToDelayedList+0x88>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b028:	2301      	movs	r3, #1
 800b02a:	fa03 f202 	lsl.w	r2, r3, r2
 800b02e:	491a      	ldr	r1, [pc, #104]	; (800b098 <prvAddCurrentTaskToDelayedList+0x8c>)
 800b030:	680b      	ldr	r3, [r1, #0]
 800b032:	ea23 0302 	bic.w	r3, r3, r2
 800b036:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b038:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b03c:	bf14      	ite	ne
 800b03e:	2300      	movne	r3, #0
 800b040:	2301      	moveq	r3, #1
 800b042:	2e00      	cmp	r6, #0
 800b044:	bf08      	it	eq
 800b046:	2300      	moveq	r3, #0
 800b048:	b99b      	cbnz	r3, 800b072 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b04a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b04c:	4b11      	ldr	r3, [pc, #68]	; (800b094 <prvAddCurrentTaskToDelayedList+0x88>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800b052:	42a5      	cmp	r5, r4
 800b054:	d814      	bhi.n	800b080 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b056:	4b11      	ldr	r3, [pc, #68]	; (800b09c <prvAddCurrentTaskToDelayedList+0x90>)
 800b058:	6818      	ldr	r0, [r3, #0]
 800b05a:	4b0e      	ldr	r3, [pc, #56]	; (800b094 <prvAddCurrentTaskToDelayedList+0x88>)
 800b05c:	6819      	ldr	r1, [r3, #0]
 800b05e:	3104      	adds	r1, #4
 800b060:	f7ff f94e 	bl	800a300 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800b064:	4b0e      	ldr	r3, [pc, #56]	; (800b0a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	42a3      	cmp	r3, r4
 800b06a:	d910      	bls.n	800b08e <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800b06c:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b06e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b070:	e00d      	b.n	800b08e <prvAddCurrentTaskToDelayedList+0x82>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b072:	4b08      	ldr	r3, [pc, #32]	; (800b094 <prvAddCurrentTaskToDelayedList+0x88>)
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	3104      	adds	r1, #4
 800b078:	480a      	ldr	r0, [pc, #40]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b07a:	f7ff f935 	bl	800a2e8 <vListInsertEnd>
 800b07e:	e006      	b.n	800b08e <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b080:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b082:	6818      	ldr	r0, [r3, #0]
 800b084:	4b03      	ldr	r3, [pc, #12]	; (800b094 <prvAddCurrentTaskToDelayedList+0x88>)
 800b086:	6819      	ldr	r1, [r3, #0]
 800b088:	3104      	adds	r1, #4
 800b08a:	f7ff f939 	bl	800a300 <vListInsert>
}
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	20001e0c 	.word	0x20001e0c
 800b094:	20001cec 	.word	0x20001cec
 800b098:	20001d98 	.word	0x20001d98
 800b09c:	20001cf0 	.word	0x20001cf0
 800b0a0:	20001dc4 	.word	0x20001dc4
 800b0a4:	20001de4 	.word	0x20001de4
 800b0a8:	20001cf4 	.word	0x20001cf4

0800b0ac <xTaskCreateStatic>:
	{
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b0b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800b0b4:	b955      	cbnz	r5, 800b0cc <xTaskCreateStatic+0x20>
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	b672      	cpsid	i
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	b662      	cpsie	i
 800b0ca:	e7fe      	b.n	800b0ca <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800b0cc:	b954      	cbnz	r4, 800b0e4 <xTaskCreateStatic+0x38>
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	b672      	cpsid	i
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	b662      	cpsie	i
 800b0e2:	e7fe      	b.n	800b0e2 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0e4:	2654      	movs	r6, #84	; 0x54
 800b0e6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0e8:	9e04      	ldr	r6, [sp, #16]
 800b0ea:	2e54      	cmp	r6, #84	; 0x54
 800b0ec:	d00a      	beq.n	800b104 <xTaskCreateStatic+0x58>
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	b672      	cpsid	i
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	b662      	cpsie	i
 800b102:	e7fe      	b.n	800b102 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b104:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b106:	2502      	movs	r5, #2
 800b108:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b10c:	2500      	movs	r5, #0
 800b10e:	9503      	str	r5, [sp, #12]
 800b110:	9402      	str	r4, [sp, #8]
 800b112:	ad05      	add	r5, sp, #20
 800b114:	9501      	str	r5, [sp, #4]
 800b116:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b118:	9500      	str	r5, [sp, #0]
 800b11a:	f7ff fe57 	bl	800adcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff fec8 	bl	800aeb4 <prvAddNewTaskToReadyList>
	}
 800b124:	9805      	ldr	r0, [sp, #20]
 800b126:	b006      	add	sp, #24
 800b128:	bd70      	pop	{r4, r5, r6, pc}

0800b12a <xTaskCreate>:
	{
 800b12a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b12e:	b085      	sub	sp, #20
 800b130:	4607      	mov	r7, r0
 800b132:	4688      	mov	r8, r1
 800b134:	4615      	mov	r5, r2
 800b136:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b138:	0090      	lsls	r0, r2, #2
 800b13a:	f000 fdf7 	bl	800bd2c <pvPortMalloc>
			if( pxStack != NULL )
 800b13e:	b308      	cbz	r0, 800b184 <xTaskCreate+0x5a>
 800b140:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b142:	2054      	movs	r0, #84	; 0x54
 800b144:	f000 fdf2 	bl	800bd2c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b148:	4604      	mov	r4, r0
 800b14a:	b1b8      	cbz	r0, 800b17c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800b14c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800b14e:	b1e4      	cbz	r4, 800b18a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b150:	2300      	movs	r3, #0
 800b152:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	9402      	str	r4, [sp, #8]
 800b15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	464b      	mov	r3, r9
 800b164:	462a      	mov	r2, r5
 800b166:	4641      	mov	r1, r8
 800b168:	4638      	mov	r0, r7
 800b16a:	f7ff fe2f 	bl	800adcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b16e:	4620      	mov	r0, r4
 800b170:	f7ff fea0 	bl	800aeb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b174:	2001      	movs	r0, #1
	}
 800b176:	b005      	add	sp, #20
 800b178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b17c:	4630      	mov	r0, r6
 800b17e:	f000 fe5f 	bl	800be40 <vPortFree>
 800b182:	e7e4      	b.n	800b14e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b184:	f04f 30ff 	mov.w	r0, #4294967295
 800b188:	e7f5      	b.n	800b176 <xTaskCreate+0x4c>
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800b18e:	e7f2      	b.n	800b176 <xTaskCreate+0x4c>

0800b190 <vTaskStartScheduler>:
{
 800b190:	b510      	push	{r4, lr}
 800b192:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b194:	2400      	movs	r4, #0
 800b196:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b198:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b19a:	aa07      	add	r2, sp, #28
 800b19c:	a906      	add	r1, sp, #24
 800b19e:	a805      	add	r0, sp, #20
 800b1a0:	f7f5 f9b6 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1a4:	9b05      	ldr	r3, [sp, #20]
 800b1a6:	9302      	str	r3, [sp, #8]
 800b1a8:	9b06      	ldr	r3, [sp, #24]
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	9400      	str	r4, [sp, #0]
 800b1ae:	4623      	mov	r3, r4
 800b1b0:	9a07      	ldr	r2, [sp, #28]
 800b1b2:	490e      	ldr	r1, [pc, #56]	; (800b1ec <vTaskStartScheduler+0x5c>)
 800b1b4:	480e      	ldr	r0, [pc, #56]	; (800b1f0 <vTaskStartScheduler+0x60>)
 800b1b6:	f7ff ff79 	bl	800b0ac <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b1ba:	b908      	cbnz	r0, 800b1c0 <vTaskStartScheduler+0x30>
}
 800b1bc:	b008      	add	sp, #32
 800b1be:	bd10      	pop	{r4, pc}
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	b672      	cpsid	i
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1d4:	4b07      	ldr	r3, [pc, #28]	; (800b1f4 <vTaskStartScheduler+0x64>)
 800b1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1dc:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <vTaskStartScheduler+0x68>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b1e2:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <vTaskStartScheduler+0x6c>)
 800b1e4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800b1e6:	f000 fca9 	bl	800bb3c <xPortStartScheduler>
 800b1ea:	e7e7      	b.n	800b1bc <vTaskStartScheduler+0x2c>
 800b1ec:	0801ea08 	.word	0x0801ea08
 800b1f0:	0800afe5 	.word	0x0800afe5
 800b1f4:	20001dc4 	.word	0x20001dc4
 800b1f8:	20001de0 	.word	0x20001de0
 800b1fc:	20001e0c 	.word	0x20001e0c

0800b200 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b200:	4a02      	ldr	r2, [pc, #8]	; (800b20c <vTaskSuspendAll+0xc>)
 800b202:	6813      	ldr	r3, [r2, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	6013      	str	r3, [r2, #0]
}
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	20001d90 	.word	0x20001d90

0800b210 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b210:	4b01      	ldr	r3, [pc, #4]	; (800b218 <xTaskGetTickCount+0x8>)
 800b212:	6818      	ldr	r0, [r3, #0]
}
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	20001e0c 	.word	0x20001e0c

0800b21c <xTaskGetTickCountFromISR>:
{
 800b21c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b21e:	f000 fcf5 	bl	800bc0c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800b222:	4b01      	ldr	r3, [pc, #4]	; (800b228 <xTaskGetTickCountFromISR+0xc>)
 800b224:	6818      	ldr	r0, [r3, #0]
}
 800b226:	bd08      	pop	{r3, pc}
 800b228:	20001e0c 	.word	0x20001e0c

0800b22c <xTaskIncrementTick>:
{
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b22e:	4b3b      	ldr	r3, [pc, #236]	; (800b31c <xTaskIncrementTick+0xf0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d166      	bne.n	800b304 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b236:	4b3a      	ldr	r3, [pc, #232]	; (800b320 <xTaskIncrementTick+0xf4>)
 800b238:	681d      	ldr	r5, [r3, #0]
 800b23a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b23c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b23e:	b9d5      	cbnz	r5, 800b276 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800b240:	4b38      	ldr	r3, [pc, #224]	; (800b324 <xTaskIncrementTick+0xf8>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	b153      	cbz	r3, 800b25e <xTaskIncrementTick+0x32>
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	b672      	cpsid	i
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	b662      	cpsie	i
 800b25c:	e7fe      	b.n	800b25c <xTaskIncrementTick+0x30>
 800b25e:	4a31      	ldr	r2, [pc, #196]	; (800b324 <xTaskIncrementTick+0xf8>)
 800b260:	6811      	ldr	r1, [r2, #0]
 800b262:	4b31      	ldr	r3, [pc, #196]	; (800b328 <xTaskIncrementTick+0xfc>)
 800b264:	6818      	ldr	r0, [r3, #0]
 800b266:	6010      	str	r0, [r2, #0]
 800b268:	6019      	str	r1, [r3, #0]
 800b26a:	4a30      	ldr	r2, [pc, #192]	; (800b32c <xTaskIncrementTick+0x100>)
 800b26c:	6813      	ldr	r3, [r2, #0]
 800b26e:	3301      	adds	r3, #1
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	f7ff fd95 	bl	800ada0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b276:	4b2e      	ldr	r3, [pc, #184]	; (800b330 <xTaskIncrementTick+0x104>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	42ab      	cmp	r3, r5
 800b27c:	d938      	bls.n	800b2f0 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 800b27e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b280:	4b2c      	ldr	r3, [pc, #176]	; (800b334 <xTaskIncrementTick+0x108>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b286:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b28a:	009a      	lsls	r2, r3, #2
 800b28c:	4b2a      	ldr	r3, [pc, #168]	; (800b338 <xTaskIncrementTick+0x10c>)
 800b28e:	589b      	ldr	r3, [r3, r2]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d93c      	bls.n	800b30e <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 800b294:	2401      	movs	r4, #1
 800b296:	e03a      	b.n	800b30e <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 800b298:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b29a:	4b22      	ldr	r3, [pc, #136]	; (800b324 <xTaskIncrementTick+0xf8>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	b343      	cbz	r3, 800b2f4 <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b2a2:	4b20      	ldr	r3, [pc, #128]	; (800b324 <xTaskIncrementTick+0xf8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2aa:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	d326      	bcc.n	800b2fe <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2b0:	1d37      	adds	r7, r6, #4
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	f7ff f83e 	bl	800a334 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800b2ba:	b11b      	cbz	r3, 800b2c4 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2bc:	f106 0018 	add.w	r0, r6, #24
 800b2c0:	f7ff f838 	bl	800a334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2c4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	409a      	lsls	r2, r3
 800b2ca:	491c      	ldr	r1, [pc, #112]	; (800b33c <xTaskIncrementTick+0x110>)
 800b2cc:	6808      	ldr	r0, [r1, #0]
 800b2ce:	4302      	orrs	r2, r0
 800b2d0:	600a      	str	r2, [r1, #0]
 800b2d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b2d6:	009a      	lsls	r2, r3, #2
 800b2d8:	4639      	mov	r1, r7
 800b2da:	4817      	ldr	r0, [pc, #92]	; (800b338 <xTaskIncrementTick+0x10c>)
 800b2dc:	4410      	add	r0, r2
 800b2de:	f7ff f803 	bl	800a2e8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2e2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800b2e4:	4b13      	ldr	r3, [pc, #76]	; (800b334 <xTaskIncrementTick+0x108>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d2d4      	bcs.n	800b298 <xTaskIncrementTick+0x6c>
 800b2ee:	e7d4      	b.n	800b29a <xTaskIncrementTick+0x6e>
BaseType_t xSwitchRequired = pdFALSE;
 800b2f0:	2400      	movs	r4, #0
 800b2f2:	e7d2      	b.n	800b29a <xTaskIncrementTick+0x6e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f4:	4b0e      	ldr	r3, [pc, #56]	; (800b330 <xTaskIncrementTick+0x104>)
 800b2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fa:	601a      	str	r2, [r3, #0]
					break;
 800b2fc:	e7c0      	b.n	800b280 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 800b2fe:	4a0c      	ldr	r2, [pc, #48]	; (800b330 <xTaskIncrementTick+0x104>)
 800b300:	6013      	str	r3, [r2, #0]
						break;
 800b302:	e7bd      	b.n	800b280 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 800b304:	4a0e      	ldr	r2, [pc, #56]	; (800b340 <xTaskIncrementTick+0x114>)
 800b306:	6813      	ldr	r3, [r2, #0]
 800b308:	3301      	adds	r3, #1
 800b30a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800b30c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800b30e:	4b0d      	ldr	r3, [pc, #52]	; (800b344 <xTaskIncrementTick+0x118>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	b103      	cbz	r3, 800b316 <xTaskIncrementTick+0xea>
			xSwitchRequired = pdTRUE;
 800b314:	2401      	movs	r4, #1
}
 800b316:	4620      	mov	r0, r4
 800b318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20001d90 	.word	0x20001d90
 800b320:	20001e0c 	.word	0x20001e0c
 800b324:	20001cf0 	.word	0x20001cf0
 800b328:	20001cf4 	.word	0x20001cf4
 800b32c:	20001dc8 	.word	0x20001dc8
 800b330:	20001dc4 	.word	0x20001dc4
 800b334:	20001cec 	.word	0x20001cec
 800b338:	20001cf8 	.word	0x20001cf8
 800b33c:	20001d98 	.word	0x20001d98
 800b340:	20001d8c 	.word	0x20001d8c
 800b344:	20001e10 	.word	0x20001e10

0800b348 <xTaskResumeAll>:
{
 800b348:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800b34a:	4b34      	ldr	r3, [pc, #208]	; (800b41c <xTaskResumeAll+0xd4>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	b953      	cbnz	r3, 800b366 <xTaskResumeAll+0x1e>
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	b672      	cpsid	i
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	b662      	cpsie	i
 800b364:	e7fe      	b.n	800b364 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800b366:	f000 fb45 	bl	800b9f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800b36a:	4b2c      	ldr	r3, [pc, #176]	; (800b41c <xTaskResumeAll+0xd4>)
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	3a01      	subs	r2, #1
 800b370:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d14d      	bne.n	800b414 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b378:	4b29      	ldr	r3, [pc, #164]	; (800b420 <xTaskResumeAll+0xd8>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	b923      	cbnz	r3, 800b388 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800b37e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b380:	f000 fb5e 	bl	800ba40 <vPortExitCritical>
}
 800b384:	4620      	mov	r0, r4
 800b386:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800b388:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b38a:	4b26      	ldr	r3, [pc, #152]	; (800b424 <xTaskResumeAll+0xdc>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	b31b      	cbz	r3, 800b3d8 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b390:	4b24      	ldr	r3, [pc, #144]	; (800b424 <xTaskResumeAll+0xdc>)
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b396:	f104 0018 	add.w	r0, r4, #24
 800b39a:	f7fe ffcb 	bl	800a334 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b39e:	1d25      	adds	r5, r4, #4
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	f7fe ffc7 	bl	800a334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	409a      	lsls	r2, r3
 800b3ac:	491e      	ldr	r1, [pc, #120]	; (800b428 <xTaskResumeAll+0xe0>)
 800b3ae:	6808      	ldr	r0, [r1, #0]
 800b3b0:	4302      	orrs	r2, r0
 800b3b2:	600a      	str	r2, [r1, #0]
 800b3b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b3b8:	009a      	lsls	r2, r3, #2
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	481b      	ldr	r0, [pc, #108]	; (800b42c <xTaskResumeAll+0xe4>)
 800b3be:	4410      	add	r0, r2
 800b3c0:	f7fe ff92 	bl	800a2e8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b3c6:	4b1a      	ldr	r3, [pc, #104]	; (800b430 <xTaskResumeAll+0xe8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d3dc      	bcc.n	800b38a <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 800b3d0:	4b18      	ldr	r3, [pc, #96]	; (800b434 <xTaskResumeAll+0xec>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	e7d8      	b.n	800b38a <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 800b3d8:	b10c      	cbz	r4, 800b3de <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 800b3da:	f7ff fce1 	bl	800ada0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b3de:	4b16      	ldr	r3, [pc, #88]	; (800b438 <xTaskResumeAll+0xf0>)
 800b3e0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b3e2:	b154      	cbz	r4, 800b3fa <xTaskResumeAll+0xb2>
							if( xTaskIncrementTick() != pdFALSE )
 800b3e4:	f7ff ff22 	bl	800b22c <xTaskIncrementTick>
 800b3e8:	b110      	cbz	r0, 800b3f0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800b3ea:	4b12      	ldr	r3, [pc, #72]	; (800b434 <xTaskResumeAll+0xec>)
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b3f0:	3c01      	subs	r4, #1
 800b3f2:	d1f7      	bne.n	800b3e4 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800b3f4:	4b10      	ldr	r3, [pc, #64]	; (800b438 <xTaskResumeAll+0xf0>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800b3fa:	4b0e      	ldr	r3, [pc, #56]	; (800b434 <xTaskResumeAll+0xec>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	b15b      	cbz	r3, 800b418 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 800b400:	4b0e      	ldr	r3, [pc, #56]	; (800b43c <xTaskResumeAll+0xf4>)
 800b402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b410:	2401      	movs	r4, #1
 800b412:	e7b5      	b.n	800b380 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800b414:	2400      	movs	r4, #0
 800b416:	e7b3      	b.n	800b380 <xTaskResumeAll+0x38>
 800b418:	2400      	movs	r4, #0
 800b41a:	e7b1      	b.n	800b380 <xTaskResumeAll+0x38>
 800b41c:	20001d90 	.word	0x20001d90
 800b420:	20001d84 	.word	0x20001d84
 800b424:	20001dcc 	.word	0x20001dcc
 800b428:	20001d98 	.word	0x20001d98
 800b42c:	20001cf8 	.word	0x20001cf8
 800b430:	20001cec 	.word	0x20001cec
 800b434:	20001e10 	.word	0x20001e10
 800b438:	20001d8c 	.word	0x20001d8c
 800b43c:	e000ed04 	.word	0xe000ed04

0800b440 <vTaskDelay>:
	{
 800b440:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b442:	b1b8      	cbz	r0, 800b474 <vTaskDelay+0x34>
 800b444:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800b446:	4b10      	ldr	r3, [pc, #64]	; (800b488 <vTaskDelay+0x48>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	b153      	cbz	r3, 800b462 <vTaskDelay+0x22>
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	b672      	cpsid	i
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	b662      	cpsie	i
 800b460:	e7fe      	b.n	800b460 <vTaskDelay+0x20>
			vTaskSuspendAll();
 800b462:	f7ff fecd 	bl	800b200 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b466:	2100      	movs	r1, #0
 800b468:	4620      	mov	r0, r4
 800b46a:	f7ff fdcf 	bl	800b00c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800b46e:	f7ff ff6b 	bl	800b348 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b472:	b938      	cbnz	r0, 800b484 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800b474:	4b05      	ldr	r3, [pc, #20]	; (800b48c <vTaskDelay+0x4c>)
 800b476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	f3bf 8f6f 	isb	sy
	}
 800b484:	bd10      	pop	{r4, pc}
 800b486:	bf00      	nop
 800b488:	20001d90 	.word	0x20001d90
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b490:	4b21      	ldr	r3, [pc, #132]	; (800b518 <vTaskSwitchContext+0x88>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	b11b      	cbz	r3, 800b49e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b496:	4b21      	ldr	r3, [pc, #132]	; (800b51c <vTaskSwitchContext+0x8c>)
 800b498:	2201      	movs	r2, #1
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b49e:	4b1f      	ldr	r3, [pc, #124]	; (800b51c <vTaskSwitchContext+0x8c>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b4a4:	4b1e      	ldr	r3, [pc, #120]	; (800b520 <vTaskSwitchContext+0x90>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b4a8:	fab3 f383 	clz	r3, r3
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	f1c3 031f 	rsb	r3, r3, #31
 800b4b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b4b6:	008a      	lsls	r2, r1, #2
 800b4b8:	491a      	ldr	r1, [pc, #104]	; (800b524 <vTaskSwitchContext+0x94>)
 800b4ba:	588a      	ldr	r2, [r1, r2]
 800b4bc:	b952      	cbnz	r2, 800b4d4 <vTaskSwitchContext+0x44>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	b672      	cpsid	i
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	b662      	cpsie	i
 800b4d2:	e7fe      	b.n	800b4d2 <vTaskSwitchContext+0x42>
{
 800b4d4:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b4d6:	4813      	ldr	r0, [pc, #76]	; (800b524 <vTaskSwitchContext+0x94>)
 800b4d8:	009a      	lsls	r2, r3, #2
 800b4da:	18d4      	adds	r4, r2, r3
 800b4dc:	00a1      	lsls	r1, r4, #2
 800b4de:	4401      	add	r1, r0
 800b4e0:	684c      	ldr	r4, [r1, #4]
 800b4e2:	6864      	ldr	r4, [r4, #4]
 800b4e4:	604c      	str	r4, [r1, #4]
 800b4e6:	441a      	add	r2, r3
 800b4e8:	0091      	lsls	r1, r2, #2
 800b4ea:	3108      	adds	r1, #8
 800b4ec:	4408      	add	r0, r1
 800b4ee:	4284      	cmp	r4, r0
 800b4f0:	d00b      	beq.n	800b50a <vTaskSwitchContext+0x7a>
 800b4f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b4f6:	009a      	lsls	r2, r3, #2
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <vTaskSwitchContext+0x94>)
 800b4fa:	4413      	add	r3, r2
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	68da      	ldr	r2, [r3, #12]
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <vTaskSwitchContext+0x98>)
 800b502:	601a      	str	r2, [r3, #0]
}
 800b504:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b508:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b50a:	6861      	ldr	r1, [r4, #4]
 800b50c:	4805      	ldr	r0, [pc, #20]	; (800b524 <vTaskSwitchContext+0x94>)
 800b50e:	2214      	movs	r2, #20
 800b510:	fb02 0203 	mla	r2, r2, r3, r0
 800b514:	6051      	str	r1, [r2, #4]
 800b516:	e7ec      	b.n	800b4f2 <vTaskSwitchContext+0x62>
 800b518:	20001d90 	.word	0x20001d90
 800b51c:	20001e10 	.word	0x20001e10
 800b520:	20001d98 	.word	0x20001d98
 800b524:	20001cf8 	.word	0x20001cf8
 800b528:	20001cec 	.word	0x20001cec

0800b52c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800b52c:	b950      	cbnz	r0, 800b544 <vTaskPlaceOnEventList+0x18>
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	b672      	cpsid	i
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	b662      	cpsie	i
 800b542:	e7fe      	b.n	800b542 <vTaskPlaceOnEventList+0x16>
{
 800b544:	b510      	push	{r4, lr}
 800b546:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b548:	4b04      	ldr	r3, [pc, #16]	; (800b55c <vTaskPlaceOnEventList+0x30>)
 800b54a:	6819      	ldr	r1, [r3, #0]
 800b54c:	3118      	adds	r1, #24
 800b54e:	f7fe fed7 	bl	800a300 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b552:	2101      	movs	r1, #1
 800b554:	4620      	mov	r0, r4
 800b556:	f7ff fd59 	bl	800b00c <prvAddCurrentTaskToDelayedList>
}
 800b55a:	bd10      	pop	{r4, pc}
 800b55c:	20001cec 	.word	0x20001cec

0800b560 <xTaskRemoveFromEventList>:
{
 800b560:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b562:	68c3      	ldr	r3, [r0, #12]
 800b564:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b566:	b954      	cbnz	r4, 800b57e <xTaskRemoveFromEventList+0x1e>
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	b672      	cpsid	i
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	b662      	cpsie	i
 800b57c:	e7fe      	b.n	800b57c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b57e:	f104 0518 	add.w	r5, r4, #24
 800b582:	4628      	mov	r0, r5
 800b584:	f7fe fed6 	bl	800a334 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b588:	4b13      	ldr	r3, [pc, #76]	; (800b5d8 <xTaskRemoveFromEventList+0x78>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	b9e3      	cbnz	r3, 800b5c8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b58e:	1d25      	adds	r5, r4, #4
 800b590:	4628      	mov	r0, r5
 800b592:	f7fe fecf 	bl	800a334 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b598:	2201      	movs	r2, #1
 800b59a:	409a      	lsls	r2, r3
 800b59c:	490f      	ldr	r1, [pc, #60]	; (800b5dc <xTaskRemoveFromEventList+0x7c>)
 800b59e:	6808      	ldr	r0, [r1, #0]
 800b5a0:	4302      	orrs	r2, r0
 800b5a2:	600a      	str	r2, [r1, #0]
 800b5a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b5a8:	009a      	lsls	r2, r3, #2
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	480c      	ldr	r0, [pc, #48]	; (800b5e0 <xTaskRemoveFromEventList+0x80>)
 800b5ae:	4410      	add	r0, r2
 800b5b0:	f7fe fe9a 	bl	800a2e8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <xTaskRemoveFromEventList+0x84>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d908      	bls.n	800b5d2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <xTaskRemoveFromEventList+0x88>)
 800b5c4:	6018      	str	r0, [r3, #0]
}
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4808      	ldr	r0, [pc, #32]	; (800b5ec <xTaskRemoveFromEventList+0x8c>)
 800b5cc:	f7fe fe8c 	bl	800a2e8 <vListInsertEnd>
 800b5d0:	e7f0      	b.n	800b5b4 <xTaskRemoveFromEventList+0x54>
		xReturn = pdFALSE;
 800b5d2:	2000      	movs	r0, #0
	return xReturn;
 800b5d4:	e7f7      	b.n	800b5c6 <xTaskRemoveFromEventList+0x66>
 800b5d6:	bf00      	nop
 800b5d8:	20001d90 	.word	0x20001d90
 800b5dc:	20001d98 	.word	0x20001d98
 800b5e0:	20001cf8 	.word	0x20001cf8
 800b5e4:	20001cec 	.word	0x20001cec
 800b5e8:	20001e10 	.word	0x20001e10
 800b5ec:	20001dcc 	.word	0x20001dcc

0800b5f0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5f0:	4b03      	ldr	r3, [pc, #12]	; (800b600 <vTaskInternalSetTimeOutState+0x10>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5f6:	4b03      	ldr	r3, [pc, #12]	; (800b604 <vTaskInternalSetTimeOutState+0x14>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	6043      	str	r3, [r0, #4]
}
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	20001dc8 	.word	0x20001dc8
 800b604:	20001e0c 	.word	0x20001e0c

0800b608 <xTaskCheckForTimeOut>:
{
 800b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800b60a:	b160      	cbz	r0, 800b626 <xTaskCheckForTimeOut+0x1e>
 800b60c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800b60e:	b9a9      	cbnz	r1, 800b63c <xTaskCheckForTimeOut+0x34>
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	b672      	cpsid	i
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	b662      	cpsie	i
 800b624:	e7fe      	b.n	800b624 <xTaskCheckForTimeOut+0x1c>
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	b672      	cpsid	i
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	b662      	cpsie	i
 800b63a:	e7fe      	b.n	800b63a <xTaskCheckForTimeOut+0x32>
 800b63c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800b63e:	f000 f9d9 	bl	800b9f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b642:	4b11      	ldr	r3, [pc, #68]	; (800b688 <xTaskCheckForTimeOut+0x80>)
 800b644:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b646:	6868      	ldr	r0, [r5, #4]
 800b648:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b650:	d016      	beq.n	800b680 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b652:	682f      	ldr	r7, [r5, #0]
 800b654:	4e0d      	ldr	r6, [pc, #52]	; (800b68c <xTaskCheckForTimeOut+0x84>)
 800b656:	6836      	ldr	r6, [r6, #0]
 800b658:	42b7      	cmp	r7, r6
 800b65a:	d001      	beq.n	800b660 <xTaskCheckForTimeOut+0x58>
 800b65c:	4288      	cmp	r0, r1
 800b65e:	d911      	bls.n	800b684 <xTaskCheckForTimeOut+0x7c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b660:	4293      	cmp	r3, r2
 800b662:	d803      	bhi.n	800b66c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800b668:	2401      	movs	r4, #1
 800b66a:	e005      	b.n	800b678 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800b66c:	1a9b      	subs	r3, r3, r2
 800b66e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b670:	4628      	mov	r0, r5
 800b672:	f7ff ffbd 	bl	800b5f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b676:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b678:	f000 f9e2 	bl	800ba40 <vPortExitCritical>
}
 800b67c:	4620      	mov	r0, r4
 800b67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800b680:	2400      	movs	r4, #0
 800b682:	e7f9      	b.n	800b678 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 800b684:	2401      	movs	r4, #1
 800b686:	e7f7      	b.n	800b678 <xTaskCheckForTimeOut+0x70>
 800b688:	20001e0c 	.word	0x20001e0c
 800b68c:	20001dc8 	.word	0x20001dc8

0800b690 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b690:	4b01      	ldr	r3, [pc, #4]	; (800b698 <vTaskMissedYield+0x8>)
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
}
 800b696:	4770      	bx	lr
 800b698:	20001e10 	.word	0x20001e10

0800b69c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800b69c:	4b01      	ldr	r3, [pc, #4]	; (800b6a4 <xTaskGetCurrentTaskHandle+0x8>)
 800b69e:	6818      	ldr	r0, [r3, #0]
	}
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	20001cec 	.word	0x20001cec

0800b6a8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b6a8:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <xTaskGetSchedulerState+0x18>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	b133      	cbz	r3, 800b6bc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ae:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <xTaskGetSchedulerState+0x1c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	b10b      	cbz	r3, 800b6b8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6b4:	2000      	movs	r0, #0
	}
 800b6b6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800b6b8:	2002      	movs	r0, #2
 800b6ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6bc:	2001      	movs	r0, #1
 800b6be:	4770      	bx	lr
 800b6c0:	20001de0 	.word	0x20001de0
 800b6c4:	20001d90 	.word	0x20001d90

0800b6c8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d050      	beq.n	800b76e <xTaskPriorityInherit+0xa6>
	{
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b6d2:	4928      	ldr	r1, [pc, #160]	; (800b774 <xTaskPriorityInherit+0xac>)
 800b6d4:	6809      	ldr	r1, [r1, #0]
 800b6d6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800b6d8:	428a      	cmp	r2, r1
 800b6da:	d23e      	bcs.n	800b75a <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6dc:	6981      	ldr	r1, [r0, #24]
 800b6de:	2900      	cmp	r1, #0
 800b6e0:	db05      	blt.n	800b6ee <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e2:	4924      	ldr	r1, [pc, #144]	; (800b774 <xTaskPriorityInherit+0xac>)
 800b6e4:	6809      	ldr	r1, [r1, #0]
 800b6e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800b6e8:	f1c1 0107 	rsb	r1, r1, #7
 800b6ec:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6ee:	6960      	ldr	r0, [r4, #20]
 800b6f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b6f4:	0091      	lsls	r1, r2, #2
 800b6f6:	4a20      	ldr	r2, [pc, #128]	; (800b778 <xTaskPriorityInherit+0xb0>)
 800b6f8:	440a      	add	r2, r1
 800b6fa:	4290      	cmp	r0, r2
 800b6fc:	d005      	beq.n	800b70a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6fe:	4a1d      	ldr	r2, [pc, #116]	; (800b774 <xTaskPriorityInherit+0xac>)
 800b700:	6812      	ldr	r2, [r2, #0]
 800b702:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b704:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800b706:	2001      	movs	r0, #1
	}
 800b708:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b70a:	1d25      	adds	r5, r4, #4
 800b70c:	4628      	mov	r0, r5
 800b70e:	f7fe fe11 	bl	800a334 <uxListRemove>
 800b712:	b968      	cbnz	r0, 800b730 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b714:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b716:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b71a:	008a      	lsls	r2, r1, #2
 800b71c:	4916      	ldr	r1, [pc, #88]	; (800b778 <xTaskPriorityInherit+0xb0>)
 800b71e:	588a      	ldr	r2, [r1, r2]
 800b720:	b932      	cbnz	r2, 800b730 <xTaskPriorityInherit+0x68>
 800b722:	2201      	movs	r2, #1
 800b724:	409a      	lsls	r2, r3
 800b726:	4915      	ldr	r1, [pc, #84]	; (800b77c <xTaskPriorityInherit+0xb4>)
 800b728:	680b      	ldr	r3, [r1, #0]
 800b72a:	ea23 0302 	bic.w	r3, r3, r2
 800b72e:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b730:	4b10      	ldr	r3, [pc, #64]	; (800b774 <xTaskPriorityInherit+0xac>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b738:	2401      	movs	r4, #1
 800b73a:	fa04 f203 	lsl.w	r2, r4, r3
 800b73e:	490f      	ldr	r1, [pc, #60]	; (800b77c <xTaskPriorityInherit+0xb4>)
 800b740:	6808      	ldr	r0, [r1, #0]
 800b742:	4302      	orrs	r2, r0
 800b744:	600a      	str	r2, [r1, #0]
 800b746:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b74a:	009a      	lsls	r2, r3, #2
 800b74c:	4629      	mov	r1, r5
 800b74e:	480a      	ldr	r0, [pc, #40]	; (800b778 <xTaskPriorityInherit+0xb0>)
 800b750:	4410      	add	r0, r2
 800b752:	f7fe fdc9 	bl	800a2e8 <vListInsertEnd>
				xReturn = pdTRUE;
 800b756:	4620      	mov	r0, r4
 800b758:	e7d6      	b.n	800b708 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b75a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b75c:	4b05      	ldr	r3, [pc, #20]	; (800b774 <xTaskPriorityInherit+0xac>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	429a      	cmp	r2, r3
 800b764:	d201      	bcs.n	800b76a <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 800b766:	2001      	movs	r0, #1
		return xReturn;
 800b768:	e7ce      	b.n	800b708 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800b76a:	2000      	movs	r0, #0
 800b76c:	e7cc      	b.n	800b708 <xTaskPriorityInherit+0x40>
 800b76e:	2000      	movs	r0, #0
	}
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	20001cec 	.word	0x20001cec
 800b778:	20001cf8 	.word	0x20001cf8
 800b77c:	20001d98 	.word	0x20001d98

0800b780 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800b780:	2800      	cmp	r0, #0
 800b782:	d04d      	beq.n	800b820 <xTaskPriorityDisinherit+0xa0>
	{
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800b788:	4a28      	ldr	r2, [pc, #160]	; (800b82c <xTaskPriorityDisinherit+0xac>)
 800b78a:	6812      	ldr	r2, [r2, #0]
 800b78c:	4282      	cmp	r2, r0
 800b78e:	d00a      	beq.n	800b7a6 <xTaskPriorityDisinherit+0x26>
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	b672      	cpsid	i
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	b662      	cpsie	i
 800b7a4:	e7fe      	b.n	800b7a4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7a6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800b7a8:	b952      	cbnz	r2, 800b7c0 <xTaskPriorityDisinherit+0x40>
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	b672      	cpsid	i
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	b662      	cpsie	i
 800b7be:	e7fe      	b.n	800b7be <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 800b7c0:	3a01      	subs	r2, #1
 800b7c2:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800b7c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b7c8:	4288      	cmp	r0, r1
 800b7ca:	d02b      	beq.n	800b824 <xTaskPriorityDisinherit+0xa4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7cc:	bb62      	cbnz	r2, 800b828 <xTaskPriorityDisinherit+0xa8>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7ce:	1d25      	adds	r5, r4, #4
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	f7fe fdaf 	bl	800a334 <uxListRemove>
 800b7d6:	b970      	cbnz	r0, 800b7f6 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b7d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7da:	2314      	movs	r3, #20
 800b7dc:	fb03 f302 	mul.w	r3, r3, r2
 800b7e0:	4913      	ldr	r1, [pc, #76]	; (800b830 <xTaskPriorityDisinherit+0xb0>)
 800b7e2:	58cb      	ldr	r3, [r1, r3]
 800b7e4:	b93b      	cbnz	r3, 800b7f6 <xTaskPriorityDisinherit+0x76>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	fa03 f202 	lsl.w	r2, r3, r2
 800b7ec:	4911      	ldr	r1, [pc, #68]	; (800b834 <xTaskPriorityDisinherit+0xb4>)
 800b7ee:	680b      	ldr	r3, [r1, #0]
 800b7f0:	ea23 0302 	bic.w	r3, r3, r2
 800b7f4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7fa:	f1c3 0207 	rsb	r2, r3, #7
 800b7fe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b800:	2401      	movs	r4, #1
 800b802:	fa04 f203 	lsl.w	r2, r4, r3
 800b806:	490b      	ldr	r1, [pc, #44]	; (800b834 <xTaskPriorityDisinherit+0xb4>)
 800b808:	6808      	ldr	r0, [r1, #0]
 800b80a:	4302      	orrs	r2, r0
 800b80c:	600a      	str	r2, [r1, #0]
 800b80e:	4629      	mov	r1, r5
 800b810:	4a07      	ldr	r2, [pc, #28]	; (800b830 <xTaskPriorityDisinherit+0xb0>)
 800b812:	2014      	movs	r0, #20
 800b814:	fb00 2003 	mla	r0, r0, r3, r2
 800b818:	f7fe fd66 	bl	800a2e8 <vListInsertEnd>
					xReturn = pdTRUE;
 800b81c:	4620      	mov	r0, r4
	}
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800b820:	2000      	movs	r0, #0
	}
 800b822:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800b824:	2000      	movs	r0, #0
 800b826:	e7fa      	b.n	800b81e <xTaskPriorityDisinherit+0x9e>
 800b828:	2000      	movs	r0, #0
		return xReturn;
 800b82a:	e7f8      	b.n	800b81e <xTaskPriorityDisinherit+0x9e>
 800b82c:	20001cec 	.word	0x20001cec
 800b830:	20001cf8 	.word	0x20001cf8
 800b834:	20001d98 	.word	0x20001d98

0800b838 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800b838:	2800      	cmp	r0, #0
 800b83a:	d059      	beq.n	800b8f0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800b840:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800b842:	b950      	cbnz	r0, 800b85a <vTaskPriorityDisinheritAfterTimeout+0x22>
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	b672      	cpsid	i
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	b662      	cpsie	i
 800b858:	e7fe      	b.n	800b858 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b85a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b85c:	428a      	cmp	r2, r1
 800b85e:	d200      	bcs.n	800b862 <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b860:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b862:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b864:	4291      	cmp	r1, r2
 800b866:	d001      	beq.n	800b86c <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b868:	2801      	cmp	r0, #1
 800b86a:	d000      	beq.n	800b86e <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 800b86c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800b86e:	4821      	ldr	r0, [pc, #132]	; (800b8f4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800b870:	6800      	ldr	r0, [r0, #0]
 800b872:	4298      	cmp	r0, r3
 800b874:	d10a      	bne.n	800b88c <vTaskPriorityDisinheritAfterTimeout+0x54>
 800b876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87a:	b672      	cpsid	i
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	b662      	cpsie	i
 800b88a:	e7fe      	b.n	800b88a <vTaskPriorityDisinheritAfterTimeout+0x52>
					pxTCB->uxPriority = uxPriorityToUse;
 800b88c:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b88e:	6998      	ldr	r0, [r3, #24]
 800b890:	2800      	cmp	r0, #0
 800b892:	db02      	blt.n	800b89a <vTaskPriorityDisinheritAfterTimeout+0x62>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b894:	f1c2 0207 	rsb	r2, r2, #7
 800b898:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b89a:	695a      	ldr	r2, [r3, #20]
 800b89c:	4816      	ldr	r0, [pc, #88]	; (800b8f8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800b89e:	2414      	movs	r4, #20
 800b8a0:	fb04 0101 	mla	r1, r4, r1, r0
 800b8a4:	428a      	cmp	r2, r1
 800b8a6:	d1e1      	bne.n	800b86c <vTaskPriorityDisinheritAfterTimeout+0x34>
 800b8a8:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8aa:	1d1d      	adds	r5, r3, #4
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	f7fe fd41 	bl	800a334 <uxListRemove>
 800b8b2:	b970      	cbnz	r0, 800b8d2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b8b6:	2314      	movs	r3, #20
 800b8b8:	fb03 f302 	mul.w	r3, r3, r2
 800b8bc:	490e      	ldr	r1, [pc, #56]	; (800b8f8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800b8be:	58cb      	ldr	r3, [r1, r3]
 800b8c0:	b93b      	cbnz	r3, 800b8d2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	fa03 f202 	lsl.w	r2, r3, r2
 800b8c8:	490c      	ldr	r1, [pc, #48]	; (800b8fc <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800b8ca:	680b      	ldr	r3, [r1, #0]
 800b8cc:	ea23 0302 	bic.w	r3, r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800b8d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	4093      	lsls	r3, r2
 800b8d8:	4908      	ldr	r1, [pc, #32]	; (800b8fc <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800b8da:	6808      	ldr	r0, [r1, #0]
 800b8dc:	4303      	orrs	r3, r0
 800b8de:	600b      	str	r3, [r1, #0]
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4b05      	ldr	r3, [pc, #20]	; (800b8f8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800b8e4:	2014      	movs	r0, #20
 800b8e6:	fb00 3002 	mla	r0, r0, r2, r3
 800b8ea:	f7fe fcfd 	bl	800a2e8 <vListInsertEnd>
	}
 800b8ee:	e7bd      	b.n	800b86c <vTaskPriorityDisinheritAfterTimeout+0x34>
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	20001cec 	.word	0x20001cec
 800b8f8:	20001cf8 	.word	0x20001cf8
 800b8fc:	20001d98 	.word	0x20001d98

0800b900 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b900:	4b05      	ldr	r3, [pc, #20]	; (800b918 <pvTaskIncrementMutexHeldCount+0x18>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	b123      	cbz	r3, 800b910 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b906:	4b04      	ldr	r3, [pc, #16]	; (800b918 <pvTaskIncrementMutexHeldCount+0x18>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800b90c:	3301      	adds	r3, #1
 800b90e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 800b910:	4b01      	ldr	r3, [pc, #4]	; (800b918 <pvTaskIncrementMutexHeldCount+0x18>)
 800b912:	6818      	ldr	r0, [r3, #0]
	}
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	20001cec 	.word	0x20001cec

0800b91c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b91c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b922:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <prvTaskExitError+0x44>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	d00a      	beq.n	800b942 <prvTaskExitError+0x26>
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	b672      	cpsid	i
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	b662      	cpsie	i
 800b940:	e7fe      	b.n	800b940 <prvTaskExitError+0x24>
 800b942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b946:	b672      	cpsid	i
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b956:	9b01      	ldr	r3, [sp, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d0fc      	beq.n	800b956 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b95c:	b002      	add	sp, #8
 800b95e:	4770      	bx	lr
 800b960:	2000020c 	.word	0x2000020c

0800b964 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b964:	4808      	ldr	r0, [pc, #32]	; (800b988 <prvPortStartFirstTask+0x24>)
 800b966:	6800      	ldr	r0, [r0, #0]
 800b968:	6800      	ldr	r0, [r0, #0]
 800b96a:	f380 8808 	msr	MSP, r0
 800b96e:	f04f 0000 	mov.w	r0, #0
 800b972:	f380 8814 	msr	CONTROL, r0
 800b976:	b662      	cpsie	i
 800b978:	b661      	cpsie	f
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	df00      	svc	0
 800b984:	bf00      	nop
 800b986:	0000      	.short	0x0000
 800b988:	e000ed08 	.word	0xe000ed08

0800b98c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b98c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b99c <vPortEnableVFP+0x10>
 800b990:	6801      	ldr	r1, [r0, #0]
 800b992:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b996:	6001      	str	r1, [r0, #0]
 800b998:	4770      	bx	lr
 800b99a:	0000      	.short	0x0000
 800b99c:	e000ed88 	.word	0xe000ed88

0800b9a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9a8:	f021 0101 	bic.w	r1, r1, #1
 800b9ac:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9b0:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <pxPortInitialiseStack+0x28>)
 800b9b2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9b6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9ba:	f06f 0302 	mvn.w	r3, #2
 800b9be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b9c2:	3844      	subs	r0, #68	; 0x44
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	0800b91d 	.word	0x0800b91d
 800b9cc:	00000000 	.word	0x00000000

0800b9d0 <SVC_Handler>:
	__asm volatile (
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <pxCurrentTCBConst2>)
 800b9d2:	6819      	ldr	r1, [r3, #0]
 800b9d4:	6808      	ldr	r0, [r1, #0]
 800b9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	f380 8809 	msr	PSP, r0
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f04f 0000 	mov.w	r0, #0
 800b9e6:	f380 8811 	msr	BASEPRI, r0
 800b9ea:	4770      	bx	lr
 800b9ec:	f3af 8000 	nop.w

0800b9f0 <pxCurrentTCBConst2>:
 800b9f0:	20001cec 	.word	0x20001cec

0800b9f4 <vPortEnterCritical>:
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	b672      	cpsid	i
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	b662      	cpsie	i
	uxCriticalNesting++;
 800ba08:	4a0b      	ldr	r2, [pc, #44]	; (800ba38 <vPortEnterCritical+0x44>)
 800ba0a:	6813      	ldr	r3, [r2, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d000      	beq.n	800ba16 <vPortEnterCritical+0x22>
}
 800ba14:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <vPortEnterCritical+0x48>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba1e:	d0f9      	beq.n	800ba14 <vPortEnterCritical+0x20>
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	b672      	cpsid	i
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	b662      	cpsie	i
 800ba34:	e7fe      	b.n	800ba34 <vPortEnterCritical+0x40>
 800ba36:	bf00      	nop
 800ba38:	2000020c 	.word	0x2000020c
 800ba3c:	e000ed04 	.word	0xe000ed04

0800ba40 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <vPortExitCritical+0x2c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	b953      	cbnz	r3, 800ba5c <vPortExitCritical+0x1c>
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	b672      	cpsid	i
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	b662      	cpsie	i
 800ba5a:	e7fe      	b.n	800ba5a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	4a03      	ldr	r2, [pc, #12]	; (800ba6c <vPortExitCritical+0x2c>)
 800ba60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba62:	b90b      	cbnz	r3, 800ba68 <vPortExitCritical+0x28>
	__asm volatile
 800ba64:	f383 8811 	msr	BASEPRI, r3
}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	2000020c 	.word	0x2000020c

0800ba70 <PendSV_Handler>:
	__asm volatile
 800ba70:	f3ef 8009 	mrs	r0, PSP
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	4b15      	ldr	r3, [pc, #84]	; (800bad0 <pxCurrentTCBConst>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	f01e 0f10 	tst.w	lr, #16
 800ba80:	bf08      	it	eq
 800ba82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8a:	6010      	str	r0, [r2, #0]
 800ba8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba94:	b672      	cpsid	i
 800ba96:	f380 8811 	msr	BASEPRI, r0
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	b662      	cpsie	i
 800baa4:	f7ff fcf4 	bl	800b490 <vTaskSwitchContext>
 800baa8:	f04f 0000 	mov.w	r0, #0
 800baac:	f380 8811 	msr	BASEPRI, r0
 800bab0:	bc09      	pop	{r0, r3}
 800bab2:	6819      	ldr	r1, [r3, #0]
 800bab4:	6808      	ldr	r0, [r1, #0]
 800bab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baba:	f01e 0f10 	tst.w	lr, #16
 800babe:	bf08      	it	eq
 800bac0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bac4:	f380 8809 	msr	PSP, r0
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop

0800bad0 <pxCurrentTCBConst>:
 800bad0:	20001cec 	.word	0x20001cec

0800bad4 <SysTick_Handler>:
{
 800bad4:	b508      	push	{r3, lr}
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bada:	b672      	cpsid	i
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800baea:	f7ff fb9f 	bl	800b22c <xTaskIncrementTick>
 800baee:	b118      	cbz	r0, 800baf8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800baf0:	4b03      	ldr	r3, [pc, #12]	; (800bb00 <SysTick_Handler+0x2c>)
 800baf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf6:	601a      	str	r2, [r3, #0]
	__asm volatile
 800baf8:	2300      	movs	r3, #0
 800bafa:	f383 8811 	msr	BASEPRI, r3
}
 800bafe:	bd08      	pop	{r3, pc}
 800bb00:	e000ed04 	.word	0xe000ed04

0800bb04 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb04:	4a08      	ldr	r2, [pc, #32]	; (800bb28 <vPortSetupTimerInterrupt+0x24>)
 800bb06:	2300      	movs	r3, #0
 800bb08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb0a:	4908      	ldr	r1, [pc, #32]	; (800bb2c <vPortSetupTimerInterrupt+0x28>)
 800bb0c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb0e:	4b08      	ldr	r3, [pc, #32]	; (800bb30 <vPortSetupTimerInterrupt+0x2c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4908      	ldr	r1, [pc, #32]	; (800bb34 <vPortSetupTimerInterrupt+0x30>)
 800bb14:	fba1 1303 	umull	r1, r3, r1, r3
 800bb18:	099b      	lsrs	r3, r3, #6
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	4906      	ldr	r1, [pc, #24]	; (800bb38 <vPortSetupTimerInterrupt+0x34>)
 800bb1e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb20:	2307      	movs	r3, #7
 800bb22:	6013      	str	r3, [r2, #0]
}
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	e000e010 	.word	0xe000e010
 800bb2c:	e000e018 	.word	0xe000e018
 800bb30:	200001e4 	.word	0x200001e4
 800bb34:	10624dd3 	.word	0x10624dd3
 800bb38:	e000e014 	.word	0xe000e014

0800bb3c <xPortStartScheduler>:
{
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb40:	4b2c      	ldr	r3, [pc, #176]	; (800bbf4 <xPortStartScheduler+0xb8>)
 800bb42:	781a      	ldrb	r2, [r3, #0]
 800bb44:	b2d2      	uxtb	r2, r2
 800bb46:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb48:	22ff      	movs	r2, #255	; 0xff
 800bb4a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb54:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb5c:	4a26      	ldr	r2, [pc, #152]	; (800bbf8 <xPortStartScheduler+0xbc>)
 800bb5e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb60:	4b26      	ldr	r3, [pc, #152]	; (800bbfc <xPortStartScheduler+0xc0>)
 800bb62:	2207      	movs	r2, #7
 800bb64:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb66:	e009      	b.n	800bb7c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800bb68:	4a24      	ldr	r2, [pc, #144]	; (800bbfc <xPortStartScheduler+0xc0>)
 800bb6a:	6813      	ldr	r3, [r2, #0]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb70:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb80:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb84:	d1f0      	bne.n	800bb68 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb86:	4b1d      	ldr	r3, [pc, #116]	; (800bbfc <xPortStartScheduler+0xc0>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d00a      	beq.n	800bba4 <xPortStartScheduler+0x68>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	b672      	cpsid	i
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	b662      	cpsie	i
 800bba2:	e7fe      	b.n	800bba2 <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bba4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbaa:	4a14      	ldr	r2, [pc, #80]	; (800bbfc <xPortStartScheduler+0xc0>)
 800bbac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	4a10      	ldr	r2, [pc, #64]	; (800bbf4 <xPortStartScheduler+0xb8>)
 800bbb4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbb6:	4b12      	ldr	r3, [pc, #72]	; (800bc00 <xPortStartScheduler+0xc4>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800bbbe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800bbc6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800bbc8:	f7ff ff9c 	bl	800bb04 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bbcc:	2400      	movs	r4, #0
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <xPortStartScheduler+0xc8>)
 800bbd0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800bbd2:	f7ff fedb 	bl	800b98c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbd6:	4a0c      	ldr	r2, [pc, #48]	; (800bc08 <xPortStartScheduler+0xcc>)
 800bbd8:	6813      	ldr	r3, [r2, #0]
 800bbda:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbde:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800bbe0:	f7ff fec0 	bl	800b964 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800bbe4:	f7ff fc54 	bl	800b490 <vTaskSwitchContext>
	prvTaskExitError();
 800bbe8:	f7ff fe98 	bl	800b91c <prvTaskExitError>
}
 800bbec:	4620      	mov	r0, r4
 800bbee:	b002      	add	sp, #8
 800bbf0:	bd10      	pop	{r4, pc}
 800bbf2:	bf00      	nop
 800bbf4:	e000e400 	.word	0xe000e400
 800bbf8:	20001e14 	.word	0x20001e14
 800bbfc:	20001e18 	.word	0x20001e18
 800bc00:	e000ed20 	.word	0xe000ed20
 800bc04:	2000020c 	.word	0x2000020c
 800bc08:	e000ef34 	.word	0xe000ef34

0800bc0c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc0c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc10:	2b0f      	cmp	r3, #15
 800bc12:	d911      	bls.n	800bc38 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc14:	4a12      	ldr	r2, [pc, #72]	; (800bc60 <vPortValidateInterruptPriority+0x54>)
 800bc16:	5c9b      	ldrb	r3, [r3, r2]
 800bc18:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc1a:	4a12      	ldr	r2, [pc, #72]	; (800bc64 <vPortValidateInterruptPriority+0x58>)
 800bc1c:	7812      	ldrb	r2, [r2, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d90a      	bls.n	800bc38 <vPortValidateInterruptPriority+0x2c>
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	b672      	cpsid	i
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	b662      	cpsie	i
 800bc36:	e7fe      	b.n	800bc36 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <vPortValidateInterruptPriority+0x5c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc40:	4a0a      	ldr	r2, [pc, #40]	; (800bc6c <vPortValidateInterruptPriority+0x60>)
 800bc42:	6812      	ldr	r2, [r2, #0]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d90a      	bls.n	800bc5e <vPortValidateInterruptPriority+0x52>
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	b672      	cpsid	i
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	b662      	cpsie	i
 800bc5c:	e7fe      	b.n	800bc5c <vPortValidateInterruptPriority+0x50>
	}
 800bc5e:	4770      	bx	lr
 800bc60:	e000e3f0 	.word	0xe000e3f0
 800bc64:	20001e14 	.word	0x20001e14
 800bc68:	e000ed0c 	.word	0xe000ed0c
 800bc6c:	20001e18 	.word	0x20001e18

0800bc70 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc70:	4a12      	ldr	r2, [pc, #72]	; (800bcbc <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc72:	f012 0f07 	tst.w	r2, #7
 800bc76:	d01e      	beq.n	800bcb6 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc78:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc7a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc7e:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800bc82:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc84:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc86:	480e      	ldr	r0, [pc, #56]	; (800bcc0 <prvHeapInit+0x50>)
 800bc88:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc8e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800bc90:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc92:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800bc96:	480b      	ldr	r0, [pc, #44]	; (800bcc4 <prvHeapInit+0x54>)
 800bc98:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800bc9a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc9c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc9e:	1a99      	subs	r1, r3, r2
 800bca0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bca2:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bca4:	4b08      	ldr	r3, [pc, #32]	; (800bcc8 <prvHeapInit+0x58>)
 800bca6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bca8:	4b08      	ldr	r3, [pc, #32]	; (800bccc <prvHeapInit+0x5c>)
 800bcaa:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bcac:	4b08      	ldr	r3, [pc, #32]	; (800bcd0 <prvHeapInit+0x60>)
 800bcae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bcb2:	601a      	str	r2, [r3, #0]
}
 800bcb4:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcb6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bcba:	e7e4      	b.n	800bc86 <prvHeapInit+0x16>
 800bcbc:	20001e20 	.word	0x20001e20
 800bcc0:	20005a2c 	.word	0x20005a2c
 800bcc4:	20001e1c 	.word	0x20001e1c
 800bcc8:	20005a28 	.word	0x20005a28
 800bccc:	20005a24 	.word	0x20005a24
 800bcd0:	20005a20 	.word	0x20005a20

0800bcd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bcd4:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcd6:	4b13      	ldr	r3, [pc, #76]	; (800bd24 <prvInsertBlockIntoFreeList+0x50>)
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4282      	cmp	r2, r0
 800bcdc:	d31b      	bcc.n	800bd16 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcde:	6859      	ldr	r1, [r3, #4]
 800bce0:	185c      	adds	r4, r3, r1
 800bce2:	4284      	cmp	r4, r0
 800bce4:	d103      	bne.n	800bcee <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bce6:	6840      	ldr	r0, [r0, #4]
 800bce8:	4401      	add	r1, r0
 800bcea:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcec:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcee:	6841      	ldr	r1, [r0, #4]
 800bcf0:	1844      	adds	r4, r0, r1
 800bcf2:	42a2      	cmp	r2, r4
 800bcf4:	d113      	bne.n	800bd1e <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcf6:	4c0c      	ldr	r4, [pc, #48]	; (800bd28 <prvInsertBlockIntoFreeList+0x54>)
 800bcf8:	6824      	ldr	r4, [r4, #0]
 800bcfa:	42a2      	cmp	r2, r4
 800bcfc:	d00d      	beq.n	800bd1a <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcfe:	6852      	ldr	r2, [r2, #4]
 800bd00:	4411      	add	r1, r2
 800bd02:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	6812      	ldr	r2, [r2, #0]
 800bd08:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd0a:	4298      	cmp	r0, r3
 800bd0c:	d000      	beq.n	800bd10 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd0e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd14:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd16:	4613      	mov	r3, r2
 800bd18:	e7de      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd1a:	6004      	str	r4, [r0, #0]
 800bd1c:	e7f5      	b.n	800bd0a <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd1e:	6002      	str	r2, [r0, #0]
 800bd20:	e7f3      	b.n	800bd0a <prvInsertBlockIntoFreeList+0x36>
 800bd22:	bf00      	nop
 800bd24:	20005a2c 	.word	0x20005a2c
 800bd28:	20001e1c 	.word	0x20001e1c

0800bd2c <pvPortMalloc>:
{
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800bd30:	f7ff fa66 	bl	800b200 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bd34:	4b3d      	ldr	r3, [pc, #244]	; (800be2c <pvPortMalloc+0x100>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	b1cb      	cbz	r3, 800bd6e <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd3a:	4b3d      	ldr	r3, [pc, #244]	; (800be30 <pvPortMalloc+0x104>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	421c      	tst	r4, r3
 800bd40:	d169      	bne.n	800be16 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 800bd42:	b1bc      	cbz	r4, 800bd74 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 800bd44:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd46:	f014 0f07 	tst.w	r4, #7
 800bd4a:	d013      	beq.n	800bd74 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd4c:	f024 0407 	bic.w	r4, r4, #7
 800bd50:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd52:	f004 0307 	and.w	r3, r4, #7
 800bd56:	b16b      	cbz	r3, 800bd74 <pvPortMalloc+0x48>
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	b672      	cpsid	i
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	b662      	cpsie	i
 800bd6c:	e7fe      	b.n	800bd6c <pvPortMalloc+0x40>
			prvHeapInit();
 800bd6e:	f7ff ff7f 	bl	800bc70 <prvHeapInit>
 800bd72:	e7e2      	b.n	800bd3a <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd74:	2c00      	cmp	r4, #0
 800bd76:	d050      	beq.n	800be1a <pvPortMalloc+0xee>
 800bd78:	4b2e      	ldr	r3, [pc, #184]	; (800be34 <pvPortMalloc+0x108>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	d34e      	bcc.n	800be1e <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 800bd80:	4b2d      	ldr	r3, [pc, #180]	; (800be38 <pvPortMalloc+0x10c>)
 800bd82:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd84:	e001      	b.n	800bd8a <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 800bd86:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd88:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd8a:	686a      	ldr	r2, [r5, #4]
 800bd8c:	42a2      	cmp	r2, r4
 800bd8e:	d202      	bcs.n	800bd96 <pvPortMalloc+0x6a>
 800bd90:	682a      	ldr	r2, [r5, #0]
 800bd92:	2a00      	cmp	r2, #0
 800bd94:	d1f7      	bne.n	800bd86 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 800bd96:	4a25      	ldr	r2, [pc, #148]	; (800be2c <pvPortMalloc+0x100>)
 800bd98:	6812      	ldr	r2, [r2, #0]
 800bd9a:	42aa      	cmp	r2, r5
 800bd9c:	d041      	beq.n	800be22 <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd9e:	681e      	ldr	r6, [r3, #0]
 800bda0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bda2:	682a      	ldr	r2, [r5, #0]
 800bda4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bda6:	686b      	ldr	r3, [r5, #4]
 800bda8:	1b1b      	subs	r3, r3, r4
 800bdaa:	2b10      	cmp	r3, #16
 800bdac:	d912      	bls.n	800bdd4 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdae:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb0:	f010 0f07 	tst.w	r0, #7
 800bdb4:	d00a      	beq.n	800bdcc <pvPortMalloc+0xa0>
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	b672      	cpsid	i
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	b662      	cpsie	i
 800bdca:	e7fe      	b.n	800bdca <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdcc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bdce:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bdd0:	f7ff ff80 	bl	800bcd4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bdd4:	686a      	ldr	r2, [r5, #4]
 800bdd6:	4917      	ldr	r1, [pc, #92]	; (800be34 <pvPortMalloc+0x108>)
 800bdd8:	680b      	ldr	r3, [r1, #0]
 800bdda:	1a9b      	subs	r3, r3, r2
 800bddc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdde:	4917      	ldr	r1, [pc, #92]	; (800be3c <pvPortMalloc+0x110>)
 800bde0:	6809      	ldr	r1, [r1, #0]
 800bde2:	428b      	cmp	r3, r1
 800bde4:	d201      	bcs.n	800bdea <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bde6:	4915      	ldr	r1, [pc, #84]	; (800be3c <pvPortMalloc+0x110>)
 800bde8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bdea:	4b11      	ldr	r3, [pc, #68]	; (800be30 <pvPortMalloc+0x104>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800bdf6:	f7ff faa7 	bl	800b348 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdfa:	f016 0f07 	tst.w	r6, #7
 800bdfe:	d012      	beq.n	800be26 <pvPortMalloc+0xfa>
 800be00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be04:	b672      	cpsid	i
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	b662      	cpsie	i
 800be14:	e7fe      	b.n	800be14 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 800be16:	2600      	movs	r6, #0
 800be18:	e7ed      	b.n	800bdf6 <pvPortMalloc+0xca>
 800be1a:	2600      	movs	r6, #0
 800be1c:	e7eb      	b.n	800bdf6 <pvPortMalloc+0xca>
 800be1e:	2600      	movs	r6, #0
 800be20:	e7e9      	b.n	800bdf6 <pvPortMalloc+0xca>
 800be22:	2600      	movs	r6, #0
 800be24:	e7e7      	b.n	800bdf6 <pvPortMalloc+0xca>
}
 800be26:	4630      	mov	r0, r6
 800be28:	bd70      	pop	{r4, r5, r6, pc}
 800be2a:	bf00      	nop
 800be2c:	20001e1c 	.word	0x20001e1c
 800be30:	20005a20 	.word	0x20005a20
 800be34:	20005a24 	.word	0x20005a24
 800be38:	20005a2c 	.word	0x20005a2c
 800be3c:	20005a28 	.word	0x20005a28

0800be40 <vPortFree>:
	if( pv != NULL )
 800be40:	2800      	cmp	r0, #0
 800be42:	d034      	beq.n	800beae <vPortFree+0x6e>
{
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800be48:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800be50:	4917      	ldr	r1, [pc, #92]	; (800beb0 <vPortFree+0x70>)
 800be52:	6809      	ldr	r1, [r1, #0]
 800be54:	420a      	tst	r2, r1
 800be56:	d10a      	bne.n	800be6e <vPortFree+0x2e>
 800be58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5c:	b672      	cpsid	i
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	b662      	cpsie	i
 800be6c:	e7fe      	b.n	800be6c <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be6e:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800be72:	b150      	cbz	r0, 800be8a <vPortFree+0x4a>
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	b672      	cpsid	i
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	b662      	cpsie	i
 800be88:	e7fe      	b.n	800be88 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be8a:	ea22 0201 	bic.w	r2, r2, r1
 800be8e:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800be92:	f7ff f9b5 	bl	800b200 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be96:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800be9a:	4a06      	ldr	r2, [pc, #24]	; (800beb4 <vPortFree+0x74>)
 800be9c:	6813      	ldr	r3, [r2, #0]
 800be9e:	440b      	add	r3, r1
 800bea0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bea2:	4628      	mov	r0, r5
 800bea4:	f7ff ff16 	bl	800bcd4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800bea8:	f7ff fa4e 	bl	800b348 <xTaskResumeAll>
}
 800beac:	bd38      	pop	{r3, r4, r5, pc}
 800beae:	4770      	bx	lr
 800beb0:	20005a20 	.word	0x20005a20
 800beb4:	20005a24 	.word	0x20005a24

0800beb8 <GRAPHICS_MainTask>:

#include "DIALOG.h"
extern  WM_HWIN CreateWindow(void);  
  

void GRAPHICS_MainTask(void) {
 800beb8:	b508      	push	{r3, lr}

  /* 2- Create a Window using GUIBuilder */
  CreateWindow();
 800beba:	f000 f819 	bl	800bef0 <CreateWindow>
 //   GUI_DispStringAt("Hello World !", (LCD_GetXSize()-150)/2, (LCD_GetYSize()-20)/2);
   
/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
 800bebe:	2064      	movs	r0, #100	; 0x64
 800bec0:	f002 fbf2 	bl	800e6a8 <GUI_Delay>
 800bec4:	e7fb      	b.n	800bebe <GRAPHICS_MainTask+0x6>
	...

0800bec8 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 800bec8:	b508      	push	{r3, lr}
  int     NCode;
  int     Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 800beca:	6803      	ldr	r3, [r0, #0]
 800becc:	2b1d      	cmp	r3, #29
 800bece:	d004      	beq.n	800beda <_cbDialog+0x12>
 800bed0:	2b26      	cmp	r3, #38	; 0x26
 800bed2:	d007      	beq.n	800bee4 <_cbDialog+0x1c>
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 800bed4:	f006 fd66 	bl	80129a4 <WM_DefaultProc>
    break;
  }
}
 800bed8:	e003      	b.n	800bee2 <_cbDialog+0x1a>
    WINDOW_SetBkColor(hItem, GUI_MAKE_COLOR(0x0097751C));
 800beda:	4904      	ldr	r1, [pc, #16]	; (800beec <_cbDialog+0x24>)
 800bedc:	6840      	ldr	r0, [r0, #4]
 800bede:	f009 fb28 	bl	8015532 <WINDOW_SetBkColor>
}
 800bee2:	bd08      	pop	{r3, pc}
    Id    = WM_GetId(pMsg->hWinSrc);
 800bee4:	6880      	ldr	r0, [r0, #8]
 800bee6:	f006 fead 	bl	8012c44 <WM_GetId>
 800beea:	e7fa      	b.n	800bee2 <_cbDialog+0x1a>
 800beec:	ff1c7597 	.word	0xff1c7597

0800bef0 <CreateWindow>:
/*********************************************************************
*
*       CreateWindow
*/
WM_HWIN CreateWindow(void);
WM_HWIN CreateWindow(void) {
 800bef0:	b500      	push	{lr}
 800bef2:	b083      	sub	sp, #12
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 800bef4:	f006 fe66 	bl	8012bc4 <WM_GetDesktopWindow>
 800bef8:	2300      	movs	r3, #0
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	4603      	mov	r3, r0
 800bf00:	4a03      	ldr	r2, [pc, #12]	; (800bf10 <CreateWindow+0x20>)
 800bf02:	2105      	movs	r1, #5
 800bf04:	4803      	ldr	r0, [pc, #12]	; (800bf14 <CreateWindow+0x24>)
 800bf06:	f007 ff08 	bl	8013d1a <GUI_CreateDialogBox>
  return hWin;
}
 800bf0a:	b003      	add	sp, #12
 800bf0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf10:	0800bec9 	.word	0x0800bec9
 800bf14:	0801ea10 	.word	0x0801ea10

0800bf18 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 800bf18:	b508      	push	{r3, lr}

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 800bf1a:	f44f 31dc 	mov.w	r1, #112640	; 0x1b800
 800bf1e:	4802      	ldr	r0, [pc, #8]	; (800bf28 <GUI_X_Config+0x10>)
 800bf20:	f001 fa0c 	bl	800d33c <GUI_ALLOC_AssignMemory>

}
 800bf24:	bd08      	pop	{r3, pc}
 800bf26:	bf00      	nop
 800bf28:	20005a34 	.word	0x20005a34

0800bf2c <HAL_FMC_MspInit>:
  }
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf2e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800bf30:	2300      	movs	r3, #0
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	9302      	str	r3, [sp, #8]
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800bf3c:	4b2a      	ldr	r3, [pc, #168]	; (800bfe8 <HAL_FMC_MspInit+0xbc>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	b10b      	cbz	r3, 800bf46 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800bf42:	b007      	add	sp, #28
 800bf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800bf46:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <HAL_FMC_MspInit+0xbc>)
 800bf48:	2201      	movs	r2, #1
 800bf4a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800bf4c:	4b27      	ldr	r3, [pc, #156]	; (800bfec <HAL_FMC_MspInit+0xc0>)
 800bf4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf50:	f042 0201 	orr.w	r2, r2, #1
 800bf54:	639a      	str	r2, [r3, #56]	; 0x38
 800bf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800bf60:	f64f 7383 	movw	r3, #65411	; 0xff83
 800bf64:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf66:	2602      	movs	r6, #2
 800bf68:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf6a:	2503      	movs	r5, #3
 800bf6c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf6e:	240c      	movs	r4, #12
 800bf70:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf72:	a901      	add	r1, sp, #4
 800bf74:	481e      	ldr	r0, [pc, #120]	; (800bff0 <HAL_FMC_MspInit+0xc4>)
 800bf76:	f7f6 fe49 	bl	8002c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800bf7a:	f248 1333 	movw	r3, #33075	; 0x8133
 800bf7e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf80:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf82:	2700      	movs	r7, #0
 800bf84:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf86:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf88:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bf8a:	a901      	add	r1, sp, #4
 800bf8c:	4819      	ldr	r0, [pc, #100]	; (800bff4 <HAL_FMC_MspInit+0xc8>)
 800bf8e:	f7f6 fe3d 	bl	8002c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800bf92:	f24c 7303 	movw	r3, #50947	; 0xc703
 800bf96:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf98:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf9a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf9c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf9e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bfa0:	a901      	add	r1, sp, #4
 800bfa2:	4815      	ldr	r0, [pc, #84]	; (800bff8 <HAL_FMC_MspInit+0xcc>)
 800bfa4:	f7f6 fe32 	bl	8002c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800bfa8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800bfac:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfae:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfb2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfb4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bfb6:	a901      	add	r1, sp, #4
 800bfb8:	4810      	ldr	r0, [pc, #64]	; (800bffc <HAL_FMC_MspInit+0xd0>)
 800bfba:	f7f6 fe27 	bl	8002c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800bfbe:	2328      	movs	r3, #40	; 0x28
 800bfc0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfc2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfc4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfc6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfc8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bfca:	a901      	add	r1, sp, #4
 800bfcc:	480c      	ldr	r0, [pc, #48]	; (800c000 <HAL_FMC_MspInit+0xd4>)
 800bfce:	f7f6 fe1d 	bl	8002c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfd6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfda:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfdc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800bfde:	a901      	add	r1, sp, #4
 800bfe0:	4808      	ldr	r0, [pc, #32]	; (800c004 <HAL_FMC_MspInit+0xd8>)
 800bfe2:	f7f6 fe13 	bl	8002c0c <HAL_GPIO_Init>
 800bfe6:	e7ac      	b.n	800bf42 <HAL_FMC_MspInit+0x16>
 800bfe8:	20021244 	.word	0x20021244
 800bfec:	40023800 	.word	0x40023800
 800bff0:	40021000 	.word	0x40021000
 800bff4:	40021800 	.word	0x40021800
 800bff8:	40020c00 	.word	0x40020c00
 800bffc:	40021400 	.word	0x40021400
 800c000:	40021c00 	.word	0x40021c00
 800c004:	40020800 	.word	0x40020800

0800c008 <MX_LCD_Init>:
{ 
 800c008:	b510      	push	{r4, lr}
 800c00a:	b08e      	sub	sp, #56	; 0x38
  HAL_LTDC_DeInit(&hltdc);
 800c00c:	4c2b      	ldr	r4, [pc, #172]	; (800c0bc <MX_LCD_Init+0xb4>)
 800c00e:	4620      	mov	r0, r4
 800c010:	f7f8 fa82 	bl	8004518 <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 800c014:	4b2a      	ldr	r3, [pc, #168]	; (800c0c0 <MX_LCD_Init+0xb8>)
 800c016:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800c018:	2300      	movs	r3, #0
 800c01a:	6063      	str	r3, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800c01c:	60a3      	str	r3, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800c01e:	60e3      	str	r3, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800c020:	6123      	str	r3, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 800c022:	2228      	movs	r2, #40	; 0x28
 800c024:	6162      	str	r2, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 800c026:	2209      	movs	r2, #9
 800c028:	61a2      	str	r2, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800c02a:	2235      	movs	r2, #53	; 0x35
 800c02c:	61e2      	str	r2, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800c02e:	220b      	movs	r2, #11
 800c030:	6222      	str	r2, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800c032:	f240 2215 	movw	r2, #533	; 0x215
 800c036:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800c038:	f240 121b 	movw	r2, #283	; 0x11b
 800c03c:	62a2      	str	r2, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800c03e:	f240 2235 	movw	r2, #565	; 0x235
 800c042:	62e2      	str	r2, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800c044:	f240 121d 	movw	r2, #285	; 0x11d
 800c048:	6322      	str	r2, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800c04a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800c04e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800c052:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800c056:	4620      	mov	r0, r4
 800c058:	f7f8 f9e4 	bl	8004424 <HAL_LTDC_Init>
 800c05c:	bb40      	cbnz	r0, 800c0b0 <MX_LCD_Init+0xa8>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 800c05e:	4c17      	ldr	r4, [pc, #92]	; (800c0bc <MX_LCD_Init+0xb4>)
 800c060:	2100      	movs	r1, #0
 800c062:	4620      	mov	r0, r4
 800c064:	f7f8 fc0a 	bl	800487c <HAL_LTDC_ProgramLineEvent>
  pLayerCfg.WindowX0 = 0;
 800c068:	2200      	movs	r2, #0
 800c06a:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 800c06c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800c070:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 800c072:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 800c074:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c078:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800c07a:	9205      	str	r2, [sp, #20]
  pLayerCfg.Alpha = 255;
 800c07c:	20ff      	movs	r0, #255	; 0xff
 800c07e:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 800c080:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800c082:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800c086:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800c088:	2007      	movs	r0, #7
 800c08a:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800c08c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800c090:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800c092:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800c094:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800c096:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800c09a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800c09e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800c0a2:	a901      	add	r1, sp, #4
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f7f8 fab2 	bl	800460e <HAL_LTDC_ConfigLayer>
 800c0aa:	b920      	cbnz	r0, 800c0b6 <MX_LCD_Init+0xae>
}
 800c0ac:	b00e      	add	sp, #56	; 0x38
 800c0ae:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800c0b0:	f7f5 f98c 	bl	80013cc <Error_Handler>
 800c0b4:	e7d3      	b.n	800c05e <MX_LCD_Init+0x56>
    Error_Handler( );
 800c0b6:	f7f5 f989 	bl	80013cc <Error_Handler>
}
 800c0ba:	e7f7      	b.n	800c0ac <MX_LCD_Init+0xa4>
 800c0bc:	20021d44 	.word	0x20021d44
 800c0c0:	40016800 	.word	0x40016800

0800c0c4 <MX_FMC_Init>:
{  
 800c0c4:	b500      	push	{lr}
 800c0c6:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800c0c8:	4815      	ldr	r0, [pc, #84]	; (800c120 <MX_FMC_Init+0x5c>)
 800c0ca:	4b16      	ldr	r3, [pc, #88]	; (800c124 <MX_FMC_Init+0x60>)
 800c0cc:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c0d2:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800c0d8:	2210      	movs	r2, #16
 800c0da:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c0dc:	2240      	movs	r2, #64	; 0x40
 800c0de:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800c0e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c0e4:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c0e6:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800c0e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0ec:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800c0ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0f2:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800c0f4:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800c0fa:	2207      	movs	r2, #7
 800c0fc:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 800c0fe:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 800c100:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800c102:	2203      	movs	r2, #3
 800c104:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 800c106:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800c108:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800c10a:	4469      	add	r1, sp
 800c10c:	f7fa fc14 	bl	8006938 <HAL_SDRAM_Init>
 800c110:	b910      	cbnz	r0, 800c118 <MX_FMC_Init+0x54>
}
 800c112:	b009      	add	sp, #36	; 0x24
 800c114:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800c118:	f7f5 f958 	bl	80013cc <Error_Handler>
}
 800c11c:	e7f9      	b.n	800c112 <MX_FMC_Init+0x4e>
 800c11e:	bf00      	nop
 800c120:	20021e2c 	.word	0x20021e2c
 800c124:	a0000140 	.word	0xa0000140

0800c128 <MX_SDRAM_InitEx>:
{
 800c128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c12c:	b082      	sub	sp, #8
  __IO uint32_t tmpmrd = 0;
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800c136:	4c21      	ldr	r4, [pc, #132]	; (800c1bc <MX_SDRAM_InitEx+0x94>)
 800c138:	2601      	movs	r6, #1
 800c13a:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800c13c:	2710      	movs	r7, #16
 800c13e:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800c140:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800c142:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800c146:	4d1e      	ldr	r5, [pc, #120]	; (800c1c0 <MX_SDRAM_InitEx+0x98>)
 800c148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c14c:	4621      	mov	r1, r4
 800c14e:	4628      	mov	r0, r5
 800c150:	f7fa fc11 	bl	8006976 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800c154:	4630      	mov	r0, r6
 800c156:	f7f6 f901 	bl	800235c <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800c15a:	2302      	movs	r3, #2
 800c15c:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800c15e:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800c160:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800c162:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 800c166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c16a:	4621      	mov	r1, r4
 800c16c:	4628      	mov	r0, r5
 800c16e:	f7fa fc02 	bl	8006976 <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800c172:	2303      	movs	r3, #3
 800c174:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800c176:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 800c178:	2308      	movs	r3, #8
 800c17a:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800c17c:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800c180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c184:	4621      	mov	r1, r4
 800c186:	4628      	mov	r0, r5
 800c188:	f7fa fbf5 	bl	8006976 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800c18c:	f44f 730c 	mov.w	r3, #560	; 0x230
 800c190:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800c192:	2304      	movs	r3, #4
 800c194:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800c196:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800c198:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800c19a:	9b01      	ldr	r3, [sp, #4]
 800c19c:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800c19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	f7fa fbe6 	bl	8006976 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 800c1aa:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f7fa fbfe 	bl	80069b0 <HAL_SDRAM_ProgramRefreshRate>
}
 800c1b4:	b002      	add	sp, #8
 800c1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20021234 	.word	0x20021234
 800c1c0:	20021e2c 	.word	0x20021e2c

0800c1c4 <MX_DMA2D_Init>:
{
 800c1c4:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 800c1c6:	480d      	ldr	r0, [pc, #52]	; (800c1fc <MX_DMA2D_Init+0x38>)
 800c1c8:	4b0d      	ldr	r3, [pc, #52]	; (800c200 <MX_DMA2D_Init+0x3c>)
 800c1ca:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800c1d0:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 800c1d2:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800c1d4:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800c1d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800c1d8:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800c1da:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800c1dc:	f7f6 fbe6 	bl	80029ac <HAL_DMA2D_Init>
 800c1e0:	b928      	cbnz	r0, 800c1ee <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	4805      	ldr	r0, [pc, #20]	; (800c1fc <MX_DMA2D_Init+0x38>)
 800c1e6:	f7f6 fcaf 	bl	8002b48 <HAL_DMA2D_ConfigLayer>
 800c1ea:	b918      	cbnz	r0, 800c1f4 <MX_DMA2D_Init+0x30>
}
 800c1ec:	bd08      	pop	{r3, pc}
    Error_Handler( );
 800c1ee:	f7f5 f8ed 	bl	80013cc <Error_Handler>
 800c1f2:	e7f6      	b.n	800c1e2 <MX_DMA2D_Init+0x1e>
    Error_Handler( );
 800c1f4:	f7f5 f8ea 	bl	80013cc <Error_Handler>
}
 800c1f8:	e7f8      	b.n	800c1ec <MX_DMA2D_Init+0x28>
 800c1fa:	bf00      	nop
 800c1fc:	20021dec 	.word	0x20021dec
 800c200:	4002b000 	.word	0x4002b000

0800c204 <HAL_LTDC_MspInit>:
{
 800c204:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c206:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c208:	2300      	movs	r3, #0
 800c20a:	9307      	str	r3, [sp, #28]
 800c20c:	9308      	str	r3, [sp, #32]
 800c20e:	9309      	str	r3, [sp, #36]	; 0x24
 800c210:	930a      	str	r3, [sp, #40]	; 0x28
 800c212:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ltdcHandle->Instance==LTDC)
 800c214:	6802      	ldr	r2, [r0, #0]
 800c216:	4b3f      	ldr	r3, [pc, #252]	; (800c314 <HAL_LTDC_MspInit+0x110>)
 800c218:	429a      	cmp	r2, r3
 800c21a:	d001      	beq.n	800c220 <HAL_LTDC_MspInit+0x1c>
}
 800c21c:	b00d      	add	sp, #52	; 0x34
 800c21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 800c220:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800c224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c226:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c22a:	645a      	str	r2, [r3, #68]	; 0x44
 800c22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c22e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800c232:	9201      	str	r2, [sp, #4]
 800c234:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c238:	f042 0210 	orr.w	r2, r2, #16
 800c23c:	631a      	str	r2, [r3, #48]	; 0x30
 800c23e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c240:	f002 0210 	and.w	r2, r2, #16
 800c244:	9202      	str	r2, [sp, #8]
 800c246:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c24a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c24e:	631a      	str	r2, [r3, #48]	; 0x30
 800c250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c252:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800c256:	9203      	str	r2, [sp, #12]
 800c258:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800c25a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c25c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c260:	631a      	str	r2, [r3, #48]	; 0x30
 800c262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c264:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800c268:	9204      	str	r2, [sp, #16]
 800c26a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c26c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c26e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
 800c274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c276:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800c27a:	9205      	str	r2, [sp, #20]
 800c27c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c284:	631a      	str	r2, [r3, #48]	; 0x30
 800c286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c28c:	9306      	str	r3, [sp, #24]
 800c28e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800c290:	2310      	movs	r3, #16
 800c292:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c294:	2602      	movs	r6, #2
 800c296:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c298:	2503      	movs	r5, #3
 800c29a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c29c:	270e      	movs	r7, #14
 800c29e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800c2a0:	a907      	add	r1, sp, #28
 800c2a2:	481d      	ldr	r0, [pc, #116]	; (800c318 <HAL_LTDC_MspInit+0x114>)
 800c2a4:	f7f6 fcb2 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800c2a8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800c2ac:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ae:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2b0:	2400      	movs	r4, #0
 800c2b2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2b4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c2b6:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c2b8:	a907      	add	r1, sp, #28
 800c2ba:	4818      	ldr	r0, [pc, #96]	; (800c31c <HAL_LTDC_MspInit+0x118>)
 800c2bc:	f7f6 fca6 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800c2c0:	23f7      	movs	r3, #247	; 0xf7
 800c2c2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2c4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2c6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2c8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c2ca:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800c2cc:	a907      	add	r1, sp, #28
 800c2ce:	4814      	ldr	r0, [pc, #80]	; (800c320 <HAL_LTDC_MspInit+0x11c>)
 800c2d0:	f7f6 fc9c 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800c2d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2d8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2da:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2dc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2de:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c2e0:	2309      	movs	r3, #9
 800c2e2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800c2e4:	a907      	add	r1, sp, #28
 800c2e6:	480f      	ldr	r0, [pc, #60]	; (800c324 <HAL_LTDC_MspInit+0x120>)
 800c2e8:	f7f6 fc90 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800c2ec:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800c2f0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2f2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2f4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2f6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c2f8:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c2fa:	a907      	add	r1, sp, #28
 800c2fc:	480a      	ldr	r0, [pc, #40]	; (800c328 <HAL_LTDC_MspInit+0x124>)
 800c2fe:	f7f6 fc85 	bl	8002c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800c302:	4622      	mov	r2, r4
 800c304:	2105      	movs	r1, #5
 800c306:	2058      	movs	r0, #88	; 0x58
 800c308:	f7f6 f9ea 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c30c:	2058      	movs	r0, #88	; 0x58
 800c30e:	f7f6 fa19 	bl	8002744 <HAL_NVIC_EnableIRQ>
}
 800c312:	e783      	b.n	800c21c <HAL_LTDC_MspInit+0x18>
 800c314:	40016800 	.word	0x40016800
 800c318:	40021000 	.word	0x40021000
 800c31c:	40022400 	.word	0x40022400
 800c320:	40022800 	.word	0x40022800
 800c324:	40021800 	.word	0x40021800
 800c328:	40022000 	.word	0x40022000

0800c32c <HAL_LTDC_MspDeInit>:
{
 800c32c:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 800c32e:	6802      	ldr	r2, [r0, #0]
 800c330:	4b11      	ldr	r3, [pc, #68]	; (800c378 <HAL_LTDC_MspDeInit+0x4c>)
 800c332:	429a      	cmp	r2, r3
 800c334:	d000      	beq.n	800c338 <HAL_LTDC_MspDeInit+0xc>
}
 800c336:	bd08      	pop	{r3, pc}
    __HAL_RCC_LTDC_CLK_DISABLE();
 800c338:	4a10      	ldr	r2, [pc, #64]	; (800c37c <HAL_LTDC_MspDeInit+0x50>)
 800c33a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800c33c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c340:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 800c342:	2110      	movs	r1, #16
 800c344:	480e      	ldr	r0, [pc, #56]	; (800c380 <HAL_LTDC_MspDeInit+0x54>)
 800c346:	f7f6 fd51 	bl	8002dec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800c34a:	f64e 71ff 	movw	r1, #61439	; 0xefff
 800c34e:	480d      	ldr	r0, [pc, #52]	; (800c384 <HAL_LTDC_MspDeInit+0x58>)
 800c350:	f7f6 fd4c 	bl	8002dec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800c354:	21f7      	movs	r1, #247	; 0xf7
 800c356:	480c      	ldr	r0, [pc, #48]	; (800c388 <HAL_LTDC_MspDeInit+0x5c>)
 800c358:	f7f6 fd48 	bl	8002dec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 800c35c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c360:	480a      	ldr	r0, [pc, #40]	; (800c38c <HAL_LTDC_MspDeInit+0x60>)
 800c362:	f7f6 fd43 	bl	8002dec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 800c366:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 800c36a:	4809      	ldr	r0, [pc, #36]	; (800c390 <HAL_LTDC_MspDeInit+0x64>)
 800c36c:	f7f6 fd3e 	bl	8002dec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 800c370:	2058      	movs	r0, #88	; 0x58
 800c372:	f7f6 f9f5 	bl	8002760 <HAL_NVIC_DisableIRQ>
}
 800c376:	e7de      	b.n	800c336 <HAL_LTDC_MspDeInit+0xa>
 800c378:	40016800 	.word	0x40016800
 800c37c:	40023800 	.word	0x40023800
 800c380:	40021000 	.word	0x40021000
 800c384:	40022400 	.word	0x40022400
 800c388:	40022800 	.word	0x40022800
 800c38c:	40021800 	.word	0x40021800
 800c390:	40022000 	.word	0x40022000

0800c394 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800c394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800c396:	f7ff fdc9 	bl	800bf2c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800c39a:	bd08      	pop	{r3, pc}

0800c39c <HAL_DMA2D_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
  if(dma2dHandle->Instance==DMA2D)
 800c39c:	6802      	ldr	r2, [r0, #0]
 800c39e:	4b0e      	ldr	r3, [pc, #56]	; (800c3d8 <HAL_DMA2D_MspInit+0x3c>)
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d000      	beq.n	800c3a6 <HAL_DMA2D_MspInit+0xa>
 800c3a4:	4770      	bx	lr
{
 800c3a6:	b500      	push	{lr}
 800c3a8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c3aa:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800c3ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c3b4:	631a      	str	r2, [r3, #48]	; 0x30
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	2105      	movs	r1, #5
 800c3c4:	205a      	movs	r0, #90	; 0x5a
 800c3c6:	f7f6 f98b 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800c3ca:	205a      	movs	r0, #90	; 0x5a
 800c3cc:	f7f6 f9ba 	bl	8002744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800c3d0:	b003      	add	sp, #12
 800c3d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3d6:	bf00      	nop
 800c3d8:	4002b000 	.word	0x4002b000

0800c3dc <_DMA_ExecOperation>:
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 800c3dc:	4b03      	ldr	r3, [pc, #12]	; (800c3ec <_DMA_ExecOperation+0x10>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	b11b      	cbz	r3, 800c3ea <_DMA_ExecOperation+0xe>
    return;
  
  while(TransferInProgress) {
 800c3e2:	4b02      	ldr	r3, [pc, #8]	; (800c3ec <_DMA_ExecOperation+0x10>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1fb      	bne.n	800c3e2 <_DMA_ExecOperation+0x6>
  }
}
 800c3ea:	4770      	bx	lr
 800c3ec:	20021248 	.word	0x20021248

0800c3f0 <GetPixelformat>:
    return LTDC_PIXEL_FORMAT_AL44;
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
    return LTDC_PIXEL_FORMAT_AL88;
  }
  while (1); // Error
} 
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	4770      	bx	lr

0800c3f4 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 800c3f4:	4b01      	ldr	r3, [pc, #4]	; (800c3fc <TransferComplete+0x8>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]
}
 800c3fa:	4770      	bx	lr
 800c3fc:	20021248 	.word	0x20021248

0800c400 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	4607      	mov	r7, r0
 800c404:	460e      	mov	r6, r1
 800c406:	4615      	mov	r5, r2
 800c408:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800c40a:	f7ff ffe7 	bl	800c3dc <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800c40e:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <DMA2D_CopyBuffer+0x48>)
 800c410:	2201      	movs	r2, #1
 800c412:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800c414:	4638      	mov	r0, r7
 800c416:	f7ff ffeb 	bl	800c3f0 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 800c41a:	4a0c      	ldr	r2, [pc, #48]	; (800c44c <DMA2D_CopyBuffer+0x4c>)
 800c41c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c420:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800c422:	60d6      	str	r6, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800c424:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 800c426:	9b07      	ldr	r3, [sp, #28]
 800c428:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800c42a:	9b08      	ldr	r3, [sp, #32]
 800c42c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 800c42e:	61d0      	str	r0, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800c430:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c434:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c438:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800c43a:	6813      	ldr	r3, [r2, #0]
 800c43c:	f043 0301 	orr.w	r3, r3, #1
 800c440:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 800c442:	f7ff ffcb 	bl	800c3dc <_DMA_ExecOperation>

}
 800c446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c448:	20021248 	.word	0x20021248
 800c44c:	4002b000 	.word	0x4002b000

0800c450 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800c450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c454:	4680      	mov	r8, r0
 800c456:	460f      	mov	r7, r1
 800c458:	4615      	mov	r5, r2
 800c45a:	461e      	mov	r6, r3
 800c45c:	9c08      	ldr	r4, [sp, #32]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 800c45e:	f7ff ffbd 	bl	800c3dc <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800c462:	4b10      	ldr	r3, [pc, #64]	; (800c4a4 <DMA2D_CopyBufferWithAlpha+0x54>)
 800c464:	2201      	movs	r2, #1
 800c466:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800c468:	4640      	mov	r0, r8
 800c46a:	f7ff ffc1 	bl	800c3f0 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 800c46e:	4a0e      	ldr	r2, [pc, #56]	; (800c4a8 <DMA2D_CopyBufferWithAlpha+0x58>)
 800c470:	4b0e      	ldr	r3, [pc, #56]	; (800c4ac <DMA2D_CopyBufferWithAlpha+0x5c>)
 800c472:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800c474:	60d7      	str	r7, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800c476:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 800c478:	6155      	str	r5, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 800c47a:	9b07      	ldr	r3, [sp, #28]
 800c47c:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800c47e:	6414      	str	r4, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 800c480:	6194      	str	r4, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 800c482:	2300      	movs	r3, #0
 800c484:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 800c486:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 800c488:	6350      	str	r0, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800c48a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c48e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c492:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	f043 0301 	orr.w	r3, r3, #1
 800c49a:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800c49c:	f7ff ff9e 	bl	800c3dc <_DMA_ExecOperation>
}
 800c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a4:	20021248 	.word	0x20021248
 800c4a8:	4002b000 	.word	0x4002b000
 800c4ac:	00020200 	.word	0x00020200

0800c4b0 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	460e      	mov	r6, r1
 800c4b6:	4615      	mov	r5, r2
 800c4b8:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800c4ba:	f7ff ff8f 	bl	800c3dc <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800c4be:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <DMA2D_FillBuffer+0x44>)
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	f7ff ff93 	bl	800c3f0 <GetPixelformat>

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800c4ca:	490b      	ldr	r1, [pc, #44]	; (800c4f8 <DMA2D_FillBuffer+0x48>)
 800c4cc:	4b0b      	ldr	r3, [pc, #44]	; (800c4fc <DMA2D_FillBuffer+0x4c>)
 800c4ce:	600b      	str	r3, [r1, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 800c4d0:	9b07      	ldr	r3, [sp, #28]
 800c4d2:	638b      	str	r3, [r1, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 800c4d4:	63ce      	str	r6, [r1, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 800c4d6:	9b06      	ldr	r3, [sp, #24]
 800c4d8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 800c4da:	6348      	str	r0, [r1, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800c4dc:	b2a4      	uxth	r4, r4
 800c4de:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800c4e2:	644c      	str	r4, [r1, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 800c4e4:	680a      	ldr	r2, [r1, #0]
 800c4e6:	f240 2301 	movw	r3, #513	; 0x201
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	600b      	str	r3, [r1, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800c4ee:	f7ff ff75 	bl	800c3dc <_DMA_ExecOperation>
}
 800c4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f4:	20021248 	.word	0x20021248
 800c4f8:	4002b000 	.word	0x4002b000
 800c4fc:	00030200 	.word	0x00030200

0800c500 <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	4607      	mov	r7, r0
 800c504:	460e      	mov	r6, r1
 800c506:	4615      	mov	r5, r2
 800c508:	461c      	mov	r4, r3

  /* Set up mode */
  _DMA_ExecOperation();
 800c50a:	f7ff ff67 	bl	800c3dc <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 800c50e:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <_DMA_ConvertColor+0x44>)
 800c510:	2201      	movs	r2, #1
 800c512:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800c514:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <_DMA_ConvertColor+0x48>)
 800c516:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800c51a:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 800c51c:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800c51e:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 800c520:	2200      	movs	r2, #0
 800c522:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 800c524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 800c526:	61dd      	str	r5, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 800c528:	635c      	str	r4, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 800c52a:	9a06      	ldr	r2, [sp, #24]
 800c52c:	0412      	lsls	r2, r2, #16
 800c52e:	f042 0201 	orr.w	r2, r2, #1
 800c532:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800c534:	6819      	ldr	r1, [r3, #0]
 800c536:	f240 2201 	movw	r2, #513	; 0x201
 800c53a:	430a      	orrs	r2, r1
 800c53c:	601a      	str	r2, [r3, #0]
  
  _DMA_ExecOperation();
 800c53e:	f7ff ff4d 	bl	800c3dc <_DMA_ExecOperation>
}
 800c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c544:	20021248 	.word	0x20021248
 800c548:	4002b000 	.word	0x4002b000

0800c54c <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 800c54c:	b500      	push	{lr}
 800c54e:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 800c550:	9200      	str	r2, [sp, #0]
 800c552:	2300      	movs	r3, #0
 800c554:	9a04      	ldr	r2, [sp, #16]
 800c556:	f7ff ffd3 	bl	800c500 <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 800c55a:	b003      	add	sp, #12
 800c55c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c560 <_Index2ColorBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 800c560:	b510      	push	{r4, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	2400      	movs	r4, #0
 800c566:	9400      	str	r4, [sp, #0]
 800c568:	f7ff fff0 	bl	800c54c <_DMA_Index2ColorBulk>
 800c56c:	b002      	add	sp, #8
 800c56e:	bd10      	pop	{r4, pc}

0800c570 <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 800c570:	b510      	push	{r4, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	2400      	movs	r4, #0
 800c576:	9400      	str	r4, [sp, #0]
 800c578:	f7ff ffe8 	bl	800c54c <_DMA_Index2ColorBulk>
 800c57c:	b002      	add	sp, #8
 800c57e:	bd10      	pop	{r4, pc}

0800c580 <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800c580:	b510      	push	{r4, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	2404      	movs	r4, #4
 800c586:	9400      	str	r4, [sp, #0]
 800c588:	f7ff ffe0 	bl	800c54c <_DMA_Index2ColorBulk>
 800c58c:	b002      	add	sp, #8
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800c590:	b510      	push	{r4, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	2402      	movs	r4, #2
 800c596:	9400      	str	r4, [sp, #0]
 800c598:	f7ff ffd8 	bl	800c54c <_DMA_Index2ColorBulk>
 800c59c:	b002      	add	sp, #8
 800c59e:	bd10      	pop	{r4, pc}

0800c5a0 <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	2403      	movs	r4, #3
 800c5a6:	9400      	str	r4, [sp, #0]
 800c5a8:	f7ff ffd0 	bl	800c54c <_DMA_Index2ColorBulk>
 800c5ac:	b002      	add	sp, #8
 800c5ae:	bd10      	pop	{r4, pc}

0800c5b0 <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 800c5b0:	b500      	push	{lr}
 800c5b2:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 800c5b4:	9200      	str	r2, [sp, #0]
 800c5b6:	9b04      	ldr	r3, [sp, #16]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f7ff ffa1 	bl	800c500 <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 800c5be:	b003      	add	sp, #12
 800c5c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800c5c4 <_Color2IndexBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	2400      	movs	r4, #0
 800c5ca:	9400      	str	r4, [sp, #0]
 800c5cc:	f7ff fff0 	bl	800c5b0 <_DMA_Color2IndexBulk>
 800c5d0:	b002      	add	sp, #8
 800c5d2:	bd10      	pop	{r4, pc}

0800c5d4 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	2400      	movs	r4, #0
 800c5da:	9400      	str	r4, [sp, #0]
 800c5dc:	f7ff ffe8 	bl	800c5b0 <_DMA_Color2IndexBulk>
 800c5e0:	b002      	add	sp, #8
 800c5e2:	bd10      	pop	{r4, pc}

0800c5e4 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	2404      	movs	r4, #4
 800c5ea:	9400      	str	r4, [sp, #0]
 800c5ec:	f7ff ffe0 	bl	800c5b0 <_DMA_Color2IndexBulk>
 800c5f0:	b002      	add	sp, #8
 800c5f2:	bd10      	pop	{r4, pc}

0800c5f4 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	2402      	movs	r4, #2
 800c5fa:	9400      	str	r4, [sp, #0]
 800c5fc:	f7ff ffd8 	bl	800c5b0 <_DMA_Color2IndexBulk>
 800c600:	b002      	add	sp, #8
 800c602:	bd10      	pop	{r4, pc}

0800c604 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800c604:	b510      	push	{r4, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	2403      	movs	r4, #3
 800c60a:	9400      	str	r4, [sp, #0]
 800c60c:	f7ff ffd0 	bl	800c5b0 <_DMA_Color2IndexBulk>
 800c610:	b002      	add	sp, #8
 800c612:	bd10      	pop	{r4, pc}

0800c614 <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 800c614:	b410      	push	{r4}
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 800c616:	4909      	ldr	r1, [pc, #36]	; (800c63c <GetBufferSize+0x28>)
 800c618:	00c3      	lsls	r3, r0, #3
 800c61a:	1a1c      	subs	r4, r3, r0
 800c61c:	00a2      	lsls	r2, r4, #2
 800c61e:	440a      	add	r2, r1
 800c620:	68d4      	ldr	r4, [r2, #12]
 800c622:	6912      	ldr	r2, [r2, #16]
 800c624:	fb02 f204 	mul.w	r2, r2, r4
 800c628:	1a1b      	subs	r3, r3, r0
 800c62a:	0098      	lsls	r0, r3, #2
 800c62c:	4401      	add	r1, r0
 800c62e:	6948      	ldr	r0, [r1, #20]
}
 800c630:	fb00 f002 	mul.w	r0, r0, r2
 800c634:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	2002124c 	.word	0x2002124c

0800c640 <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 800c640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	4606      	mov	r6, r0
 800c648:	4688      	mov	r8, r1
 800c64a:	4617      	mov	r7, r2
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800c64c:	f7ff ffe2 	bl	800c614 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800c650:	4c0c      	ldr	r4, [pc, #48]	; (800c684 <LCD_LL_CopyBuffer+0x44>)
 800c652:	00f5      	lsls	r5, r6, #3
 800c654:	1baa      	subs	r2, r5, r6
 800c656:	0093      	lsls	r3, r2, #2
 800c658:	18e2      	adds	r2, r4, r3
 800c65a:	58e1      	ldr	r1, [r4, r3]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800c65c:	68d3      	ldr	r3, [r2, #12]
 800c65e:	6912      	ldr	r2, [r2, #16]
 800c660:	9200      	str	r2, [sp, #0]
 800c662:	2200      	movs	r2, #0
 800c664:	9202      	str	r2, [sp, #8]
 800c666:	9201      	str	r2, [sp, #4]
 800c668:	fb00 1207 	mla	r2, r0, r7, r1
 800c66c:	fb00 1108 	mla	r1, r0, r8, r1
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff fec5 	bl	800c400 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800c676:	1bad      	subs	r5, r5, r6
 800c678:	00ab      	lsls	r3, r5, #2
 800c67a:	441c      	add	r4, r3
 800c67c:	60a7      	str	r7, [r4, #8]
}
 800c67e:	b004      	add	sp, #16
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c684:	2002124c 	.word	0x2002124c

0800c688 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 800c688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c68c:	b084      	sub	sp, #16
 800c68e:	4680      	mov	r8, r0
 800c690:	460c      	mov	r4, r1
 800c692:	4692      	mov	sl, r2
 800c694:	4699      	mov	r9, r3
 800c696:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800c698:	f7ff ffbc 	bl	800c614 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800c69c:	4b16      	ldr	r3, [pc, #88]	; (800c6f8 <LCD_LL_CopyRect+0x70>)
 800c69e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800c6a2:	eba7 0108 	sub.w	r1, r7, r8
 800c6a6:	008a      	lsls	r2, r1, #2
 800c6a8:	eb03 0c02 	add.w	ip, r3, r2
 800c6ac:	5899      	ldr	r1, [r3, r2]
 800c6ae:	f8dc 500c 	ldr.w	r5, [ip, #12]
 800c6b2:	fb0a 4405 	mla	r4, sl, r5, r4
 800c6b6:	f8dc 2014 	ldr.w	r2, [ip, #20]
 800c6ba:	eba7 0708 	sub.w	r7, r7, r8
 800c6be:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800c6c2:	4463      	add	r3, ip
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	fb00 f003 	mul.w	r0, r0, r3
 800c6ca:	fb02 0404 	mla	r4, r2, r4, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 800c6ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6d0:	fb03 9905 	mla	r9, r3, r5, r9
 800c6d4:	fb09 0202 	mla	r2, r9, r2, r0
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 800c6d8:	1bad      	subs	r5, r5, r6
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9302      	str	r3, [sp, #8]
 800c6de:	9501      	str	r5, [sp, #4]
 800c6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	4633      	mov	r3, r6
 800c6e6:	440a      	add	r2, r1
 800c6e8:	4421      	add	r1, r4
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	f7ff fe88 	bl	800c400 <DMA2D_CopyBuffer>
}
 800c6f0:	b004      	add	sp, #16
 800c6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f6:	bf00      	nop
 800c6f8:	2002124c 	.word	0x2002124c

0800c6fc <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	4607      	mov	r7, r0
 800c700:	460e      	mov	r6, r1
 800c702:	4615      	mov	r5, r2
 800c704:	461c      	mov	r4, r3
	
  _DMA_ExecOperation();
 800c706:	f7ff fe69 	bl	800c3dc <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 800c70a:	4b0d      	ldr	r3, [pc, #52]	; (800c740 <DMA2D_DrawBitmapL8+0x44>)
 800c70c:	2201      	movs	r2, #1
 800c70e:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800c710:	4b0c      	ldr	r3, [pc, #48]	; (800c744 <DMA2D_DrawBitmapL8+0x48>)
 800c712:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800c716:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 800c718:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800c71a:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 800c71c:	611d      	str	r5, [r3, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 800c71e:	641c      	str	r4, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 800c720:	2205      	movs	r2, #5
 800c722:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 800c724:	9a06      	ldr	r2, [sp, #24]
 800c726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 800c728:	9907      	ldr	r1, [sp, #28]
 800c72a:	9a08      	ldr	r2, [sp, #32]
 800c72c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c730:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	f042 0201 	orr.w	r2, r2, #1
 800c738:	601a      	str	r2, [r3, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 800c73a:	f7ff fe4f 	bl	800c3dc <_DMA_ExecOperation>
}
 800c73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c740:	20021248 	.word	0x20021248
 800c744:	4002b000 	.word	0x4002b000

0800c748 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 800c748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c74c:	4607      	mov	r7, r0
 800c74e:	4689      	mov	r9, r1
 800c750:	4690      	mov	r8, r2
 800c752:	461c      	mov	r4, r3
 800c754:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c756:	9d0a      	ldr	r5, [sp, #40]	; 0x28

  _DMA_ExecOperation();
 800c758:	f7ff fe40 	bl	800c3dc <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 800c75c:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <_DMA_DrawAlphaBitmap+0x54>)
 800c75e:	2201      	movs	r2, #1
 800c760:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 800c762:	490f      	ldr	r1, [pc, #60]	; (800c7a0 <_DMA_DrawAlphaBitmap+0x58>)
 800c764:	4b0f      	ldr	r3, [pc, #60]	; (800c7a4 <_DMA_DrawAlphaBitmap+0x5c>)
 800c766:	600b      	str	r3, [r1, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 800c768:	f8c1 900c 	str.w	r9, [r1, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 800c76c:	614f      	str	r7, [r1, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 800c76e:	63cf      	str	r7, [r1, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	610b      	str	r3, [r1, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 800c774:	618e      	str	r6, [r1, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 800c776:	640e      	str	r6, [r1, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 800c778:	2300      	movs	r3, #0
 800c77a:	61cb      	str	r3, [r1, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 800c77c:	624d      	str	r5, [r1, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 800c77e:	634d      	str	r5, [r1, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 800c780:	b2a4      	uxth	r4, r4
 800c782:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800c786:	644c      	str	r4, [r1, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800c788:	680a      	ldr	r2, [r1, #0]
 800c78a:	f240 2301 	movw	r3, #513	; 0x201
 800c78e:	4313      	orrs	r3, r2
 800c790:	600b      	str	r3, [r1, #0]

_DMA_ExecOperation();  
 800c792:	f7ff fe23 	bl	800c3dc <_DMA_ExecOperation>
}
 800c796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c79a:	bf00      	nop
 800c79c:	20021248 	.word	0x20021248
 800c7a0:	4002b000 	.word	0x4002b000
 800c7a4:	00020200 	.word	0x00020200

0800c7a8 <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 800c7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	4681      	mov	r9, r0
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	4692      	mov	sl, r2
 800c7b4:	461f      	mov	r7, r3
 800c7b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 800c7ba:	f7ff fe19 	bl	800c3f0 <GetPixelformat>
 800c7be:	4680      	mov	r8, r0
  BufferSize = GetBufferSize(LayerIndex);
 800c7c0:	4648      	mov	r0, r9
 800c7c2:	f7ff ff27 	bl	800c614 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800c7c6:	4b18      	ldr	r3, [pc, #96]	; (800c828 <_LCD_DrawBitmapAlpha+0x80>)
 800c7c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7cc:	eba1 0c09 	sub.w	ip, r1, r9
 800c7d0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800c7d4:	eb03 0e02 	add.w	lr, r3, r2
 800c7d8:	f853 c002 	ldr.w	ip, [r3, r2]
 800c7dc:	f8de 200c 	ldr.w	r2, [lr, #12]
 800c7e0:	fb0a 4402 	mla	r4, sl, r2, r4
 800c7e4:	f8de a014 	ldr.w	sl, [lr, #20]
 800c7e8:	eba1 0109 	sub.w	r1, r1, r9
 800c7ec:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 800c7f0:	4473      	add	r3, lr
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	fb00 f003 	mul.w	r0, r0, r3
 800c7f8:	fb0a 0404 	mla	r4, sl, r4, r0
 800c7fc:	eb0c 0004 	add.w	r0, ip, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800c800:	4633      	mov	r3, r6
 800c802:	2e00      	cmp	r6, #0
 800c804:	db0e      	blt.n	800c824 <_LCD_DrawBitmapAlpha+0x7c>
 800c806:	ebc5 03a3 	rsb	r3, r5, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800c80a:	1b52      	subs	r2, r2, r5
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800c80c:	f8cd 8008 	str.w	r8, [sp, #8]
 800c810:	9201      	str	r2, [sp, #4]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c816:	462a      	mov	r2, r5
 800c818:	4639      	mov	r1, r7
 800c81a:	f7ff ff95 	bl	800c748 <_DMA_DrawAlphaBitmap>
}
 800c81e:	b004      	add	sp, #16
 800c820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800c824:	1cf3      	adds	r3, r6, #3
 800c826:	e7ee      	b.n	800c806 <_LCD_DrawBitmapAlpha+0x5e>
 800c828:	2002124c 	.word	0x2002124c

0800c82c <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	9e08      	ldr	r6, [sp, #32]
 800c832:	9d09      	ldr	r5, [sp, #36]	; 0x24
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800c834:	462c      	mov	r4, r5
 800c836:	2d00      	cmp	r5, #0
 800c838:	db0e      	blt.n	800c858 <_LCD_DrawMemdevAlpha+0x2c>
 800c83a:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800c83e:	4635      	mov	r5, r6
 800c840:	2e00      	cmp	r6, #0
 800c842:	db0b      	blt.n	800c85c <_LCD_DrawMemdevAlpha+0x30>
 800c844:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 800c848:	2600      	movs	r6, #0
 800c84a:	9602      	str	r6, [sp, #8]
 800c84c:	9501      	str	r5, [sp, #4]
 800c84e:	9400      	str	r4, [sp, #0]
 800c850:	f7ff ff7a 	bl	800c748 <_DMA_DrawAlphaBitmap>
}
 800c854:	b004      	add	sp, #16
 800c856:	bd70      	pop	{r4, r5, r6, pc}
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800c858:	1cec      	adds	r4, r5, #3
 800c85a:	e7ee      	b.n	800c83a <_LCD_DrawMemdevAlpha+0xe>
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800c85c:	1cf5      	adds	r5, r6, #3
 800c85e:	e7f1      	b.n	800c844 <_LCD_DrawMemdevAlpha+0x18>

0800c860 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 800c860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c864:	b085      	sub	sp, #20
 800c866:	4605      	mov	r5, r0
 800c868:	460c      	mov	r4, r1
 800c86a:	4691      	mov	r9, r2
 800c86c:	4698      	mov	r8, r3
 800c86e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c870:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800c872:	f7ff fecf 	bl	800c614 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800c876:	4b17      	ldr	r3, [pc, #92]	; (800c8d4 <LCD_LL_DrawBitmap16bpp+0x74>)
 800c878:	00e9      	lsls	r1, r5, #3
 800c87a:	eba1 0c05 	sub.w	ip, r1, r5
 800c87e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800c882:	eb03 0e02 	add.w	lr, r3, r2
 800c886:	589a      	ldr	r2, [r3, r2]
 800c888:	f8de c00c 	ldr.w	ip, [lr, #12]
 800c88c:	fb09 440c 	mla	r4, r9, ip, r4
 800c890:	f8de 9014 	ldr.w	r9, [lr, #20]
 800c894:	1b49      	subs	r1, r1, r5
 800c896:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 800c89a:	4473      	add	r3, lr
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	fb00 f003 	mul.w	r0, r0, r3
 800c8a2:	fb09 0404 	mla	r4, r9, r4, r0
 800c8a6:	4422      	add	r2, r4
  OffLineSrc = (BytesPerLine / 2) - xSize;
 800c8a8:	463b      	mov	r3, r7
 800c8aa:	2f00      	cmp	r7, #0
 800c8ac:	db0f      	blt.n	800c8ce <LCD_LL_DrawBitmap16bpp+0x6e>
 800c8ae:	ebc6 0163 	rsb	r1, r6, r3, asr #1
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800c8b2:	ebac 0306 	sub.w	r3, ip, r6
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800c8b6:	9302      	str	r3, [sp, #8]
 800c8b8:	9101      	str	r1, [sp, #4]
 800c8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	4633      	mov	r3, r6
 800c8c0:	4641      	mov	r1, r8
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f7ff fd9c 	bl	800c400 <DMA2D_CopyBuffer>
}
 800c8c8:	b005      	add	sp, #20
 800c8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 2) - xSize;
 800c8ce:	1c7b      	adds	r3, r7, #1
 800c8d0:	e7ed      	b.n	800c8ae <LCD_LL_DrawBitmap16bpp+0x4e>
 800c8d2:	bf00      	nop
 800c8d4:	2002124c 	.word	0x2002124c

0800c8d8 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800c8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8dc:	b085      	sub	sp, #20
 800c8de:	4605      	mov	r5, r0
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	4691      	mov	r9, r2
 800c8e4:	4698      	mov	r8, r3
 800c8e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c8e8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800c8ea:	f7ff fe93 	bl	800c614 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800c8ee:	4b17      	ldr	r3, [pc, #92]	; (800c94c <LCD_LL_DrawBitmap32bpp+0x74>)
 800c8f0:	00e9      	lsls	r1, r5, #3
 800c8f2:	eba1 0c05 	sub.w	ip, r1, r5
 800c8f6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800c8fa:	eb03 0e02 	add.w	lr, r3, r2
 800c8fe:	589a      	ldr	r2, [r3, r2]
 800c900:	f8de c00c 	ldr.w	ip, [lr, #12]
 800c904:	fb09 440c 	mla	r4, r9, ip, r4
 800c908:	f8de 9014 	ldr.w	r9, [lr, #20]
 800c90c:	1b49      	subs	r1, r1, r5
 800c90e:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 800c912:	4473      	add	r3, lr
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	fb00 f003 	mul.w	r0, r0, r3
 800c91a:	fb09 0404 	mla	r4, r9, r4, r0
 800c91e:	4422      	add	r2, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800c920:	463b      	mov	r3, r7
 800c922:	2f00      	cmp	r7, #0
 800c924:	db0f      	blt.n	800c946 <LCD_LL_DrawBitmap32bpp+0x6e>
 800c926:	ebc6 01a3 	rsb	r1, r6, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800c92a:	ebac 0306 	sub.w	r3, ip, r6
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800c92e:	9302      	str	r3, [sp, #8]
 800c930:	9101      	str	r1, [sp, #4]
 800c932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	4633      	mov	r3, r6
 800c938:	4641      	mov	r1, r8
 800c93a:	4628      	mov	r0, r5
 800c93c:	f7ff fd88 	bl	800c450 <DMA2D_CopyBufferWithAlpha>
}
 800c940:	b005      	add	sp, #20
 800c942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800c946:	1cfb      	adds	r3, r7, #3
 800c948:	e7ed      	b.n	800c926 <LCD_LL_DrawBitmap32bpp+0x4e>
 800c94a:	bf00      	nop
 800c94c:	2002124c 	.word	0x2002124c

0800c950 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800c950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c954:	b085      	sub	sp, #20
 800c956:	4606      	mov	r6, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	4614      	mov	r4, r2
 800c95c:	4698      	mov	r8, r3
 800c95e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 800c960:	f7ff fe58 	bl	800c614 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800c964:	4a16      	ldr	r2, [pc, #88]	; (800c9c0 <LCD_LL_DrawBitmap8bpp+0x70>)
 800c966:	00f1      	lsls	r1, r6, #3
 800c968:	eba1 0c06 	sub.w	ip, r1, r6
 800c96c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800c970:	eb02 0e03 	add.w	lr, r2, r3
 800c974:	58d3      	ldr	r3, [r2, r3]
 800c976:	f8de c00c 	ldr.w	ip, [lr, #12]
 800c97a:	fb04 550c 	mla	r5, r4, ip, r5
 800c97e:	f8de 4014 	ldr.w	r4, [lr, #20]
 800c982:	1b89      	subs	r1, r1, r6
 800c984:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 800c988:	4472      	add	r2, lr
 800c98a:	6892      	ldr	r2, [r2, #8]
 800c98c:	fb00 f002 	mul.w	r0, r0, r2
 800c990:	fb04 0505 	mla	r5, r4, r5, r0
 800c994:	195c      	adds	r4, r3, r5
  OffLineSrc = BytesPerLine - xSize;
 800c996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c998:	eba3 0907 	sub.w	r9, r3, r7
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800c99c:	ebac 0507 	sub.w	r5, ip, r7
  PixelFormat = GetPixelformat(LayerIndex);
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f7ff fd25 	bl	800c3f0 <GetPixelformat>
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 800c9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9a8:	9302      	str	r3, [sp, #8]
 800c9aa:	9701      	str	r7, [sp, #4]
 800c9ac:	9000      	str	r0, [sp, #0]
 800c9ae:	462b      	mov	r3, r5
 800c9b0:	464a      	mov	r2, r9
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4640      	mov	r0, r8
 800c9b6:	f7ff fea1 	bl	800c6fc <DMA2D_DrawBitmapL8>
}
 800c9ba:	b005      	add	sp, #20
 800c9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9c0:	2002124c 	.word	0x2002124c

0800c9c4 <LCD_LL_FillRect>:
{
 800c9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	4690      	mov	r8, r2
 800c9d0:	461d      	mov	r5, r3
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 800c9d2:	f000 fed3 	bl	800d77c <GUI_GetDrawMode>
 800c9d6:	2801      	cmp	r0, #1
 800c9d8:	d02e      	beq.n	800ca38 <LCD_LL_FillRect+0x74>
    xSize = x1 - x0 + 1;
 800c9da:	1b2d      	subs	r5, r5, r4
 800c9dc:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 800c9de:	9b08      	ldr	r3, [sp, #32]
 800c9e0:	eba3 0708 	sub.w	r7, r3, r8
 800c9e4:	3701      	adds	r7, #1
    BufferSize = GetBufferSize(LayerIndex);
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f7ff fe14 	bl	800c614 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800c9ec:	4b1b      	ldr	r3, [pc, #108]	; (800ca5c <LCD_LL_FillRect+0x98>)
 800c9ee:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 800c9f2:	ebac 0106 	sub.w	r1, ip, r6
 800c9f6:	008a      	lsls	r2, r1, #2
 800c9f8:	eb03 0e02 	add.w	lr, r3, r2
 800c9fc:	5899      	ldr	r1, [r3, r2]
 800c9fe:	f8de 200c 	ldr.w	r2, [lr, #12]
 800ca02:	fb08 4402 	mla	r4, r8, r2, r4
 800ca06:	f8de 8014 	ldr.w	r8, [lr, #20]
 800ca0a:	ebac 0c06 	sub.w	ip, ip, r6
 800ca0e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 800ca12:	4473      	add	r3, lr
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	fb00 f003 	mul.w	r0, r0, r3
 800ca1a:	fb08 0404 	mla	r4, r8, r4, r0
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800ca1e:	1b52      	subs	r2, r2, r5
 800ca20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca22:	9301      	str	r3, [sp, #4]
 800ca24:	9200      	str	r2, [sp, #0]
 800ca26:	463b      	mov	r3, r7
 800ca28:	462a      	mov	r2, r5
 800ca2a:	4421      	add	r1, r4
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f7ff fd3f 	bl	800c4b0 <DMA2D_FillBuffer>
}
 800ca32:	b002      	add	sp, #8
 800ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 800ca38:	2200      	movs	r2, #0
 800ca3a:	2119      	movs	r1, #25
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f003 f8ce 	bl	800fbde <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 800ca42:	9b08      	ldr	r3, [sp, #32]
 800ca44:	462a      	mov	r2, r5
 800ca46:	4641      	mov	r1, r8
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f002 fae9 	bl	800f020 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800ca4e:	4a04      	ldr	r2, [pc, #16]	; (800ca60 <LCD_LL_FillRect+0x9c>)
 800ca50:	2119      	movs	r1, #25
 800ca52:	4630      	mov	r0, r6
 800ca54:	f003 f8c3 	bl	800fbde <LCD_SetDevFunc>
 800ca58:	e7eb      	b.n	800ca32 <LCD_LL_FillRect+0x6e>
 800ca5a:	bf00      	nop
 800ca5c:	2002124c 	.word	0x2002124c
 800ca60:	0800c9c5 	.word	0x0800c9c5

0800ca64 <DMA2D_Init>:
{
 800ca64:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 800ca66:	4809      	ldr	r0, [pc, #36]	; (800ca8c <DMA2D_Init+0x28>)
 800ca68:	4b09      	ldr	r3, [pc, #36]	; (800ca90 <DMA2D_Init+0x2c>)
 800ca6a:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ca6c:	f7f5 ff9e 	bl	80029ac <HAL_DMA2D_Init>
 800ca70:	b928      	cbnz	r0, 800ca7e <DMA2D_Init+0x1a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800ca72:	2101      	movs	r1, #1
 800ca74:	4805      	ldr	r0, [pc, #20]	; (800ca8c <DMA2D_Init+0x28>)
 800ca76:	f7f6 f867 	bl	8002b48 <HAL_DMA2D_ConfigLayer>
 800ca7a:	b918      	cbnz	r0, 800ca84 <DMA2D_Init+0x20>
}
 800ca7c:	bd08      	pop	{r3, pc}
    Error_Handler( );
 800ca7e:	f7f4 fca5 	bl	80013cc <Error_Handler>
 800ca82:	e7f6      	b.n	800ca72 <DMA2D_Init+0xe>
    Error_Handler( );
 800ca84:	f7f4 fca2 	bl	80013cc <Error_Handler>
}
 800ca88:	e7f8      	b.n	800ca7c <DMA2D_Init+0x18>
 800ca8a:	bf00      	nop
 800ca8c:	20021dec 	.word	0x20021dec
 800ca90:	0800c3f5 	.word	0x0800c3f5

0800ca94 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) 
{
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	4605      	mov	r5, r0
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 800ca98:	2400      	movs	r4, #0
 800ca9a:	b124      	cbz	r4, 800caa6 <HAL_LTDC_LineEventCallback+0x12>
      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7f7 feec 	bl	800487c <HAL_LTDC_ProgramLineEvent>
}
 800caa4:	bd70      	pop	{r4, r5, r6, pc}
    if (layer_prop[layer].pending_buffer >= 0) 
 800caa6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800caaa:	009a      	lsls	r2, r3, #2
 800caac:	4b11      	ldr	r3, [pc, #68]	; (800caf4 <HAL_LTDC_LineEventCallback+0x60>)
 800caae:	4413      	add	r3, r2
 800cab0:	6859      	ldr	r1, [r3, #4]
 800cab2:	2900      	cmp	r1, #0
 800cab4:	da01      	bge.n	800caba <HAL_LTDC_LineEventCallback+0x26>
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 800cab6:	3401      	adds	r4, #1
 800cab8:	e7ef      	b.n	800ca9a <HAL_LTDC_LineEventCallback+0x6>
      Addr = layer_prop[layer].address + \
 800caba:	480e      	ldr	r0, [pc, #56]	; (800caf4 <HAL_LTDC_LineEventCallback+0x60>)
 800cabc:	1886      	adds	r6, r0, r2
 800cabe:	5882      	ldr	r2, [r0, r2]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 800cac0:	68f0      	ldr	r0, [r6, #12]
 800cac2:	6933      	ldr	r3, [r6, #16]
 800cac4:	fb03 f300 	mul.w	r3, r3, r0
 800cac8:	fb03 f301 	mul.w	r3, r3, r1
 800cacc:	6970      	ldr	r0, [r6, #20]
      Addr = layer_prop[layer].address + \
 800cace:	fb00 2303 	mla	r3, r0, r3, r2
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 800cad2:	682a      	ldr	r2, [r5, #0]
 800cad4:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800cad8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 800cadc:	682a      	ldr	r2, [r5, #0]
 800cade:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cae0:	f043 0301 	orr.w	r3, r3, #1
 800cae4:	6253      	str	r3, [r2, #36]	; 0x24
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 800cae6:	4620      	mov	r0, r4
 800cae8:	f001 fc2a 	bl	800e340 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[layer].pending_buffer = -1;
 800caec:	f04f 33ff 	mov.w	r3, #4294967295
 800caf0:	6073      	str	r3, [r6, #4]
 800caf2:	e7e0      	b.n	800cab6 <HAL_LTDC_LineEventCallback+0x22>
 800caf4:	2002124c 	.word	0x2002124c

0800caf8 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  U32 i;

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800cafa:	2400      	movs	r4, #0
 800cafc:	2c00      	cmp	r4, #0
 800cafe:	d037      	beq.n	800cb70 <LCD_X_Config+0x78>
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800cb00:	2300      	movs	r3, #0
 800cb02:	461a      	mov	r2, r3
 800cb04:	493e      	ldr	r1, [pc, #248]	; (800cc00 <LCD_X_Config+0x108>)
 800cb06:	483f      	ldr	r0, [pc, #252]	; (800cc04 <LCD_X_Config+0x10c>)
 800cb08:	f001 faa4 	bl	800e054 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	f002 fe61 	bl	800f7d4 <LCD_GetSwapXYEx>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d032      	beq.n	800cb7c <LCD_X_Config+0x84>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 800cb16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cb1a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800cb1e:	2000      	movs	r0, #0
 800cb20:	f003 f8a5 	bl	800fc6e <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800cb24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cb28:	f44f 7188 	mov.w	r1, #272	; 0x110
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f003 f8e2 	bl	800fcf6 <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 800cb32:	4b35      	ldr	r3, [pc, #212]	; (800cc08 <LCD_X_Config+0x110>)
 800cb34:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800cb38:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800cb3a:	2400      	movs	r4, #0
 800cb3c:	b36c      	cbz	r4, 800cb9a <LCD_X_Config+0xa2>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 800cb3e:	4933      	ldr	r1, [pc, #204]	; (800cc0c <LCD_X_Config+0x114>)
 800cb40:	4833      	ldr	r0, [pc, #204]	; (800cc10 <LCD_X_Config+0x118>)
 800cb42:	f000 fab3 	bl	800d0ac <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 800cb46:	4933      	ldr	r1, [pc, #204]	; (800cc14 <LCD_X_Config+0x11c>)
 800cb48:	4833      	ldr	r0, [pc, #204]	; (800cc18 <LCD_X_Config+0x120>)
 800cb4a:	f000 fad1 	bl	800d0f0 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 800cb4e:	4933      	ldr	r1, [pc, #204]	; (800cc1c <LCD_X_Config+0x124>)
 800cb50:	4833      	ldr	r0, [pc, #204]	; (800cc20 <LCD_X_Config+0x128>)
 800cb52:	f000 fab1 	bl	800d0b8 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 800cb56:	4933      	ldr	r1, [pc, #204]	; (800cc24 <LCD_X_Config+0x12c>)
 800cb58:	4833      	ldr	r0, [pc, #204]	; (800cc28 <LCD_X_Config+0x130>)
 800cb5a:	f000 facf 	bl	800d0fc <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 800cb5e:	4933      	ldr	r1, [pc, #204]	; (800cc2c <LCD_X_Config+0x134>)
 800cb60:	4833      	ldr	r0, [pc, #204]	; (800cc30 <LCD_X_Config+0x138>)
 800cb62:	f000 fac3 	bl	800d0ec <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 800cb66:	4933      	ldr	r1, [pc, #204]	; (800cc34 <LCD_X_Config+0x13c>)
 800cb68:	4833      	ldr	r0, [pc, #204]	; (800cc38 <LCD_X_Config+0x140>)
 800cb6a:	f001 ffd3 	bl	800eb14 <GUI_SetFuncDrawAlpha>
}
 800cb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 800cb70:	2103      	movs	r1, #3
 800cb72:	4620      	mov	r0, r4
 800cb74:	f001 fbf8 	bl	800e368 <GUI_MULTIBUF_ConfigEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800cb78:	3401      	adds	r4, #1
 800cb7a:	e7bf      	b.n	800cafc <LCD_X_Config+0x4>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800cb7c:	f44f 7288 	mov.w	r2, #272	; 0x110
 800cb80:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800cb84:	2000      	movs	r0, #0
 800cb86:	f003 f872 	bl	800fc6e <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800cb8a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800cb8e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800cb92:	2000      	movs	r0, #0
 800cb94:	f003 f8af 	bl	800fcf6 <LCD_SetVSizeEx>
 800cb98:	e7cb      	b.n	800cb32 <LCD_X_Config+0x3a>
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 800cb9a:	4f1b      	ldr	r7, [pc, #108]	; (800cc08 <LCD_X_Config+0x110>)
 800cb9c:	00e3      	lsls	r3, r4, #3
 800cb9e:	1b1b      	subs	r3, r3, r4
 800cba0:	009d      	lsls	r5, r3, #2
 800cba2:	197e      	adds	r6, r7, r5
 800cba4:	4b16      	ldr	r3, [pc, #88]	; (800cc00 <LCD_X_Config+0x108>)
 800cba6:	61b3      	str	r3, [r6, #24]
    layer_prop[i].pending_buffer = -1;
 800cba8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbac:	6073      	str	r3, [r6, #4]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f002 fe04 	bl	800f7bc <LCD_GetBitsPerPixelEx>
 800cbb4:	10c0      	asrs	r0, r0, #3
 800cbb6:	6170      	str	r0, [r6, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 800cbb8:	4a20      	ldr	r2, [pc, #128]	; (800cc3c <LCD_X_Config+0x144>)
 800cbba:	2121      	movs	r1, #33	; 0x21
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f003 f80e 	bl	800fbde <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 800cbc2:	4a1f      	ldr	r2, [pc, #124]	; (800cc40 <LCD_X_Config+0x148>)
 800cbc4:	2123      	movs	r1, #35	; 0x23
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f003 f809 	bl	800fbde <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800cbcc:	4a1d      	ldr	r2, [pc, #116]	; (800cc44 <LCD_X_Config+0x14c>)
 800cbce:	2119      	movs	r1, #25
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f003 f804 	bl	800fbde <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 800cbd6:	4a1c      	ldr	r2, [pc, #112]	; (800cc48 <LCD_X_Config+0x150>)
 800cbd8:	2125      	movs	r1, #37	; 0x25
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f002 ffff 	bl	800fbde <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 800cbe0:	4a1a      	ldr	r2, [pc, #104]	; (800cc4c <LCD_X_Config+0x154>)
 800cbe2:	2124      	movs	r1, #36	; 0x24
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f002 fffa 	bl	800fbde <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 800cbea:	4a19      	ldr	r2, [pc, #100]	; (800cc50 <LCD_X_Config+0x158>)
 800cbec:	2128      	movs	r1, #40	; 0x28
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f002 fff5 	bl	800fbde <LCD_SetDevFunc>
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 800cbf4:	5979      	ldr	r1, [r7, r5]
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f003 f867 	bl	800fcca <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800cbfc:	3401      	adds	r4, #1
 800cbfe:	e79d      	b.n	800cb3c <LCD_X_Config+0x44>
 800cc00:	0801ba8c 	.word	0x0801ba8c
 800cc04:	0801bad8 	.word	0x0801bad8
 800cc08:	2002124c 	.word	0x2002124c
 800cc0c:	0800c5a1 	.word	0x0800c5a1
 800cc10:	0800c605 	.word	0x0800c605
 800cc14:	0800c591 	.word	0x0800c591
 800cc18:	0800c5f5 	.word	0x0800c5f5
 800cc1c:	0800c581 	.word	0x0800c581
 800cc20:	0800c5e5 	.word	0x0800c5e5
 800cc24:	0800c571 	.word	0x0800c571
 800cc28:	0800c5d5 	.word	0x0800c5d5
 800cc2c:	0800c561 	.word	0x0800c561
 800cc30:	0800c5c5 	.word	0x0800c5c5
 800cc34:	0800c7a9 	.word	0x0800c7a9
 800cc38:	0800c82d 	.word	0x0800c82d
 800cc3c:	0800c641 	.word	0x0800c641
 800cc40:	0800c689 	.word	0x0800c689
 800cc44:	0800c9c5 	.word	0x0800c9c5
 800cc48:	0800c951 	.word	0x0800c951
 800cc4c:	0800c861 	.word	0x0800c861
 800cc50:	0800c8d9 	.word	0x0800c8d9

0800cc54 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	4604      	mov	r4, r0
 800cc5a:	4615      	mov	r5, r2
 int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 800cc5c:	3903      	subs	r1, #3
 800cc5e:	290b      	cmp	r1, #11
 800cc60:	f200 809f 	bhi.w	800cda2 <LCD_X_DisplayDriver+0x14e>
 800cc64:	e8df f001 	tbb	[pc, r1]
 800cc68:	342c2406 	.word	0x342c2406
 800cc6c:	793c5c64 	.word	0x793c5c64
 800cc70:	1b8d809d 	.word	0x1b8d809d
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 800cc74:	494c      	ldr	r1, [pc, #304]	; (800cda8 <LCD_X_DisplayDriver+0x154>)
 800cc76:	00c3      	lsls	r3, r0, #3
 800cc78:	1a1b      	subs	r3, r3, r0
 800cc7a:	009a      	lsls	r2, r3, #2
 800cc7c:	1888      	adds	r0, r1, r2
 800cc7e:	588e      	ldr	r6, [r1, r2]
 800cc80:	6869      	ldr	r1, [r5, #4]
 800cc82:	68c3      	ldr	r3, [r0, #12]
 800cc84:	fb03 f301 	mul.w	r3, r3, r1
 800cc88:	6941      	ldr	r1, [r0, #20]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	fb01 6103 	mla	r1, r1, r3, r6
 800cc90:	4846      	ldr	r0, [pc, #280]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cc92:	f7f7 fdd2 	bl	800483a <HAL_LTDC_SetAddress>
 int r = 0;
 800cc96:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r; 
}
 800cc98:	4628      	mov	r0, r5
 800cc9a:	b002      	add	sp, #8
 800cc9c:	bd70      	pop	{r4, r5, r6, pc}
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 800cc9e:	6811      	ldr	r1, [r2, #0]
 800cca0:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 800cca4:	00a2      	lsls	r2, r4, #2
 800cca6:	4b40      	ldr	r3, [pc, #256]	; (800cda8 <LCD_X_DisplayDriver+0x154>)
 800cca8:	4413      	add	r3, r2
 800ccaa:	6059      	str	r1, [r3, #4]
 int r = 0;
 800ccac:	2500      	movs	r5, #0
    break;
 800ccae:	e7f3      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	483d      	ldr	r0, [pc, #244]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800ccb8:	f7f7 fcfb 	bl	80046b2 <HAL_LTDC_ConfigCLUT>
 int r = 0;
 800ccbc:	2500      	movs	r5, #0
    break;
 800ccbe:	e7eb      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    __HAL_LTDC_ENABLE(&hltdc);
 800ccc0:	4b3a      	ldr	r3, [pc, #232]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	6993      	ldr	r3, [r2, #24]
 800ccc6:	f043 0301 	orr.w	r3, r3, #1
 800ccca:	6193      	str	r3, [r2, #24]
 int r = 0;
 800cccc:	2500      	movs	r5, #0
    break;
 800ccce:	e7e3      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    __HAL_LTDC_DISABLE(&hltdc);
 800ccd0:	4b36      	ldr	r3, [pc, #216]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	6993      	ldr	r3, [r2, #24]
 800ccd6:	f023 0301 	bic.w	r3, r3, #1
 800ccda:	6193      	str	r3, [r2, #24]
 int r = 0;
 800ccdc:	2500      	movs	r5, #0
    break;
 800ccde:	e7db      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 800cce0:	6813      	ldr	r3, [r2, #0]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d011      	beq.n	800cd0a <LCD_X_DisplayDriver+0xb6>
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 800cce6:	4b31      	ldr	r3, [pc, #196]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	eb03 14c0 	add.w	r4, r3, r0, lsl #7
 800ccee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ccf2:	f023 0301 	bic.w	r3, r3, #1
 800ccf6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 800ccfa:	4b2c      	ldr	r3, [pc, #176]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cd00:	f043 0301 	orr.w	r3, r3, #1
 800cd04:	6253      	str	r3, [r2, #36]	; 0x24
 int r = 0;
 800cd06:	2500      	movs	r5, #0
    break;
 800cd08:	e7c6      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 800cd0a:	4b28      	ldr	r3, [pc, #160]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	eb03 14c0 	add.w	r4, r3, r0, lsl #7
 800cd12:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800cd1e:	e7ec      	b.n	800ccfa <LCD_X_DisplayDriver+0xa6>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 800cd20:	4603      	mov	r3, r0
 800cd22:	6852      	ldr	r2, [r2, #4]
 800cd24:	6829      	ldr	r1, [r5, #0]
 800cd26:	4821      	ldr	r0, [pc, #132]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cd28:	f7f7 fd3d 	bl	80047a6 <HAL_LTDC_SetWindowPosition>
 int r = 0;
 800cd2c:	2500      	movs	r5, #0
    break;
 800cd2e:	e7b3      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 800cd30:	466a      	mov	r2, sp
 800cd32:	a901      	add	r1, sp, #4
 800cd34:	f001 fb64 	bl	800e400 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 800cd38:	6828      	ldr	r0, [r5, #0]
 800cd3a:	00e2      	lsls	r2, r4, #3
 800cd3c:	1b12      	subs	r2, r2, r4
 800cd3e:	0091      	lsls	r1, r2, #2
 800cd40:	4b19      	ldr	r3, [pc, #100]	; (800cda8 <LCD_X_DisplayDriver+0x154>)
 800cd42:	440b      	add	r3, r1
 800cd44:	60d8      	str	r0, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800cd46:	686a      	ldr	r2, [r5, #4]
 800cd48:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 800cd4a:	4623      	mov	r3, r4
 800cd4c:	9a00      	ldr	r2, [sp, #0]
 800cd4e:	9901      	ldr	r1, [sp, #4]
 800cd50:	4816      	ldr	r0, [pc, #88]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cd52:	f7f7 fd28 	bl	80047a6 <HAL_LTDC_SetWindowPosition>
 int r = 0;
 800cd56:	2500      	movs	r5, #0
    break;
 800cd58:	e79e      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	6829      	ldr	r1, [r5, #0]
 800cd5e:	4813      	ldr	r0, [pc, #76]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cd60:	f7f7 fd4a 	bl	80047f8 <HAL_LTDC_SetAlpha>
 int r = 0;
 800cd64:	2500      	movs	r5, #0
    break;
 800cd66:	e797      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 800cd68:	6815      	ldr	r5, [r2, #0]
 800cd6a:	b12d      	cbz	r5, 800cd78 <LCD_X_DisplayDriver+0x124>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800cd6c:	4601      	mov	r1, r0
 800cd6e:	480f      	ldr	r0, [pc, #60]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cd70:	f7f7 fcdd 	bl	800472e <HAL_LTDC_EnableColorKeying>
 int r = 0;
 800cd74:	2500      	movs	r5, #0
 800cd76:	e78f      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 800cd78:	4601      	mov	r1, r0
 800cd7a:	480c      	ldr	r0, [pc, #48]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cd7c:	f7f7 fcf5 	bl	800476a <HAL_LTDC_DisableColorKeying>
 800cd80:	e78a      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800cd82:	6813      	ldr	r3, [r2, #0]
 800cd84:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 800cd88:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800cd8c:	4311      	orrs	r1, r2
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 800cd8e:	041b      	lsls	r3, r3, #16
 800cd90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 800cd94:	4602      	mov	r2, r0
 800cd96:	4319      	orrs	r1, r3
 800cd98:	4804      	ldr	r0, [pc, #16]	; (800cdac <LCD_X_DisplayDriver+0x158>)
 800cd9a:	f7f7 fc66 	bl	800466a <HAL_LTDC_ConfigColorKeying>
 int r = 0;
 800cd9e:	2500      	movs	r5, #0
    break;
 800cda0:	e77a      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
    r = -1;
 800cda2:	f04f 35ff 	mov.w	r5, #4294967295
  return r; 
 800cda6:	e777      	b.n	800cc98 <LCD_X_DisplayDriver+0x44>
 800cda8:	2002124c 	.word	0x2002124c
 800cdac:	20021d44 	.word	0x20021d44

0800cdb0 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 800cdb0:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 800cdb2:	f7ff f987 	bl	800c0c4 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 800cdb6:	f7ff f9b7 	bl	800c128 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 800cdba:	f7ff f925 	bl	800c008 <MX_LCD_Init>
  MX_DMA2D_Init();
 800cdbe:	f7ff fa01 	bl	800c1c4 <MX_DMA2D_Init>
  DMA2D_Init();
 800cdc2:	f7ff fe4f 	bl	800ca64 <DMA2D_Init>
 
}
 800cdc6:	bd08      	pop	{r3, pc}

0800cdc8 <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
 800cdc8:	b508      	push	{r3, lr}
  /* Initialize the GUI */
  GUI_Init();
 800cdca:	f000 ffb3 	bl	800dd34 <GUI_Init>

   WM_MULTIBUF_Enable(1);
 800cdce:	2001      	movs	r0, #1
 800cdd0:	f006 faa8 	bl	8013324 <WM_MULTIBUF_Enable>

  /* Activate the use of memory device feature */
     /* USER CODE BEGIN WM_SetCreateFlags */
      //WM_SetCreateFlags(WM_CF_MEMDEV);
    /* USER CODE END WM_SetCreateFlags */
}
 800cdd4:	bd08      	pop	{r3, pc}
	...

0800cdd8 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cdd8:	2904      	cmp	r1, #4
 800cdda:	d00c      	beq.n	800cdf6 <USBH_UserProcess+0x1e>
 800cddc:	2905      	cmp	r1, #5
 800cdde:	d002      	beq.n	800cde6 <USBH_UserProcess+0xe>
 800cde0:	2902      	cmp	r1, #2
 800cde2:	d004      	beq.n	800cdee <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cde4:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800cde6:	4b06      	ldr	r3, [pc, #24]	; (800ce00 <USBH_UserProcess+0x28>)
 800cde8:	2203      	movs	r2, #3
 800cdea:	701a      	strb	r2, [r3, #0]
  break;
 800cdec:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 800cdee:	4b04      	ldr	r3, [pc, #16]	; (800ce00 <USBH_UserProcess+0x28>)
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	701a      	strb	r2, [r3, #0]
  break;
 800cdf4:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800cdf6:	4b02      	ldr	r3, [pc, #8]	; (800ce00 <USBH_UserProcess+0x28>)
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	701a      	strb	r2, [r3, #0]
}
 800cdfc:	e7f2      	b.n	800cde4 <USBH_UserProcess+0xc>
 800cdfe:	bf00      	nop
 800ce00:	20021268 	.word	0x20021268

0800ce04 <MX_USB_HOST_Init>:
{
 800ce04:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ce06:	2201      	movs	r2, #1
 800ce08:	490b      	ldr	r1, [pc, #44]	; (800ce38 <MX_USB_HOST_Init+0x34>)
 800ce0a:	480c      	ldr	r0, [pc, #48]	; (800ce3c <MX_USB_HOST_Init+0x38>)
 800ce0c:	f7fc fa82 	bl	8009314 <USBH_Init>
 800ce10:	b948      	cbnz	r0, 800ce26 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ce12:	490b      	ldr	r1, [pc, #44]	; (800ce40 <MX_USB_HOST_Init+0x3c>)
 800ce14:	4809      	ldr	r0, [pc, #36]	; (800ce3c <MX_USB_HOST_Init+0x38>)
 800ce16:	f7fc fab3 	bl	8009380 <USBH_RegisterClass>
 800ce1a:	b938      	cbnz	r0, 800ce2c <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ce1c:	4807      	ldr	r0, [pc, #28]	; (800ce3c <MX_USB_HOST_Init+0x38>)
 800ce1e:	f7fc faf3 	bl	8009408 <USBH_Start>
 800ce22:	b930      	cbnz	r0, 800ce32 <MX_USB_HOST_Init+0x2e>
}
 800ce24:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ce26:	f7f4 fad1 	bl	80013cc <Error_Handler>
 800ce2a:	e7f2      	b.n	800ce12 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 800ce2c:	f7f4 face 	bl	80013cc <Error_Handler>
 800ce30:	e7f4      	b.n	800ce1c <MX_USB_HOST_Init+0x18>
    Error_Handler();
 800ce32:	f7f4 facb 	bl	80013cc <Error_Handler>
}
 800ce36:	e7f5      	b.n	800ce24 <MX_USB_HOST_Init+0x20>
 800ce38:	0800cdd9 	.word	0x0800cdd9
 800ce3c:	20021e60 	.word	0x20021e60
 800ce40:	200001ec 	.word	0x200001ec

0800ce44 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ce44:	b510      	push	{r4, lr}
 800ce46:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9303      	str	r3, [sp, #12]
 800ce4c:	9304      	str	r3, [sp, #16]
 800ce4e:	9305      	str	r3, [sp, #20]
 800ce50:	9306      	str	r3, [sp, #24]
 800ce52:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ce54:	6803      	ldr	r3, [r0, #0]
 800ce56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce5a:	d001      	beq.n	800ce60 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce5c:	b008      	add	sp, #32
 800ce5e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce60:	4c18      	ldr	r4, [pc, #96]	; (800cec4 <HAL_HCD_MspInit+0x80>)
 800ce62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ce64:	f043 0301 	orr.w	r3, r3, #1
 800ce68:	6323      	str	r3, [r4, #48]	; 0x30
 800ce6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800ce74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ce78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce82:	230a      	movs	r3, #10
 800ce84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce86:	a903      	add	r1, sp, #12
 800ce88:	480f      	ldr	r0, [pc, #60]	; (800cec8 <HAL_HCD_MspInit+0x84>)
 800ce8a:	f7f5 febf 	bl	8002c0c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce94:	6363      	str	r3, [r4, #52]	; 0x34
 800ce96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	9b01      	ldr	r3, [sp, #4]
 800cea0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cea6:	6463      	str	r3, [r4, #68]	; 0x44
 800cea8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ceaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ceae:	9302      	str	r3, [sp, #8]
 800ceb0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2105      	movs	r1, #5
 800ceb6:	2043      	movs	r0, #67	; 0x43
 800ceb8:	f7f5 fc12 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cebc:	2043      	movs	r0, #67	; 0x43
 800cebe:	f7f5 fc41 	bl	8002744 <HAL_NVIC_EnableIRQ>
}
 800cec2:	e7cb      	b.n	800ce5c <HAL_HCD_MspInit+0x18>
 800cec4:	40023800 	.word	0x40023800
 800cec8:	40020000 	.word	0x40020000

0800cecc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cecc:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 800cece:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ced2:	f7fc faa6 	bl	8009422 <USBH_LL_IncTimer>
}
 800ced6:	bd08      	pop	{r3, pc}

0800ced8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ced8:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 800ceda:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cede:	f7fc fbf8 	bl	80096d2 <USBH_LL_Connect>
}
 800cee2:	bd08      	pop	{r3, pc}

0800cee4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cee4:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800cee6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ceea:	f7fc fc0f 	bl	800970c <USBH_LL_Disconnect>
}
 800ceee:	bd08      	pop	{r3, pc}

0800cef0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cef0:	b508      	push	{r3, lr}
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cef2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cef6:	f7fc fc2d 	bl	8009754 <USBH_LL_NotifyURBChange>
#endif
}
 800cefa:	bd08      	pop	{r3, pc}

0800cefc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cefc:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 800cefe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cf02:	f7fc fa97 	bl	8009434 <USBH_LL_PortEnabled>
} 
 800cf06:	bd08      	pop	{r3, pc}

0800cf08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf08:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 800cf0a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cf0e:	f7fc fa95 	bl	800943c <USBH_LL_PortDisabled>
} 
 800cf12:	bd08      	pop	{r3, pc}

0800cf14 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cf14:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d001      	beq.n	800cf20 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	4770      	bx	lr
{
 800cf20:	b510      	push	{r4, lr}
 800cf22:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 800cf24:	480f      	ldr	r0, [pc, #60]	; (800cf64 <USBH_LL_Init+0x50>)
 800cf26:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800cf2a:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800cf32:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cf34:	2308      	movs	r3, #8
 800cf36:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cf40:	2202      	movs	r2, #2
 800cf42:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf44:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cf46:	f7f6 f89d 	bl	8003084 <HAL_HCD_Init>
 800cf4a:	b940      	cbnz	r0, 800cf5e <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cf4c:	4805      	ldr	r0, [pc, #20]	; (800cf64 <USBH_LL_Init+0x50>)
 800cf4e:	f7f6 fdac 	bl	8003aaa <HAL_HCD_GetCurrentFrame>
 800cf52:	4601      	mov	r1, r0
 800cf54:	4620      	mov	r0, r4
 800cf56:	f7fc fa61 	bl	800941c <USBH_LL_SetTimer>
}
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800cf5e:	f7f4 fa35 	bl	80013cc <Error_Handler>
 800cf62:	e7f3      	b.n	800cf4c <USBH_LL_Init+0x38>
 800cf64:	20022238 	.word	0x20022238

0800cf68 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cf68:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cf6a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800cf6e:	f7f6 fda1 	bl	8003ab4 <HAL_HCD_GetCurrentSpeed>
 800cf72:	b118      	cbz	r0, 800cf7c <USBH_LL_GetSpeed+0x14>
 800cf74:	2802      	cmp	r0, #2
 800cf76:	d003      	beq.n	800cf80 <USBH_LL_GetSpeed+0x18>
  case 0 :
    speed = USBH_SPEED_HIGH;
    break;

  case 1 :
    speed = USBH_SPEED_FULL;
 800cf78:	2001      	movs	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800cf7a:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_HIGH;
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	e7fc      	b.n	800cf7a <USBH_LL_GetSpeed+0x12>
    speed = USBH_SPEED_LOW;
 800cf80:	2002      	movs	r0, #2
    break;
 800cf82:	e7fa      	b.n	800cf7a <USBH_LL_GetSpeed+0x12>

0800cf84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf84:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cf86:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800cf8a:	f7f6 fd88 	bl	8003a9e <HAL_HCD_HC_GetXferCount>
}
 800cf8e:	bd08      	pop	{r3, pc}

0800cf90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf90:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cf92:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800cf96:	f7f6 fd7b 	bl	8003a90 <HAL_HCD_HC_GetURBState>
}
 800cf9a:	bd08      	pop	{r3, pc}

0800cf9c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cf9c:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800cf9e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d004      	beq.n	800cfb0 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cfa6:	20c8      	movs	r0, #200	; 0xc8
 800cfa8:	f7f5 f9d8 	bl	800235c <HAL_Delay>
  return USBH_OK;
}
 800cfac:	2000      	movs	r0, #0
 800cfae:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	f000 f86f 	bl	800d094 <MX_DriverVbusFS>
 800cfb6:	e7f6      	b.n	800cfa6 <USBH_LL_DriverVBUS+0xa>

0800cfb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cfb8:	b410      	push	{r4}
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cfba:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800cfbe:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800cfc2:	00e0      	lsls	r0, r4, #3
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	4418      	add	r0, r3
 800cfc8:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 800cfcc:	b948      	cbnz	r0, 800cfe2 <USBH_LL_SetToggle+0x2a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cfce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cfd2:	00c8      	lsls	r0, r1, #3
 800cfd4:	4403      	add	r3, r0
 800cfd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  return USBH_OK;
}
 800cfda:	2000      	movs	r0, #0
 800cfdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfe0:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 800cfe2:	4423      	add	r3, r4
 800cfe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800cfe8:	e7f7      	b.n	800cfda <USBH_LL_SetToggle+0x22>

0800cfea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cfea:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 800cfec:	f7f5 f9b6 	bl	800235c <HAL_Delay>
}
 800cff0:	bd08      	pop	{r3, pc}

0800cff2 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800cff2:	b118      	cbz	r0, 800cffc <USBH_Get_USB_Status+0xa>
 800cff4:	2802      	cmp	r0, #2
 800cff6:	d003      	beq.n	800d000 <USBH_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBH_OK;
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cff8:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800cffa:	4770      	bx	lr
      usb_status = USBH_OK;
 800cffc:	2000      	movs	r0, #0
 800cffe:	4770      	bx	lr
      usb_status = USBH_BUSY;
 800d000:	2001      	movs	r0, #1
    break;
 800d002:	4770      	bx	lr

0800d004 <USBH_LL_Start>:
{
 800d004:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 800d006:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d00a:	f7f6 fd14 	bl	8003a36 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 800d00e:	f7ff fff0 	bl	800cff2 <USBH_Get_USB_Status>
}
 800d012:	bd08      	pop	{r3, pc}

0800d014 <USBH_LL_Stop>:
{
 800d014:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 800d016:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d01a:	f7f6 fd22 	bl	8003a62 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 800d01e:	f7ff ffe8 	bl	800cff2 <USBH_Get_USB_Status>
}
 800d022:	bd08      	pop	{r3, pc}

0800d024 <USBH_LL_ResetPort>:
{
 800d024:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d026:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d02a:	f7f6 fd2c 	bl	8003a86 <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 800d02e:	f7ff ffe0 	bl	800cff2 <USBH_Get_USB_Status>
}
 800d032:	bd08      	pop	{r3, pc}

0800d034 <USBH_LL_OpenPipe>:
{
 800d034:	b510      	push	{r4, lr}
 800d036:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d038:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d03c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d040:	9402      	str	r4, [sp, #8]
 800d042:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800d046:	9401      	str	r4, [sp, #4]
 800d048:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d04c:	9400      	str	r4, [sp, #0]
 800d04e:	f7f5 ffb7 	bl	8002fc0 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 800d052:	f7ff ffce 	bl	800cff2 <USBH_Get_USB_Status>
}
 800d056:	b004      	add	sp, #16
 800d058:	bd10      	pop	{r4, pc}

0800d05a <USBH_LL_ClosePipe>:
{
 800d05a:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d05c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d060:	f7f5 fffe 	bl	8003060 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 800d064:	f7ff ffc5 	bl	800cff2 <USBH_Get_USB_Status>
}
 800d068:	bd08      	pop	{r3, pc}

0800d06a <USBH_LL_SubmitURB>:
{
 800d06a:	b510      	push	{r4, lr}
 800d06c:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d06e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d072:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800d076:	9403      	str	r4, [sp, #12]
 800d078:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d07c:	9402      	str	r4, [sp, #8]
 800d07e:	9c07      	ldr	r4, [sp, #28]
 800d080:	9401      	str	r4, [sp, #4]
 800d082:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d086:	9400      	str	r4, [sp, #0]
 800d088:	f7f6 f83e 	bl	8003108 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d08c:	f7ff ffb1 	bl	800cff2 <USBH_Get_USB_Status>
}
 800d090:	b004      	add	sp, #16
 800d092:	bd10      	pop	{r4, pc}

0800d094 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800d094:	b508      	push	{r3, lr}
  uint8_t data = state; 
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d096:	b128      	cbz	r0, 800d0a4 <MX_DriverVbusFS+0x10>
    data = GPIO_PIN_SET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d098:	2200      	movs	r2, #0
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800d09a:	2120      	movs	r1, #32
 800d09c:	4802      	ldr	r0, [pc, #8]	; (800d0a8 <MX_DriverVbusFS+0x14>)
 800d09e:	f7f5 ff4a 	bl	8002f36 <HAL_GPIO_WritePin>
}
 800d0a2:	bd08      	pop	{r3, pc}
    data = GPIO_PIN_SET;
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	e7f8      	b.n	800d09a <MX_DriverVbusFS+0x6>
 800d0a8:	40020c00 	.word	0x40020c00

0800d0ac <GUICC_M1555I_SetCustColorConv>:
 800d0ac:	4b01      	ldr	r3, [pc, #4]	; (800d0b4 <GUICC_M1555I_SetCustColorConv+0x8>)
 800d0ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0b2:	4770      	bx	lr
 800d0b4:	20000290 	.word	0x20000290

0800d0b8 <GUICC_M4444I_SetCustColorConv>:
 800d0b8:	4b01      	ldr	r3, [pc, #4]	; (800d0c0 <GUICC_M4444I_SetCustColorConv+0x8>)
 800d0ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0be:	4770      	bx	lr
 800d0c0:	20000298 	.word	0x20000298

0800d0c4 <_Color2Index_M8888I>:
 800d0c4:	4770      	bx	lr

0800d0c6 <_GetIndexMask_M8888I>:
 800d0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ca:	4770      	bx	lr

0800d0cc <_Color2IndexBulk_M8888I>:
 800d0cc:	b510      	push	{r4, lr}
 800d0ce:	f850 4b04 	ldr.w	r4, [r0], #4
 800d0d2:	3a01      	subs	r2, #1
 800d0d4:	600c      	str	r4, [r1, #0]
 800d0d6:	4419      	add	r1, r3
 800d0d8:	d1f9      	bne.n	800d0ce <_Color2IndexBulk_M8888I+0x2>
 800d0da:	bd10      	pop	{r4, pc}

0800d0dc <_Index2ColorBulk_M8888I>:
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	6804      	ldr	r4, [r0, #0]
 800d0e0:	3a01      	subs	r2, #1
 800d0e2:	4418      	add	r0, r3
 800d0e4:	f841 4b04 	str.w	r4, [r1], #4
 800d0e8:	d1f9      	bne.n	800d0de <_Index2ColorBulk_M8888I+0x2>
 800d0ea:	bd10      	pop	{r4, pc}

0800d0ec <GUICC_M8888I_SetCustColorConv>:
 800d0ec:	4770      	bx	lr
	...

0800d0f0 <GUICC_M565_SetCustColorConv>:
 800d0f0:	4b01      	ldr	r3, [pc, #4]	; (800d0f8 <GUICC_M565_SetCustColorConv+0x8>)
 800d0f2:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0f6:	4770      	bx	lr
 800d0f8:	200002a0 	.word	0x200002a0

0800d0fc <GUICC_M888_SetCustColorConv>:
 800d0fc:	4770      	bx	lr

0800d0fe <LCD_Index2Color_M8888I>:
 800d0fe:	4770      	bx	lr

0800d100 <LCD_Index2Color_M888>:
 800d100:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800d104:	4770      	bx	lr
	...

0800d108 <_PushFreeBlock>:
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <_PushFreeBlock+0x20>)
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	3201      	adds	r2, #1
 800d10e:	b510      	push	{r4, lr}
 800d110:	605a      	str	r2, [r3, #4]
 800d112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d114:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d116:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800d11a:	604c      	str	r4, [r1, #4]
 800d11c:	2100      	movs	r1, #0
 800d11e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800d122:	6258      	str	r0, [r3, #36]	; 0x24
 800d124:	bd10      	pop	{r4, pc}
 800d126:	bf00      	nop
 800d128:	200224fc 	.word	0x200224fc

0800d12c <_RemoveFreeBlock>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	230f      	movs	r3, #15
 800d130:	6844      	ldr	r4, [r0, #4]
 800d132:	490d      	ldr	r1, [pc, #52]	; (800d168 <_RemoveFreeBlock+0x3c>)
 800d134:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d13a:	4294      	cmp	r4, r2
 800d13c:	4a0a      	ldr	r2, [pc, #40]	; (800d168 <_RemoveFreeBlock+0x3c>)
 800d13e:	d203      	bcs.n	800d148 <_RemoveFreeBlock+0x1c>
 800d140:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d144:	d2f6      	bcs.n	800d134 <_RemoveFreeBlock+0x8>
 800d146:	bd10      	pop	{r4, pc}
 800d148:	2b0f      	cmp	r3, #15
 800d14a:	d80c      	bhi.n	800d166 <_RemoveFreeBlock+0x3a>
 800d14c:	6811      	ldr	r1, [r2, #0]
 800d14e:	1b09      	subs	r1, r1, r4
 800d150:	6011      	str	r1, [r2, #0]
 800d152:	6881      	ldr	r1, [r0, #8]
 800d154:	68c0      	ldr	r0, [r0, #12]
 800d156:	b101      	cbz	r1, 800d15a <_RemoveFreeBlock+0x2e>
 800d158:	6048      	str	r0, [r1, #4]
 800d15a:	b108      	cbz	r0, 800d160 <_RemoveFreeBlock+0x34>
 800d15c:	6001      	str	r1, [r0, #0]
 800d15e:	bd10      	pop	{r4, pc}
 800d160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d164:	6459      	str	r1, [r3, #68]	; 0x44
 800d166:	bd10      	pop	{r4, pc}
 800d168:	200224fc 	.word	0x200224fc

0800d16c <_AddFreeMemory>:
 800d16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16e:	4e27      	ldr	r6, [pc, #156]	; (800d20c <_AddFreeMemory+0xa0>)
 800d170:	4605      	mov	r5, r0
 800d172:	1808      	adds	r0, r1, r0
 800d174:	460c      	mov	r4, r1
 800d176:	68f3      	ldr	r3, [r6, #12]
 800d178:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800d17a:	3b01      	subs	r3, #1
 800d17c:	4413      	add	r3, r2
 800d17e:	4283      	cmp	r3, r0
 800d180:	d305      	bcc.n	800d18e <_AddFreeMemory+0x22>
 800d182:	594b      	ldr	r3, [r1, r5]
 800d184:	b91b      	cbnz	r3, 800d18e <_AddFreeMemory+0x22>
 800d186:	6843      	ldr	r3, [r0, #4]
 800d188:	441d      	add	r5, r3
 800d18a:	f7ff ffcf 	bl	800d12c <_RemoveFreeBlock>
 800d18e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800d190:	429c      	cmp	r4, r3
 800d192:	d90a      	bls.n	800d1aa <_AddFreeMemory+0x3e>
 800d194:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800d198:	1be7      	subs	r7, r4, r7
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	b92b      	cbnz	r3, 800d1aa <_AddFreeMemory+0x3e>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	463c      	mov	r4, r7
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	441d      	add	r5, r3
 800d1a6:	f7ff ffc1 	bl	800d12c <_RemoveFreeBlock>
 800d1aa:	230f      	movs	r3, #15
 800d1ac:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800d1b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d1b2:	4295      	cmp	r5, r2
 800d1b4:	d203      	bcs.n	800d1be <_AddFreeMemory+0x52>
 800d1b6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d1ba:	d2f7      	bcs.n	800d1ac <_AddFreeMemory+0x40>
 800d1bc:	e023      	b.n	800d206 <_AddFreeMemory+0x9a>
 800d1be:	2b0f      	cmp	r3, #15
 800d1c0:	d821      	bhi.n	800d206 <_AddFreeMemory+0x9a>
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	1960      	adds	r0, r4, r5
 800d1c6:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800d1ca:	6851      	ldr	r1, [r2, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	6124      	str	r4, [r4, #16]
 800d1d0:	60a1      	str	r1, [r4, #8]
 800d1d2:	e884 0024 	stmia.w	r4, {r2, r5}
 800d1d6:	f840 5c04 	str.w	r5, [r0, #-4]
 800d1da:	f104 0008 	add.w	r0, r4, #8
 800d1de:	b101      	cbz	r1, 800d1e2 <_AddFreeMemory+0x76>
 800d1e0:	6048      	str	r0, [r1, #4]
 800d1e2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800d1e6:	60a1      	str	r1, [r4, #8]
 800d1e8:	60e2      	str	r2, [r4, #12]
 800d1ea:	6058      	str	r0, [r3, #4]
 800d1ec:	6833      	ldr	r3, [r6, #0]
 800d1ee:	4907      	ldr	r1, [pc, #28]	; (800d20c <_AddFreeMemory+0xa0>)
 800d1f0:	18ea      	adds	r2, r5, r3
 800d1f2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800d1f6:	6032      	str	r2, [r6, #0]
 800d1f8:	b92b      	cbnz	r3, 800d206 <_AddFreeMemory+0x9a>
 800d1fa:	68cb      	ldr	r3, [r1, #12]
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	688a      	ldr	r2, [r1, #8]
 800d200:	4293      	cmp	r3, r2
 800d202:	bf88      	it	hi
 800d204:	608b      	strhi	r3, [r1, #8]
 800d206:	4628      	mov	r0, r5
 800d208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d20a:	bf00      	nop
 800d20c:	200224fc 	.word	0x200224fc

0800d210 <_RemoveHoles>:
 800d210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d214:	4f23      	ldr	r7, [pc, #140]	; (800d2a4 <_RemoveHoles+0x94>)
 800d216:	4683      	mov	fp, r0
 800d218:	68fe      	ldr	r6, [r7, #12]
 800d21a:	46b8      	mov	r8, r7
 800d21c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d21e:	3e01      	subs	r6, #1
 800d220:	4426      	add	r6, r4
 800d222:	e894 0028 	ldmia.w	r4, {r3, r5}
 800d226:	bb9b      	cbnz	r3, 800d290 <_RemoveHoles+0x80>
 800d228:	1961      	adds	r1, r4, r5
 800d22a:	428e      	cmp	r6, r1
 800d22c:	d930      	bls.n	800d290 <_RemoveHoles+0x80>
 800d22e:	f854 a005 	ldr.w	sl, [r4, r5]
 800d232:	f1ba 0f00 	cmp.w	sl, #0
 800d236:	d02b      	beq.n	800d290 <_RemoveHoles+0x80>
 800d238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23a:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d126      	bne.n	800d290 <_RemoveHoles+0x80>
 800d242:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800d246:	4620      	mov	r0, r4
 800d248:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	9101      	str	r1, [sp, #4]
 800d250:	f7ff ff6c 	bl	800d12c <_RemoveFreeBlock>
 800d254:	9901      	ldr	r1, [sp, #4]
 800d256:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800d25a:	6808      	ldr	r0, [r1, #0]
 800d25c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d260:	4620      	mov	r0, r4
 800d262:	6054      	str	r4, [r2, #4]
 800d264:	464a      	mov	r2, r9
 800d266:	f00e fafd 	bl	801b864 <memmove>
 800d26a:	9b00      	ldr	r3, [sp, #0]
 800d26c:	eb04 0109 	add.w	r1, r4, r9
 800d270:	4628      	mov	r0, r5
 800d272:	459a      	cmp	sl, r3
 800d274:	bf02      	ittt	eq
 800d276:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 800d27a:	1b5b      	subeq	r3, r3, r5
 800d27c:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 800d280:	f7ff ff74 	bl	800d16c <_AddFreeMemory>
 800d284:	f1bb 0f00 	cmp.w	fp, #0
 800d288:	d001      	beq.n	800d28e <_RemoveHoles+0x7e>
 800d28a:	4558      	cmp	r0, fp
 800d28c:	d205      	bcs.n	800d29a <_RemoveHoles+0x8a>
 800d28e:	464d      	mov	r5, r9
 800d290:	442c      	add	r4, r5
 800d292:	42a6      	cmp	r6, r4
 800d294:	d8c5      	bhi.n	800d222 <_RemoveHoles+0x12>
 800d296:	2001      	movs	r0, #1
 800d298:	e000      	b.n	800d29c <_RemoveHoles+0x8c>
 800d29a:	2000      	movs	r0, #0
 800d29c:	b003      	add	sp, #12
 800d29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a2:	bf00      	nop
 800d2a4:	200224fc 	.word	0x200224fc

0800d2a8 <GUI_ALLOC_FreeFixedBlock>:
 800d2a8:	b128      	cbz	r0, 800d2b6 <GUI_ALLOC_FreeFixedBlock+0xe>
 800d2aa:	4b03      	ldr	r3, [pc, #12]	; (800d2b8 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800d2ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2ae:	6002      	str	r2, [r0, #0]
 800d2b0:	b102      	cbz	r2, 800d2b4 <GUI_ALLOC_FreeFixedBlock+0xc>
 800d2b2:	6050      	str	r0, [r2, #4]
 800d2b4:	63d8      	str	r0, [r3, #60]	; 0x3c
 800d2b6:	4770      	bx	lr
 800d2b8:	200224fc 	.word	0x200224fc

0800d2bc <GUI_ALLOC_h2p>:
 800d2bc:	4b03      	ldr	r3, [pc, #12]	; (800d2cc <GUI_ALLOC_h2p+0x10>)
 800d2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800d2c4:	6840      	ldr	r0, [r0, #4]
 800d2c6:	3008      	adds	r0, #8
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	200224fc 	.word	0x200224fc

0800d2d0 <GUI_ALLOC_LockH>:
 800d2d0:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <GUI_ALLOC_LockH+0x18>)
 800d2d2:	69da      	ldr	r2, [r3, #28]
 800d2d4:	3201      	adds	r2, #1
 800d2d6:	61da      	str	r2, [r3, #28]
 800d2d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2da:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 800d2e4:	f7ff bfea 	b.w	800d2bc <GUI_ALLOC_h2p>
 800d2e8:	200224fc 	.word	0x200224fc

0800d2ec <GUI_ALLOC_UnlockH>:
 800d2ec:	6803      	ldr	r3, [r0, #0]
 800d2ee:	490a      	ldr	r1, [pc, #40]	; (800d318 <GUI_ALLOC_UnlockH+0x2c>)
 800d2f0:	b530      	push	{r4, r5, lr}
 800d2f2:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800d2f6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800d2f8:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d903      	bls.n	800d308 <GUI_ALLOC_UnlockH+0x1c>
 800d300:	69ca      	ldr	r2, [r1, #28]
 800d302:	b10a      	cbz	r2, 800d308 <GUI_ALLOC_UnlockH+0x1c>
 800d304:	3a01      	subs	r2, #1
 800d306:	61ca      	str	r2, [r1, #28]
 800d308:	3b01      	subs	r3, #1
 800d30a:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 800d30e:	2300      	movs	r3, #0
 800d310:	6003      	str	r3, [r0, #0]
 800d312:	4618      	mov	r0, r3
 800d314:	bd30      	pop	{r4, r5, pc}
 800d316:	bf00      	nop
 800d318:	200224fc 	.word	0x200224fc

0800d31c <GUI_ALLOC_Lock>:
 800d31c:	4a02      	ldr	r2, [pc, #8]	; (800d328 <GUI_ALLOC_Lock+0xc>)
 800d31e:	6993      	ldr	r3, [r2, #24]
 800d320:	3301      	adds	r3, #1
 800d322:	6193      	str	r3, [r2, #24]
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	200224fc 	.word	0x200224fc

0800d32c <GUI_ALLOC_Unlock>:
 800d32c:	4a02      	ldr	r2, [pc, #8]	; (800d338 <GUI_ALLOC_Unlock+0xc>)
 800d32e:	6993      	ldr	r3, [r2, #24]
 800d330:	3b01      	subs	r3, #1
 800d332:	6193      	str	r3, [r2, #24]
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	200224fc 	.word	0x200224fc

0800d33c <GUI_ALLOC_AssignMemory>:
 800d33c:	4b02      	ldr	r3, [pc, #8]	; (800d348 <GUI_ALLOC_AssignMemory+0xc>)
 800d33e:	f021 0103 	bic.w	r1, r1, #3
 800d342:	6018      	str	r0, [r3, #0]
 800d344:	6059      	str	r1, [r3, #4]
 800d346:	4770      	bx	lr
 800d348:	200002a8 	.word	0x200002a8

0800d34c <GUI_ALLOC_Free>:
 800d34c:	b510      	push	{r4, lr}
 800d34e:	4604      	mov	r4, r0
 800d350:	b180      	cbz	r0, 800d374 <GUI_ALLOC_Free+0x28>
 800d352:	f001 f90d 	bl	800e570 <GUI_Lock>
 800d356:	4b08      	ldr	r3, [pc, #32]	; (800d378 <GUI_ALLOC_Free+0x2c>)
 800d358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d35e:	6859      	ldr	r1, [r3, #4]
 800d360:	6848      	ldr	r0, [r1, #4]
 800d362:	f7ff ff03 	bl	800d16c <_AddFreeMemory>
 800d366:	4620      	mov	r0, r4
 800d368:	f7ff fece 	bl	800d108 <_PushFreeBlock>
 800d36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d370:	f001 b8f4 	b.w	800e55c <GUI_Unlock>
 800d374:	bd10      	pop	{r4, pc}
 800d376:	bf00      	nop
 800d378:	200224fc 	.word	0x200224fc

0800d37c <_EnlargeBlocks>:
 800d37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d380:	4c22      	ldr	r4, [pc, #136]	; (800d40c <_EnlargeBlocks+0x90>)
 800d382:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d384:	b93b      	cbnz	r3, 800d396 <_EnlargeBlocks+0x1a>
 800d386:	4b22      	ldr	r3, [pc, #136]	; (800d410 <_EnlargeBlocks+0x94>)
 800d388:	689d      	ldr	r5, [r3, #8]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	3508      	adds	r5, #8
 800d38e:	fbb3 f5f5 	udiv	r5, r3, r5
 800d392:	3502      	adds	r5, #2
 800d394:	e003      	b.n	800d39e <_EnlargeBlocks+0x22>
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	1d1d      	adds	r5, r3, #4
 800d39a:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800d39e:	00e8      	lsls	r0, r5, #3
 800d3a0:	f000 f8f8 	bl	800d594 <_Alloc>
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	b360      	cbz	r0, 800d402 <_EnlargeBlocks+0x86>
 800d3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3aa:	6922      	ldr	r2, [r4, #16]
 800d3ac:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800d3b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d3b2:	00d2      	lsls	r2, r2, #3
 800d3b4:	685e      	ldr	r6, [r3, #4]
 800d3b6:	4b17      	ldr	r3, [pc, #92]	; (800d414 <_EnlargeBlocks+0x98>)
 800d3b8:	3608      	adds	r6, #8
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4630      	mov	r0, r6
 800d3be:	4798      	blx	r3
 800d3c0:	6922      	ldr	r2, [r4, #16]
 800d3c2:	1e69      	subs	r1, r5, #1
 800d3c4:	6366      	str	r6, [r4, #52]	; 0x34
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800d3cc:	428b      	cmp	r3, r1
 800d3ce:	d205      	bcs.n	800d3dc <_EnlargeBlocks+0x60>
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800d3d6:	f840 3c04 	str.w	r3, [r0, #-4]
 800d3da:	e7f7      	b.n	800d3cc <_EnlargeBlocks+0x50>
 800d3dc:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 800d3e0:	f04f 0800 	mov.w	r8, #0
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	f8c6 8004 	str.w	r8, [r6, #4]
 800d3ea:	6863      	ldr	r3, [r4, #4]
 800d3ec:	6262      	str	r2, [r4, #36]	; 0x24
 800d3ee:	1a9b      	subs	r3, r3, r2
 800d3f0:	6125      	str	r5, [r4, #16]
 800d3f2:	442b      	add	r3, r5
 800d3f4:	6063      	str	r3, [r4, #4]
 800d3f6:	b13f      	cbz	r7, 800d408 <_EnlargeBlocks+0x8c>
 800d3f8:	f7ff ffa8 	bl	800d34c <GUI_ALLOC_Free>
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d402:	2001      	movs	r0, #1
 800d404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40c:	200224fc 	.word	0x200224fc
 800d410:	200002a8 	.word	0x200002a8
 800d414:	20000038 	.word	0x20000038

0800d418 <_InitOnce>:
 800d418:	4a17      	ldr	r2, [pc, #92]	; (800d478 <_InitOnce+0x60>)
 800d41a:	b570      	push	{r4, r5, r6, lr}
 800d41c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d420:	bb43      	cbnz	r3, 800d474 <_InitOnce+0x5c>
 800d422:	2301      	movs	r3, #1
 800d424:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800d428:	4b14      	ldr	r3, [pc, #80]	; (800d47c <_InitOnce+0x64>)
 800d42a:	6899      	ldr	r1, [r3, #8]
 800d42c:	b911      	cbnz	r1, 800d434 <_InitOnce+0x1c>
 800d42e:	6859      	ldr	r1, [r3, #4]
 800d430:	0889      	lsrs	r1, r1, #2
 800d432:	6099      	str	r1, [r3, #8]
 800d434:	215a      	movs	r1, #90	; 0x5a
 800d436:	2610      	movs	r6, #16
 800d438:	6211      	str	r1, [r2, #32]
 800d43a:	2100      	movs	r1, #0
 800d43c:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 800d440:	fa06 f501 	lsl.w	r5, r6, r1
 800d444:	3101      	adds	r1, #1
 800d446:	4c0c      	ldr	r4, [pc, #48]	; (800d478 <_InitOnce+0x60>)
 800d448:	6405      	str	r5, [r0, #64]	; 0x40
 800d44a:	2910      	cmp	r1, #16
 800d44c:	d1f6      	bne.n	800d43c <_InitOnce+0x24>
 800d44e:	6819      	ldr	r1, [r3, #0]
 800d450:	2501      	movs	r5, #1
 800d452:	6858      	ldr	r0, [r3, #4]
 800d454:	2302      	movs	r3, #2
 800d456:	63a1      	str	r1, [r4, #56]	; 0x38
 800d458:	6123      	str	r3, [r4, #16]
 800d45a:	f1a0 0314 	sub.w	r3, r0, #20
 800d45e:	60e0      	str	r0, [r4, #12]
 800d460:	440b      	add	r3, r1
 800d462:	6363      	str	r3, [r4, #52]	; 0x34
 800d464:	605d      	str	r5, [r3, #4]
 800d466:	6265      	str	r5, [r4, #36]	; 0x24
 800d468:	6065      	str	r5, [r4, #4]
 800d46a:	f7ff fe7f 	bl	800d16c <_AddFreeMemory>
 800d46e:	f7ff ff85 	bl	800d37c <_EnlargeBlocks>
 800d472:	6325      	str	r5, [r4, #48]	; 0x30
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	bf00      	nop
 800d478:	200224fc 	.word	0x200224fc
 800d47c:	200002a8 	.word	0x200002a8

0800d480 <GUI_ALLOC_GetFixedBlock>:
 800d480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d484:	4607      	mov	r7, r0
 800d486:	4e26      	ldr	r6, [pc, #152]	; (800d520 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800d488:	f7ff ffc6 	bl	800d418 <_InitOnce>
 800d48c:	3703      	adds	r7, #3
 800d48e:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800d490:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800d492:	f027 0703 	bic.w	r7, r7, #3
 800d496:	4614      	mov	r4, r2
 800d498:	3704      	adds	r7, #4
 800d49a:	4287      	cmp	r7, r0
 800d49c:	bf38      	it	cc
 800d49e:	4607      	movcc	r7, r0
 800d4a0:	b134      	cbz	r4, 800d4b0 <GUI_ALLOC_GetFixedBlock+0x30>
 800d4a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d4a6:	429f      	cmp	r7, r3
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	d02c      	beq.n	800d506 <GUI_ALLOC_GetFixedBlock+0x86>
 800d4ac:	461c      	mov	r4, r3
 800d4ae:	e7f7      	b.n	800d4a0 <GUI_ALLOC_GetFixedBlock+0x20>
 800d4b0:	68f3      	ldr	r3, [r6, #12]
 800d4b2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800d4b4:	eb02 0803 	add.w	r8, r2, r3
 800d4b8:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800d4bc:	ebc5 0508 	rsb	r5, r5, r8
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b133      	cbz	r3, 800d4d2 <GUI_ALLOC_GetFixedBlock+0x52>
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7ff fea3 	bl	800d210 <_RemoveHoles>
 800d4ca:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800d4ce:	ebc5 0508 	rsb	r5, r5, r8
 800d4d2:	682b      	ldr	r3, [r5, #0]
 800d4d4:	bb0b      	cbnz	r3, 800d51a <GUI_ALLOC_GetFixedBlock+0x9a>
 800d4d6:	686b      	ldr	r3, [r5, #4]
 800d4d8:	429f      	cmp	r7, r3
 800d4da:	dc1e      	bgt.n	800d51a <GUI_ALLOC_GetFixedBlock+0x9a>
 800d4dc:	4628      	mov	r0, r5
 800d4de:	1d1c      	adds	r4, r3, #4
 800d4e0:	f7ff fe24 	bl	800d12c <_RemoveFreeBlock>
 800d4e4:	68f3      	ldr	r3, [r6, #12]
 800d4e6:	6868      	ldr	r0, [r5, #4]
 800d4e8:	1be4      	subs	r4, r4, r7
 800d4ea:	1bdb      	subs	r3, r3, r7
 800d4ec:	1bc0      	subs	r0, r0, r7
 800d4ee:	442c      	add	r4, r5
 800d4f0:	60f3      	str	r3, [r6, #12]
 800d4f2:	6973      	ldr	r3, [r6, #20]
 800d4f4:	443b      	add	r3, r7
 800d4f6:	6173      	str	r3, [r6, #20]
 800d4f8:	d002      	beq.n	800d500 <GUI_ALLOC_GetFixedBlock+0x80>
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	f7ff fe36 	bl	800d16c <_AddFreeMemory>
 800d500:	f844 7c04 	str.w	r7, [r4, #-4]
 800d504:	e009      	b.n	800d51a <GUI_ALLOC_GetFixedBlock+0x9a>
 800d506:	b10b      	cbz	r3, 800d50c <GUI_ALLOC_GetFixedBlock+0x8c>
 800d508:	6861      	ldr	r1, [r4, #4]
 800d50a:	6059      	str	r1, [r3, #4]
 800d50c:	6861      	ldr	r1, [r4, #4]
 800d50e:	b101      	cbz	r1, 800d512 <GUI_ALLOC_GetFixedBlock+0x92>
 800d510:	600b      	str	r3, [r1, #0]
 800d512:	42a2      	cmp	r2, r4
 800d514:	d101      	bne.n	800d51a <GUI_ALLOC_GetFixedBlock+0x9a>
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	63f3      	str	r3, [r6, #60]	; 0x3c
 800d51a:	4620      	mov	r0, r4
 800d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d520:	200224fc 	.word	0x200224fc

0800d524 <GUI_ALLOC_GetMaxSize>:
 800d524:	b508      	push	{r3, lr}
 800d526:	f7ff ff77 	bl	800d418 <_InitOnce>
 800d52a:	2300      	movs	r3, #0
 800d52c:	4a0b      	ldr	r2, [pc, #44]	; (800d55c <GUI_ALLOC_GetMaxSize+0x38>)
 800d52e:	1899      	adds	r1, r3, r2
 800d530:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800d534:	b110      	cbz	r0, 800d53c <GUI_ALLOC_GetMaxSize+0x18>
 800d536:	6883      	ldr	r3, [r0, #8]
 800d538:	2000      	movs	r0, #0
 800d53a:	e00b      	b.n	800d554 <GUI_ALLOC_GetMaxSize+0x30>
 800d53c:	3b08      	subs	r3, #8
 800d53e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800d542:	d1f4      	bne.n	800d52e <GUI_ALLOC_GetMaxSize+0xa>
 800d544:	e008      	b.n	800d558 <GUI_ALLOC_GetMaxSize+0x34>
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	4290      	cmp	r0, r2
 800d54c:	bf38      	it	cc
 800d54e:	4610      	movcc	r0, r2
 800d550:	b113      	cbz	r3, 800d558 <GUI_ALLOC_GetMaxSize+0x34>
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1f6      	bne.n	800d546 <GUI_ALLOC_GetMaxSize+0x22>
 800d558:	380c      	subs	r0, #12
 800d55a:	bd08      	pop	{r3, pc}
 800d55c:	200224fc 	.word	0x200224fc

0800d560 <GUI_ALLOC_RequestSize>:
 800d560:	b510      	push	{r4, lr}
 800d562:	f001 f805 	bl	800e570 <GUI_Lock>
 800d566:	2464      	movs	r4, #100	; 0x64
 800d568:	f7ff ffdc 	bl	800d524 <GUI_ALLOC_GetMaxSize>
 800d56c:	4b08      	ldr	r3, [pc, #32]	; (800d590 <GUI_ALLOC_RequestSize+0x30>)
 800d56e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800d572:	bf95      	itete	ls
 800d574:	6a1b      	ldrls	r3, [r3, #32]
 800d576:	6a1b      	ldrhi	r3, [r3, #32]
 800d578:	4358      	mulls	r0, r3
 800d57a:	fb90 f0f4 	sdivhi	r0, r0, r4
 800d57e:	bf94      	ite	ls
 800d580:	fbb0 f4f4 	udivls	r4, r0, r4
 800d584:	fb03 f400 	mulhi.w	r4, r3, r0
 800d588:	f000 ffe8 	bl	800e55c <GUI_Unlock>
 800d58c:	4620      	mov	r0, r4
 800d58e:	bd10      	pop	{r4, pc}
 800d590:	200224fc 	.word	0x200224fc

0800d594 <_Alloc>:
 800d594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d598:	4e39      	ldr	r6, [pc, #228]	; (800d680 <_Alloc+0xec>)
 800d59a:	4604      	mov	r4, r0
 800d59c:	f7ff ff3c 	bl	800d418 <_InitOnce>
 800d5a0:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800d5a2:	6833      	ldr	r3, [r6, #0]
 800d5a4:	42ac      	cmp	r4, r5
 800d5a6:	bf24      	itt	cs
 800d5a8:	3403      	addcs	r4, #3
 800d5aa:	f024 0503 	biccs.w	r5, r4, #3
 800d5ae:	4c34      	ldr	r4, [pc, #208]	; (800d680 <_Alloc+0xec>)
 800d5b0:	350c      	adds	r5, #12
 800d5b2:	42ab      	cmp	r3, r5
 800d5b4:	d33e      	bcc.n	800d634 <_Alloc+0xa0>
 800d5b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d5b8:	6862      	ldr	r2, [r4, #4]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d90f      	bls.n	800d5de <_Alloc+0x4a>
 800d5be:	6873      	ldr	r3, [r6, #4]
 800d5c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800d5c8:	6073      	str	r3, [r6, #4]
 800d5ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800d5cc:	eb03 0208 	add.w	r2, r3, r8
 800d5d0:	6852      	ldr	r2, [r2, #4]
 800d5d2:	6272      	str	r2, [r6, #36]	; 0x24
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 800d5da:	b957      	cbnz	r7, 800d5f2 <_Alloc+0x5e>
 800d5dc:	e02a      	b.n	800d634 <_Alloc+0xa0>
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	6323      	str	r3, [r4, #48]	; 0x30
 800d5e2:	f7ff fecb 	bl	800d37c <_EnlargeBlocks>
 800d5e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	6323      	str	r3, [r4, #48]	; 0x30
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d0e6      	beq.n	800d5be <_Alloc+0x2a>
 800d5f0:	e020      	b.n	800d634 <_Alloc+0xa0>
 800d5f2:	230f      	movs	r3, #15
 800d5f4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800d5f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d5fa:	4295      	cmp	r5, r2
 800d5fc:	d20c      	bcs.n	800d618 <_Alloc+0x84>
 800d5fe:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d602:	d2f7      	bcs.n	800d5f4 <_Alloc+0x60>
 800d604:	e008      	b.n	800d618 <_Alloc+0x84>
 800d606:	6894      	ldr	r4, [r2, #8]
 800d608:	b12c      	cbz	r4, 800d616 <_Alloc+0x82>
 800d60a:	6862      	ldr	r2, [r4, #4]
 800d60c:	4295      	cmp	r5, r2
 800d60e:	d914      	bls.n	800d63a <_Alloc+0xa6>
 800d610:	68a2      	ldr	r2, [r4, #8]
 800d612:	2a00      	cmp	r2, #0
 800d614:	d1f7      	bne.n	800d606 <_Alloc+0x72>
 800d616:	3301      	adds	r3, #1
 800d618:	2b0f      	cmp	r3, #15
 800d61a:	d803      	bhi.n	800d624 <_Alloc+0x90>
 800d61c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800d620:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d622:	e7f6      	b.n	800d612 <_Alloc+0x7e>
 800d624:	4628      	mov	r0, r5
 800d626:	f7ff fdf3 	bl	800d210 <_RemoveHoles>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d0e1      	beq.n	800d5f2 <_Alloc+0x5e>
 800d62e:	4638      	mov	r0, r7
 800d630:	f7ff fd6a 	bl	800d108 <_PushFreeBlock>
 800d634:	2000      	movs	r0, #0
 800d636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d63a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d63e:	4620      	mov	r0, r4
 800d640:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d642:	ebc5 0209 	rsb	r2, r5, r9
 800d646:	330c      	adds	r3, #12
 800d648:	429a      	cmp	r2, r3
 800d64a:	bf38      	it	cc
 800d64c:	464d      	movcc	r5, r9
 800d64e:	f7ff fd6d 	bl	800d12c <_RemoveFreeBlock>
 800d652:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800d654:	1961      	adds	r1, r4, r5
 800d656:	454d      	cmp	r5, r9
 800d658:	4498      	add	r8, r3
 800d65a:	f04f 0300 	mov.w	r3, #0
 800d65e:	f8c8 4004 	str.w	r4, [r8, #4]
 800d662:	6027      	str	r7, [r4, #0]
 800d664:	6065      	str	r5, [r4, #4]
 800d666:	60a3      	str	r3, [r4, #8]
 800d668:	6124      	str	r4, [r4, #16]
 800d66a:	f841 5c04 	str.w	r5, [r1, #-4]
 800d66e:	da03      	bge.n	800d678 <_Alloc+0xe4>
 800d670:	ebc5 0009 	rsb	r0, r5, r9
 800d674:	f7ff fd7a 	bl	800d16c <_AddFreeMemory>
 800d678:	4638      	mov	r0, r7
 800d67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d67e:	bf00      	nop
 800d680:	200224fc 	.word	0x200224fc

0800d684 <GUI_ALLOC_AllocNoInit>:
 800d684:	b510      	push	{r4, lr}
 800d686:	4604      	mov	r4, r0
 800d688:	b138      	cbz	r0, 800d69a <GUI_ALLOC_AllocNoInit+0x16>
 800d68a:	f000 ff71 	bl	800e570 <GUI_Lock>
 800d68e:	4620      	mov	r0, r4
 800d690:	f7ff ff80 	bl	800d594 <_Alloc>
 800d694:	4604      	mov	r4, r0
 800d696:	f000 ff61 	bl	800e55c <GUI_Unlock>
 800d69a:	4620      	mov	r0, r4
 800d69c:	bd10      	pop	{r4, pc}

0800d69e <GUI_ALLOC_FreePtr>:
 800d69e:	b510      	push	{r4, lr}
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	f000 ff65 	bl	800e570 <GUI_Lock>
 800d6a6:	6820      	ldr	r0, [r4, #0]
 800d6a8:	f7ff fe50 	bl	800d34c <GUI_ALLOC_Free>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	6023      	str	r3, [r4, #0]
 800d6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6b4:	f000 bf52 	b.w	800e55c <GUI_Unlock>

0800d6b8 <GUI_ALLOC_AllocZero>:
 800d6b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	f000 ff58 	bl	800e570 <GUI_Lock>
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f7ff ffdf 	bl	800d684 <GUI_ALLOC_AllocNoInit>
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	b160      	cbz	r0, 800d6e4 <GUI_ALLOC_AllocZero+0x2c>
 800d6ca:	f7ff fe01 	bl	800d2d0 <GUI_ALLOC_LockH>
 800d6ce:	ac02      	add	r4, sp, #8
 800d6d0:	4b07      	ldr	r3, [pc, #28]	; (800d6f0 <GUI_ALLOC_AllocZero+0x38>)
 800d6d2:	462a      	mov	r2, r5
 800d6d4:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d6d8:	2100      	movs	r1, #0
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4798      	blx	r3
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f7ff fe04 	bl	800d2ec <GUI_ALLOC_UnlockH>
 800d6e4:	f000 ff3a 	bl	800e55c <GUI_Unlock>
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	b002      	add	sp, #8
 800d6ec:	bd70      	pop	{r4, r5, r6, pc}
 800d6ee:	bf00      	nop
 800d6f0:	2000003c 	.word	0x2000003c

0800d6f4 <GUI_CalcColorDist>:
 800d6f4:	b2c3      	uxtb	r3, r0
 800d6f6:	b2ca      	uxtb	r2, r1
 800d6f8:	1a9a      	subs	r2, r3, r2
 800d6fa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d6fe:	b292      	uxth	r2, r2
 800d700:	b510      	push	{r4, lr}
 800d702:	b214      	sxth	r4, r2
 800d704:	2c00      	cmp	r4, #0
 800d706:	bfbc      	itt	lt
 800d708:	4252      	neglt	r2, r2
 800d70a:	b214      	sxthlt	r4, r2
 800d70c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800d710:	0c09      	lsrs	r1, r1, #16
 800d712:	1a9b      	subs	r3, r3, r2
 800d714:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800d718:	b29b      	uxth	r3, r3
 800d71a:	b289      	uxth	r1, r1
 800d71c:	b21a      	sxth	r2, r3
 800d71e:	b208      	sxth	r0, r1
 800d720:	2a00      	cmp	r2, #0
 800d722:	bfbc      	itt	lt
 800d724:	425b      	neglt	r3, r3
 800d726:	b21a      	sxthlt	r2, r3
 800d728:	2800      	cmp	r0, #0
 800d72a:	bfb8      	it	lt
 800d72c:	4249      	neglt	r1, r1
 800d72e:	fb02 f202 	mul.w	r2, r2, r2
 800d732:	bfb8      	it	lt
 800d734:	b208      	sxthlt	r0, r1
 800d736:	fb04 2204 	mla	r2, r4, r4, r2
 800d73a:	b280      	uxth	r0, r0
 800d73c:	fb00 2000 	mla	r0, r0, r0, r2
 800d740:	bd10      	pop	{r4, pc}

0800d742 <GUI_GetClientRect>:
 800d742:	b108      	cbz	r0, 800d748 <GUI_GetClientRect+0x6>
 800d744:	f005 ba1a 	b.w	8012b7c <WM_GetClientRect>
 800d748:	4770      	bx	lr

0800d74a <GUI_GetBkColor>:
 800d74a:	b510      	push	{r4, lr}
 800d74c:	f000 ff10 	bl	800e570 <GUI_Lock>
 800d750:	f001 fff8 	bl	800f744 <LCD_GetBkColorIndex>
 800d754:	f001 fefc 	bl	800f550 <LCD_Index2Color>
 800d758:	4604      	mov	r4, r0
 800d75a:	f000 feff 	bl	800e55c <GUI_Unlock>
 800d75e:	4620      	mov	r0, r4
 800d760:	bd10      	pop	{r4, pc}

0800d762 <GUI_GetColor>:
 800d762:	b510      	push	{r4, lr}
 800d764:	f000 ff04 	bl	800e570 <GUI_Lock>
 800d768:	f001 fff4 	bl	800f754 <LCD_GetColorIndex>
 800d76c:	f001 fef0 	bl	800f550 <LCD_Index2Color>
 800d770:	4604      	mov	r4, r0
 800d772:	f000 fef3 	bl	800e55c <GUI_Unlock>
 800d776:	4620      	mov	r0, r4
 800d778:	bd10      	pop	{r4, pc}
	...

0800d77c <GUI_GetDrawMode>:
 800d77c:	b510      	push	{r4, lr}
 800d77e:	f000 fef7 	bl	800e570 <GUI_Lock>
 800d782:	4b03      	ldr	r3, [pc, #12]	; (800d790 <GUI_GetDrawMode+0x14>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	7c1c      	ldrb	r4, [r3, #16]
 800d788:	f000 fee8 	bl	800e55c <GUI_Unlock>
 800d78c:	4620      	mov	r0, r4
 800d78e:	bd10      	pop	{r4, pc}
 800d790:	20000018 	.word	0x20000018

0800d794 <GUI_GetOrg>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4605      	mov	r5, r0
 800d798:	460c      	mov	r4, r1
 800d79a:	f000 fee9 	bl	800e570 <GUI_Lock>
 800d79e:	4b06      	ldr	r3, [pc, #24]	; (800d7b8 <GUI_GetOrg+0x24>)
 800d7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7a4:	602b      	str	r3, [r5, #0]
 800d7a6:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <GUI_GetOrg+0x28>)
 800d7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7b2:	f000 bed3 	b.w	800e55c <GUI_Unlock>
 800d7b6:	bf00      	nop
 800d7b8:	200225e4 	.word	0x200225e4
 800d7bc:	200225d4 	.word	0x200225d4

0800d7c0 <GUI_GetVersionString>:
 800d7c0:	4804      	ldr	r0, [pc, #16]	; (800d7d4 <GUI_GetVersionString+0x14>)
 800d7c2:	2335      	movs	r3, #53	; 0x35
 800d7c4:	7003      	strb	r3, [r0, #0]
 800d7c6:	2334      	movs	r3, #52	; 0x34
 800d7c8:	7083      	strb	r3, [r0, #2]
 800d7ca:	70c3      	strb	r3, [r0, #3]
 800d7cc:	2361      	movs	r3, #97	; 0x61
 800d7ce:	7103      	strb	r3, [r0, #4]
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	20000000 	.word	0x20000000

0800d7d8 <GUI_GetYDistOfFont>:
 800d7d8:	7e40      	ldrb	r0, [r0, #25]
 800d7da:	4770      	bx	lr

0800d7dc <GUI_MergeRect>:
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	b338      	cbz	r0, 800d830 <GUI_MergeRect+0x54>
 800d7e0:	b309      	cbz	r1, 800d826 <GUI_MergeRect+0x4a>
 800d7e2:	b30a      	cbz	r2, 800d828 <GUI_MergeRect+0x4c>
 800d7e4:	f9b2 4000 	ldrsh.w	r4, [r2]
 800d7e8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d7ec:	42a3      	cmp	r3, r4
 800d7ee:	bfa8      	it	ge
 800d7f0:	4623      	movge	r3, r4
 800d7f2:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800d7f6:	8003      	strh	r3, [r0, #0]
 800d7f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	bfa8      	it	ge
 800d800:	4623      	movge	r3, r4
 800d802:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800d806:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d80a:	8043      	strh	r3, [r0, #2]
 800d80c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d810:	42a3      	cmp	r3, r4
 800d812:	bfb8      	it	lt
 800d814:	4623      	movlt	r3, r4
 800d816:	8083      	strh	r3, [r0, #4]
 800d818:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d81c:	4293      	cmp	r3, r2
 800d81e:	bfb8      	it	lt
 800d820:	4613      	movlt	r3, r2
 800d822:	80c3      	strh	r3, [r0, #6]
 800d824:	bd10      	pop	{r4, pc}
 800d826:	4611      	mov	r1, r2
 800d828:	680b      	ldr	r3, [r1, #0]
 800d82a:	6003      	str	r3, [r0, #0]
 800d82c:	684b      	ldr	r3, [r1, #4]
 800d82e:	6043      	str	r3, [r0, #4]
 800d830:	bd10      	pop	{r4, pc}

0800d832 <GUI_MoveRect>:
 800d832:	b168      	cbz	r0, 800d850 <GUI_MoveRect+0x1e>
 800d834:	b289      	uxth	r1, r1
 800d836:	8803      	ldrh	r3, [r0, #0]
 800d838:	b292      	uxth	r2, r2
 800d83a:	440b      	add	r3, r1
 800d83c:	8003      	strh	r3, [r0, #0]
 800d83e:	8883      	ldrh	r3, [r0, #4]
 800d840:	4419      	add	r1, r3
 800d842:	8843      	ldrh	r3, [r0, #2]
 800d844:	4413      	add	r3, r2
 800d846:	8081      	strh	r1, [r0, #4]
 800d848:	8043      	strh	r3, [r0, #2]
 800d84a:	88c3      	ldrh	r3, [r0, #6]
 800d84c:	441a      	add	r2, r3
 800d84e:	80c2      	strh	r2, [r0, #6]
 800d850:	4770      	bx	lr
	...

0800d854 <GUI_Exec1>:
 800d854:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <GUI_Exec1+0x34>)
 800d856:	b510      	push	{r4, lr}
 800d858:	681c      	ldr	r4, [r3, #0]
 800d85a:	b11c      	cbz	r4, 800d864 <GUI_Exec1+0x10>
 800d85c:	47a0      	blx	r4
 800d85e:	1c04      	adds	r4, r0, #0
 800d860:	bf18      	it	ne
 800d862:	2401      	movne	r4, #1
 800d864:	f005 f842 	bl	80128ec <WM_Exec>
 800d868:	4b08      	ldr	r3, [pc, #32]	; (800d88c <GUI_Exec1+0x38>)
 800d86a:	2800      	cmp	r0, #0
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	bf18      	it	ne
 800d870:	2401      	movne	r4, #1
 800d872:	b11b      	cbz	r3, 800d87c <GUI_Exec1+0x28>
 800d874:	4798      	blx	r3
 800d876:	2800      	cmp	r0, #0
 800d878:	bf18      	it	ne
 800d87a:	2401      	movne	r4, #1
 800d87c:	4b04      	ldr	r3, [pc, #16]	; (800d890 <GUI_Exec1+0x3c>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	b103      	cbz	r3, 800d884 <GUI_Exec1+0x30>
 800d882:	4798      	blx	r3
 800d884:	4620      	mov	r0, r4
 800d886:	bd10      	pop	{r4, pc}
 800d888:	200225e0 	.word	0x200225e0
 800d88c:	20022608 	.word	0x20022608
 800d890:	20022600 	.word	0x20022600

0800d894 <GUI_Exec>:
 800d894:	b510      	push	{r4, lr}
 800d896:	2400      	movs	r4, #0
 800d898:	f7ff ffdc 	bl	800d854 <GUI_Exec1>
 800d89c:	b108      	cbz	r0, 800d8a2 <GUI_Exec+0xe>
 800d89e:	2401      	movs	r4, #1
 800d8a0:	e7fa      	b.n	800d898 <GUI_Exec+0x4>
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	bd10      	pop	{r4, pc}

0800d8a6 <GUI_GetBitmapPixelIndexEx>:
 800d8a6:	2804      	cmp	r0, #4
 800d8a8:	b530      	push	{r4, r5, lr}
 800d8aa:	9d03      	ldr	r5, [sp, #12]
 800d8ac:	d027      	beq.n	800d8fe <GUI_GetBitmapPixelIndexEx+0x58>
 800d8ae:	dc10      	bgt.n	800d8d2 <GUI_GetBitmapPixelIndexEx+0x2c>
 800d8b0:	2801      	cmp	r0, #1
 800d8b2:	d018      	beq.n	800d8e6 <GUI_GetBitmapPixelIndexEx+0x40>
 800d8b4:	2802      	cmp	r0, #2
 800d8b6:	d138      	bne.n	800d92a <GUI_GetBitmapPixelIndexEx+0x84>
 800d8b8:	4369      	muls	r1, r5
 800d8ba:	eb02 0293 	add.w	r2, r2, r3, lsr #2
 800d8be:	ea6f 0043 	mvn.w	r0, r3, lsl #1
 800d8c2:	5c52      	ldrb	r2, [r2, r1]
 800d8c4:	f000 0006 	and.w	r0, r0, #6
 800d8c8:	fa22 f000 	lsr.w	r0, r2, r0
 800d8cc:	f000 0003 	and.w	r0, r0, #3
 800d8d0:	bd30      	pop	{r4, r5, pc}
 800d8d2:	2810      	cmp	r0, #16
 800d8d4:	d01d      	beq.n	800d912 <GUI_GetBitmapPixelIndexEx+0x6c>
 800d8d6:	2820      	cmp	r0, #32
 800d8d8:	d021      	beq.n	800d91e <GUI_GetBitmapPixelIndexEx+0x78>
 800d8da:	2808      	cmp	r0, #8
 800d8dc:	d125      	bne.n	800d92a <GUI_GetBitmapPixelIndexEx+0x84>
 800d8de:	fb05 2101 	mla	r1, r5, r1, r2
 800d8e2:	5cc8      	ldrb	r0, [r1, r3]
 800d8e4:	bd30      	pop	{r4, r5, pc}
 800d8e6:	4369      	muls	r1, r5
 800d8e8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 800d8ec:	43d8      	mvns	r0, r3
 800d8ee:	5c52      	ldrb	r2, [r2, r1]
 800d8f0:	f000 0007 	and.w	r0, r0, #7
 800d8f4:	fa22 f000 	lsr.w	r0, r2, r0
 800d8f8:	f000 0001 	and.w	r0, r0, #1
 800d8fc:	bd30      	pop	{r4, r5, pc}
 800d8fe:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800d902:	4369      	muls	r1, r5
 800d904:	07db      	lsls	r3, r3, #31
 800d906:	5c50      	ldrb	r0, [r2, r1]
 800d908:	bf4c      	ite	mi
 800d90a:	f000 000f 	andmi.w	r0, r0, #15
 800d90e:	0900      	lsrpl	r0, r0, #4
 800d910:	bd30      	pop	{r4, r5, pc}
 800d912:	104c      	asrs	r4, r1, #1
 800d914:	fb05 3304 	mla	r3, r5, r4, r3
 800d918:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800d91c:	bd30      	pop	{r4, r5, pc}
 800d91e:	108c      	asrs	r4, r1, #2
 800d920:	fb05 3304 	mla	r3, r5, r4, r3
 800d924:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d928:	bd30      	pop	{r4, r5, pc}
 800d92a:	2000      	movs	r0, #0
 800d92c:	bd30      	pop	{r4, r5, pc}

0800d92e <GUI_GetBitmapPixelIndex>:
 800d92e:	b513      	push	{r0, r1, r4, lr}
 800d930:	460b      	mov	r3, r1
 800d932:	b130      	cbz	r0, 800d942 <GUI_GetBitmapPixelIndex+0x14>
 800d934:	88c4      	ldrh	r4, [r0, #6]
 800d936:	8881      	ldrh	r1, [r0, #4]
 800d938:	9200      	str	r2, [sp, #0]
 800d93a:	6882      	ldr	r2, [r0, #8]
 800d93c:	4620      	mov	r0, r4
 800d93e:	f7ff ffb2 	bl	800d8a6 <GUI_GetBitmapPixelIndexEx>
 800d942:	b002      	add	sp, #8
 800d944:	bd10      	pop	{r4, pc}
	...

0800d948 <GUI_GotoXY>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	4605      	mov	r5, r0
 800d94c:	460c      	mov	r4, r1
 800d94e:	f000 fe0f 	bl	800e570 <GUI_Lock>
 800d952:	4b04      	ldr	r3, [pc, #16]	; (800d964 <GUI_GotoXY+0x1c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	845d      	strh	r5, [r3, #34]	; 0x22
 800d958:	849c      	strh	r4, [r3, #36]	; 0x24
 800d95a:	f000 fdff 	bl	800e55c <GUI_Unlock>
 800d95e:	2000      	movs	r0, #0
 800d960:	bd38      	pop	{r3, r4, r5, pc}
 800d962:	bf00      	nop
 800d964:	20000018 	.word	0x20000018

0800d968 <GUI_SetPenSize>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4605      	mov	r5, r0
 800d96c:	f000 fe00 	bl	800e570 <GUI_Lock>
 800d970:	4b03      	ldr	r3, [pc, #12]	; (800d980 <GUI_SetPenSize+0x18>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	7e1c      	ldrb	r4, [r3, #24]
 800d976:	761d      	strb	r5, [r3, #24]
 800d978:	f000 fdf0 	bl	800e55c <GUI_Unlock>
 800d97c:	4620      	mov	r0, r4
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	20000018 	.word	0x20000018

0800d984 <GUI_RectsIntersect>:
 800d984:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d988:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	dc14      	bgt.n	800d9ba <GUI_RectsIntersect+0x36>
 800d990:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800d994:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d998:	429a      	cmp	r2, r3
 800d99a:	dc0e      	bgt.n	800d9ba <GUI_RectsIntersect+0x36>
 800d99c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d9a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	dc08      	bgt.n	800d9ba <GUI_RectsIntersect+0x36>
 800d9a8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800d9ac:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d9b0:	4283      	cmp	r3, r0
 800d9b2:	bfcc      	ite	gt
 800d9b4:	2000      	movgt	r0, #0
 800d9b6:	2001      	movle	r0, #1
 800d9b8:	4770      	bx	lr
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	4770      	bx	lr
	...

0800d9c0 <GUI_SaveContext_W>:
 800d9c0:	b508      	push	{r3, lr}
 800d9c2:	4b03      	ldr	r3, [pc, #12]	; (800d9d0 <GUI_SaveContext_W+0x10>)
 800d9c4:	2274      	movs	r2, #116	; 0x74
 800d9c6:	6819      	ldr	r1, [r3, #0]
 800d9c8:	f00d ff41 	bl	801b84e <memcpy>
 800d9cc:	bd08      	pop	{r3, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20000018 	.word	0x20000018

0800d9d4 <GUI_RestoreContext>:
 800d9d4:	b508      	push	{r3, lr}
 800d9d6:	4b03      	ldr	r3, [pc, #12]	; (800d9e4 <GUI_RestoreContext+0x10>)
 800d9d8:	4601      	mov	r1, r0
 800d9da:	2274      	movs	r2, #116	; 0x74
 800d9dc:	6818      	ldr	r0, [r3, #0]
 800d9de:	f00d ff36 	bl	801b84e <memcpy>
 800d9e2:	bd08      	pop	{r3, pc}
 800d9e4:	20000018 	.word	0x20000018

0800d9e8 <GUI_SelectLCD>:
 800d9e8:	b508      	push	{r3, lr}
 800d9ea:	f000 fdc1 	bl	800e570 <GUI_Lock>
 800d9ee:	f002 f8bd 	bl	800fb6c <LCD_SelectLCD>
 800d9f2:	f002 f999 	bl	800fd28 <LCD_UpdateColorIndices>
 800d9f6:	f004 ffbd 	bl	8012974 <WM_Activate>
 800d9fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d9fe:	f000 bdad 	b.w	800e55c <GUI_Unlock>

0800da02 <GUI_SetBkColor>:
 800da02:	b510      	push	{r4, lr}
 800da04:	4604      	mov	r4, r0
 800da06:	f000 fdb3 	bl	800e570 <GUI_Lock>
 800da0a:	4620      	mov	r0, r4
 800da0c:	f001 fde6 	bl	800f5dc <LCD_SetBkColor>
 800da10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da14:	f000 bda2 	b.w	800e55c <GUI_Unlock>

0800da18 <GUI_SetColor>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	4604      	mov	r4, r0
 800da1c:	f000 fda8 	bl	800e570 <GUI_Lock>
 800da20:	4620      	mov	r0, r4
 800da22:	f001 fde1 	bl	800f5e8 <LCD_SetColor>
 800da26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da2a:	f000 bd97 	b.w	800e55c <GUI_Unlock>

0800da2e <GUI_SetDrawMode>:
 800da2e:	b510      	push	{r4, lr}
 800da30:	4604      	mov	r4, r0
 800da32:	f000 fd9d 	bl	800e570 <GUI_Lock>
 800da36:	4620      	mov	r0, r4
 800da38:	f001 fa6a 	bl	800ef10 <LCD_SetDrawMode>
 800da3c:	4604      	mov	r4, r0
 800da3e:	f000 fd8d 	bl	800e55c <GUI_Unlock>
 800da42:	4620      	mov	r0, r4
 800da44:	bd10      	pop	{r4, pc}
	...

0800da48 <GUI_SetFont>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4604      	mov	r4, r0
 800da4c:	f000 fd90 	bl	800e570 <GUI_Lock>
 800da50:	4b04      	ldr	r3, [pc, #16]	; (800da64 <GUI_SetFont+0x1c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	69dd      	ldr	r5, [r3, #28]
 800da56:	b104      	cbz	r4, 800da5a <GUI_SetFont+0x12>
 800da58:	61dc      	str	r4, [r3, #28]
 800da5a:	f000 fd7f 	bl	800e55c <GUI_Unlock>
 800da5e:	4628      	mov	r0, r5
 800da60:	bd38      	pop	{r3, r4, r5, pc}
 800da62:	bf00      	nop
 800da64:	20000018 	.word	0x20000018

0800da68 <GUI_SetLineStyle>:
 800da68:	b538      	push	{r3, r4, r5, lr}
 800da6a:	4605      	mov	r5, r0
 800da6c:	f000 fd80 	bl	800e570 <GUI_Lock>
 800da70:	4b03      	ldr	r3, [pc, #12]	; (800da80 <GUI_SetLineStyle+0x18>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	7e9c      	ldrb	r4, [r3, #26]
 800da76:	769d      	strb	r5, [r3, #26]
 800da78:	f000 fd70 	bl	800e55c <GUI_Unlock>
 800da7c:	4620      	mov	r0, r4
 800da7e:	bd38      	pop	{r3, r4, r5, pc}
 800da80:	20000018 	.word	0x20000018

0800da84 <GUI_SetOrg>:
 800da84:	b570      	push	{r4, r5, r6, lr}
 800da86:	4604      	mov	r4, r0
 800da88:	460d      	mov	r5, r1
 800da8a:	f000 fd71 	bl	800e570 <GUI_Lock>
 800da8e:	4b09      	ldr	r3, [pc, #36]	; (800dab4 <GUI_SetOrg+0x30>)
 800da90:	4621      	mov	r1, r4
 800da92:	801c      	strh	r4, [r3, #0]
 800da94:	4b08      	ldr	r3, [pc, #32]	; (800dab8 <GUI_SetOrg+0x34>)
 800da96:	801d      	strh	r5, [r3, #0]
 800da98:	4b08      	ldr	r3, [pc, #32]	; (800dabc <GUI_SetOrg+0x38>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	7c5a      	ldrb	r2, [r3, #17]
 800da9e:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <GUI_SetOrg+0x3c>)
 800daa0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800daa4:	68c2      	ldr	r2, [r0, #12]
 800daa6:	6a16      	ldr	r6, [r2, #32]
 800daa8:	462a      	mov	r2, r5
 800daaa:	47b0      	blx	r6
 800daac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dab0:	f000 bd54 	b.w	800e55c <GUI_Unlock>
 800dab4:	200225e4 	.word	0x200225e4
 800dab8:	200225d4 	.word	0x200225d4
 800dabc:	20000018 	.word	0x20000018
 800dac0:	2002260c 	.word	0x2002260c

0800dac4 <GUI_SetTextAlign>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4605      	mov	r5, r0
 800dac8:	f000 fd52 	bl	800e570 <GUI_Lock>
 800dacc:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <GUI_SetTextAlign+0x1c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 800dad4:	859d      	strh	r5, [r3, #44]	; 0x2c
 800dad6:	f000 fd41 	bl	800e55c <GUI_Unlock>
 800dada:	4620      	mov	r0, r4
 800dadc:	bd38      	pop	{r3, r4, r5, pc}
 800dade:	bf00      	nop
 800dae0:	20000018 	.word	0x20000018

0800dae4 <GUI_SetTextMode>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4605      	mov	r5, r0
 800dae8:	f000 fd42 	bl	800e570 <GUI_Lock>
 800daec:	4b04      	ldr	r3, [pc, #16]	; (800db00 <GUI_SetTextMode+0x1c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 800daf4:	855d      	strh	r5, [r3, #42]	; 0x2a
 800daf6:	f000 fd31 	bl	800e55c <GUI_Unlock>
 800dafa:	4620      	mov	r0, r4
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	20000018 	.word	0x20000018

0800db04 <GL_SetDefault>:
 800db04:	b508      	push	{r3, lr}
 800db06:	4b0e      	ldr	r3, [pc, #56]	; (800db40 <GL_SetDefault+0x3c>)
 800db08:	6818      	ldr	r0, [r3, #0]
 800db0a:	f7ff ff7a 	bl	800da02 <GUI_SetBkColor>
 800db0e:	4b0d      	ldr	r3, [pc, #52]	; (800db44 <GL_SetDefault+0x40>)
 800db10:	6818      	ldr	r0, [r3, #0]
 800db12:	f7ff ff81 	bl	800da18 <GUI_SetColor>
 800db16:	2001      	movs	r0, #1
 800db18:	f7ff ff26 	bl	800d968 <GUI_SetPenSize>
 800db1c:	2000      	movs	r0, #0
 800db1e:	f7ff ffd1 	bl	800dac4 <GUI_SetTextAlign>
 800db22:	2000      	movs	r0, #0
 800db24:	f7ff ffde 	bl	800dae4 <GUI_SetTextMode>
 800db28:	2000      	movs	r0, #0
 800db2a:	f7ff ff80 	bl	800da2e <GUI_SetDrawMode>
 800db2e:	4b06      	ldr	r3, [pc, #24]	; (800db48 <GL_SetDefault+0x44>)
 800db30:	6818      	ldr	r0, [r3, #0]
 800db32:	f7ff ff89 	bl	800da48 <GUI_SetFont>
 800db36:	2000      	movs	r0, #0
 800db38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db3c:	f7ff bf94 	b.w	800da68 <GUI_SetLineStyle>
 800db40:	20000014 	.word	0x20000014
 800db44:	20000010 	.word	0x20000010
 800db48:	2000000c 	.word	0x2000000c

0800db4c <_InitContext>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d19      	ldr	r5, [pc, #100]	; (800dbb4 <_InitContext+0x68>)
 800db50:	4604      	mov	r4, r0
 800db52:	4b19      	ldr	r3, [pc, #100]	; (800dbb8 <_InitContext+0x6c>)
 800db54:	f104 0108 	add.w	r1, r4, #8
 800db58:	6703      	str	r3, [r0, #112]	; 0x70
 800db5a:	692b      	ldr	r3, [r5, #16]
 800db5c:	1d1a      	adds	r2, r3, #4
 800db5e:	639b      	str	r3, [r3, #56]	; 0x38
 800db60:	641b      	str	r3, [r3, #64]	; 0x40
 800db62:	63da      	str	r2, [r3, #60]	; 0x3c
 800db64:	f103 0208 	add.w	r2, r3, #8
 800db68:	6142      	str	r2, [r0, #20]
 800db6a:	7c5a      	ldrb	r2, [r3, #17]
 800db6c:	4b13      	ldr	r3, [pc, #76]	; (800dbbc <_InitContext+0x70>)
 800db6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800db72:	68c3      	ldr	r3, [r0, #12]
 800db74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db76:	4798      	blx	r3
 800db78:	4b11      	ldr	r3, [pc, #68]	; (800dbc0 <_InitContext+0x74>)
 800db7a:	6663      	str	r3, [r4, #100]	; 0x64
 800db7c:	686b      	ldr	r3, [r5, #4]
 800db7e:	61e3      	str	r3, [r4, #28]
 800db80:	692b      	ldr	r3, [r5, #16]
 800db82:	3308      	adds	r3, #8
 800db84:	6163      	str	r3, [r4, #20]
 800db86:	2301      	movs	r3, #1
 800db88:	7623      	strb	r3, [r4, #24]
 800db8a:	76e3      	strb	r3, [r4, #27]
 800db8c:	f005 f81a 	bl	8012bc4 <WM_GetDesktopWindow>
 800db90:	2303      	movs	r3, #3
 800db92:	64a0      	str	r0, [r4, #72]	; 0x48
 800db94:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800db98:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800db9c:	68e8      	ldr	r0, [r5, #12]
 800db9e:	6323      	str	r3, [r4, #48]	; 0x30
 800dba0:	6363      	str	r3, [r4, #52]	; 0x34
 800dba2:	f001 fd1b 	bl	800f5dc <LCD_SetBkColor>
 800dba6:	68a8      	ldr	r0, [r5, #8]
 800dba8:	f001 fd1e 	bl	800f5e8 <LCD_SetColor>
 800dbac:	4a05      	ldr	r2, [pc, #20]	; (800dbc4 <_InitContext+0x78>)
 800dbae:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <_InitContext+0x7c>)
 800dbb0:	601a      	str	r2, [r3, #0]
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	20000008 	.word	0x20000008
 800dbb8:	2000033c 	.word	0x2000033c
 800dbbc:	2002260c 	.word	0x2002260c
 800dbc0:	0801baa4 	.word	0x0801baa4
 800dbc4:	0801babc 	.word	0x0801babc
 800dbc8:	20022604 	.word	0x20022604

0800dbcc <_OnExit>:
 800dbcc:	b570      	push	{r4, r5, r6, lr}
 800dbce:	2400      	movs	r4, #0
 800dbd0:	4d09      	ldr	r5, [pc, #36]	; (800dbf8 <_OnExit+0x2c>)
 800dbd2:	4e0a      	ldr	r6, [pc, #40]	; (800dbfc <_OnExit+0x30>)
 800dbd4:	2274      	movs	r2, #116	; 0x74
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	4628      	mov	r0, r5
 800dbda:	6833      	ldr	r3, [r6, #0]
 800dbdc:	67ec      	str	r4, [r5, #124]	; 0x7c
 800dbde:	4798      	blx	r3
 800dbe0:	6833      	ldr	r3, [r6, #0]
 800dbe2:	2208      	movs	r2, #8
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4806      	ldr	r0, [pc, #24]	; (800dc00 <_OnExit+0x34>)
 800dbe8:	4798      	blx	r3
 800dbea:	4b06      	ldr	r3, [pc, #24]	; (800dc04 <_OnExit+0x38>)
 800dbec:	611d      	str	r5, [r3, #16]
 800dbee:	4b06      	ldr	r3, [pc, #24]	; (800dc08 <_OnExit+0x3c>)
 800dbf0:	701c      	strb	r4, [r3, #0]
 800dbf2:	4b06      	ldr	r3, [pc, #24]	; (800dc0c <_OnExit+0x40>)
 800dbf4:	601c      	str	r4, [r3, #0]
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	200002bc 	.word	0x200002bc
 800dbfc:	2000003c 	.word	0x2000003c
 800dc00:	2002260c 	.word	0x2002260c
 800dc04:	20000008 	.word	0x20000008
 800dc08:	200225f4 	.word	0x200225f4
 800dc0c:	200225d0 	.word	0x200225d0

0800dc10 <GUI_ClearRect>:
 800dc10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dc14:	4616      	mov	r6, r2
 800dc16:	461f      	mov	r7, r3
 800dc18:	4604      	mov	r4, r0
 800dc1a:	460d      	mov	r5, r1
 800dc1c:	f000 fca8 	bl	800e570 <GUI_Lock>
 800dc20:	2004      	movs	r0, #4
 800dc22:	f001 f975 	bl	800ef10 <LCD_SetDrawMode>
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <GUI_ClearRect+0x68>)
 800dc28:	4680      	mov	r8, r0
 800dc2a:	4668      	mov	r0, sp
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc32:	4414      	add	r4, r2
 800dc34:	4416      	add	r6, r2
 800dc36:	441d      	add	r5, r3
 800dc38:	441f      	add	r7, r3
 800dc3a:	f8ad 4000 	strh.w	r4, [sp]
 800dc3e:	f8ad 6004 	strh.w	r6, [sp, #4]
 800dc42:	f8ad 5002 	strh.w	r5, [sp, #2]
 800dc46:	f8ad 7006 	strh.w	r7, [sp, #6]
 800dc4a:	f004 fcc9 	bl	80125e0 <WM__InitIVRSearch>
 800dc4e:	b938      	cbnz	r0, 800dc60 <GUI_ClearRect+0x50>
 800dc50:	4640      	mov	r0, r8
 800dc52:	f001 f95d 	bl	800ef10 <LCD_SetDrawMode>
 800dc56:	f000 fc81 	bl	800e55c <GUI_Unlock>
 800dc5a:	b002      	add	sp, #8
 800dc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc60:	463b      	mov	r3, r7
 800dc62:	4632      	mov	r2, r6
 800dc64:	4629      	mov	r1, r5
 800dc66:	4620      	mov	r0, r4
 800dc68:	f001 f9da 	bl	800f020 <LCD_FillRect>
 800dc6c:	f004 fbf6 	bl	801245c <WM__GetNextIVR>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d1f5      	bne.n	800dc60 <GUI_ClearRect+0x50>
 800dc74:	e7ec      	b.n	800dc50 <GUI_ClearRect+0x40>
 800dc76:	bf00      	nop
 800dc78:	20000008 	.word	0x20000008

0800dc7c <GUI_Clear>:
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	b510      	push	{r4, lr}
 800dc80:	4608      	mov	r0, r1
 800dc82:	f7ff fe61 	bl	800d948 <GUI_GotoXY>
 800dc86:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800dc8a:	4903      	ldr	r1, [pc, #12]	; (800dc98 <GUI_Clear+0x1c>)
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4608      	mov	r0, r1
 800dc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc94:	f7ff bfbc 	b.w	800dc10 <GUI_ClearRect>
 800dc98:	ffffc001 	.word	0xffffc001

0800dc9c <GUI__Config>:
 800dc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc9e:	4d20      	ldr	r5, [pc, #128]	; (800dd20 <GUI__Config+0x84>)
 800dca0:	b085      	sub	sp, #20
 800dca2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d138      	bne.n	800dd1a <GUI__Config+0x7e>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	466a      	mov	r2, sp
 800dcac:	466e      	mov	r6, sp
 800dcae:	67eb      	str	r3, [r5, #124]	; 0x7c
 800dcb0:	4b1c      	ldr	r3, [pc, #112]	; (800dd24 <GUI__Config+0x88>)
 800dcb2:	f103 0708 	add.w	r7, r3, #8
 800dcb6:	6818      	ldr	r0, [r3, #0]
 800dcb8:	3308      	adds	r3, #8
 800dcba:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800dcbe:	4614      	mov	r4, r2
 800dcc0:	42bb      	cmp	r3, r7
 800dcc2:	c403      	stmia	r4!, {r0, r1}
 800dcc4:	4622      	mov	r2, r4
 800dcc6:	d1f6      	bne.n	800dcb6 <GUI__Config+0x1a>
 800dcc8:	6818      	ldr	r0, [r3, #0]
 800dcca:	8899      	ldrh	r1, [r3, #4]
 800dccc:	799b      	ldrb	r3, [r3, #6]
 800dcce:	6020      	str	r0, [r4, #0]
 800dcd0:	71a3      	strb	r3, [r4, #6]
 800dcd2:	4633      	mov	r3, r6
 800dcd4:	80a1      	strh	r1, [r4, #4]
 800dcd6:	4c14      	ldr	r4, [pc, #80]	; (800dd28 <GUI__Config+0x8c>)
 800dcd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcdc:	f804 2b01 	strb.w	r2, [r4], #1
 800dce0:	781a      	ldrb	r2, [r3, #0]
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	d1f8      	bne.n	800dcd8 <GUI__Config+0x3c>
 800dce6:	f7ff fd6b 	bl	800d7c0 <GUI_GetVersionString>
 800dcea:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dcee:	4622      	mov	r2, r4
 800dcf0:	f804 3b01 	strb.w	r3, [r4], #1
 800dcf4:	7803      	ldrb	r3, [r0, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1f7      	bne.n	800dcea <GUI__Config+0x4e>
 800dcfa:	7053      	strb	r3, [r2, #1]
 800dcfc:	f7fe f90c 	bl	800bf18 <GUI_X_Config>
 800dd00:	f000 fc72 	bl	800e5e8 <GUITASK_Init>
 800dd04:	f7fe fef8 	bl	800caf8 <LCD_X_Config>
 800dd08:	4b08      	ldr	r3, [pc, #32]	; (800dd2c <GUI__Config+0x90>)
 800dd0a:	4809      	ldr	r0, [pc, #36]	; (800dd30 <GUI__Config+0x94>)
 800dd0c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 800dd10:	b005      	add	sp, #20
 800dd12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd16:	f000 b8d3 	b.w	800dec0 <GUI__RegisterExit>
 800dd1a:	b005      	add	sp, #20
 800dd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	200002bc 	.word	0x200002bc
 800dd24:	0801baac 	.word	0x0801baac
 800dd28:	2000033c 	.word	0x2000033c
 800dd2c:	0800dbcd 	.word	0x0800dbcd
 800dd30:	20000350 	.word	0x20000350

0800dd34 <GUI_Init>:
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	4a54      	ldr	r2, [pc, #336]	; (800de8c <GUI_Init+0x158>)
 800dd3c:	4b53      	ldr	r3, [pc, #332]	; (800de8c <GUI_Init+0x158>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f023 0301 	bic.w	r3, r3, #1
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	4b52      	ldr	r3, [pc, #328]	; (800de90 <GUI_Init+0x15c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd4e:	f240 4249 	movw	r2, #1097	; 0x449
 800dd52:	4293      	cmp	r3, r2
 800dd54:	bf0c      	ite	eq
 800dd56:	2301      	moveq	r3, #1
 800dd58:	2300      	movne	r3, #0
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	4b4c      	ldr	r3, [pc, #304]	; (800de90 <GUI_Init+0x15c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd64:	f240 4151 	movw	r1, #1105	; 0x451
 800dd68:	428b      	cmp	r3, r1
 800dd6a:	bf0c      	ite	eq
 800dd6c:	2301      	moveq	r3, #1
 800dd6e:	2300      	movne	r3, #0
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	4313      	orrs	r3, r2
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	4619      	mov	r1, r3
 800dd78:	4b45      	ldr	r3, [pc, #276]	; (800de90 <GUI_Init+0x15c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd80:	f240 4252 	movw	r2, #1106	; 0x452
 800dd84:	4293      	cmp	r3, r2
 800dd86:	bf0c      	ite	eq
 800dd88:	2301      	moveq	r3, #1
 800dd8a:	2300      	movne	r3, #0
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	430b      	orrs	r3, r1
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d010      	beq.n	800ddb6 <GUI_Init+0x82>
 800dd94:	4b3f      	ldr	r3, [pc, #252]	; (800de94 <GUI_Init+0x160>)
 800dd96:	2201      	movs	r2, #1
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	bf00      	nop
 800dd9c:	4b3d      	ldr	r3, [pc, #244]	; (800de94 <GUI_Init+0x160>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d1fb      	bne.n	800dd9c <GUI_Init+0x68>
 800dda4:	4b3c      	ldr	r3, [pc, #240]	; (800de98 <GUI_Init+0x164>)
 800dda6:	4a3d      	ldr	r2, [pc, #244]	; (800de9c <GUI_Init+0x168>)
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	4b3b      	ldr	r3, [pc, #236]	; (800de98 <GUI_Init+0x164>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a3c      	ldr	r2, [pc, #240]	; (800dea0 <GUI_Init+0x16c>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d018      	beq.n	800dde6 <GUI_Init+0xb2>
 800ddb4:	e7fe      	b.n	800ddb4 <GUI_Init+0x80>
 800ddb6:	4b3b      	ldr	r3, [pc, #236]	; (800dea4 <GUI_Init+0x170>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ddbe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ddc2:	d110      	bne.n	800dde6 <GUI_Init+0xb2>
 800ddc4:	4b38      	ldr	r3, [pc, #224]	; (800dea8 <GUI_Init+0x174>)
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	bf00      	nop
 800ddcc:	4b36      	ldr	r3, [pc, #216]	; (800dea8 <GUI_Init+0x174>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1fb      	bne.n	800ddcc <GUI_Init+0x98>
 800ddd4:	4b35      	ldr	r3, [pc, #212]	; (800deac <GUI_Init+0x178>)
 800ddd6:	4a31      	ldr	r2, [pc, #196]	; (800de9c <GUI_Init+0x168>)
 800ddd8:	601a      	str	r2, [r3, #0]
 800ddda:	4b34      	ldr	r3, [pc, #208]	; (800deac <GUI_Init+0x178>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a30      	ldr	r2, [pc, #192]	; (800dea0 <GUI_Init+0x16c>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d000      	beq.n	800dde6 <GUI_Init+0xb2>
 800dde4:	e7fe      	b.n	800dde4 <GUI_Init+0xb0>
 800dde6:	f7ff ff59 	bl	800dc9c <GUI__Config>
 800ddea:	4b31      	ldr	r3, [pc, #196]	; (800deb0 <GUI_Init+0x17c>)
 800ddec:	222e      	movs	r2, #46	; 0x2e
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	f7fc f87c 	bl	8009eec <GUI_X_Init>
 800ddf4:	482f      	ldr	r0, [pc, #188]	; (800deb4 <GUI_Init+0x180>)
 800ddf6:	f7ff fea9 	bl	800db4c <_InitContext>
 800ddfa:	f001 fb49 	bl	800f490 <emWin_LCD_Init>
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	f001 fd42 	bl	800f888 <LCD_GetXSizeDisplay>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	bf0c      	ite	eq
 800de0a:	2301      	moveq	r3, #1
 800de0c:	2300      	movne	r3, #0
 800de0e:	b2dc      	uxtb	r4, r3
 800de10:	f001 fd40 	bl	800f894 <LCD_GetYSizeDisplay>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	bf0c      	ite	eq
 800de1a:	2301      	moveq	r3, #1
 800de1c:	2300      	movne	r3, #0
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	4323      	orrs	r3, r4
 800de22:	b2db      	uxtb	r3, r3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d009      	beq.n	800de3c <GUI_Init+0x108>
 800de28:	f001 fd1e 	bl	800f868 <LCD_GetXSizeMax>
 800de2c:	4604      	mov	r4, r0
 800de2e:	f001 fd1e 	bl	800f86e <LCD_GetYSizeMax>
 800de32:	4603      	mov	r3, r0
 800de34:	4619      	mov	r1, r3
 800de36:	4620      	mov	r0, r4
 800de38:	f001 fd20 	bl	800f87c <LCD_SetDisplaySize>
 800de3c:	2100      	movs	r1, #0
 800de3e:	2000      	movs	r0, #0
 800de40:	f7ff fe20 	bl	800da84 <GUI_SetOrg>
 800de44:	f004 fe06 	bl	8012a54 <WM_Init>
 800de48:	f000 fbf4 	bl	800e634 <GUITASK_CopyContext>
 800de4c:	4b1a      	ldr	r3, [pc, #104]	; (800deb8 <GUI_Init+0x184>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d012      	beq.n	800de7a <GUI_Init+0x146>
 800de54:	e00d      	b.n	800de72 <GUI_Init+0x13e>
 800de56:	4b18      	ldr	r3, [pc, #96]	; (800deb8 <GUI_Init+0x184>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d003      	beq.n	800de68 <GUI_Init+0x134>
 800de60:	4b15      	ldr	r3, [pc, #84]	; (800deb8 <GUI_Init+0x184>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4798      	blx	r3
 800de68:	4b13      	ldr	r3, [pc, #76]	; (800deb8 <GUI_Init+0x184>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	4a12      	ldr	r2, [pc, #72]	; (800deb8 <GUI_Init+0x184>)
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	4b11      	ldr	r3, [pc, #68]	; (800deb8 <GUI_Init+0x184>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1ed      	bne.n	800de56 <GUI_Init+0x122>
 800de7a:	4b10      	ldr	r3, [pc, #64]	; (800debc <GUI_Init+0x188>)
 800de7c:	2201      	movs	r2, #1
 800de7e:	701a      	strb	r2, [r3, #0]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4618      	mov	r0, r3
 800de84:	370c      	adds	r7, #12
 800de86:	46bd      	mov	sp, r7
 800de88:	bd90      	pop	{r4, r7, pc}
 800de8a:	bf00      	nop
 800de8c:	e0002000 	.word	0xe0002000
 800de90:	e0042000 	.word	0xe0042000
 800de94:	40023008 	.word	0x40023008
 800de98:	40023000 	.word	0x40023000
 800de9c:	f407a5c2 	.word	0xf407a5c2
 800dea0:	b5e8b5cd 	.word	0xb5e8b5cd
 800dea4:	5c001000 	.word	0x5c001000
 800dea8:	58024c08 	.word	0x58024c08
 800deac:	58024c00 	.word	0x58024c00
 800deb0:	200225c4 	.word	0x200225c4
 800deb4:	200002bc 	.word	0x200002bc
 800deb8:	20000334 	.word	0x20000334
 800debc:	200225ec 	.word	0x200225ec

0800dec0 <GUI__RegisterExit>:
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	4b06      	ldr	r3, [pc, #24]	; (800dee4 <GUI__RegisterExit+0x24>)
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	605a      	str	r2, [r3, #4]
 800ded0:	4a04      	ldr	r2, [pc, #16]	; (800dee4 <GUI__RegisterExit+0x24>)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	bf00      	nop
 800ded8:	370c      	adds	r7, #12
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	20000330 	.word	0x20000330

0800dee8 <GUI_DCACHE_Clear>:
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	4b05      	ldr	r3, [pc, #20]	; (800df08 <GUI_DCACHE_Clear+0x20>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d003      	beq.n	800df00 <GUI_DCACHE_Clear+0x18>
 800def8:	4b03      	ldr	r3, [pc, #12]	; (800df08 <GUI_DCACHE_Clear+0x20>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	4798      	blx	r3
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	200225d0 	.word	0x200225d0

0800df0c <GUI_DEVICE__GetpDevice>:
 800df0c:	2801      	cmp	r0, #1
 800df0e:	dc0a      	bgt.n	800df26 <GUI_DEVICE__GetpDevice+0x1a>
 800df10:	4b06      	ldr	r3, [pc, #24]	; (800df2c <GUI_DEVICE__GetpDevice+0x20>)
 800df12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800df16:	b128      	cbz	r0, 800df24 <GUI_DEVICE__GetpDevice+0x18>
 800df18:	68c3      	ldr	r3, [r0, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	428b      	cmp	r3, r1
 800df1e:	d003      	beq.n	800df28 <GUI_DEVICE__GetpDevice+0x1c>
 800df20:	6800      	ldr	r0, [r0, #0]
 800df22:	e7f8      	b.n	800df16 <GUI_DEVICE__GetpDevice+0xa>
 800df24:	4770      	bx	lr
 800df26:	2000      	movs	r0, #0
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	2002260c 	.word	0x2002260c

0800df30 <GUI_DEVICE__GetpDriver>:
 800df30:	2801      	cmp	r0, #1
 800df32:	dc09      	bgt.n	800df48 <GUI_DEVICE__GetpDriver+0x18>
 800df34:	4b05      	ldr	r3, [pc, #20]	; (800df4c <GUI_DEVICE__GetpDriver+0x1c>)
 800df36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800df3a:	b120      	cbz	r0, 800df46 <GUI_DEVICE__GetpDriver+0x16>
 800df3c:	68c3      	ldr	r3, [r0, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	b11b      	cbz	r3, 800df4a <GUI_DEVICE__GetpDriver+0x1a>
 800df42:	6800      	ldr	r0, [r0, #0]
 800df44:	e7f9      	b.n	800df3a <GUI_DEVICE__GetpDriver+0xa>
 800df46:	4770      	bx	lr
 800df48:	2000      	movs	r0, #0
 800df4a:	4770      	bx	lr
 800df4c:	2002260c 	.word	0x2002260c

0800df50 <GUI_DEVICE_Delete>:
 800df50:	f7ff b9aa 	b.w	800d2a8 <GUI_ALLOC_FreeFixedBlock>

0800df54 <GUI_DEVICE_Create>:
 800df54:	2b01      	cmp	r3, #1
 800df56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df58:	4606      	mov	r6, r0
 800df5a:	460d      	mov	r5, r1
 800df5c:	4617      	mov	r7, r2
 800df5e:	461c      	mov	r4, r3
 800df60:	dd01      	ble.n	800df66 <GUI_DEVICE_Create+0x12>
 800df62:	2000      	movs	r0, #0
 800df64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df66:	201c      	movs	r0, #28
 800df68:	f7ff fa8a 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d0f8      	beq.n	800df62 <GUI_DEVICE_Create+0xe>
 800df70:	b10d      	cbz	r5, 800df76 <GUI_DEVICE_Create+0x22>
 800df72:	6105      	str	r5, [r0, #16]
 800df74:	e009      	b.n	800df8a <GUI_DEVICE_Create+0x36>
 800df76:	4b09      	ldr	r3, [pc, #36]	; (800df9c <GUI_DEVICE_Create+0x48>)
 800df78:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800df7c:	b129      	cbz	r1, 800df8a <GUI_DEVICE_Create+0x36>
 800df7e:	680b      	ldr	r3, [r1, #0]
 800df80:	b10b      	cbz	r3, 800df86 <GUI_DEVICE_Create+0x32>
 800df82:	4619      	mov	r1, r3
 800df84:	e7fb      	b.n	800df7e <GUI_DEVICE_Create+0x2a>
 800df86:	690b      	ldr	r3, [r1, #16]
 800df88:	6103      	str	r3, [r0, #16]
 800df8a:	2300      	movs	r3, #0
 800df8c:	6184      	str	r4, [r0, #24]
 800df8e:	8287      	strh	r7, [r0, #20]
 800df90:	60c6      	str	r6, [r0, #12]
 800df92:	6003      	str	r3, [r0, #0]
 800df94:	6043      	str	r3, [r0, #4]
 800df96:	6083      	str	r3, [r0, #8]
 800df98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df9a:	bf00      	nop
 800df9c:	2002260c 	.word	0x2002260c

0800dfa0 <GUI_DEVICE_Unlink>:
 800dfa0:	6981      	ldr	r1, [r0, #24]
 800dfa2:	4a0a      	ldr	r2, [pc, #40]	; (800dfcc <GUI_DEVICE_Unlink+0x2c>)
 800dfa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dfa8:	4298      	cmp	r0, r3
 800dfaa:	6803      	ldr	r3, [r0, #0]
 800dfac:	d104      	bne.n	800dfb8 <GUI_DEVICE_Unlink+0x18>
 800dfae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dfb2:	b10b      	cbz	r3, 800dfb8 <GUI_DEVICE_Unlink+0x18>
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	605a      	str	r2, [r3, #4]
 800dfb8:	6842      	ldr	r2, [r0, #4]
 800dfba:	b102      	cbz	r2, 800dfbe <GUI_DEVICE_Unlink+0x1e>
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	6803      	ldr	r3, [r0, #0]
 800dfc0:	b103      	cbz	r3, 800dfc4 <GUI_DEVICE_Unlink+0x24>
 800dfc2:	605a      	str	r2, [r3, #4]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	6003      	str	r3, [r0, #0]
 800dfc8:	6043      	str	r3, [r0, #4]
 800dfca:	4770      	bx	lr
 800dfcc:	2002260c 	.word	0x2002260c

0800dfd0 <GUI_DEVICE_Link>:
 800dfd0:	b530      	push	{r4, r5, lr}
 800dfd2:	b908      	cbnz	r0, 800dfd8 <GUI_DEVICE_Link+0x8>
 800dfd4:	2001      	movs	r0, #1
 800dfd6:	bd30      	pop	{r4, r5, pc}
 800dfd8:	6984      	ldr	r4, [r0, #24]
 800dfda:	2c01      	cmp	r4, #1
 800dfdc:	dcfa      	bgt.n	800dfd4 <GUI_DEVICE_Link+0x4>
 800dfde:	4b1b      	ldr	r3, [pc, #108]	; (800e04c <GUI_DEVICE_Link+0x7c>)
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	4294      	cmp	r4, r2
 800dfe4:	bfa4      	itt	ge
 800dfe6:	1c62      	addge	r2, r4, #1
 800dfe8:	701a      	strbge	r2, [r3, #0]
 800dfea:	4a19      	ldr	r2, [pc, #100]	; (800e050 <GUI_DEVICE_Link+0x80>)
 800dfec:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800dff0:	4615      	mov	r5, r2
 800dff2:	b91b      	cbnz	r3, 800dffc <GUI_DEVICE_Link+0x2c>
 800dff4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800dff8:	4618      	mov	r0, r3
 800dffa:	bd30      	pop	{r4, r5, pc}
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	b10a      	cbz	r2, 800e004 <GUI_DEVICE_Link+0x34>
 800e000:	4613      	mov	r3, r2
 800e002:	e7fb      	b.n	800dffc <GUI_DEVICE_Link+0x2c>
 800e004:	68c2      	ldr	r2, [r0, #12]
 800e006:	6812      	ldr	r2, [r2, #0]
 800e008:	68d9      	ldr	r1, [r3, #12]
 800e00a:	6809      	ldr	r1, [r1, #0]
 800e00c:	4291      	cmp	r1, r2
 800e00e:	dd03      	ble.n	800e018 <GUI_DEVICE_Link+0x48>
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1f8      	bne.n	800e008 <GUI_DEVICE_Link+0x38>
 800e016:	e7dd      	b.n	800dfd4 <GUI_DEVICE_Link+0x4>
 800e018:	d109      	bne.n	800e02e <GUI_DEVICE_Link+0x5e>
 800e01a:	8a81      	ldrh	r1, [r0, #20]
 800e01c:	2901      	cmp	r1, #1
 800e01e:	d106      	bne.n	800e02e <GUI_DEVICE_Link+0x5e>
 800e020:	6819      	ldr	r1, [r3, #0]
 800e022:	b121      	cbz	r1, 800e02e <GUI_DEVICE_Link+0x5e>
 800e024:	460b      	mov	r3, r1
 800e026:	68c9      	ldr	r1, [r1, #12]
 800e028:	6809      	ldr	r1, [r1, #0]
 800e02a:	428a      	cmp	r2, r1
 800e02c:	ddf8      	ble.n	800e020 <GUI_DEVICE_Link+0x50>
 800e02e:	685a      	ldr	r2, [r3, #4]
 800e030:	b112      	cbz	r2, 800e038 <GUI_DEVICE_Link+0x68>
 800e032:	6010      	str	r0, [r2, #0]
 800e034:	6042      	str	r2, [r0, #4]
 800e036:	e001      	b.n	800e03c <GUI_DEVICE_Link+0x6c>
 800e038:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 800e03c:	6058      	str	r0, [r3, #4]
 800e03e:	4298      	cmp	r0, r3
 800e040:	bf08      	it	eq
 800e042:	2300      	moveq	r3, #0
 800e044:	6003      	str	r3, [r0, #0]
 800e046:	2000      	movs	r0, #0
 800e048:	bd30      	pop	{r4, r5, pc}
 800e04a:	bf00      	nop
 800e04c:	200225be 	.word	0x200225be
 800e050:	2002260c 	.word	0x2002260c

0800e054 <GUI_DEVICE_CreateAndLink>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	461d      	mov	r5, r3
 800e058:	f7ff ff7c 	bl	800df54 <GUI_DEVICE_Create>
 800e05c:	4604      	mov	r4, r0
 800e05e:	b148      	cbz	r0, 800e074 <GUI_DEVICE_CreateAndLink+0x20>
 800e060:	f7ff ffb6 	bl	800dfd0 <GUI_DEVICE_Link>
 800e064:	68e3      	ldr	r3, [r4, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	b923      	cbnz	r3, 800e074 <GUI_DEVICE_CreateAndLink+0x20>
 800e06a:	4b03      	ldr	r3, [pc, #12]	; (800e078 <GUI_DEVICE_CreateAndLink+0x24>)
 800e06c:	3516      	adds	r5, #22
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800e074:	4620      	mov	r0, r4
 800e076:	bd38      	pop	{r3, r4, r5, pc}
 800e078:	20000018 	.word	0x20000018

0800e07c <GUI_DEVICE_UnlinkTaskDevices>:
 800e07c:	2000      	movs	r0, #0
 800e07e:	4770      	bx	lr

0800e080 <GUI_DEVICE_LinkDevices>:
 800e080:	b510      	push	{r4, lr}
 800e082:	b120      	cbz	r0, 800e08e <GUI_DEVICE_LinkDevices+0xe>
 800e084:	6804      	ldr	r4, [r0, #0]
 800e086:	f7ff ffa3 	bl	800dfd0 <GUI_DEVICE_Link>
 800e08a:	4620      	mov	r0, r4
 800e08c:	e7f9      	b.n	800e082 <GUI_DEVICE_LinkDevices+0x2>
 800e08e:	bd10      	pop	{r4, pc}

0800e090 <GUI__DispStringInRect>:
 800e090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e094:	460c      	mov	r4, r1
 800e096:	b086      	sub	sp, #24
 800e098:	4616      	mov	r6, r2
 800e09a:	461f      	mov	r7, r3
 800e09c:	9001      	str	r0, [sp, #4]
 800e09e:	f007 fb61 	bl	8015764 <GUI_GetFontDistY>
 800e0a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e0a6:	4680      	mov	r8, r0
 800e0a8:	b124      	cbz	r4, 800e0b4 <GUI__DispStringInRect+0x24>
 800e0aa:	ab04      	add	r3, sp, #16
 800e0ac:	6820      	ldr	r0, [r4, #0]
 800e0ae:	6861      	ldr	r1, [r4, #4]
 800e0b0:	c303      	stmia	r3!, {r0, r1}
 800e0b2:	e002      	b.n	800e0ba <GUI__DispStringInRect+0x2a>
 800e0b4:	a804      	add	r0, sp, #16
 800e0b6:	f7ff fb44 	bl	800d742 <GUI_GetClientRect>
 800e0ba:	f016 0a0c 	ands.w	sl, r6, #12
 800e0be:	d102      	bne.n	800e0c6 <GUI__DispStringInRect+0x36>
 800e0c0:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800e0c4:	e031      	b.n	800e12a <GUI__DispStringInRect+0x9a>
 800e0c6:	463c      	mov	r4, r7
 800e0c8:	2500      	movs	r5, #0
 800e0ca:	b18c      	cbz	r4, 800e0f0 <GUI__DispStringInRect+0x60>
 800e0cc:	4621      	mov	r1, r4
 800e0ce:	9801      	ldr	r0, [sp, #4]
 800e0d0:	f007 fbcc 	bl	801586c <GUI__GetLineNumChars>
 800e0d4:	4601      	mov	r1, r0
 800e0d6:	1a24      	subs	r4, r4, r0
 800e0d8:	9801      	ldr	r0, [sp, #4]
 800e0da:	f000 fb2f 	bl	800e73c <GUI_UC__NumChars2NumBytes>
 800e0de:	9b01      	ldr	r3, [sp, #4]
 800e0e0:	3501      	adds	r5, #1
 800e0e2:	4418      	add	r0, r3
 800e0e4:	9001      	str	r0, [sp, #4]
 800e0e6:	a801      	add	r0, sp, #4
 800e0e8:	f000 fe66 	bl	800edb8 <GUI__HandleEOLine>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d0ec      	beq.n	800e0ca <GUI__DispStringInRect+0x3a>
 800e0f0:	f1ba 0f08 	cmp.w	sl, #8
 800e0f4:	d005      	beq.n	800e102 <GUI__DispStringInRect+0x72>
 800e0f6:	f1ba 0f0c 	cmp.w	sl, #12
 800e0fa:	d008      	beq.n	800e10e <GUI__DispStringInRect+0x7e>
 800e0fc:	f1ba 0f04 	cmp.w	sl, #4
 800e100:	d112      	bne.n	800e128 <GUI__DispStringInRect+0x98>
 800e102:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800e106:	fb08 4415 	mls	r4, r8, r5, r4
 800e10a:	3401      	adds	r4, #1
 800e10c:	e00d      	b.n	800e12a <GUI__DispStringInRect+0x9a>
 800e10e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800e112:	2402      	movs	r4, #2
 800e114:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e118:	1a9b      	subs	r3, r3, r2
 800e11a:	3301      	adds	r3, #1
 800e11c:	fb08 3515 	mls	r5, r8, r5, r3
 800e120:	fb95 f5f4 	sdiv	r5, r5, r4
 800e124:	18ac      	adds	r4, r5, r2
 800e126:	e000      	b.n	800e12a <GUI__DispStringInRect+0x9a>
 800e128:	2400      	movs	r4, #0
 800e12a:	f8cd 9004 	str.w	r9, [sp, #4]
 800e12e:	2500      	movs	r5, #0
 800e130:	f006 0603 	and.w	r6, r6, #3
 800e134:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800e1d8 <GUI__DispStringInRect+0x148>
 800e138:	f108 38ff 	add.w	r8, r8, #4294967295
 800e13c:	2f00      	cmp	r7, #0
 800e13e:	d048      	beq.n	800e1d2 <GUI__DispStringInRect+0x142>
 800e140:	4639      	mov	r1, r7
 800e142:	9801      	ldr	r0, [sp, #4]
 800e144:	f007 fb92 	bl	801586c <GUI__GetLineNumChars>
 800e148:	4601      	mov	r1, r0
 800e14a:	4682      	mov	sl, r0
 800e14c:	1a3f      	subs	r7, r7, r0
 800e14e:	9801      	ldr	r0, [sp, #4]
 800e150:	f007 fbb6 	bl	80158c0 <GUI__GetLineDistX>
 800e154:	2e01      	cmp	r6, #1
 800e156:	d00f      	beq.n	800e178 <GUI__DispStringInRect+0xe8>
 800e158:	2e02      	cmp	r6, #2
 800e15a:	d003      	beq.n	800e164 <GUI__DispStringInRect+0xd4>
 800e15c:	b986      	cbnz	r6, 800e180 <GUI__DispStringInRect+0xf0>
 800e15e:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 800e162:	e00d      	b.n	800e180 <GUI__DispStringInRect+0xf0>
 800e164:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 800e168:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e16c:	1b5b      	subs	r3, r3, r5
 800e16e:	1a1b      	subs	r3, r3, r0
 800e170:	fb93 f3f6 	sdiv	r3, r3, r6
 800e174:	441d      	add	r5, r3
 800e176:	e003      	b.n	800e180 <GUI__DispStringInRect+0xf0>
 800e178:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800e17c:	1a2d      	subs	r5, r5, r0
 800e17e:	3501      	adds	r5, #1
 800e180:	3801      	subs	r0, #1
 800e182:	f8d9 1000 	ldr.w	r1, [r9]
 800e186:	b223      	sxth	r3, r4
 800e188:	b22a      	sxth	r2, r5
 800e18a:	4428      	add	r0, r5
 800e18c:	848b      	strh	r3, [r1, #36]	; 0x24
 800e18e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e192:	eb08 0304 	add.w	r3, r8, r4
 800e196:	844a      	strh	r2, [r1, #34]	; 0x22
 800e198:	4651      	mov	r1, sl
 800e19a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800e19e:	aa02      	add	r2, sp, #8
 800e1a0:	f8ad 000c 	strh.w	r0, [sp, #12]
 800e1a4:	9801      	ldr	r0, [sp, #4]
 800e1a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e1aa:	f007 fbb9 	bl	8015920 <GUI__DispLine>
 800e1ae:	4651      	mov	r1, sl
 800e1b0:	9801      	ldr	r0, [sp, #4]
 800e1b2:	f000 fac3 	bl	800e73c <GUI_UC__NumChars2NumBytes>
 800e1b6:	9b01      	ldr	r3, [sp, #4]
 800e1b8:	f10d 0a18 	add.w	sl, sp, #24
 800e1bc:	4418      	add	r0, r3
 800e1be:	f84a 0d14 	str.w	r0, [sl, #-20]!
 800e1c2:	f007 facf 	bl	8015764 <GUI_GetFontDistY>
 800e1c6:	4404      	add	r4, r0
 800e1c8:	4650      	mov	r0, sl
 800e1ca:	f000 fdf5 	bl	800edb8 <GUI__HandleEOLine>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d0b4      	beq.n	800e13c <GUI__DispStringInRect+0xac>
 800e1d2:	b006      	add	sp, #24
 800e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1d8:	20000018 	.word	0x20000018

0800e1dc <GUI_DispStringInRectMax>:
 800e1dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e1e0:	460c      	mov	r4, r1
 800e1e2:	4617      	mov	r7, r2
 800e1e4:	4698      	mov	r8, r3
 800e1e6:	4606      	mov	r6, r0
 800e1e8:	b1e0      	cbz	r0, 800e224 <GUI_DispStringInRectMax+0x48>
 800e1ea:	f000 f9c1 	bl	800e570 <GUI_Lock>
 800e1ee:	b16c      	cbz	r4, 800e20c <GUI_DispStringInRectMax+0x30>
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f005 f827 	bl	8013244 <WM_SetUserClipRect>
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	b148      	cbz	r0, 800e20e <GUI_DispStringInRectMax+0x32>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4668      	mov	r0, sp
 800e200:	f000 fe0a 	bl	800ee18 <GUI__IntersectRects>
 800e204:	4668      	mov	r0, sp
 800e206:	f005 f81d 	bl	8013244 <WM_SetUserClipRect>
 800e20a:	e000      	b.n	800e20e <GUI_DispStringInRectMax+0x32>
 800e20c:	4625      	mov	r5, r4
 800e20e:	4643      	mov	r3, r8
 800e210:	463a      	mov	r2, r7
 800e212:	4621      	mov	r1, r4
 800e214:	4630      	mov	r0, r6
 800e216:	f7ff ff3b 	bl	800e090 <GUI__DispStringInRect>
 800e21a:	4628      	mov	r0, r5
 800e21c:	f005 f812 	bl	8013244 <WM_SetUserClipRect>
 800e220:	f000 f99c 	bl	800e55c <GUI_Unlock>
 800e224:	b002      	add	sp, #8
 800e226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e22a <GUI_DispStringInRect>:
 800e22a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e22e:	f7ff bfd5 	b.w	800e1dc <GUI_DispStringInRectMax>
	...

0800e234 <_OnExit>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4c0e      	ldr	r4, [pc, #56]	; (800e270 <_OnExit+0x3c>)
 800e238:	2208      	movs	r2, #8
 800e23a:	4d0e      	ldr	r5, [pc, #56]	; (800e274 <_OnExit+0x40>)
 800e23c:	2100      	movs	r1, #0
 800e23e:	4620      	mov	r0, r4
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	4798      	blx	r3
 800e244:	2208      	movs	r2, #8
 800e246:	682b      	ldr	r3, [r5, #0]
 800e248:	2100      	movs	r1, #0
 800e24a:	18a0      	adds	r0, r4, r2
 800e24c:	4798      	blx	r3
 800e24e:	682b      	ldr	r3, [r5, #0]
 800e250:	2208      	movs	r2, #8
 800e252:	2100      	movs	r1, #0
 800e254:	f104 0010 	add.w	r0, r4, #16
 800e258:	4798      	blx	r3
 800e25a:	682b      	ldr	r3, [r5, #0]
 800e25c:	2208      	movs	r2, #8
 800e25e:	2100      	movs	r1, #0
 800e260:	f104 0018 	add.w	r0, r4, #24
 800e264:	4798      	blx	r3
 800e266:	2200      	movs	r2, #0
 800e268:	4b03      	ldr	r3, [pc, #12]	; (800e278 <_OnExit+0x44>)
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	bd38      	pop	{r3, r4, r5, pc}
 800e26e:	bf00      	nop
 800e270:	20000358 	.word	0x20000358
 800e274:	2000003c 	.word	0x2000003c
 800e278:	200225c0 	.word	0x200225c0

0800e27c <GUI_MULTIBUF_BeginEx>:
 800e27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e27e:	4917      	ldr	r1, [pc, #92]	; (800e2dc <GUI_MULTIBUF_BeginEx+0x60>)
 800e280:	6a0b      	ldr	r3, [r1, #32]
 800e282:	2b00      	cmp	r3, #0
 800e284:	4b16      	ldr	r3, [pc, #88]	; (800e2e0 <GUI_MULTIBUF_BeginEx+0x64>)
 800e286:	bf0c      	ite	eq
 800e288:	4606      	moveq	r6, r0
 800e28a:	2600      	movne	r6, #0
 800e28c:	579d      	ldrsb	r5, [r3, r6]
 800e28e:	2d01      	cmp	r5, #1
 800e290:	dd21      	ble.n	800e2d6 <GUI_MULTIBUF_BeginEx+0x5a>
 800e292:	eb01 0386 	add.w	r3, r1, r6, lsl #2
 800e296:	691a      	ldr	r2, [r3, #16]
 800e298:	1c54      	adds	r4, r2, #1
 800e29a:	611c      	str	r4, [r3, #16]
 800e29c:	b9da      	cbnz	r2, 800e2d6 <GUI_MULTIBUF_BeginEx+0x5a>
 800e29e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	689c      	ldr	r4, [r3, #8]
 800e2a6:	689a      	ldr	r2, [r3, #8]
 800e2a8:	3201      	adds	r2, #1
 800e2aa:	42aa      	cmp	r2, r5
 800e2ac:	bf08      	it	eq
 800e2ae:	460a      	moveq	r2, r1
 800e2b0:	42ba      	cmp	r2, r7
 800e2b2:	609a      	str	r2, [r3, #8]
 800e2b4:	4616      	mov	r6, r2
 800e2b6:	d0f6      	beq.n	800e2a6 <GUI_MULTIBUF_BeginEx+0x2a>
 800e2b8:	f7ff fe3a 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800e2bc:	9001      	str	r0, [sp, #4]
 800e2be:	b150      	cbz	r0, 800e2d6 <GUI_MULTIBUF_BeginEx+0x5a>
 800e2c0:	68c3      	ldr	r3, [r0, #12]
 800e2c2:	2121      	movs	r1, #33	; 0x21
 800e2c4:	a801      	add	r0, sp, #4
 800e2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c8:	4798      	blx	r3
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	b118      	cbz	r0, 800e2d6 <GUI_MULTIBUF_BeginEx+0x5a>
 800e2ce:	4632      	mov	r2, r6
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	9801      	ldr	r0, [sp, #4]
 800e2d4:	4798      	blx	r3
 800e2d6:	b003      	add	sp, #12
 800e2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	20000358 	.word	0x20000358
 800e2e0:	200225bc 	.word	0x200225bc

0800e2e4 <GUI_MULTIBUF_EndEx>:
 800e2e4:	4b14      	ldr	r3, [pc, #80]	; (800e338 <GUI_MULTIBUF_EndEx+0x54>)
 800e2e6:	6a1a      	ldr	r2, [r3, #32]
 800e2e8:	2a00      	cmp	r2, #0
 800e2ea:	4a14      	ldr	r2, [pc, #80]	; (800e33c <GUI_MULTIBUF_EndEx+0x58>)
 800e2ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2ee:	bf0c      	ite	eq
 800e2f0:	4604      	moveq	r4, r0
 800e2f2:	2400      	movne	r4, #0
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	5712      	ldrsb	r2, [r2, r4]
 800e2f8:	2a01      	cmp	r2, #1
 800e2fa:	dd1a      	ble.n	800e332 <GUI_MULTIBUF_EndEx+0x4e>
 800e2fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e300:	6923      	ldr	r3, [r4, #16]
 800e302:	3b01      	subs	r3, #1
 800e304:	6123      	str	r3, [r4, #16]
 800e306:	b9a3      	cbnz	r3, 800e332 <GUI_MULTIBUF_EndEx+0x4e>
 800e308:	2001      	movs	r0, #1
 800e30a:	40a8      	lsls	r0, r5
 800e30c:	f7ff fdec 	bl	800dee8 <GUI_DCACHE_Clear>
 800e310:	68a6      	ldr	r6, [r4, #8]
 800e312:	4628      	mov	r0, r5
 800e314:	61a6      	str	r6, [r4, #24]
 800e316:	f7ff fe0b 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800e31a:	9001      	str	r0, [sp, #4]
 800e31c:	b148      	cbz	r0, 800e332 <GUI_MULTIBUF_EndEx+0x4e>
 800e31e:	68c3      	ldr	r3, [r0, #12]
 800e320:	2122      	movs	r1, #34	; 0x22
 800e322:	a801      	add	r0, sp, #4
 800e324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e326:	4798      	blx	r3
 800e328:	4603      	mov	r3, r0
 800e32a:	b110      	cbz	r0, 800e332 <GUI_MULTIBUF_EndEx+0x4e>
 800e32c:	4631      	mov	r1, r6
 800e32e:	9801      	ldr	r0, [sp, #4]
 800e330:	4798      	blx	r3
 800e332:	b002      	add	sp, #8
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	bf00      	nop
 800e338:	20000358 	.word	0x20000358
 800e33c:	200225bc 	.word	0x200225bc

0800e340 <GUI_MULTIBUF_ConfirmEx>:
 800e340:	4b08      	ldr	r3, [pc, #32]	; (800e364 <GUI_MULTIBUF_ConfirmEx+0x24>)
 800e342:	6a1a      	ldr	r2, [r3, #32]
 800e344:	2a00      	cmp	r2, #0
 800e346:	bf18      	it	ne
 800e348:	2000      	movne	r0, #0
 800e34a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800e34e:	b510      	push	{r4, lr}
 800e350:	6994      	ldr	r4, [r2, #24]
 800e352:	2c00      	cmp	r4, #0
 800e354:	bfa2      	ittt	ge
 800e356:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 800e35a:	f04f 33ff 	movge.w	r3, #4294967295
 800e35e:	6193      	strge	r3, [r2, #24]
 800e360:	bd10      	pop	{r4, pc}
 800e362:	bf00      	nop
 800e364:	20000358 	.word	0x20000358

0800e368 <GUI_MULTIBUF_ConfigEx>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4c0a      	ldr	r4, [pc, #40]	; (800e394 <GUI_MULTIBUF_ConfigEx+0x2c>)
 800e36c:	4605      	mov	r5, r0
 800e36e:	460e      	mov	r6, r1
 800e370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e372:	b92b      	cbnz	r3, 800e380 <GUI_MULTIBUF_ConfigEx+0x18>
 800e374:	4620      	mov	r0, r4
 800e376:	4b08      	ldr	r3, [pc, #32]	; (800e398 <GUI_MULTIBUF_ConfigEx+0x30>)
 800e378:	f840 3f24 	str.w	r3, [r0, #36]!
 800e37c:	f7ff fda0 	bl	800dec0 <GUI__RegisterExit>
 800e380:	6a23      	ldr	r3, [r4, #32]
 800e382:	2b00      	cmp	r3, #0
 800e384:	4b05      	ldr	r3, [pc, #20]	; (800e39c <GUI_MULTIBUF_ConfigEx+0x34>)
 800e386:	bf18      	it	ne
 800e388:	2500      	movne	r5, #0
 800e38a:	2e01      	cmp	r6, #1
 800e38c:	bfb8      	it	lt
 800e38e:	2601      	movlt	r6, #1
 800e390:	555e      	strb	r6, [r3, r5]
 800e392:	bd70      	pop	{r4, r5, r6, pc}
 800e394:	20000358 	.word	0x20000358
 800e398:	0800e235 	.word	0x0800e235
 800e39c:	200225bc 	.word	0x200225bc

0800e3a0 <GUI_StoreKey>:
 800e3a0:	4b02      	ldr	r3, [pc, #8]	; (800e3ac <GUI_StoreKey+0xc>)
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	b902      	cbnz	r2, 800e3a8 <GUI_StoreKey+0x8>
 800e3a6:	6018      	str	r0, [r3, #0]
 800e3a8:	f000 b9e4 	b.w	800e774 <GUI_SignalEvent>
 800e3ac:	20000384 	.word	0x20000384

0800e3b0 <GUI_PollKeyMsg>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	f000 f8dd 	bl	800e570 <GUI_Lock>
 800e3b6:	4a0b      	ldr	r2, [pc, #44]	; (800e3e4 <GUI_PollKeyMsg+0x34>)
 800e3b8:	6813      	ldr	r3, [r2, #0]
 800e3ba:	6851      	ldr	r1, [r2, #4]
 800e3bc:	428b      	cmp	r3, r1
 800e3be:	d00c      	beq.n	800e3da <GUI_PollKeyMsg+0x2a>
 800e3c0:	4c09      	ldr	r4, [pc, #36]	; (800e3e8 <GUI_PollKeyMsg+0x38>)
 800e3c2:	42a3      	cmp	r3, r4
 800e3c4:	f04f 0401 	mov.w	r4, #1
 800e3c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e3cc:	bf14      	ite	ne
 800e3ce:	3308      	addne	r3, #8
 800e3d0:	3b50      	subeq	r3, #80	; 0x50
 800e3d2:	6013      	str	r3, [r2, #0]
 800e3d4:	f004 fdda 	bl	8012f8c <WM_OnKey>
 800e3d8:	e000      	b.n	800e3dc <GUI_PollKeyMsg+0x2c>
 800e3da:	2400      	movs	r4, #0
 800e3dc:	f000 f8be 	bl	800e55c <GUI_Unlock>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	bd10      	pop	{r4, pc}
 800e3e4:	2000001c 	.word	0x2000001c
 800e3e8:	200003d8 	.word	0x200003d8

0800e3ec <GUI_GetCursorLayer>:
 800e3ec:	2801      	cmp	r0, #1
 800e3ee:	bf9a      	itte	ls
 800e3f0:	4b02      	ldrls	r3, [pc, #8]	; (800e3fc <GUI_GetCursorLayer+0x10>)
 800e3f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e3f6:	2000      	movhi	r0, #0
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	200003e4 	.word	0x200003e4

0800e400 <GUI_GetLayerPosEx>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	4604      	mov	r4, r0
 800e404:	460e      	mov	r6, r1
 800e406:	4615      	mov	r5, r2
 800e408:	f000 f8b2 	bl	800e570 <GUI_Lock>
 800e40c:	4620      	mov	r0, r4
 800e40e:	4631      	mov	r1, r6
 800e410:	462a      	mov	r2, r5
 800e412:	f001 fbcb 	bl	800fbac <LCD_GetPosEx>
 800e416:	4604      	mov	r4, r0
 800e418:	b110      	cbz	r0, 800e420 <GUI_GetLayerPosEx+0x20>
 800e41a:	2300      	movs	r3, #0
 800e41c:	6033      	str	r3, [r6, #0]
 800e41e:	602b      	str	r3, [r5, #0]
 800e420:	f000 f89c 	bl	800e55c <GUI_Unlock>
 800e424:	4620      	mov	r0, r4
 800e426:	bd70      	pop	{r4, r5, r6, pc}

0800e428 <GUI_SelectLayer>:
 800e428:	b570      	push	{r4, r5, r6, lr}
 800e42a:	4d0b      	ldr	r5, [pc, #44]	; (800e458 <GUI_SelectLayer+0x30>)
 800e42c:	4604      	mov	r4, r0
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	7c5e      	ldrb	r6, [r3, #17]
 800e432:	f000 f89d 	bl	800e570 <GUI_Lock>
 800e436:	2c01      	cmp	r4, #1
 800e438:	d809      	bhi.n	800e44e <GUI_SelectLayer+0x26>
 800e43a:	4620      	mov	r0, r4
 800e43c:	f7ff fd78 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800e440:	b128      	cbz	r0, 800e44e <GUI_SelectLayer+0x26>
 800e442:	682b      	ldr	r3, [r5, #0]
 800e444:	745c      	strb	r4, [r3, #17]
 800e446:	f7ff facf 	bl	800d9e8 <GUI_SelectLCD>
 800e44a:	4b04      	ldr	r3, [pc, #16]	; (800e45c <GUI_SelectLayer+0x34>)
 800e44c:	601c      	str	r4, [r3, #0]
 800e44e:	f000 f885 	bl	800e55c <GUI_Unlock>
 800e452:	4630      	mov	r0, r6
 800e454:	bd70      	pop	{r4, r5, r6, pc}
 800e456:	bf00      	nop
 800e458:	20000018 	.word	0x20000018
 800e45c:	20022650 	.word	0x20022650

0800e460 <GUI_SetLayerPosEx>:
 800e460:	b570      	push	{r4, r5, r6, lr}
 800e462:	4604      	mov	r4, r0
 800e464:	460d      	mov	r5, r1
 800e466:	4616      	mov	r6, r2
 800e468:	f000 f882 	bl	800e570 <GUI_Lock>
 800e46c:	4629      	mov	r1, r5
 800e46e:	4620      	mov	r0, r4
 800e470:	4632      	mov	r2, r6
 800e472:	f001 fbe4 	bl	800fc3e <LCD_SetPosEx>
 800e476:	4604      	mov	r4, r0
 800e478:	f000 f870 	bl	800e55c <GUI_Unlock>
 800e47c:	4620      	mov	r0, r4
 800e47e:	bd70      	pop	{r4, r5, r6, pc}

0800e480 <GUI_SetLayerSizeEx>:
 800e480:	b570      	push	{r4, r5, r6, lr}
 800e482:	4604      	mov	r4, r0
 800e484:	460d      	mov	r5, r1
 800e486:	4616      	mov	r6, r2
 800e488:	f000 f872 	bl	800e570 <GUI_Lock>
 800e48c:	4629      	mov	r1, r5
 800e48e:	4620      	mov	r0, r4
 800e490:	4632      	mov	r2, r6
 800e492:	f001 fbec 	bl	800fc6e <LCD_SetSizeEx>
 800e496:	4604      	mov	r4, r0
 800e498:	f000 f860 	bl	800e55c <GUI_Unlock>
 800e49c:	4620      	mov	r0, r4
 800e49e:	bd70      	pop	{r4, r5, r6, pc}

0800e4a0 <GUI_SetLayerVisEx>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	460d      	mov	r5, r1
 800e4a6:	f000 f863 	bl	800e570 <GUI_Lock>
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f001 fbf6 	bl	800fc9e <LCD_SetVisEx>
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	f000 f852 	bl	800e55c <GUI_Unlock>
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}

0800e4bc <GUI_TOUCH_StoreStateEx>:
 800e4bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e4be:	4c12      	ldr	r4, [pc, #72]	; (800e508 <GUI_TOUCH_StoreStateEx+0x4c>)
 800e4c0:	220c      	movs	r2, #12
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	f00d f9b3 	bl	801b830 <memcmp>
 800e4ca:	b1d0      	cbz	r0, 800e502 <GUI_TOUCH_StoreStateEx+0x46>
 800e4cc:	68e3      	ldr	r3, [r4, #12]
 800e4ce:	b18b      	cbz	r3, 800e4f4 <GUI_TOUCH_StoreStateEx+0x38>
 800e4d0:	ad01      	add	r5, sp, #4
 800e4d2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e4d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e4da:	a902      	add	r1, sp, #8
 800e4dc:	4628      	mov	r0, r5
 800e4de:	4798      	blx	r3
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e4e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e4ea:	b953      	cbnz	r3, 800e502 <GUI_TOUCH_StoreStateEx+0x46>
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	f007 fea9 	bl	8016244 <GUI_PID_StoreState>
 800e4f2:	e006      	b.n	800e502 <GUI_TOUCH_StoreStateEx+0x46>
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f007 fea5 	bl	8016244 <GUI_PID_StoreState>
 800e4fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e4fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e502:	b004      	add	sp, #16
 800e504:	bd70      	pop	{r4, r5, r6, pc}
 800e506:	bf00      	nop
 800e508:	200003ec 	.word	0x200003ec

0800e50c <_GetTaskNo>:
 800e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50e:	2400      	movs	r4, #0
 800e510:	4d0b      	ldr	r5, [pc, #44]	; (800e540 <_GetTaskNo+0x34>)
 800e512:	4e0c      	ldr	r6, [pc, #48]	; (800e544 <_GetTaskNo+0x38>)
 800e514:	277c      	movs	r7, #124	; 0x7c
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	429c      	cmp	r4, r3
 800e51a:	da0d      	bge.n	800e538 <_GetTaskNo+0x2c>
 800e51c:	f7fb fd12 	bl	8009f44 <GUI_X_GetTaskId>
 800e520:	fb07 f304 	mul.w	r3, r7, r4
 800e524:	6832      	ldr	r2, [r6, #0]
 800e526:	18d1      	adds	r1, r2, r3
 800e528:	58d3      	ldr	r3, [r2, r3]
 800e52a:	4298      	cmp	r0, r3
 800e52c:	d006      	beq.n	800e53c <_GetTaskNo+0x30>
 800e52e:	b90b      	cbnz	r3, 800e534 <_GetTaskNo+0x28>
 800e530:	6008      	str	r0, [r1, #0]
 800e532:	e003      	b.n	800e53c <_GetTaskNo+0x30>
 800e534:	3401      	adds	r4, #1
 800e536:	e7ee      	b.n	800e516 <_GetTaskNo+0xa>
 800e538:	2000      	movs	r0, #0
 800e53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e53c:	4620      	mov	r0, r4
 800e53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e540:	20000024 	.word	0x20000024
 800e544:	200003fc 	.word	0x200003fc

0800e548 <_OnExit>:
 800e548:	b510      	push	{r4, lr}
 800e54a:	4c03      	ldr	r4, [pc, #12]	; (800e558 <_OnExit+0x10>)
 800e54c:	6820      	ldr	r0, [r4, #0]
 800e54e:	f7fe feab 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 800e552:	2300      	movs	r3, #0
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	bd10      	pop	{r4, pc}
 800e558:	200003fc 	.word	0x200003fc

0800e55c <GUI_Unlock>:
 800e55c:	4a03      	ldr	r2, [pc, #12]	; (800e56c <GUI_Unlock+0x10>)
 800e55e:	6853      	ldr	r3, [r2, #4]
 800e560:	3b01      	subs	r3, #1
 800e562:	6053      	str	r3, [r2, #4]
 800e564:	b90b      	cbnz	r3, 800e56a <GUI_Unlock+0xe>
 800e566:	f7fb bcdb 	b.w	8009f20 <GUI_X_Unlock>
 800e56a:	4770      	bx	lr
 800e56c:	200003fc 	.word	0x200003fc

0800e570 <GUI_Lock>:
 800e570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e574:	4c19      	ldr	r4, [pc, #100]	; (800e5dc <GUI_Lock+0x6c>)
 800e576:	6863      	ldr	r3, [r4, #4]
 800e578:	b123      	cbz	r3, 800e584 <GUI_Lock+0x14>
 800e57a:	f7fb fce3 	bl	8009f44 <GUI_X_GetTaskId>
 800e57e:	68a3      	ldr	r3, [r4, #8]
 800e580:	4298      	cmp	r0, r3
 800e582:	d004      	beq.n	800e58e <GUI_Lock+0x1e>
 800e584:	f7fb fcd4 	bl	8009f30 <GUI_X_Lock>
 800e588:	f7fb fcdc 	bl	8009f44 <GUI_X_GetTaskId>
 800e58c:	60a0      	str	r0, [r4, #8]
 800e58e:	6863      	ldr	r3, [r4, #4]
 800e590:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800e5dc <GUI_Lock+0x6c>
 800e594:	3301      	adds	r3, #1
 800e596:	2b01      	cmp	r3, #1
 800e598:	6063      	str	r3, [r4, #4]
 800e59a:	d11c      	bne.n	800e5d6 <GUI_Lock+0x66>
 800e59c:	f7ff ffb6 	bl	800e50c <_GetTaskNo>
 800e5a0:	4a0f      	ldr	r2, [pc, #60]	; (800e5e0 <GUI_Lock+0x70>)
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	6853      	ldr	r3, [r2, #4]
 800e5a6:	4616      	mov	r6, r2
 800e5a8:	4298      	cmp	r0, r3
 800e5aa:	d014      	beq.n	800e5d6 <GUI_Lock+0x66>
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	db11      	blt.n	800e5d4 <GUI_Lock+0x64>
 800e5b0:	247c      	movs	r4, #124	; 0x7c
 800e5b2:	f8d8 5000 	ldr.w	r5, [r8]
 800e5b6:	fb04 5503 	mla	r5, r4, r3, r5
 800e5ba:	f7ff fd5f 	bl	800e07c <GUI_DEVICE_UnlinkTaskDevices>
 800e5be:	f8d8 3000 	ldr.w	r3, [r8]
 800e5c2:	67a8      	str	r0, [r5, #120]	; 0x78
 800e5c4:	fb04 3407 	mla	r4, r4, r7, r3
 800e5c8:	4b06      	ldr	r3, [pc, #24]	; (800e5e4 <GUI_Lock+0x74>)
 800e5ca:	1d22      	adds	r2, r4, #4
 800e5cc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	f7ff fd56 	bl	800e080 <GUI_DEVICE_LinkDevices>
 800e5d4:	6077      	str	r7, [r6, #4]
 800e5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5da:	bf00      	nop
 800e5dc:	200003fc 	.word	0x200003fc
 800e5e0:	20000024 	.word	0x20000024
 800e5e4:	20000018 	.word	0x20000018

0800e5e8 <GUITASK_Init>:
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	4e0e      	ldr	r6, [pc, #56]	; (800e624 <GUITASK_Init+0x3c>)
 800e5ec:	4b0e      	ldr	r3, [pc, #56]	; (800e628 <GUITASK_Init+0x40>)
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	4d0e      	ldr	r5, [pc, #56]	; (800e62c <GUITASK_Init+0x44>)
 800e5f2:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e5f6:	f7ff fc63 	bl	800dec0 <GUI__RegisterExit>
 800e5fa:	682c      	ldr	r4, [r5, #0]
 800e5fc:	237c      	movs	r3, #124	; 0x7c
 800e5fe:	435c      	muls	r4, r3
 800e600:	4620      	mov	r0, r4
 800e602:	f7fe ff3d 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 800e606:	4b0a      	ldr	r3, [pc, #40]	; (800e630 <GUITASK_Init+0x48>)
 800e608:	4622      	mov	r2, r4
 800e60a:	2100      	movs	r1, #0
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6030      	str	r0, [r6, #0]
 800e610:	4798      	blx	r3
 800e612:	f04f 33ff 	mov.w	r3, #4294967295
 800e616:	606b      	str	r3, [r5, #4]
 800e618:	f7fb fc6a 	bl	8009ef0 <GUI_X_InitOS>
 800e61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e620:	f7ff bf74 	b.w	800e50c <_GetTaskNo>
 800e624:	200003fc 	.word	0x200003fc
 800e628:	0800e549 	.word	0x0800e549
 800e62c:	20000024 	.word	0x20000024
 800e630:	2000003c 	.word	0x2000003c

0800e634 <GUITASK_CopyContext>:
 800e634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e638:	2500      	movs	r5, #0
 800e63a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800e6a0 <GUITASK_CopyContext+0x6c>
 800e63e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e698 <GUITASK_CopyContext+0x64>
 800e642:	f8df a058 	ldr.w	sl, [pc, #88]	; 800e69c <GUITASK_CopyContext+0x68>
 800e646:	f8d8 3000 	ldr.w	r3, [r8]
 800e64a:	429d      	cmp	r5, r3
 800e64c:	da17      	bge.n	800e67e <GUITASK_CopyContext+0x4a>
 800e64e:	267c      	movs	r6, #124	; 0x7c
 800e650:	f8d9 7000 	ldr.w	r7, [r9]
 800e654:	2274      	movs	r2, #116	; 0x74
 800e656:	f8da 1000 	ldr.w	r1, [sl]
 800e65a:	436e      	muls	r6, r5
 800e65c:	3501      	adds	r5, #1
 800e65e:	19bc      	adds	r4, r7, r6
 800e660:	1d23      	adds	r3, r4, #4
 800e662:	4618      	mov	r0, r3
 800e664:	f00d f8f3 	bl	801b84e <memcpy>
 800e668:	2200      	movs	r2, #0
 800e66a:	51ba      	str	r2, [r7, r6]
 800e66c:	f104 020c 	add.w	r2, r4, #12
 800e670:	63e0      	str	r0, [r4, #60]	; 0x3c
 800e672:	61a2      	str	r2, [r4, #24]
 800e674:	f104 0208 	add.w	r2, r4, #8
 800e678:	6460      	str	r0, [r4, #68]	; 0x44
 800e67a:	6422      	str	r2, [r4, #64]	; 0x40
 800e67c:	e7e3      	b.n	800e646 <GUITASK_CopyContext+0x12>
 800e67e:	f7ff ff45 	bl	800e50c <_GetTaskNo>
 800e682:	4b05      	ldr	r3, [pc, #20]	; (800e698 <GUITASK_CopyContext+0x64>)
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	237c      	movs	r3, #124	; 0x7c
 800e688:	fb03 2000 	mla	r0, r3, r0, r2
 800e68c:	4b03      	ldr	r3, [pc, #12]	; (800e69c <GUITASK_CopyContext+0x68>)
 800e68e:	3004      	adds	r0, #4
 800e690:	6018      	str	r0, [r3, #0]
 800e692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e696:	bf00      	nop
 800e698:	200003fc 	.word	0x200003fc
 800e69c:	20000018 	.word	0x20000018
 800e6a0:	20000024 	.word	0x20000024

0800e6a4 <GUI_GetTime>:
 800e6a4:	f7fb bc1a 	b.w	8009edc <GUI_X_GetTime>

0800e6a8 <GUI_Delay>:
 800e6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800e70c <GUI_Delay+0x64>
 800e6b2:	f7fb fc13 	bl	8009edc <GUI_X_GetTime>
 800e6b6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e710 <GUI_Delay+0x68>
 800e6ba:	4405      	add	r5, r0
 800e6bc:	f7fb fc0e 	bl	8009edc <GUI_X_GetTime>
 800e6c0:	1a2e      	subs	r6, r5, r0
 800e6c2:	2e00      	cmp	r6, #0
 800e6c4:	dd1f      	ble.n	800e706 <GUI_Delay+0x5e>
 800e6c6:	f7ff f8e5 	bl	800d894 <GUI_Exec>
 800e6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ce:	429e      	cmp	r6, r3
 800e6d0:	bfa8      	it	ge
 800e6d2:	461e      	movge	r6, r3
 800e6d4:	f7ff ff4c 	bl	800e570 <GUI_Lock>
 800e6d8:	f8d9 4000 	ldr.w	r4, [r9]
 800e6dc:	f7fe fe1e 	bl	800d31c <GUI_ALLOC_Lock>
 800e6e0:	4627      	mov	r7, r4
 800e6e2:	b11f      	cbz	r7, 800e6ec <GUI_Delay+0x44>
 800e6e4:	f7ff ff3a 	bl	800e55c <GUI_Unlock>
 800e6e8:	3f01      	subs	r7, #1
 800e6ea:	e7fa      	b.n	800e6e2 <GUI_Delay+0x3a>
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7fb fbf9 	bl	8009ee4 <GUI_X_Delay>
 800e6f2:	b11c      	cbz	r4, 800e6fc <GUI_Delay+0x54>
 800e6f4:	f7ff ff3c 	bl	800e570 <GUI_Lock>
 800e6f8:	3c01      	subs	r4, #1
 800e6fa:	e7fa      	b.n	800e6f2 <GUI_Delay+0x4a>
 800e6fc:	f7fe fe16 	bl	800d32c <GUI_ALLOC_Unlock>
 800e700:	f7ff ff2c 	bl	800e55c <GUI_Unlock>
 800e704:	e7da      	b.n	800e6bc <GUI_Delay+0x14>
 800e706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e70a:	bf00      	nop
 800e70c:	2000002c 	.word	0x2000002c
 800e710:	20000400 	.word	0x20000400

0800e714 <GUI_UC__GetCharCodeInc>:
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	4e08      	ldr	r6, [pc, #32]	; (800e738 <GUI_UC__GetCharCodeInc+0x24>)
 800e718:	4605      	mov	r5, r0
 800e71a:	6804      	ldr	r4, [r0, #0]
 800e71c:	6833      	ldr	r3, [r6, #0]
 800e71e:	4620      	mov	r0, r4
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4798      	blx	r3
 800e724:	6833      	ldr	r3, [r6, #0]
 800e726:	4607      	mov	r7, r0
 800e728:	4620      	mov	r0, r4
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	4798      	blx	r3
 800e72e:	4420      	add	r0, r4
 800e730:	6028      	str	r0, [r5, #0]
 800e732:	4638      	mov	r0, r7
 800e734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e736:	bf00      	nop
 800e738:	20022604 	.word	0x20022604

0800e73c <GUI_UC__NumChars2NumBytes>:
 800e73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73e:	4606      	mov	r6, r0
 800e740:	460d      	mov	r5, r1
 800e742:	2400      	movs	r4, #0
 800e744:	4f05      	ldr	r7, [pc, #20]	; (800e75c <GUI_UC__NumChars2NumBytes+0x20>)
 800e746:	b13d      	cbz	r5, 800e758 <GUI_UC__NumChars2NumBytes+0x1c>
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	4630      	mov	r0, r6
 800e74c:	3d01      	subs	r5, #1
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	4798      	blx	r3
 800e752:	4406      	add	r6, r0
 800e754:	4404      	add	r4, r0
 800e756:	e7f6      	b.n	800e746 <GUI_UC__NumChars2NumBytes+0xa>
 800e758:	4620      	mov	r0, r4
 800e75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e75c:	20022604 	.word	0x20022604

0800e760 <_GetCharCode>:
 800e760:	7800      	ldrb	r0, [r0, #0]
 800e762:	4770      	bx	lr

0800e764 <_GetCharSize>:
 800e764:	2001      	movs	r0, #1
 800e766:	4770      	bx	lr

0800e768 <_CalcSizeOfChar>:
 800e768:	2001      	movs	r0, #1
 800e76a:	4770      	bx	lr

0800e76c <_Encode>:
 800e76c:	7001      	strb	r1, [r0, #0]
 800e76e:	2001      	movs	r0, #1
 800e770:	4770      	bx	lr
	...

0800e774 <GUI_SignalEvent>:
 800e774:	4b02      	ldr	r3, [pc, #8]	; (800e780 <GUI_SignalEvent+0xc>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	b103      	cbz	r3, 800e77c <GUI_SignalEvent+0x8>
 800e77a:	4718      	bx	r3
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	20000410 	.word	0x20000410

0800e784 <GUI__MixColorsBulk>:
 800e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	b087      	sub	sp, #28
 800e78a:	4606      	mov	r6, r0
 800e78c:	460f      	mov	r7, r1
 800e78e:	4690      	mov	r8, r2
 800e790:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e794:	9304      	str	r3, [sp, #16]
 800e796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e798:	009d      	lsls	r5, r3, #2
 800e79a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e79c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e7a0:	9303      	str	r3, [sp, #12]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	9301      	str	r3, [sp, #4]
 800e7a6:	4b17      	ldr	r3, [pc, #92]	; (800e804 <GUI__MixColorsBulk+0x80>)
 800e7a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e7aa:	9901      	ldr	r1, [sp, #4]
 800e7ac:	4291      	cmp	r1, r2
 800e7ae:	d026      	beq.n	800e7fe <GUI__MixColorsBulk+0x7a>
 800e7b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800e7b4:	46c2      	mov	sl, r8
 800e7b6:	46b3      	mov	fp, r6
 800e7b8:	9702      	str	r7, [sp, #8]
 800e7ba:	f85b 0b04 	ldr.w	r0, [fp], #4
 800e7be:	9904      	ldr	r1, [sp, #16]
 800e7c0:	0e02      	lsrs	r2, r0, #24
 800e7c2:	9c02      	ldr	r4, [sp, #8]
 800e7c4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800e7c8:	9305      	str	r3, [sp, #20]
 800e7ca:	434a      	muls	r2, r1
 800e7cc:	21ff      	movs	r1, #255	; 0xff
 800e7ce:	fbb2 f2f1 	udiv	r2, r2, r1
 800e7d2:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7d6:	b2d2      	uxtb	r2, r2
 800e7d8:	9402      	str	r4, [sp, #8]
 800e7da:	681c      	ldr	r4, [r3, #0]
 800e7dc:	47a0      	blx	r4
 800e7de:	f1b9 0901 	subs.w	r9, r9, #1
 800e7e2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800e7e6:	9b05      	ldr	r3, [sp, #20]
 800e7e8:	f84a 0b04 	str.w	r0, [sl], #4
 800e7ec:	d1e5      	bne.n	800e7ba <GUI__MixColorsBulk+0x36>
 800e7ee:	9a03      	ldr	r2, [sp, #12]
 800e7f0:	442e      	add	r6, r5
 800e7f2:	44a8      	add	r8, r5
 800e7f4:	4417      	add	r7, r2
 800e7f6:	9a01      	ldr	r2, [sp, #4]
 800e7f8:	3201      	adds	r2, #1
 800e7fa:	9201      	str	r2, [sp, #4]
 800e7fc:	e7d4      	b.n	800e7a8 <GUI__MixColorsBulk+0x24>
 800e7fe:	b007      	add	sp, #28
 800e800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e804:	20000030 	.word	0x20000030

0800e808 <GUI__MixColors>:
 800e808:	0e0b      	lsrs	r3, r1, #24
 800e80a:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800e80e:	fb02 f203 	mul.w	r2, r2, r3
 800e812:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800e816:	bf08      	it	eq
 800e818:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800e81c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e820:	b530      	push	{r4, r5, lr}
 800e822:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800e826:	1a9d      	subs	r5, r3, r2
 800e828:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800e82c:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 800e830:	0a0c      	lsrs	r4, r1, #8
 800e832:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 800e836:	436c      	muls	r4, r5
 800e838:	fb02 4403 	mla	r4, r2, r3, r4
 800e83c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800e840:	4342      	muls	r2, r0
 800e842:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800e846:	fb05 2103 	mla	r1, r5, r3, r2
 800e84a:	0a09      	lsrs	r1, r1, #8
 800e84c:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 800e850:	4320      	orrs	r0, r4
 800e852:	bd30      	pop	{r4, r5, pc}

0800e854 <_OnExit>:
 800e854:	b510      	push	{r4, lr}
 800e856:	4c08      	ldr	r4, [pc, #32]	; (800e878 <_OnExit+0x24>)
 800e858:	6820      	ldr	r0, [r4, #0]
 800e85a:	f7fe fd25 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 800e85e:	6860      	ldr	r0, [r4, #4]
 800e860:	f7fe fd22 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 800e864:	68a0      	ldr	r0, [r4, #8]
 800e866:	f7fe fd1f 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 800e86a:	2300      	movs	r3, #0
 800e86c:	60a3      	str	r3, [r4, #8]
 800e86e:	6063      	str	r3, [r4, #4]
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	60e3      	str	r3, [r4, #12]
 800e874:	6123      	str	r3, [r4, #16]
 800e876:	bd10      	pop	{r4, pc}
 800e878:	20000418 	.word	0x20000418

0800e87c <GUI__GetAlphaBuffer>:
 800e87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e880:	4c29      	ldr	r4, [pc, #164]	; (800e928 <GUI__GetAlphaBuffer+0xac>)
 800e882:	461d      	mov	r5, r3
 800e884:	4606      	mov	r6, r0
 800e886:	4688      	mov	r8, r1
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	4617      	mov	r7, r2
 800e88c:	b93b      	cbnz	r3, 800e89e <GUI__GetAlphaBuffer+0x22>
 800e88e:	2301      	movs	r3, #1
 800e890:	4620      	mov	r0, r4
 800e892:	6123      	str	r3, [r4, #16]
 800e894:	4b25      	ldr	r3, [pc, #148]	; (800e92c <GUI__GetAlphaBuffer+0xb0>)
 800e896:	f840 3f14 	str.w	r3, [r0, #20]!
 800e89a:	f7ff fb11 	bl	800dec0 <GUI__RegisterExit>
 800e89e:	68e3      	ldr	r3, [r4, #12]
 800e8a0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800e928 <GUI__GetAlphaBuffer+0xac>
 800e8a4:	b943      	cbnz	r3, 800e8b8 <GUI__GetAlphaBuffer+0x3c>
 800e8a6:	4b22      	ldr	r3, [pc, #136]	; (800e930 <GUI__GetAlphaBuffer+0xb4>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f8c9 300c 	str.w	r3, [r9, #12]
 800e8ae:	b91b      	cbnz	r3, 800e8b8 <GUI__GetAlphaBuffer+0x3c>
 800e8b0:	f000 ffe0 	bl	800f874 <LCD_GetVXSizeMax>
 800e8b4:	f8c9 000c 	str.w	r0, [r9, #12]
 800e8b8:	b10d      	cbz	r5, 800e8be <GUI__GetAlphaBuffer+0x42>
 800e8ba:	68e3      	ldr	r3, [r4, #12]
 800e8bc:	602b      	str	r3, [r5, #0]
 800e8be:	b17e      	cbz	r6, 800e8e0 <GUI__GetAlphaBuffer+0x64>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	4d19      	ldr	r5, [pc, #100]	; (800e928 <GUI__GetAlphaBuffer+0xac>)
 800e8c4:	b943      	cbnz	r3, 800e8d8 <GUI__GetAlphaBuffer+0x5c>
 800e8c6:	68e8      	ldr	r0, [r5, #12]
 800e8c8:	0080      	lsls	r0, r0, #2
 800e8ca:	f7fe fdd9 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 800e8ce:	6028      	str	r0, [r5, #0]
 800e8d0:	fab0 f580 	clz	r5, r0
 800e8d4:	096d      	lsrs	r5, r5, #5
 800e8d6:	e000      	b.n	800e8da <GUI__GetAlphaBuffer+0x5e>
 800e8d8:	2500      	movs	r5, #0
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	6033      	str	r3, [r6, #0]
 800e8de:	e000      	b.n	800e8e2 <GUI__GetAlphaBuffer+0x66>
 800e8e0:	4635      	mov	r5, r6
 800e8e2:	f1b8 0f00 	cmp.w	r8, #0
 800e8e6:	d00d      	beq.n	800e904 <GUI__GetAlphaBuffer+0x88>
 800e8e8:	6863      	ldr	r3, [r4, #4]
 800e8ea:	4e0f      	ldr	r6, [pc, #60]	; (800e928 <GUI__GetAlphaBuffer+0xac>)
 800e8ec:	b93b      	cbnz	r3, 800e8fe <GUI__GetAlphaBuffer+0x82>
 800e8ee:	68f0      	ldr	r0, [r6, #12]
 800e8f0:	0080      	lsls	r0, r0, #2
 800e8f2:	f7fe fdc5 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	6070      	str	r0, [r6, #4]
 800e8fa:	bf08      	it	eq
 800e8fc:	2501      	moveq	r5, #1
 800e8fe:	6863      	ldr	r3, [r4, #4]
 800e900:	f8c8 3000 	str.w	r3, [r8]
 800e904:	b167      	cbz	r7, 800e920 <GUI__GetAlphaBuffer+0xa4>
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	4e07      	ldr	r6, [pc, #28]	; (800e928 <GUI__GetAlphaBuffer+0xac>)
 800e90a:	b93b      	cbnz	r3, 800e91c <GUI__GetAlphaBuffer+0xa0>
 800e90c:	68f0      	ldr	r0, [r6, #12]
 800e90e:	0080      	lsls	r0, r0, #2
 800e910:	f7fe fdb6 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 800e914:	2800      	cmp	r0, #0
 800e916:	60b0      	str	r0, [r6, #8]
 800e918:	bf08      	it	eq
 800e91a:	2501      	moveq	r5, #1
 800e91c:	68a3      	ldr	r3, [r4, #8]
 800e91e:	603b      	str	r3, [r7, #0]
 800e920:	4628      	mov	r0, r5
 800e922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e926:	bf00      	nop
 800e928:	20000418 	.word	0x20000418
 800e92c:	0800e855 	.word	0x0800e855
 800e930:	20022614 	.word	0x20022614

0800e934 <GUI__DoAlphaBlending>:
 800e934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e938:	b093      	sub	sp, #76	; 0x4c
 800e93a:	2400      	movs	r4, #0
 800e93c:	4692      	mov	sl, r2
 800e93e:	461e      	mov	r6, r3
 800e940:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800e942:	ab11      	add	r3, sp, #68	; 0x44
 800e944:	900a      	str	r0, [sp, #40]	; 0x28
 800e946:	4622      	mov	r2, r4
 800e948:	910b      	str	r1, [sp, #44]	; 0x2c
 800e94a:	a80f      	add	r0, sp, #60	; 0x3c
 800e94c:	603c      	str	r4, [r7, #0]
 800e94e:	a910      	add	r1, sp, #64	; 0x40
 800e950:	f7ff ff94 	bl	800e87c <GUI__GetAlphaBuffer>
 800e954:	4605      	mov	r5, r0
 800e956:	2800      	cmp	r0, #0
 800e958:	f040 80bd 	bne.w	800ead6 <GUI__DoAlphaBlending+0x1a2>
 800e95c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e95e:	4c60      	ldr	r4, [pc, #384]	; (800eae0 <GUI__DoAlphaBlending+0x1ac>)
 800e960:	42b3      	cmp	r3, r6
 800e962:	bfa8      	it	ge
 800e964:	4633      	movge	r3, r6
 800e966:	9309      	str	r3, [sp, #36]	; 0x24
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	7c58      	ldrb	r0, [r3, #17]
 800e96c:	4b5d      	ldr	r3, [pc, #372]	; (800eae4 <GUI__DoAlphaBlending+0x1b0>)
 800e96e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e972:	9307      	str	r3, [sp, #28]
 800e974:	691b      	ldr	r3, [r3, #16]
 800e976:	930c      	str	r3, [sp, #48]	; 0x30
 800e978:	f000 ff48 	bl	800f80c <GUI_GetBitsPerPixelEx>
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	9008      	str	r0, [sp, #32]
 800e980:	7c58      	ldrb	r0, [r3, #17]
 800e982:	f000 ff61 	bl	800f848 <GUI_GetpfIndex2ColorEx>
 800e986:	4b58      	ldr	r3, [pc, #352]	; (800eae8 <GUI__DoAlphaBlending+0x1b4>)
 800e988:	9003      	str	r0, [sp, #12]
 800e98a:	4298      	cmp	r0, r3
 800e98c:	d005      	beq.n	800e99a <GUI__DoAlphaBlending+0x66>
 800e98e:	4b57      	ldr	r3, [pc, #348]	; (800eaec <GUI__DoAlphaBlending+0x1b8>)
 800e990:	1ac3      	subs	r3, r0, r3
 800e992:	bf18      	it	ne
 800e994:	2301      	movne	r3, #1
 800e996:	9306      	str	r3, [sp, #24]
 800e998:	e000      	b.n	800e99c <GUI__DoAlphaBlending+0x68>
 800e99a:	9506      	str	r5, [sp, #24]
 800e99c:	2600      	movs	r6, #0
 800e99e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800e9a2:	4635      	mov	r5, r6
 800e9a4:	4653      	mov	r3, sl
 800e9a6:	f853 0b04 	ldr.w	r0, [r3], #4
 800e9aa:	930d      	str	r3, [sp, #52]	; 0x34
 800e9ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e9ae:	4798      	blx	r3
 800e9b0:	9004      	str	r0, [sp, #16]
 800e9b2:	0e03      	lsrs	r3, r0, #24
 800e9b4:	2bff      	cmp	r3, #255	; 0xff
 800e9b6:	9305      	str	r3, [sp, #20]
 800e9b8:	d07b      	beq.n	800eab2 <GUI__DoAlphaBlending+0x17e>
 800e9ba:	2d00      	cmp	r5, #0
 800e9bc:	d139      	bne.n	800ea32 <GUI__DoAlphaBlending+0xfe>
 800e9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9c2:	eb03 0906 	add.w	r9, r3, r6
 800e9c6:	4b46      	ldr	r3, [pc, #280]	; (800eae0 <GUI__DoAlphaBlending+0x1ac>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e9ce:	454b      	cmp	r3, r9
 800e9d0:	bfc4      	itt	gt
 800e9d2:	ebc9 0503 	rsbgt	r5, r9, r3
 800e9d6:	4699      	movgt	r9, r3
 800e9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9da:	19ac      	adds	r4, r5, r6
 800e9dc:	4648      	mov	r0, r9
 800e9de:	eb03 0802 	add.w	r8, r3, r2
 800e9e2:	9b07      	ldr	r3, [sp, #28]
 800e9e4:	00a4      	lsls	r4, r4, #2
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	f108 32ff 	add.w	r2, r8, #4294967295
 800e9ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9ee:	4423      	add	r3, r4
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f001 f889 	bl	800fb0c <GUI_ReadRectEx>
 800e9fa:	9b08      	ldr	r3, [sp, #32]
 800e9fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e9fe:	2b17      	cmp	r3, #23
 800ea00:	dc07      	bgt.n	800ea12 <GUI__DoAlphaBlending+0xde>
 800ea02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea04:	ebc5 010b 	rsb	r1, r5, fp
 800ea08:	9a08      	ldr	r2, [sp, #32]
 800ea0a:	4420      	add	r0, r4
 800ea0c:	f000 f90a 	bl	800ec24 <GUI__ExpandPixelIndicesEx>
 800ea10:	e001      	b.n	800ea16 <GUI__DoAlphaBlending+0xe2>
 800ea12:	9b06      	ldr	r3, [sp, #24]
 800ea14:	b90b      	cbnz	r3, 800ea1a <GUI__DoAlphaBlending+0xe6>
 800ea16:	2501      	movs	r5, #1
 800ea18:	e00b      	b.n	800ea32 <GUI__DoAlphaBlending+0xfe>
 800ea1a:	4404      	add	r4, r0
 800ea1c:	ebc9 0808 	rsb	r8, r9, r8
 800ea20:	6820      	ldr	r0, [r4, #0]
 800ea22:	9b03      	ldr	r3, [sp, #12]
 800ea24:	4798      	blx	r3
 800ea26:	f1b8 0801 	subs.w	r8, r8, #1
 800ea2a:	f844 0b04 	str.w	r0, [r4], #4
 800ea2e:	d1f7      	bne.n	800ea20 <GUI__DoAlphaBlending+0xec>
 800ea30:	e7f1      	b.n	800ea16 <GUI__DoAlphaBlending+0xe2>
 800ea32:	4b2f      	ldr	r3, [pc, #188]	; (800eaf0 <GUI__DoAlphaBlending+0x1bc>)
 800ea34:	00b4      	lsls	r4, r6, #2
 800ea36:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800ea3a:	f1b8 0f00 	cmp.w	r8, #0
 800ea3e:	d023      	beq.n	800ea88 <GUI__DoAlphaBlending+0x154>
 800ea40:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ea42:	465b      	mov	r3, fp
 800ea44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ea46:	4650      	mov	r0, sl
 800ea48:	192a      	adds	r2, r5, r4
 800ea4a:	4421      	add	r1, r4
 800ea4c:	9210      	str	r2, [sp, #64]	; 0x40
 800ea4e:	910f      	str	r1, [sp, #60]	; 0x3c
 800ea50:	47c0      	blx	r8
 800ea52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ea54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ea56:	2300      	movs	r3, #0
 800ea58:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 800ea5c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ea60:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 800ea64:	d102      	bne.n	800ea6c <GUI__DoAlphaBlending+0x138>
 800ea66:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800ea6a:	e004      	b.n	800ea76 <GUI__DoAlphaBlending+0x142>
 800ea6c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ea70:	bf08      	it	eq
 800ea72:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800ea76:	3301      	adds	r3, #1
 800ea78:	459b      	cmp	fp, r3
 800ea7a:	d1ed      	bne.n	800ea58 <GUI__DoAlphaBlending+0x124>
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	9510      	str	r5, [sp, #64]	; 0x40
 800ea80:	f043 0301 	orr.w	r3, r3, #1
 800ea84:	603b      	str	r3, [r7, #0]
 800ea86:	e024      	b.n	800ead2 <GUI__DoAlphaBlending+0x19e>
 800ea88:	9905      	ldr	r1, [sp, #20]
 800ea8a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800ea8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea90:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800ea94:	b919      	cbnz	r1, 800ea9e <GUI__DoAlphaBlending+0x16a>
 800ea96:	591b      	ldr	r3, [r3, r4]
 800ea98:	f848 3004 	str.w	r3, [r8, r4]
 800ea9c:	e011      	b.n	800eac2 <GUI__DoAlphaBlending+0x18e>
 800ea9e:	5919      	ldr	r1, [r3, r4]
 800eaa0:	9b04      	ldr	r3, [sp, #16]
 800eaa2:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 800eaa6:	4b13      	ldr	r3, [pc, #76]	; (800eaf4 <GUI__DoAlphaBlending+0x1c0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4798      	blx	r3
 800eaac:	f848 0004 	str.w	r0, [r8, r4]
 800eab0:	e003      	b.n	800eaba <GUI__DoAlphaBlending+0x186>
 800eab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eab4:	9a04      	ldr	r2, [sp, #16]
 800eab6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	f043 0301 	orr.w	r3, r3, #1
 800eac0:	603b      	str	r3, [r7, #0]
 800eac2:	f1bb 0b01 	subs.w	fp, fp, #1
 800eac6:	f106 0601 	add.w	r6, r6, #1
 800eaca:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800eace:	f47f af69 	bne.w	800e9a4 <GUI__DoAlphaBlending+0x70>
 800ead2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ead4:	e000      	b.n	800ead8 <GUI__DoAlphaBlending+0x1a4>
 800ead6:	4620      	mov	r0, r4
 800ead8:	b013      	add	sp, #76	; 0x4c
 800eada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eade:	bf00      	nop
 800eae0:	20000018 	.word	0x20000018
 800eae4:	2002260c 	.word	0x2002260c
 800eae8:	0800d0ff 	.word	0x0800d0ff
 800eaec:	0800d101 	.word	0x0800d101
 800eaf0:	20000418 	.word	0x20000418
 800eaf4:	20000030 	.word	0x20000030

0800eaf8 <GUI__AllocAlphaBuffer>:
 800eaf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eafa:	b908      	cbnz	r0, 800eb00 <GUI__AllocAlphaBuffer+0x8>
 800eafc:	4602      	mov	r2, r0
 800eafe:	e000      	b.n	800eb02 <GUI__AllocAlphaBuffer+0xa>
 800eb00:	aa03      	add	r2, sp, #12
 800eb02:	2300      	movs	r3, #0
 800eb04:	a902      	add	r1, sp, #8
 800eb06:	a801      	add	r0, sp, #4
 800eb08:	f7ff feb8 	bl	800e87c <GUI__GetAlphaBuffer>
 800eb0c:	b005      	add	sp, #20
 800eb0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800eb14 <GUI_SetFuncDrawAlpha>:
 800eb14:	b510      	push	{r4, lr}
 800eb16:	4b06      	ldr	r3, [pc, #24]	; (800eb30 <GUI_SetFuncDrawAlpha+0x1c>)
 800eb18:	4c06      	ldr	r4, [pc, #24]	; (800eb34 <GUI_SetFuncDrawAlpha+0x20>)
 800eb1a:	b120      	cbz	r0, 800eb26 <GUI_SetFuncDrawAlpha+0x12>
 800eb1c:	b119      	cbz	r1, 800eb26 <GUI_SetFuncDrawAlpha+0x12>
 800eb1e:	6020      	str	r0, [r4, #0]
 800eb20:	2000      	movs	r0, #0
 800eb22:	6019      	str	r1, [r3, #0]
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	2200      	movs	r2, #0
 800eb28:	2001      	movs	r0, #1
 800eb2a:	6022      	str	r2, [r4, #0]
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	bd10      	pop	{r4, pc}
 800eb30:	2002261c 	.word	0x2002261c
 800eb34:	20022620 	.word	0x20022620

0800eb38 <GUI__ExpandPixelIndices>:
 800eb38:	2a08      	cmp	r2, #8
 800eb3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb3c:	dd0d      	ble.n	800eb5a <GUI__ExpandPixelIndices+0x22>
 800eb3e:	2a10      	cmp	r2, #16
 800eb40:	dd00      	ble.n	800eb44 <GUI__ExpandPixelIndices+0xc>
 800eb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb44:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800eb48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800eb4c:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800eb50:	3901      	subs	r1, #1
 800eb52:	f840 2d04 	str.w	r2, [r0, #-4]!
 800eb56:	d1f9      	bne.n	800eb4c <GUI__ExpandPixelIndices+0x14>
 800eb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb5a:	3a01      	subs	r2, #1
 800eb5c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800eb60:	2a07      	cmp	r2, #7
 800eb62:	d85e      	bhi.n	800ec22 <GUI__ExpandPixelIndices+0xea>
 800eb64:	e8df f002 	tbb	[pc, r2]
 800eb68:	3a3a1f04 	.word	0x3a3a1f04
 800eb6c:	54545454 	.word	0x54545454
 800eb70:	424a      	negs	r2, r1
 800eb72:	1e4c      	subs	r4, r1, #1
 800eb74:	2601      	movs	r6, #1
 800eb76:	f002 0207 	and.w	r2, r2, #7
 800eb7a:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 800eb7e:	7805      	ldrb	r5, [r0, #0]
 800eb80:	fa06 f402 	lsl.w	r4, r6, r2
 800eb84:	3901      	subs	r1, #1
 800eb86:	ea04 0405 	and.w	r4, r4, r5
 800eb8a:	fa44 f402 	asr.w	r4, r4, r2
 800eb8e:	f102 0201 	add.w	r2, r2, #1
 800eb92:	f843 4d04 	str.w	r4, [r3, #-4]!
 800eb96:	f022 0407 	bic.w	r4, r2, #7
 800eb9a:	eba0 00e2 	sub.w	r0, r0, r2, asr #3
 800eb9e:	fa42 f204 	asr.w	r2, r2, r4
 800eba2:	d1ec      	bne.n	800eb7e <GUI__ExpandPixelIndices+0x46>
 800eba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba6:	424a      	negs	r2, r1
 800eba8:	1e4c      	subs	r4, r1, #1
 800ebaa:	2703      	movs	r7, #3
 800ebac:	f002 0203 	and.w	r2, r2, #3
 800ebb0:	eb00 00a4 	add.w	r0, r0, r4, asr #2
 800ebb4:	0056      	lsls	r6, r2, #1
 800ebb6:	7804      	ldrb	r4, [r0, #0]
 800ebb8:	3201      	adds	r2, #1
 800ebba:	3901      	subs	r1, #1
 800ebbc:	fa07 f506 	lsl.w	r5, r7, r6
 800ebc0:	eba0 00a2 	sub.w	r0, r0, r2, asr #2
 800ebc4:	ea04 0405 	and.w	r4, r4, r5
 800ebc8:	fa44 f406 	asr.w	r4, r4, r6
 800ebcc:	f843 4d04 	str.w	r4, [r3, #-4]!
 800ebd0:	f022 0403 	bic.w	r4, r2, #3
 800ebd4:	fa42 f204 	asr.w	r2, r2, r4
 800ebd8:	d1ec      	bne.n	800ebb4 <GUI__ExpandPixelIndices+0x7c>
 800ebda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebdc:	1e4c      	subs	r4, r1, #1
 800ebde:	f001 0201 	and.w	r2, r1, #1
 800ebe2:	270f      	movs	r7, #15
 800ebe4:	eb00 0064 	add.w	r0, r0, r4, asr #1
 800ebe8:	0096      	lsls	r6, r2, #2
 800ebea:	7804      	ldrb	r4, [r0, #0]
 800ebec:	3201      	adds	r2, #1
 800ebee:	3901      	subs	r1, #1
 800ebf0:	fa07 f506 	lsl.w	r5, r7, r6
 800ebf4:	eba0 0062 	sub.w	r0, r0, r2, asr #1
 800ebf8:	ea04 0405 	and.w	r4, r4, r5
 800ebfc:	fa44 f406 	asr.w	r4, r4, r6
 800ec00:	f843 4d04 	str.w	r4, [r3, #-4]!
 800ec04:	f022 0401 	bic.w	r4, r2, #1
 800ec08:	fa42 f204 	asr.w	r2, r2, r4
 800ec0c:	d1ec      	bne.n	800ebe8 <GUI__ExpandPixelIndices+0xb0>
 800ec0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec10:	4408      	add	r0, r1
 800ec12:	1a09      	subs	r1, r1, r0
 800ec14:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 800ec18:	42c8      	cmn	r0, r1
 800ec1a:	f843 2d04 	str.w	r2, [r3, #-4]!
 800ec1e:	d1f9      	bne.n	800ec14 <GUI__ExpandPixelIndices+0xdc>
 800ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec24 <GUI__ExpandPixelIndicesEx>:
 800ec24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec28:	1e0c      	subs	r4, r1, #0
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	f340 80b6 	ble.w	800ed9c <GUI__ExpandPixelIndicesEx+0x178>
 800ec30:	2a08      	cmp	r2, #8
 800ec32:	685e      	ldr	r6, [r3, #4]
 800ec34:	dd04      	ble.n	800ec40 <GUI__ExpandPixelIndicesEx+0x1c>
 800ec36:	2a10      	cmp	r2, #16
 800ec38:	f340 809a 	ble.w	800ed70 <GUI__ExpandPixelIndicesEx+0x14c>
 800ec3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec40:	3a01      	subs	r2, #1
 800ec42:	2a07      	cmp	r2, #7
 800ec44:	f200 80aa 	bhi.w	800ed9c <GUI__ExpandPixelIndicesEx+0x178>
 800ec48:	e8df f002 	tbb	[pc, r2]
 800ec4c:	59a82d04 	.word	0x59a82d04
 800ec50:	85a8a8a8 	.word	0x85a8a8a8
 800ec54:	1e67      	subs	r7, r4, #1
 800ec56:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800ec5a:	10fb      	asrs	r3, r7, #3
 800ec5c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec60:	f007 0707 	and.w	r7, r7, #7
 800ec64:	f103 39ff 	add.w	r9, r3, #4294967295
 800ec68:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800ec6c:	f815 a003 	ldrb.w	sl, [r5, r3]
 800ec70:	44a9      	add	r9, r5
 800ec72:	2580      	movs	r5, #128	; 0x80
 800ec74:	413d      	asrs	r5, r7
 800ec76:	b2ed      	uxtb	r5, r5
 800ec78:	f1c7 0307 	rsb	r3, r7, #7
 800ec7c:	ea05 000a 	and.w	r0, r5, sl
 800ec80:	4118      	asrs	r0, r3
 800ec82:	47b0      	blx	r6
 800ec84:	f848 0904 	str.w	r0, [r8], #-4
 800ec88:	b937      	cbnz	r7, 800ec98 <GUI__ExpandPixelIndicesEx+0x74>
 800ec8a:	f899 a000 	ldrb.w	sl, [r9]
 800ec8e:	2501      	movs	r5, #1
 800ec90:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec94:	2707      	movs	r7, #7
 800ec96:	e002      	b.n	800ec9e <GUI__ExpandPixelIndicesEx+0x7a>
 800ec98:	006d      	lsls	r5, r5, #1
 800ec9a:	3f01      	subs	r7, #1
 800ec9c:	b2ed      	uxtb	r5, r5
 800ec9e:	3c01      	subs	r4, #1
 800eca0:	d1ea      	bne.n	800ec78 <GUI__ExpandPixelIndicesEx+0x54>
 800eca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca6:	1e67      	subs	r7, r4, #1
 800eca8:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800ecac:	10bb      	asrs	r3, r7, #2
 800ecae:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecb2:	f007 0703 	and.w	r7, r7, #3
 800ecb6:	f103 39ff 	add.w	r9, r3, #4294967295
 800ecba:	f815 a003 	ldrb.w	sl, [r5, r3]
 800ecbe:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800ecc2:	23c0      	movs	r3, #192	; 0xc0
 800ecc4:	44a9      	add	r9, r5
 800ecc6:	007d      	lsls	r5, r7, #1
 800ecc8:	fa43 f505 	asr.w	r5, r3, r5
 800eccc:	b2ed      	uxtb	r5, r5
 800ecce:	007b      	lsls	r3, r7, #1
 800ecd0:	ea05 000a 	and.w	r0, r5, sl
 800ecd4:	f1c3 0306 	rsb	r3, r3, #6
 800ecd8:	4118      	asrs	r0, r3
 800ecda:	47b0      	blx	r6
 800ecdc:	f848 0904 	str.w	r0, [r8], #-4
 800ece0:	b937      	cbnz	r7, 800ecf0 <GUI__ExpandPixelIndicesEx+0xcc>
 800ece2:	2503      	movs	r5, #3
 800ece4:	f899 a000 	ldrb.w	sl, [r9]
 800ece8:	f109 39ff 	add.w	r9, r9, #4294967295
 800ecec:	462f      	mov	r7, r5
 800ecee:	e002      	b.n	800ecf6 <GUI__ExpandPixelIndicesEx+0xd2>
 800ecf0:	00ad      	lsls	r5, r5, #2
 800ecf2:	3f01      	subs	r7, #1
 800ecf4:	b2ed      	uxtb	r5, r5
 800ecf6:	3c01      	subs	r4, #1
 800ecf8:	d1e9      	bne.n	800ecce <GUI__ExpandPixelIndicesEx+0xaa>
 800ecfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecfe:	1e67      	subs	r7, r4, #1
 800ed00:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800ed04:	107b      	asrs	r3, r7, #1
 800ed06:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed0a:	f007 0701 	and.w	r7, r7, #1
 800ed0e:	f103 39ff 	add.w	r9, r3, #4294967295
 800ed12:	f815 a003 	ldrb.w	sl, [r5, r3]
 800ed16:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800ed1a:	23f0      	movs	r3, #240	; 0xf0
 800ed1c:	44a9      	add	r9, r5
 800ed1e:	00bd      	lsls	r5, r7, #2
 800ed20:	fa43 f505 	asr.w	r5, r3, r5
 800ed24:	b2ed      	uxtb	r5, r5
 800ed26:	00bb      	lsls	r3, r7, #2
 800ed28:	ea05 000a 	and.w	r0, r5, sl
 800ed2c:	f1c3 0304 	rsb	r3, r3, #4
 800ed30:	4118      	asrs	r0, r3
 800ed32:	47b0      	blx	r6
 800ed34:	f848 0904 	str.w	r0, [r8], #-4
 800ed38:	b937      	cbnz	r7, 800ed48 <GUI__ExpandPixelIndicesEx+0x124>
 800ed3a:	f899 a000 	ldrb.w	sl, [r9]
 800ed3e:	250f      	movs	r5, #15
 800ed40:	f109 39ff 	add.w	r9, r9, #4294967295
 800ed44:	2701      	movs	r7, #1
 800ed46:	e002      	b.n	800ed4e <GUI__ExpandPixelIndicesEx+0x12a>
 800ed48:	012d      	lsls	r5, r5, #4
 800ed4a:	2700      	movs	r7, #0
 800ed4c:	b2ed      	uxtb	r5, r5
 800ed4e:	3c01      	subs	r4, #1
 800ed50:	d1e9      	bne.n	800ed26 <GUI__ExpandPixelIndicesEx+0x102>
 800ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed56:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800ed5a:	4425      	add	r5, r4
 800ed5c:	1b64      	subs	r4, r4, r5
 800ed5e:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 800ed62:	47b0      	blx	r6
 800ed64:	f847 0d04 	str.w	r0, [r7, #-4]!
 800ed68:	42e5      	cmn	r5, r4
 800ed6a:	d1f8      	bne.n	800ed5e <GUI__ExpandPixelIndicesEx+0x13a>
 800ed6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed70:	695f      	ldr	r7, [r3, #20]
 800ed72:	b137      	cbz	r7, 800ed82 <GUI__ExpandPixelIndicesEx+0x15e>
 800ed74:	4622      	mov	r2, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	46bc      	mov	ip, r7
 800ed7a:	2302      	movs	r3, #2
 800ed7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed80:	4760      	bx	ip
 800ed82:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 800ed86:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800ed8a:	f837 0d02 	ldrh.w	r0, [r7, #-2]!
 800ed8e:	47b0      	blx	r6
 800ed90:	3c01      	subs	r4, #1
 800ed92:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ed96:	d1f8      	bne.n	800ed8a <GUI__ExpandPixelIndicesEx+0x166>
 800ed98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eda0 <GUI__DivideRound32>:
 800eda0:	b141      	cbz	r1, 800edb4 <GUI__DivideRound32+0x14>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	ea4f 0361 	mov.w	r3, r1, asr #1
 800eda8:	bfb4      	ite	lt
 800edaa:	1ac0      	sublt	r0, r0, r3
 800edac:	18c0      	addge	r0, r0, r3
 800edae:	fb90 f0f1 	sdiv	r0, r0, r1
 800edb2:	4770      	bx	lr
 800edb4:	4608      	mov	r0, r1
 800edb6:	4770      	bx	lr

0800edb8 <GUI__HandleEOLine>:
 800edb8:	b513      	push	{r0, r1, r4, lr}
 800edba:	6803      	ldr	r3, [r0, #0]
 800edbc:	4604      	mov	r4, r0
 800edbe:	a802      	add	r0, sp, #8
 800edc0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800edc4:	f7ff fca6 	bl	800e714 <GUI_UC__GetCharCodeInc>
 800edc8:	b120      	cbz	r0, 800edd4 <GUI__HandleEOLine+0x1c>
 800edca:	280a      	cmp	r0, #10
 800edcc:	d104      	bne.n	800edd8 <GUI__HandleEOLine+0x20>
 800edce:	9b01      	ldr	r3, [sp, #4]
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	e001      	b.n	800edd8 <GUI__HandleEOLine+0x20>
 800edd4:	2001      	movs	r0, #1
 800edd6:	e000      	b.n	800edda <GUI__HandleEOLine+0x22>
 800edd8:	2000      	movs	r0, #0
 800edda:	b002      	add	sp, #8
 800eddc:	bd10      	pop	{r4, pc}

0800edde <GUI__IntersectRect>:
 800edde:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ede2:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800edec:	bfb8      	it	lt
 800edee:	8003      	strhlt	r3, [r0, #0]
 800edf0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800edfa:	bfb8      	it	lt
 800edfc:	8043      	strhlt	r3, [r0, #2]
 800edfe:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800ee08:	bfc8      	it	gt
 800ee0a:	8083      	strhgt	r3, [r0, #4]
 800ee0c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	bfc8      	it	gt
 800ee14:	80c3      	strhgt	r3, [r0, #6]
 800ee16:	4770      	bx	lr

0800ee18 <GUI__IntersectRects>:
 800ee18:	b570      	push	{r4, r5, r6, lr}
 800ee1a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ee1e:	4606      	mov	r6, r0
 800ee20:	f9b2 5000 	ldrsh.w	r5, [r2]
 800ee24:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800ee28:	429d      	cmp	r5, r3
 800ee2a:	bfb8      	it	lt
 800ee2c:	461d      	movlt	r5, r3
 800ee2e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ee32:	8005      	strh	r5, [r0, #0]
 800ee34:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800ee38:	4283      	cmp	r3, r0
 800ee3a:	bfb8      	it	lt
 800ee3c:	4603      	movlt	r3, r0
 800ee3e:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 800ee42:	4284      	cmp	r4, r0
 800ee44:	8073      	strh	r3, [r6, #2]
 800ee46:	bfa8      	it	ge
 800ee48:	4604      	movge	r4, r0
 800ee4a:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800ee4e:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800ee52:	80b4      	strh	r4, [r6, #4]
 800ee54:	4282      	cmp	r2, r0
 800ee56:	bfa8      	it	ge
 800ee58:	4602      	movge	r2, r0
 800ee5a:	42a5      	cmp	r5, r4
 800ee5c:	80f2      	strh	r2, [r6, #6]
 800ee5e:	dc04      	bgt.n	800ee6a <GUI__IntersectRects+0x52>
 800ee60:	4293      	cmp	r3, r2
 800ee62:	bfcc      	ite	gt
 800ee64:	2000      	movgt	r0, #0
 800ee66:	2001      	movle	r0, #1
 800ee68:	bd70      	pop	{r4, r5, r6, pc}
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	bd70      	pop	{r4, r5, r6, pc}

0800ee6e <GUI__memset>:
 800ee6e:	b2c9      	uxtb	r1, r1
 800ee70:	4603      	mov	r3, r0
 800ee72:	b570      	push	{r4, r5, r6, lr}
 800ee74:	b12a      	cbz	r2, 800ee82 <GUI__memset+0x14>
 800ee76:	079c      	lsls	r4, r3, #30
 800ee78:	d003      	beq.n	800ee82 <GUI__memset+0x14>
 800ee7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee7e:	3a01      	subs	r2, #1
 800ee80:	e7f8      	b.n	800ee74 <GUI__memset+0x6>
 800ee82:	0895      	lsrs	r5, r2, #2
 800ee84:	d101      	bne.n	800ee8a <GUI__memset+0x1c>
 800ee86:	441a      	add	r2, r3
 800ee88:	e01a      	b.n	800eec0 <GUI__memset+0x52>
 800ee8a:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800ee8e:	f002 0203 	and.w	r2, r2, #3
 800ee92:	434c      	muls	r4, r1
 800ee94:	2d03      	cmp	r5, #3
 800ee96:	461e      	mov	r6, r3
 800ee98:	f103 0310 	add.w	r3, r3, #16
 800ee9c:	dd09      	ble.n	800eeb2 <GUI__memset+0x44>
 800ee9e:	f843 4c10 	str.w	r4, [r3, #-16]
 800eea2:	3d04      	subs	r5, #4
 800eea4:	f843 4c0c 	str.w	r4, [r3, #-12]
 800eea8:	f843 4c08 	str.w	r4, [r3, #-8]
 800eeac:	f843 4c04 	str.w	r4, [r3, #-4]
 800eeb0:	e7f0      	b.n	800ee94 <GUI__memset+0x26>
 800eeb2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800eeb6:	429e      	cmp	r6, r3
 800eeb8:	d0e5      	beq.n	800ee86 <GUI__memset+0x18>
 800eeba:	f846 4b04 	str.w	r4, [r6], #4
 800eebe:	e7fa      	b.n	800eeb6 <GUI__memset+0x48>
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d002      	beq.n	800eeca <GUI__memset+0x5c>
 800eec4:	f803 1b01 	strb.w	r1, [r3], #1
 800eec8:	e7fa      	b.n	800eec0 <GUI__memset+0x52>
 800eeca:	bd70      	pop	{r4, r5, r6, pc}

0800eecc <GUI__ReduceRect>:
 800eecc:	880b      	ldrh	r3, [r1, #0]
 800eece:	b292      	uxth	r2, r2
 800eed0:	4413      	add	r3, r2
 800eed2:	8003      	strh	r3, [r0, #0]
 800eed4:	888b      	ldrh	r3, [r1, #4]
 800eed6:	1a9b      	subs	r3, r3, r2
 800eed8:	8083      	strh	r3, [r0, #4]
 800eeda:	884b      	ldrh	r3, [r1, #2]
 800eedc:	4413      	add	r3, r2
 800eede:	8043      	strh	r3, [r0, #2]
 800eee0:	88cb      	ldrh	r3, [r1, #6]
 800eee2:	1a9a      	subs	r2, r3, r2
 800eee4:	80c2      	strh	r2, [r0, #6]
 800eee6:	4770      	bx	lr

0800eee8 <_SetDrawMode>:
 800eee8:	4b08      	ldr	r3, [pc, #32]	; (800ef0c <_SetDrawMode+0x24>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	7c1a      	ldrb	r2, [r3, #16]
 800eef0:	ea82 0100 	eor.w	r1, r2, r0
 800eef4:	0749      	lsls	r1, r1, #29
 800eef6:	d505      	bpl.n	800ef04 <_SetDrawMode+0x1c>
 800eef8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800eefa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800eefc:	6825      	ldr	r5, [r4, #0]
 800eefe:	680e      	ldr	r6, [r1, #0]
 800ef00:	6026      	str	r6, [r4, #0]
 800ef02:	600d      	str	r5, [r1, #0]
 800ef04:	7418      	strb	r0, [r3, #16]
 800ef06:	4610      	mov	r0, r2
 800ef08:	bd70      	pop	{r4, r5, r6, pc}
 800ef0a:	bf00      	nop
 800ef0c:	20000018 	.word	0x20000018

0800ef10 <LCD_SetDrawMode>:
 800ef10:	4b01      	ldr	r3, [pc, #4]	; (800ef18 <LCD_SetDrawMode+0x8>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	4718      	bx	r3
 800ef18:	20000040 	.word	0x20000040

0800ef1c <LCD_DrawPixel>:
 800ef1c:	4b15      	ldr	r3, [pc, #84]	; (800ef74 <LCD_DrawPixel+0x58>)
 800ef1e:	460a      	mov	r2, r1
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800ef26:	4291      	cmp	r1, r2
 800ef28:	b430      	push	{r4, r5}
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	dc20      	bgt.n	800ef70 <LCD_DrawPixel+0x54>
 800ef2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800ef32:	428a      	cmp	r2, r1
 800ef34:	dc1c      	bgt.n	800ef70 <LCD_DrawPixel+0x54>
 800ef36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800ef3a:	4281      	cmp	r1, r0
 800ef3c:	dc18      	bgt.n	800ef70 <LCD_DrawPixel+0x54>
 800ef3e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800ef42:	4288      	cmp	r0, r1
 800ef44:	dc14      	bgt.n	800ef70 <LCD_DrawPixel+0x54>
 800ef46:	7c19      	ldrb	r1, [r3, #16]
 800ef48:	7c58      	ldrb	r0, [r3, #17]
 800ef4a:	f011 0f01 	tst.w	r1, #1
 800ef4e:	490a      	ldr	r1, [pc, #40]	; (800ef78 <LCD_DrawPixel+0x5c>)
 800ef50:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800ef54:	d004      	beq.n	800ef60 <LCD_DrawPixel+0x44>
 800ef56:	68c3      	ldr	r3, [r0, #12]
 800ef58:	4621      	mov	r1, r4
 800ef5a:	69db      	ldr	r3, [r3, #28]
 800ef5c:	bc30      	pop	{r4, r5}
 800ef5e:	4718      	bx	r3
 800ef60:	68c1      	ldr	r1, [r0, #12]
 800ef62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef64:	698d      	ldr	r5, [r1, #24]
 800ef66:	4621      	mov	r1, r4
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	46ac      	mov	ip, r5
 800ef6c:	bc30      	pop	{r4, r5}
 800ef6e:	4760      	bx	ip
 800ef70:	bc30      	pop	{r4, r5}
 800ef72:	4770      	bx	lr
 800ef74:	20000018 	.word	0x20000018
 800ef78:	2002260c 	.word	0x2002260c

0800ef7c <LCD_DrawHLine>:
 800ef7c:	4b11      	ldr	r3, [pc, #68]	; (800efc4 <LCD_DrawHLine+0x48>)
 800ef7e:	b430      	push	{r4, r5}
 800ef80:	681c      	ldr	r4, [r3, #0]
 800ef82:	460d      	mov	r5, r1
 800ef84:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ef88:	428b      	cmp	r3, r1
 800ef8a:	dc19      	bgt.n	800efc0 <LCD_DrawHLine+0x44>
 800ef8c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ef90:	4299      	cmp	r1, r3
 800ef92:	dc15      	bgt.n	800efc0 <LCD_DrawHLine+0x44>
 800ef94:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800ef98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef9c:	4281      	cmp	r1, r0
 800ef9e:	bfb8      	it	lt
 800efa0:	4601      	movlt	r1, r0
 800efa2:	4293      	cmp	r3, r2
 800efa4:	bfa8      	it	ge
 800efa6:	4613      	movge	r3, r2
 800efa8:	4299      	cmp	r1, r3
 800efaa:	dc09      	bgt.n	800efc0 <LCD_DrawHLine+0x44>
 800efac:	7c60      	ldrb	r0, [r4, #17]
 800efae:	4a06      	ldr	r2, [pc, #24]	; (800efc8 <LCD_DrawHLine+0x4c>)
 800efb0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800efb4:	68c2      	ldr	r2, [r0, #12]
 800efb6:	6894      	ldr	r4, [r2, #8]
 800efb8:	462a      	mov	r2, r5
 800efba:	46a4      	mov	ip, r4
 800efbc:	bc30      	pop	{r4, r5}
 800efbe:	4760      	bx	ip
 800efc0:	bc30      	pop	{r4, r5}
 800efc2:	4770      	bx	lr
 800efc4:	20000018 	.word	0x20000018
 800efc8:	2002260c 	.word	0x2002260c

0800efcc <LCD_DrawVLine>:
 800efcc:	4b12      	ldr	r3, [pc, #72]	; (800f018 <LCD_DrawVLine+0x4c>)
 800efce:	b430      	push	{r4, r5}
 800efd0:	681c      	ldr	r4, [r3, #0]
 800efd2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800efd6:	4283      	cmp	r3, r0
 800efd8:	dc1b      	bgt.n	800f012 <LCD_DrawVLine+0x46>
 800efda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efde:	4298      	cmp	r0, r3
 800efe0:	dc17      	bgt.n	800f012 <LCD_DrawVLine+0x46>
 800efe2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800efe6:	4299      	cmp	r1, r3
 800efe8:	bfb8      	it	lt
 800efea:	4619      	movlt	r1, r3
 800efec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800eff0:	4293      	cmp	r3, r2
 800eff2:	bfa8      	it	ge
 800eff4:	4613      	movge	r3, r2
 800eff6:	4299      	cmp	r1, r3
 800eff8:	dc0b      	bgt.n	800f012 <LCD_DrawVLine+0x46>
 800effa:	4a08      	ldr	r2, [pc, #32]	; (800f01c <LCD_DrawVLine+0x50>)
 800effc:	7c64      	ldrb	r4, [r4, #17]
 800effe:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800f002:	68e2      	ldr	r2, [r4, #12]
 800f004:	68d5      	ldr	r5, [r2, #12]
 800f006:	460a      	mov	r2, r1
 800f008:	4601      	mov	r1, r0
 800f00a:	4620      	mov	r0, r4
 800f00c:	46ac      	mov	ip, r5
 800f00e:	bc30      	pop	{r4, r5}
 800f010:	4760      	bx	ip
 800f012:	bc30      	pop	{r4, r5}
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop
 800f018:	20000018 	.word	0x20000018
 800f01c:	2002260c 	.word	0x2002260c

0800f020 <LCD_FillRect>:
 800f020:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f022:	4c13      	ldr	r4, [pc, #76]	; (800f070 <LCD_FillRect+0x50>)
 800f024:	6824      	ldr	r4, [r4, #0]
 800f026:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 800f02a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800f02e:	4285      	cmp	r5, r0
 800f030:	bfb8      	it	lt
 800f032:	4605      	movlt	r5, r0
 800f034:	4296      	cmp	r6, r2
 800f036:	bfa8      	it	ge
 800f038:	4616      	movge	r6, r2
 800f03a:	42ae      	cmp	r6, r5
 800f03c:	db15      	blt.n	800f06a <LCD_FillRect+0x4a>
 800f03e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800f042:	428a      	cmp	r2, r1
 800f044:	bfb8      	it	lt
 800f046:	460a      	movlt	r2, r1
 800f048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f04c:	428b      	cmp	r3, r1
 800f04e:	bfa8      	it	ge
 800f050:	460b      	movge	r3, r1
 800f052:	429a      	cmp	r2, r3
 800f054:	dc09      	bgt.n	800f06a <LCD_FillRect+0x4a>
 800f056:	7c60      	ldrb	r0, [r4, #17]
 800f058:	4906      	ldr	r1, [pc, #24]	; (800f074 <LCD_FillRect+0x54>)
 800f05a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800f05e:	68c1      	ldr	r1, [r0, #12]
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	4633      	mov	r3, r6
 800f064:	690c      	ldr	r4, [r1, #16]
 800f066:	4629      	mov	r1, r5
 800f068:	47a0      	blx	r4
 800f06a:	b002      	add	sp, #8
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	bf00      	nop
 800f070:	20000018 	.word	0x20000018
 800f074:	2002260c 	.word	0x2002260c

0800f078 <LCD__DrawBitmap_1bpp>:
 800f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07c:	b08f      	sub	sp, #60	; 0x3c
 800f07e:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 800f24c <LCD__DrawBitmap_1bpp+0x1d4>
 800f082:	460c      	mov	r4, r1
 800f084:	4617      	mov	r7, r2
 800f086:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800f088:	f8de e000 	ldr.w	lr, [lr]
 800f08c:	9502      	str	r5, [sp, #8]
 800f08e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f090:	9007      	str	r0, [sp, #28]
 800f092:	9508      	str	r5, [sp, #32]
 800f094:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f096:	9301      	str	r3, [sp, #4]
 800f098:	9503      	str	r5, [sp, #12]
 800f09a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f09e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800f0a0:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800f0a4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800f0a6:	f1be 0f00 	cmp.w	lr, #0
 800f0aa:	d002      	beq.n	800f0b2 <LCD__DrawBitmap_1bpp+0x3a>
 800f0ac:	f8de 4000 	ldr.w	r4, [lr]
 800f0b0:	e054      	b.n	800f15c <LCD__DrawBitmap_1bpp+0xe4>
 800f0b2:	9b02      	ldr	r3, [sp, #8]
 800f0b4:	9a08      	ldr	r2, [sp, #32]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d154      	bne.n	800f166 <LCD__DrawBitmap_1bpp+0xee>
 800f0bc:	4b61      	ldr	r3, [pc, #388]	; (800f244 <LCD__DrawBitmap_1bpp+0x1cc>)
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f0c4:	1a53      	subs	r3, r2, r1
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	dd0a      	ble.n	800f0e0 <LCD__DrawBitmap_1bpp+0x68>
 800f0ca:	9901      	ldr	r1, [sp, #4]
 800f0cc:	ebc3 0e01 	rsb	lr, r3, r1
 800f0d0:	f1be 0f00 	cmp.w	lr, #0
 800f0d4:	f340 80b2 	ble.w	800f23c <LCD__DrawBitmap_1bpp+0x1c4>
 800f0d8:	9903      	ldr	r1, [sp, #12]
 800f0da:	fb01 6603 	mla	r6, r1, r3, r6
 800f0de:	e002      	b.n	800f0e6 <LCD__DrawBitmap_1bpp+0x6e>
 800f0e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f0e4:	460a      	mov	r2, r1
 800f0e6:	9b01      	ldr	r3, [sp, #4]
 800f0e8:	441c      	add	r4, r3
 800f0ea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800f0ee:	3c01      	subs	r4, #1
 800f0f0:	1ae4      	subs	r4, r4, r3
 800f0f2:	2c00      	cmp	r4, #0
 800f0f4:	dd05      	ble.n	800f102 <LCD__DrawBitmap_1bpp+0x8a>
 800f0f6:	ebc4 0e0e 	rsb	lr, r4, lr
 800f0fa:	f1be 0f00 	cmp.w	lr, #0
 800f0fe:	f340 809d 	ble.w	800f23c <LCD__DrawBitmap_1bpp+0x1c4>
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f108:	443b      	add	r3, r7
 800f10a:	3b01      	subs	r3, #1
 800f10c:	1a5b      	subs	r3, r3, r1
 800f10e:	2b00      	cmp	r3, #0
 800f110:	bfc8      	it	gt
 800f112:	1aff      	subgt	r7, r7, r3
 800f114:	9b07      	ldr	r3, [sp, #28]
 800f116:	1b59      	subs	r1, r3, r5
 800f118:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800f11c:	4299      	cmp	r1, r3
 800f11e:	da09      	bge.n	800f134 <LCD__DrawBitmap_1bpp+0xbc>
 800f120:	1a5b      	subs	r3, r3, r1
 800f122:	441d      	add	r5, r3
 800f124:	1aff      	subs	r7, r7, r3
 800f126:	f023 0307 	bic.w	r3, r3, #7
 800f12a:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 800f12e:	f005 0507 	and.w	r5, r5, #7
 800f132:	4419      	add	r1, r3
 800f134:	2f00      	cmp	r7, #0
 800f136:	f340 8081 	ble.w	800f23c <LCD__DrawBitmap_1bpp+0x1c4>
 800f13a:	7c40      	ldrb	r0, [r0, #17]
 800f13c:	4b42      	ldr	r3, [pc, #264]	; (800f248 <LCD__DrawBitmap_1bpp+0x1d0>)
 800f13e:	9c03      	ldr	r4, [sp, #12]
 800f140:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f144:	68c3      	ldr	r3, [r0, #12]
 800f146:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 800f14a:	951c      	str	r5, [sp, #112]	; 0x70
 800f14c:	961b      	str	r6, [sp, #108]	; 0x6c
 800f14e:	941a      	str	r4, [sp, #104]	; 0x68
 800f150:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800f154:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800f158:	685c      	ldr	r4, [r3, #4]
 800f15a:	463b      	mov	r3, r7
 800f15c:	46a4      	mov	ip, r4
 800f15e:	b00f      	add	sp, #60	; 0x3c
 800f160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f164:	4760      	bx	ip
 800f166:	f1ca 0308 	rsb	r3, sl, #8
 800f16a:	4675      	mov	r5, lr
 800f16c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800f244 <LCD__DrawBitmap_1bpp+0x1cc>
 800f170:	930b      	str	r3, [sp, #44]	; 0x2c
 800f172:	9b02      	ldr	r3, [sp, #8]
 800f174:	f8cd e014 	str.w	lr, [sp, #20]
 800f178:	3b01      	subs	r3, #1
 800f17a:	930d      	str	r3, [sp, #52]	; 0x34
 800f17c:	9b05      	ldr	r3, [sp, #20]
 800f17e:	9a01      	ldr	r2, [sp, #4]
 800f180:	4293      	cmp	r3, r2
 800f182:	da5b      	bge.n	800f23c <LCD__DrawBitmap_1bpp+0x1c4>
 800f184:	9b08      	ldr	r3, [sp, #32]
 800f186:	18e3      	adds	r3, r4, r3
 800f188:	9309      	str	r3, [sp, #36]	; 0x24
 800f18a:	3b01      	subs	r3, #1
 800f18c:	930a      	str	r3, [sp, #40]	; 0x28
 800f18e:	f8d9 3000 	ldr.w	r3, [r9]
 800f192:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f194:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f198:	428a      	cmp	r2, r1
 800f19a:	dc48      	bgt.n	800f22e <LCD__DrawBitmap_1bpp+0x1b6>
 800f19c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f1a0:	429c      	cmp	r4, r3
 800f1a2:	dc44      	bgt.n	800f22e <LCD__DrawBitmap_1bpp+0x1b6>
 800f1a4:	9b07      	ldr	r3, [sp, #28]
 800f1a6:	f04f 0800 	mov.w	r8, #0
 800f1aa:	9606      	str	r6, [sp, #24]
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	f8cd 8010 	str.w	r8, [sp, #16]
 800f1b2:	9b04      	ldr	r3, [sp, #16]
 800f1b4:	42bb      	cmp	r3, r7
 800f1b6:	da3a      	bge.n	800f22e <LCD__DrawBitmap_1bpp+0x1b6>
 800f1b8:	f1b8 0f00 	cmp.w	r8, #0
 800f1bc:	d105      	bne.n	800f1ca <LCD__DrawBitmap_1bpp+0x152>
 800f1be:	9b06      	ldr	r3, [sp, #24]
 800f1c0:	f04f 0808 	mov.w	r8, #8
 800f1c4:	781d      	ldrb	r5, [r3, #0]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	9306      	str	r3, [sp, #24]
 800f1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1cc:	ebca 0808 	rsb	r8, sl, r8
 800f1d0:	fa45 f303 	asr.w	r3, r5, r3
 800f1d4:	fa05 f50a 	lsl.w	r5, r5, sl
 800f1d8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800f1dc:	b2ed      	uxtb	r5, r5
 800f1de:	d104      	bne.n	800f1ea <LCD__DrawBitmap_1bpp+0x172>
 800f1e0:	f8d9 2000 	ldr.w	r2, [r9]
 800f1e4:	7c12      	ldrb	r2, [r2, #16]
 800f1e6:	0792      	lsls	r2, r2, #30
 800f1e8:	d419      	bmi.n	800f21e <LCD__DrawBitmap_1bpp+0x1a6>
 800f1ea:	f8d9 2000 	ldr.w	r2, [r9]
 800f1ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f1f0:	6810      	ldr	r0, [r2, #0]
 800f1f2:	900c      	str	r0, [sp, #48]	; 0x30
 800f1f4:	f1bb 0f00 	cmp.w	fp, #0
 800f1f8:	d002      	beq.n	800f200 <LCD__DrawBitmap_1bpp+0x188>
 800f1fa:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800f1fe:	e000      	b.n	800f202 <LCD__DrawBitmap_1bpp+0x18a>
 800f200:	b2db      	uxtb	r3, r3
 800f202:	6013      	str	r3, [r2, #0]
 800f204:	9900      	ldr	r1, [sp, #0]
 800f206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f20a:	440a      	add	r2, r1
 800f20c:	9800      	ldr	r0, [sp, #0]
 800f20e:	4621      	mov	r1, r4
 800f210:	f7ff ff06 	bl	800f020 <LCD_FillRect>
 800f214:	f8d9 3000 	ldr.w	r3, [r9]
 800f218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	9b04      	ldr	r3, [sp, #16]
 800f220:	9a02      	ldr	r2, [sp, #8]
 800f222:	3301      	adds	r3, #1
 800f224:	9304      	str	r3, [sp, #16]
 800f226:	9b00      	ldr	r3, [sp, #0]
 800f228:	4413      	add	r3, r2
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	e7c1      	b.n	800f1b2 <LCD__DrawBitmap_1bpp+0x13a>
 800f22e:	9b05      	ldr	r3, [sp, #20]
 800f230:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f232:	3301      	adds	r3, #1
 800f234:	9305      	str	r3, [sp, #20]
 800f236:	9b03      	ldr	r3, [sp, #12]
 800f238:	441e      	add	r6, r3
 800f23a:	e79f      	b.n	800f17c <LCD__DrawBitmap_1bpp+0x104>
 800f23c:	b00f      	add	sp, #60	; 0x3c
 800f23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f242:	bf00      	nop
 800f244:	20000018 	.word	0x20000018
 800f248:	2002260c 	.word	0x2002260c
 800f24c:	200225c8 	.word	0x200225c8

0800f250 <LCD_DrawBitmap>:
 800f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f254:	b08f      	sub	sp, #60	; 0x3c
 800f256:	f8df e218 	ldr.w	lr, [pc, #536]	; 800f470 <LCD_DrawBitmap+0x220>
 800f25a:	4605      	mov	r5, r0
 800f25c:	4690      	mov	r8, r2
 800f25e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800f260:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f262:	9402      	str	r4, [sp, #8]
 800f264:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800f266:	f8de e000 	ldr.w	lr, [lr]
 800f26a:	9408      	str	r4, [sp, #32]
 800f26c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800f26e:	9100      	str	r1, [sp, #0]
 800f270:	9403      	str	r4, [sp, #12]
 800f272:	9301      	str	r3, [sp, #4]
 800f274:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800f276:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f278:	9604      	str	r6, [sp, #16]
 800f27a:	f1be 0f00 	cmp.w	lr, #0
 800f27e:	d002      	beq.n	800f286 <LCD_DrawBitmap+0x36>
 800f280:	f8de 4000 	ldr.w	r4, [lr]
 800f284:	e07a      	b.n	800f37c <LCD_DrawBitmap+0x12c>
 800f286:	9b02      	ldr	r3, [sp, #8]
 800f288:	9a08      	ldr	r2, [sp, #32]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d17a      	bne.n	800f386 <LCD_DrawBitmap+0x136>
 800f290:	4b75      	ldr	r3, [pc, #468]	; (800f468 <LCD_DrawBitmap+0x218>)
 800f292:	9901      	ldr	r1, [sp, #4]
 800f294:	6818      	ldr	r0, [r3, #0]
 800f296:	9b00      	ldr	r3, [sp, #0]
 800f298:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	dd07      	ble.n	800f2b2 <LCD_DrawBitmap+0x62>
 800f2a2:	1ac9      	subs	r1, r1, r3
 800f2a4:	2900      	cmp	r1, #0
 800f2a6:	f340 80db 	ble.w	800f460 <LCD_DrawBitmap+0x210>
 800f2aa:	9e03      	ldr	r6, [sp, #12]
 800f2ac:	fb06 4403 	mla	r4, r6, r3, r4
 800f2b0:	e000      	b.n	800f2b4 <LCD_DrawBitmap+0x64>
 800f2b2:	9a00      	ldr	r2, [sp, #0]
 800f2b4:	e89d 0048 	ldmia.w	sp, {r3, r6}
 800f2b8:	441e      	add	r6, r3
 800f2ba:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800f2be:	3e01      	subs	r6, #1
 800f2c0:	1af6      	subs	r6, r6, r3
 800f2c2:	2e00      	cmp	r6, #0
 800f2c4:	dd03      	ble.n	800f2ce <LCD_DrawBitmap+0x7e>
 800f2c6:	1b89      	subs	r1, r1, r6
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	f340 80c9 	ble.w	800f460 <LCD_DrawBitmap+0x210>
 800f2ce:	eb05 0308 	add.w	r3, r5, r8
 800f2d2:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	1b9b      	subs	r3, r3, r6
 800f2da:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	bfc8      	it	gt
 800f2e2:	ebc3 0808 	rsbgt	r8, r3, r8
 800f2e6:	42b5      	cmp	r5, r6
 800f2e8:	da31      	bge.n	800f34e <LCD_DrawBitmap+0xfe>
 800f2ea:	1b73      	subs	r3, r6, r5
 800f2ec:	2f08      	cmp	r7, #8
 800f2ee:	ebc3 0808 	rsb	r8, r3, r8
 800f2f2:	d027      	beq.n	800f344 <LCD_DrawBitmap+0xf4>
 800f2f4:	dc0d      	bgt.n	800f312 <LCD_DrawBitmap+0xc2>
 800f2f6:	2f02      	cmp	r7, #2
 800f2f8:	d014      	beq.n	800f324 <LCD_DrawBitmap+0xd4>
 800f2fa:	2f04      	cmp	r7, #4
 800f2fc:	d01a      	beq.n	800f334 <LCD_DrawBitmap+0xe4>
 800f2fe:	2f01      	cmp	r7, #1
 800f300:	d126      	bne.n	800f350 <LCD_DrawBitmap+0x100>
 800f302:	f023 0607 	bic.w	r6, r3, #7
 800f306:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800f30a:	f003 0307 	and.w	r3, r3, #7
 800f30e:	4435      	add	r5, r6
 800f310:	e01e      	b.n	800f350 <LCD_DrawBitmap+0x100>
 800f312:	2f18      	cmp	r7, #24
 800f314:	d018      	beq.n	800f348 <LCD_DrawBitmap+0xf8>
 800f316:	2f20      	cmp	r7, #32
 800f318:	d016      	beq.n	800f348 <LCD_DrawBitmap+0xf8>
 800f31a:	2f10      	cmp	r7, #16
 800f31c:	d118      	bne.n	800f350 <LCD_DrawBitmap+0x100>
 800f31e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f322:	e013      	b.n	800f34c <LCD_DrawBitmap+0xfc>
 800f324:	f023 0603 	bic.w	r6, r3, #3
 800f328:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800f32c:	f003 0303 	and.w	r3, r3, #3
 800f330:	4435      	add	r5, r6
 800f332:	e00d      	b.n	800f350 <LCD_DrawBitmap+0x100>
 800f334:	f023 0601 	bic.w	r6, r3, #1
 800f338:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800f33c:	f003 0301 	and.w	r3, r3, #1
 800f340:	4435      	add	r5, r6
 800f342:	e005      	b.n	800f350 <LCD_DrawBitmap+0x100>
 800f344:	441c      	add	r4, r3
 800f346:	e001      	b.n	800f34c <LCD_DrawBitmap+0xfc>
 800f348:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f34c:	4635      	mov	r5, r6
 800f34e:	2300      	movs	r3, #0
 800f350:	f1b8 0f00 	cmp.w	r8, #0
 800f354:	f340 8084 	ble.w	800f460 <LCD_DrawBitmap+0x210>
 800f358:	7c46      	ldrb	r6, [r0, #17]
 800f35a:	4844      	ldr	r0, [pc, #272]	; (800f46c <LCD_DrawBitmap+0x21c>)
 800f35c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800f360:	9e04      	ldr	r6, [sp, #16]
 800f362:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800f366:	931c      	str	r3, [sp, #112]	; 0x70
 800f368:	9b03      	ldr	r3, [sp, #12]
 800f36a:	9118      	str	r1, [sp, #96]	; 0x60
 800f36c:	4629      	mov	r1, r5
 800f36e:	931a      	str	r3, [sp, #104]	; 0x68
 800f370:	4643      	mov	r3, r8
 800f372:	961d      	str	r6, [sp, #116]	; 0x74
 800f374:	941b      	str	r4, [sp, #108]	; 0x6c
 800f376:	9719      	str	r7, [sp, #100]	; 0x64
 800f378:	f8de 4004 	ldr.w	r4, [lr, #4]
 800f37c:	46a4      	mov	ip, r4
 800f37e:	b00f      	add	sp, #60	; 0x3c
 800f380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	4760      	bx	ip
 800f386:	f1c7 0308 	rsb	r3, r7, #8
 800f38a:	46f3      	mov	fp, lr
 800f38c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f468 <LCD_DrawBitmap+0x218>
 800f390:	930b      	str	r3, [sp, #44]	; 0x2c
 800f392:	9b02      	ldr	r3, [sp, #8]
 800f394:	f8cd e018 	str.w	lr, [sp, #24]
 800f398:	3b01      	subs	r3, #1
 800f39a:	930d      	str	r3, [sp, #52]	; 0x34
 800f39c:	9b06      	ldr	r3, [sp, #24]
 800f39e:	9a01      	ldr	r2, [sp, #4]
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	da5d      	bge.n	800f460 <LCD_DrawBitmap+0x210>
 800f3a4:	9a00      	ldr	r2, [sp, #0]
 800f3a6:	9b08      	ldr	r3, [sp, #32]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f3b0:	f8da 3000 	ldr.w	r3, [sl]
 800f3b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f3b6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f3ba:	428a      	cmp	r2, r1
 800f3bc:	dc48      	bgt.n	800f450 <LCD_DrawBitmap+0x200>
 800f3be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f3c2:	9a00      	ldr	r2, [sp, #0]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	dc43      	bgt.n	800f450 <LCD_DrawBitmap+0x200>
 800f3c8:	f04f 0900 	mov.w	r9, #0
 800f3cc:	462e      	mov	r6, r5
 800f3ce:	9407      	str	r4, [sp, #28]
 800f3d0:	f8cd 9014 	str.w	r9, [sp, #20]
 800f3d4:	9b05      	ldr	r3, [sp, #20]
 800f3d6:	4543      	cmp	r3, r8
 800f3d8:	da3a      	bge.n	800f450 <LCD_DrawBitmap+0x200>
 800f3da:	f1b9 0f00 	cmp.w	r9, #0
 800f3de:	d106      	bne.n	800f3ee <LCD_DrawBitmap+0x19e>
 800f3e0:	9b07      	ldr	r3, [sp, #28]
 800f3e2:	f04f 0908 	mov.w	r9, #8
 800f3e6:	f893 b000 	ldrb.w	fp, [r3]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	9307      	str	r3, [sp, #28]
 800f3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3f0:	fa0b f207 	lsl.w	r2, fp, r7
 800f3f4:	ebc7 0909 	rsb	r9, r7, r9
 800f3f8:	fa4b f303 	asr.w	r3, fp, r3
 800f3fc:	fa5f fb82 	uxtb.w	fp, r2
 800f400:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800f404:	d104      	bne.n	800f410 <LCD_DrawBitmap+0x1c0>
 800f406:	f8da 2000 	ldr.w	r2, [sl]
 800f40a:	7c12      	ldrb	r2, [r2, #16]
 800f40c:	0792      	lsls	r2, r2, #30
 800f40e:	d417      	bmi.n	800f440 <LCD_DrawBitmap+0x1f0>
 800f410:	f8da 2000 	ldr.w	r2, [sl]
 800f414:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f416:	6810      	ldr	r0, [r2, #0]
 800f418:	900c      	str	r0, [sp, #48]	; 0x30
 800f41a:	9804      	ldr	r0, [sp, #16]
 800f41c:	b110      	cbz	r0, 800f424 <LCD_DrawBitmap+0x1d4>
 800f41e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f422:	e000      	b.n	800f426 <LCD_DrawBitmap+0x1d6>
 800f424:	b2db      	uxtb	r3, r3
 800f426:	6013      	str	r3, [r2, #0]
 800f428:	4630      	mov	r0, r6
 800f42a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f42e:	4432      	add	r2, r6
 800f430:	9900      	ldr	r1, [sp, #0]
 800f432:	f7ff fdf5 	bl	800f020 <LCD_FillRect>
 800f436:	f8da 3000 	ldr.w	r3, [sl]
 800f43a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f43e:	601a      	str	r2, [r3, #0]
 800f440:	9b05      	ldr	r3, [sp, #20]
 800f442:	9a02      	ldr	r2, [sp, #8]
 800f444:	3301      	adds	r3, #1
 800f446:	9305      	str	r3, [sp, #20]
 800f448:	4633      	mov	r3, r6
 800f44a:	4413      	add	r3, r2
 800f44c:	461e      	mov	r6, r3
 800f44e:	e7c1      	b.n	800f3d4 <LCD_DrawBitmap+0x184>
 800f450:	9b06      	ldr	r3, [sp, #24]
 800f452:	3301      	adds	r3, #1
 800f454:	9306      	str	r3, [sp, #24]
 800f456:	9b03      	ldr	r3, [sp, #12]
 800f458:	441c      	add	r4, r3
 800f45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f45c:	9300      	str	r3, [sp, #0]
 800f45e:	e79d      	b.n	800f39c <LCD_DrawBitmap+0x14c>
 800f460:	b00f      	add	sp, #60	; 0x3c
 800f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f466:	bf00      	nop
 800f468:	20000018 	.word	0x20000018
 800f46c:	2002260c 	.word	0x2002260c
 800f470:	200225c8 	.word	0x200225c8

0800f474 <LCD_SetClipRectMax>:
 800f474:	4b04      	ldr	r3, [pc, #16]	; (800f488 <LCD_SetClipRectMax+0x14>)
 800f476:	6819      	ldr	r1, [r3, #0]
 800f478:	4b04      	ldr	r3, [pc, #16]	; (800f48c <LCD_SetClipRectMax+0x18>)
 800f47a:	7c4a      	ldrb	r2, [r1, #17]
 800f47c:	3108      	adds	r1, #8
 800f47e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f482:	68c3      	ldr	r3, [r0, #12]
 800f484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f486:	4718      	bx	r3
 800f488:	20000018 	.word	0x20000018
 800f48c:	2002260c 	.word	0x2002260c

0800f490 <emWin_LCD_Init>:
 800f490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f492:	f7ff ffef 	bl	800f474 <LCD_SetClipRectMax>
 800f496:	f000 f8bb 	bl	800f610 <LCD_InitColors>
 800f49a:	4604      	mov	r4, r0
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d144      	bne.n	800f52a <emWin_LCD_Init+0x9a>
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f7fe fd44 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800f4a8:	9001      	str	r0, [sp, #4]
 800f4aa:	b150      	cbz	r0, 800f4c2 <emWin_LCD_Init+0x32>
 800f4ac:	68c3      	ldr	r3, [r0, #12]
 800f4ae:	210c      	movs	r1, #12
 800f4b0:	a801      	add	r0, sp, #4
 800f4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b4:	4798      	blx	r3
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d034      	beq.n	800f526 <emWin_LCD_Init+0x96>
 800f4bc:	9801      	ldr	r0, [sp, #4]
 800f4be:	4798      	blx	r3
 800f4c0:	4304      	orrs	r4, r0
 800f4c2:	3501      	adds	r5, #1
 800f4c4:	2d02      	cmp	r5, #2
 800f4c6:	d1ec      	bne.n	800f4a2 <emWin_LCD_Init+0x12>
 800f4c8:	bb7c      	cbnz	r4, 800f52a <emWin_LCD_Init+0x9a>
 800f4ca:	f000 f8f7 	bl	800f6bc <LCD_InitLUT>
 800f4ce:	4b18      	ldr	r3, [pc, #96]	; (800f530 <emWin_LCD_Init+0xa0>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d101      	bne.n	800f4de <emWin_LCD_Init+0x4e>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e026      	b.n	800f52c <emWin_LCD_Init+0x9c>
 800f4de:	2401      	movs	r4, #1
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f7fe fd25 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800f4e6:	9001      	str	r0, [sp, #4]
 800f4e8:	b1c8      	cbz	r0, 800f51e <emWin_LCD_Init+0x8e>
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f7fe ff9c 	bl	800e428 <GUI_SelectLayer>
 800f4f0:	2004      	movs	r0, #4
 800f4f2:	f7ff fd0d 	bl	800ef10 <LCD_SetDrawMode>
 800f4f6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	4608      	mov	r0, r1
 800f500:	f7ff fd8e 	bl	800f020 <LCD_FillRect>
 800f504:	2000      	movs	r0, #0
 800f506:	f7ff fd03 	bl	800ef10 <LCD_SetDrawMode>
 800f50a:	9b01      	ldr	r3, [sp, #4]
 800f50c:	210e      	movs	r1, #14
 800f50e:	a801      	add	r0, sp, #4
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f514:	4798      	blx	r3
 800f516:	4603      	mov	r3, r0
 800f518:	b108      	cbz	r0, 800f51e <emWin_LCD_Init+0x8e>
 800f51a:	9801      	ldr	r0, [sp, #4]
 800f51c:	4798      	blx	r3
 800f51e:	f114 34ff 	adds.w	r4, r4, #4294967295
 800f522:	d2dd      	bcs.n	800f4e0 <emWin_LCD_Init+0x50>
 800f524:	e7d9      	b.n	800f4da <emWin_LCD_Init+0x4a>
 800f526:	2001      	movs	r0, #1
 800f528:	e000      	b.n	800f52c <emWin_LCD_Init+0x9c>
 800f52a:	4620      	mov	r0, r4
 800f52c:	b003      	add	sp, #12
 800f52e:	bd30      	pop	{r4, r5, pc}
 800f530:	20000014 	.word	0x20000014

0800f534 <LCD_Color2Index>:
 800f534:	4b04      	ldr	r3, [pc, #16]	; (800f548 <LCD_Color2Index+0x14>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	7c5a      	ldrb	r2, [r3, #17]
 800f53a:	4b04      	ldr	r3, [pc, #16]	; (800f54c <LCD_Color2Index+0x18>)
 800f53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4718      	bx	r3
 800f546:	bf00      	nop
 800f548:	20000018 	.word	0x20000018
 800f54c:	2002260c 	.word	0x2002260c

0800f550 <LCD_Index2Color>:
 800f550:	4b04      	ldr	r3, [pc, #16]	; (800f564 <LCD_Index2Color+0x14>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	7c5a      	ldrb	r2, [r3, #17]
 800f556:	4b04      	ldr	r3, [pc, #16]	; (800f568 <LCD_Index2Color+0x18>)
 800f558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	4718      	bx	r3
 800f562:	bf00      	nop
 800f564:	20000018 	.word	0x20000018
 800f568:	2002260c 	.word	0x2002260c

0800f56c <LCD_SetColorIndex>:
 800f56c:	4b04      	ldr	r3, [pc, #16]	; (800f580 <LCD_SetColorIndex+0x14>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	7c1a      	ldrb	r2, [r3, #16]
 800f572:	0752      	lsls	r2, r2, #29
 800f574:	bf4c      	ite	mi
 800f576:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800f578:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800f57a:	6018      	str	r0, [r3, #0]
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	20000018 	.word	0x20000018

0800f584 <_SetColor>:
 800f584:	b508      	push	{r3, lr}
 800f586:	4b06      	ldr	r3, [pc, #24]	; (800f5a0 <_SetColor+0x1c>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f58c:	4281      	cmp	r1, r0
 800f58e:	d006      	beq.n	800f59e <_SetColor+0x1a>
 800f590:	6318      	str	r0, [r3, #48]	; 0x30
 800f592:	f7ff ffcf 	bl	800f534 <LCD_Color2Index>
 800f596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f59a:	f7ff bfe7 	b.w	800f56c <LCD_SetColorIndex>
 800f59e:	bd08      	pop	{r3, pc}
 800f5a0:	20000018 	.word	0x20000018

0800f5a4 <LCD_SetBkColorIndex>:
 800f5a4:	4b04      	ldr	r3, [pc, #16]	; (800f5b8 <LCD_SetBkColorIndex+0x14>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	7c1a      	ldrb	r2, [r3, #16]
 800f5aa:	0752      	lsls	r2, r2, #29
 800f5ac:	bf4c      	ite	mi
 800f5ae:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800f5b0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800f5b2:	6018      	str	r0, [r3, #0]
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	20000018 	.word	0x20000018

0800f5bc <_SetBkColor>:
 800f5bc:	b508      	push	{r3, lr}
 800f5be:	4b06      	ldr	r3, [pc, #24]	; (800f5d8 <_SetBkColor+0x1c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f5c4:	4281      	cmp	r1, r0
 800f5c6:	d006      	beq.n	800f5d6 <_SetBkColor+0x1a>
 800f5c8:	6358      	str	r0, [r3, #52]	; 0x34
 800f5ca:	f7ff ffb3 	bl	800f534 <LCD_Color2Index>
 800f5ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f5d2:	f7ff bfe7 	b.w	800f5a4 <LCD_SetBkColorIndex>
 800f5d6:	bd08      	pop	{r3, pc}
 800f5d8:	20000018 	.word	0x20000018

0800f5dc <LCD_SetBkColor>:
 800f5dc:	4b01      	ldr	r3, [pc, #4]	; (800f5e4 <LCD_SetBkColor+0x8>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	4718      	bx	r3
 800f5e4:	20000040 	.word	0x20000040

0800f5e8 <LCD_SetColor>:
 800f5e8:	4b01      	ldr	r3, [pc, #4]	; (800f5f0 <LCD_SetColor+0x8>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4718      	bx	r3
 800f5f0:	20000040 	.word	0x20000040

0800f5f4 <_OnExit>:
 800f5f4:	b510      	push	{r4, lr}
 800f5f6:	4c04      	ldr	r4, [pc, #16]	; (800f608 <_OnExit+0x14>)
 800f5f8:	6820      	ldr	r0, [r4, #0]
 800f5fa:	f7fd fe55 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 800f5fe:	2300      	movs	r3, #0
 800f600:	4a02      	ldr	r2, [pc, #8]	; (800f60c <_OnExit+0x18>)
 800f602:	6023      	str	r3, [r4, #0]
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	bd10      	pop	{r4, pc}
 800f608:	20022624 	.word	0x20022624
 800f60c:	20000438 	.word	0x20000438

0800f610 <LCD_InitColors>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4d0a      	ldr	r5, [pc, #40]	; (800f63c <LCD_InitColors+0x2c>)
 800f614:	682c      	ldr	r4, [r5, #0]
 800f616:	b964      	cbnz	r4, 800f632 <LCD_InitColors+0x22>
 800f618:	4b09      	ldr	r3, [pc, #36]	; (800f640 <LCD_InitColors+0x30>)
 800f61a:	6818      	ldr	r0, [r3, #0]
 800f61c:	0080      	lsls	r0, r0, #2
 800f61e:	f7fd ff2f 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 800f622:	6028      	str	r0, [r5, #0]
 800f624:	b138      	cbz	r0, 800f636 <LCD_InitColors+0x26>
 800f626:	4807      	ldr	r0, [pc, #28]	; (800f644 <LCD_InitColors+0x34>)
 800f628:	4b07      	ldr	r3, [pc, #28]	; (800f648 <LCD_InitColors+0x38>)
 800f62a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f62e:	f7fe fc47 	bl	800dec0 <GUI__RegisterExit>
 800f632:	2000      	movs	r0, #0
 800f634:	bd38      	pop	{r3, r4, r5, pc}
 800f636:	2001      	movs	r0, #1
 800f638:	bd38      	pop	{r3, r4, r5, pc}
 800f63a:	bf00      	nop
 800f63c:	20022624 	.word	0x20022624
 800f640:	20000044 	.word	0x20000044
 800f644:	20000438 	.word	0x20000438
 800f648:	0800f5f5 	.word	0x0800f5f5

0800f64c <LCD_GetpPalConvTableUncached>:
 800f64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f650:	4604      	mov	r4, r0
 800f652:	b318      	cbz	r0, 800f69c <LCD_GetpPalConvTableUncached+0x50>
 800f654:	6887      	ldr	r7, [r0, #8]
 800f656:	b31f      	cbz	r7, 800f6a0 <LCD_GetpPalConvTableUncached+0x54>
 800f658:	4d14      	ldr	r5, [pc, #80]	; (800f6ac <LCD_GetpPalConvTableUncached+0x60>)
 800f65a:	6828      	ldr	r0, [r5, #0]
 800f65c:	b320      	cbz	r0, 800f6a8 <LCD_GetpPalConvTableUncached+0x5c>
 800f65e:	6822      	ldr	r2, [r4, #0]
 800f660:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f664:	dc1f      	bgt.n	800f6a6 <LCD_GetpPalConvTableUncached+0x5a>
 800f666:	4b12      	ldr	r3, [pc, #72]	; (800f6b0 <LCD_GetpPalConvTableUncached+0x64>)
 800f668:	2600      	movs	r6, #0
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	bfa8      	it	ge
 800f670:	461a      	movge	r2, r3
 800f672:	4690      	mov	r8, r2
 800f674:	4546      	cmp	r6, r8
 800f676:	da09      	bge.n	800f68c <LCD_GetpPalConvTableUncached+0x40>
 800f678:	f8d5 9000 	ldr.w	r9, [r5]
 800f67c:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 800f680:	f7ff ff58 	bl	800f534 <LCD_Color2Index>
 800f684:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 800f688:	3601      	adds	r6, #1
 800f68a:	e7f3      	b.n	800f674 <LCD_GetpPalConvTableUncached+0x28>
 800f68c:	4b09      	ldr	r3, [pc, #36]	; (800f6b4 <LCD_GetpPalConvTableUncached+0x68>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	b10b      	cbz	r3, 800f696 <LCD_GetpPalConvTableUncached+0x4a>
 800f692:	4620      	mov	r0, r4
 800f694:	4798      	blx	r3
 800f696:	6828      	ldr	r0, [r5, #0]
 800f698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ac:	20022624 	.word	0x20022624
 800f6b0:	20000044 	.word	0x20000044
 800f6b4:	20000438 	.word	0x20000438

0800f6b8 <LCD_GetpPalConvTableBM>:
 800f6b8:	f7ff bfc8 	b.w	800f64c <LCD_GetpPalConvTableUncached>

0800f6bc <LCD_InitLUT>:
 800f6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c0:	4e1d      	ldr	r6, [pc, #116]	; (800f738 <LCD_InitLUT+0x7c>)
 800f6c2:	f000 f942 	bl	800f94a <LCD_GetNumLayers>
 800f6c6:	2400      	movs	r4, #0
 800f6c8:	4680      	mov	r8, r0
 800f6ca:	46b1      	mov	r9, r6
 800f6cc:	f8df a070 	ldr.w	sl, [pc, #112]	; 800f740 <LCD_InitLUT+0x84>
 800f6d0:	4544      	cmp	r4, r8
 800f6d2:	da2d      	bge.n	800f730 <LCD_InitLUT+0x74>
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	f7fe fc2b 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800f6da:	b338      	cbz	r0, 800f72c <LCD_InitLUT+0x70>
 800f6dc:	6833      	ldr	r3, [r6, #0]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f893 b011 	ldrb.w	fp, [r3, #17]
 800f6e4:	745c      	strb	r4, [r3, #17]
 800f6e6:	f000 f869 	bl	800f7bc <LCD_GetBitsPerPixelEx>
 800f6ea:	2808      	cmp	r0, #8
 800f6ec:	dd04      	ble.n	800f6f8 <LCD_InitLUT+0x3c>
 800f6ee:	f8d9 3000 	ldr.w	r3, [r9]
 800f6f2:	f883 b011 	strb.w	fp, [r3, #17]
 800f6f6:	e019      	b.n	800f72c <LCD_InitLUT+0x70>
 800f6f8:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800f6fc:	691a      	ldr	r2, [r3, #16]
 800f6fe:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <LCD_InitLUT+0x80>)
 800f700:	429a      	cmp	r2, r3
 800f702:	d0f4      	beq.n	800f6ee <LCD_InitLUT+0x32>
 800f704:	4620      	mov	r0, r4
 800f706:	2500      	movs	r5, #0
 800f708:	f000 f85b 	bl	800f7c2 <LCD_GetNumColorsEx>
 800f70c:	4603      	mov	r3, r0
 800f70e:	429d      	cmp	r5, r3
 800f710:	daed      	bge.n	800f6ee <LCD_InitLUT+0x32>
 800f712:	b2ef      	uxtb	r7, r5
 800f714:	9301      	str	r3, [sp, #4]
 800f716:	3501      	adds	r5, #1
 800f718:	4638      	mov	r0, r7
 800f71a:	f7ff ff19 	bl	800f550 <LCD_Index2Color>
 800f71e:	4639      	mov	r1, r7
 800f720:	4602      	mov	r2, r0
 800f722:	4620      	mov	r0, r4
 800f724:	f000 fa73 	bl	800fc0e <LCD_SetLUTEntryEx>
 800f728:	9b01      	ldr	r3, [sp, #4]
 800f72a:	e7f0      	b.n	800f70e <LCD_InitLUT+0x52>
 800f72c:	3401      	adds	r4, #1
 800f72e:	e7cf      	b.n	800f6d0 <LCD_InitLUT+0x14>
 800f730:	b003      	add	sp, #12
 800f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f736:	bf00      	nop
 800f738:	20000018 	.word	0x20000018
 800f73c:	0801c2fc 	.word	0x0801c2fc
 800f740:	2002260c 	.word	0x2002260c

0800f744 <LCD_GetBkColorIndex>:
 800f744:	4b02      	ldr	r3, [pc, #8]	; (800f750 <LCD_GetBkColorIndex+0xc>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f74a:	6818      	ldr	r0, [r3, #0]
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	20000018 	.word	0x20000018

0800f754 <LCD_GetColorIndex>:
 800f754:	4b02      	ldr	r3, [pc, #8]	; (800f760 <LCD_GetColorIndex+0xc>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f75a:	6818      	ldr	r0, [r3, #0]
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	20000018 	.word	0x20000018

0800f764 <_GetDevProp>:
 800f764:	2801      	cmp	r0, #1
 800f766:	b510      	push	{r4, lr}
 800f768:	460c      	mov	r4, r1
 800f76a:	dc08      	bgt.n	800f77e <_GetDevProp+0x1a>
 800f76c:	f7fe fbe0 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800f770:	b128      	cbz	r0, 800f77e <_GetDevProp+0x1a>
 800f772:	68c3      	ldr	r3, [r0, #12]
 800f774:	4621      	mov	r1, r4
 800f776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f77c:	4718      	bx	r3
 800f77e:	2000      	movs	r0, #0
 800f780:	bd10      	pop	{r4, pc}

0800f782 <_GetMaxValue>:
 800f782:	b538      	push	{r3, r4, r5, lr}
 800f784:	4601      	mov	r1, r0
 800f786:	4605      	mov	r5, r0
 800f788:	2001      	movs	r0, #1
 800f78a:	f7ff ffeb 	bl	800f764 <_GetDevProp>
 800f78e:	4604      	mov	r4, r0
 800f790:	4629      	mov	r1, r5
 800f792:	2000      	movs	r0, #0
 800f794:	f7ff ffe6 	bl	800f764 <_GetDevProp>
 800f798:	42a0      	cmp	r0, r4
 800f79a:	bfb8      	it	lt
 800f79c:	4620      	movlt	r0, r4
 800f79e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f7a2:	bd38      	pop	{r3, r4, r5, pc}

0800f7a4 <LCD_GetXSizeEx>:
 800f7a4:	2101      	movs	r1, #1
 800f7a6:	f7ff bfdd 	b.w	800f764 <_GetDevProp>

0800f7aa <LCD_GetYSizeEx>:
 800f7aa:	2102      	movs	r1, #2
 800f7ac:	f7ff bfda 	b.w	800f764 <_GetDevProp>

0800f7b0 <LCD_GetVXSizeEx>:
 800f7b0:	2103      	movs	r1, #3
 800f7b2:	f7ff bfd7 	b.w	800f764 <_GetDevProp>

0800f7b6 <LCD_GetVYSizeEx>:
 800f7b6:	2104      	movs	r1, #4
 800f7b8:	f7ff bfd4 	b.w	800f764 <_GetDevProp>

0800f7bc <LCD_GetBitsPerPixelEx>:
 800f7bc:	2108      	movs	r1, #8
 800f7be:	f7ff bfd1 	b.w	800f764 <_GetDevProp>

0800f7c2 <LCD_GetNumColorsEx>:
 800f7c2:	2109      	movs	r1, #9
 800f7c4:	f7ff bfce 	b.w	800f764 <_GetDevProp>

0800f7c8 <LCD_GetMirrorXEx>:
 800f7c8:	210c      	movs	r1, #12
 800f7ca:	f7ff bfcb 	b.w	800f764 <_GetDevProp>

0800f7ce <LCD_GetMirrorYEx>:
 800f7ce:	210d      	movs	r1, #13
 800f7d0:	f7ff bfc8 	b.w	800f764 <_GetDevProp>

0800f7d4 <LCD_GetSwapXYEx>:
 800f7d4:	210e      	movs	r1, #14
 800f7d6:	f7ff bfc5 	b.w	800f764 <_GetDevProp>
	...

0800f7dc <LCD_GetXSize>:
 800f7dc:	4b02      	ldr	r3, [pc, #8]	; (800f7e8 <LCD_GetXSize+0xc>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	7c58      	ldrb	r0, [r3, #17]
 800f7e2:	f7ff bfdf 	b.w	800f7a4 <LCD_GetXSizeEx>
 800f7e6:	bf00      	nop
 800f7e8:	20000018 	.word	0x20000018

0800f7ec <LCD_GetYSize>:
 800f7ec:	4b02      	ldr	r3, [pc, #8]	; (800f7f8 <LCD_GetYSize+0xc>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	7c58      	ldrb	r0, [r3, #17]
 800f7f2:	f7ff bfda 	b.w	800f7aa <LCD_GetYSizeEx>
 800f7f6:	bf00      	nop
 800f7f8:	20000018 	.word	0x20000018

0800f7fc <LCD_GetNumColors>:
 800f7fc:	4b02      	ldr	r3, [pc, #8]	; (800f808 <LCD_GetNumColors+0xc>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	7c58      	ldrb	r0, [r3, #17]
 800f802:	f7ff bfde 	b.w	800f7c2 <LCD_GetNumColorsEx>
 800f806:	bf00      	nop
 800f808:	20000018 	.word	0x20000018

0800f80c <GUI_GetBitsPerPixelEx>:
 800f80c:	4b03      	ldr	r3, [pc, #12]	; (800f81c <GUI_GetBitsPerPixelEx+0x10>)
 800f80e:	2108      	movs	r1, #8
 800f810:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f814:	68c3      	ldr	r3, [r0, #12]
 800f816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f818:	4718      	bx	r3
 800f81a:	bf00      	nop
 800f81c:	2002260c 	.word	0x2002260c

0800f820 <LCD_GetPaletteEx>:
 800f820:	b510      	push	{r4, lr}
 800f822:	f7fe fb85 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800f826:	b128      	cbz	r0, 800f834 <LCD_GetPaletteEx+0x14>
 800f828:	68c3      	ldr	r3, [r0, #12]
 800f82a:	2102      	movs	r1, #2
 800f82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f832:	4718      	bx	r3
 800f834:	bd10      	pop	{r4, pc}
	...

0800f838 <LCD_GetPalette>:
 800f838:	4b02      	ldr	r3, [pc, #8]	; (800f844 <LCD_GetPalette+0xc>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	7c58      	ldrb	r0, [r3, #17]
 800f83e:	f7ff bfef 	b.w	800f820 <LCD_GetPaletteEx>
 800f842:	bf00      	nop
 800f844:	20000018 	.word	0x20000018

0800f848 <GUI_GetpfIndex2ColorEx>:
 800f848:	4b02      	ldr	r3, [pc, #8]	; (800f854 <GUI_GetpfIndex2ColorEx+0xc>)
 800f84a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	6858      	ldr	r0, [r3, #4]
 800f852:	4770      	bx	lr
 800f854:	2002260c 	.word	0x2002260c

0800f858 <GUI_GetpfColor2IndexEx>:
 800f858:	4b02      	ldr	r3, [pc, #8]	; (800f864 <GUI_GetpfColor2IndexEx+0xc>)
 800f85a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f85e:	691b      	ldr	r3, [r3, #16]
 800f860:	6818      	ldr	r0, [r3, #0]
 800f862:	4770      	bx	lr
 800f864:	2002260c 	.word	0x2002260c

0800f868 <LCD_GetXSizeMax>:
 800f868:	2001      	movs	r0, #1
 800f86a:	f7ff bf8a 	b.w	800f782 <_GetMaxValue>

0800f86e <LCD_GetYSizeMax>:
 800f86e:	2002      	movs	r0, #2
 800f870:	f7ff bf87 	b.w	800f782 <_GetMaxValue>

0800f874 <LCD_GetVXSizeMax>:
 800f874:	2003      	movs	r0, #3
 800f876:	f7ff bf84 	b.w	800f782 <_GetMaxValue>
	...

0800f87c <LCD_SetDisplaySize>:
 800f87c:	4b01      	ldr	r3, [pc, #4]	; (800f884 <LCD_SetDisplaySize+0x8>)
 800f87e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f882:	4770      	bx	lr
 800f884:	20000444 	.word	0x20000444

0800f888 <LCD_GetXSizeDisplay>:
 800f888:	4b01      	ldr	r3, [pc, #4]	; (800f890 <LCD_GetXSizeDisplay+0x8>)
 800f88a:	6818      	ldr	r0, [r3, #0]
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	20000444 	.word	0x20000444

0800f894 <LCD_GetYSizeDisplay>:
 800f894:	4b01      	ldr	r3, [pc, #4]	; (800f89c <LCD_GetYSizeDisplay+0x8>)
 800f896:	6858      	ldr	r0, [r3, #4]
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	20000444 	.word	0x20000444

0800f8a0 <LCD__GetBPP>:
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d03b      	beq.n	800f91c <LCD__GetBPP+0x7c>
 800f8a4:	f030 0301 	bics.w	r3, r0, #1
 800f8a8:	d029      	beq.n	800f8fe <LCD__GetBPP+0x5e>
 800f8aa:	f030 0303 	bics.w	r3, r0, #3
 800f8ae:	d028      	beq.n	800f902 <LCD__GetBPP+0x62>
 800f8b0:	f030 0307 	bics.w	r3, r0, #7
 800f8b4:	d027      	beq.n	800f906 <LCD__GetBPP+0x66>
 800f8b6:	f030 030f 	bics.w	r3, r0, #15
 800f8ba:	d026      	beq.n	800f90a <LCD__GetBPP+0x6a>
 800f8bc:	f030 031f 	bics.w	r3, r0, #31
 800f8c0:	d025      	beq.n	800f90e <LCD__GetBPP+0x6e>
 800f8c2:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800f8c6:	d024      	beq.n	800f912 <LCD__GetBPP+0x72>
 800f8c8:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800f8cc:	f023 0301 	bic.w	r3, r3, #1
 800f8d0:	b30b      	cbz	r3, 800f916 <LCD__GetBPP+0x76>
 800f8d2:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800f8d6:	f023 030f 	bic.w	r3, r3, #15
 800f8da:	b1e3      	cbz	r3, 800f916 <LCD__GetBPP+0x76>
 800f8dc:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800f8e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8e4:	b1bb      	cbz	r3, 800f916 <LCD__GetBPP+0x76>
 800f8e6:	0c03      	lsrs	r3, r0, #16
 800f8e8:	041b      	lsls	r3, r3, #16
 800f8ea:	b1a3      	cbz	r3, 800f916 <LCD__GetBPP+0x76>
 800f8ec:	0c83      	lsrs	r3, r0, #18
 800f8ee:	049b      	lsls	r3, r3, #18
 800f8f0:	b19b      	cbz	r3, 800f91a <LCD__GetBPP+0x7a>
 800f8f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f8f6:	bf0c      	ite	eq
 800f8f8:	2018      	moveq	r0, #24
 800f8fa:	2020      	movne	r0, #32
 800f8fc:	4770      	bx	lr
 800f8fe:	2001      	movs	r0, #1
 800f900:	4770      	bx	lr
 800f902:	2002      	movs	r0, #2
 800f904:	4770      	bx	lr
 800f906:	2003      	movs	r0, #3
 800f908:	4770      	bx	lr
 800f90a:	2004      	movs	r0, #4
 800f90c:	4770      	bx	lr
 800f90e:	2005      	movs	r0, #5
 800f910:	4770      	bx	lr
 800f912:	2008      	movs	r0, #8
 800f914:	4770      	bx	lr
 800f916:	2010      	movs	r0, #16
 800f918:	4770      	bx	lr
 800f91a:	2012      	movs	r0, #18
 800f91c:	4770      	bx	lr

0800f91e <LCD__GetBPPDevice>:
 800f91e:	b508      	push	{r3, lr}
 800f920:	f7ff ffbe 	bl	800f8a0 <LCD__GetBPP>
 800f924:	2801      	cmp	r0, #1
 800f926:	d00f      	beq.n	800f948 <LCD__GetBPPDevice+0x2a>
 800f928:	1e83      	subs	r3, r0, #2
 800f92a:	2b06      	cmp	r3, #6
 800f92c:	d909      	bls.n	800f942 <LCD__GetBPPDevice+0x24>
 800f92e:	f1a0 0309 	sub.w	r3, r0, #9
 800f932:	2b07      	cmp	r3, #7
 800f934:	d907      	bls.n	800f946 <LCD__GetBPPDevice+0x28>
 800f936:	3811      	subs	r0, #17
 800f938:	280f      	cmp	r0, #15
 800f93a:	bf8c      	ite	hi
 800f93c:	2000      	movhi	r0, #0
 800f93e:	2020      	movls	r0, #32
 800f940:	bd08      	pop	{r3, pc}
 800f942:	2008      	movs	r0, #8
 800f944:	bd08      	pop	{r3, pc}
 800f946:	2010      	movs	r0, #16
 800f948:	bd08      	pop	{r3, pc}

0800f94a <LCD_GetNumLayers>:
 800f94a:	b510      	push	{r4, lr}
 800f94c:	2000      	movs	r0, #0
 800f94e:	f7fe faef 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800f952:	1c04      	adds	r4, r0, #0
 800f954:	f04f 0001 	mov.w	r0, #1
 800f958:	bf18      	it	ne
 800f95a:	2401      	movne	r4, #1
 800f95c:	f7fe fae8 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800f960:	b100      	cbz	r0, 800f964 <LCD_GetNumLayers+0x1a>
 800f962:	3401      	adds	r4, #1
 800f964:	4620      	mov	r0, r4
 800f966:	bd10      	pop	{r4, pc}

0800f968 <LCD_ReadRectEx>:
 800f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f96c:	b087      	sub	sp, #28
 800f96e:	4690      	mov	r8, r2
 800f970:	4607      	mov	r7, r0
 800f972:	460e      	mov	r6, r1
 800f974:	9303      	str	r3, [sp, #12]
 800f976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f978:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f97a:	68da      	ldr	r2, [r3, #12]
 800f97c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f97e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800f982:	b96b      	cbnz	r3, 800f9a0 <LCD_ReadRectEx+0x38>
 800f984:	4b60      	ldr	r3, [pc, #384]	; (800fb08 <LCD_ReadRectEx+0x1a0>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	7c58      	ldrb	r0, [r3, #17]
 800f98a:	f7ff ff3f 	bl	800f80c <GUI_GetBitsPerPixelEx>
 800f98e:	2808      	cmp	r0, #8
 800f990:	dd15      	ble.n	800f9be <LCD_ReadRectEx+0x56>
 800f992:	2811      	cmp	r0, #17
 800f994:	bfb4      	ite	lt
 800f996:	f04f 0a02 	movlt.w	sl, #2
 800f99a:	f04f 0a04 	movge.w	sl, #4
 800f99e:	e010      	b.n	800f9c2 <LCD_ReadRectEx+0x5a>
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	a811      	add	r0, sp, #68	; 0x44
 800f9a4:	4798      	blx	r3
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d0eb      	beq.n	800f984 <LCD_ReadRectEx+0x1c>
 800f9ac:	9b03      	ldr	r3, [sp, #12]
 800f9ae:	4632      	mov	r2, r6
 800f9b0:	9401      	str	r4, [sp, #4]
 800f9b2:	4639      	mov	r1, r7
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	4643      	mov	r3, r8
 800f9b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f9ba:	47a8      	blx	r5
 800f9bc:	e0a0      	b.n	800fb00 <LCD_ReadRectEx+0x198>
 800f9be:	f04f 0a01 	mov.w	sl, #1
 800f9c2:	1e43      	subs	r3, r0, #1
 800f9c4:	2500      	movs	r5, #0
 800f9c6:	9304      	str	r3, [sp, #16]
 800f9c8:	9b03      	ldr	r3, [sp, #12]
 800f9ca:	429e      	cmp	r6, r3
 800f9cc:	f300 8098 	bgt.w	800fb00 <LCD_ReadRectEx+0x198>
 800f9d0:	f1ba 0f02 	cmp.w	sl, #2
 800f9d4:	d009      	beq.n	800f9ea <LCD_ReadRectEx+0x82>
 800f9d6:	f1ba 0f04 	cmp.w	sl, #4
 800f9da:	d004      	beq.n	800f9e6 <LCD_ReadRectEx+0x7e>
 800f9dc:	f1ba 0f01 	cmp.w	sl, #1
 800f9e0:	f040 808c 	bne.w	800fafc <LCD_ReadRectEx+0x194>
 800f9e4:	e003      	b.n	800f9ee <LCD_ReadRectEx+0x86>
 800f9e6:	46bb      	mov	fp, r7
 800f9e8:	e07d      	b.n	800fae6 <LCD_ReadRectEx+0x17e>
 800f9ea:	46bb      	mov	fp, r7
 800f9ec:	e070      	b.n	800fad0 <LCD_ReadRectEx+0x168>
 800f9ee:	9b04      	ldr	r3, [sp, #16]
 800f9f0:	2b07      	cmp	r3, #7
 800f9f2:	f200 8083 	bhi.w	800fafc <LCD_ReadRectEx+0x194>
 800f9f6:	e8df f003 	tbb	[pc, r3]
 800f9fa:	0a0e      	.short	0x0a0e
 800f9fc:	04040707 	.word	0x04040707
 800fa00:	0404      	.short	0x0404
 800fa02:	ebc4 0b07 	rsb	fp, r4, r7
 800fa06:	e059      	b.n	800fabc <LCD_ReadRectEx+0x154>
 800fa08:	46bb      	mov	fp, r7
 800fa0a:	230f      	movs	r3, #15
 800fa0c:	e03b      	b.n	800fa86 <LCD_ReadRectEx+0x11e>
 800fa0e:	46bb      	mov	fp, r7
 800fa10:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fa14:	e019      	b.n	800fa4a <LCD_ReadRectEx+0xe2>
 800fa16:	46bb      	mov	fp, r7
 800fa18:	45c3      	cmp	fp, r8
 800fa1a:	dc6f      	bgt.n	800fafc <LCD_ReadRectEx+0x194>
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	4659      	mov	r1, fp
 800fa20:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fa22:	f10b 0b01 	add.w	fp, fp, #1
 800fa26:	47c8      	blx	r9
 800fa28:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800fa2c:	7822      	ldrb	r2, [r4, #0]
 800fa2e:	412b      	asrs	r3, r5
 800fa30:	401a      	ands	r2, r3
 800fa32:	f1c5 0307 	rsb	r3, r5, #7
 800fa36:	3501      	adds	r5, #1
 800fa38:	4098      	lsls	r0, r3
 800fa3a:	f025 0307 	bic.w	r3, r5, #7
 800fa3e:	4310      	orrs	r0, r2
 800fa40:	7020      	strb	r0, [r4, #0]
 800fa42:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 800fa46:	411d      	asrs	r5, r3
 800fa48:	e7e6      	b.n	800fa18 <LCD_ReadRectEx+0xb0>
 800fa4a:	45c3      	cmp	fp, r8
 800fa4c:	dc56      	bgt.n	800fafc <LCD_ReadRectEx+0x194>
 800fa4e:	4659      	mov	r1, fp
 800fa50:	4632      	mov	r2, r6
 800fa52:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fa54:	f10b 0b01 	add.w	fp, fp, #1
 800fa58:	9305      	str	r3, [sp, #20]
 800fa5a:	47c8      	blx	r9
 800fa5c:	006a      	lsls	r2, r5, #1
 800fa5e:	9b05      	ldr	r3, [sp, #20]
 800fa60:	f894 e000 	ldrb.w	lr, [r4]
 800fa64:	3501      	adds	r5, #1
 800fa66:	fa43 f102 	asr.w	r1, r3, r2
 800fa6a:	f1c2 0206 	rsb	r2, r2, #6
 800fa6e:	ea0e 0101 	and.w	r1, lr, r1
 800fa72:	4090      	lsls	r0, r2
 800fa74:	ea41 0200 	orr.w	r2, r1, r0
 800fa78:	7022      	strb	r2, [r4, #0]
 800fa7a:	f025 0203 	bic.w	r2, r5, #3
 800fa7e:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 800fa82:	4115      	asrs	r5, r2
 800fa84:	e7e1      	b.n	800fa4a <LCD_ReadRectEx+0xe2>
 800fa86:	45c3      	cmp	fp, r8
 800fa88:	dc38      	bgt.n	800fafc <LCD_ReadRectEx+0x194>
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	4632      	mov	r2, r6
 800fa8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fa90:	f10b 0b01 	add.w	fp, fp, #1
 800fa94:	9305      	str	r3, [sp, #20]
 800fa96:	47c8      	blx	r9
 800fa98:	00aa      	lsls	r2, r5, #2
 800fa9a:	9b05      	ldr	r3, [sp, #20]
 800fa9c:	f894 e000 	ldrb.w	lr, [r4]
 800faa0:	fa03 f102 	lsl.w	r1, r3, r2
 800faa4:	f1c2 0204 	rsb	r2, r2, #4
 800faa8:	ea0e 0101 	and.w	r1, lr, r1
 800faac:	4090      	lsls	r0, r2
 800faae:	ea41 0200 	orr.w	r2, r1, r0
 800fab2:	7022      	strb	r2, [r4, #0]
 800fab4:	442c      	add	r4, r5
 800fab6:	f085 0501 	eor.w	r5, r5, #1
 800faba:	e7e4      	b.n	800fa86 <LCD_ReadRectEx+0x11e>
 800fabc:	eb04 010b 	add.w	r1, r4, fp
 800fac0:	4588      	cmp	r8, r1
 800fac2:	db1b      	blt.n	800fafc <LCD_ReadRectEx+0x194>
 800fac4:	4632      	mov	r2, r6
 800fac6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fac8:	47c8      	blx	r9
 800faca:	f804 0b01 	strb.w	r0, [r4], #1
 800face:	e7f5      	b.n	800fabc <LCD_ReadRectEx+0x154>
 800fad0:	45c3      	cmp	fp, r8
 800fad2:	dc13      	bgt.n	800fafc <LCD_ReadRectEx+0x194>
 800fad4:	4659      	mov	r1, fp
 800fad6:	4632      	mov	r2, r6
 800fad8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fada:	f10b 0b01 	add.w	fp, fp, #1
 800fade:	47c8      	blx	r9
 800fae0:	f824 0b02 	strh.w	r0, [r4], #2
 800fae4:	e7f4      	b.n	800fad0 <LCD_ReadRectEx+0x168>
 800fae6:	45c3      	cmp	fp, r8
 800fae8:	dc08      	bgt.n	800fafc <LCD_ReadRectEx+0x194>
 800faea:	4659      	mov	r1, fp
 800faec:	4632      	mov	r2, r6
 800faee:	9811      	ldr	r0, [sp, #68]	; 0x44
 800faf0:	f10b 0b01 	add.w	fp, fp, #1
 800faf4:	47c8      	blx	r9
 800faf6:	f844 0b04 	str.w	r0, [r4], #4
 800fafa:	e7f4      	b.n	800fae6 <LCD_ReadRectEx+0x17e>
 800fafc:	3601      	adds	r6, #1
 800fafe:	e763      	b.n	800f9c8 <LCD_ReadRectEx+0x60>
 800fb00:	b007      	add	sp, #28
 800fb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb06:	bf00      	nop
 800fb08:	20000018 	.word	0x20000018

0800fb0c <GUI_ReadRectEx>:
 800fb0c:	b4f0      	push	{r4, r5, r6, r7}
 800fb0e:	4d16      	ldr	r5, [pc, #88]	; (800fb68 <GUI_ReadRectEx+0x5c>)
 800fb10:	9e04      	ldr	r6, [sp, #16]
 800fb12:	682d      	ldr	r5, [r5, #0]
 800fb14:	9c05      	ldr	r4, [sp, #20]
 800fb16:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800fb1a:	42b8      	cmp	r0, r7
 800fb1c:	bfb8      	it	lt
 800fb1e:	4638      	movlt	r0, r7
 800fb20:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800fb24:	42ba      	cmp	r2, r7
 800fb26:	bfa8      	it	ge
 800fb28:	463a      	movge	r2, r7
 800fb2a:	4290      	cmp	r0, r2
 800fb2c:	dc1a      	bgt.n	800fb64 <GUI_ReadRectEx+0x58>
 800fb2e:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800fb32:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800fb36:	42b9      	cmp	r1, r7
 800fb38:	bfb8      	it	lt
 800fb3a:	4639      	movlt	r1, r7
 800fb3c:	42ab      	cmp	r3, r5
 800fb3e:	bfa8      	it	ge
 800fb40:	462b      	movge	r3, r5
 800fb42:	428b      	cmp	r3, r1
 800fb44:	db0e      	blt.n	800fb64 <GUI_ReadRectEx+0x58>
 800fb46:	68e5      	ldr	r5, [r4, #12]
 800fb48:	682d      	ldr	r5, [r5, #0]
 800fb4a:	f035 0504 	bics.w	r5, r5, #4
 800fb4e:	d104      	bne.n	800fb5a <GUI_ReadRectEx+0x4e>
 800fb50:	9405      	str	r4, [sp, #20]
 800fb52:	9604      	str	r6, [sp, #16]
 800fb54:	bcf0      	pop	{r4, r5, r6, r7}
 800fb56:	f7ff bf07 	b.w	800f968 <LCD_ReadRectEx>
 800fb5a:	6825      	ldr	r5, [r4, #0]
 800fb5c:	2d00      	cmp	r5, #0
 800fb5e:	d0f7      	beq.n	800fb50 <GUI_ReadRectEx+0x44>
 800fb60:	462c      	mov	r4, r5
 800fb62:	e7f0      	b.n	800fb46 <GUI_ReadRectEx+0x3a>
 800fb64:	bcf0      	pop	{r4, r5, r6, r7}
 800fb66:	4770      	bx	lr
 800fb68:	20000018 	.word	0x20000018

0800fb6c <LCD_SelectLCD>:
 800fb6c:	4b0d      	ldr	r3, [pc, #52]	; (800fba4 <LCD_SelectLCD+0x38>)
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	b510      	push	{r4, lr}
 800fb72:	7c51      	ldrb	r1, [r2, #17]
 800fb74:	461c      	mov	r4, r3
 800fb76:	4a0c      	ldr	r2, [pc, #48]	; (800fba8 <LCD_SelectLCD+0x3c>)
 800fb78:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800fb7c:	b140      	cbz	r0, 800fb90 <LCD_SelectLCD+0x24>
 800fb7e:	68c3      	ldr	r3, [r0, #12]
 800fb80:	b113      	cbz	r3, 800fb88 <LCD_SelectLCD+0x1c>
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2b04      	cmp	r3, #4
 800fb86:	d001      	beq.n	800fb8c <LCD_SelectLCD+0x20>
 800fb88:	6800      	ldr	r0, [r0, #0]
 800fb8a:	e7f7      	b.n	800fb7c <LCD_SelectLCD+0x10>
 800fb8c:	f7fe fa08 	bl	800dfa0 <GUI_DEVICE_Unlink>
 800fb90:	6823      	ldr	r3, [r4, #0]
 800fb92:	2200      	movs	r2, #0
 800fb94:	661a      	str	r2, [r3, #96]	; 0x60
 800fb96:	f103 0208 	add.w	r2, r3, #8
 800fb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb9e:	615a      	str	r2, [r3, #20]
 800fba0:	f7ff bc68 	b.w	800f474 <LCD_SetClipRectMax>
 800fba4:	20000018 	.word	0x20000018
 800fba8:	2002260c 	.word	0x2002260c

0800fbac <LCD_GetPosEx>:
 800fbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbae:	460c      	mov	r4, r1
 800fbb0:	4615      	mov	r5, r2
 800fbb2:	f7fe f9bd 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fbb6:	9001      	str	r0, [sp, #4]
 800fbb8:	b908      	cbnz	r0, 800fbbe <LCD_GetPosEx+0x12>
 800fbba:	2001      	movs	r0, #1
 800fbbc:	e00d      	b.n	800fbda <LCD_GetPosEx+0x2e>
 800fbbe:	68c3      	ldr	r3, [r0, #12]
 800fbc0:	2104      	movs	r1, #4
 800fbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc4:	eb0d 0001 	add.w	r0, sp, r1
 800fbc8:	4798      	blx	r3
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0f4      	beq.n	800fbba <LCD_GetPosEx+0xe>
 800fbd0:	9801      	ldr	r0, [sp, #4]
 800fbd2:	462a      	mov	r2, r5
 800fbd4:	4621      	mov	r1, r4
 800fbd6:	4798      	blx	r3
 800fbd8:	2000      	movs	r0, #0
 800fbda:	b003      	add	sp, #12
 800fbdc:	bd30      	pop	{r4, r5, pc}

0800fbde <LCD_SetDevFunc>:
 800fbde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	4615      	mov	r5, r2
 800fbe4:	f7fe f9a4 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fbe8:	9001      	str	r0, [sp, #4]
 800fbea:	b908      	cbnz	r0, 800fbf0 <LCD_SetDevFunc+0x12>
 800fbec:	2001      	movs	r0, #1
 800fbee:	e00c      	b.n	800fc0a <LCD_SetDevFunc+0x2c>
 800fbf0:	68c3      	ldr	r3, [r0, #12]
 800fbf2:	2116      	movs	r1, #22
 800fbf4:	a801      	add	r0, sp, #4
 800fbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf8:	4798      	blx	r3
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d0f5      	beq.n	800fbec <LCD_SetDevFunc+0xe>
 800fc00:	9801      	ldr	r0, [sp, #4]
 800fc02:	462a      	mov	r2, r5
 800fc04:	4621      	mov	r1, r4
 800fc06:	4798      	blx	r3
 800fc08:	2000      	movs	r0, #0
 800fc0a:	b003      	add	sp, #12
 800fc0c:	bd30      	pop	{r4, r5, pc}

0800fc0e <LCD_SetLUTEntryEx>:
 800fc0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc10:	460c      	mov	r4, r1
 800fc12:	4615      	mov	r5, r2
 800fc14:	f7fe f98c 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fc18:	9001      	str	r0, [sp, #4]
 800fc1a:	b908      	cbnz	r0, 800fc20 <LCD_SetLUTEntryEx+0x12>
 800fc1c:	2001      	movs	r0, #1
 800fc1e:	e00c      	b.n	800fc3a <LCD_SetLUTEntryEx+0x2c>
 800fc20:	68c3      	ldr	r3, [r0, #12]
 800fc22:	2110      	movs	r1, #16
 800fc24:	a801      	add	r0, sp, #4
 800fc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc28:	4798      	blx	r3
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d0f5      	beq.n	800fc1c <LCD_SetLUTEntryEx+0xe>
 800fc30:	9801      	ldr	r0, [sp, #4]
 800fc32:	462a      	mov	r2, r5
 800fc34:	4621      	mov	r1, r4
 800fc36:	4798      	blx	r3
 800fc38:	2000      	movs	r0, #0
 800fc3a:	b003      	add	sp, #12
 800fc3c:	bd30      	pop	{r4, r5, pc}

0800fc3e <LCD_SetPosEx>:
 800fc3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc40:	460c      	mov	r4, r1
 800fc42:	4615      	mov	r5, r2
 800fc44:	f7fe f974 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fc48:	9001      	str	r0, [sp, #4]
 800fc4a:	b908      	cbnz	r0, 800fc50 <LCD_SetPosEx+0x12>
 800fc4c:	2001      	movs	r0, #1
 800fc4e:	e00c      	b.n	800fc6a <LCD_SetPosEx+0x2c>
 800fc50:	68c3      	ldr	r3, [r0, #12]
 800fc52:	2103      	movs	r1, #3
 800fc54:	a801      	add	r0, sp, #4
 800fc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc58:	4798      	blx	r3
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d0f5      	beq.n	800fc4c <LCD_SetPosEx+0xe>
 800fc60:	9801      	ldr	r0, [sp, #4]
 800fc62:	462a      	mov	r2, r5
 800fc64:	4621      	mov	r1, r4
 800fc66:	4798      	blx	r3
 800fc68:	2000      	movs	r0, #0
 800fc6a:	b003      	add	sp, #12
 800fc6c:	bd30      	pop	{r4, r5, pc}

0800fc6e <LCD_SetSizeEx>:
 800fc6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc70:	460c      	mov	r4, r1
 800fc72:	4615      	mov	r5, r2
 800fc74:	f7fe f95c 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fc78:	9001      	str	r0, [sp, #4]
 800fc7a:	b908      	cbnz	r0, 800fc80 <LCD_SetSizeEx+0x12>
 800fc7c:	2001      	movs	r0, #1
 800fc7e:	e00c      	b.n	800fc9a <LCD_SetSizeEx+0x2c>
 800fc80:	68c3      	ldr	r3, [r0, #12]
 800fc82:	210b      	movs	r1, #11
 800fc84:	a801      	add	r0, sp, #4
 800fc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc88:	4798      	blx	r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d0f5      	beq.n	800fc7c <LCD_SetSizeEx+0xe>
 800fc90:	9801      	ldr	r0, [sp, #4]
 800fc92:	462a      	mov	r2, r5
 800fc94:	4621      	mov	r1, r4
 800fc96:	4798      	blx	r3
 800fc98:	2000      	movs	r0, #0
 800fc9a:	b003      	add	sp, #12
 800fc9c:	bd30      	pop	{r4, r5, pc}

0800fc9e <LCD_SetVisEx>:
 800fc9e:	b513      	push	{r0, r1, r4, lr}
 800fca0:	460c      	mov	r4, r1
 800fca2:	f7fe f945 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fca6:	9001      	str	r0, [sp, #4]
 800fca8:	b908      	cbnz	r0, 800fcae <LCD_SetVisEx+0x10>
 800fcaa:	2001      	movs	r0, #1
 800fcac:	e00b      	b.n	800fcc6 <LCD_SetVisEx+0x28>
 800fcae:	68c3      	ldr	r3, [r0, #12]
 800fcb0:	2106      	movs	r1, #6
 800fcb2:	a801      	add	r0, sp, #4
 800fcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb6:	4798      	blx	r3
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d0f5      	beq.n	800fcaa <LCD_SetVisEx+0xc>
 800fcbe:	9801      	ldr	r0, [sp, #4]
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	4798      	blx	r3
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	b002      	add	sp, #8
 800fcc8:	bd10      	pop	{r4, pc}

0800fcca <LCD_SetVRAMAddrEx>:
 800fcca:	b513      	push	{r0, r1, r4, lr}
 800fccc:	460c      	mov	r4, r1
 800fcce:	f7fe f92f 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fcd2:	9001      	str	r0, [sp, #4]
 800fcd4:	b908      	cbnz	r0, 800fcda <LCD_SetVRAMAddrEx+0x10>
 800fcd6:	2001      	movs	r0, #1
 800fcd8:	e00b      	b.n	800fcf2 <LCD_SetVRAMAddrEx+0x28>
 800fcda:	68c3      	ldr	r3, [r0, #12]
 800fcdc:	2109      	movs	r1, #9
 800fcde:	a801      	add	r0, sp, #4
 800fce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce2:	4798      	blx	r3
 800fce4:	4603      	mov	r3, r0
 800fce6:	2800      	cmp	r0, #0
 800fce8:	d0f5      	beq.n	800fcd6 <LCD_SetVRAMAddrEx+0xc>
 800fcea:	9801      	ldr	r0, [sp, #4]
 800fcec:	4621      	mov	r1, r4
 800fcee:	4798      	blx	r3
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	b002      	add	sp, #8
 800fcf4:	bd10      	pop	{r4, pc}

0800fcf6 <LCD_SetVSizeEx>:
 800fcf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcf8:	460c      	mov	r4, r1
 800fcfa:	4615      	mov	r5, r2
 800fcfc:	f7fe f918 	bl	800df30 <GUI_DEVICE__GetpDriver>
 800fd00:	9001      	str	r0, [sp, #4]
 800fd02:	b908      	cbnz	r0, 800fd08 <LCD_SetVSizeEx+0x12>
 800fd04:	2001      	movs	r0, #1
 800fd06:	e00c      	b.n	800fd22 <LCD_SetVSizeEx+0x2c>
 800fd08:	68c3      	ldr	r3, [r0, #12]
 800fd0a:	210a      	movs	r1, #10
 800fd0c:	a801      	add	r0, sp, #4
 800fd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd10:	4798      	blx	r3
 800fd12:	4603      	mov	r3, r0
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d0f5      	beq.n	800fd04 <LCD_SetVSizeEx+0xe>
 800fd18:	9801      	ldr	r0, [sp, #4]
 800fd1a:	462a      	mov	r2, r5
 800fd1c:	4621      	mov	r1, r4
 800fd1e:	4798      	blx	r3
 800fd20:	2000      	movs	r0, #0
 800fd22:	b003      	add	sp, #12
 800fd24:	bd30      	pop	{r4, r5, pc}
	...

0800fd28 <LCD_UpdateColorIndices>:
 800fd28:	b510      	push	{r4, lr}
 800fd2a:	4c07      	ldr	r4, [pc, #28]	; (800fd48 <LCD_UpdateColorIndices+0x20>)
 800fd2c:	6823      	ldr	r3, [r4, #0]
 800fd2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fd30:	f7ff fc00 	bl	800f534 <LCD_Color2Index>
 800fd34:	f7ff fc1a 	bl	800f56c <LCD_SetColorIndex>
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fd3c:	f7ff fbfa 	bl	800f534 <LCD_Color2Index>
 800fd40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd44:	f7ff bc2e 	b.w	800f5a4 <LCD_SetBkColorIndex>
 800fd48:	20000018 	.word	0x20000018

0800fd4c <_GetRect>:
 800fd4c:	6882      	ldr	r2, [r0, #8]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	800b      	strh	r3, [r1, #0]
 800fd52:	804b      	strh	r3, [r1, #2]
 800fd54:	6993      	ldr	r3, [r2, #24]
 800fd56:	3b01      	subs	r3, #1
 800fd58:	808b      	strh	r3, [r1, #4]
 800fd5a:	69d3      	ldr	r3, [r2, #28]
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	80cb      	strh	r3, [r1, #6]
 800fd60:	4770      	bx	lr

0800fd62 <_SetPixelIndex>:
 800fd62:	b510      	push	{r4, lr}
 800fd64:	6884      	ldr	r4, [r0, #8]
 800fd66:	6a20      	ldr	r0, [r4, #32]
 800fd68:	fb00 1202 	mla	r2, r0, r2, r1
 800fd6c:	6821      	ldr	r1, [r4, #0]
 800fd6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fd72:	bd10      	pop	{r4, pc}

0800fd74 <_GetPixelIndex>:
 800fd74:	6880      	ldr	r0, [r0, #8]
 800fd76:	6a03      	ldr	r3, [r0, #32]
 800fd78:	fb03 1202 	mla	r2, r3, r2, r1
 800fd7c:	6803      	ldr	r3, [r0, #0]
 800fd7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fd82:	4770      	bx	lr

0800fd84 <_XorPixel>:
 800fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd88:	4604      	mov	r4, r0
 800fd8a:	460d      	mov	r5, r1
 800fd8c:	4616      	mov	r6, r2
 800fd8e:	f7ff fff1 	bl	800fd74 <_GetPixelIndex>
 800fd92:	6923      	ldr	r3, [r4, #16]
 800fd94:	4607      	mov	r7, r0
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	4798      	blx	r3
 800fd9a:	4632      	mov	r2, r6
 800fd9c:	ea87 0300 	eor.w	r3, r7, r0
 800fda0:	4629      	mov	r1, r5
 800fda2:	4620      	mov	r0, r4
 800fda4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fda8:	f7ff bfdb 	b.w	800fd62 <_SetPixelIndex>

0800fdac <_FillRect>:
 800fdac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb0:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800fdb4:	468a      	mov	sl, r1
 800fdb6:	4615      	mov	r5, r2
 800fdb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fdba:	f8d9 6034 	ldr.w	r6, [r9, #52]	; 0x34
 800fdbe:	f8df e134 	ldr.w	lr, [pc, #308]	; 800fef4 <_FillRect+0x148>
 800fdc2:	b146      	cbz	r6, 800fdd6 <_FillRect+0x2a>
 800fdc4:	f8de 5000 	ldr.w	r5, [lr]
 800fdc8:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 800fdca:	682d      	ldr	r5, [r5, #0]
 800fdcc:	e88d 0030 	stmia.w	sp, {r4, r5}
 800fdd0:	6980      	ldr	r0, [r0, #24]
 800fdd2:	47b0      	blx	r6
 800fdd4:	e08b      	b.n	800feee <_FillRect+0x142>
 800fdd6:	1a5b      	subs	r3, r3, r1
 800fdd8:	f8de 1000 	ldr.w	r1, [lr]
 800fddc:	1aa4      	subs	r4, r4, r2
 800fdde:	f8d9 8020 	ldr.w	r8, [r9, #32]
 800fde2:	7c0a      	ldrb	r2, [r1, #16]
 800fde4:	1c5f      	adds	r7, r3, #1
 800fde6:	1c66      	adds	r6, r4, #1
 800fde8:	f012 0201 	ands.w	r2, r2, #1
 800fdec:	d022      	beq.n	800fe34 <_FillRect+0x88>
 800fdee:	6903      	ldr	r3, [r0, #16]
 800fdf0:	689b      	ldr	r3, [r3, #8]
 800fdf2:	4798      	blx	r3
 800fdf4:	2f00      	cmp	r7, #0
 800fdf6:	d07a      	beq.n	800feee <_FillRect+0x142>
 800fdf8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fdfc:	f06f 0203 	mvn.w	r2, #3
 800fe00:	fb03 a505 	mla	r5, r3, r5, sl
 800fe04:	fb02 f208 	mul.w	r2, r2, r8
 800fe08:	fb08 5404 	mla	r4, r8, r4, r5
 800fe0c:	00a4      	lsls	r4, r4, #2
 800fe0e:	2e00      	cmp	r6, #0
 800fe10:	d06d      	beq.n	800feee <_FillRect+0x142>
 800fe12:	3e01      	subs	r6, #1
 800fe14:	4623      	mov	r3, r4
 800fe16:	463d      	mov	r5, r7
 800fe18:	f8d9 e000 	ldr.w	lr, [r9]
 800fe1c:	3d01      	subs	r5, #1
 800fe1e:	f853 100e 	ldr.w	r1, [r3, lr]
 800fe22:	ea81 0100 	eor.w	r1, r1, r0
 800fe26:	f843 100e 	str.w	r1, [r3, lr]
 800fe2a:	f103 0304 	add.w	r3, r3, #4
 800fe2e:	d1f3      	bne.n	800fe18 <_FillRect+0x6c>
 800fe30:	4414      	add	r4, r2
 800fe32:	e7ec      	b.n	800fe0e <_FillRect+0x62>
 800fe34:	f8d9 0000 	ldr.w	r0, [r9]
 800fe38:	fb08 a505 	mla	r5, r8, r5, sl
 800fe3c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800fe3e:	2f0f      	cmp	r7, #15
 800fe40:	eb00 0a85 	add.w	sl, r0, r5, lsl #2
 800fe44:	6808      	ldr	r0, [r1, #0]
 800fe46:	d93f      	bls.n	800fec8 <_FillRect+0x11c>
 800fe48:	f1a3 050f 	sub.w	r5, r3, #15
 800fe4c:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 800fe50:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 800fe54:	46b4      	mov	ip, r6
 800fe56:	092d      	lsrs	r5, r5, #4
 800fe58:	fb0e a101 	mla	r1, lr, r1, sl
 800fe5c:	4692      	mov	sl, r2
 800fe5e:	3501      	adds	r5, #1
 800fe60:	01ad      	lsls	r5, r5, #6
 800fe62:	f1bc 0f00 	cmp.w	ip, #0
 800fe66:	d02d      	beq.n	800fec4 <_FillRect+0x118>
 800fe68:	f101 0340 	add.w	r3, r1, #64	; 0x40
 800fe6c:	463a      	mov	r2, r7
 800fe6e:	3a10      	subs	r2, #16
 800fe70:	f843 0c40 	str.w	r0, [r3, #-64]
 800fe74:	f843 0c3c 	str.w	r0, [r3, #-60]
 800fe78:	3340      	adds	r3, #64	; 0x40
 800fe7a:	2a0f      	cmp	r2, #15
 800fe7c:	f843 0c78 	str.w	r0, [r3, #-120]
 800fe80:	f843 0c74 	str.w	r0, [r3, #-116]
 800fe84:	f843 0c70 	str.w	r0, [r3, #-112]
 800fe88:	f843 0c6c 	str.w	r0, [r3, #-108]
 800fe8c:	f843 0c68 	str.w	r0, [r3, #-104]
 800fe90:	f843 0c64 	str.w	r0, [r3, #-100]
 800fe94:	f843 0c60 	str.w	r0, [r3, #-96]
 800fe98:	f843 0c5c 	str.w	r0, [r3, #-92]
 800fe9c:	f843 0c58 	str.w	r0, [r3, #-88]
 800fea0:	f843 0c54 	str.w	r0, [r3, #-84]
 800fea4:	f843 0c50 	str.w	r0, [r3, #-80]
 800fea8:	f843 0c4c 	str.w	r0, [r3, #-76]
 800feac:	f843 0c48 	str.w	r0, [r3, #-72]
 800feb0:	f843 0c44 	str.w	r0, [r3, #-68]
 800feb4:	d8db      	bhi.n	800fe6e <_FillRect+0xc2>
 800feb6:	eb01 0a05 	add.w	sl, r1, r5
 800feba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800febe:	ebce 0101 	rsb	r1, lr, r1
 800fec2:	e7ce      	b.n	800fe62 <_FillRect+0xb6>
 800fec4:	f007 070f 	and.w	r7, r7, #15
 800fec8:	b18f      	cbz	r7, 800feee <_FillRect+0x142>
 800feca:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800fece:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800fed2:	00bb      	lsls	r3, r7, #2
 800fed4:	fb08 a404 	mla	r4, r8, r4, sl
 800fed8:	b14e      	cbz	r6, 800feee <_FillRect+0x142>
 800feda:	4622      	mov	r2, r4
 800fedc:	1919      	adds	r1, r3, r4
 800fede:	f842 0b04 	str.w	r0, [r2], #4
 800fee2:	428a      	cmp	r2, r1
 800fee4:	d1fb      	bne.n	800fede <_FillRect+0x132>
 800fee6:	3e01      	subs	r6, #1
 800fee8:	ebc8 0404 	rsb	r4, r8, r4
 800feec:	e7f4      	b.n	800fed8 <_FillRect+0x12c>
 800feee:	b002      	add	sp, #8
 800fef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef4:	20000018 	.word	0x20000018

0800fef8 <_DrawHLine>:
 800fef8:	b507      	push	{r0, r1, r2, lr}
 800fefa:	9200      	str	r2, [sp, #0]
 800fefc:	f7ff ff56 	bl	800fdac <_FillRect>
 800ff00:	b003      	add	sp, #12
 800ff02:	f85d fb04 	ldr.w	pc, [sp], #4

0800ff06 <_DrawVLine>:
 800ff06:	b507      	push	{r0, r1, r2, lr}
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	f7ff ff4e 	bl	800fdac <_FillRect>
 800ff10:	b003      	add	sp, #12
 800ff12:	f85d fb04 	ldr.w	pc, [sp], #4

0800ff16 <_GetDevProp>:
 800ff16:	3901      	subs	r1, #1
 800ff18:	6883      	ldr	r3, [r0, #8]
 800ff1a:	290d      	cmp	r1, #13
 800ff1c:	d814      	bhi.n	800ff48 <_GetDevProp+0x32>
 800ff1e:	e8df f001 	tbb	[pc, r1]
 800ff22:	0b09      	.short	0x0b09
 800ff24:	13130f0d 	.word	0x13130f0d
 800ff28:	11071613 	.word	0x11071613
 800ff2c:	07070711 	.word	0x07070711
 800ff30:	2000      	movs	r0, #0
 800ff32:	4770      	bx	lr
 800ff34:	6918      	ldr	r0, [r3, #16]
 800ff36:	4770      	bx	lr
 800ff38:	6958      	ldr	r0, [r3, #20]
 800ff3a:	4770      	bx	lr
 800ff3c:	6998      	ldr	r0, [r3, #24]
 800ff3e:	4770      	bx	lr
 800ff40:	69d8      	ldr	r0, [r3, #28]
 800ff42:	4770      	bx	lr
 800ff44:	2001      	movs	r0, #1
 800ff46:	4770      	bx	lr
 800ff48:	f04f 30ff 	mov.w	r0, #4294967295
 800ff4c:	4770      	bx	lr
 800ff4e:	2020      	movs	r0, #32
 800ff50:	4770      	bx	lr
	...

0800ff54 <_GetDevData>:
 800ff54:	2901      	cmp	r1, #1
 800ff56:	4802      	ldr	r0, [pc, #8]	; (800ff60 <_GetDevData+0xc>)
 800ff58:	bf18      	it	ne
 800ff5a:	2000      	movne	r0, #0
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	0801c248 	.word	0x0801c248

0800ff64 <_ReadRect>:
 800ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff68:	6887      	ldr	r7, [r0, #8]
 800ff6a:	ebc1 0e03 	rsb	lr, r1, r3
 800ff6e:	3301      	adds	r3, #1
 800ff70:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ff72:	6a3d      	ldr	r5, [r7, #32]
 800ff74:	f04f 0c00 	mov.w	ip, #0
 800ff78:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ff7a:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 800ff7e:	fb05 1502 	mla	r5, r5, r2, r1
 800ff82:	1a59      	subs	r1, r3, r1
 800ff84:	3801      	subs	r0, #1
 800ff86:	ebc6 0585 	rsb	r5, r6, r5, lsl #2
 800ff8a:	0089      	lsls	r1, r1, #2
 800ff8c:	ebce 0000 	rsb	r0, lr, r0
 800ff90:	0080      	lsls	r0, r0, #2
 800ff92:	f10e 0801 	add.w	r8, lr, #1
 800ff96:	46b1      	mov	r9, r6
 800ff98:	eb0c 0a05 	add.w	sl, ip, r5
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	eb09 0b0a 	add.w	fp, r9, sl
 800ffa2:	f1b8 0801 	subs.w	r8, r8, #1
 800ffa6:	f85b 3003 	ldr.w	r3, [fp, r3]
 800ffaa:	f849 3b04 	str.w	r3, [r9], #4
 800ffae:	d1f5      	bne.n	800ff9c <_ReadRect+0x38>
 800ffb0:	3201      	adds	r2, #1
 800ffb2:	440e      	add	r6, r1
 800ffb4:	4484      	add	ip, r0
 800ffb6:	1e53      	subs	r3, r2, #1
 800ffb8:	429c      	cmp	r4, r3
 800ffba:	dcea      	bgt.n	800ff92 <_ReadRect+0x2e>
 800ffbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffc0 <_GetDevFunc>:
 800ffc0:	3901      	subs	r1, #1
 800ffc2:	2928      	cmp	r1, #40	; 0x28
 800ffc4:	d848      	bhi.n	8010058 <_GetDevFunc+0x98>
 800ffc6:	e8df f001 	tbb	[pc, r1]
 800ffca:	1f45      	.short	0x1f45
 800ffcc:	21471d1b 	.word	0x21471d1b
 800ffd0:	17494747 	.word	0x17494747
 800ffd4:	25472319 	.word	0x25472319
 800ffd8:	47474727 	.word	0x47474727
 800ffdc:	332d2b29 	.word	0x332d2b29
 800ffe0:	47354747 	.word	0x47354747
 800ffe4:	47474747 	.word	0x47474747
 800ffe8:	312f3947 	.word	0x312f3947
 800ffec:	473d4741 	.word	0x473d4741
 800fff0:	4747      	.short	0x4747
 800fff2:	15          	.byte	0x15
 800fff3:	00          	.byte	0x00
 800fff4:	481a      	ldr	r0, [pc, #104]	; (8010060 <_GetDevFunc+0xa0>)
 800fff6:	4770      	bx	lr
 800fff8:	481a      	ldr	r0, [pc, #104]	; (8010064 <_GetDevFunc+0xa4>)
 800fffa:	4770      	bx	lr
 800fffc:	481a      	ldr	r0, [pc, #104]	; (8010068 <_GetDevFunc+0xa8>)
 800fffe:	4770      	bx	lr
 8010000:	481a      	ldr	r0, [pc, #104]	; (801006c <_GetDevFunc+0xac>)
 8010002:	4770      	bx	lr
 8010004:	481a      	ldr	r0, [pc, #104]	; (8010070 <_GetDevFunc+0xb0>)
 8010006:	4770      	bx	lr
 8010008:	481a      	ldr	r0, [pc, #104]	; (8010074 <_GetDevFunc+0xb4>)
 801000a:	4770      	bx	lr
 801000c:	481a      	ldr	r0, [pc, #104]	; (8010078 <_GetDevFunc+0xb8>)
 801000e:	4770      	bx	lr
 8010010:	481a      	ldr	r0, [pc, #104]	; (801007c <_GetDevFunc+0xbc>)
 8010012:	4770      	bx	lr
 8010014:	481a      	ldr	r0, [pc, #104]	; (8010080 <_GetDevFunc+0xc0>)
 8010016:	4770      	bx	lr
 8010018:	481a      	ldr	r0, [pc, #104]	; (8010084 <_GetDevFunc+0xc4>)
 801001a:	4770      	bx	lr
 801001c:	481a      	ldr	r0, [pc, #104]	; (8010088 <_GetDevFunc+0xc8>)
 801001e:	4770      	bx	lr
 8010020:	481a      	ldr	r0, [pc, #104]	; (801008c <_GetDevFunc+0xcc>)
 8010022:	4770      	bx	lr
 8010024:	481a      	ldr	r0, [pc, #104]	; (8010090 <_GetDevFunc+0xd0>)
 8010026:	4770      	bx	lr
 8010028:	481a      	ldr	r0, [pc, #104]	; (8010094 <_GetDevFunc+0xd4>)
 801002a:	4770      	bx	lr
 801002c:	481a      	ldr	r0, [pc, #104]	; (8010098 <_GetDevFunc+0xd8>)
 801002e:	4770      	bx	lr
 8010030:	481a      	ldr	r0, [pc, #104]	; (801009c <_GetDevFunc+0xdc>)
 8010032:	4770      	bx	lr
 8010034:	6803      	ldr	r3, [r0, #0]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801003a:	4770      	bx	lr
 801003c:	6803      	ldr	r3, [r0, #0]
 801003e:	689b      	ldr	r3, [r3, #8]
 8010040:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010042:	4770      	bx	lr
 8010044:	6803      	ldr	r3, [r0, #0]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801004a:	4770      	bx	lr
 801004c:	6803      	ldr	r3, [r0, #0]
 801004e:	689b      	ldr	r3, [r3, #8]
 8010050:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8010052:	4770      	bx	lr
 8010054:	4812      	ldr	r0, [pc, #72]	; (80100a0 <_GetDevFunc+0xe0>)
 8010056:	4770      	bx	lr
 8010058:	2000      	movs	r0, #0
 801005a:	4770      	bx	lr
 801005c:	4811      	ldr	r0, [pc, #68]	; (80100a4 <_GetDevFunc+0xe4>)
 801005e:	4770      	bx	lr
 8010060:	0801076d 	.word	0x0801076d
 8010064:	0801097b 	.word	0x0801097b
 8010068:	08010939 	.word	0x08010939
 801006c:	0801083f 	.word	0x0801083f
 8010070:	08010751 	.word	0x08010751
 8010074:	080107ed 	.word	0x080107ed
 8010078:	080107c5 	.word	0x080107c5
 801007c:	080107ab 	.word	0x080107ab
 8010080:	080100f5 	.word	0x080100f5
 8010084:	080100eb 	.word	0x080100eb
 8010088:	080100d5 	.word	0x080100d5
 801008c:	080100bf 	.word	0x080100bf
 8010090:	080100a9 	.word	0x080100a9
 8010094:	080106ed 	.word	0x080106ed
 8010098:	08010785 	.word	0x08010785
 801009c:	0801069f 	.word	0x0801069f
 80100a0:	0800ff65 	.word	0x0800ff65
 80100a4:	08010815 	.word	0x08010815

080100a8 <_SetChroma>:
 80100a8:	b507      	push	{r0, r1, r2, lr}
 80100aa:	e88d 0006 	stmia.w	sp, {r1, r2}
 80100ae:	466a      	mov	r2, sp
 80100b0:	210d      	movs	r1, #13
 80100b2:	6980      	ldr	r0, [r0, #24]
 80100b4:	f7fc fdce 	bl	800cc54 <LCD_X_DisplayDriver>
 80100b8:	b003      	add	sp, #12
 80100ba:	f85d fb04 	ldr.w	pc, [sp], #4

080100be <_SetChromaMode>:
 80100be:	b507      	push	{r0, r1, r2, lr}
 80100c0:	aa02      	add	r2, sp, #8
 80100c2:	6980      	ldr	r0, [r0, #24]
 80100c4:	f842 1d04 	str.w	r1, [r2, #-4]!
 80100c8:	210c      	movs	r1, #12
 80100ca:	f7fc fdc3 	bl	800cc54 <LCD_X_DisplayDriver>
 80100ce:	b003      	add	sp, #12
 80100d0:	f85d fb04 	ldr.w	pc, [sp], #4

080100d4 <_SetAlphaMode>:
 80100d4:	b507      	push	{r0, r1, r2, lr}
 80100d6:	aa02      	add	r2, sp, #8
 80100d8:	6980      	ldr	r0, [r0, #24]
 80100da:	f842 1d04 	str.w	r1, [r2, #-4]!
 80100de:	210b      	movs	r1, #11
 80100e0:	f7fc fdb8 	bl	800cc54 <LCD_X_DisplayDriver>
 80100e4:	b003      	add	sp, #12
 80100e6:	f85d fb04 	ldr.w	pc, [sp], #4

080100ea <_Off>:
 80100ea:	2200      	movs	r2, #0
 80100ec:	2106      	movs	r1, #6
 80100ee:	6980      	ldr	r0, [r0, #24]
 80100f0:	f7fc bdb0 	b.w	800cc54 <LCD_X_DisplayDriver>

080100f4 <_On>:
 80100f4:	2200      	movs	r2, #0
 80100f6:	2105      	movs	r1, #5
 80100f8:	6980      	ldr	r0, [r0, #24]
 80100fa:	f7fc bdab 	b.w	800cc54 <LCD_X_DisplayDriver>

080100fe <_SetOrg>:
 80100fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010102:	2300      	movs	r3, #0
 8010104:	4607      	mov	r7, r0
 8010106:	6884      	ldr	r4, [r0, #8]
 8010108:	460d      	mov	r5, r1
 801010a:	6980      	ldr	r0, [r0, #24]
 801010c:	4616      	mov	r6, r2
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	9301      	str	r3, [sp, #4]
 8010112:	f7ff fb59 	bl	800f7c8 <LCD_GetMirrorXEx>
 8010116:	4680      	mov	r8, r0
 8010118:	69b8      	ldr	r0, [r7, #24]
 801011a:	f7ff fb58 	bl	800f7ce <LCD_GetMirrorYEx>
 801011e:	4681      	mov	r9, r0
 8010120:	69b8      	ldr	r0, [r7, #24]
 8010122:	f7ff fb57 	bl	800f7d4 <LCD_GetSwapXYEx>
 8010126:	0080      	lsls	r0, r0, #2
 8010128:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 801012c:	ea40 0008 	orr.w	r0, r0, r8
 8010130:	2807      	cmp	r0, #7
 8010132:	d826      	bhi.n	8010182 <_SetOrg+0x84>
 8010134:	e8df f000 	tbb	[pc, r0]
 8010138:	0b0f0408 	.word	0x0b0f0408
 801013c:	1b1f1519 	.word	0x1b1f1519
 8010140:	69a3      	ldr	r3, [r4, #24]
 8010142:	6921      	ldr	r1, [r4, #16]
 8010144:	1a59      	subs	r1, r3, r1
 8010146:	1b4d      	subs	r5, r1, r5
 8010148:	9500      	str	r5, [sp, #0]
 801014a:	9601      	str	r6, [sp, #4]
 801014c:	e019      	b.n	8010182 <_SetOrg+0x84>
 801014e:	69a3      	ldr	r3, [r4, #24]
 8010150:	6921      	ldr	r1, [r4, #16]
 8010152:	1a5b      	subs	r3, r3, r1
 8010154:	1b5d      	subs	r5, r3, r5
 8010156:	69e3      	ldr	r3, [r4, #28]
 8010158:	6962      	ldr	r2, [r4, #20]
 801015a:	9500      	str	r5, [sp, #0]
 801015c:	1a9a      	subs	r2, r3, r2
 801015e:	1b96      	subs	r6, r2, r6
 8010160:	e7f3      	b.n	801014a <_SetOrg+0x4c>
 8010162:	69e3      	ldr	r3, [r4, #28]
 8010164:	6962      	ldr	r2, [r4, #20]
 8010166:	1a9a      	subs	r2, r3, r2
 8010168:	1b96      	subs	r6, r2, r6
 801016a:	9600      	str	r6, [sp, #0]
 801016c:	e008      	b.n	8010180 <_SetOrg+0x82>
 801016e:	69e3      	ldr	r3, [r4, #28]
 8010170:	6962      	ldr	r2, [r4, #20]
 8010172:	1a9b      	subs	r3, r3, r2
 8010174:	1b9e      	subs	r6, r3, r6
 8010176:	69a3      	ldr	r3, [r4, #24]
 8010178:	6921      	ldr	r1, [r4, #16]
 801017a:	9600      	str	r6, [sp, #0]
 801017c:	1a59      	subs	r1, r3, r1
 801017e:	1b4d      	subs	r5, r1, r5
 8010180:	9501      	str	r5, [sp, #4]
 8010182:	466a      	mov	r2, sp
 8010184:	2103      	movs	r1, #3
 8010186:	69b8      	ldr	r0, [r7, #24]
 8010188:	f7fc fd64 	bl	800cc54 <LCD_X_DisplayDriver>
 801018c:	b003      	add	sp, #12
 801018e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010194 <_DrawBitmap>:
 8010194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010198:	b089      	sub	sp, #36	; 0x24
 801019a:	4680      	mov	r8, r0
 801019c:	469b      	mov	fp, r3
 801019e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80101a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101a2:	2804      	cmp	r0, #4
 80101a4:	9103      	str	r1, [sp, #12]
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101aa:	9202      	str	r2, [sp, #8]
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80101b0:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 80101b4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80101b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101ba:	d016      	beq.n	80101ea <_DrawBitmap+0x56>
 80101bc:	dc0e      	bgt.n	80101dc <_DrawBitmap+0x48>
 80101be:	2801      	cmp	r0, #1
 80101c0:	d01d      	beq.n	80101fe <_DrawBitmap+0x6a>
 80101c2:	2802      	cmp	r0, #2
 80101c4:	f040 8254 	bne.w	8010670 <_DrawBitmap+0x4dc>
 80101c8:	4aad      	ldr	r2, [pc, #692]	; (8010480 <_DrawBitmap+0x2ec>)
 80101ca:	2700      	movs	r7, #0
 80101cc:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 80101d0:	6812      	ldr	r2, [r2, #0]
 80101d2:	9204      	str	r2, [sp, #16]
 80101d4:	9a03      	ldr	r2, [sp, #12]
 80101d6:	4452      	add	r2, sl
 80101d8:	9203      	str	r2, [sp, #12]
 80101da:	e0bc      	b.n	8010356 <_DrawBitmap+0x1c2>
 80101dc:	2808      	cmp	r0, #8
 80101de:	f000 816f 	beq.w	80104c0 <_DrawBitmap+0x32c>
 80101e2:	2820      	cmp	r0, #32
 80101e4:	f000 821a 	beq.w	801061c <_DrawBitmap+0x488>
 80101e8:	e242      	b.n	8010670 <_DrawBitmap+0x4dc>
 80101ea:	4aa5      	ldr	r2, [pc, #660]	; (8010480 <_DrawBitmap+0x2ec>)
 80101ec:	2700      	movs	r7, #0
 80101ee:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80101f2:	6812      	ldr	r2, [r2, #0]
 80101f4:	9204      	str	r2, [sp, #16]
 80101f6:	9a03      	ldr	r2, [sp, #12]
 80101f8:	4452      	add	r2, sl
 80101fa:	9203      	str	r2, [sp, #12]
 80101fc:	e105      	b.n	801040a <_DrawBitmap+0x276>
 80101fe:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8010200:	b916      	cbnz	r6, 8010208 <_DrawBitmap+0x74>
 8010202:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8010206:	e04d      	b.n	80102a4 <_DrawBitmap+0x110>
 8010208:	4b9d      	ldr	r3, [pc, #628]	; (8010480 <_DrawBitmap+0x2ec>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	7c1b      	ldrb	r3, [r3, #16]
 801020e:	07df      	lsls	r7, r3, #31
 8010210:	d4f7      	bmi.n	8010202 <_DrawBitmap+0x6e>
 8010212:	9b01      	ldr	r3, [sp, #4]
 8010214:	46b4      	mov	ip, r6
 8010216:	9516      	str	r5, [sp, #88]	; 0x58
 8010218:	9315      	str	r3, [sp, #84]	; 0x54
 801021a:	9b00      	ldr	r3, [sp, #0]
 801021c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8010220:	9314      	str	r3, [sp, #80]	; 0x50
 8010222:	4623      	mov	r3, r4
 8010224:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8010228:	f8d8 0018 	ldr.w	r0, [r8, #24]
 801022c:	b009      	add	sp, #36	; 0x24
 801022e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010232:	4760      	bx	ip
 8010234:	9b03      	ldr	r3, [sp, #12]
 8010236:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801023a:	eb03 070a 	add.w	r7, r3, sl
 801023e:	4b90      	ldr	r3, [pc, #576]	; (8010480 <_DrawBitmap+0x2ec>)
 8010240:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	7c1b      	ldrb	r3, [r3, #16]
 8010248:	f003 0303 	and.w	r3, r3, #3
 801024c:	2b02      	cmp	r3, #2
 801024e:	d030      	beq.n	80102b2 <_DrawBitmap+0x11e>
 8010250:	2b03      	cmp	r3, #3
 8010252:	d04f      	beq.n	80102f4 <_DrawBitmap+0x160>
 8010254:	2b01      	cmp	r3, #1
 8010256:	d04d      	beq.n	80102f4 <_DrawBitmap+0x160>
 8010258:	498a      	ldr	r1, [pc, #552]	; (8010484 <_DrawBitmap+0x2f0>)
 801025a:	f1ca 0208 	rsb	r2, sl, #8
 801025e:	7823      	ldrb	r3, [r4, #0]
 8010260:	6828      	ldr	r0, [r5, #0]
 8010262:	5ccb      	ldrb	r3, [r1, r3]
 8010264:	6a31      	ldr	r1, [r6, #32]
 8010266:	fa43 f30a 	asr.w	r3, r3, sl
 801026a:	fb01 7709 	mla	r7, r1, r9, r7
 801026e:	6831      	ldr	r1, [r6, #0]
 8010270:	4626      	mov	r6, r4
 8010272:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010276:	4659      	mov	r1, fp
 8010278:	f013 0f01 	tst.w	r3, #1
 801027c:	bf0c      	ite	eq
 801027e:	4686      	moveq	lr, r0
 8010280:	46e6      	movne	lr, ip
 8010282:	3a01      	subs	r2, #1
 8010284:	bf09      	itett	eq
 8010286:	7873      	ldrbeq	r3, [r6, #1]
 8010288:	085b      	lsrne	r3, r3, #1
 801028a:	4a7e      	ldreq	r2, [pc, #504]	; (8010484 <_DrawBitmap+0x2f0>)
 801028c:	3601      	addeq	r6, #1
 801028e:	f847 eb04 	str.w	lr, [r7], #4
 8010292:	bf04      	itt	eq
 8010294:	5cd3      	ldrbeq	r3, [r2, r3]
 8010296:	2208      	moveq	r2, #8
 8010298:	3901      	subs	r1, #1
 801029a:	d1ed      	bne.n	8010278 <_DrawBitmap+0xe4>
 801029c:	9b01      	ldr	r3, [sp, #4]
 801029e:	f109 0901 	add.w	r9, r9, #1
 80102a2:	441c      	add	r4, r3
 80102a4:	9b02      	ldr	r3, [sp, #8]
 80102a6:	9a00      	ldr	r2, [sp, #0]
 80102a8:	ebc3 0309 	rsb	r3, r3, r9
 80102ac:	429a      	cmp	r2, r3
 80102ae:	dcc1      	bgt.n	8010234 <_DrawBitmap+0xa0>
 80102b0:	e1de      	b.n	8010670 <_DrawBitmap+0x4dc>
 80102b2:	7823      	ldrb	r3, [r4, #0]
 80102b4:	f1ca 0108 	rsb	r1, sl, #8
 80102b8:	4a72      	ldr	r2, [pc, #456]	; (8010484 <_DrawBitmap+0x2f0>)
 80102ba:	2000      	movs	r0, #0
 80102bc:	5cd2      	ldrb	r2, [r2, r3]
 80102be:	6a33      	ldr	r3, [r6, #32]
 80102c0:	fa42 f20a 	asr.w	r2, r2, sl
 80102c4:	fb03 7709 	mla	r7, r3, r9, r7
 80102c8:	6833      	ldr	r3, [r6, #0]
 80102ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80102ce:	4623      	mov	r3, r4
 80102d0:	07d6      	lsls	r6, r2, #31
 80102d2:	bf48      	it	mi
 80102d4:	f847 c020 	strmi.w	ip, [r7, r0, lsl #2]
 80102d8:	3901      	subs	r1, #1
 80102da:	f100 0001 	add.w	r0, r0, #1
 80102de:	bf09      	itett	eq
 80102e0:	785a      	ldrbeq	r2, [r3, #1]
 80102e2:	0852      	lsrne	r2, r2, #1
 80102e4:	4967      	ldreq	r1, [pc, #412]	; (8010484 <_DrawBitmap+0x2f0>)
 80102e6:	3301      	addeq	r3, #1
 80102e8:	bf04      	itt	eq
 80102ea:	5c8a      	ldrbeq	r2, [r1, r2]
 80102ec:	2108      	moveq	r1, #8
 80102ee:	4583      	cmp	fp, r0
 80102f0:	d1ee      	bne.n	80102d0 <_DrawBitmap+0x13c>
 80102f2:	e7d3      	b.n	801029c <_DrawBitmap+0x108>
 80102f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80102f8:	4656      	mov	r6, sl
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	4798      	blx	r3
 80102fe:	eb07 030b 	add.w	r3, r7, fp
 8010302:	9006      	str	r0, [sp, #24]
 8010304:	f8cd b014 	str.w	fp, [sp, #20]
 8010308:	9404      	str	r4, [sp, #16]
 801030a:	9307      	str	r3, [sp, #28]
 801030c:	9b07      	ldr	r3, [sp, #28]
 801030e:	9a05      	ldr	r2, [sp, #20]
 8010310:	1a9f      	subs	r7, r3, r2
 8010312:	9b04      	ldr	r3, [sp, #16]
 8010314:	781a      	ldrb	r2, [r3, #0]
 8010316:	2380      	movs	r3, #128	; 0x80
 8010318:	4133      	asrs	r3, r6
 801031a:	421a      	tst	r2, r3
 801031c:	d00b      	beq.n	8010336 <_DrawBitmap+0x1a2>
 801031e:	464a      	mov	r2, r9
 8010320:	4639      	mov	r1, r7
 8010322:	4640      	mov	r0, r8
 8010324:	f7ff fd26 	bl	800fd74 <_GetPixelIndex>
 8010328:	9b06      	ldr	r3, [sp, #24]
 801032a:	464a      	mov	r2, r9
 801032c:	4639      	mov	r1, r7
 801032e:	4043      	eors	r3, r0
 8010330:	4640      	mov	r0, r8
 8010332:	f7ff fd16 	bl	800fd62 <_SetPixelIndex>
 8010336:	3601      	adds	r6, #1
 8010338:	2e08      	cmp	r6, #8
 801033a:	bf01      	itttt	eq
 801033c:	9b04      	ldreq	r3, [sp, #16]
 801033e:	2600      	moveq	r6, #0
 8010340:	3301      	addeq	r3, #1
 8010342:	9304      	streq	r3, [sp, #16]
 8010344:	9b05      	ldr	r3, [sp, #20]
 8010346:	3b01      	subs	r3, #1
 8010348:	9305      	str	r3, [sp, #20]
 801034a:	d1df      	bne.n	801030c <_DrawBitmap+0x178>
 801034c:	e7a6      	b.n	801029c <_DrawBitmap+0x108>
 801034e:	b935      	cbnz	r5, 801035e <_DrawBitmap+0x1ca>
 8010350:	9a01      	ldr	r2, [sp, #4]
 8010352:	3701      	adds	r7, #1
 8010354:	4414      	add	r4, r2
 8010356:	9a00      	ldr	r2, [sp, #0]
 8010358:	4297      	cmp	r7, r2
 801035a:	dbf8      	blt.n	801034e <_DrawBitmap+0x1ba>
 801035c:	e188      	b.n	8010670 <_DrawBitmap+0x4dc>
 801035e:	9a02      	ldr	r2, [sp, #8]
 8010360:	6a19      	ldr	r1, [r3, #32]
 8010362:	443a      	add	r2, r7
 8010364:	9803      	ldr	r0, [sp, #12]
 8010366:	f894 e000 	ldrb.w	lr, [r4]
 801036a:	fb01 0102 	mla	r1, r1, r2, r0
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010374:	9904      	ldr	r1, [sp, #16]
 8010376:	7c09      	ldrb	r1, [r1, #16]
 8010378:	4690      	mov	r8, r2
 801037a:	f011 0103 	ands.w	r1, r1, #3
 801037e:	d006      	beq.n	801038e <_DrawBitmap+0x1fa>
 8010380:	2902      	cmp	r1, #2
 8010382:	d1e5      	bne.n	8010350 <_DrawBitmap+0x1bc>
 8010384:	4650      	mov	r0, sl
 8010386:	46a1      	mov	r9, r4
 8010388:	f04f 0800 	mov.w	r8, #0
 801038c:	e01d      	b.n	80103ca <_DrawBitmap+0x236>
 801038e:	4651      	mov	r1, sl
 8010390:	465e      	mov	r6, fp
 8010392:	46a1      	mov	r9, r4
 8010394:	f1c1 0003 	rsb	r0, r1, #3
 8010398:	3101      	adds	r1, #1
 801039a:	0040      	lsls	r0, r0, #1
 801039c:	2904      	cmp	r1, #4
 801039e:	f1c0 0206 	rsb	r2, r0, #6
 80103a2:	bf08      	it	eq
 80103a4:	2100      	moveq	r1, #0
 80103a6:	fa4c f202 	asr.w	r2, ip, r2
 80103aa:	ea02 020e 	and.w	r2, r2, lr
 80103ae:	fa22 f200 	lsr.w	r2, r2, r0
 80103b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80103b6:	f848 2b04 	str.w	r2, [r8], #4
 80103ba:	bf04      	itt	eq
 80103bc:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 80103c0:	f109 0901 	addeq.w	r9, r9, #1
 80103c4:	3e01      	subs	r6, #1
 80103c6:	d1e5      	bne.n	8010394 <_DrawBitmap+0x200>
 80103c8:	e7c2      	b.n	8010350 <_DrawBitmap+0x1bc>
 80103ca:	f1c0 0603 	rsb	r6, r0, #3
 80103ce:	3001      	adds	r0, #1
 80103d0:	0076      	lsls	r6, r6, #1
 80103d2:	f1c6 0106 	rsb	r1, r6, #6
 80103d6:	fa4c f101 	asr.w	r1, ip, r1
 80103da:	ea01 010e 	and.w	r1, r1, lr
 80103de:	40f1      	lsrs	r1, r6
 80103e0:	bf1c      	itt	ne
 80103e2:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 80103e6:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 80103ea:	2804      	cmp	r0, #4
 80103ec:	f108 0801 	add.w	r8, r8, #1
 80103f0:	bf02      	ittt	eq
 80103f2:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 80103f6:	2000      	moveq	r0, #0
 80103f8:	f109 0901 	addeq.w	r9, r9, #1
 80103fc:	45d8      	cmp	r8, fp
 80103fe:	d1e4      	bne.n	80103ca <_DrawBitmap+0x236>
 8010400:	e7a6      	b.n	8010350 <_DrawBitmap+0x1bc>
 8010402:	b935      	cbnz	r5, 8010412 <_DrawBitmap+0x27e>
 8010404:	9a01      	ldr	r2, [sp, #4]
 8010406:	3701      	adds	r7, #1
 8010408:	4414      	add	r4, r2
 801040a:	9a00      	ldr	r2, [sp, #0]
 801040c:	4297      	cmp	r7, r2
 801040e:	dbf8      	blt.n	8010402 <_DrawBitmap+0x26e>
 8010410:	e12e      	b.n	8010670 <_DrawBitmap+0x4dc>
 8010412:	9a02      	ldr	r2, [sp, #8]
 8010414:	6a19      	ldr	r1, [r3, #32]
 8010416:	443a      	add	r2, r7
 8010418:	9803      	ldr	r0, [sp, #12]
 801041a:	f894 e000 	ldrb.w	lr, [r4]
 801041e:	fb01 0102 	mla	r1, r1, r2, r0
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010428:	9904      	ldr	r1, [sp, #16]
 801042a:	7c09      	ldrb	r1, [r1, #16]
 801042c:	4690      	mov	r8, r2
 801042e:	f011 0103 	ands.w	r1, r1, #3
 8010432:	d006      	beq.n	8010442 <_DrawBitmap+0x2ae>
 8010434:	2902      	cmp	r1, #2
 8010436:	d1e5      	bne.n	8010404 <_DrawBitmap+0x270>
 8010438:	4650      	mov	r0, sl
 801043a:	46a1      	mov	r9, r4
 801043c:	f04f 0800 	mov.w	r8, #0
 8010440:	e022      	b.n	8010488 <_DrawBitmap+0x2f4>
 8010442:	4651      	mov	r1, sl
 8010444:	465e      	mov	r6, fp
 8010446:	46a1      	mov	r9, r4
 8010448:	f1c1 0001 	rsb	r0, r1, #1
 801044c:	3101      	adds	r1, #1
 801044e:	0080      	lsls	r0, r0, #2
 8010450:	2902      	cmp	r1, #2
 8010452:	f1c0 0204 	rsb	r2, r0, #4
 8010456:	bf08      	it	eq
 8010458:	2100      	moveq	r1, #0
 801045a:	fa4c f202 	asr.w	r2, ip, r2
 801045e:	ea02 020e 	and.w	r2, r2, lr
 8010462:	fa22 f200 	lsr.w	r2, r2, r0
 8010466:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801046a:	f848 2b04 	str.w	r2, [r8], #4
 801046e:	bf04      	itt	eq
 8010470:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 8010474:	f109 0901 	addeq.w	r9, r9, #1
 8010478:	3e01      	subs	r6, #1
 801047a:	d1e5      	bne.n	8010448 <_DrawBitmap+0x2b4>
 801047c:	e7c2      	b.n	8010404 <_DrawBitmap+0x270>
 801047e:	bf00      	nop
 8010480:	20000018 	.word	0x20000018
 8010484:	0801d818 	.word	0x0801d818
 8010488:	f1c0 0601 	rsb	r6, r0, #1
 801048c:	3001      	adds	r0, #1
 801048e:	00b6      	lsls	r6, r6, #2
 8010490:	f1c6 0104 	rsb	r1, r6, #4
 8010494:	fa4c f101 	asr.w	r1, ip, r1
 8010498:	ea01 010e 	and.w	r1, r1, lr
 801049c:	40f1      	lsrs	r1, r6
 801049e:	bf1c      	itt	ne
 80104a0:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 80104a4:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 80104a8:	2802      	cmp	r0, #2
 80104aa:	f108 0801 	add.w	r8, r8, #1
 80104ae:	bf02      	ittt	eq
 80104b0:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 80104b4:	2000      	moveq	r0, #0
 80104b6:	f109 0901 	addeq.w	r9, r9, #1
 80104ba:	45c3      	cmp	fp, r8
 80104bc:	d1e4      	bne.n	8010488 <_DrawBitmap+0x2f4>
 80104be:	e7a1      	b.n	8010404 <_DrawBitmap+0x270>
 80104c0:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80104c2:	4f6d      	ldr	r7, [pc, #436]	; (8010678 <_DrawBitmap+0x4e4>)
 80104c4:	b926      	cbnz	r6, 80104d0 <_DrawBitmap+0x33c>
 80104c6:	f8d7 c000 	ldr.w	ip, [r7]
 80104ca:	f04f 0e00 	mov.w	lr, #0
 80104ce:	e019      	b.n	8010504 <_DrawBitmap+0x370>
 80104d0:	6838      	ldr	r0, [r7, #0]
 80104d2:	7c00      	ldrb	r0, [r0, #16]
 80104d4:	0780      	lsls	r0, r0, #30
 80104d6:	d4f6      	bmi.n	80104c6 <_DrawBitmap+0x332>
 80104d8:	2d00      	cmp	r5, #0
 80104da:	d0f4      	beq.n	80104c6 <_DrawBitmap+0x332>
 80104dc:	9b01      	ldr	r3, [sp, #4]
 80104de:	46b4      	mov	ip, r6
 80104e0:	9515      	str	r5, [sp, #84]	; 0x54
 80104e2:	9314      	str	r3, [sp, #80]	; 0x50
 80104e4:	9b00      	ldr	r3, [sp, #0]
 80104e6:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 80104ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80104ec:	4623      	mov	r3, r4
 80104ee:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80104f2:	b009      	add	sp, #36	; 0x24
 80104f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f8:	4760      	bx	ip
 80104fa:	b93d      	cbnz	r5, 801050c <_DrawBitmap+0x378>
 80104fc:	9a01      	ldr	r2, [sp, #4]
 80104fe:	f10e 0e01 	add.w	lr, lr, #1
 8010502:	4414      	add	r4, r2
 8010504:	9a00      	ldr	r2, [sp, #0]
 8010506:	4596      	cmp	lr, r2
 8010508:	dbf7      	blt.n	80104fa <_DrawBitmap+0x366>
 801050a:	e0b1      	b.n	8010670 <_DrawBitmap+0x4dc>
 801050c:	9a02      	ldr	r2, [sp, #8]
 801050e:	6a19      	ldr	r1, [r3, #32]
 8010510:	4472      	add	r2, lr
 8010512:	9803      	ldr	r0, [sp, #12]
 8010514:	fb01 0202 	mla	r2, r1, r2, r0
 8010518:	6819      	ldr	r1, [r3, #0]
 801051a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801051e:	f89c 1010 	ldrb.w	r1, [ip, #16]
 8010522:	f011 0103 	ands.w	r1, r1, #3
 8010526:	d003      	beq.n	8010530 <_DrawBitmap+0x39c>
 8010528:	2902      	cmp	r1, #2
 801052a:	d1e7      	bne.n	80104fc <_DrawBitmap+0x368>
 801052c:	2000      	movs	r0, #0
 801052e:	e070      	b.n	8010612 <_DrawBitmap+0x47e>
 8010530:	4620      	mov	r0, r4
 8010532:	4659      	mov	r1, fp
 8010534:	2907      	cmp	r1, #7
 8010536:	f100 0708 	add.w	r7, r0, #8
 801053a:	f102 0620 	add.w	r6, r2, #32
 801053e:	dd33      	ble.n	80105a8 <_DrawBitmap+0x414>
 8010540:	f817 2c08 	ldrb.w	r2, [r7, #-8]
 8010544:	3908      	subs	r1, #8
 8010546:	4638      	mov	r0, r7
 8010548:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801054c:	f846 2c20 	str.w	r2, [r6, #-32]
 8010550:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 8010554:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8010558:	f846 2c1c 	str.w	r2, [r6, #-28]
 801055c:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 8010560:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8010564:	f846 2c18 	str.w	r2, [r6, #-24]
 8010568:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 801056c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8010570:	f846 2c14 	str.w	r2, [r6, #-20]
 8010574:	f817 2c04 	ldrb.w	r2, [r7, #-4]
 8010578:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801057c:	f846 2c10 	str.w	r2, [r6, #-16]
 8010580:	f817 2c03 	ldrb.w	r2, [r7, #-3]
 8010584:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8010588:	f846 2c0c 	str.w	r2, [r6, #-12]
 801058c:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 8010590:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8010594:	f846 2c08 	str.w	r2, [r6, #-8]
 8010598:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801059c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80105a0:	f846 2c04 	str.w	r2, [r6, #-4]
 80105a4:	4632      	mov	r2, r6
 80105a6:	e7c5      	b.n	8010534 <_DrawBitmap+0x3a0>
 80105a8:	2903      	cmp	r1, #3
 80105aa:	4616      	mov	r6, r2
 80105ac:	4607      	mov	r7, r0
 80105ae:	f102 0210 	add.w	r2, r2, #16
 80105b2:	f100 0004 	add.w	r0, r0, #4
 80105b6:	dd19      	ble.n	80105ec <_DrawBitmap+0x458>
 80105b8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80105bc:	3904      	subs	r1, #4
 80105be:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80105c2:	f842 6c10 	str.w	r6, [r2, #-16]
 80105c6:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 80105ca:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80105ce:	f842 6c0c 	str.w	r6, [r2, #-12]
 80105d2:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80105d6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80105da:	f842 6c08 	str.w	r6, [r2, #-8]
 80105de:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80105e2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80105e6:	f842 6c04 	str.w	r6, [r2, #-4]
 80105ea:	e7dd      	b.n	80105a8 <_DrawBitmap+0x414>
 80105ec:	3f01      	subs	r7, #1
 80105ee:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80105f2:	42b1      	cmp	r1, r6
 80105f4:	d082      	beq.n	80104fc <_DrawBitmap+0x368>
 80105f6:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 80105fa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80105fe:	f846 2b04 	str.w	r2, [r6], #4
 8010602:	e7f6      	b.n	80105f2 <_DrawBitmap+0x45e>
 8010604:	5c21      	ldrb	r1, [r4, r0]
 8010606:	b119      	cbz	r1, 8010610 <_DrawBitmap+0x47c>
 8010608:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801060c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8010610:	3001      	adds	r0, #1
 8010612:	ebc0 010b 	rsb	r1, r0, fp
 8010616:	2900      	cmp	r1, #0
 8010618:	dcf4      	bgt.n	8010604 <_DrawBitmap+0x470>
 801061a:	e76f      	b.n	80104fc <_DrawBitmap+0x368>
 801061c:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801061e:	b90d      	cbnz	r5, 8010624 <_DrawBitmap+0x490>
 8010620:	462a      	mov	r2, r5
 8010622:	e017      	b.n	8010654 <_DrawBitmap+0x4c0>
 8010624:	9b01      	ldr	r3, [sp, #4]
 8010626:	46ac      	mov	ip, r5
 8010628:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801062c:	9314      	str	r3, [sp, #80]	; 0x50
 801062e:	9b00      	ldr	r3, [sp, #0]
 8010630:	9313      	str	r3, [sp, #76]	; 0x4c
 8010632:	4623      	mov	r3, r4
 8010634:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8010638:	b009      	add	sp, #36	; 0x24
 801063a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801063e:	4760      	bx	ip
 8010640:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8010644:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
 8010648:	3101      	adds	r1, #1
 801064a:	4559      	cmp	r1, fp
 801064c:	d1f8      	bne.n	8010640 <_DrawBitmap+0x4ac>
 801064e:	9901      	ldr	r1, [sp, #4]
 8010650:	3201      	adds	r2, #1
 8010652:	440c      	add	r4, r1
 8010654:	9900      	ldr	r1, [sp, #0]
 8010656:	428a      	cmp	r2, r1
 8010658:	da0a      	bge.n	8010670 <_DrawBitmap+0x4dc>
 801065a:	9902      	ldr	r1, [sp, #8]
 801065c:	6a18      	ldr	r0, [r3, #32]
 801065e:	4411      	add	r1, r2
 8010660:	9d03      	ldr	r5, [sp, #12]
 8010662:	fb00 5101 	mla	r1, r0, r1, r5
 8010666:	6818      	ldr	r0, [r3, #0]
 8010668:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801066c:	2100      	movs	r1, #0
 801066e:	e7e7      	b.n	8010640 <_DrawBitmap+0x4ac>
 8010670:	b009      	add	sp, #36	; 0x24
 8010672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010676:	bf00      	nop
 8010678:	20000018 	.word	0x20000018

0801067c <_InitOnce.isra.4>:
 801067c:	b538      	push	{r3, r4, r5, lr}
 801067e:	6805      	ldr	r5, [r0, #0]
 8010680:	4604      	mov	r4, r0
 8010682:	b93d      	cbnz	r5, 8010694 <_InitOnce.isra.4+0x18>
 8010684:	2050      	movs	r0, #80	; 0x50
 8010686:	f7fc fefb 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 801068a:	2250      	movs	r2, #80	; 0x50
 801068c:	6020      	str	r0, [r4, #0]
 801068e:	4629      	mov	r1, r5
 8010690:	f7fe fbed 	bl	800ee6e <GUI__memset>
 8010694:	6820      	ldr	r0, [r4, #0]
 8010696:	fab0 f080 	clz	r0, r0
 801069a:	0940      	lsrs	r0, r0, #5
 801069c:	bd38      	pop	{r3, r4, r5, pc}

0801069e <_SetDevFunc>:
 801069e:	b570      	push	{r4, r5, r6, lr}
 80106a0:	4606      	mov	r6, r0
 80106a2:	3008      	adds	r0, #8
 80106a4:	460d      	mov	r5, r1
 80106a6:	4614      	mov	r4, r2
 80106a8:	f7ff ffe8 	bl	801067c <_InitOnce.isra.4>
 80106ac:	68b3      	ldr	r3, [r6, #8]
 80106ae:	b1db      	cbz	r3, 80106e8 <_SetDevFunc+0x4a>
 80106b0:	2d21      	cmp	r5, #33	; 0x21
 80106b2:	d012      	beq.n	80106da <_SetDevFunc+0x3c>
 80106b4:	dc07      	bgt.n	80106c6 <_SetDevFunc+0x28>
 80106b6:	2d19      	cmp	r5, #25
 80106b8:	d00d      	beq.n	80106d6 <_SetDevFunc+0x38>
 80106ba:	2d20      	cmp	r5, #32
 80106bc:	d00f      	beq.n	80106de <_SetDevFunc+0x40>
 80106be:	2d03      	cmp	r5, #3
 80106c0:	d112      	bne.n	80106e8 <_SetDevFunc+0x4a>
 80106c2:	649c      	str	r4, [r3, #72]	; 0x48
 80106c4:	bd70      	pop	{r4, r5, r6, pc}
 80106c6:	2d25      	cmp	r5, #37	; 0x25
 80106c8:	d00b      	beq.n	80106e2 <_SetDevFunc+0x44>
 80106ca:	2d28      	cmp	r5, #40	; 0x28
 80106cc:	d00b      	beq.n	80106e6 <_SetDevFunc+0x48>
 80106ce:	2d23      	cmp	r5, #35	; 0x23
 80106d0:	d10a      	bne.n	80106e8 <_SetDevFunc+0x4a>
 80106d2:	645c      	str	r4, [r3, #68]	; 0x44
 80106d4:	bd70      	pop	{r4, r5, r6, pc}
 80106d6:	635c      	str	r4, [r3, #52]	; 0x34
 80106d8:	bd70      	pop	{r4, r5, r6, pc}
 80106da:	639c      	str	r4, [r3, #56]	; 0x38
 80106dc:	bd70      	pop	{r4, r5, r6, pc}
 80106de:	63dc      	str	r4, [r3, #60]	; 0x3c
 80106e0:	bd70      	pop	{r4, r5, r6, pc}
 80106e2:	641c      	str	r4, [r3, #64]	; 0x40
 80106e4:	bd70      	pop	{r4, r5, r6, pc}
 80106e6:	64dc      	str	r4, [r3, #76]	; 0x4c
 80106e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080106ec <_CopyBuffer>:
 80106ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f0:	4606      	mov	r6, r0
 80106f2:	3008      	adds	r0, #8
 80106f4:	460f      	mov	r7, r1
 80106f6:	4690      	mov	r8, r2
 80106f8:	f7ff ffc0 	bl	801067c <_InitOnce.isra.4>
 80106fc:	68b4      	ldr	r4, [r6, #8]
 80106fe:	b31c      	cbz	r4, 8010748 <_CopyBuffer+0x5c>
 8010700:	4547      	cmp	r7, r8
 8010702:	d021      	beq.n	8010748 <_CopyBuffer+0x5c>
 8010704:	68f3      	ldr	r3, [r6, #12]
 8010706:	2108      	movs	r1, #8
 8010708:	4630      	mov	r0, r6
 801070a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801070c:	4798      	blx	r3
 801070e:	69a2      	ldr	r2, [r4, #24]
 8010710:	6963      	ldr	r3, [r4, #20]
 8010712:	4353      	muls	r3, r2
 8010714:	4358      	muls	r0, r3
 8010716:	68a3      	ldr	r3, [r4, #8]
 8010718:	08c2      	lsrs	r2, r0, #3
 801071a:	b123      	cbz	r3, 8010726 <_CopyBuffer+0x3a>
 801071c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8010720:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 8010724:	e004      	b.n	8010730 <_CopyBuffer+0x44>
 8010726:	6865      	ldr	r5, [r4, #4]
 8010728:	fb02 5107 	mla	r1, r2, r7, r5
 801072c:	fb02 5508 	mla	r5, r2, r8, r5
 8010730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010732:	b123      	cbz	r3, 801073e <_CopyBuffer+0x52>
 8010734:	4642      	mov	r2, r8
 8010736:	4639      	mov	r1, r7
 8010738:	69b0      	ldr	r0, [r6, #24]
 801073a:	4798      	blx	r3
 801073c:	e003      	b.n	8010746 <_CopyBuffer+0x5a>
 801073e:	4b03      	ldr	r3, [pc, #12]	; (801074c <_CopyBuffer+0x60>)
 8010740:	4628      	mov	r0, r5
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4798      	blx	r3
 8010746:	6025      	str	r5, [r4, #0]
 8010748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801074c:	20000038 	.word	0x20000038

08010750 <_GetPos>:
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	4604      	mov	r4, r0
 8010754:	3008      	adds	r0, #8
 8010756:	460e      	mov	r6, r1
 8010758:	4615      	mov	r5, r2
 801075a:	f7ff ff8f 	bl	801067c <_InitOnce.isra.4>
 801075e:	68a3      	ldr	r3, [r4, #8]
 8010760:	b11b      	cbz	r3, 801076a <_GetPos+0x1a>
 8010762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010764:	6032      	str	r2, [r6, #0]
 8010766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010768:	602b      	str	r3, [r5, #0]
 801076a:	bd70      	pop	{r4, r5, r6, pc}

0801076c <_SetVRAM_BufferPTR>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4605      	mov	r5, r0
 8010770:	3008      	adds	r0, #8
 8010772:	460c      	mov	r4, r1
 8010774:	f7ff ff82 	bl	801067c <_InitOnce.isra.4>
 8010778:	68ab      	ldr	r3, [r5, #8]
 801077a:	b113      	cbz	r3, 8010782 <_SetVRAM_BufferPTR+0x16>
 801077c:	6822      	ldr	r2, [r4, #0]
 801077e:	609c      	str	r4, [r3, #8]
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	bd38      	pop	{r3, r4, r5, pc}

08010784 <_ShowBuffer>:
 8010784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010786:	2300      	movs	r3, #0
 8010788:	4604      	mov	r4, r0
 801078a:	3008      	adds	r0, #8
 801078c:	460d      	mov	r5, r1
 801078e:	9301      	str	r3, [sp, #4]
 8010790:	f7ff ff74 	bl	801067c <_InitOnce.isra.4>
 8010794:	68a3      	ldr	r3, [r4, #8]
 8010796:	b133      	cbz	r3, 80107a6 <_ShowBuffer+0x22>
 8010798:	aa02      	add	r2, sp, #8
 801079a:	210e      	movs	r1, #14
 801079c:	69a0      	ldr	r0, [r4, #24]
 801079e:	f842 5d04 	str.w	r5, [r2, #-4]!
 80107a2:	f7fc fa57 	bl	800cc54 <LCD_X_DisplayDriver>
 80107a6:	b003      	add	sp, #12
 80107a8:	bd30      	pop	{r4, r5, pc}

080107aa <_Init>:
 80107aa:	b538      	push	{r3, r4, r5, lr}
 80107ac:	4604      	mov	r4, r0
 80107ae:	3008      	adds	r0, #8
 80107b0:	f7ff ff64 	bl	801067c <_InitOnce.isra.4>
 80107b4:	4605      	mov	r5, r0
 80107b6:	2200      	movs	r2, #0
 80107b8:	2101      	movs	r1, #1
 80107ba:	69a0      	ldr	r0, [r4, #24]
 80107bc:	f7fc fa4a 	bl	800cc54 <LCD_X_DisplayDriver>
 80107c0:	4328      	orrs	r0, r5
 80107c2:	bd38      	pop	{r3, r4, r5, pc}

080107c4 <_SetVis>:
 80107c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107c6:	2300      	movs	r3, #0
 80107c8:	4604      	mov	r4, r0
 80107ca:	3008      	adds	r0, #8
 80107cc:	460d      	mov	r5, r1
 80107ce:	9301      	str	r3, [sp, #4]
 80107d0:	f7ff ff54 	bl	801067c <_InitOnce.isra.4>
 80107d4:	68a3      	ldr	r3, [r4, #8]
 80107d6:	b13b      	cbz	r3, 80107e8 <_SetVis+0x24>
 80107d8:	aa02      	add	r2, sp, #8
 80107da:	631d      	str	r5, [r3, #48]	; 0x30
 80107dc:	2109      	movs	r1, #9
 80107de:	69a0      	ldr	r0, [r4, #24]
 80107e0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80107e4:	f7fc fa36 	bl	800cc54 <LCD_X_DisplayDriver>
 80107e8:	b003      	add	sp, #12
 80107ea:	bd30      	pop	{r4, r5, pc}

080107ec <_SetAlpha>:
 80107ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107ee:	2300      	movs	r3, #0
 80107f0:	4604      	mov	r4, r0
 80107f2:	3008      	adds	r0, #8
 80107f4:	460d      	mov	r5, r1
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	f7ff ff40 	bl	801067c <_InitOnce.isra.4>
 80107fc:	68a3      	ldr	r3, [r4, #8]
 80107fe:	b13b      	cbz	r3, 8010810 <_SetAlpha+0x24>
 8010800:	aa02      	add	r2, sp, #8
 8010802:	62dd      	str	r5, [r3, #44]	; 0x2c
 8010804:	210a      	movs	r1, #10
 8010806:	69a0      	ldr	r0, [r4, #24]
 8010808:	f842 5d04 	str.w	r5, [r2, #-4]!
 801080c:	f7fc fa22 	bl	800cc54 <LCD_X_DisplayDriver>
 8010810:	b003      	add	sp, #12
 8010812:	bd30      	pop	{r4, r5, pc}

08010814 <_SetVRAMAddr>:
 8010814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010816:	2300      	movs	r3, #0
 8010818:	4604      	mov	r4, r0
 801081a:	3008      	adds	r0, #8
 801081c:	460d      	mov	r5, r1
 801081e:	9301      	str	r3, [sp, #4]
 8010820:	f7ff ff2c 	bl	801067c <_InitOnce.isra.4>
 8010824:	68a3      	ldr	r3, [r4, #8]
 8010826:	b143      	cbz	r3, 801083a <_SetVRAMAddr+0x26>
 8010828:	aa02      	add	r2, sp, #8
 801082a:	601d      	str	r5, [r3, #0]
 801082c:	605d      	str	r5, [r3, #4]
 801082e:	2102      	movs	r1, #2
 8010830:	f842 5d04 	str.w	r5, [r2, #-4]!
 8010834:	69a0      	ldr	r0, [r4, #24]
 8010836:	f7fc fa0d 	bl	800cc54 <LCD_X_DisplayDriver>
 801083a:	b003      	add	sp, #12
 801083c:	bd30      	pop	{r4, r5, pc}

0801083e <_SetPos>:
 801083e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010842:	b089      	sub	sp, #36	; 0x24
 8010844:	4606      	mov	r6, r0
 8010846:	460d      	mov	r5, r1
 8010848:	4614      	mov	r4, r2
 801084a:	2100      	movs	r1, #0
 801084c:	2218      	movs	r2, #24
 801084e:	a802      	add	r0, sp, #8
 8010850:	f00b f821 	bl	801b896 <memset>
 8010854:	f106 0008 	add.w	r0, r6, #8
 8010858:	f7ff ff10 	bl	801067c <_InitOnce.isra.4>
 801085c:	68b7      	ldr	r7, [r6, #8]
 801085e:	2f00      	cmp	r7, #0
 8010860:	d067      	beq.n	8010932 <_SetPos+0xf4>
 8010862:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 8010866:	f1bb 0f00 	cmp.w	fp, #0
 801086a:	d004      	beq.n	8010876 <_SetPos+0x38>
 801086c:	4622      	mov	r2, r4
 801086e:	4629      	mov	r1, r5
 8010870:	69b0      	ldr	r0, [r6, #24]
 8010872:	47d8      	blx	fp
 8010874:	e05d      	b.n	8010932 <_SetPos+0xf4>
 8010876:	627d      	str	r5, [r7, #36]	; 0x24
 8010878:	62bc      	str	r4, [r7, #40]	; 0x28
 801087a:	f7ff f805 	bl	800f888 <LCD_GetXSizeDisplay>
 801087e:	4681      	mov	r9, r0
 8010880:	f7ff f808 	bl	800f894 <LCD_GetYSizeDisplay>
 8010884:	68f2      	ldr	r2, [r6, #12]
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2108      	movs	r1, #8
 801088a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801088c:	4680      	mov	r8, r0
 801088e:	4630      	mov	r0, r6
 8010890:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8010894:	9301      	str	r3, [sp, #4]
 8010896:	4790      	blx	r2
 8010898:	2208      	movs	r2, #8
 801089a:	3007      	adds	r0, #7
 801089c:	2d00      	cmp	r5, #0
 801089e:	eb05 010a 	add.w	r1, r5, sl
 80108a2:	9b01      	ldr	r3, [sp, #4]
 80108a4:	fb90 f0f2 	sdiv	r0, r0, r2
 80108a8:	9006      	str	r0, [sp, #24]
 80108aa:	da07      	bge.n	80108bc <_SetPos+0x7e>
 80108ac:	9a07      	ldr	r2, [sp, #28]
 80108ae:	f8cd b008 	str.w	fp, [sp, #8]
 80108b2:	fb00 2015 	mls	r0, r0, r5, r2
 80108b6:	9104      	str	r1, [sp, #16]
 80108b8:	9007      	str	r0, [sp, #28]
 80108ba:	e007      	b.n	80108cc <_SetPos+0x8e>
 80108bc:	4589      	cmp	r9, r1
 80108be:	9502      	str	r5, [sp, #8]
 80108c0:	bfb6      	itet	lt
 80108c2:	ebc5 0509 	rsblt	r5, r5, r9
 80108c6:	f8cd a010 	strge.w	sl, [sp, #16]
 80108ca:	9504      	strlt	r5, [sp, #16]
 80108cc:	2c00      	cmp	r4, #0
 80108ce:	eb04 0203 	add.w	r2, r4, r3
 80108d2:	da09      	bge.n	80108e8 <_SetPos+0xaa>
 80108d4:	9b06      	ldr	r3, [sp, #24]
 80108d6:	9205      	str	r2, [sp, #20]
 80108d8:	435c      	muls	r4, r3
 80108da:	9b07      	ldr	r3, [sp, #28]
 80108dc:	fb0a 3414 	mls	r4, sl, r4, r3
 80108e0:	2300      	movs	r3, #0
 80108e2:	9407      	str	r4, [sp, #28]
 80108e4:	9303      	str	r3, [sp, #12]
 80108e6:	e006      	b.n	80108f6 <_SetPos+0xb8>
 80108e8:	4590      	cmp	r8, r2
 80108ea:	9403      	str	r4, [sp, #12]
 80108ec:	bfb6      	itet	lt
 80108ee:	ebc4 0408 	rsblt	r4, r4, r8
 80108f2:	9305      	strge	r3, [sp, #20]
 80108f4:	9405      	strlt	r4, [sp, #20]
 80108f6:	9b04      	ldr	r3, [sp, #16]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fc:	dd08      	ble.n	8010910 <_SetPos+0xd2>
 80108fe:	9a05      	ldr	r2, [sp, #20]
 8010900:	2a00      	cmp	r2, #0
 8010902:	dd05      	ble.n	8010910 <_SetPos+0xd2>
 8010904:	9a02      	ldr	r2, [sp, #8]
 8010906:	4591      	cmp	r9, r2
 8010908:	dd02      	ble.n	8010910 <_SetPos+0xd2>
 801090a:	9a03      	ldr	r2, [sp, #12]
 801090c:	4590      	cmp	r8, r2
 801090e:	dc06      	bgt.n	801091e <_SetPos+0xe0>
 8010910:	2b01      	cmp	r3, #1
 8010912:	d10e      	bne.n	8010932 <_SetPos+0xf4>
 8010914:	2100      	movs	r1, #0
 8010916:	4630      	mov	r0, r6
 8010918:	f7ff ff54 	bl	80107c4 <_SetVis>
 801091c:	e009      	b.n	8010932 <_SetPos+0xf4>
 801091e:	b91b      	cbnz	r3, 8010928 <_SetPos+0xea>
 8010920:	2101      	movs	r1, #1
 8010922:	4630      	mov	r0, r6
 8010924:	f7ff ff4e 	bl	80107c4 <_SetVis>
 8010928:	aa02      	add	r2, sp, #8
 801092a:	2108      	movs	r1, #8
 801092c:	69b0      	ldr	r0, [r6, #24]
 801092e:	f7fc f991 	bl	800cc54 <LCD_X_DisplayDriver>
 8010932:	b009      	add	sp, #36	; 0x24
 8010934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010938 <_SetSize>:
 8010938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801093a:	2300      	movs	r3, #0
 801093c:	4605      	mov	r5, r0
 801093e:	3008      	adds	r0, #8
 8010940:	460f      	mov	r7, r1
 8010942:	4616      	mov	r6, r2
 8010944:	9300      	str	r3, [sp, #0]
 8010946:	9301      	str	r3, [sp, #4]
 8010948:	f7ff fe98 	bl	801067c <_InitOnce.isra.4>
 801094c:	68ac      	ldr	r4, [r5, #8]
 801094e:	b194      	cbz	r4, 8010976 <_SetSize+0x3e>
 8010950:	6a23      	ldr	r3, [r4, #32]
 8010952:	b93b      	cbnz	r3, 8010964 <_SetSize+0x2c>
 8010954:	69a8      	ldr	r0, [r5, #24]
 8010956:	f7fe ff3d 	bl	800f7d4 <LCD_GetSwapXYEx>
 801095a:	2800      	cmp	r0, #0
 801095c:	bf0c      	ite	eq
 801095e:	4638      	moveq	r0, r7
 8010960:	4630      	movne	r0, r6
 8010962:	6220      	str	r0, [r4, #32]
 8010964:	6127      	str	r7, [r4, #16]
 8010966:	466a      	mov	r2, sp
 8010968:	6166      	str	r6, [r4, #20]
 801096a:	2107      	movs	r1, #7
 801096c:	69a8      	ldr	r0, [r5, #24]
 801096e:	9700      	str	r7, [sp, #0]
 8010970:	9601      	str	r6, [sp, #4]
 8010972:	f7fc f96f 	bl	800cc54 <LCD_X_DisplayDriver>
 8010976:	b003      	add	sp, #12
 8010978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801097a <_SetVSize>:
 801097a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097c:	4607      	mov	r7, r0
 801097e:	3008      	adds	r0, #8
 8010980:	460d      	mov	r5, r1
 8010982:	4616      	mov	r6, r2
 8010984:	f7ff fe7a 	bl	801067c <_InitOnce.isra.4>
 8010988:	68bc      	ldr	r4, [r7, #8]
 801098a:	b144      	cbz	r4, 801099e <_SetVSize+0x24>
 801098c:	69b8      	ldr	r0, [r7, #24]
 801098e:	f7fe ff21 	bl	800f7d4 <LCD_GetSwapXYEx>
 8010992:	61a5      	str	r5, [r4, #24]
 8010994:	61e6      	str	r6, [r4, #28]
 8010996:	b108      	cbz	r0, 801099c <_SetVSize+0x22>
 8010998:	6226      	str	r6, [r4, #32]
 801099a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801099c:	6225      	str	r5, [r4, #32]
 801099e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109a0 <_GetDevData>:
 80109a0:	2901      	cmp	r1, #1
 80109a2:	4802      	ldr	r0, [pc, #8]	; (80109ac <_GetDevData+0xc>)
 80109a4:	bf18      	it	ne
 80109a6:	2000      	movne	r0, #0
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	0801c248 	.word	0x0801c248

080109b0 <_GetDevFunc>:
 80109b0:	2916      	cmp	r1, #22
 80109b2:	4802      	ldr	r0, [pc, #8]	; (80109bc <_GetDevFunc+0xc>)
 80109b4:	bf18      	it	ne
 80109b6:	2000      	movne	r0, #0
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	080115c5 	.word	0x080115c5

080109c0 <_GetDevProp>:
 80109c0:	2908      	cmp	r1, #8
 80109c2:	bf0c      	ite	eq
 80109c4:	2020      	moveq	r0, #32
 80109c6:	2000      	movne	r0, #0
 80109c8:	4770      	bx	lr

080109ca <_SetOrg>:
 80109ca:	6800      	ldr	r0, [r0, #0]
 80109cc:	68c3      	ldr	r3, [r0, #12]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
 80109d0:	4718      	bx	r3

080109d2 <_GetRect>:
 80109d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109d4:	6880      	ldr	r0, [r0, #8]
 80109d6:	460d      	mov	r5, r1
 80109d8:	f7fc fc7a 	bl	800d2d0 <GUI_ALLOC_LockH>
 80109dc:	4602      	mov	r2, r0
 80109de:	a802      	add	r0, sp, #8
 80109e0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80109e4:	8914      	ldrh	r4, [r2, #8]
 80109e6:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 80109ea:	802b      	strh	r3, [r5, #0]
 80109ec:	441c      	add	r4, r3
 80109ee:	8953      	ldrh	r3, [r2, #10]
 80109f0:	3c01      	subs	r4, #1
 80109f2:	f840 2d04 	str.w	r2, [r0, #-4]!
 80109f6:	440b      	add	r3, r1
 80109f8:	8069      	strh	r1, [r5, #2]
 80109fa:	80ac      	strh	r4, [r5, #4]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	80eb      	strh	r3, [r5, #6]
 8010a00:	f7fc fc74 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010a04:	b003      	add	sp, #12
 8010a06:	bd30      	pop	{r4, r5, pc}

08010a08 <_XY2PTR>:
 8010a08:	4b0e      	ldr	r3, [pc, #56]	; (8010a44 <_XY2PTR+0x3c>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a0e:	4606      	mov	r6, r0
 8010a10:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010a12:	460d      	mov	r5, r1
 8010a14:	f7fc fc5c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010a18:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010a1c:	ab02      	add	r3, sp, #8
 8010a1e:	68c4      	ldr	r4, [r0, #12]
 8010a20:	1a69      	subs	r1, r5, r1
 8010a22:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8010a26:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010a2a:	1b76      	subs	r6, r6, r5
 8010a2c:	00b6      	lsls	r6, r6, #2
 8010a2e:	3618      	adds	r6, #24
 8010a30:	fb04 6501 	mla	r5, r4, r1, r6
 8010a34:	1944      	adds	r4, r0, r5
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fc fc58 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	b002      	add	sp, #8
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
 8010a42:	bf00      	nop
 8010a44:	20000018 	.word	0x20000018

08010a48 <_GetPixelIndex>:
 8010a48:	b508      	push	{r3, lr}
 8010a4a:	4608      	mov	r0, r1
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	f7ff ffdb 	bl	8010a08 <_XY2PTR>
 8010a52:	6800      	ldr	r0, [r0, #0]
 8010a54:	bd08      	pop	{r3, pc}
	...

08010a58 <_XorPixel>:
 8010a58:	4b15      	ldr	r3, [pc, #84]	; (8010ab0 <_XorPixel+0x58>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a5e:	4616      	mov	r6, r2
 8010a60:	460d      	mov	r5, r1
 8010a62:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010a64:	f7fc fc34 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010a68:	4631      	mov	r1, r6
 8010a6a:	9000      	str	r0, [sp, #0]
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	f7ff ffcb 	bl	8010a08 <_XY2PTR>
 8010a72:	9b00      	ldr	r3, [sp, #0]
 8010a74:	4604      	mov	r4, r0
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	691b      	ldr	r3, [r3, #16]
 8010a7a:	689b      	ldr	r3, [r3, #8]
 8010a7c:	4798      	blx	r3
 8010a7e:	6823      	ldr	r3, [r4, #0]
 8010a80:	4058      	eors	r0, r3
 8010a82:	9b00      	ldr	r3, [sp, #0]
 8010a84:	6020      	str	r0, [r4, #0]
 8010a86:	6958      	ldr	r0, [r3, #20]
 8010a88:	b160      	cbz	r0, 8010aa4 <_XorPixel+0x4c>
 8010a8a:	f7fc fc21 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010a8e:	ac02      	add	r4, sp, #8
 8010a90:	6883      	ldr	r3, [r0, #8]
 8010a92:	4632      	mov	r2, r6
 8010a94:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010a98:	4629      	mov	r1, r5
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4798      	blx	r3
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	f7fc fc24 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010aa4:	4668      	mov	r0, sp
 8010aa6:	f7fc fc21 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010aaa:	b002      	add	sp, #8
 8010aac:	bd70      	pop	{r4, r5, r6, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000018 	.word	0x20000018

08010ab4 <_SetPixelIndex>:
 8010ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ab6:	461c      	mov	r4, r3
 8010ab8:	4b10      	ldr	r3, [pc, #64]	; (8010afc <_SetPixelIndex+0x48>)
 8010aba:	460d      	mov	r5, r1
 8010abc:	4616      	mov	r6, r2
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010ac2:	f7fc fc05 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010ac6:	4631      	mov	r1, r6
 8010ac8:	9000      	str	r0, [sp, #0]
 8010aca:	4628      	mov	r0, r5
 8010acc:	f7ff ff9c 	bl	8010a08 <_XY2PTR>
 8010ad0:	9b00      	ldr	r3, [sp, #0]
 8010ad2:	6004      	str	r4, [r0, #0]
 8010ad4:	6958      	ldr	r0, [r3, #20]
 8010ad6:	b160      	cbz	r0, 8010af2 <_SetPixelIndex+0x3e>
 8010ad8:	f7fc fbfa 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010adc:	ac02      	add	r4, sp, #8
 8010ade:	6883      	ldr	r3, [r0, #8]
 8010ae0:	4632      	mov	r2, r6
 8010ae2:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010ae6:	4629      	mov	r1, r5
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4798      	blx	r3
 8010aec:	4620      	mov	r0, r4
 8010aee:	f7fc fbfd 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010af2:	4668      	mov	r0, sp
 8010af4:	f7fc fbfa 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010af8:	b002      	add	sp, #8
 8010afa:	bd70      	pop	{r4, r5, r6, pc}
 8010afc:	20000018 	.word	0x20000018

08010b00 <_DrawVLine>:
 8010b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b04:	4c2a      	ldr	r4, [pc, #168]	; (8010bb0 <_DrawVLine+0xb0>)
 8010b06:	461e      	mov	r6, r3
 8010b08:	4688      	mov	r8, r1
 8010b0a:	4615      	mov	r5, r2
 8010b0c:	6823      	ldr	r3, [r4, #0]
 8010b0e:	4627      	mov	r7, r4
 8010b10:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010b12:	f7fc fbdd 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010b16:	9000      	str	r0, [sp, #0]
 8010b18:	6940      	ldr	r0, [r0, #20]
 8010b1a:	b108      	cbz	r0, 8010b20 <_DrawVLine+0x20>
 8010b1c:	f7fc fbd8 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010b20:	9001      	str	r0, [sp, #4]
 8010b22:	4629      	mov	r1, r5
 8010b24:	4640      	mov	r0, r8
 8010b26:	f7ff ff6f 	bl	8010a08 <_XY2PTR>
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	9a00      	ldr	r2, [sp, #0]
 8010b30:	7c19      	ldrb	r1, [r3, #16]
 8010b32:	07c9      	lsls	r1, r1, #31
 8010b34:	d51d      	bpl.n	8010b72 <_DrawVLine+0x72>
 8010b36:	6813      	ldr	r3, [r2, #0]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	4798      	blx	r3
 8010b3e:	4607      	mov	r7, r0
 8010b40:	9801      	ldr	r0, [sp, #4]
 8010b42:	b120      	cbz	r0, 8010b4e <_DrawVLine+0x4e>
 8010b44:	6883      	ldr	r3, [r0, #8]
 8010b46:	462a      	mov	r2, r5
 8010b48:	4641      	mov	r1, r8
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4798      	blx	r3
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	3501      	adds	r5, #1
 8010b52:	407b      	eors	r3, r7
 8010b54:	42b5      	cmp	r5, r6
 8010b56:	6023      	str	r3, [r4, #0]
 8010b58:	9b00      	ldr	r3, [sp, #0]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	441c      	add	r4, r3
 8010b5e:	ddef      	ble.n	8010b40 <_DrawVLine+0x40>
 8010b60:	4668      	mov	r0, sp
 8010b62:	f7fc fbc3 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	b1f3      	cbz	r3, 8010ba8 <_DrawVLine+0xa8>
 8010b6a:	a801      	add	r0, sp, #4
 8010b6c:	f7fc fbbe 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010b70:	e01a      	b.n	8010ba8 <_DrawVLine+0xa8>
 8010b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b74:	68d7      	ldr	r7, [r2, #12]
 8010b76:	f8d3 9000 	ldr.w	r9, [r3]
 8010b7a:	9b01      	ldr	r3, [sp, #4]
 8010b7c:	b163      	cbz	r3, 8010b98 <_DrawVLine+0x98>
 8010b7e:	9801      	ldr	r0, [sp, #4]
 8010b80:	462a      	mov	r2, r5
 8010b82:	3501      	adds	r5, #1
 8010b84:	4641      	mov	r1, r8
 8010b86:	6883      	ldr	r3, [r0, #8]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4798      	blx	r3
 8010b8c:	42ae      	cmp	r6, r5
 8010b8e:	f8c4 9000 	str.w	r9, [r4]
 8010b92:	443c      	add	r4, r7
 8010b94:	daf3      	bge.n	8010b7e <_DrawVLine+0x7e>
 8010b96:	e7e3      	b.n	8010b60 <_DrawVLine+0x60>
 8010b98:	1b75      	subs	r5, r6, r5
 8010b9a:	3501      	adds	r5, #1
 8010b9c:	3d01      	subs	r5, #1
 8010b9e:	f8c4 9000 	str.w	r9, [r4]
 8010ba2:	443c      	add	r4, r7
 8010ba4:	d1fa      	bne.n	8010b9c <_DrawVLine+0x9c>
 8010ba6:	e7db      	b.n	8010b60 <_DrawVLine+0x60>
 8010ba8:	b003      	add	sp, #12
 8010baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bae:	bf00      	nop
 8010bb0:	20000018 	.word	0x20000018

08010bb4 <_FillRect>:
 8010bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb8:	4e2a      	ldr	r6, [pc, #168]	; (8010c64 <_FillRect+0xb0>)
 8010bba:	461c      	mov	r4, r3
 8010bbc:	b085      	sub	sp, #20
 8010bbe:	4689      	mov	r9, r1
 8010bc0:	6833      	ldr	r3, [r6, #0]
 8010bc2:	4615      	mov	r5, r2
 8010bc4:	ebc9 0404 	rsb	r4, r9, r4
 8010bc8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010bca:	f7fc fb81 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010bce:	4629      	mov	r1, r5
 8010bd0:	9002      	str	r0, [sp, #8]
 8010bd2:	4648      	mov	r0, r9
 8010bd4:	f7ff ff18 	bl	8010a08 <_XY2PTR>
 8010bd8:	9b02      	ldr	r3, [sp, #8]
 8010bda:	6832      	ldr	r2, [r6, #0]
 8010bdc:	4607      	mov	r7, r0
 8010bde:	6958      	ldr	r0, [r3, #20]
 8010be0:	3401      	adds	r4, #1
 8010be2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010be4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8010be8:	f8d2 b000 	ldr.w	fp, [r2]
 8010bec:	b330      	cbz	r0, 8010c3c <_FillRect+0x88>
 8010bee:	f7fc fb6f 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bf4:	f10d 0810 	add.w	r8, sp, #16
 8010bf8:	462a      	mov	r2, r5
 8010bfa:	1b5b      	subs	r3, r3, r5
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	f848 0d04 	str.w	r0, [r8, #-4]!
 8010c02:	3301      	adds	r3, #1
 8010c04:	9300      	str	r3, [sp, #0]
 8010c06:	4623      	mov	r3, r4
 8010c08:	f000 fbe1 	bl	80113ce <GUI_USAGE_AddRect>
 8010c0c:	4640      	mov	r0, r8
 8010c0e:	f7fc fb6d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010c12:	e013      	b.n	8010c3c <_FillRect+0x88>
 8010c14:	6833      	ldr	r3, [r6, #0]
 8010c16:	7c1b      	ldrb	r3, [r3, #16]
 8010c18:	07db      	lsls	r3, r3, #31
 8010c1a:	d513      	bpl.n	8010c44 <_FillRect+0x90>
 8010c1c:	9b02      	ldr	r3, [sp, #8]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	691b      	ldr	r3, [r3, #16]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	4798      	blx	r3
 8010c26:	463a      	mov	r2, r7
 8010c28:	4623      	mov	r3, r4
 8010c2a:	6811      	ldr	r1, [r2, #0]
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	ea81 0100 	eor.w	r1, r1, r0
 8010c32:	f842 1b04 	str.w	r1, [r2], #4
 8010c36:	d1f8      	bne.n	8010c2a <_FillRect+0x76>
 8010c38:	4457      	add	r7, sl
 8010c3a:	3501      	adds	r5, #1
 8010c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c3e:	429d      	cmp	r5, r3
 8010c40:	dde8      	ble.n	8010c14 <_FillRect+0x60>
 8010c42:	e008      	b.n	8010c56 <_FillRect+0xa2>
 8010c44:	2c00      	cmp	r4, #0
 8010c46:	ddf7      	ble.n	8010c38 <_FillRect+0x84>
 8010c48:	4623      	mov	r3, r4
 8010c4a:	463a      	mov	r2, r7
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	f842 bb04 	str.w	fp, [r2], #4
 8010c52:	d1fb      	bne.n	8010c4c <_FillRect+0x98>
 8010c54:	e7f0      	b.n	8010c38 <_FillRect+0x84>
 8010c56:	a802      	add	r0, sp, #8
 8010c58:	f7fc fb48 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010c5c:	b005      	add	sp, #20
 8010c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c62:	bf00      	nop
 8010c64:	20000018 	.word	0x20000018

08010c68 <_DrawHLine>:
 8010c68:	b507      	push	{r0, r1, r2, lr}
 8010c6a:	9200      	str	r2, [sp, #0]
 8010c6c:	f7ff ffa2 	bl	8010bb4 <_FillRect>
 8010c70:	b003      	add	sp, #12
 8010c72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010c78 <_DrawBitmap>:
 8010c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7c:	4da7      	ldr	r5, [pc, #668]	; (8010f1c <_DrawBitmap+0x2a4>)
 8010c7e:	b091      	sub	sp, #68	; 0x44
 8010c80:	460e      	mov	r6, r1
 8010c82:	9302      	str	r3, [sp, #8]
 8010c84:	682b      	ldr	r3, [r5, #0]
 8010c86:	9005      	str	r0, [sp, #20]
 8010c88:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010c8a:	9206      	str	r2, [sp, #24]
 8010c8c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8010c8e:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 8010c92:	2800      	cmp	r0, #0
 8010c94:	f000 837f 	beq.w	8011396 <_DrawBitmap+0x71e>
 8010c98:	f7fc fb1a 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010c9c:	900e      	str	r0, [sp, #56]	; 0x38
 8010c9e:	6940      	ldr	r0, [r0, #20]
 8010ca0:	b108      	cbz	r0, 8010ca6 <_DrawBitmap+0x2e>
 8010ca2:	f7fc fb15 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010ca6:	900f      	str	r0, [sp, #60]	; 0x3c
 8010ca8:	a810      	add	r0, sp, #64	; 0x40
 8010caa:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	9308      	str	r3, [sp, #32]
 8010cb2:	f7fc fb1b 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8010cb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010cb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010cba:	18f3      	adds	r3, r6, r3
 8010cbc:	9303      	str	r3, [sp, #12]
 8010cbe:	b150      	cbz	r0, 8010cd6 <_DrawBitmap+0x5e>
 8010cc0:	682b      	ldr	r3, [r5, #0]
 8010cc2:	7c1b      	ldrb	r3, [r3, #16]
 8010cc4:	079d      	lsls	r5, r3, #30
 8010cc6:	d406      	bmi.n	8010cd6 <_DrawBitmap+0x5e>
 8010cc8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010cca:	9a06      	ldr	r2, [sp, #24]
 8010ccc:	9300      	str	r3, [sp, #0]
 8010cce:	9903      	ldr	r1, [sp, #12]
 8010cd0:	9b02      	ldr	r3, [sp, #8]
 8010cd2:	f000 fb7c 	bl	80113ce <GUI_USAGE_AddRect>
 8010cd6:	9906      	ldr	r1, [sp, #24]
 8010cd8:	9803      	ldr	r0, [sp, #12]
 8010cda:	f7ff fe95 	bl	8010a08 <_XY2PTR>
 8010cde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ce0:	4605      	mov	r5, r0
 8010ce2:	2b17      	cmp	r3, #23
 8010ce4:	dd66      	ble.n	8010db4 <_DrawBitmap+0x13c>
 8010ce6:	9b02      	ldr	r3, [sp, #8]
 8010ce8:	f04f 0b00 	mov.w	fp, #0
 8010cec:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8010f24 <_DrawBitmap+0x2ac>
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	9307      	str	r3, [sp, #28]
 8010cf4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010cf6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010cf8:	459b      	cmp	fp, r3
 8010cfa:	da57      	bge.n	8010dac <_DrawBitmap+0x134>
 8010cfc:	b130      	cbz	r0, 8010d0c <_DrawBitmap+0x94>
 8010cfe:	6883      	ldr	r3, [r0, #8]
 8010d00:	9a06      	ldr	r2, [sp, #24]
 8010d02:	685e      	ldr	r6, [r3, #4]
 8010d04:	445a      	add	r2, fp
 8010d06:	9b02      	ldr	r3, [sp, #8]
 8010d08:	9903      	ldr	r1, [sp, #12]
 8010d0a:	47b0      	blx	r6
 8010d0c:	9b05      	ldr	r3, [sp, #20]
 8010d0e:	691b      	ldr	r3, [r3, #16]
 8010d10:	68da      	ldr	r2, [r3, #12]
 8010d12:	b132      	cbz	r2, 8010d22 <_DrawBitmap+0xaa>
 8010d14:	f8d9 3000 	ldr.w	r3, [r9]
 8010d18:	4621      	mov	r1, r4
 8010d1a:	9a07      	ldr	r2, [sp, #28]
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	4798      	blx	r3
 8010d20:	e03d      	b.n	8010d9e <_DrawBitmap+0x126>
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8010d28:	4798      	blx	r3
 8010d2a:	462f      	mov	r7, r5
 8010d2c:	0e03      	lsrs	r3, r0, #24
 8010d2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010d32:	4626      	mov	r6, r4
 8010d34:	9304      	str	r3, [sp, #16]
 8010d36:	4642      	mov	r2, r8
 8010d38:	4631      	mov	r1, r6
 8010d3a:	f04f 0a00 	mov.w	sl, #0
 8010d3e:	f851 3b04 	ldr.w	r3, [r1], #4
 8010d42:	3a01      	subs	r2, #1
 8010d44:	9804      	ldr	r0, [sp, #16]
 8010d46:	0e1b      	lsrs	r3, r3, #24
 8010d48:	4298      	cmp	r0, r3
 8010d4a:	9804      	ldr	r0, [sp, #16]
 8010d4c:	bf08      	it	eq
 8010d4e:	f10a 0a01 	addeq.w	sl, sl, #1
 8010d52:	4298      	cmp	r0, r3
 8010d54:	d011      	beq.n	8010d7a <_DrawBitmap+0x102>
 8010d56:	f1ba 0f00 	cmp.w	sl, #0
 8010d5a:	d011      	beq.n	8010d80 <_DrawBitmap+0x108>
 8010d5c:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8010d60:	4631      	mov	r1, r6
 8010d62:	4638      	mov	r0, r7
 8010d64:	ebca 0808 	rsb	r8, sl, r8
 8010d68:	461a      	mov	r2, r3
 8010d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6c:	f8d9 3000 	ldr.w	r3, [r9]
 8010d70:	4798      	blx	r3
 8010d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d74:	441f      	add	r7, r3
 8010d76:	441e      	add	r6, r3
 8010d78:	e00e      	b.n	8010d98 <_DrawBitmap+0x120>
 8010d7a:	2a00      	cmp	r2, #0
 8010d7c:	d1df      	bne.n	8010d3e <_DrawBitmap+0xc6>
 8010d7e:	e7ea      	b.n	8010d56 <_DrawBitmap+0xde>
 8010d80:	6830      	ldr	r0, [r6, #0]
 8010d82:	0e02      	lsrs	r2, r0, #24
 8010d84:	d004      	beq.n	8010d90 <_DrawBitmap+0x118>
 8010d86:	4b66      	ldr	r3, [pc, #408]	; (8010f20 <_DrawBitmap+0x2a8>)
 8010d88:	6839      	ldr	r1, [r7, #0]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4798      	blx	r3
 8010d8e:	6038      	str	r0, [r7, #0]
 8010d90:	3704      	adds	r7, #4
 8010d92:	3604      	adds	r6, #4
 8010d94:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d98:	f1b8 0f00 	cmp.w	r8, #0
 8010d9c:	d1cb      	bne.n	8010d36 <_DrawBitmap+0xbe>
 8010d9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010da0:	f10b 0b01 	add.w	fp, fp, #1
 8010da4:	441c      	add	r4, r3
 8010da6:	9b08      	ldr	r3, [sp, #32]
 8010da8:	441d      	add	r5, r3
 8010daa:	e7a3      	b.n	8010cf4 <_DrawBitmap+0x7c>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	f040 82ef 	bne.w	8011390 <_DrawBitmap+0x718>
 8010db2:	e2f0      	b.n	8011396 <_DrawBitmap+0x71e>
 8010db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010db6:	2b10      	cmp	r3, #16
 8010db8:	d137      	bne.n	8010e2a <_DrawBitmap+0x1b2>
 8010dba:	9b03      	ldr	r3, [sp, #12]
 8010dbc:	f04f 0800 	mov.w	r8, #0
 8010dc0:	9a03      	ldr	r2, [sp, #12]
 8010dc2:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 8010dc6:	eba0 0583 	sub.w	r5, r0, r3, lsl #2
 8010dca:	9b02      	ldr	r3, [sp, #8]
 8010dcc:	eb03 0a02 	add.w	sl, r3, r2
 8010dd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010dd2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010dd4:	4598      	cmp	r8, r3
 8010dd6:	da24      	bge.n	8010e22 <_DrawBitmap+0x1aa>
 8010dd8:	9b06      	ldr	r3, [sp, #24]
 8010dda:	eb03 0908 	add.w	r9, r3, r8
 8010dde:	b136      	cbz	r6, 8010dee <_DrawBitmap+0x176>
 8010de0:	68b3      	ldr	r3, [r6, #8]
 8010de2:	464a      	mov	r2, r9
 8010de4:	9903      	ldr	r1, [sp, #12]
 8010de6:	4630      	mov	r0, r6
 8010de8:	685f      	ldr	r7, [r3, #4]
 8010dea:	9b02      	ldr	r3, [sp, #8]
 8010dec:	47b8      	blx	r7
 8010dee:	9f03      	ldr	r7, [sp, #12]
 8010df0:	9b05      	ldr	r3, [sp, #20]
 8010df2:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	4798      	blx	r3
 8010dfc:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
 8010e00:	b12e      	cbz	r6, 8010e0e <_DrawBitmap+0x196>
 8010e02:	68b3      	ldr	r3, [r6, #8]
 8010e04:	464a      	mov	r2, r9
 8010e06:	4639      	mov	r1, r7
 8010e08:	4630      	mov	r0, r6
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4798      	blx	r3
 8010e0e:	3701      	adds	r7, #1
 8010e10:	4557      	cmp	r7, sl
 8010e12:	d1ed      	bne.n	8010df0 <_DrawBitmap+0x178>
 8010e14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010e16:	f108 0801 	add.w	r8, r8, #1
 8010e1a:	441c      	add	r4, r3
 8010e1c:	9b08      	ldr	r3, [sp, #32]
 8010e1e:	441d      	add	r5, r3
 8010e20:	e7d6      	b.n	8010dd0 <_DrawBitmap+0x158>
 8010e22:	2e00      	cmp	r6, #0
 8010e24:	f040 82b4 	bne.w	8011390 <_DrawBitmap+0x718>
 8010e28:	e2b5      	b.n	8011396 <_DrawBitmap+0x71e>
 8010e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e2c:	2b08      	cmp	r3, #8
 8010e2e:	f040 8081 	bne.w	8010f34 <_DrawBitmap+0x2bc>
 8010e32:	9a03      	ldr	r2, [sp, #12]
 8010e34:	f06f 0303 	mvn.w	r3, #3
 8010e38:	9e06      	ldr	r6, [sp, #24]
 8010e3a:	4353      	muls	r3, r2
 8010e3c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8010f1c <_DrawBitmap+0x2a4>
 8010e40:	9304      	str	r3, [sp, #16]
 8010e42:	9b02      	ldr	r3, [sp, #8]
 8010e44:	4413      	add	r3, r2
 8010e46:	9305      	str	r3, [sp, #20]
 8010e48:	9b06      	ldr	r3, [sp, #24]
 8010e4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010e4c:	1af3      	subs	r3, r6, r3
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	f340 829c 	ble.w	801138c <_DrawBitmap+0x714>
 8010e54:	f8d9 3000 	ldr.w	r3, [r9]
 8010e58:	7c1b      	ldrb	r3, [r3, #16]
 8010e5a:	f1bb 0f00 	cmp.w	fp, #0
 8010e5e:	d032      	beq.n	8010ec6 <_DrawBitmap+0x24e>
 8010e60:	f013 0303 	ands.w	r3, r3, #3
 8010e64:	d00a      	beq.n	8010e7c <_DrawBitmap+0x204>
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	d15e      	bne.n	8010f28 <_DrawBitmap+0x2b0>
 8010e6a:	9b04      	ldr	r3, [sp, #16]
 8010e6c:	f104 3aff 	add.w	sl, r4, #4294967295
 8010e70:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8010e74:	18eb      	adds	r3, r5, r3
 8010e76:	9f03      	ldr	r7, [sp, #12]
 8010e78:	9307      	str	r3, [sp, #28]
 8010e7a:	e01f      	b.n	8010ebc <_DrawBitmap+0x244>
 8010e7c:	9a02      	ldr	r2, [sp, #8]
 8010e7e:	4623      	mov	r3, r4
 8010e80:	18a1      	adds	r1, r4, r2
 8010e82:	462a      	mov	r2, r5
 8010e84:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e88:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 8010e8c:	428b      	cmp	r3, r1
 8010e8e:	f842 0b04 	str.w	r0, [r2], #4
 8010e92:	d1f7      	bne.n	8010e84 <_DrawBitmap+0x20c>
 8010e94:	e048      	b.n	8010f28 <_DrawBitmap+0x2b0>
 8010e96:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8010e9a:	9a07      	ldr	r2, [sp, #28]
 8010e9c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8010ea0:	f1b8 0f00 	cmp.w	r8, #0
 8010ea4:	d006      	beq.n	8010eb4 <_DrawBitmap+0x23c>
 8010ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010eaa:	4632      	mov	r2, r6
 8010eac:	4639      	mov	r1, r7
 8010eae:	4640      	mov	r0, r8
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	4798      	blx	r3
 8010eb4:	3701      	adds	r7, #1
 8010eb6:	9b05      	ldr	r3, [sp, #20]
 8010eb8:	42bb      	cmp	r3, r7
 8010eba:	d035      	beq.n	8010f28 <_DrawBitmap+0x2b0>
 8010ebc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d0f7      	beq.n	8010eb4 <_DrawBitmap+0x23c>
 8010ec4:	e7e7      	b.n	8010e96 <_DrawBitmap+0x21e>
 8010ec6:	f013 0303 	ands.w	r3, r3, #3
 8010eca:	d00a      	beq.n	8010ee2 <_DrawBitmap+0x26a>
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d12b      	bne.n	8010f28 <_DrawBitmap+0x2b0>
 8010ed0:	9b04      	ldr	r3, [sp, #16]
 8010ed2:	f104 3aff 	add.w	sl, r4, #4294967295
 8010ed6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8010eda:	18eb      	adds	r3, r5, r3
 8010edc:	9f03      	ldr	r7, [sp, #12]
 8010ede:	9307      	str	r3, [sp, #28]
 8010ee0:	e017      	b.n	8010f12 <_DrawBitmap+0x29a>
 8010ee2:	4b10      	ldr	r3, [pc, #64]	; (8010f24 <_DrawBitmap+0x2ac>)
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	9a02      	ldr	r2, [sp, #8]
 8010ee8:	4628      	mov	r0, r5
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4798      	blx	r3
 8010eee:	e01b      	b.n	8010f28 <_DrawBitmap+0x2b0>
 8010ef0:	9a07      	ldr	r2, [sp, #28]
 8010ef2:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8010ef6:	f1b8 0f00 	cmp.w	r8, #0
 8010efa:	d006      	beq.n	8010f0a <_DrawBitmap+0x292>
 8010efc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f00:	4632      	mov	r2, r6
 8010f02:	4639      	mov	r1, r7
 8010f04:	4640      	mov	r0, r8
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4798      	blx	r3
 8010f0a:	3701      	adds	r7, #1
 8010f0c:	9b05      	ldr	r3, [sp, #20]
 8010f0e:	42bb      	cmp	r3, r7
 8010f10:	d00a      	beq.n	8010f28 <_DrawBitmap+0x2b0>
 8010f12:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d0f7      	beq.n	8010f0a <_DrawBitmap+0x292>
 8010f1a:	e7e9      	b.n	8010ef0 <_DrawBitmap+0x278>
 8010f1c:	20000018 	.word	0x20000018
 8010f20:	20000030 	.word	0x20000030
 8010f24:	20000038 	.word	0x20000038
 8010f28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010f2a:	3601      	adds	r6, #1
 8010f2c:	441c      	add	r4, r3
 8010f2e:	9b08      	ldr	r3, [sp, #32]
 8010f30:	441d      	add	r5, r3
 8010f32:	e789      	b.n	8010e48 <_DrawBitmap+0x1d0>
 8010f34:	4bb3      	ldr	r3, [pc, #716]	; (8011204 <_DrawBitmap+0x58c>)
 8010f36:	f1bb 0f00 	cmp.w	fp, #0
 8010f3a:	bf08      	it	eq
 8010f3c:	469b      	moveq	fp, r3
 8010f3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	930a      	str	r3, [sp, #40]	; 0x28
 8010f44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f4a:	1c63      	adds	r3, r4, #1
 8010f4c:	9304      	str	r3, [sp, #16]
 8010f4e:	1d03      	adds	r3, r0, #4
 8010f50:	9307      	str	r3, [sp, #28]
 8010f52:	9b06      	ldr	r3, [sp, #24]
 8010f54:	9305      	str	r3, [sp, #20]
 8010f56:	9b07      	ldr	r3, [sp, #28]
 8010f58:	9a06      	ldr	r2, [sp, #24]
 8010f5a:	1f1c      	subs	r4, r3, #4
 8010f5c:	9b04      	ldr	r3, [sp, #16]
 8010f5e:	f103 3aff 	add.w	sl, r3, #4294967295
 8010f62:	9b05      	ldr	r3, [sp, #20]
 8010f64:	1a9b      	subs	r3, r3, r2
 8010f66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	f340 820f 	ble.w	801138c <_DrawBitmap+0x714>
 8010f6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	f000 809b 	beq.w	80110ac <_DrawBitmap+0x434>
 8010f76:	2b04      	cmp	r3, #4
 8010f78:	f000 8132 	beq.w	80111e0 <_DrawBitmap+0x568>
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	f040 81f9 	bne.w	8011374 <_DrawBitmap+0x6fc>
 8010f82:	4ba1      	ldr	r3, [pc, #644]	; (8011208 <_DrawBitmap+0x590>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010f88:	f7fc f9a2 	bl	800d2d0 <GUI_ALLOC_LockH>
 8010f8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010f8e:	4a9f      	ldr	r2, [pc, #636]	; (801120c <_DrawBitmap+0x594>)
 8010f90:	f1c3 0508 	rsb	r5, r3, #8
 8010f94:	9b04      	ldr	r3, [sp, #16]
 8010f96:	900e      	str	r0, [sp, #56]	; 0x38
 8010f98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010f9c:	9f02      	ldr	r7, [sp, #8]
 8010f9e:	5cd6      	ldrb	r6, [r2, r3]
 8010fa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010fa2:	411e      	asrs	r6, r3
 8010fa4:	4b98      	ldr	r3, [pc, #608]	; (8011208 <_DrawBitmap+0x590>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	7c1b      	ldrb	r3, [r3, #16]
 8010faa:	f003 0303 	and.w	r3, r3, #3
 8010fae:	2b02      	cmp	r3, #2
 8010fb0:	d01d      	beq.n	8010fee <_DrawBitmap+0x376>
 8010fb2:	2b03      	cmp	r3, #3
 8010fb4:	d056      	beq.n	8011064 <_DrawBitmap+0x3ec>
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d054      	beq.n	8011064 <_DrawBitmap+0x3ec>
 8010fba:	42bd      	cmp	r5, r7
 8010fbc:	4622      	mov	r2, r4
 8010fbe:	bf28      	it	cs
 8010fc0:	463d      	movcs	r5, r7
 8010fc2:	1b7f      	subs	r7, r7, r5
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	f006 0101 	and.w	r1, r6, #1
 8010fca:	3b01      	subs	r3, #1
 8010fcc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010fd0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8010fd4:	f842 1b04 	str.w	r1, [r2], #4
 8010fd8:	d1f5      	bne.n	8010fc6 <_DrawBitmap+0x34e>
 8010fda:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8010fde:	2f00      	cmp	r7, #0
 8010fe0:	d060      	beq.n	80110a4 <_DrawBitmap+0x42c>
 8010fe2:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8010fe6:	2508      	movs	r5, #8
 8010fe8:	4a88      	ldr	r2, [pc, #544]	; (801120c <_DrawBitmap+0x594>)
 8010fea:	5cd6      	ldrb	r6, [r2, r3]
 8010fec:	e7e5      	b.n	8010fba <_DrawBitmap+0x342>
 8010fee:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010ff2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8010ff6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8010ffc:	42bd      	cmp	r5, r7
 8010ffe:	bf28      	it	cs
 8011000:	463d      	movcs	r5, r7
 8011002:	1b7f      	subs	r7, r7, r5
 8011004:	f1b9 0f00 	cmp.w	r9, #0
 8011008:	d021      	beq.n	801104e <_DrawBitmap+0x3d6>
 801100a:	b91e      	cbnz	r6, 8011014 <_DrawBitmap+0x39c>
 801100c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8011010:	44a8      	add	r8, r5
 8011012:	e020      	b.n	8011056 <_DrawBitmap+0x3de>
 8011014:	07f0      	lsls	r0, r6, #31
 8011016:	d508      	bpl.n	801102a <_DrawBitmap+0x3b2>
 8011018:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801101c:	4641      	mov	r1, r8
 801101e:	9a05      	ldr	r2, [sp, #20]
 8011020:	4648      	mov	r0, r9
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4798      	blx	r3
 8011026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011028:	6023      	str	r3, [r4, #0]
 801102a:	3d01      	subs	r5, #1
 801102c:	f108 0801 	add.w	r8, r8, #1
 8011030:	f104 0404 	add.w	r4, r4, #4
 8011034:	d00f      	beq.n	8011056 <_DrawBitmap+0x3de>
 8011036:	0876      	lsrs	r6, r6, #1
 8011038:	e7e7      	b.n	801100a <_DrawBitmap+0x392>
 801103a:	07f1      	lsls	r1, r6, #31
 801103c:	f104 0404 	add.w	r4, r4, #4
 8011040:	bf44      	itt	mi
 8011042:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 8011044:	f844 3c04 	strmi.w	r3, [r4, #-4]
 8011048:	3d01      	subs	r5, #1
 801104a:	d004      	beq.n	8011056 <_DrawBitmap+0x3de>
 801104c:	0876      	lsrs	r6, r6, #1
 801104e:	2e00      	cmp	r6, #0
 8011050:	d1f3      	bne.n	801103a <_DrawBitmap+0x3c2>
 8011052:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8011056:	b32f      	cbz	r7, 80110a4 <_DrawBitmap+0x42c>
 8011058:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 801105c:	2508      	movs	r5, #8
 801105e:	4a6b      	ldr	r2, [pc, #428]	; (801120c <_DrawBitmap+0x594>)
 8011060:	5cd6      	ldrb	r6, [r2, r3]
 8011062:	e7cb      	b.n	8010ffc <_DrawBitmap+0x384>
 8011064:	6803      	ldr	r3, [r0, #0]
 8011066:	691b      	ldr	r3, [r3, #16]
 8011068:	689b      	ldr	r3, [r3, #8]
 801106a:	4798      	blx	r3
 801106c:	42bd      	cmp	r5, r7
 801106e:	4623      	mov	r3, r4
 8011070:	bf28      	it	cs
 8011072:	463d      	movcs	r5, r7
 8011074:	1b7f      	subs	r7, r7, r5
 8011076:	4629      	mov	r1, r5
 8011078:	07f2      	lsls	r2, r6, #31
 801107a:	f103 0304 	add.w	r3, r3, #4
 801107e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011082:	bf42      	ittt	mi
 8011084:	f853 2c04 	ldrmi.w	r2, [r3, #-4]
 8011088:	4042      	eormi	r2, r0
 801108a:	f843 2c04 	strmi.w	r2, [r3, #-4]
 801108e:	3901      	subs	r1, #1
 8011090:	d1f2      	bne.n	8011078 <_DrawBitmap+0x400>
 8011092:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8011096:	b12f      	cbz	r7, 80110a4 <_DrawBitmap+0x42c>
 8011098:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 801109c:	2508      	movs	r5, #8
 801109e:	4a5b      	ldr	r2, [pc, #364]	; (801120c <_DrawBitmap+0x594>)
 80110a0:	5cd6      	ldrb	r6, [r2, r3]
 80110a2:	e7e3      	b.n	801106c <_DrawBitmap+0x3f4>
 80110a4:	a80e      	add	r0, sp, #56	; 0x38
 80110a6:	f7fc f921 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80110aa:	e163      	b.n	8011374 <_DrawBitmap+0x6fc>
 80110ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80110ae:	f1c3 0504 	rsb	r5, r3, #4
 80110b2:	9b04      	ldr	r3, [sp, #16]
 80110b4:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 80110b8:	b2ed      	uxtb	r5, r5
 80110ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110bc:	409e      	lsls	r6, r3
 80110be:	4b52      	ldr	r3, [pc, #328]	; (8011208 <_DrawBitmap+0x590>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	b2f6      	uxtb	r6, r6
 80110c4:	7c1b      	ldrb	r3, [r3, #16]
 80110c6:	f003 0303 	and.w	r3, r3, #3
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d009      	beq.n	80110e2 <_DrawBitmap+0x46a>
 80110ce:	d30a      	bcc.n	80110e6 <_DrawBitmap+0x46e>
 80110d0:	2b02      	cmp	r3, #2
 80110d2:	f040 814f 	bne.w	8011374 <_DrawBitmap+0x6fc>
 80110d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80110dc:	9309      	str	r3, [sp, #36]	; 0x24
 80110de:	9f03      	ldr	r7, [sp, #12]
 80110e0:	e035      	b.n	801114e <_DrawBitmap+0x4d6>
 80110e2:	9b02      	ldr	r3, [sp, #8]
 80110e4:	e075      	b.n	80111d2 <_DrawBitmap+0x55a>
 80110e6:	9b02      	ldr	r3, [sp, #8]
 80110e8:	429d      	cmp	r5, r3
 80110ea:	4621      	mov	r1, r4
 80110ec:	bfc8      	it	gt
 80110ee:	b2dd      	uxtbgt	r5, r3
 80110f0:	1b5b      	subs	r3, r3, r5
 80110f2:	462a      	mov	r2, r5
 80110f4:	09b0      	lsrs	r0, r6, #6
 80110f6:	3a01      	subs	r2, #1
 80110f8:	00b6      	lsls	r6, r6, #2
 80110fa:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 80110fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8011102:	b2f6      	uxtb	r6, r6
 8011104:	f841 0b04 	str.w	r0, [r1], #4
 8011108:	d1f4      	bne.n	80110f4 <_DrawBitmap+0x47c>
 801110a:	3d01      	subs	r5, #1
 801110c:	b2ed      	uxtb	r5, r5
 801110e:	3501      	adds	r5, #1
 8011110:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8011114:	2b00      	cmp	r3, #0
 8011116:	f000 812d 	beq.w	8011374 <_DrawBitmap+0x6fc>
 801111a:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 801111e:	2504      	movs	r5, #4
 8011120:	e7e2      	b.n	80110e8 <_DrawBitmap+0x470>
 8011122:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8011126:	d125      	bne.n	8011174 <_DrawBitmap+0x4fc>
 8011128:	f109 0901 	add.w	r9, r9, #1
 801112c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801112e:	00b6      	lsls	r6, r6, #2
 8011130:	4599      	cmp	r9, r3
 8011132:	b2f6      	uxtb	r6, r6
 8011134:	d1f5      	bne.n	8011122 <_DrawBitmap+0x4aa>
 8011136:	1c6b      	adds	r3, r5, #1
 8011138:	3701      	adds	r7, #1
 801113a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801113e:	442f      	add	r7, r5
 8011140:	f1b8 0f00 	cmp.w	r8, #0
 8011144:	f000 8116 	beq.w	8011374 <_DrawBitmap+0x6fc>
 8011148:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 801114c:	2504      	movs	r5, #4
 801114e:	4545      	cmp	r5, r8
 8011150:	f107 0301 	add.w	r3, r7, #1
 8011154:	46b9      	mov	r9, r7
 8011156:	bfc8      	it	gt
 8011158:	fa5f f588 	uxtbgt.w	r5, r8
 801115c:	ebc5 0808 	rsb	r8, r5, r8
 8011160:	3d01      	subs	r5, #1
 8011162:	b2ed      	uxtb	r5, r5
 8011164:	442b      	add	r3, r5
 8011166:	930d      	str	r3, [sp, #52]	; 0x34
 8011168:	f06f 0303 	mvn.w	r3, #3
 801116c:	fb03 4307 	mla	r3, r3, r7, r4
 8011170:	930c      	str	r3, [sp, #48]	; 0x30
 8011172:	e7d6      	b.n	8011122 <_DrawBitmap+0x4aa>
 8011174:	09b3      	lsrs	r3, r6, #6
 8011176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011178:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 801117c:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 8011180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011182:	2b00      	cmp	r3, #0
 8011184:	d0d0      	beq.n	8011128 <_DrawBitmap+0x4b0>
 8011186:	689b      	ldr	r3, [r3, #8]
 8011188:	4649      	mov	r1, r9
 801118a:	9a05      	ldr	r2, [sp, #20]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011190:	4798      	blx	r3
 8011192:	e7c9      	b.n	8011128 <_DrawBitmap+0x4b0>
 8011194:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8011198:	f102 32ff 	add.w	r2, r2, #4294967295
 801119c:	ea4f 0686 	mov.w	r6, r6, lsl #2
 80111a0:	f100 0004 	add.w	r0, r0, #4
 80111a4:	bf18      	it	ne
 80111a6:	f850 1c04 	ldrne.w	r1, [r0, #-4]
 80111aa:	b2f6      	uxtb	r6, r6
 80111ac:	bf1c      	itt	ne
 80111ae:	f081 01ff 	eorne.w	r1, r1, #255	; 0xff
 80111b2:	f840 1c04 	strne.w	r1, [r0, #-4]
 80111b6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80111ba:	d1eb      	bne.n	8011194 <_DrawBitmap+0x51c>
 80111bc:	3d01      	subs	r5, #1
 80111be:	b2ed      	uxtb	r5, r5
 80111c0:	3501      	adds	r5, #1
 80111c2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f000 80d4 	beq.w	8011374 <_DrawBitmap+0x6fc>
 80111cc:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 80111d0:	2504      	movs	r5, #4
 80111d2:	429d      	cmp	r5, r3
 80111d4:	4620      	mov	r0, r4
 80111d6:	bfc8      	it	gt
 80111d8:	b2dd      	uxtbgt	r5, r3
 80111da:	1b5b      	subs	r3, r3, r5
 80111dc:	462a      	mov	r2, r5
 80111de:	e7d9      	b.n	8011194 <_DrawBitmap+0x51c>
 80111e0:	9b04      	ldr	r3, [sp, #16]
 80111e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111e4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80111e8:	4093      	lsls	r3, r2
 80111ea:	4a07      	ldr	r2, [pc, #28]	; (8011208 <_DrawBitmap+0x590>)
 80111ec:	6812      	ldr	r2, [r2, #0]
 80111ee:	b2dd      	uxtb	r5, r3
 80111f0:	7c12      	ldrb	r2, [r2, #16]
 80111f2:	f002 0203 	and.w	r2, r2, #3
 80111f6:	2a01      	cmp	r2, #1
 80111f8:	f000 8093 	beq.w	8011322 <_DrawBitmap+0x6aa>
 80111fc:	d308      	bcc.n	8011210 <_DrawBitmap+0x598>
 80111fe:	2a02      	cmp	r2, #2
 8011200:	d037      	beq.n	8011272 <_DrawBitmap+0x5fa>
 8011202:	e0b7      	b.n	8011374 <_DrawBitmap+0x6fc>
 8011204:	0801c27c 	.word	0x0801c27c
 8011208:	20000018 	.word	0x20000018
 801120c:	0801d818 	.word	0x0801d818
 8011210:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011212:	b153      	cbz	r3, 801122a <_DrawBitmap+0x5b2>
 8011214:	092d      	lsrs	r5, r5, #4
 8011216:	9a04      	ldr	r2, [sp, #16]
 8011218:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 801121c:	4692      	mov	sl, r2
 801121e:	6023      	str	r3, [r4, #0]
 8011220:	9b02      	ldr	r3, [sp, #8]
 8011222:	9c07      	ldr	r4, [sp, #28]
 8011224:	3b01      	subs	r3, #1
 8011226:	7815      	ldrb	r5, [r2, #0]
 8011228:	e000      	b.n	801122c <_DrawBitmap+0x5b4>
 801122a:	9b02      	ldr	r3, [sp, #8]
 801122c:	2b01      	cmp	r3, #1
 801122e:	dd18      	ble.n	8011262 <_DrawBitmap+0x5ea>
 8011230:	1058      	asrs	r0, r3, #1
 8011232:	f104 0208 	add.w	r2, r4, #8
 8011236:	f003 0301 	and.w	r3, r3, #1
 801123a:	eb0a 0600 	add.w	r6, sl, r0
 801123e:	0929      	lsrs	r1, r5, #4
 8011240:	f005 050f 	and.w	r5, r5, #15
 8011244:	3208      	adds	r2, #8
 8011246:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 801124a:	f842 1c10 	str.w	r1, [r2, #-16]
 801124e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8011252:	f842 1c0c 	str.w	r1, [r2, #-12]
 8011256:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 801125a:	45b2      	cmp	sl, r6
 801125c:	d1ef      	bne.n	801123e <_DrawBitmap+0x5c6>
 801125e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8011262:	2b00      	cmp	r3, #0
 8011264:	f000 8086 	beq.w	8011374 <_DrawBitmap+0x6fc>
 8011268:	092d      	lsrs	r5, r5, #4
 801126a:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 801126e:	6023      	str	r3, [r4, #0]
 8011270:	e080      	b.n	8011374 <_DrawBitmap+0x6fc>
 8011272:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011274:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011276:	b1ba      	cbz	r2, 80112a8 <_DrawBitmap+0x630>
 8011278:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801127c:	d00a      	beq.n	8011294 <_DrawBitmap+0x61c>
 801127e:	092d      	lsrs	r5, r5, #4
 8011280:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8011284:	6023      	str	r3, [r4, #0]
 8011286:	b12e      	cbz	r6, 8011294 <_DrawBitmap+0x61c>
 8011288:	68b3      	ldr	r3, [r6, #8]
 801128a:	4630      	mov	r0, r6
 801128c:	9a05      	ldr	r2, [sp, #20]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	9903      	ldr	r1, [sp, #12]
 8011292:	4798      	blx	r3
 8011294:	9b03      	ldr	r3, [sp, #12]
 8011296:	9c07      	ldr	r4, [sp, #28]
 8011298:	1c5f      	adds	r7, r3, #1
 801129a:	9b02      	ldr	r3, [sp, #8]
 801129c:	f103 38ff 	add.w	r8, r3, #4294967295
 80112a0:	9b04      	ldr	r3, [sp, #16]
 80112a2:	781d      	ldrb	r5, [r3, #0]
 80112a4:	469a      	mov	sl, r3
 80112a6:	e00f      	b.n	80112c8 <_DrawBitmap+0x650>
 80112a8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80112ac:	9f03      	ldr	r7, [sp, #12]
 80112ae:	e00b      	b.n	80112c8 <_DrawBitmap+0x650>
 80112b0:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 80112b4:	d10c      	bne.n	80112d0 <_DrawBitmap+0x658>
 80112b6:	f015 050f 	ands.w	r5, r5, #15
 80112ba:	d116      	bne.n	80112ea <_DrawBitmap+0x672>
 80112bc:	3408      	adds	r4, #8
 80112be:	3702      	adds	r7, #2
 80112c0:	f1a8 0802 	sub.w	r8, r8, #2
 80112c4:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 80112c8:	f1b8 0f01 	cmp.w	r8, #1
 80112cc:	dcf0      	bgt.n	80112b0 <_DrawBitmap+0x638>
 80112ce:	e018      	b.n	8011302 <_DrawBitmap+0x68a>
 80112d0:	092b      	lsrs	r3, r5, #4
 80112d2:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80112d6:	6023      	str	r3, [r4, #0]
 80112d8:	2e00      	cmp	r6, #0
 80112da:	d0ec      	beq.n	80112b6 <_DrawBitmap+0x63e>
 80112dc:	68b3      	ldr	r3, [r6, #8]
 80112de:	4639      	mov	r1, r7
 80112e0:	9a05      	ldr	r2, [sp, #20]
 80112e2:	4630      	mov	r0, r6
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4798      	blx	r3
 80112e8:	e7e5      	b.n	80112b6 <_DrawBitmap+0x63e>
 80112ea:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 80112ee:	6063      	str	r3, [r4, #4]
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	d0e3      	beq.n	80112bc <_DrawBitmap+0x644>
 80112f4:	68b3      	ldr	r3, [r6, #8]
 80112f6:	1c79      	adds	r1, r7, #1
 80112f8:	9a05      	ldr	r2, [sp, #20]
 80112fa:	4630      	mov	r0, r6
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4798      	blx	r3
 8011300:	e7dc      	b.n	80112bc <_DrawBitmap+0x644>
 8011302:	f1b8 0f00 	cmp.w	r8, #0
 8011306:	d035      	beq.n	8011374 <_DrawBitmap+0x6fc>
 8011308:	092d      	lsrs	r5, r5, #4
 801130a:	d033      	beq.n	8011374 <_DrawBitmap+0x6fc>
 801130c:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8011310:	6023      	str	r3, [r4, #0]
 8011312:	b37e      	cbz	r6, 8011374 <_DrawBitmap+0x6fc>
 8011314:	68b3      	ldr	r3, [r6, #8]
 8011316:	4639      	mov	r1, r7
 8011318:	9a05      	ldr	r2, [sp, #20]
 801131a:	4630      	mov	r0, r6
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4798      	blx	r3
 8011320:	e028      	b.n	8011374 <_DrawBitmap+0x6fc>
 8011322:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011324:	9a02      	ldr	r2, [sp, #8]
 8011326:	f1c3 0302 	rsb	r3, r3, #2
 801132a:	b2db      	uxtb	r3, r3
 801132c:	4293      	cmp	r3, r2
 801132e:	4626      	mov	r6, r4
 8011330:	bfc8      	it	gt
 8011332:	b2d3      	uxtbgt	r3, r2
 8011334:	1ad2      	subs	r2, r2, r3
 8011336:	4619      	mov	r1, r3
 8011338:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 801133c:	f101 31ff 	add.w	r1, r1, #4294967295
 8011340:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8011344:	f106 0604 	add.w	r6, r6, #4
 8011348:	bf18      	it	ne
 801134a:	f856 0c04 	ldrne.w	r0, [r6, #-4]
 801134e:	b2ed      	uxtb	r5, r5
 8011350:	bf1c      	itt	ne
 8011352:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8011356:	f846 0c04 	strne.w	r0, [r6, #-4]
 801135a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801135e:	d1eb      	bne.n	8011338 <_DrawBitmap+0x6c0>
 8011360:	3b01      	subs	r3, #1
 8011362:	b2db      	uxtb	r3, r3
 8011364:	3301      	adds	r3, #1
 8011366:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801136a:	b11a      	cbz	r2, 8011374 <_DrawBitmap+0x6fc>
 801136c:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8011370:	2302      	movs	r3, #2
 8011372:	e7db      	b.n	801132c <_DrawBitmap+0x6b4>
 8011374:	9b05      	ldr	r3, [sp, #20]
 8011376:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011378:	3301      	adds	r3, #1
 801137a:	9305      	str	r3, [sp, #20]
 801137c:	9b04      	ldr	r3, [sp, #16]
 801137e:	4413      	add	r3, r2
 8011380:	9a08      	ldr	r2, [sp, #32]
 8011382:	9304      	str	r3, [sp, #16]
 8011384:	9b07      	ldr	r3, [sp, #28]
 8011386:	4413      	add	r3, r2
 8011388:	9307      	str	r3, [sp, #28]
 801138a:	e5e4      	b.n	8010f56 <_DrawBitmap+0x2de>
 801138c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801138e:	b113      	cbz	r3, 8011396 <_DrawBitmap+0x71e>
 8011390:	a80f      	add	r0, sp, #60	; 0x3c
 8011392:	f7fb ffab 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011396:	b011      	add	sp, #68	; 0x44
 8011398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801139c <GUI_USAGE_DecUseCnt>:
 801139c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801139e:	4605      	mov	r5, r0
 80113a0:	f7fd f8e6 	bl	800e570 <GUI_Lock>
 80113a4:	4628      	mov	r0, r5
 80113a6:	f7fb ff93 	bl	800d2d0 <GUI_ALLOC_LockH>
 80113aa:	8984      	ldrh	r4, [r0, #12]
 80113ac:	ab02      	add	r3, sp, #8
 80113ae:	3c01      	subs	r4, #1
 80113b0:	f843 0d04 	str.w	r0, [r3, #-4]!
 80113b4:	b224      	sxth	r4, r4
 80113b6:	8184      	strh	r4, [r0, #12]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fb ff97 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80113be:	b914      	cbnz	r4, 80113c6 <GUI_USAGE_DecUseCnt+0x2a>
 80113c0:	4628      	mov	r0, r5
 80113c2:	f7fb ffc3 	bl	800d34c <GUI_ALLOC_Free>
 80113c6:	f7fd f8c9 	bl	800e55c <GUI_Unlock>
 80113ca:	b003      	add	sp, #12
 80113cc:	bd30      	pop	{r4, r5, pc}

080113ce <GUI_USAGE_AddRect>:
 80113ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113d2:	9c08      	ldr	r4, [sp, #32]
 80113d4:	4605      	mov	r5, r0
 80113d6:	4688      	mov	r8, r1
 80113d8:	4699      	mov	r9, r3
 80113da:	4414      	add	r4, r2
 80113dc:	68ab      	ldr	r3, [r5, #8]
 80113de:	1c56      	adds	r6, r2, #1
 80113e0:	4641      	mov	r1, r8
 80113e2:	4628      	mov	r0, r5
 80113e4:	685f      	ldr	r7, [r3, #4]
 80113e6:	464b      	mov	r3, r9
 80113e8:	47b8      	blx	r7
 80113ea:	42b4      	cmp	r4, r6
 80113ec:	4632      	mov	r2, r6
 80113ee:	d1f5      	bne.n	80113dc <GUI_USAGE_AddRect+0xe>
 80113f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080113f4 <_ClipX>:
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	4c0f      	ldr	r4, [pc, #60]	; (8011434 <_ClipX+0x40>)
 80113f8:	680d      	ldr	r5, [r1, #0]
 80113fa:	6826      	ldr	r6, [r4, #0]
 80113fc:	4405      	add	r5, r0
 80113fe:	f9b6 400c 	ldrsh.w	r4, [r6, #12]
 8011402:	3d01      	subs	r5, #1
 8011404:	1b2c      	subs	r4, r5, r4
 8011406:	2c00      	cmp	r4, #0
 8011408:	bfc8      	it	gt
 801140a:	1b00      	subgt	r0, r0, r4
 801140c:	6010      	str	r0, [r2, #0]
 801140e:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8011412:	680c      	ldr	r4, [r1, #0]
 8011414:	42a0      	cmp	r0, r4
 8011416:	dd09      	ble.n	801142c <_ClipX+0x38>
 8011418:	1b00      	subs	r0, r0, r4
 801141a:	6018      	str	r0, [r3, #0]
 801141c:	680c      	ldr	r4, [r1, #0]
 801141e:	4420      	add	r0, r4
 8011420:	6008      	str	r0, [r1, #0]
 8011422:	6811      	ldr	r1, [r2, #0]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	1ac9      	subs	r1, r1, r3
 8011428:	6011      	str	r1, [r2, #0]
 801142a:	bd70      	pop	{r4, r5, r6, pc}
 801142c:	2200      	movs	r2, #0
 801142e:	601a      	str	r2, [r3, #0]
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	bf00      	nop
 8011434:	20000018 	.word	0x20000018

08011438 <_ClipY>:
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	4c0f      	ldr	r4, [pc, #60]	; (8011478 <_ClipY+0x40>)
 801143c:	680d      	ldr	r5, [r1, #0]
 801143e:	6826      	ldr	r6, [r4, #0]
 8011440:	4405      	add	r5, r0
 8011442:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
 8011446:	3d01      	subs	r5, #1
 8011448:	1b2c      	subs	r4, r5, r4
 801144a:	2c00      	cmp	r4, #0
 801144c:	bfc8      	it	gt
 801144e:	1b00      	subgt	r0, r0, r4
 8011450:	6010      	str	r0, [r2, #0]
 8011452:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
 8011456:	680c      	ldr	r4, [r1, #0]
 8011458:	4284      	cmp	r4, r0
 801145a:	da09      	bge.n	8011470 <_ClipY+0x38>
 801145c:	1b00      	subs	r0, r0, r4
 801145e:	6018      	str	r0, [r3, #0]
 8011460:	680c      	ldr	r4, [r1, #0]
 8011462:	4420      	add	r0, r4
 8011464:	6008      	str	r0, [r1, #0]
 8011466:	6811      	ldr	r1, [r2, #0]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	1ac9      	subs	r1, r1, r3
 801146c:	6011      	str	r1, [r2, #0]
 801146e:	bd70      	pop	{r4, r5, r6, pc}
 8011470:	2200      	movs	r2, #0
 8011472:	601a      	str	r2, [r3, #0]
 8011474:	bd70      	pop	{r4, r5, r6, pc}
 8011476:	bf00      	nop
 8011478:	20000018 	.word	0x20000018

0801147c <_WriteToActiveAlpha>:
 801147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011480:	b095      	sub	sp, #84	; 0x54
 8011482:	461f      	mov	r7, r3
 8011484:	4680      	mov	r8, r0
 8011486:	910d      	str	r1, [sp, #52]	; 0x34
 8011488:	920c      	str	r2, [sp, #48]	; 0x30
 801148a:	f7fb ff21 	bl	800d2d0 <GUI_ALLOC_LockH>
 801148e:	4603      	mov	r3, r0
 8011490:	a814      	add	r0, sp, #80	; 0x50
 8011492:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8011496:	f840 3d18 	str.w	r3, [r0, #-24]!
 801149a:	f9b3 500a 	ldrsh.w	r5, [r3, #10]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	691b      	ldr	r3, [r3, #16]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	9307      	str	r3, [sp, #28]
 80114a6:	f7fb ff21 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80114aa:	4b43      	ldr	r3, [pc, #268]	; (80115b8 <_WriteToActiveAlpha+0x13c>)
 80114ac:	2108      	movs	r1, #8
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	7c5a      	ldrb	r2, [r3, #17]
 80114b2:	4b42      	ldr	r3, [pc, #264]	; (80115bc <_WriteToActiveAlpha+0x140>)
 80114b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80114b8:	68c3      	ldr	r3, [r0, #12]
 80114ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114bc:	4798      	blx	r3
 80114be:	2817      	cmp	r0, #23
 80114c0:	4604      	mov	r4, r0
 80114c2:	d804      	bhi.n	80114ce <_WriteToActiveAlpha+0x52>
 80114c4:	2803      	cmp	r0, #3
 80114c6:	bf14      	ite	ne
 80114c8:	4604      	movne	r4, r0
 80114ca:	2408      	moveq	r4, #8
 80114cc:	e000      	b.n	80114d0 <_WriteToActiveAlpha+0x54>
 80114ce:	2420      	movs	r4, #32
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2000      	movs	r0, #0
 80114d4:	9308      	str	r3, [sp, #32]
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	9309      	str	r3, [sp, #36]	; 0x24
 80114da:	f7fd fb0d 	bl	800eaf8 <GUI__AllocAlphaBuffer>
 80114de:	2800      	cmp	r0, #0
 80114e0:	d166      	bne.n	80115b0 <_WriteToActiveAlpha+0x134>
 80114e2:	ab0f      	add	r3, sp, #60	; 0x3c
 80114e4:	aa11      	add	r2, sp, #68	; 0x44
 80114e6:	a90d      	add	r1, sp, #52	; 0x34
 80114e8:	4630      	mov	r0, r6
 80114ea:	f7ff ff83 	bl	80113f4 <_ClipX>
 80114ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	dd5d      	ble.n	80115b0 <_WriteToActiveAlpha+0x134>
 80114f4:	ab10      	add	r3, sp, #64	; 0x40
 80114f6:	aa12      	add	r2, sp, #72	; 0x48
 80114f8:	a90c      	add	r1, sp, #48	; 0x30
 80114fa:	4628      	mov	r0, r5
 80114fc:	f7ff ff9c 	bl	8011438 <_ClipY>
 8011500:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011502:	2b00      	cmp	r3, #0
 8011504:	dd54      	ble.n	80115b0 <_WriteToActiveAlpha+0x134>
 8011506:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80115c0 <_WriteToActiveAlpha+0x144>
 801150a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801150c:	4640      	mov	r0, r8
 801150e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011510:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011512:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011516:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801151a:	920b      	str	r2, [sp, #44]	; 0x2c
 801151c:	930a      	str	r3, [sp, #40]	; 0x28
 801151e:	f008 f925 	bl	801976c <GUI_MEMDEV_GetDataPtr>
 8011522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011524:	ab13      	add	r3, sp, #76	; 0x4c
 8011526:	4649      	mov	r1, r9
 8011528:	fb05 2206 	mla	r2, r5, r6, r2
 801152c:	9301      	str	r3, [sp, #4]
 801152e:	9b07      	ldr	r3, [sp, #28]
 8011530:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011534:	4658      	mov	r0, fp
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801153a:	f7fd f9fb 	bl	800e934 <GUI__DoAlphaBlending>
 801153e:	4605      	mov	r5, r0
 8011540:	2800      	cmp	r0, #0
 8011542:	d035      	beq.n	80115b0 <_WriteToActiveAlpha+0x134>
 8011544:	9b08      	ldr	r3, [sp, #32]
 8011546:	4553      	cmp	r3, sl
 8011548:	d01b      	beq.n	8011582 <_WriteToActiveAlpha+0x106>
 801154a:	463b      	mov	r3, r7
 801154c:	4622      	mov	r2, r4
 801154e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011550:	f007 fdb1 	bl	80190b6 <GUI__CompactPixelIndicesEx>
 8011554:	b9a8      	cbnz	r0, 8011582 <_WriteToActiveAlpha+0x106>
 8011556:	f8d7 b010 	ldr.w	fp, [r7, #16]
 801155a:	f1bb 0f00 	cmp.w	fp, #0
 801155e:	d005      	beq.n	801156c <_WriteToActiveAlpha+0xf0>
 8011560:	2304      	movs	r3, #4
 8011562:	4632      	mov	r2, r6
 8011564:	4629      	mov	r1, r5
 8011566:	4628      	mov	r0, r5
 8011568:	47d8      	blx	fp
 801156a:	e00a      	b.n	8011582 <_WriteToActiveAlpha+0x106>
 801156c:	46a9      	mov	r9, r5
 801156e:	46b3      	mov	fp, r6
 8011570:	f8d9 0000 	ldr.w	r0, [r9]
 8011574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011576:	4798      	blx	r3
 8011578:	f1bb 0b01 	subs.w	fp, fp, #1
 801157c:	f849 0b04 	str.w	r0, [r9], #4
 8011580:	d1f6      	bne.n	8011570 <_WriteToActiveAlpha+0xf4>
 8011582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011584:	9504      	str	r5, [sp, #16]
 8011586:	1c4b      	adds	r3, r1, #1
 8011588:	9402      	str	r4, [sp, #8]
 801158a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801158c:	930c      	str	r3, [sp, #48]	; 0x30
 801158e:	2300      	movs	r3, #0
 8011590:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011592:	9305      	str	r3, [sp, #20]
 8011594:	9303      	str	r3, [sp, #12]
 8011596:	2301      	movs	r3, #1
 8011598:	9301      	str	r3, [sp, #4]
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	f7fd fe58 	bl	800f250 <LCD_DrawBitmap>
 80115a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115a2:	3301      	adds	r3, #1
 80115a4:	9310      	str	r3, [sp, #64]	; 0x40
 80115a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80115a8:	3b01      	subs	r3, #1
 80115aa:	9312      	str	r3, [sp, #72]	; 0x48
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d1ac      	bne.n	801150a <_WriteToActiveAlpha+0x8e>
 80115b0:	b015      	add	sp, #84	; 0x54
 80115b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b6:	bf00      	nop
 80115b8:	20000018 	.word	0x20000018
 80115bc:	2002260c 	.word	0x2002260c
 80115c0:	0800d0ff 	.word	0x0800d0ff

080115c4 <GUI_MEMDEV__WriteToActiveAlpha>:
 80115c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c8:	4d45      	ldr	r5, [pc, #276]	; (80116e0 <GUI_MEMDEV__WriteToActiveAlpha+0x11c>)
 80115ca:	b08c      	sub	sp, #48	; 0x30
 80115cc:	4b45      	ldr	r3, [pc, #276]	; (80116e4 <GUI_MEMDEV__WriteToActiveAlpha+0x120>)
 80115ce:	4607      	mov	r7, r0
 80115d0:	f8d5 e000 	ldr.w	lr, [r5]
 80115d4:	4e44      	ldr	r6, [pc, #272]	; (80116e8 <GUI_MEMDEV__WriteToActiveAlpha+0x124>)
 80115d6:	f89e 4011 	ldrb.w	r4, [lr, #17]
 80115da:	f8d6 c000 	ldr.w	ip, [r6]
 80115de:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80115e2:	9105      	str	r1, [sp, #20]
 80115e4:	9204      	str	r2, [sp, #16]
 80115e6:	6923      	ldr	r3, [r4, #16]
 80115e8:	f1bc 0f00 	cmp.w	ip, #0
 80115ec:	d012      	beq.n	8011614 <GUI_MEMDEV__WriteToActiveAlpha+0x50>
 80115ee:	68e2      	ldr	r2, [r4, #12]
 80115f0:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
 80115f4:	6812      	ldr	r2, [r2, #0]
 80115f6:	b919      	cbnz	r1, 8011600 <GUI_MEMDEV__WriteToActiveAlpha+0x3c>
 80115f8:	fab2 f282 	clz	r2, r2
 80115fc:	0952      	lsrs	r2, r2, #5
 80115fe:	e005      	b.n	801160c <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 8011600:	2a07      	cmp	r2, #7
 8011602:	d004      	beq.n	801160e <GUI_MEMDEV__WriteToActiveAlpha+0x4a>
 8011604:	4a39      	ldr	r2, [pc, #228]	; (80116ec <GUI_MEMDEV__WriteToActiveAlpha+0x128>)
 8011606:	1a99      	subs	r1, r3, r2
 8011608:	424a      	negs	r2, r1
 801160a:	414a      	adcs	r2, r1
 801160c:	b92a      	cbnz	r2, 801161a <GUI_MEMDEV__WriteToActiveAlpha+0x56>
 801160e:	9a04      	ldr	r2, [sp, #16]
 8011610:	4638      	mov	r0, r7
 8011612:	9905      	ldr	r1, [sp, #20]
 8011614:	f7ff ff32 	bl	801147c <_WriteToActiveAlpha>
 8011618:	e05f      	b.n	80116da <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801161a:	4638      	mov	r0, r7
 801161c:	f7fb fe58 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011620:	4603      	mov	r3, r0
 8011622:	a80c      	add	r0, sp, #48	; 0x30
 8011624:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8011628:	f840 3d08 	str.w	r3, [r0, #-8]!
 801162c:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 8011630:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8011634:	f7fb fe5a 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011638:	ab08      	add	r3, sp, #32
 801163a:	aa06      	add	r2, sp, #24
 801163c:	a905      	add	r1, sp, #20
 801163e:	4620      	mov	r0, r4
 8011640:	f7ff fed8 	bl	80113f4 <_ClipX>
 8011644:	9b06      	ldr	r3, [sp, #24]
 8011646:	2b00      	cmp	r3, #0
 8011648:	dd47      	ble.n	80116da <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801164a:	ab09      	add	r3, sp, #36	; 0x24
 801164c:	aa07      	add	r2, sp, #28
 801164e:	a904      	add	r1, sp, #16
 8011650:	4648      	mov	r0, r9
 8011652:	f7ff fef1 	bl	8011438 <_ClipY>
 8011656:	9b07      	ldr	r3, [sp, #28]
 8011658:	2b00      	cmp	r3, #0
 801165a:	dd3e      	ble.n	80116da <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801165c:	4638      	mov	r0, r7
 801165e:	f008 f885 	bl	801976c <GUI_MEMDEV_GetDataPtr>
 8011662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011664:	9f08      	ldr	r7, [sp, #32]
 8011666:	fb03 7704 	mla	r7, r3, r4, r7
 801166a:	682b      	ldr	r3, [r5, #0]
 801166c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8011670:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011672:	b328      	cbz	r0, 80116c0 <GUI_MEMDEV__WriteToActiveAlpha+0xfc>
 8011674:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011678:	9d04      	ldr	r5, [sp, #16]
 801167a:	f7fb fe29 	bl	800d2d0 <GUI_ALLOC_LockH>
 801167e:	4604      	mov	r4, r0
 8011680:	a80c      	add	r0, sp, #48	; 0x30
 8011682:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011686:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801168a:	1aed      	subs	r5, r5, r3
 801168c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011690:	f840 4d04 	str.w	r4, [r0, #-4]!
 8011694:	ebc3 0909 	rsb	r9, r3, r9
 8011698:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801169c:	fb0a 9505 	mla	r5, sl, r5, r9
 80116a0:	3518      	adds	r5, #24
 80116a2:	442c      	add	r4, r5
 80116a4:	f7fb fe22 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80116a8:	b1bc      	cbz	r4, 80116da <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 80116aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80116ae:	4639      	mov	r1, r7
 80116b0:	f8cd a000 	str.w	sl, [sp]
 80116b4:	4620      	mov	r0, r4
 80116b6:	6835      	ldr	r5, [r6, #0]
 80116b8:	9b07      	ldr	r3, [sp, #28]
 80116ba:	9a06      	ldr	r2, [sp, #24]
 80116bc:	47a8      	blx	r5
 80116be:	e00c      	b.n	80116da <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 80116c0:	7c58      	ldrb	r0, [r3, #17]
 80116c2:	00a4      	lsls	r4, r4, #2
 80116c4:	9b07      	ldr	r3, [sp, #28]
 80116c6:	9402      	str	r4, [sp, #8]
 80116c8:	9301      	str	r3, [sp, #4]
 80116ca:	9b06      	ldr	r3, [sp, #24]
 80116cc:	9a04      	ldr	r2, [sp, #16]
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	4b07      	ldr	r3, [pc, #28]	; (80116f0 <GUI_MEMDEV__WriteToActiveAlpha+0x12c>)
 80116d2:	9905      	ldr	r1, [sp, #20]
 80116d4:	681c      	ldr	r4, [r3, #0]
 80116d6:	463b      	mov	r3, r7
 80116d8:	47a0      	blx	r4
 80116da:	b00c      	add	sp, #48	; 0x30
 80116dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e0:	20000018 	.word	0x20000018
 80116e4:	2002260c 	.word	0x2002260c
 80116e8:	20022620 	.word	0x20022620
 80116ec:	0801ba8c 	.word	0x0801ba8c
 80116f0:	2002261c 	.word	0x2002261c

080116f4 <_OnExit>:
 80116f4:	b570      	push	{r4, r5, r6, lr}
 80116f6:	4b1a      	ldr	r3, [pc, #104]	; (8011760 <_OnExit+0x6c>)
 80116f8:	2400      	movs	r4, #0
 80116fa:	4d1a      	ldr	r5, [pc, #104]	; (8011764 <_OnExit+0x70>)
 80116fc:	601c      	str	r4, [r3, #0]
 80116fe:	4621      	mov	r1, r4
 8011700:	4b19      	ldr	r3, [pc, #100]	; (8011768 <_OnExit+0x74>)
 8011702:	481a      	ldr	r0, [pc, #104]	; (801176c <_OnExit+0x78>)
 8011704:	601c      	str	r4, [r3, #0]
 8011706:	605c      	str	r4, [r3, #4]
 8011708:	300c      	adds	r0, #12
 801170a:	4b19      	ldr	r3, [pc, #100]	; (8011770 <_OnExit+0x7c>)
 801170c:	4a19      	ldr	r2, [pc, #100]	; (8011774 <_OnExit+0x80>)
 801170e:	601c      	str	r4, [r3, #0]
 8011710:	4b19      	ldr	r3, [pc, #100]	; (8011778 <_OnExit+0x84>)
 8011712:	f800 4c0c 	strb.w	r4, [r0, #-12]
 8011716:	601c      	str	r4, [r3, #0]
 8011718:	4b18      	ldr	r3, [pc, #96]	; (801177c <_OnExit+0x88>)
 801171a:	f840 4c08 	str.w	r4, [r0, #-8]
 801171e:	601c      	str	r4, [r3, #0]
 8011720:	4b17      	ldr	r3, [pc, #92]	; (8011780 <_OnExit+0x8c>)
 8011722:	6014      	str	r4, [r2, #0]
 8011724:	6054      	str	r4, [r2, #4]
 8011726:	2218      	movs	r2, #24
 8011728:	601c      	str	r4, [r3, #0]
 801172a:	f840 4c04 	str.w	r4, [r0, #-4]
 801172e:	682b      	ldr	r3, [r5, #0]
 8011730:	4798      	blx	r3
 8011732:	4b14      	ldr	r3, [pc, #80]	; (8011784 <_OnExit+0x90>)
 8011734:	4621      	mov	r1, r4
 8011736:	2210      	movs	r2, #16
 8011738:	601c      	str	r4, [r3, #0]
 801173a:	4b13      	ldr	r3, [pc, #76]	; (8011788 <_OnExit+0x94>)
 801173c:	4813      	ldr	r0, [pc, #76]	; (801178c <_OnExit+0x98>)
 801173e:	601c      	str	r4, [r3, #0]
 8011740:	605c      	str	r4, [r3, #4]
 8011742:	682b      	ldr	r3, [r5, #0]
 8011744:	4798      	blx	r3
 8011746:	682b      	ldr	r3, [r5, #0]
 8011748:	4621      	mov	r1, r4
 801174a:	2210      	movs	r2, #16
 801174c:	4810      	ldr	r0, [pc, #64]	; (8011790 <_OnExit+0x9c>)
 801174e:	4798      	blx	r3
 8011750:	682b      	ldr	r3, [r5, #0]
 8011752:	4621      	mov	r1, r4
 8011754:	2210      	movs	r2, #16
 8011756:	480f      	ldr	r0, [pc, #60]	; (8011794 <_OnExit+0xa0>)
 8011758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801175c:	4718      	bx	r3
 801175e:	bf00      	nop
 8011760:	2002266c 	.word	0x2002266c
 8011764:	2000003c 	.word	0x2000003c
 8011768:	20022674 	.word	0x20022674
 801176c:	2000044c 	.word	0x2000044c
 8011770:	20022680 	.word	0x20022680
 8011774:	20022640 	.word	0x20022640
 8011778:	2002262c 	.word	0x2002262c
 801177c:	20022660 	.word	0x20022660
 8011780:	20022670 	.word	0x20022670
 8011784:	2002263c 	.word	0x2002263c
 8011788:	20022630 	.word	0x20022630
 801178c:	200226a4 	.word	0x200226a4
 8011790:	20022694 	.word	0x20022694
 8011794:	20022684 	.word	0x20022684

08011798 <_Paint1>:
 8011798:	b510      	push	{r4, lr}
 801179a:	4604      	mov	r4, r0
 801179c:	f7fb fd8e 	bl	800d2bc <GUI_ALLOC_h2p>
 80117a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80117a2:	4a05      	ldr	r2, [pc, #20]	; (80117b8 <_Paint1+0x20>)
 80117a4:	4620      	mov	r0, r4
 80117a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80117aa:	4b04      	ldr	r3, [pc, #16]	; (80117bc <_Paint1+0x24>)
 80117ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b0:	bf08      	it	eq
 80117b2:	4613      	moveq	r3, r2
 80117b4:	4718      	bx	r3
 80117b6:	bf00      	nop
 80117b8:	080126f5 	.word	0x080126f5
 80117bc:	08019a79 	.word	0x08019a79

080117c0 <_Findy1>:
 80117c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117c2:	b085      	sub	sp, #20
 80117c4:	4607      	mov	r7, r0
 80117c6:	460c      	mov	r4, r1
 80117c8:	4616      	mov	r6, r2
 80117ca:	ad02      	add	r5, sp, #8
 80117cc:	2f00      	cmp	r7, #0
 80117ce:	d048      	beq.n	8011862 <_Findy1+0xa2>
 80117d0:	4638      	mov	r0, r7
 80117d2:	f7fb fd7d 	bl	800d2d0 <GUI_ALLOC_LockH>
 80117d6:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80117d8:	4601      	mov	r1, r0
 80117da:	9001      	str	r0, [sp, #4]
 80117dc:	07bb      	lsls	r3, r7, #30
 80117de:	d53a      	bpl.n	8011856 <_Findy1+0x96>
 80117e0:	b126      	cbz	r6, 80117ec <_Findy1+0x2c>
 80117e2:	4632      	mov	r2, r6
 80117e4:	4628      	mov	r0, r5
 80117e6:	f7fd fb17 	bl	800ee18 <GUI__IntersectRects>
 80117ea:	e002      	b.n	80117f2 <_Findy1+0x32>
 80117ec:	c803      	ldmia	r0, {r0, r1}
 80117ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80117f2:	4629      	mov	r1, r5
 80117f4:	4620      	mov	r0, r4
 80117f6:	f7fc f8c5 	bl	800d984 <GUI_RectsIntersect>
 80117fa:	b360      	cbz	r0, 8011856 <_Findy1+0x96>
 80117fc:	f017 0f01 	tst.w	r7, #1
 8011800:	9b01      	ldr	r3, [sp, #4]
 8011802:	d11c      	bne.n	801183e <_Findy1+0x7e>
 8011804:	b13e      	cbz	r6, 8011816 <_Findy1+0x56>
 8011806:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801180a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801180e:	4293      	cmp	r3, r2
 8011810:	bfb8      	it	lt
 8011812:	4613      	movlt	r3, r2
 8011814:	e001      	b.n	801181a <_Findy1+0x5a>
 8011816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801181a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801181e:	4293      	cmp	r3, r2
 8011820:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011824:	dd05      	ble.n	8011832 <_Findy1+0x72>
 8011826:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801182a:	429a      	cmp	r2, r3
 801182c:	db13      	blt.n	8011856 <_Findy1+0x96>
 801182e:	3b01      	subs	r3, #1
 8011830:	e003      	b.n	801183a <_Findy1+0x7a>
 8011832:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011836:	429a      	cmp	r2, r3
 8011838:	dd0d      	ble.n	8011856 <_Findy1+0x96>
 801183a:	80e3      	strh	r3, [r4, #6]
 801183c:	e00b      	b.n	8011856 <_Findy1+0x96>
 801183e:	69df      	ldr	r7, [r3, #28]
 8011840:	b14f      	cbz	r7, 8011856 <_Findy1+0x96>
 8011842:	4638      	mov	r0, r7
 8011844:	462a      	mov	r2, r5
 8011846:	4621      	mov	r1, r4
 8011848:	f7ff ffba 	bl	80117c0 <_Findy1>
 801184c:	4638      	mov	r0, r7
 801184e:	f7fb fd35 	bl	800d2bc <GUI_ALLOC_h2p>
 8011852:	6a07      	ldr	r7, [r0, #32]
 8011854:	e7f4      	b.n	8011840 <_Findy1+0x80>
 8011856:	9b01      	ldr	r3, [sp, #4]
 8011858:	a801      	add	r0, sp, #4
 801185a:	6a1f      	ldr	r7, [r3, #32]
 801185c:	f7fb fd46 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011860:	e7b4      	b.n	80117cc <_Findy1+0xc>
 8011862:	b005      	add	sp, #20
 8011864:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011866 <_Findx0>:
 8011866:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801186a:	4606      	mov	r6, r0
 801186c:	460f      	mov	r7, r1
 801186e:	4690      	mov	r8, r2
 8011870:	2500      	movs	r5, #0
 8011872:	ac02      	add	r4, sp, #8
 8011874:	2e00      	cmp	r6, #0
 8011876:	d035      	beq.n	80118e4 <_Findx0+0x7e>
 8011878:	4630      	mov	r0, r6
 801187a:	f7fb fd29 	bl	800d2d0 <GUI_ALLOC_LockH>
 801187e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8011880:	4601      	mov	r1, r0
 8011882:	9001      	str	r0, [sp, #4]
 8011884:	07b2      	lsls	r2, r6, #30
 8011886:	d527      	bpl.n	80118d8 <_Findx0+0x72>
 8011888:	f1b8 0f00 	cmp.w	r8, #0
 801188c:	d004      	beq.n	8011898 <_Findx0+0x32>
 801188e:	4642      	mov	r2, r8
 8011890:	4620      	mov	r0, r4
 8011892:	f7fd fac1 	bl	800ee18 <GUI__IntersectRects>
 8011896:	e002      	b.n	801189e <_Findx0+0x38>
 8011898:	c803      	ldmia	r0, {r0, r1}
 801189a:	e884 0003 	stmia.w	r4, {r0, r1}
 801189e:	4621      	mov	r1, r4
 80118a0:	4638      	mov	r0, r7
 80118a2:	f7fc f86f 	bl	800d984 <GUI_RectsIntersect>
 80118a6:	b1b8      	cbz	r0, 80118d8 <_Findx0+0x72>
 80118a8:	07f3      	lsls	r3, r6, #31
 80118aa:	d405      	bmi.n	80118b8 <_Findx0+0x52>
 80118ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80118b0:	2501      	movs	r5, #1
 80118b2:	3301      	adds	r3, #1
 80118b4:	803b      	strh	r3, [r7, #0]
 80118b6:	e00f      	b.n	80118d8 <_Findx0+0x72>
 80118b8:	9b01      	ldr	r3, [sp, #4]
 80118ba:	69de      	ldr	r6, [r3, #28]
 80118bc:	b166      	cbz	r6, 80118d8 <_Findx0+0x72>
 80118be:	4622      	mov	r2, r4
 80118c0:	4639      	mov	r1, r7
 80118c2:	4630      	mov	r0, r6
 80118c4:	f7ff ffcf 	bl	8011866 <_Findx0>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	4630      	mov	r0, r6
 80118cc:	bf18      	it	ne
 80118ce:	2501      	movne	r5, #1
 80118d0:	f7fb fcf4 	bl	800d2bc <GUI_ALLOC_h2p>
 80118d4:	6a06      	ldr	r6, [r0, #32]
 80118d6:	e7f1      	b.n	80118bc <_Findx0+0x56>
 80118d8:	9b01      	ldr	r3, [sp, #4]
 80118da:	a801      	add	r0, sp, #4
 80118dc:	6a1e      	ldr	r6, [r3, #32]
 80118de:	f7fb fd05 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80118e2:	e7c7      	b.n	8011874 <_Findx0+0xe>
 80118e4:	4628      	mov	r0, r5
 80118e6:	b004      	add	sp, #16
 80118e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118ec <_Findx1>:
 80118ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ee:	b085      	sub	sp, #20
 80118f0:	4605      	mov	r5, r0
 80118f2:	460e      	mov	r6, r1
 80118f4:	4617      	mov	r7, r2
 80118f6:	ac02      	add	r4, sp, #8
 80118f8:	b37d      	cbz	r5, 801195a <_Findx1+0x6e>
 80118fa:	4628      	mov	r0, r5
 80118fc:	f7fb fce8 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011900:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8011902:	4601      	mov	r1, r0
 8011904:	9001      	str	r0, [sp, #4]
 8011906:	07aa      	lsls	r2, r5, #30
 8011908:	d521      	bpl.n	801194e <_Findx1+0x62>
 801190a:	b127      	cbz	r7, 8011916 <_Findx1+0x2a>
 801190c:	463a      	mov	r2, r7
 801190e:	4620      	mov	r0, r4
 8011910:	f7fd fa82 	bl	800ee18 <GUI__IntersectRects>
 8011914:	e002      	b.n	801191c <_Findx1+0x30>
 8011916:	c803      	ldmia	r0, {r0, r1}
 8011918:	e884 0003 	stmia.w	r4, {r0, r1}
 801191c:	4621      	mov	r1, r4
 801191e:	4630      	mov	r0, r6
 8011920:	f7fc f830 	bl	800d984 <GUI_RectsIntersect>
 8011924:	b198      	cbz	r0, 801194e <_Findx1+0x62>
 8011926:	07eb      	lsls	r3, r5, #31
 8011928:	d404      	bmi.n	8011934 <_Findx1+0x48>
 801192a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801192e:	3b01      	subs	r3, #1
 8011930:	80b3      	strh	r3, [r6, #4]
 8011932:	e00c      	b.n	801194e <_Findx1+0x62>
 8011934:	9b01      	ldr	r3, [sp, #4]
 8011936:	69dd      	ldr	r5, [r3, #28]
 8011938:	b14d      	cbz	r5, 801194e <_Findx1+0x62>
 801193a:	4628      	mov	r0, r5
 801193c:	4622      	mov	r2, r4
 801193e:	4631      	mov	r1, r6
 8011940:	f7ff ffd4 	bl	80118ec <_Findx1>
 8011944:	4628      	mov	r0, r5
 8011946:	f7fb fcb9 	bl	800d2bc <GUI_ALLOC_h2p>
 801194a:	6a05      	ldr	r5, [r0, #32]
 801194c:	e7f4      	b.n	8011938 <_Findx1+0x4c>
 801194e:	9b01      	ldr	r3, [sp, #4]
 8011950:	a801      	add	r0, sp, #4
 8011952:	6a1d      	ldr	r5, [r3, #32]
 8011954:	f7fb fcca 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011958:	e7ce      	b.n	80118f8 <_Findx1+0xc>
 801195a:	b005      	add	sp, #20
 801195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011960 <_Paint1Trans>:
 8011960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011964:	4d21      	ldr	r5, [pc, #132]	; (80119ec <_Paint1Trans+0x8c>)
 8011966:	4607      	mov	r7, r0
 8011968:	ac02      	add	r4, sp, #8
 801196a:	682b      	ldr	r3, [r5, #0]
 801196c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801196e:	f7fb fcaf 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011972:	9000      	str	r0, [sp, #0]
 8011974:	4638      	mov	r0, r7
 8011976:	f7fb fcab 	bl	800d2d0 <GUI_ALLOC_LockH>
 801197a:	4601      	mov	r1, r0
 801197c:	9001      	str	r0, [sp, #4]
 801197e:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8011982:	3008      	adds	r0, #8
 8011984:	f7fb fffe 	bl	800d984 <GUI_RectsIntersect>
 8011988:	4606      	mov	r6, r0
 801198a:	b328      	cbz	r0, 80119d8 <_Paint1Trans+0x78>
 801198c:	9901      	ldr	r1, [sp, #4]
 801198e:	9a00      	ldr	r2, [sp, #0]
 8011990:	682b      	ldr	r3, [r5, #0]
 8011992:	f101 0008 	add.w	r0, r1, #8
 8011996:	3208      	adds	r2, #8
 8011998:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801199a:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801199e:	f7fd fa3b 	bl	800ee18 <GUI__IntersectRects>
 80119a2:	4620      	mov	r0, r4
 80119a4:	4c12      	ldr	r4, [pc, #72]	; (80119f0 <_Paint1Trans+0x90>)
 80119a6:	f7fb fca1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80119aa:	9a01      	ldr	r2, [sp, #4]
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	a801      	add	r0, sp, #4
 80119b0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80119b4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80119b8:	64d9      	str	r1, [r3, #76]	; 0x4c
 80119ba:	651a      	str	r2, [r3, #80]	; 0x50
 80119bc:	6027      	str	r7, [r4, #0]
 80119be:	f7fb fc95 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80119c2:	4638      	mov	r0, r7
 80119c4:	f7ff fee8 	bl	8011798 <_Paint1>
 80119c8:	2300      	movs	r3, #0
 80119ca:	6023      	str	r3, [r4, #0]
 80119cc:	682b      	ldr	r3, [r5, #0]
 80119ce:	64de      	str	r6, [r3, #76]	; 0x4c
 80119d0:	2601      	movs	r6, #1
 80119d2:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 80119d6:	e005      	b.n	80119e4 <_Paint1Trans+0x84>
 80119d8:	4620      	mov	r0, r4
 80119da:	f7fb fc87 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80119de:	a801      	add	r0, sp, #4
 80119e0:	f7fb fc84 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80119e4:	4630      	mov	r0, r6
 80119e6:	b002      	add	sp, #8
 80119e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ec:	20000018 	.word	0x20000018
 80119f0:	2002262c 	.word	0x2002262c

080119f4 <_PaintTransChildren>:
 80119f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119f8:	4605      	mov	r5, r0
 80119fa:	f7fb fc69 	bl	800d2d0 <GUI_ALLOC_LockH>
 80119fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011a00:	9001      	str	r0, [sp, #4]
 8011a02:	079b      	lsls	r3, r3, #30
 8011a04:	d405      	bmi.n	8011a12 <_PaintTransChildren+0x1e>
 8011a06:	a801      	add	r0, sp, #4
 8011a08:	f7fb fc70 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011a0c:	b003      	add	sp, #12
 8011a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a12:	69c4      	ldr	r4, [r0, #28]
 8011a14:	2c00      	cmp	r4, #0
 8011a16:	d0f6      	beq.n	8011a06 <_PaintTransChildren+0x12>
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7fb fc59 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011a1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011a20:	9000      	str	r0, [sp, #0]
 8011a22:	f003 0303 	and.w	r3, r3, #3
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	d135      	bne.n	8011a96 <_PaintTransChildren+0xa2>
 8011a2a:	9901      	ldr	r1, [sp, #4]
 8011a2c:	3108      	adds	r1, #8
 8011a2e:	f7fb ffa9 	bl	800d984 <GUI_RectsIntersect>
 8011a32:	b380      	cbz	r0, 8011a96 <_PaintTransChildren+0xa2>
 8011a34:	9b01      	ldr	r3, [sp, #4]
 8011a36:	a801      	add	r0, sp, #4
 8011a38:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 8011a3c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8011a40:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 8011a44:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 8011a48:	f7fb fc50 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011a4c:	4668      	mov	r0, sp
 8011a4e:	f7fb fc4d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011a52:	4620      	mov	r0, r4
 8011a54:	f7ff ff84 	bl	8011960 <_Paint1Trans>
 8011a58:	b170      	cbz	r0, 8011a78 <_PaintTransChildren+0x84>
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f7fb fc2e 	bl	800d2bc <GUI_ALLOC_h2p>
 8011a60:	9000      	str	r0, [sp, #0]
 8011a62:	4620      	mov	r0, r4
 8011a64:	f7ff ffc6 	bl	80119f4 <_PaintTransChildren>
 8011a68:	4620      	mov	r0, r4
 8011a6a:	f7fb fc27 	bl	800d2bc <GUI_ALLOC_h2p>
 8011a6e:	9000      	str	r0, [sp, #0]
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7fb fc23 	bl	800d2bc <GUI_ALLOC_h2p>
 8011a76:	9001      	str	r0, [sp, #4]
 8011a78:	4628      	mov	r0, r5
 8011a7a:	f7fb fc29 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011a7e:	9001      	str	r0, [sp, #4]
 8011a80:	4620      	mov	r0, r4
 8011a82:	f7fb fc25 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011a86:	9b01      	ldr	r3, [sp, #4]
 8011a88:	9000      	str	r0, [sp, #0]
 8011a8a:	f8a3 9008 	strh.w	r9, [r3, #8]
 8011a8e:	f8a3 800a 	strh.w	r8, [r3, #10]
 8011a92:	819f      	strh	r7, [r3, #12]
 8011a94:	81de      	strh	r6, [r3, #14]
 8011a96:	9b00      	ldr	r3, [sp, #0]
 8011a98:	4668      	mov	r0, sp
 8011a9a:	6a1c      	ldr	r4, [r3, #32]
 8011a9c:	f7fb fc26 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011aa0:	e7b8      	b.n	8011a14 <_PaintTransChildren+0x20>
	...

08011aa4 <WM__PaintWinAndOverlays>:
 8011aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	f7fb fc12 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011aac:	f640 0301 	movw	r3, #2049	; 0x801
 8011ab0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8011ab2:	9001      	str	r0, [sp, #4]
 8011ab4:	4013      	ands	r3, r2
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d005      	beq.n	8011ac6 <WM__PaintWinAndOverlays+0x22>
 8011aba:	a801      	add	r0, sp, #4
 8011abc:	f7fb fc16 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	f7ff fe69 	bl	8011798 <_Paint1>
 8011ac6:	4b14      	ldr	r3, [pc, #80]	; (8011b18 <WM__PaintWinAndOverlays+0x74>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	b313      	cbz	r3, 8011b12 <WM__PaintWinAndOverlays+0x6e>
 8011acc:	4620      	mov	r0, r4
 8011ace:	f7ff ff91 	bl	80119f4 <_PaintTransChildren>
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f7fb fbf2 	bl	800d2bc <GUI_ALLOC_h2p>
 8011ad8:	6985      	ldr	r5, [r0, #24]
 8011ada:	6a04      	ldr	r4, [r0, #32]
 8011adc:	b1cd      	cbz	r5, 8011b12 <WM__PaintWinAndOverlays+0x6e>
 8011ade:	b194      	cbz	r4, 8011b06 <WM__PaintWinAndOverlays+0x62>
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f7fb fbeb 	bl	800d2bc <GUI_ALLOC_h2p>
 8011ae6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011ae8:	f003 0303 	and.w	r3, r3, #3
 8011aec:	2b03      	cmp	r3, #3
 8011aee:	d102      	bne.n	8011af6 <WM__PaintWinAndOverlays+0x52>
 8011af0:	4620      	mov	r0, r4
 8011af2:	f7ff ff35 	bl	8011960 <_Paint1Trans>
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7ff ff7c 	bl	80119f4 <_PaintTransChildren>
 8011afc:	4620      	mov	r0, r4
 8011afe:	f7fb fbdd 	bl	800d2bc <GUI_ALLOC_h2p>
 8011b02:	6a04      	ldr	r4, [r0, #32]
 8011b04:	e7eb      	b.n	8011ade <WM__PaintWinAndOverlays+0x3a>
 8011b06:	4628      	mov	r0, r5
 8011b08:	f7fb fbd8 	bl	800d2bc <GUI_ALLOC_h2p>
 8011b0c:	6a04      	ldr	r4, [r0, #32]
 8011b0e:	6985      	ldr	r5, [r0, #24]
 8011b10:	e7e4      	b.n	8011adc <WM__PaintWinAndOverlays+0x38>
 8011b12:	b003      	add	sp, #12
 8011b14:	bd30      	pop	{r4, r5, pc}
 8011b16:	bf00      	nop
 8011b18:	20022680 	.word	0x20022680

08011b1c <_cbPaintMemDev>:
 8011b1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b20:	4d18      	ldr	r5, [pc, #96]	; (8011b84 <_cbPaintMemDev+0x68>)
 8011b22:	4682      	mov	sl, r0
 8011b24:	ac02      	add	r4, sp, #8
 8011b26:	682b      	ldr	r3, [r5, #0]
 8011b28:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011b2a:	f7fb fbd1 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011b2e:	682a      	ldr	r2, [r5, #0]
 8011b30:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011b34:	f100 0308 	add.w	r3, r0, #8
 8011b38:	3208      	adds	r2, #8
 8011b3a:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8011b3e:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 8011b42:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8011b46:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8011b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b52:	4620      	mov	r0, r4
 8011b54:	f7fb fbca 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011b58:	f8da 0000 	ldr.w	r0, [sl]
 8011b5c:	f7ff ffa2 	bl	8011aa4 <WM__PaintWinAndOverlays>
 8011b60:	682b      	ldr	r3, [r5, #0]
 8011b62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011b64:	f7fb fbb4 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011b68:	9001      	str	r0, [sp, #4]
 8011b6a:	f8a0 9008 	strh.w	r9, [r0, #8]
 8011b6e:	f8a0 800a 	strh.w	r8, [r0, #10]
 8011b72:	8187      	strh	r7, [r0, #12]
 8011b74:	81c6      	strh	r6, [r0, #14]
 8011b76:	4620      	mov	r0, r4
 8011b78:	f7fb fbb8 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011b7c:	b002      	add	sp, #8
 8011b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b82:	bf00      	nop
 8011b84:	20000018 	.word	0x20000018

08011b88 <WM__ClipAtParentBorders>:
 8011b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	460d      	mov	r5, r1
 8011b8e:	4628      	mov	r0, r5
 8011b90:	f7fb fb9e 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011b94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011b96:	4601      	mov	r1, r0
 8011b98:	9001      	str	r0, [sp, #4]
 8011b9a:	f013 0402 	ands.w	r4, r3, #2
 8011b9e:	d104      	bne.n	8011baa <WM__ClipAtParentBorders+0x22>
 8011ba0:	a801      	add	r0, sp, #4
 8011ba2:	f7fb fba3 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	e016      	b.n	8011bd8 <WM__ClipAtParentBorders+0x50>
 8011baa:	4630      	mov	r0, r6
 8011bac:	f7fd f917 	bl	800edde <GUI__IntersectRect>
 8011bb0:	9b01      	ldr	r3, [sp, #4]
 8011bb2:	a801      	add	r0, sp, #4
 8011bb4:	699c      	ldr	r4, [r3, #24]
 8011bb6:	b954      	cbnz	r4, 8011bce <WM__ClipAtParentBorders+0x46>
 8011bb8:	f7fb fb98 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011bbc:	4b07      	ldr	r3, [pc, #28]	; (8011bdc <WM__ClipAtParentBorders+0x54>)
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	4295      	cmp	r5, r2
 8011bc2:	d008      	beq.n	8011bd6 <WM__ClipAtParentBorders+0x4e>
 8011bc4:	6858      	ldr	r0, [r3, #4]
 8011bc6:	1b43      	subs	r3, r0, r5
 8011bc8:	4258      	negs	r0, r3
 8011bca:	4158      	adcs	r0, r3
 8011bcc:	e004      	b.n	8011bd8 <WM__ClipAtParentBorders+0x50>
 8011bce:	f7fb fb8d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011bd2:	4625      	mov	r5, r4
 8011bd4:	e7db      	b.n	8011b8e <WM__ClipAtParentBorders+0x6>
 8011bd6:	2001      	movs	r0, #1
 8011bd8:	b002      	add	sp, #8
 8011bda:	bd70      	pop	{r4, r5, r6, pc}
 8011bdc:	20022630 	.word	0x20022630

08011be0 <WM__InsertWindowIntoList>:
 8011be0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011be4:	4606      	mov	r6, r0
 8011be6:	460c      	mov	r4, r1
 8011be8:	2900      	cmp	r1, #0
 8011bea:	d04c      	beq.n	8011c86 <WM__InsertWindowIntoList+0xa6>
 8011bec:	f7fb fb70 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	6184      	str	r4, [r0, #24]
 8011bf4:	9001      	str	r0, [sp, #4]
 8011bf6:	6203      	str	r3, [r0, #32]
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f7fb fb69 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011bfe:	ac04      	add	r4, sp, #16
 8011c00:	69c7      	ldr	r7, [r0, #28]
 8011c02:	f844 0d08 	str.w	r0, [r4, #-8]!
 8011c06:	b92f      	cbnz	r7, 8011c14 <WM__InsertWindowIntoList+0x34>
 8011c08:	61c6      	str	r6, [r0, #28]
 8011c0a:	a801      	add	r0, sp, #4
 8011c0c:	f7fb fb6e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011c10:	4620      	mov	r0, r4
 8011c12:	e036      	b.n	8011c82 <WM__InsertWindowIntoList+0xa2>
 8011c14:	9b01      	ldr	r3, [sp, #4]
 8011c16:	f10d 0810 	add.w	r8, sp, #16
 8011c1a:	4638      	mov	r0, r7
 8011c1c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8011c1e:	f7fb fb57 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011c22:	f848 0d04 	str.w	r0, [r8, #-4]!
 8011c26:	f005 0508 	and.w	r5, r5, #8
 8011c2a:	b975      	cbnz	r5, 8011c4a <WM__InsertWindowIntoList+0x6a>
 8011c2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c2e:	071a      	lsls	r2, r3, #28
 8011c30:	d50b      	bpl.n	8011c4a <WM__InsertWindowIntoList+0x6a>
 8011c32:	9b01      	ldr	r3, [sp, #4]
 8011c34:	a801      	add	r0, sp, #4
 8011c36:	621f      	str	r7, [r3, #32]
 8011c38:	9b02      	ldr	r3, [sp, #8]
 8011c3a:	61de      	str	r6, [r3, #28]
 8011c3c:	f7fb fb56 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011c40:	4620      	mov	r0, r4
 8011c42:	f7fb fb53 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011c46:	4640      	mov	r0, r8
 8011c48:	e01b      	b.n	8011c82 <WM__InsertWindowIntoList+0xa2>
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f7fb fb4e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011c50:	4640      	mov	r0, r8
 8011c52:	f7fb fb4b 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011c56:	4638      	mov	r0, r7
 8011c58:	f7fb fb30 	bl	800d2bc <GUI_ALLOC_h2p>
 8011c5c:	9003      	str	r0, [sp, #12]
 8011c5e:	9b03      	ldr	r3, [sp, #12]
 8011c60:	6a1c      	ldr	r4, [r3, #32]
 8011c62:	b90c      	cbnz	r4, 8011c68 <WM__InsertWindowIntoList+0x88>
 8011c64:	621e      	str	r6, [r3, #32]
 8011c66:	e00b      	b.n	8011c80 <WM__InsertWindowIntoList+0xa0>
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f7fb fb27 	bl	800d2bc <GUI_ALLOC_h2p>
 8011c6e:	2d00      	cmp	r5, #0
 8011c70:	d1f4      	bne.n	8011c5c <WM__InsertWindowIntoList+0x7c>
 8011c72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c74:	071b      	lsls	r3, r3, #28
 8011c76:	d5f1      	bpl.n	8011c5c <WM__InsertWindowIntoList+0x7c>
 8011c78:	9b03      	ldr	r3, [sp, #12]
 8011c7a:	621e      	str	r6, [r3, #32]
 8011c7c:	9b01      	ldr	r3, [sp, #4]
 8011c7e:	621c      	str	r4, [r3, #32]
 8011c80:	a801      	add	r0, sp, #4
 8011c82:	f7fb fb33 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011c86:	b004      	add	sp, #16
 8011c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c8c <WM__RemoveWindowFromList>:
 8011c8c:	b570      	push	{r4, r5, r6, lr}
 8011c8e:	4604      	mov	r4, r0
 8011c90:	f7fb fb14 	bl	800d2bc <GUI_ALLOC_h2p>
 8011c94:	4605      	mov	r5, r0
 8011c96:	6980      	ldr	r0, [r0, #24]
 8011c98:	b1a8      	cbz	r0, 8011cc6 <WM__RemoveWindowFromList+0x3a>
 8011c9a:	f7fb fb0f 	bl	800d2bc <GUI_ALLOC_h2p>
 8011c9e:	69c3      	ldr	r3, [r0, #28]
 8011ca0:	4606      	mov	r6, r0
 8011ca2:	429c      	cmp	r4, r3
 8011ca4:	d105      	bne.n	8011cb2 <WM__RemoveWindowFromList+0x26>
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f7fb fb08 	bl	800d2bc <GUI_ALLOC_h2p>
 8011cac:	6a03      	ldr	r3, [r0, #32]
 8011cae:	61f3      	str	r3, [r6, #28]
 8011cb0:	bd70      	pop	{r4, r5, r6, pc}
 8011cb2:	b143      	cbz	r3, 8011cc6 <WM__RemoveWindowFromList+0x3a>
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7fb fb01 	bl	800d2bc <GUI_ALLOC_h2p>
 8011cba:	6a03      	ldr	r3, [r0, #32]
 8011cbc:	429c      	cmp	r4, r3
 8011cbe:	d1f8      	bne.n	8011cb2 <WM__RemoveWindowFromList+0x26>
 8011cc0:	6a2b      	ldr	r3, [r5, #32]
 8011cc2:	6203      	str	r3, [r0, #32]
 8011cc4:	bd70      	pop	{r4, r5, r6, pc}
 8011cc6:	bd70      	pop	{r4, r5, r6, pc}

08011cc8 <WM__Client2Screen>:
 8011cc8:	4603      	mov	r3, r0
 8011cca:	4608      	mov	r0, r1
 8011ccc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011cd0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011cd4:	f7fb bdad 	b.w	800d832 <GUI_MoveRect>

08011cd8 <_SetClipRectUserIntersect>:
 8011cd8:	4b11      	ldr	r3, [pc, #68]	; (8011d20 <_SetClipRectUserIntersect+0x48>)
 8011cda:	b530      	push	{r4, r5, lr}
 8011cdc:	681c      	ldr	r4, [r3, #0]
 8011cde:	b085      	sub	sp, #20
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011ce4:	b1ba      	cbz	r2, 8011d16 <_SetClipRectUserIntersect+0x3e>
 8011ce6:	6810      	ldr	r0, [r2, #0]
 8011ce8:	ab02      	add	r3, sp, #8
 8011cea:	6851      	ldr	r1, [r2, #4]
 8011cec:	c303      	stmia	r3!, {r0, r1}
 8011cee:	4b0d      	ldr	r3, [pc, #52]	; (8011d24 <_SetClipRectUserIntersect+0x4c>)
 8011cf0:	6818      	ldr	r0, [r3, #0]
 8011cf2:	b900      	cbnz	r0, 8011cf6 <_SetClipRectUserIntersect+0x1e>
 8011cf4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011cf6:	ac04      	add	r4, sp, #16
 8011cf8:	f7fb faea 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011cfc:	a902      	add	r1, sp, #8
 8011cfe:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8011d02:	f7ff ffe1 	bl	8011cc8 <WM__Client2Screen>
 8011d06:	4620      	mov	r0, r4
 8011d08:	f7fb faf0 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011d0c:	a802      	add	r0, sp, #8
 8011d0e:	4629      	mov	r1, r5
 8011d10:	f7fd f865 	bl	800edde <GUI__IntersectRect>
 8011d14:	a802      	add	r0, sp, #8
 8011d16:	f007 fa75 	bl	8019204 <LCD_SetClipRectEx>
 8011d1a:	b005      	add	sp, #20
 8011d1c:	bd30      	pop	{r4, r5, pc}
 8011d1e:	bf00      	nop
 8011d20:	20000018 	.word	0x20000018
 8011d24:	2002262c 	.word	0x2002262c

08011d28 <WM__ActivateClipRect>:
 8011d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d2a:	4b0e      	ldr	r3, [pc, #56]	; (8011d64 <WM__ActivateClipRect+0x3c>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8011d32:	b10a      	cbz	r2, 8011d38 <WM__ActivateClipRect+0x10>
 8011d34:	480c      	ldr	r0, [pc, #48]	; (8011d68 <WM__ActivateClipRect+0x40>)
 8011d36:	e011      	b.n	8011d5c <WM__ActivateClipRect+0x34>
 8011d38:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011d3a:	ac02      	add	r4, sp, #8
 8011d3c:	f7fb fac8 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011d40:	9001      	str	r0, [sp, #4]
 8011d42:	c803      	ldmia	r0, {r0, r1}
 8011d44:	e884 0003 	stmia.w	r4, {r0, r1}
 8011d48:	a801      	add	r0, sp, #4
 8011d4a:	f7fb facf 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011d4e:	4b07      	ldr	r3, [pc, #28]	; (8011d6c <WM__ActivateClipRect+0x44>)
 8011d50:	6819      	ldr	r1, [r3, #0]
 8011d52:	b111      	cbz	r1, 8011d5a <WM__ActivateClipRect+0x32>
 8011d54:	4620      	mov	r0, r4
 8011d56:	f7ff ff17 	bl	8011b88 <WM__ClipAtParentBorders>
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f7ff ffbc 	bl	8011cd8 <_SetClipRectUserIntersect>
 8011d60:	b004      	add	sp, #16
 8011d62:	bd10      	pop	{r4, pc}
 8011d64:	20000018 	.word	0x20000018
 8011d68:	20000460 	.word	0x20000460
 8011d6c:	2002262c 	.word	0x2002262c

08011d70 <WM__IsWindow>:
 8011d70:	4b06      	ldr	r3, [pc, #24]	; (8011d8c <WM__IsWindow+0x1c>)
 8011d72:	b510      	push	{r4, lr}
 8011d74:	4604      	mov	r4, r0
 8011d76:	6818      	ldr	r0, [r3, #0]
 8011d78:	b128      	cbz	r0, 8011d86 <WM__IsWindow+0x16>
 8011d7a:	42a0      	cmp	r0, r4
 8011d7c:	d004      	beq.n	8011d88 <WM__IsWindow+0x18>
 8011d7e:	f7fb fa9d 	bl	800d2bc <GUI_ALLOC_h2p>
 8011d82:	6940      	ldr	r0, [r0, #20]
 8011d84:	e7f8      	b.n	8011d78 <WM__IsWindow+0x8>
 8011d86:	bd10      	pop	{r4, pc}
 8011d88:	2001      	movs	r0, #1
 8011d8a:	bd10      	pop	{r4, pc}
 8011d8c:	2002264c 	.word	0x2002264c

08011d90 <WM__InvalidateDrawAndDescs>:
 8011d90:	b513      	push	{r0, r1, r4, lr}
 8011d92:	4604      	mov	r4, r0
 8011d94:	b300      	cbz	r0, 8011dd8 <WM__InvalidateDrawAndDescs+0x48>
 8011d96:	f7fb fa9b 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011d9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011d9c:	9001      	str	r0, [sp, #4]
 8011d9e:	079b      	lsls	r3, r3, #30
 8011da0:	d517      	bpl.n	8011dd2 <WM__InvalidateDrawAndDescs+0x42>
 8011da2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011da4:	b140      	cbz	r0, 8011db8 <WM__InvalidateDrawAndDescs+0x28>
 8011da6:	4b0d      	ldr	r3, [pc, #52]	; (8011ddc <WM__InvalidateDrawAndDescs+0x4c>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	429c      	cmp	r4, r3
 8011dac:	d004      	beq.n	8011db8 <WM__InvalidateDrawAndDescs+0x28>
 8011dae:	f007 fb09 	bl	80193c4 <GUI_MEMDEV_Delete>
 8011db2:	2200      	movs	r2, #0
 8011db4:	9b01      	ldr	r3, [sp, #4]
 8011db6:	625a      	str	r2, [r3, #36]	; 0x24
 8011db8:	4620      	mov	r0, r4
 8011dba:	f000 ff19 	bl	8012bf0 <WM_GetFirstChild>
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	b13c      	cbz	r4, 8011dd2 <WM__InvalidateDrawAndDescs+0x42>
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f7ff ffe4 	bl	8011d90 <WM__InvalidateDrawAndDescs>
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f7fb fa77 	bl	800d2bc <GUI_ALLOC_h2p>
 8011dce:	6a04      	ldr	r4, [r0, #32]
 8011dd0:	e7f6      	b.n	8011dc0 <WM__InvalidateDrawAndDescs+0x30>
 8011dd2:	a801      	add	r0, sp, #4
 8011dd4:	f7fb fa8a 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011dd8:	b002      	add	sp, #8
 8011dda:	bd10      	pop	{r4, pc}
 8011ddc:	2002267c 	.word	0x2002267c

08011de0 <WM__RectIsNZ>:
 8011de0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011de4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	dc08      	bgt.n	8011dfe <WM__RectIsNZ+0x1e>
 8011dec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011df0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011df4:	4283      	cmp	r3, r0
 8011df6:	bfcc      	ite	gt
 8011df8:	2000      	movgt	r0, #0
 8011dfa:	2001      	movle	r0, #1
 8011dfc:	4770      	bx	lr
 8011dfe:	2000      	movs	r0, #0
 8011e00:	4770      	bx	lr

08011e02 <WM_SendMessage>:
 8011e02:	b538      	push	{r3, r4, r5, lr}
 8011e04:	460d      	mov	r5, r1
 8011e06:	4604      	mov	r4, r0
 8011e08:	b148      	cbz	r0, 8011e1e <WM_SendMessage+0x1c>
 8011e0a:	f7fc fbb1 	bl	800e570 <GUI_Lock>
 8011e0e:	4629      	mov	r1, r5
 8011e10:	4620      	mov	r0, r4
 8011e12:	f001 fe9d 	bl	8013b50 <WM__SendMessage>
 8011e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e1a:	f7fc bb9f 	b.w	800e55c <GUI_Unlock>
 8011e1e:	bd38      	pop	{r3, r4, r5, pc}

08011e20 <WM__SendMsgNoData>:
 8011e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e22:	ab04      	add	r3, sp, #16
 8011e24:	9001      	str	r0, [sp, #4]
 8011e26:	f843 1d10 	str.w	r1, [r3, #-16]!
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	f001 fe90 	bl	8013b50 <WM__SendMessage>
 8011e30:	b005      	add	sp, #20
 8011e32:	f85d fb04 	ldr.w	pc, [sp], #4

08011e36 <WM__GetClientRectWin>:
 8011e36:	2300      	movs	r3, #0
 8011e38:	804b      	strh	r3, [r1, #2]
 8011e3a:	800b      	strh	r3, [r1, #0]
 8011e3c:	8883      	ldrh	r3, [r0, #4]
 8011e3e:	8802      	ldrh	r2, [r0, #0]
 8011e40:	1a9b      	subs	r3, r3, r2
 8011e42:	8842      	ldrh	r2, [r0, #2]
 8011e44:	808b      	strh	r3, [r1, #4]
 8011e46:	88c3      	ldrh	r3, [r0, #6]
 8011e48:	1a9b      	subs	r3, r3, r2
 8011e4a:	80cb      	strh	r3, [r1, #6]
 8011e4c:	4770      	bx	lr
	...

08011e50 <WM__GetTopLevelLayer>:
 8011e50:	b510      	push	{r4, lr}
 8011e52:	4604      	mov	r4, r0
 8011e54:	f7fb fa32 	bl	800d2bc <GUI_ALLOC_h2p>
 8011e58:	6980      	ldr	r0, [r0, #24]
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	d1f9      	bne.n	8011e52 <WM__GetTopLevelLayer+0x2>
 8011e5e:	4b05      	ldr	r3, [pc, #20]	; (8011e74 <WM__GetTopLevelLayer+0x24>)
 8011e60:	681a      	ldr	r2, [r3, #0]
 8011e62:	4294      	cmp	r4, r2
 8011e64:	d005      	beq.n	8011e72 <WM__GetTopLevelLayer+0x22>
 8011e66:	6858      	ldr	r0, [r3, #4]
 8011e68:	4284      	cmp	r4, r0
 8011e6a:	bf0c      	ite	eq
 8011e6c:	2001      	moveq	r0, #1
 8011e6e:	f04f 30ff 	movne.w	r0, #4294967295
 8011e72:	bd10      	pop	{r4, pc}
 8011e74:	20022630 	.word	0x20022630

08011e78 <_Invalidate1Abs>:
 8011e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	460d      	mov	r5, r1
 8011e7e:	4606      	mov	r6, r0
 8011e80:	4617      	mov	r7, r2
 8011e82:	f7fb fa1b 	bl	800d2bc <GUI_ALLOC_h2p>
 8011e86:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8011e88:	9001      	str	r0, [sp, #4]
 8011e8a:	078b      	lsls	r3, r1, #30
 8011e8c:	d53e      	bpl.n	8011f0c <_Invalidate1Abs+0x94>
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f7ff ffa6 	bl	8011de0 <WM__RectIsNZ>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d039      	beq.n	8011f0c <_Invalidate1Abs+0x94>
 8011e98:	f640 0301 	movw	r3, #2049	; 0x801
 8011e9c:	400b      	ands	r3, r1
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d034      	beq.n	8011f0c <_Invalidate1Abs+0x94>
 8011ea2:	ac02      	add	r4, sp, #8
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	f7fb fa13 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011eaa:	4629      	mov	r1, r5
 8011eac:	4602      	mov	r2, r0
 8011eae:	9001      	str	r0, [sp, #4]
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f7fc ffb1 	bl	800ee18 <GUI__IntersectRects>
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f7ff ff92 	bl	8011de0 <WM__RectIsNZ>
 8011ebc:	b318      	cbz	r0, 8011f06 <_Invalidate1Abs+0x8e>
 8011ebe:	9b01      	ldr	r3, [sp, #4]
 8011ec0:	f244 0120 	movw	r1, #16416	; 0x4020
 8011ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ec6:	f103 0508 	add.w	r5, r3, #8
 8011eca:	4011      	ands	r1, r2
 8011ecc:	b129      	cbz	r1, 8011eda <_Invalidate1Abs+0x62>
 8011ece:	4622      	mov	r2, r4
 8011ed0:	4629      	mov	r1, r5
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	f7fb fc82 	bl	800d7dc <GUI_MergeRect>
 8011ed8:	e015      	b.n	8011f06 <_Invalidate1Abs+0x8e>
 8011eda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011ede:	433a      	orrs	r2, r7
 8011ee0:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ee4:	629a      	str	r2, [r3, #40]	; 0x28
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	4a09      	ldr	r2, [pc, #36]	; (8011f10 <_Invalidate1Abs+0x98>)
 8011eea:	8813      	ldrh	r3, [r2, #0]
 8011eec:	3301      	adds	r3, #1
 8011eee:	8013      	strh	r3, [r2, #0]
 8011ef0:	f7ff ffae 	bl	8011e50 <WM__GetTopLevelLayer>
 8011ef4:	4a07      	ldr	r2, [pc, #28]	; (8011f14 <_Invalidate1Abs+0x9c>)
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8011efc:	6813      	ldr	r3, [r2, #0]
 8011efe:	4303      	orrs	r3, r0
 8011f00:	6013      	str	r3, [r2, #0]
 8011f02:	f7fc fc37 	bl	800e774 <GUI_SignalEvent>
 8011f06:	a801      	add	r0, sp, #4
 8011f08:	f7fb f9f0 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011f0c:	b005      	add	sp, #20
 8011f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f10:	20022648 	.word	0x20022648
 8011f14:	20022658 	.word	0x20022658

08011f18 <WM__Invalidate1Abs>:
 8011f18:	2220      	movs	r2, #32
 8011f1a:	f7ff bfad 	b.w	8011e78 <_Invalidate1Abs>

08011f1e <WM_InvalidateWindowAndDescsEx>:
 8011f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f20:	460f      	mov	r7, r1
 8011f22:	b085      	sub	sp, #20
 8011f24:	4615      	mov	r5, r2
 8011f26:	4606      	mov	r6, r0
 8011f28:	b348      	cbz	r0, 8011f7e <WM_InvalidateWindowAndDescsEx+0x60>
 8011f2a:	f7fb f9d1 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011f2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011f30:	ac04      	add	r4, sp, #16
 8011f32:	4602      	mov	r2, r0
 8011f34:	079b      	lsls	r3, r3, #30
 8011f36:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8011f3a:	d403      	bmi.n	8011f44 <WM_InvalidateWindowAndDescsEx+0x26>
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	f7fb f9d5 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011f42:	e01c      	b.n	8011f7e <WM_InvalidateWindowAndDescsEx+0x60>
 8011f44:	4639      	mov	r1, r7
 8011f46:	a802      	add	r0, sp, #8
 8011f48:	f7fc ff66 	bl	800ee18 <GUI__IntersectRects>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d0f5      	beq.n	8011f3c <WM_InvalidateWindowAndDescsEx+0x1e>
 8011f50:	4620      	mov	r0, r4
 8011f52:	f7fb f9cb 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011f56:	462a      	mov	r2, r5
 8011f58:	a902      	add	r1, sp, #8
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	f7ff ff8c 	bl	8011e78 <_Invalidate1Abs>
 8011f60:	4630      	mov	r0, r6
 8011f62:	f000 fe45 	bl	8012bf0 <WM_GetFirstChild>
 8011f66:	4604      	mov	r4, r0
 8011f68:	b14c      	cbz	r4, 8011f7e <WM_InvalidateWindowAndDescsEx+0x60>
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	462a      	mov	r2, r5
 8011f6e:	a902      	add	r1, sp, #8
 8011f70:	f7ff ffd5 	bl	8011f1e <WM_InvalidateWindowAndDescsEx>
 8011f74:	4620      	mov	r0, r4
 8011f76:	f7fb f9a1 	bl	800d2bc <GUI_ALLOC_h2p>
 8011f7a:	6a04      	ldr	r4, [r0, #32]
 8011f7c:	e7f4      	b.n	8011f68 <WM_InvalidateWindowAndDescsEx+0x4a>
 8011f7e:	b005      	add	sp, #20
 8011f80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f82 <WM__InvalidateRect>:
 8011f82:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011f86:	4680      	mov	r8, r0
 8011f88:	4617      	mov	r7, r2
 8011f8a:	461d      	mov	r5, r3
 8011f8c:	460c      	mov	r4, r1
 8011f8e:	b381      	cbz	r1, 8011ff2 <WM__InvalidateRect+0x70>
 8011f90:	4608      	mov	r0, r1
 8011f92:	f7fb f99d 	bl	800d2d0 <GUI_ALLOC_LockH>
 8011f96:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8011f98:	4602      	mov	r2, r0
 8011f9a:	9001      	str	r0, [sp, #4]
 8011f9c:	07b3      	lsls	r3, r6, #30
 8011f9e:	d525      	bpl.n	8011fec <WM__InvalidateRect+0x6a>
 8011fa0:	4641      	mov	r1, r8
 8011fa2:	a802      	add	r0, sp, #8
 8011fa4:	f7fc ff38 	bl	800ee18 <GUI__IntersectRects>
 8011fa8:	b300      	cbz	r0, 8011fec <WM__InvalidateRect+0x6a>
 8011faa:	f640 0301 	movw	r3, #2049	; 0x801
 8011fae:	4033      	ands	r3, r6
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	d107      	bne.n	8011fc4 <WM__InvalidateRect+0x42>
 8011fb4:	9901      	ldr	r1, [sp, #4]
 8011fb6:	462b      	mov	r3, r5
 8011fb8:	a802      	add	r0, sp, #8
 8011fba:	6a0a      	ldr	r2, [r1, #32]
 8011fbc:	6989      	ldr	r1, [r1, #24]
 8011fbe:	f7ff ffe0 	bl	8011f82 <WM__InvalidateRect>
 8011fc2:	e004      	b.n	8011fce <WM__InvalidateRect+0x4c>
 8011fc4:	462a      	mov	r2, r5
 8011fc6:	a902      	add	r1, sp, #8
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f7ff ff55 	bl	8011e78 <_Invalidate1Abs>
 8011fce:	9b01      	ldr	r3, [sp, #4]
 8011fd0:	69dc      	ldr	r4, [r3, #28]
 8011fd2:	b15c      	cbz	r4, 8011fec <WM__InvalidateRect+0x6a>
 8011fd4:	42bc      	cmp	r4, r7
 8011fd6:	d009      	beq.n	8011fec <WM__InvalidateRect+0x6a>
 8011fd8:	4620      	mov	r0, r4
 8011fda:	462a      	mov	r2, r5
 8011fdc:	a902      	add	r1, sp, #8
 8011fde:	f7ff ff9e 	bl	8011f1e <WM_InvalidateWindowAndDescsEx>
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f7fb f96a 	bl	800d2bc <GUI_ALLOC_h2p>
 8011fe8:	6a04      	ldr	r4, [r0, #32]
 8011fea:	e7f2      	b.n	8011fd2 <WM__InvalidateRect+0x50>
 8011fec:	a801      	add	r0, sp, #4
 8011fee:	f7fb f97d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8011ff2:	b004      	add	sp, #16
 8011ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ff8 <WM__InvalidateParent>:
 8011ff8:	b570      	push	{r4, r5, r6, lr}
 8011ffa:	4605      	mov	r5, r0
 8011ffc:	4608      	mov	r0, r1
 8011ffe:	460c      	mov	r4, r1
 8012000:	4616      	mov	r6, r2
 8012002:	f7fb f95b 	bl	800d2bc <GUI_ALLOC_h2p>
 8012006:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012008:	4632      	mov	r2, r6
 801200a:	4621      	mov	r1, r4
 801200c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8012010:	4628      	mov	r0, r5
 8012012:	bf14      	ite	ne
 8012014:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 8012018:	2320      	moveq	r3, #32
 801201a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801201e:	f7ff bfb0 	b.w	8011f82 <WM__InvalidateRect>

08012022 <WM__InvalidateRectEx>:
 8012022:	2320      	movs	r3, #32
 8012024:	f7ff bfad 	b.w	8011f82 <WM__InvalidateRect>

08012028 <WM__DetachWindow>:
 8012028:	b513      	push	{r0, r1, r4, lr}
 801202a:	4604      	mov	r4, r0
 801202c:	f7fb f950 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012030:	6981      	ldr	r1, [r0, #24]
 8012032:	9001      	str	r0, [sp, #4]
 8012034:	b141      	cbz	r1, 8012048 <WM__DetachWindow+0x20>
 8012036:	6a02      	ldr	r2, [r0, #32]
 8012038:	f7ff fff3 	bl	8012022 <WM__InvalidateRectEx>
 801203c:	4620      	mov	r0, r4
 801203e:	f7ff fe25 	bl	8011c8c <WM__RemoveWindowFromList>
 8012042:	2200      	movs	r2, #0
 8012044:	9b01      	ldr	r3, [sp, #4]
 8012046:	619a      	str	r2, [r3, #24]
 8012048:	a801      	add	r0, sp, #4
 801204a:	f7fb f94f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801204e:	b002      	add	sp, #8
 8012050:	bd10      	pop	{r4, pc}

08012052 <WM_InvalidateRect>:
 8012052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012054:	460f      	mov	r7, r1
 8012056:	b087      	sub	sp, #28
 8012058:	4605      	mov	r5, r0
 801205a:	2800      	cmp	r0, #0
 801205c:	d038      	beq.n	80120d0 <WM_InvalidateRect+0x7e>
 801205e:	f7fc fa87 	bl	800e570 <GUI_Lock>
 8012062:	4628      	mov	r0, r5
 8012064:	f7fb f934 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012068:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801206a:	9001      	str	r0, [sp, #4]
 801206c:	07b2      	lsls	r2, r6, #30
 801206e:	d52a      	bpl.n	80120c6 <WM_InvalidateRect+0x74>
 8012070:	ac04      	add	r4, sp, #16
 8012072:	03f3      	lsls	r3, r6, #15
 8012074:	c803      	ldmia	r0, {r0, r1}
 8012076:	e884 0003 	stmia.w	r4, {r0, r1}
 801207a:	d502      	bpl.n	8012082 <WM_InvalidateRect+0x30>
 801207c:	4628      	mov	r0, r5
 801207e:	f7ff fe87 	bl	8011d90 <WM__InvalidateDrawAndDescs>
 8012082:	b15f      	cbz	r7, 801209c <WM_InvalidateRect+0x4a>
 8012084:	6838      	ldr	r0, [r7, #0]
 8012086:	ab02      	add	r3, sp, #8
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	c303      	stmia	r3!, {r0, r1}
 801208c:	a902      	add	r1, sp, #8
 801208e:	9801      	ldr	r0, [sp, #4]
 8012090:	f7ff fe1a 	bl	8011cc8 <WM__Client2Screen>
 8012094:	a902      	add	r1, sp, #8
 8012096:	4620      	mov	r0, r4
 8012098:	f7fc fea1 	bl	800edde <GUI__IntersectRect>
 801209c:	4629      	mov	r1, r5
 801209e:	4620      	mov	r0, r4
 80120a0:	f7ff fd72 	bl	8011b88 <WM__ClipAtParentBorders>
 80120a4:	b178      	cbz	r0, 80120c6 <WM_InvalidateRect+0x74>
 80120a6:	f640 0301 	movw	r3, #2049	; 0x801
 80120aa:	4033      	ands	r3, r6
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	d106      	bne.n	80120be <WM_InvalidateRect+0x6c>
 80120b0:	9b01      	ldr	r3, [sp, #4]
 80120b2:	4620      	mov	r0, r4
 80120b4:	6a1a      	ldr	r2, [r3, #32]
 80120b6:	6999      	ldr	r1, [r3, #24]
 80120b8:	f7ff ffb3 	bl	8012022 <WM__InvalidateRectEx>
 80120bc:	e003      	b.n	80120c6 <WM_InvalidateRect+0x74>
 80120be:	4621      	mov	r1, r4
 80120c0:	4628      	mov	r0, r5
 80120c2:	f7ff ff29 	bl	8011f18 <WM__Invalidate1Abs>
 80120c6:	a801      	add	r0, sp, #4
 80120c8:	f7fb f910 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80120cc:	f7fc fa46 	bl	800e55c <GUI_Unlock>
 80120d0:	b007      	add	sp, #28
 80120d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080120d4 <WM_InvalidateWindow>:
 80120d4:	2100      	movs	r1, #0
 80120d6:	f7ff bfbc 	b.w	8012052 <WM_InvalidateRect>

080120da <WM__SelectTopLevelLayer>:
 80120da:	b508      	push	{r3, lr}
 80120dc:	f7ff feb8 	bl	8011e50 <WM__GetTopLevelLayer>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	db03      	blt.n	80120ec <WM__SelectTopLevelLayer+0x12>
 80120e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80120e8:	f7fc b99e 	b.w	800e428 <GUI_SelectLayer>
 80120ec:	bd08      	pop	{r3, pc}
	...

080120f0 <WM_SelectWindow>:
 80120f0:	b570      	push	{r4, r5, r6, lr}
 80120f2:	4604      	mov	r4, r0
 80120f4:	f7fc fa3c 	bl	800e570 <GUI_Lock>
 80120f8:	4b0d      	ldr	r3, [pc, #52]	; (8012130 <WM_SelectWindow+0x40>)
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	461d      	mov	r5, r3
 80120fe:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8012100:	b90c      	cbnz	r4, 8012106 <WM_SelectWindow+0x16>
 8012102:	4b0c      	ldr	r3, [pc, #48]	; (8012134 <WM_SelectWindow+0x44>)
 8012104:	681c      	ldr	r4, [r3, #0]
 8012106:	6494      	str	r4, [r2, #72]	; 0x48
 8012108:	4620      	mov	r0, r4
 801210a:	f7ff ffe6 	bl	80120da <WM__SelectTopLevelLayer>
 801210e:	f7fd f9b1 	bl	800f474 <LCD_SetClipRectMax>
 8012112:	4620      	mov	r0, r4
 8012114:	f7fb f8d2 	bl	800d2bc <GUI_ALLOC_h2p>
 8012118:	682b      	ldr	r3, [r5, #0]
 801211a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801211e:	64da      	str	r2, [r3, #76]	; 0x4c
 8012120:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012124:	651a      	str	r2, [r3, #80]	; 0x50
 8012126:	f7fc fa19 	bl	800e55c <GUI_Unlock>
 801212a:	4630      	mov	r0, r6
 801212c:	bd70      	pop	{r4, r5, r6, pc}
 801212e:	bf00      	nop
 8012130:	20000018 	.word	0x20000018
 8012134:	2002264c 	.word	0x2002264c

08012138 <WM_CreateWindowAsChild>:
 8012138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801213c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012140:	4698      	mov	r8, r3
 8012142:	4605      	mov	r5, r0
 8012144:	460e      	mov	r6, r1
 8012146:	4617      	mov	r7, r2
 8012148:	f7fc fa12 	bl	800e570 <GUI_Lock>
 801214c:	4b4d      	ldr	r3, [pc, #308]	; (8012284 <WM_CreateWindowAsChild+0x14c>)
 801214e:	f8d3 9000 	ldr.w	r9, [r3]
 8012152:	f1ba 0f00 	cmp.w	sl, #0
 8012156:	d128      	bne.n	80121aa <WM_CreateWindowAsChild+0x72>
 8012158:	4b4b      	ldr	r3, [pc, #300]	; (8012288 <WM_CreateWindowAsChild+0x150>)
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	b353      	cbz	r3, 80121b4 <WM_CreateWindowAsChild+0x7c>
 801215e:	4b4b      	ldr	r3, [pc, #300]	; (801228c <WM_CreateWindowAsChild+0x154>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	7c5a      	ldrb	r2, [r3, #17]
 8012164:	4b4a      	ldr	r3, [pc, #296]	; (8012290 <WM_CreateWindowAsChild+0x158>)
 8012166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801216a:	1c5a      	adds	r2, r3, #1
 801216c:	2a01      	cmp	r2, #1
 801216e:	d921      	bls.n	80121b4 <WM_CreateWindowAsChild+0x7c>
 8012170:	469a      	mov	sl, r3
 8012172:	4650      	mov	r0, sl
 8012174:	f7fb f8ac 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012178:	f9b0 1000 	ldrsh.w	r1, [r0]
 801217c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012180:	9001      	str	r0, [sp, #4]
 8012182:	440d      	add	r5, r1
 8012184:	4416      	add	r6, r2
 8012186:	b91f      	cbnz	r7, 8012190 <WM_CreateWindowAsChild+0x58>
 8012188:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801218c:	1a5f      	subs	r7, r3, r1
 801218e:	3701      	adds	r7, #1
 8012190:	f1b8 0f00 	cmp.w	r8, #0
 8012194:	d105      	bne.n	80121a2 <WM_CreateWindowAsChild+0x6a>
 8012196:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801219a:	ebc2 0803 	rsb	r8, r2, r3
 801219e:	f108 0801 	add.w	r8, r8, #1
 80121a2:	a801      	add	r0, sp, #4
 80121a4:	f7fb f8a2 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80121a8:	e004      	b.n	80121b4 <WM_CreateWindowAsChild+0x7c>
 80121aa:	f1ba 3fff 	cmp.w	sl, #4294967295
 80121ae:	d1e0      	bne.n	8012172 <WM_CreateWindowAsChild+0x3a>
 80121b0:	f04f 0a00 	mov.w	sl, #0
 80121b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80121b6:	302c      	adds	r0, #44	; 0x2c
 80121b8:	f7fb fa7e 	bl	800d6b8 <GUI_ALLOC_AllocZero>
 80121bc:	4604      	mov	r4, r0
 80121be:	2800      	cmp	r0, #0
 80121c0:	d059      	beq.n	8012276 <WM_CreateWindowAsChild+0x13e>
 80121c2:	4a31      	ldr	r2, [pc, #196]	; (8012288 <WM_CreateWindowAsChild+0x150>)
 80121c4:	f10d 0b08 	add.w	fp, sp, #8
 80121c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121ca:	ea49 0903 	orr.w	r9, r9, r3
 80121ce:	8813      	ldrh	r3, [r2, #0]
 80121d0:	3301      	adds	r3, #1
 80121d2:	8013      	strh	r3, [r2, #0]
 80121d4:	f7fb f87c 	bl	800d2d0 <GUI_ALLOC_LockH>
 80121d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121da:	f84b 0d08 	str.w	r0, [fp, #-8]!
 80121de:	6103      	str	r3, [r0, #16]
 80121e0:	4b2c      	ldr	r3, [pc, #176]	; (8012294 <WM_CreateWindowAsChild+0x15c>)
 80121e2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80121e4:	8005      	strh	r5, [r0, #0]
 80121e6:	ea09 0303 	and.w	r3, r9, r3
 80121ea:	8046      	strh	r6, [r0, #2]
 80121ec:	443d      	add	r5, r7
 80121ee:	4446      	add	r6, r8
 80121f0:	4313      	orrs	r3, r2
 80121f2:	3d01      	subs	r5, #1
 80121f4:	3e01      	subs	r6, #1
 80121f6:	6283      	str	r3, [r0, #40]	; 0x28
 80121f8:	8085      	strh	r5, [r0, #4]
 80121fa:	80c6      	strh	r6, [r0, #6]
 80121fc:	4658      	mov	r0, fp
 80121fe:	f7fb f875 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012202:	4b25      	ldr	r3, [pc, #148]	; (8012298 <WM_CreateWindowAsChild+0x160>)
 8012204:	6818      	ldr	r0, [r3, #0]
 8012206:	b148      	cbz	r0, 801221c <WM_CreateWindowAsChild+0xe4>
 8012208:	f7fb f858 	bl	800d2bc <GUI_ALLOC_h2p>
 801220c:	4605      	mov	r5, r0
 801220e:	4620      	mov	r0, r4
 8012210:	f7fb f854 	bl	800d2bc <GUI_ALLOC_h2p>
 8012214:	696b      	ldr	r3, [r5, #20]
 8012216:	6143      	str	r3, [r0, #20]
 8012218:	616c      	str	r4, [r5, #20]
 801221a:	e000      	b.n	801221e <WM_CreateWindowAsChild+0xe6>
 801221c:	601c      	str	r4, [r3, #0]
 801221e:	4651      	mov	r1, sl
 8012220:	4620      	mov	r0, r4
 8012222:	f7ff fcdd 	bl	8011be0 <WM__InsertWindowIntoList>
 8012226:	f019 0f20 	tst.w	r9, #32
 801222a:	d002      	beq.n	8012232 <WM_CreateWindowAsChild+0xfa>
 801222c:	4620      	mov	r0, r4
 801222e:	f7ff ff5f 	bl	80120f0 <WM_SelectWindow>
 8012232:	f019 0f01 	tst.w	r9, #1
 8012236:	bf1f      	itttt	ne
 8012238:	4a18      	ldrne	r2, [pc, #96]	; (801229c <WM_CreateWindowAsChild+0x164>)
 801223a:	6813      	ldrne	r3, [r2, #0]
 801223c:	3301      	addne	r3, #1
 801223e:	6013      	strne	r3, [r2, #0]
 8012240:	f019 0f40 	tst.w	r9, #64	; 0x40
 8012244:	d002      	beq.n	801224c <WM_CreateWindowAsChild+0x114>
 8012246:	4620      	mov	r0, r4
 8012248:	f000 fd7b 	bl	8012d42 <WM_BringToBottom>
 801224c:	f019 0f02 	tst.w	r9, #2
 8012250:	d00d      	beq.n	801226e <WM_CreateWindowAsChild+0x136>
 8012252:	4620      	mov	r0, r4
 8012254:	f7fb f83c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012258:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801225a:	9000      	str	r0, [sp, #0]
 801225c:	f043 0302 	orr.w	r3, r3, #2
 8012260:	6283      	str	r3, [r0, #40]	; 0x28
 8012262:	4658      	mov	r0, fp
 8012264:	f7fb f842 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012268:	4620      	mov	r0, r4
 801226a:	f7ff ff33 	bl	80120d4 <WM_InvalidateWindow>
 801226e:	2101      	movs	r1, #1
 8012270:	4620      	mov	r0, r4
 8012272:	f7ff fdd5 	bl	8011e20 <WM__SendMsgNoData>
 8012276:	f7fc f971 	bl	800e55c <GUI_Unlock>
 801227a:	4620      	mov	r0, r4
 801227c:	b003      	add	sp, #12
 801227e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012282:	bf00      	nop
 8012284:	20022660 	.word	0x20022660
 8012288:	20022628 	.word	0x20022628
 801228c:	20000018 	.word	0x20000018
 8012290:	20022630 	.word	0x20022630
 8012294:	003f3f9f 	.word	0x003f3f9f
 8012298:	2002264c 	.word	0x2002264c
 801229c:	20022680 	.word	0x20022680

080122a0 <WM_DeleteWindow>:
 80122a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122a2:	4604      	mov	r4, r0
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d076      	beq.n	8012396 <WM_DeleteWindow+0xf6>
 80122a8:	f7fc f962 	bl	800e570 <GUI_Lock>
 80122ac:	4620      	mov	r0, r4
 80122ae:	f7ff fd5f 	bl	8011d70 <WM__IsWindow>
 80122b2:	2800      	cmp	r0, #0
 80122b4:	d06d      	beq.n	8012392 <WM_DeleteWindow+0xf2>
 80122b6:	4620      	mov	r0, r4
 80122b8:	f7ff fdca 	bl	8011e50 <WM__GetTopLevelLayer>
 80122bc:	210b      	movs	r1, #11
 80122be:	4605      	mov	r5, r0
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7ff fdad 	bl	8011e20 <WM__SendMsgNoData>
 80122c6:	4620      	mov	r0, r4
 80122c8:	f001 f906 	bl	80134d8 <WM__DeleteAssocTimer>
 80122cc:	4620      	mov	r0, r4
 80122ce:	f7fa ffff 	bl	800d2d0 <GUI_ALLOC_LockH>
 80122d2:	9001      	str	r0, [sp, #4]
 80122d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80122d6:	b108      	cbz	r0, 80122dc <WM_DeleteWindow+0x3c>
 80122d8:	f007 f874 	bl	80193c4 <GUI_MEMDEV_Delete>
 80122dc:	2100      	movs	r1, #0
 80122de:	4b2f      	ldr	r3, [pc, #188]	; (801239c <WM_DeleteWindow+0xfc>)
 80122e0:	4a2f      	ldr	r2, [pc, #188]	; (80123a0 <WM_DeleteWindow+0x100>)
 80122e2:	6099      	str	r1, [r3, #8]
 80122e4:	4b2f      	ldr	r3, [pc, #188]	; (80123a4 <WM_DeleteWindow+0x104>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80122ec:	4284      	cmp	r4, r0
 80122ee:	bf08      	it	eq
 80122f0:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80122f4:	4a2c      	ldr	r2, [pc, #176]	; (80123a8 <WM_DeleteWindow+0x108>)
 80122f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80122fa:	428c      	cmp	r4, r1
 80122fc:	bf04      	itt	eq
 80122fe:	2100      	moveq	r1, #0
 8012300:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8012304:	2200      	movs	r2, #0
 8012306:	4b29      	ldr	r3, [pc, #164]	; (80123ac <WM_DeleteWindow+0x10c>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	b12b      	cbz	r3, 8012318 <WM_DeleteWindow+0x78>
 801230c:	6859      	ldr	r1, [r3, #4]
 801230e:	428c      	cmp	r4, r1
 8012310:	d100      	bne.n	8012314 <WM_DeleteWindow+0x74>
 8012312:	605a      	str	r2, [r3, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	e7f8      	b.n	801230a <WM_DeleteWindow+0x6a>
 8012318:	2107      	movs	r1, #7
 801231a:	4620      	mov	r0, r4
 801231c:	f000 fefc 	bl	8013118 <WM_NotifyParent>
 8012320:	9e01      	ldr	r6, [sp, #4]
 8012322:	69f0      	ldr	r0, [r6, #28]
 8012324:	f7ff ffbc 	bl	80122a0 <WM_DeleteWindow>
 8012328:	69f3      	ldr	r3, [r6, #28]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d1f9      	bne.n	8012322 <WM_DeleteWindow+0x82>
 801232e:	4620      	mov	r0, r4
 8012330:	f7ff fe7a 	bl	8012028 <WM__DetachWindow>
 8012334:	4b1e      	ldr	r3, [pc, #120]	; (80123b0 <WM_DeleteWindow+0x110>)
 8012336:	6818      	ldr	r0, [r3, #0]
 8012338:	b150      	cbz	r0, 8012350 <WM_DeleteWindow+0xb0>
 801233a:	f7fa ffbf 	bl	800d2bc <GUI_ALLOC_h2p>
 801233e:	4606      	mov	r6, r0
 8012340:	6940      	ldr	r0, [r0, #20]
 8012342:	4284      	cmp	r4, r0
 8012344:	d1f8      	bne.n	8012338 <WM_DeleteWindow+0x98>
 8012346:	4620      	mov	r0, r4
 8012348:	f7fa ffb8 	bl	800d2bc <GUI_ALLOC_h2p>
 801234c:	6943      	ldr	r3, [r0, #20]
 801234e:	6173      	str	r3, [r6, #20]
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	a801      	add	r0, sp, #4
 8012354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012356:	07d1      	lsls	r1, r2, #31
 8012358:	bf41      	itttt	mi
 801235a:	4916      	ldrmi	r1, [pc, #88]	; (80123b4 <WM_DeleteWindow+0x114>)
 801235c:	680b      	ldrmi	r3, [r1, #0]
 801235e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012362:	600b      	strmi	r3, [r1, #0]
 8012364:	0693      	lsls	r3, r2, #26
 8012366:	bf41      	itttt	mi
 8012368:	4a13      	ldrmi	r2, [pc, #76]	; (80123b8 <WM_DeleteWindow+0x118>)
 801236a:	8813      	ldrhmi	r3, [r2, #0]
 801236c:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012370:	8013      	strhmi	r3, [r2, #0]
 8012372:	f7fa ffbb 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012376:	4a11      	ldr	r2, [pc, #68]	; (80123bc <WM_DeleteWindow+0x11c>)
 8012378:	4620      	mov	r0, r4
 801237a:	8813      	ldrh	r3, [r2, #0]
 801237c:	3b01      	subs	r3, #1
 801237e:	8013      	strh	r3, [r2, #0]
 8012380:	f7fa ffe4 	bl	800d34c <GUI_ALLOC_Free>
 8012384:	2d00      	cmp	r5, #0
 8012386:	db04      	blt.n	8012392 <WM_DeleteWindow+0xf2>
 8012388:	4b0d      	ldr	r3, [pc, #52]	; (80123c0 <WM_DeleteWindow+0x120>)
 801238a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801238e:	f7ff feaf 	bl	80120f0 <WM_SelectWindow>
 8012392:	f7fc f8e3 	bl	800e55c <GUI_Unlock>
 8012396:	b002      	add	sp, #8
 8012398:	bd70      	pop	{r4, r5, r6, pc}
 801239a:	bf00      	nop
 801239c:	2000044c 	.word	0x2000044c
 80123a0:	20022640 	.word	0x20022640
 80123a4:	20022650 	.word	0x20022650
 80123a8:	20022674 	.word	0x20022674
 80123ac:	2002266c 	.word	0x2002266c
 80123b0:	2002264c 	.word	0x2002264c
 80123b4:	20022680 	.word	0x20022680
 80123b8:	20022648 	.word	0x20022648
 80123bc:	20022628 	.word	0x20022628
 80123c0:	20022630 	.word	0x20022630

080123c4 <_Exec1Input>:
 80123c4:	4b1d      	ldr	r3, [pc, #116]	; (801243c <_Exec1Input+0x78>)
 80123c6:	685a      	ldr	r2, [r3, #4]
 80123c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123ca:	461d      	mov	r5, r3
 80123cc:	b1ea      	cbz	r2, 801240a <_Exec1Input+0x46>
 80123ce:	f7fc f8cf 	bl	800e570 <GUI_Lock>
 80123d2:	4b1b      	ldr	r3, [pc, #108]	; (8012440 <_Exec1Input+0x7c>)
 80123d4:	681c      	ldr	r4, [r3, #0]
 80123d6:	b1ac      	cbz	r4, 8012404 <_Exec1Input+0x40>
 80123d8:	4620      	mov	r0, r4
 80123da:	f7fa ff79 	bl	800d2d0 <GUI_ALLOC_LockH>
 80123de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80123e0:	9001      	str	r0, [sp, #4]
 80123e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80123e6:	6946      	ldr	r6, [r0, #20]
 80123e8:	d007      	beq.n	80123fa <_Exec1Input+0x36>
 80123ea:	a801      	add	r0, sp, #4
 80123ec:	f7fa ff7e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80123f0:	4620      	mov	r0, r4
 80123f2:	f7ff ff55 	bl	80122a0 <WM_DeleteWindow>
 80123f6:	4634      	mov	r4, r6
 80123f8:	e7ed      	b.n	80123d6 <_Exec1Input+0x12>
 80123fa:	a801      	add	r0, sp, #4
 80123fc:	4634      	mov	r4, r6
 80123fe:	f7fa ff75 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012402:	e7e8      	b.n	80123d6 <_Exec1Input+0x12>
 8012404:	606c      	str	r4, [r5, #4]
 8012406:	f7fc f8a9 	bl	800e55c <GUI_Unlock>
 801240a:	4b0e      	ldr	r3, [pc, #56]	; (8012444 <_Exec1Input+0x80>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	b103      	cbz	r3, 8012412 <_Exec1Input+0x4e>
 8012410:	4798      	blx	r3
 8012412:	4b0d      	ldr	r3, [pc, #52]	; (8012448 <_Exec1Input+0x84>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	b953      	cbnz	r3, 801242e <_Exec1Input+0x6a>
 8012418:	4b0c      	ldr	r3, [pc, #48]	; (801244c <_Exec1Input+0x88>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8012420:	b148      	cbz	r0, 8012436 <_Exec1Input+0x72>
 8012422:	f7fb ffc5 	bl	800e3b0 <GUI_PollKeyMsg>
 8012426:	3000      	adds	r0, #0
 8012428:	bf18      	it	ne
 801242a:	2001      	movne	r0, #1
 801242c:	e003      	b.n	8012436 <_Exec1Input+0x72>
 801242e:	4798      	blx	r3
 8012430:	2800      	cmp	r0, #0
 8012432:	d0f1      	beq.n	8012418 <_Exec1Input+0x54>
 8012434:	2001      	movs	r0, #1
 8012436:	b002      	add	sp, #8
 8012438:	bd70      	pop	{r4, r5, r6, pc}
 801243a:	bf00      	nop
 801243c:	2000044c 	.word	0x2000044c
 8012440:	2002264c 	.word	0x2002264c
 8012444:	20022638 	.word	0x20022638
 8012448:	20022618 	.word	0x20022618
 801244c:	20000018 	.word	0x20000018

08012450 <WM_GetActiveWindow>:
 8012450:	4b01      	ldr	r3, [pc, #4]	; (8012458 <WM_GetActiveWindow+0x8>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012456:	4770      	bx	lr
 8012458:	20000018 	.word	0x20000018

0801245c <WM__GetNextIVR>:
 801245c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012460:	4f5d      	ldr	r7, [pc, #372]	; (80125d8 <WM__GetNextIVR+0x17c>)
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8012468:	2800      	cmp	r0, #0
 801246a:	f000 80b1 	beq.w	80125d0 <WM__GetNextIVR+0x174>
 801246e:	4a5b      	ldr	r2, [pc, #364]	; (80125dc <WM__GetNextIVR+0x180>)
 8012470:	6a13      	ldr	r3, [r2, #32]
 8012472:	4614      	mov	r4, r2
 8012474:	2b01      	cmp	r3, #1
 8012476:	dd03      	ble.n	8012480 <WM__GetNextIVR+0x24>
 8012478:	3b01      	subs	r3, #1
 801247a:	2000      	movs	r0, #0
 801247c:	6213      	str	r3, [r2, #32]
 801247e:	e0a7      	b.n	80125d0 <WM__GetNextIVR+0x174>
 8012480:	69d3      	ldr	r3, [r2, #28]
 8012482:	f102 0614 	add.w	r6, r2, #20
 8012486:	ad02      	add	r5, sp, #8
 8012488:	3301      	adds	r3, #1
 801248a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801248e:	61d3      	str	r3, [r2, #28]
 8012490:	e885 0003 	stmia.w	r5, {r0, r1}
 8012494:	b923      	cbnz	r3, 80124a0 <WM__GetNextIVR+0x44>
 8012496:	8993      	ldrh	r3, [r2, #12]
 8012498:	f8ad 3008 	strh.w	r3, [sp, #8]
 801249c:	89d3      	ldrh	r3, [r2, #14]
 801249e:	e010      	b.n	80124c2 <WM__GetNextIVR+0x66>
 80124a0:	8b13      	ldrh	r3, [r2, #24]
 80124a2:	8ad2      	ldrh	r2, [r2, #22]
 80124a4:	3301      	adds	r3, #1
 80124a6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80124aa:	b21b      	sxth	r3, r3
 80124ac:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80124b6:	da06      	bge.n	80124c6 <WM__GetNextIVR+0x6a>
 80124b8:	89a3      	ldrh	r3, [r4, #12]
 80124ba:	f8ad 3008 	strh.w	r3, [sp, #8]
 80124be:	8b63      	ldrh	r3, [r4, #26]
 80124c0:	3301      	adds	r3, #1
 80124c2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80124c6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80124ca:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80124ce:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80125dc <WM__GetNextIVR+0x180>
 80124d2:	429a      	cmp	r2, r3
 80124d4:	dd04      	ble.n	80124e0 <WM__GetNextIVR+0x84>
 80124d6:	6a23      	ldr	r3, [r4, #32]
 80124d8:	2000      	movs	r0, #0
 80124da:	3b01      	subs	r3, #1
 80124dc:	6223      	str	r3, [r4, #32]
 80124de:	e077      	b.n	80125d0 <WM__GetNextIVR+0x174>
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80124e4:	f7fa fef4 	bl	800d2d0 <GUI_ALLOC_LockH>
 80124e8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80124ec:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80124f0:	9001      	str	r0, [sp, #4]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d11c      	bne.n	8012530 <WM__GetNextIVR+0xd4>
 80124f6:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80124fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80124fe:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 8012502:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012506:	4b34      	ldr	r3, [pc, #208]	; (80125d8 <WM__GetNextIVR+0x17c>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801250c:	b15a      	cbz	r2, 8012526 <WM__GetNextIVR+0xca>
 801250e:	4610      	mov	r0, r2
 8012510:	f7fa fed4 	bl	800d2bc <GUI_ALLOC_h2p>
 8012514:	4680      	mov	r8, r0
 8012516:	2200      	movs	r2, #0
 8012518:	4629      	mov	r1, r5
 801251a:	6a00      	ldr	r0, [r0, #32]
 801251c:	f7ff f950 	bl	80117c0 <_Findy1>
 8012520:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012524:	e7f2      	b.n	801250c <WM__GetNextIVR+0xb0>
 8012526:	9b01      	ldr	r3, [sp, #4]
 8012528:	4629      	mov	r1, r5
 801252a:	69d8      	ldr	r0, [r3, #28]
 801252c:	f7ff f948 	bl	80117c0 <_Findy1>
 8012530:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012534:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801253c:	b16a      	cbz	r2, 801255a <WM__GetNextIVR+0xfe>
 801253e:	4610      	mov	r0, r2
 8012540:	f7fa febc 	bl	800d2bc <GUI_ALLOC_h2p>
 8012544:	2200      	movs	r2, #0
 8012546:	4680      	mov	r8, r0
 8012548:	4629      	mov	r1, r5
 801254a:	6a00      	ldr	r0, [r0, #32]
 801254c:	f7ff f98b 	bl	8011866 <_Findx0>
 8012550:	2800      	cmp	r0, #0
 8012552:	d1ed      	bne.n	8012530 <WM__GetNextIVR+0xd4>
 8012554:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012558:	e7f0      	b.n	801253c <WM__GetNextIVR+0xe0>
 801255a:	9b01      	ldr	r3, [sp, #4]
 801255c:	4629      	mov	r1, r5
 801255e:	69d8      	ldr	r0, [r3, #28]
 8012560:	f7ff f981 	bl	8011866 <_Findx0>
 8012564:	2800      	cmp	r0, #0
 8012566:	d1e3      	bne.n	8012530 <WM__GetNextIVR+0xd4>
 8012568:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801256c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8012570:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012574:	429a      	cmp	r2, r3
 8012576:	dd07      	ble.n	8012588 <WM__GetNextIVR+0x12c>
 8012578:	e895 0003 	ldmia.w	r5, {r0, r1}
 801257c:	e886 0003 	stmia.w	r6, {r0, r1}
 8012580:	a801      	add	r0, sp, #4
 8012582:	f7fa feb3 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012586:	e797      	b.n	80124b8 <WM__GetNextIVR+0x5c>
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801258c:	b152      	cbz	r2, 80125a4 <WM__GetNextIVR+0x148>
 801258e:	4610      	mov	r0, r2
 8012590:	f7fa fe94 	bl	800d2bc <GUI_ALLOC_h2p>
 8012594:	4607      	mov	r7, r0
 8012596:	2200      	movs	r2, #0
 8012598:	4629      	mov	r1, r5
 801259a:	6a00      	ldr	r0, [r0, #32]
 801259c:	f7ff f9a6 	bl	80118ec <_Findx1>
 80125a0:	69ba      	ldr	r2, [r7, #24]
 80125a2:	e7f3      	b.n	801258c <WM__GetNextIVR+0x130>
 80125a4:	af04      	add	r7, sp, #16
 80125a6:	4629      	mov	r1, r5
 80125a8:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 80125ac:	69d8      	ldr	r0, [r3, #28]
 80125ae:	f7ff f99d 	bl	80118ec <_Findx1>
 80125b2:	4638      	mov	r0, r7
 80125b4:	f7fa fe9a 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80125b8:	69e2      	ldr	r2, [r4, #28]
 80125ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80125be:	429a      	cmp	r2, r3
 80125c0:	dc89      	bgt.n	80124d6 <WM__GetNextIVR+0x7a>
 80125c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80125c6:	e886 0003 	stmia.w	r6, {r0, r1}
 80125ca:	f7ff fbad 	bl	8011d28 <WM__ActivateClipRect>
 80125ce:	2001      	movs	r0, #1
 80125d0:	b004      	add	sp, #16
 80125d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d6:	bf00      	nop
 80125d8:	20000018 	.word	0x20000018
 80125dc:	2000044c 	.word	0x2000044c

080125e0 <WM__InitIVRSearch>:
 80125e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125e4:	4e39      	ldr	r6, [pc, #228]	; (80126cc <WM__InitIVRSearch+0xec>)
 80125e6:	b086      	sub	sp, #24
 80125e8:	4680      	mov	r8, r0
 80125ea:	6832      	ldr	r2, [r6, #0]
 80125ec:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 80125f0:	b913      	cbnz	r3, 80125f8 <WM__InitIVRSearch+0x18>
 80125f2:	f7ff fb99 	bl	8011d28 <WM__ActivateClipRect>
 80125f6:	e064      	b.n	80126c2 <WM__InitIVRSearch+0xe2>
 80125f8:	4f35      	ldr	r7, [pc, #212]	; (80126d0 <WM__InitIVRSearch+0xf0>)
 80125fa:	6a3b      	ldr	r3, [r7, #32]
 80125fc:	463d      	mov	r5, r7
 80125fe:	3301      	adds	r3, #1
 8012600:	2b01      	cmp	r3, #1
 8012602:	623b      	str	r3, [r7, #32]
 8012604:	dc5d      	bgt.n	80126c2 <WM__InitIVRSearch+0xe2>
 8012606:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8012608:	f7fa fe62 	bl	800d2d0 <GUI_ALLOC_LockH>
 801260c:	f04f 33ff 	mov.w	r3, #4294967295
 8012610:	9000      	str	r0, [sp, #0]
 8012612:	61fb      	str	r3, [r7, #28]
 8012614:	4b2f      	ldr	r3, [pc, #188]	; (80126d4 <WM__InitIVRSearch+0xf4>)
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	b113      	cbz	r3, 8012620 <WM__InitIVRSearch+0x40>
 801261a:	ab02      	add	r3, sp, #8
 801261c:	3008      	adds	r0, #8
 801261e:	e004      	b.n	801262a <WM__InitIVRSearch+0x4a>
 8012620:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012622:	f013 0402 	ands.w	r4, r3, #2
 8012626:	d00c      	beq.n	8012642 <WM__InitIVRSearch+0x62>
 8012628:	ab02      	add	r3, sp, #8
 801262a:	ac02      	add	r4, sp, #8
 801262c:	c803      	ldmia	r0, {r0, r1}
 801262e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012632:	f1b8 0f00 	cmp.w	r8, #0
 8012636:	d00c      	beq.n	8012652 <WM__InitIVRSearch+0x72>
 8012638:	4641      	mov	r1, r8
 801263a:	4620      	mov	r0, r4
 801263c:	f7fc fbcf 	bl	800edde <GUI__IntersectRect>
 8012640:	e007      	b.n	8012652 <WM__InitIVRSearch+0x72>
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	4668      	mov	r0, sp
 8012646:	3b01      	subs	r3, #1
 8012648:	623b      	str	r3, [r7, #32]
 801264a:	f7fa fe4f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801264e:	4620      	mov	r0, r4
 8012650:	e038      	b.n	80126c4 <WM__InitIVRSearch+0xe4>
 8012652:	6833      	ldr	r3, [r6, #0]
 8012654:	4f20      	ldr	r7, [pc, #128]	; (80126d8 <WM__InitIVRSearch+0xf8>)
 8012656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012658:	b1c2      	cbz	r2, 801268c <WM__InitIVRSearch+0xac>
 801265a:	9b00      	ldr	r3, [sp, #0]
 801265c:	6810      	ldr	r0, [r2, #0]
 801265e:	9301      	str	r3, [sp, #4]
 8012660:	ab04      	add	r3, sp, #16
 8012662:	6851      	ldr	r1, [r2, #4]
 8012664:	c303      	stmia	r3!, {r0, r1}
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	b133      	cbz	r3, 8012678 <WM__InitIVRSearch+0x98>
 801266a:	a801      	add	r0, sp, #4
 801266c:	f7fa fe3e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012670:	6838      	ldr	r0, [r7, #0]
 8012672:	f7fa fe2d 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012676:	9001      	str	r0, [sp, #4]
 8012678:	a904      	add	r1, sp, #16
 801267a:	9801      	ldr	r0, [sp, #4]
 801267c:	f7ff fb24 	bl	8011cc8 <WM__Client2Screen>
 8012680:	4620      	mov	r0, r4
 8012682:	a904      	add	r1, sp, #16
 8012684:	f7fc fbab 	bl	800edde <GUI__IntersectRect>
 8012688:	a801      	add	r0, sp, #4
 801268a:	e000      	b.n	801268e <WM__InitIVRSearch+0xae>
 801268c:	4668      	mov	r0, sp
 801268e:	f7fa fe2d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012692:	6839      	ldr	r1, [r7, #0]
 8012694:	b119      	cbz	r1, 801269e <WM__InitIVRSearch+0xbe>
 8012696:	4620      	mov	r0, r4
 8012698:	f7ff fa76 	bl	8011b88 <WM__ClipAtParentBorders>
 801269c:	b128      	cbz	r0, 80126aa <WM__InitIVRSearch+0xca>
 801269e:	6833      	ldr	r3, [r6, #0]
 80126a0:	4620      	mov	r0, r4
 80126a2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80126a4:	f7ff fa70 	bl	8011b88 <WM__ClipAtParentBorders>
 80126a8:	b918      	cbnz	r0, 80126b2 <WM__InitIVRSearch+0xd2>
 80126aa:	6a2b      	ldr	r3, [r5, #32]
 80126ac:	3b01      	subs	r3, #1
 80126ae:	622b      	str	r3, [r5, #32]
 80126b0:	e008      	b.n	80126c4 <WM__InitIVRSearch+0xe4>
 80126b2:	4b0a      	ldr	r3, [pc, #40]	; (80126dc <WM__InitIVRSearch+0xfc>)
 80126b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80126b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80126bc:	f7ff fece 	bl	801245c <WM__GetNextIVR>
 80126c0:	e000      	b.n	80126c4 <WM__InitIVRSearch+0xe4>
 80126c2:	2001      	movs	r0, #1
 80126c4:	b006      	add	sp, #24
 80126c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ca:	bf00      	nop
 80126cc:	20000018 	.word	0x20000018
 80126d0:	2000044c 	.word	0x2000044c
 80126d4:	2002265c 	.word	0x2002265c
 80126d8:	2002262c 	.word	0x2002262c
 80126dc:	20000458 	.word	0x20000458

080126e0 <WM_SetDefault>:
 80126e0:	b508      	push	{r3, lr}
 80126e2:	f7fb fa0f 	bl	800db04 <GL_SetDefault>
 80126e6:	4b02      	ldr	r3, [pc, #8]	; (80126f0 <WM_SetDefault+0x10>)
 80126e8:	2200      	movs	r2, #0
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	645a      	str	r2, [r3, #68]	; 0x44
 80126ee:	bd08      	pop	{r3, pc}
 80126f0:	20000018 	.word	0x20000018

080126f4 <WM__Paint1>:
 80126f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126f6:	b089      	sub	sp, #36	; 0x24
 80126f8:	4604      	mov	r4, r0
 80126fa:	f7fa fde9 	bl	800d2d0 <GUI_ALLOC_LockH>
 80126fe:	6907      	ldr	r7, [r0, #16]
 8012700:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8012702:	ae02      	add	r6, sp, #8
 8012704:	9001      	str	r0, [sp, #4]
 8012706:	3008      	adds	r0, #8
 8012708:	c803      	ldmia	r0, {r0, r1}
 801270a:	e886 0003 	stmia.w	r6, {r0, r1}
 801270e:	a801      	add	r0, sp, #4
 8012710:	f7fa fdec 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012714:	2f00      	cmp	r7, #0
 8012716:	d032      	beq.n	801277e <WM__Paint1+0x8a>
 8012718:	07ab      	lsls	r3, r5, #30
 801271a:	d530      	bpl.n	801277e <WM__Paint1+0x8a>
 801271c:	212e      	movs	r1, #46	; 0x2e
 801271e:	4620      	mov	r0, r4
 8012720:	f000 fcda 	bl	80130d8 <WM_SendMessageNoPara>
 8012724:	4b17      	ldr	r3, [pc, #92]	; (8012784 <WM__Paint1+0x90>)
 8012726:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 801272a:	781a      	ldrb	r2, [r3, #0]
 801272c:	461d      	mov	r5, r3
 801272e:	f102 0201 	add.w	r2, r2, #1
 8012732:	701a      	strb	r2, [r3, #0]
 8012734:	d00a      	beq.n	801274c <WM__Paint1+0x58>
 8012736:	230f      	movs	r3, #15
 8012738:	9405      	str	r4, [sp, #20]
 801273a:	9607      	str	r6, [sp, #28]
 801273c:	9304      	str	r3, [sp, #16]
 801273e:	f7ff ffcf 	bl	80126e0 <WM_SetDefault>
 8012742:	a904      	add	r1, sp, #16
 8012744:	4620      	mov	r0, r4
 8012746:	f001 fa03 	bl	8013b50 <WM__SendMessage>
 801274a:	e011      	b.n	8012770 <WM__Paint1+0x7c>
 801274c:	4630      	mov	r0, r6
 801274e:	f7ff ff47 	bl	80125e0 <WM__InitIVRSearch>
 8012752:	b168      	cbz	r0, 8012770 <WM__Paint1+0x7c>
 8012754:	270f      	movs	r7, #15
 8012756:	9405      	str	r4, [sp, #20]
 8012758:	9704      	str	r7, [sp, #16]
 801275a:	9607      	str	r6, [sp, #28]
 801275c:	f7ff ffc0 	bl	80126e0 <WM_SetDefault>
 8012760:	a904      	add	r1, sp, #16
 8012762:	4620      	mov	r0, r4
 8012764:	f001 f9f4 	bl	8013b50 <WM__SendMessage>
 8012768:	f7ff fe78 	bl	801245c <WM__GetNextIVR>
 801276c:	2800      	cmp	r0, #0
 801276e:	d1f2      	bne.n	8012756 <WM__Paint1+0x62>
 8012770:	782b      	ldrb	r3, [r5, #0]
 8012772:	212f      	movs	r1, #47	; 0x2f
 8012774:	4620      	mov	r0, r4
 8012776:	3b01      	subs	r3, #1
 8012778:	702b      	strb	r3, [r5, #0]
 801277a:	f000 fcad 	bl	80130d8 <WM_SendMessageNoPara>
 801277e:	b009      	add	sp, #36	; 0x24
 8012780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012782:	bf00      	nop
 8012784:	2002265c 	.word	0x2002265c

08012788 <WM__Paint>:
 8012788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801278c:	b088      	sub	sp, #32
 801278e:	f244 0420 	movw	r4, #16416	; 0x4020
 8012792:	9003      	str	r0, [sp, #12]
 8012794:	f7fa fd9c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012798:	4603      	mov	r3, r0
 801279a:	f100 0208 	add.w	r2, r0, #8
 801279e:	9005      	str	r0, [sp, #20]
 80127a0:	ae06      	add	r6, sp, #24
 80127a2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80127a4:	699f      	ldr	r7, [r3, #24]
 80127a6:	402c      	ands	r4, r5
 80127a8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80127ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127b0:	e886 0003 	stmia.w	r6, {r0, r1}
 80127b4:	a805      	add	r0, sp, #20
 80127b6:	f7fa fd99 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80127ba:	2c00      	cmp	r4, #0
 80127bc:	d035      	beq.n	801282a <WM__Paint+0xa2>
 80127be:	f1b8 0f00 	cmp.w	r8, #0
 80127c2:	d017      	beq.n	80127f4 <WM__Paint+0x6c>
 80127c4:	9903      	ldr	r1, [sp, #12]
 80127c6:	4630      	mov	r0, r6
 80127c8:	f7ff f9de 	bl	8011b88 <WM__ClipAtParentBorders>
 80127cc:	b190      	cbz	r0, 80127f4 <WM__Paint+0x6c>
 80127ce:	9803      	ldr	r0, [sp, #12]
 80127d0:	f7ff fc8e 	bl	80120f0 <WM_SelectWindow>
 80127d4:	0769      	lsls	r1, r5, #29
 80127d6:	d50f      	bpl.n	80127f8 <WM__Paint+0x70>
 80127d8:	b127      	cbz	r7, 80127e4 <WM__Paint+0x5c>
 80127da:	f005 0501 	and.w	r5, r5, #1
 80127de:	f085 0501 	eor.w	r5, r5, #1
 80127e2:	e000      	b.n	80127e6 <WM__Paint+0x5e>
 80127e4:	2501      	movs	r5, #1
 80127e6:	9500      	str	r5, [sp, #0]
 80127e8:	2300      	movs	r3, #0
 80127ea:	aa03      	add	r2, sp, #12
 80127ec:	4911      	ldr	r1, [pc, #68]	; (8012834 <WM__Paint+0xac>)
 80127ee:	4630      	mov	r0, r6
 80127f0:	f006 fede 	bl	80195b0 <GUI_MEMDEV_Draw>
 80127f4:	2400      	movs	r4, #0
 80127f6:	e003      	b.n	8012800 <WM__Paint+0x78>
 80127f8:	2401      	movs	r4, #1
 80127fa:	9803      	ldr	r0, [sp, #12]
 80127fc:	f7ff f952 	bl	8011aa4 <WM__PaintWinAndOverlays>
 8012800:	9803      	ldr	r0, [sp, #12]
 8012802:	f7fa fd65 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012806:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8012808:	9005      	str	r0, [sp, #20]
 801280a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 801280e:	0492      	lsls	r2, r2, #18
 8012810:	f023 0320 	bic.w	r3, r3, #32
 8012814:	bf48      	it	mi
 8012816:	f043 0304 	orrmi.w	r3, r3, #4
 801281a:	6283      	str	r3, [r0, #40]	; 0x28
 801281c:	a805      	add	r0, sp, #20
 801281e:	f7fa fd65 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012822:	4a05      	ldr	r2, [pc, #20]	; (8012838 <WM__Paint+0xb0>)
 8012824:	8813      	ldrh	r3, [r2, #0]
 8012826:	3b01      	subs	r3, #1
 8012828:	8013      	strh	r3, [r2, #0]
 801282a:	4620      	mov	r0, r4
 801282c:	b008      	add	sp, #32
 801282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012832:	bf00      	nop
 8012834:	08011b1d 	.word	0x08011b1d
 8012838:	20022648 	.word	0x20022648

0801283c <_Exec1Draw>:
 801283c:	4b20      	ldr	r3, [pc, #128]	; (80128c0 <_Exec1Draw+0x84>)
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012844:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 8012848:	b09f      	sub	sp, #124	; 0x7c
 801284a:	461f      	mov	r7, r3
 801284c:	2800      	cmp	r0, #0
 801284e:	d033      	beq.n	80128b8 <_Exec1Draw+0x7c>
 8012850:	4b1c      	ldr	r3, [pc, #112]	; (80128c4 <_Exec1Draw+0x88>)
 8012852:	8818      	ldrh	r0, [r3, #0]
 8012854:	461e      	mov	r6, r3
 8012856:	b378      	cbz	r0, 80128b8 <_Exec1Draw+0x7c>
 8012858:	f7fb fe8a 	bl	800e570 <GUI_Lock>
 801285c:	4b1a      	ldr	r3, [pc, #104]	; (80128c8 <_Exec1Draw+0x8c>)
 801285e:	689c      	ldr	r4, [r3, #8]
 8012860:	461d      	mov	r5, r3
 8012862:	b90c      	cbnz	r4, 8012868 <_Exec1Draw+0x2c>
 8012864:	4b19      	ldr	r3, [pc, #100]	; (80128cc <_Exec1Draw+0x90>)
 8012866:	681c      	ldr	r4, [r3, #0]
 8012868:	a801      	add	r0, sp, #4
 801286a:	f7fb f8a9 	bl	800d9c0 <GUI_SaveContext_W>
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 8012874:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8012876:	b924      	cbnz	r4, 8012882 <_Exec1Draw+0x46>
 8012878:	2400      	movs	r4, #0
 801287a:	e00d      	b.n	8012898 <_Exec1Draw+0x5c>
 801287c:	f1b9 0f00 	cmp.w	r9, #0
 8012880:	d10a      	bne.n	8012898 <_Exec1Draw+0x5c>
 8012882:	4620      	mov	r0, r4
 8012884:	f7ff ff80 	bl	8012788 <WM__Paint>
 8012888:	4681      	mov	r9, r0
 801288a:	4620      	mov	r0, r4
 801288c:	f7fa fd16 	bl	800d2bc <GUI_ALLOC_h2p>
 8012890:	6944      	ldr	r4, [r0, #20]
 8012892:	2c00      	cmp	r4, #0
 8012894:	d1f2      	bne.n	801287c <_Exec1Draw+0x40>
 8012896:	e7ef      	b.n	8012878 <_Exec1Draw+0x3c>
 8012898:	4640      	mov	r0, r8
 801289a:	60ac      	str	r4, [r5, #8]
 801289c:	f7fb f8bc 	bl	800da18 <GUI_SetColor>
 80128a0:	4638      	mov	r0, r7
 80128a2:	f7fb f8ae 	bl	800da02 <GUI_SetBkColor>
 80128a6:	a801      	add	r0, sp, #4
 80128a8:	f7fb f894 	bl	800d9d4 <GUI_RestoreContext>
 80128ac:	f7fb fe56 	bl	800e55c <GUI_Unlock>
 80128b0:	8830      	ldrh	r0, [r6, #0]
 80128b2:	3000      	adds	r0, #0
 80128b4:	bf18      	it	ne
 80128b6:	2001      	movne	r0, #1
 80128b8:	b01f      	add	sp, #124	; 0x7c
 80128ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128be:	bf00      	nop
 80128c0:	20000018 	.word	0x20000018
 80128c4:	20022648 	.word	0x20022648
 80128c8:	2000044c 	.word	0x2000044c
 80128cc:	2002264c 	.word	0x2002264c

080128d0 <WM__DeleteSecure>:
 80128d0:	b508      	push	{r3, lr}
 80128d2:	f7fa fcf3 	bl	800d2bc <GUI_ALLOC_h2p>
 80128d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80128d8:	2201      	movs	r2, #1
 80128da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128de:	6283      	str	r3, [r0, #40]	; 0x28
 80128e0:	4b01      	ldr	r3, [pc, #4]	; (80128e8 <WM__DeleteSecure+0x18>)
 80128e2:	605a      	str	r2, [r3, #4]
 80128e4:	bd08      	pop	{r3, pc}
 80128e6:	bf00      	nop
 80128e8:	2000044c 	.word	0x2000044c

080128ec <WM_Exec>:
 80128ec:	b570      	push	{r4, r5, r6, lr}
 80128ee:	f7fb fe3f 	bl	800e570 <GUI_Lock>
 80128f2:	4b1b      	ldr	r3, [pc, #108]	; (8012960 <WM_Exec+0x74>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	b103      	cbz	r3, 80128fa <WM_Exec+0xe>
 80128f8:	4798      	blx	r3
 80128fa:	2500      	movs	r5, #0
 80128fc:	f7ff fd62 	bl	80123c4 <_Exec1Input>
 8012900:	b108      	cbz	r0, 8012906 <WM_Exec+0x1a>
 8012902:	2501      	movs	r5, #1
 8012904:	e7fa      	b.n	80128fc <WM_Exec+0x10>
 8012906:	4b17      	ldr	r3, [pc, #92]	; (8012964 <WM_Exec+0x78>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 801290e:	b144      	cbz	r4, 8012922 <WM_Exec+0x36>
 8012910:	4b15      	ldr	r3, [pc, #84]	; (8012968 <WM_Exec+0x7c>)
 8012912:	881c      	ldrh	r4, [r3, #0]
 8012914:	b12c      	cbz	r4, 8012922 <WM_Exec+0x36>
 8012916:	4b15      	ldr	r3, [pc, #84]	; (801296c <WM_Exec+0x80>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	b1c3      	cbz	r3, 801294e <WM_Exec+0x62>
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	4798      	blx	r3
 8012920:	2401      	movs	r4, #1
 8012922:	f7fb fe1b 	bl	800e55c <GUI_Unlock>
 8012926:	f7ff ff89 	bl	801283c <_Exec1Draw>
 801292a:	4606      	mov	r6, r0
 801292c:	b108      	cbz	r0, 8012932 <WM_Exec+0x46>
 801292e:	2501      	movs	r5, #1
 8012930:	e7f9      	b.n	8012926 <WM_Exec+0x3a>
 8012932:	f7fb fe1d 	bl	800e570 <GUI_Lock>
 8012936:	b174      	cbz	r4, 8012956 <WM_Exec+0x6a>
 8012938:	4b0c      	ldr	r3, [pc, #48]	; (801296c <WM_Exec+0x80>)
 801293a:	6818      	ldr	r0, [r3, #0]
 801293c:	b120      	cbz	r0, 8012948 <WM_Exec+0x5c>
 801293e:	6843      	ldr	r3, [r0, #4]
 8012940:	4798      	blx	r3
 8012942:	4b0b      	ldr	r3, [pc, #44]	; (8012970 <WM_Exec+0x84>)
 8012944:	601e      	str	r6, [r3, #0]
 8012946:	e006      	b.n	8012956 <WM_Exec+0x6a>
 8012948:	f006 fc2a 	bl	80191a0 <GUI__ManageCache>
 801294c:	e003      	b.n	8012956 <WM_Exec+0x6a>
 801294e:	2001      	movs	r0, #1
 8012950:	f006 fc26 	bl	80191a0 <GUI__ManageCache>
 8012954:	e7e4      	b.n	8012920 <WM_Exec+0x34>
 8012956:	f7fb fe01 	bl	800e55c <GUI_Unlock>
 801295a:	4628      	mov	r0, r5
 801295c:	bd70      	pop	{r4, r5, r6, pc}
 801295e:	bf00      	nop
 8012960:	2002263c 	.word	0x2002263c
 8012964:	20000018 	.word	0x20000018
 8012968:	20022648 	.word	0x20022648
 801296c:	20022670 	.word	0x20022670
 8012970:	20022658 	.word	0x20022658

08012974 <WM_Activate>:
 8012974:	4b02      	ldr	r3, [pc, #8]	; (8012980 <WM_Activate+0xc>)
 8012976:	2201      	movs	r2, #1
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801297e:	4770      	bx	lr
 8012980:	20000018 	.word	0x20000018

08012984 <WM_Deactivate>:
 8012984:	b508      	push	{r3, lr}
 8012986:	4b06      	ldr	r3, [pc, #24]	; (80129a0 <WM_Deactivate+0x1c>)
 8012988:	2200      	movs	r2, #0
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012990:	f7fb fdee 	bl	800e570 <GUI_Lock>
 8012994:	f7fc fd6e 	bl	800f474 <LCD_SetClipRectMax>
 8012998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801299c:	f7fb bdde 	b.w	800e55c <GUI_Unlock>
 80129a0:	20000018 	.word	0x20000018

080129a4 <WM_DefaultProc>:
 80129a4:	b510      	push	{r4, lr}
 80129a6:	4604      	mov	r4, r0
 80129a8:	6840      	ldr	r0, [r0, #4]
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	2b17      	cmp	r3, #23
 80129ae:	d010      	beq.n	80129d2 <WM_DefaultProc+0x2e>
 80129b0:	dc07      	bgt.n	80129c2 <WM_DefaultProc+0x1e>
 80129b2:	2b0e      	cmp	r3, #14
 80129b4:	d00f      	beq.n	80129d6 <WM_DefaultProc+0x32>
 80129b6:	2b14      	cmp	r3, #20
 80129b8:	d115      	bne.n	80129e6 <WM_DefaultProc+0x42>
 80129ba:	68e1      	ldr	r1, [r4, #12]
 80129bc:	f001 f99c 	bl	8013cf8 <WM__GetClientRectEx>
 80129c0:	e011      	b.n	80129e6 <WM_DefaultProc+0x42>
 80129c2:	2b22      	cmp	r3, #34	; 0x22
 80129c4:	d00c      	beq.n	80129e0 <WM_DefaultProc+0x3c>
 80129c6:	2b28      	cmp	r3, #40	; 0x28
 80129c8:	d10d      	bne.n	80129e6 <WM_DefaultProc+0x42>
 80129ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ce:	f7ff bb81 	b.w	80120d4 <WM_InvalidateWindow>
 80129d2:	60e0      	str	r0, [r4, #12]
 80129d4:	bd10      	pop	{r4, pc}
 80129d6:	4621      	mov	r1, r4
 80129d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129dc:	f000 bb89 	b.w	80130f2 <WM_SendToParent>
 80129e0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80129e4:	e000      	b.n	80129e8 <WM_DefaultProc+0x44>
 80129e6:	2300      	movs	r3, #0
 80129e8:	60e3      	str	r3, [r4, #12]
 80129ea:	bd10      	pop	{r4, pc}

080129ec <_cbBackWin>:
 80129ec:	6803      	ldr	r3, [r0, #0]
 80129ee:	2b0e      	cmp	r3, #14
 80129f0:	b510      	push	{r4, lr}
 80129f2:	4604      	mov	r4, r0
 80129f4:	d002      	beq.n	80129fc <_cbBackWin+0x10>
 80129f6:	2b0f      	cmp	r3, #15
 80129f8:	d009      	beq.n	8012a0e <_cbBackWin+0x22>
 80129fa:	e020      	b.n	8012a3e <_cbBackWin+0x52>
 80129fc:	68c3      	ldr	r3, [r0, #12]
 80129fe:	685a      	ldr	r2, [r3, #4]
 8012a00:	2a01      	cmp	r2, #1
 8012a02:	d121      	bne.n	8012a48 <_cbBackWin+0x5c>
 8012a04:	6818      	ldr	r0, [r3, #0]
 8012a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a0a:	f7fb bcc9 	b.w	800e3a0 <GUI_StoreKey>
 8012a0e:	4a0f      	ldr	r2, [pc, #60]	; (8012a4c <_cbBackWin+0x60>)
 8012a10:	6843      	ldr	r3, [r0, #4]
 8012a12:	6811      	ldr	r1, [r2, #0]
 8012a14:	428b      	cmp	r3, r1
 8012a16:	d006      	beq.n	8012a26 <_cbBackWin+0x3a>
 8012a18:	6852      	ldr	r2, [r2, #4]
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	bf0c      	ite	eq
 8012a1e:	2301      	moveq	r3, #1
 8012a20:	f04f 33ff 	movne.w	r3, #4294967295
 8012a24:	e000      	b.n	8012a28 <_cbBackWin+0x3c>
 8012a26:	2300      	movs	r3, #0
 8012a28:	4a09      	ldr	r2, [pc, #36]	; (8012a50 <_cbBackWin+0x64>)
 8012a2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012a2e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012a32:	4298      	cmp	r0, r3
 8012a34:	d003      	beq.n	8012a3e <_cbBackWin+0x52>
 8012a36:	f7fa ffe4 	bl	800da02 <GUI_SetBkColor>
 8012a3a:	f7fb f91f 	bl	800dc7c <GUI_Clear>
 8012a3e:	4620      	mov	r0, r4
 8012a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a44:	f7ff bfae 	b.w	80129a4 <WM_DefaultProc>
 8012a48:	bd10      	pop	{r4, pc}
 8012a4a:	bf00      	nop
 8012a4c:	20022630 	.word	0x20022630
 8012a50:	20022664 	.word	0x20022664

08012a54 <WM_Init>:
 8012a54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012a58:	4d2a      	ldr	r5, [pc, #168]	; (8012b04 <WM_Init+0xb0>)
 8012a5a:	7828      	ldrb	r0, [r5, #0]
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	d14d      	bne.n	8012afc <WM_Init+0xa8>
 8012a60:	4b29      	ldr	r3, [pc, #164]	; (8012b08 <WM_Init+0xb4>)
 8012a62:	4604      	mov	r4, r0
 8012a64:	4e29      	ldr	r6, [pc, #164]	; (8012b0c <WM_Init+0xb8>)
 8012a66:	6018      	str	r0, [r3, #0]
 8012a68:	4b29      	ldr	r3, [pc, #164]	; (8012b10 <WM_Init+0xbc>)
 8012a6a:	4f2a      	ldr	r7, [pc, #168]	; (8012b14 <WM_Init+0xc0>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012b40 <WM_Init+0xec>
 8012a72:	6458      	str	r0, [r3, #68]	; 0x44
 8012a74:	4b28      	ldr	r3, [pc, #160]	; (8012b18 <WM_Init+0xc4>)
 8012a76:	60a8      	str	r0, [r5, #8]
 8012a78:	8018      	strh	r0, [r3, #0]
 8012a7a:	4b28      	ldr	r3, [pc, #160]	; (8012b1c <WM_Init+0xc8>)
 8012a7c:	8018      	strh	r0, [r3, #0]
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f7fb fa56 	bl	800df30 <GUI_DEVICE__GetpDriver>
 8012a84:	b1a8      	cbz	r0, 8012ab2 <WM_Init+0x5e>
 8012a86:	f04f 32ff 	mov.w	r2, #4294967295
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	9602      	str	r6, [sp, #8]
 8012a90:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012a94:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8012a98:	9103      	str	r1, [sp, #12]
 8012a9a:	4608      	mov	r0, r1
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	f7ff fb4b 	bl	8012138 <WM_CreateWindowAsChild>
 8012aa2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012aa6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8012aaa:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 8012aae:	f7ff fb11 	bl	80120d4 <WM_InvalidateWindow>
 8012ab2:	3401      	adds	r4, #1
 8012ab4:	2c02      	cmp	r4, #2
 8012ab6:	d1e2      	bne.n	8012a7e <WM_Init+0x2a>
 8012ab8:	4819      	ldr	r0, [pc, #100]	; (8012b20 <WM_Init+0xcc>)
 8012aba:	f001 f8ff 	bl	8013cbc <WM__AddCriticalHandle>
 8012abe:	4819      	ldr	r0, [pc, #100]	; (8012b24 <WM_Init+0xd0>)
 8012ac0:	f001 f8fc 	bl	8013cbc <WM__AddCriticalHandle>
 8012ac4:	4818      	ldr	r0, [pc, #96]	; (8012b28 <WM_Init+0xd4>)
 8012ac6:	f001 f8f9 	bl	8013cbc <WM__AddCriticalHandle>
 8012aca:	4818      	ldr	r0, [pc, #96]	; (8012b2c <WM_Init+0xd8>)
 8012acc:	f001 f8f6 	bl	8013cbc <WM__AddCriticalHandle>
 8012ad0:	4817      	ldr	r0, [pc, #92]	; (8012b30 <WM_Init+0xdc>)
 8012ad2:	f001 f8f3 	bl	8013cbc <WM__AddCriticalHandle>
 8012ad6:	4817      	ldr	r0, [pc, #92]	; (8012b34 <WM_Init+0xe0>)
 8012ad8:	f001 f8f0 	bl	8013cbc <WM__AddCriticalHandle>
 8012adc:	4b0d      	ldr	r3, [pc, #52]	; (8012b14 <WM_Init+0xc0>)
 8012ade:	6818      	ldr	r0, [r3, #0]
 8012ae0:	f7ff fb06 	bl	80120f0 <WM_SelectWindow>
 8012ae4:	f7ff ff46 	bl	8012974 <WM_Activate>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	4813      	ldr	r0, [pc, #76]	; (8012b38 <WM_Init+0xe4>)
 8012aec:	702b      	strb	r3, [r5, #0]
 8012aee:	4b13      	ldr	r3, [pc, #76]	; (8012b3c <WM_Init+0xe8>)
 8012af0:	626b      	str	r3, [r5, #36]	; 0x24
 8012af2:	b004      	add	sp, #16
 8012af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012af8:	f7fb b9e2 	b.w	800dec0 <GUI__RegisterExit>
 8012afc:	b004      	add	sp, #16
 8012afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b02:	bf00      	nop
 8012b04:	2000044c 	.word	0x2000044c
 8012b08:	2002264c 	.word	0x2002264c
 8012b0c:	080129ed 	.word	0x080129ed
 8012b10:	20000018 	.word	0x20000018
 8012b14:	20022630 	.word	0x20022630
 8012b18:	20022648 	.word	0x20022648
 8012b1c:	20022628 	.word	0x20022628
 8012b20:	200226a4 	.word	0x200226a4
 8012b24:	20022694 	.word	0x20022694
 8012b28:	20022684 	.word	0x20022684
 8012b2c:	200226ac 	.word	0x200226ac
 8012b30:	2002269c 	.word	0x2002269c
 8012b34:	2002268c 	.word	0x2002268c
 8012b38:	20000470 	.word	0x20000470
 8012b3c:	080116f5 	.word	0x080116f5
 8012b40:	20022664 	.word	0x20022664

08012b44 <WM_ForEachDesc>:
 8012b44:	b570      	push	{r4, r5, r6, lr}
 8012b46:	4604      	mov	r4, r0
 8012b48:	460d      	mov	r5, r1
 8012b4a:	4616      	mov	r6, r2
 8012b4c:	f7fb fd10 	bl	800e570 <GUI_Lock>
 8012b50:	4629      	mov	r1, r5
 8012b52:	4620      	mov	r0, r4
 8012b54:	4632      	mov	r2, r6
 8012b56:	f000 ff77 	bl	8013a48 <WM__ForEachDesc>
 8012b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b5e:	f7fb bcfd 	b.w	800e55c <GUI_Unlock>

08012b62 <WM_GetClientRectEx>:
 8012b62:	b538      	push	{r3, r4, r5, lr}
 8012b64:	4604      	mov	r4, r0
 8012b66:	460d      	mov	r5, r1
 8012b68:	f7fb fd02 	bl	800e570 <GUI_Lock>
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f001 f8c2 	bl	8013cf8 <WM__GetClientRectEx>
 8012b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b78:	f7fb bcf0 	b.w	800e55c <GUI_Unlock>

08012b7c <WM_GetClientRect>:
 8012b7c:	b510      	push	{r4, lr}
 8012b7e:	4604      	mov	r4, r0
 8012b80:	f7fb fcf6 	bl	800e570 <GUI_Lock>
 8012b84:	4b06      	ldr	r3, [pc, #24]	; (8012ba0 <WM_GetClientRect+0x24>)
 8012b86:	6818      	ldr	r0, [r3, #0]
 8012b88:	b910      	cbnz	r0, 8012b90 <WM_GetClientRect+0x14>
 8012b8a:	4b06      	ldr	r3, [pc, #24]	; (8012ba4 <WM_GetClientRect+0x28>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012b90:	4621      	mov	r1, r4
 8012b92:	f7ff ffe6 	bl	8012b62 <WM_GetClientRectEx>
 8012b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b9a:	f7fb bcdf 	b.w	800e55c <GUI_Unlock>
 8012b9e:	bf00      	nop
 8012ba0:	2002262c 	.word	0x2002262c
 8012ba4:	20000018 	.word	0x20000018

08012ba8 <WM_GetClientWindow>:
 8012ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012baa:	2300      	movs	r3, #0
 8012bac:	a904      	add	r1, sp, #16
 8012bae:	9303      	str	r3, [sp, #12]
 8012bb0:	2317      	movs	r3, #23
 8012bb2:	f841 3d10 	str.w	r3, [r1, #-16]!
 8012bb6:	f7ff f924 	bl	8011e02 <WM_SendMessage>
 8012bba:	9803      	ldr	r0, [sp, #12]
 8012bbc:	b005      	add	sp, #20
 8012bbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012bc4 <WM_GetDesktopWindow>:
 8012bc4:	4b03      	ldr	r3, [pc, #12]	; (8012bd4 <WM_GetDesktopWindow+0x10>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	7c5a      	ldrb	r2, [r3, #17]
 8012bca:	4b03      	ldr	r3, [pc, #12]	; (8012bd8 <WM_GetDesktopWindow+0x14>)
 8012bcc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012bd0:	4770      	bx	lr
 8012bd2:	bf00      	nop
 8012bd4:	20000018 	.word	0x20000018
 8012bd8:	20022630 	.word	0x20022630

08012bdc <WM_GetDesktopWindowEx>:
 8012bdc:	2801      	cmp	r0, #1
 8012bde:	bf9a      	itte	ls
 8012be0:	4b02      	ldrls	r3, [pc, #8]	; (8012bec <WM_GetDesktopWindowEx+0x10>)
 8012be2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012be6:	2000      	movhi	r0, #0
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop
 8012bec:	20022630 	.word	0x20022630

08012bf0 <WM_GetFirstChild>:
 8012bf0:	b510      	push	{r4, lr}
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	b138      	cbz	r0, 8012c06 <WM_GetFirstChild+0x16>
 8012bf6:	f7fb fcbb 	bl	800e570 <GUI_Lock>
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f7fa fb5e 	bl	800d2bc <GUI_ALLOC_h2p>
 8012c00:	69c4      	ldr	r4, [r0, #28]
 8012c02:	f7fb fcab 	bl	800e55c <GUI_Unlock>
 8012c06:	4620      	mov	r0, r4
 8012c08:	bd10      	pop	{r4, pc}

08012c0a <WM_GetFlags>:
 8012c0a:	b510      	push	{r4, lr}
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	b138      	cbz	r0, 8012c20 <WM_GetFlags+0x16>
 8012c10:	f7fb fcae 	bl	800e570 <GUI_Lock>
 8012c14:	4620      	mov	r0, r4
 8012c16:	f7fa fb51 	bl	800d2bc <GUI_ALLOC_h2p>
 8012c1a:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8012c1c:	f7fb fc9e 	bl	800e55c <GUI_Unlock>
 8012c20:	4620      	mov	r0, r4
 8012c22:	bd10      	pop	{r4, pc}

08012c24 <WM_GetFocusedWindow>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	f7fb fca3 	bl	800e570 <GUI_Lock>
 8012c2a:	4b04      	ldr	r3, [pc, #16]	; (8012c3c <WM_GetFocusedWindow+0x18>)
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	4b04      	ldr	r3, [pc, #16]	; (8012c40 <WM_GetFocusedWindow+0x1c>)
 8012c30:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8012c34:	f7fb fc92 	bl	800e55c <GUI_Unlock>
 8012c38:	4620      	mov	r0, r4
 8012c3a:	bd10      	pop	{r4, pc}
 8012c3c:	20022650 	.word	0x20022650
 8012c40:	20022640 	.word	0x20022640

08012c44 <WM_GetId>:
 8012c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c46:	4604      	mov	r4, r0
 8012c48:	2210      	movs	r2, #16
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	4668      	mov	r0, sp
 8012c4e:	f008 fe22 	bl	801b896 <memset>
 8012c52:	2315      	movs	r3, #21
 8012c54:	4620      	mov	r0, r4
 8012c56:	4669      	mov	r1, sp
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	f7ff f8d2 	bl	8011e02 <WM_SendMessage>
 8012c5e:	9803      	ldr	r0, [sp, #12]
 8012c60:	b004      	add	sp, #16
 8012c62:	bd10      	pop	{r4, pc}

08012c64 <_GetDialogItem>:
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	4606      	mov	r6, r0
 8012c68:	460d      	mov	r5, r1
 8012c6a:	f7fa fb27 	bl	800d2bc <GUI_ALLOC_h2p>
 8012c6e:	69c4      	ldr	r4, [r0, #28]
 8012c70:	b14c      	cbz	r4, 8012c86 <_GetDialogItem+0x22>
 8012c72:	4620      	mov	r0, r4
 8012c74:	f7ff ffe6 	bl	8012c44 <WM_GetId>
 8012c78:	42a8      	cmp	r0, r5
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	d014      	beq.n	8012ca8 <_GetDialogItem+0x44>
 8012c7e:	f7fa fb1d 	bl	800d2bc <GUI_ALLOC_h2p>
 8012c82:	6a04      	ldr	r4, [r0, #32]
 8012c84:	e7f4      	b.n	8012c70 <_GetDialogItem+0xc>
 8012c86:	4630      	mov	r0, r6
 8012c88:	f7fa fb18 	bl	800d2bc <GUI_ALLOC_h2p>
 8012c8c:	69c4      	ldr	r4, [r0, #28]
 8012c8e:	b14c      	cbz	r4, 8012ca4 <_GetDialogItem+0x40>
 8012c90:	4629      	mov	r1, r5
 8012c92:	4620      	mov	r0, r4
 8012c94:	f7ff ffe6 	bl	8012c64 <_GetDialogItem>
 8012c98:	b930      	cbnz	r0, 8012ca8 <_GetDialogItem+0x44>
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f7fa fb0e 	bl	800d2bc <GUI_ALLOC_h2p>
 8012ca0:	6a04      	ldr	r4, [r0, #32]
 8012ca2:	e7f4      	b.n	8012c8e <_GetDialogItem+0x2a>
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	bd70      	pop	{r4, r5, r6, pc}
 8012ca8:	bd70      	pop	{r4, r5, r6, pc}

08012caa <WM_GetDialogItem>:
 8012caa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cac:	460d      	mov	r5, r1
 8012cae:	4604      	mov	r4, r0
 8012cb0:	b1f0      	cbz	r0, 8012cf0 <WM_GetDialogItem+0x46>
 8012cb2:	f7fb fc5d 	bl	800e570 <GUI_Lock>
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f7fa fb0a 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012cbc:	ab02      	add	r3, sp, #8
 8012cbe:	69c4      	ldr	r4, [r0, #28]
 8012cc0:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fa fb11 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012cca:	b17c      	cbz	r4, 8012cec <WM_GetDialogItem+0x42>
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f7ff ffb9 	bl	8012c44 <WM_GetId>
 8012cd2:	4285      	cmp	r5, r0
 8012cd4:	d00a      	beq.n	8012cec <WM_GetDialogItem+0x42>
 8012cd6:	4629      	mov	r1, r5
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f7ff ffc3 	bl	8012c64 <_GetDialogItem>
 8012cde:	b920      	cbnz	r0, 8012cea <WM_GetDialogItem+0x40>
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f7fa faeb 	bl	800d2bc <GUI_ALLOC_h2p>
 8012ce6:	6a04      	ldr	r4, [r0, #32]
 8012ce8:	e7ef      	b.n	8012cca <WM_GetDialogItem+0x20>
 8012cea:	4604      	mov	r4, r0
 8012cec:	f7fb fc36 	bl	800e55c <GUI_Unlock>
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	b003      	add	sp, #12
 8012cf4:	bd30      	pop	{r4, r5, pc}

08012cf6 <WM_GetInsideRectEx>:
 8012cf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cf8:	2314      	movs	r3, #20
 8012cfa:	9103      	str	r1, [sp, #12]
 8012cfc:	a904      	add	r1, sp, #16
 8012cfe:	f841 3d10 	str.w	r3, [r1, #-16]!
 8012d02:	f7ff f87e 	bl	8011e02 <WM_SendMessage>
 8012d06:	b005      	add	sp, #20
 8012d08:	f85d fb04 	ldr.w	pc, [sp], #4

08012d0c <WM_GetWindowOrgX>:
 8012d0c:	b510      	push	{r4, lr}
 8012d0e:	4604      	mov	r4, r0
 8012d10:	b140      	cbz	r0, 8012d24 <WM_GetWindowOrgX+0x18>
 8012d12:	f7fb fc2d 	bl	800e570 <GUI_Lock>
 8012d16:	4620      	mov	r0, r4
 8012d18:	f7fa fad0 	bl	800d2bc <GUI_ALLOC_h2p>
 8012d1c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012d20:	f7fb fc1c 	bl	800e55c <GUI_Unlock>
 8012d24:	4620      	mov	r0, r4
 8012d26:	bd10      	pop	{r4, pc}

08012d28 <WM_GetParent>:
 8012d28:	b510      	push	{r4, lr}
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	b138      	cbz	r0, 8012d3e <WM_GetParent+0x16>
 8012d2e:	f7fb fc1f 	bl	800e570 <GUI_Lock>
 8012d32:	4620      	mov	r0, r4
 8012d34:	f7fa fac2 	bl	800d2bc <GUI_ALLOC_h2p>
 8012d38:	6984      	ldr	r4, [r0, #24]
 8012d3a:	f7fb fc0f 	bl	800e55c <GUI_Unlock>
 8012d3e:	4620      	mov	r0, r4
 8012d40:	bd10      	pop	{r4, pc}

08012d42 <WM_BringToBottom>:
 8012d42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d46:	4604      	mov	r4, r0
 8012d48:	b087      	sub	sp, #28
 8012d4a:	f7fb fc11 	bl	800e570 <GUI_Lock>
 8012d4e:	2c00      	cmp	r4, #0
 8012d50:	d03a      	beq.n	8012dc8 <WM_BringToBottom+0x86>
 8012d52:	4620      	mov	r0, r4
 8012d54:	ad04      	add	r5, sp, #16
 8012d56:	f7fa fabb 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	9001      	str	r0, [sp, #4]
 8012d5e:	6a1e      	ldr	r6, [r3, #32]
 8012d60:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8012d64:	c803      	ldmia	r0, {r0, r1}
 8012d66:	e885 0003 	stmia.w	r5, {r0, r1}
 8012d6a:	a801      	add	r0, sp, #4
 8012d6c:	f7fa fabe 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012d70:	4620      	mov	r0, r4
 8012d72:	f000 fe93 	bl	8013a9c <WM__GetPrevSibling>
 8012d76:	4607      	mov	r7, r0
 8012d78:	b330      	cbz	r0, 8012dc8 <WM_BringToBottom+0x86>
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f7ff ffd4 	bl	8012d28 <WM_GetParent>
 8012d80:	f019 0f02 	tst.w	r9, #2
 8012d84:	4680      	mov	r8, r0
 8012d86:	d004      	beq.n	8012d92 <WM_BringToBottom+0x50>
 8012d88:	4601      	mov	r1, r0
 8012d8a:	4632      	mov	r2, r6
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	f7ff f948 	bl	8012022 <WM__InvalidateRectEx>
 8012d92:	4620      	mov	r0, r4
 8012d94:	f7fa fa9c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012d98:	9001      	str	r0, [sp, #4]
 8012d9a:	4640      	mov	r0, r8
 8012d9c:	f7fa fa98 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012da0:	9003      	str	r0, [sp, #12]
 8012da2:	4638      	mov	r0, r7
 8012da4:	f7fa fa94 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012da8:	9b03      	ldr	r3, [sp, #12]
 8012daa:	9a01      	ldr	r2, [sp, #4]
 8012dac:	69d9      	ldr	r1, [r3, #28]
 8012dae:	6206      	str	r6, [r0, #32]
 8012db0:	9002      	str	r0, [sp, #8]
 8012db2:	a801      	add	r0, sp, #4
 8012db4:	6211      	str	r1, [r2, #32]
 8012db6:	61dc      	str	r4, [r3, #28]
 8012db8:	f7fa fa98 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012dbc:	a803      	add	r0, sp, #12
 8012dbe:	f7fa fa95 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012dc2:	a802      	add	r0, sp, #8
 8012dc4:	f7fa fa92 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8012dc8:	f7fb fbc8 	bl	800e55c <GUI_Unlock>
 8012dcc:	b007      	add	sp, #28
 8012dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012dd2 <WM_GetScrollbarH>:
 8012dd2:	b510      	push	{r4, lr}
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	b140      	cbz	r0, 8012dea <WM_GetScrollbarH+0x18>
 8012dd8:	f7fb fbca 	bl	800e570 <GUI_Lock>
 8012ddc:	4620      	mov	r0, r4
 8012dde:	21ff      	movs	r1, #255	; 0xff
 8012de0:	f7ff ff40 	bl	8012c64 <_GetDialogItem>
 8012de4:	4604      	mov	r4, r0
 8012de6:	f7fb fbb9 	bl	800e55c <GUI_Unlock>
 8012dea:	4620      	mov	r0, r4
 8012dec:	bd10      	pop	{r4, pc}

08012dee <WM_GetScrollbarV>:
 8012dee:	b510      	push	{r4, lr}
 8012df0:	4604      	mov	r4, r0
 8012df2:	b140      	cbz	r0, 8012e06 <WM_GetScrollbarV+0x18>
 8012df4:	f7fb fbbc 	bl	800e570 <GUI_Lock>
 8012df8:	4620      	mov	r0, r4
 8012dfa:	21fe      	movs	r1, #254	; 0xfe
 8012dfc:	f7ff ff32 	bl	8012c64 <_GetDialogItem>
 8012e00:	4604      	mov	r4, r0
 8012e02:	f7fb fbab 	bl	800e55c <GUI_Unlock>
 8012e06:	4620      	mov	r0, r4
 8012e08:	bd10      	pop	{r4, pc}

08012e0a <WM_GetScrollPartner>:
 8012e0a:	b538      	push	{r3, r4, r5, lr}
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	f7ff ff19 	bl	8012c44 <WM_GetId>
 8012e12:	28ff      	cmp	r0, #255	; 0xff
 8012e14:	4604      	mov	r4, r0
 8012e16:	d004      	beq.n	8012e22 <WM_GetScrollPartner+0x18>
 8012e18:	28fe      	cmp	r0, #254	; 0xfe
 8012e1a:	bf14      	ite	ne
 8012e1c:	4604      	movne	r4, r0
 8012e1e:	24ff      	moveq	r4, #255	; 0xff
 8012e20:	e000      	b.n	8012e24 <WM_GetScrollPartner+0x1a>
 8012e22:	24fe      	movs	r4, #254	; 0xfe
 8012e24:	4628      	mov	r0, r5
 8012e26:	f7ff ff7f 	bl	8012d28 <WM_GetParent>
 8012e2a:	4621      	mov	r1, r4
 8012e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e30:	f7ff bf3b 	b.w	8012caa <WM_GetDialogItem>

08012e34 <WM_GetScrollState>:
 8012e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e36:	2323      	movs	r3, #35	; 0x23
 8012e38:	9103      	str	r1, [sp, #12]
 8012e3a:	4669      	mov	r1, sp
 8012e3c:	9300      	str	r3, [sp, #0]
 8012e3e:	f7fe ffe0 	bl	8011e02 <WM_SendMessage>
 8012e42:	b005      	add	sp, #20
 8012e44:	f85d fb04 	ldr.w	pc, [sp], #4

08012e48 <WM_GetWindowRectEx>:
 8012e48:	b538      	push	{r3, r4, r5, lr}
 8012e4a:	460c      	mov	r4, r1
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	b168      	cbz	r0, 8012e6c <WM_GetWindowRectEx+0x24>
 8012e50:	b161      	cbz	r1, 8012e6c <WM_GetWindowRectEx+0x24>
 8012e52:	f7fb fb8d 	bl	800e570 <GUI_Lock>
 8012e56:	4628      	mov	r0, r5
 8012e58:	f7fa fa30 	bl	800d2bc <GUI_ALLOC_h2p>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	cb03      	ldmia	r3!, {r0, r1}
 8012e60:	6020      	str	r0, [r4, #0]
 8012e62:	6061      	str	r1, [r4, #4]
 8012e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e68:	f7fb bb78 	b.w	800e55c <GUI_Unlock>
 8012e6c:	bd38      	pop	{r3, r4, r5, pc}

08012e6e <WM_GetInsideRectExScrollbar>:
 8012e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e70:	460c      	mov	r4, r1
 8012e72:	b087      	sub	sp, #28
 8012e74:	4607      	mov	r7, r0
 8012e76:	2800      	cmp	r0, #0
 8012e78:	d04d      	beq.n	8012f16 <WM_GetInsideRectExScrollbar+0xa8>
 8012e7a:	2900      	cmp	r1, #0
 8012e7c:	d04b      	beq.n	8012f16 <WM_GetInsideRectExScrollbar+0xa8>
 8012e7e:	21ff      	movs	r1, #255	; 0xff
 8012e80:	f7ff ff13 	bl	8012caa <WM_GetDialogItem>
 8012e84:	21fe      	movs	r1, #254	; 0xfe
 8012e86:	4605      	mov	r5, r0
 8012e88:	4638      	mov	r0, r7
 8012e8a:	f7ff ff0e 	bl	8012caa <WM_GetDialogItem>
 8012e8e:	4669      	mov	r1, sp
 8012e90:	4606      	mov	r6, r0
 8012e92:	4638      	mov	r0, r7
 8012e94:	f7ff ffd8 	bl	8012e48 <WM_GetWindowRectEx>
 8012e98:	a902      	add	r1, sp, #8
 8012e9a:	4638      	mov	r0, r7
 8012e9c:	f7ff ff2b 	bl	8012cf6 <WM_GetInsideRectEx>
 8012ea0:	b1ce      	cbz	r6, 8012ed6 <WM_GetInsideRectExScrollbar+0x68>
 8012ea2:	a904      	add	r1, sp, #16
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	f7ff ffcf 	bl	8012e48 <WM_GetWindowRectEx>
 8012eaa:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8012eae:	f9bd 1000 	ldrsh.w	r1, [sp]
 8012eb2:	a804      	add	r0, sp, #16
 8012eb4:	4252      	negs	r2, r2
 8012eb6:	4249      	negs	r1, r1
 8012eb8:	f7fa fcbb 	bl	800d832 <GUI_MoveRect>
 8012ebc:	4630      	mov	r0, r6
 8012ebe:	f7ff fea4 	bl	8012c0a <WM_GetFlags>
 8012ec2:	f000 0082 	and.w	r0, r0, #130	; 0x82
 8012ec6:	2882      	cmp	r0, #130	; 0x82
 8012ec8:	bf02      	ittt	eq
 8012eca:	f8bd 3010 	ldrheq.w	r3, [sp, #16]
 8012ece:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8012ed2:	f8ad 300c 	strheq.w	r3, [sp, #12]
 8012ed6:	b1d5      	cbz	r5, 8012f0e <WM_GetInsideRectExScrollbar+0xa0>
 8012ed8:	a904      	add	r1, sp, #16
 8012eda:	4628      	mov	r0, r5
 8012edc:	f7ff ffb4 	bl	8012e48 <WM_GetWindowRectEx>
 8012ee0:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8012ee4:	f9bd 1000 	ldrsh.w	r1, [sp]
 8012ee8:	a804      	add	r0, sp, #16
 8012eea:	4252      	negs	r2, r2
 8012eec:	4249      	negs	r1, r1
 8012eee:	f7fa fca0 	bl	800d832 <GUI_MoveRect>
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	f7ff fe89 	bl	8012c0a <WM_GetFlags>
 8012ef8:	f400 7081 	and.w	r0, r0, #258	; 0x102
 8012efc:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8012f00:	bf02      	ittt	eq
 8012f02:	f8bd 3012 	ldrheq.w	r3, [sp, #18]
 8012f06:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8012f0a:	f8ad 300e 	strheq.w	r3, [sp, #14]
 8012f0e:	ab02      	add	r3, sp, #8
 8012f10:	cb03      	ldmia	r3!, {r0, r1}
 8012f12:	6020      	str	r0, [r4, #0]
 8012f14:	6061      	str	r1, [r4, #4]
 8012f16:	b007      	add	sp, #28
 8012f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012f1c <WM_HasFocus>:
 8012f1c:	4b04      	ldr	r3, [pc, #16]	; (8012f30 <WM_HasFocus+0x14>)
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	4b04      	ldr	r3, [pc, #16]	; (8012f34 <WM_HasFocus+0x18>)
 8012f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f26:	1a1b      	subs	r3, r3, r0
 8012f28:	4258      	negs	r0, r3
 8012f2a:	4158      	adcs	r0, r3
 8012f2c:	4770      	bx	lr
 8012f2e:	bf00      	nop
 8012f30:	20022650 	.word	0x20022650
 8012f34:	20022640 	.word	0x20022640

08012f38 <WM_IsFocusable>:
 8012f38:	b530      	push	{r4, r5, lr}
 8012f3a:	4605      	mov	r5, r0
 8012f3c:	b085      	sub	sp, #20
 8012f3e:	b908      	cbnz	r0, 8012f44 <WM_IsFocusable+0xc>
 8012f40:	2000      	movs	r0, #0
 8012f42:	e015      	b.n	8012f70 <WM_IsFocusable+0x38>
 8012f44:	f7fb fb14 	bl	800e570 <GUI_Lock>
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f7fa f9b7 	bl	800d2bc <GUI_ALLOC_h2p>
 8012f4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012f50:	f7fb fb04 	bl	800e55c <GUI_Unlock>
 8012f54:	07a3      	lsls	r3, r4, #30
 8012f56:	d5f3      	bpl.n	8012f40 <WM_IsFocusable+0x8>
 8012f58:	f014 0410 	ands.w	r4, r4, #16
 8012f5c:	d1f0      	bne.n	8012f40 <WM_IsFocusable+0x8>
 8012f5e:	a904      	add	r1, sp, #16
 8012f60:	231f      	movs	r3, #31
 8012f62:	4628      	mov	r0, r5
 8012f64:	9403      	str	r4, [sp, #12]
 8012f66:	f841 3d10 	str.w	r3, [r1, #-16]!
 8012f6a:	f7fe ff4a 	bl	8011e02 <WM_SendMessage>
 8012f6e:	9803      	ldr	r0, [sp, #12]
 8012f70:	b005      	add	sp, #20
 8012f72:	bd30      	pop	{r4, r5, pc}

08012f74 <WM_IsWindow>:
 8012f74:	b510      	push	{r4, lr}
 8012f76:	4604      	mov	r4, r0
 8012f78:	f7fb fafa 	bl	800e570 <GUI_Lock>
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	f7fe fef7 	bl	8011d70 <WM__IsWindow>
 8012f82:	4604      	mov	r4, r0
 8012f84:	f7fb faea 	bl	800e55c <GUI_Unlock>
 8012f88:	4620      	mov	r0, r4
 8012f8a:	bd10      	pop	{r4, pc}

08012f8c <WM_OnKey>:
 8012f8c:	b530      	push	{r4, r5, lr}
 8012f8e:	b087      	sub	sp, #28
 8012f90:	4605      	mov	r5, r0
 8012f92:	460c      	mov	r4, r1
 8012f94:	f7fb faec 	bl	800e570 <GUI_Lock>
 8012f98:	4b0b      	ldr	r3, [pc, #44]	; (8012fc8 <WM_OnKey+0x3c>)
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	4b0b      	ldr	r3, [pc, #44]	; (8012fcc <WM_OnKey+0x40>)
 8012f9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012fa2:	b150      	cbz	r0, 8012fba <WM_OnKey+0x2e>
 8012fa4:	230e      	movs	r3, #14
 8012fa6:	a902      	add	r1, sp, #8
 8012fa8:	9401      	str	r4, [sp, #4]
 8012faa:	2401      	movs	r4, #1
 8012fac:	9500      	str	r5, [sp, #0]
 8012fae:	9302      	str	r3, [sp, #8]
 8012fb0:	f8cd d014 	str.w	sp, [sp, #20]
 8012fb4:	f000 fdcc 	bl	8013b50 <WM__SendMessage>
 8012fb8:	e000      	b.n	8012fbc <WM_OnKey+0x30>
 8012fba:	4604      	mov	r4, r0
 8012fbc:	f7fb face 	bl	800e55c <GUI_Unlock>
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	b007      	add	sp, #28
 8012fc4:	bd30      	pop	{r4, r5, pc}
 8012fc6:	bf00      	nop
 8012fc8:	20022650 	.word	0x20022650
 8012fcc:	20022640 	.word	0x20022640

08012fd0 <WM_ResizeWindow>:
 8012fd0:	ea51 0302 	orrs.w	r3, r1, r2
 8012fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd8:	4606      	mov	r6, r0
 8012fda:	b08a      	sub	sp, #40	; 0x28
 8012fdc:	4688      	mov	r8, r1
 8012fde:	4617      	mov	r7, r2
 8012fe0:	d077      	beq.n	80130d2 <WM_ResizeWindow+0x102>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d075      	beq.n	80130d2 <WM_ResizeWindow+0x102>
 8012fe6:	f7fb fac3 	bl	800e570 <GUI_Lock>
 8012fea:	4630      	mov	r0, r6
 8012fec:	f7fa f970 	bl	800d2d0 <GUI_ALLOC_LockH>
 8012ff0:	ac04      	add	r4, sp, #16
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	9003      	str	r0, [sp, #12]
 8012ff6:	ad06      	add	r5, sp, #24
 8012ff8:	c803      	ldmia	r0, {r0, r1}
 8012ffa:	e884 0003 	stmia.w	r4, {r0, r1}
 8012ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8013002:	f1b8 0f00 	cmp.w	r8, #0
 8013006:	d010      	beq.n	801302a <WM_ResizeWindow+0x5a>
 8013008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801300a:	f402 7220 	and.w	r2, r2, #640	; 0x280
 801300e:	2a80      	cmp	r2, #128	; 0x80
 8013010:	bf0b      	itete	eq
 8013012:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
 8013016:	f8bd 201c 	ldrhne.w	r2, [sp, #28]
 801301a:	ebc8 0802 	rsbeq	r8, r8, r2
 801301e:	4490      	addne	r8, r2
 8013020:	bf0c      	ite	eq
 8013022:	f8ad 8018 	strheq.w	r8, [sp, #24]
 8013026:	f8ad 801c 	strhne.w	r8, [sp, #28]
 801302a:	b187      	cbz	r7, 801304e <WM_ResizeWindow+0x7e>
 801302c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801302e:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8013032:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8013036:	bf0b      	itete	eq
 8013038:	f8bd 201a 	ldrheq.w	r2, [sp, #26]
 801303c:	f8bd 201e 	ldrhne.w	r2, [sp, #30]
 8013040:	1bd7      	subeq	r7, r2, r7
 8013042:	18bf      	addne	r7, r7, r2
 8013044:	bf0c      	ite	eq
 8013046:	f8ad 701a 	strheq.w	r7, [sp, #26]
 801304a:	f8ad 701e 	strhne.w	r7, [sp, #30]
 801304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013050:	03da      	lsls	r2, r3, #15
 8013052:	d502      	bpl.n	801305a <WM_ResizeWindow+0x8a>
 8013054:	4630      	mov	r0, r6
 8013056:	f7fe fe9b 	bl	8011d90 <WM__InvalidateDrawAndDescs>
 801305a:	9b03      	ldr	r3, [sp, #12]
 801305c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013060:	e883 0003 	stmia.w	r3, {r0, r1}
 8013064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013066:	079b      	lsls	r3, r3, #30
 8013068:	d50a      	bpl.n	8013080 <WM_ResizeWindow+0xb0>
 801306a:	462a      	mov	r2, r5
 801306c:	4621      	mov	r1, r4
 801306e:	a808      	add	r0, sp, #32
 8013070:	f7fa fbb4 	bl	800d7dc <GUI_MergeRect>
 8013074:	9b03      	ldr	r3, [sp, #12]
 8013076:	a808      	add	r0, sp, #32
 8013078:	6a1a      	ldr	r2, [r3, #32]
 801307a:	6999      	ldr	r1, [r3, #24]
 801307c:	f7fe ffd1 	bl	8012022 <WM__InvalidateRectEx>
 8013080:	f9bd e016 	ldrsh.w	lr, [sp, #22]
 8013084:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 8013088:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 801308c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8013090:	ebce 0000 	rsb	r0, lr, r0
 8013094:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8013098:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801309c:	1a61      	subs	r1, r4, r1
 801309e:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 80130a2:	ac0a      	add	r4, sp, #40	; 0x28
 80130a4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80130a8:	1afb      	subs	r3, r7, r3
 80130aa:	9000      	str	r0, [sp, #0]
 80130ac:	1aaa      	subs	r2, r5, r2
 80130ae:	9803      	ldr	r0, [sp, #12]
 80130b0:	f000 fd8d 	bl	8013bce <WM__UpdateChildPositions>
 80130b4:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 80130b8:	f101 0008 	add.w	r0, r1, #8
 80130bc:	f7fb fe8f 	bl	800edde <GUI__IntersectRect>
 80130c0:	2105      	movs	r1, #5
 80130c2:	4630      	mov	r0, r6
 80130c4:	f7fe feac 	bl	8011e20 <WM__SendMsgNoData>
 80130c8:	4620      	mov	r0, r4
 80130ca:	f7fa f90f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80130ce:	f7fb fa45 	bl	800e55c <GUI_Unlock>
 80130d2:	b00a      	add	sp, #40	; 0x28
 80130d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130d8 <WM_SendMessageNoPara>:
 80130d8:	b538      	push	{r3, r4, r5, lr}
 80130da:	4604      	mov	r4, r0
 80130dc:	460d      	mov	r5, r1
 80130de:	f7fb fa47 	bl	800e570 <GUI_Lock>
 80130e2:	4629      	mov	r1, r5
 80130e4:	4620      	mov	r0, r4
 80130e6:	f000 fd5e 	bl	8013ba6 <WM__SendMessageNoPara>
 80130ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130ee:	f7fb ba35 	b.w	800e55c <GUI_Unlock>

080130f2 <WM_SendToParent>:
 80130f2:	b538      	push	{r3, r4, r5, lr}
 80130f4:	4605      	mov	r5, r0
 80130f6:	460c      	mov	r4, r1
 80130f8:	b169      	cbz	r1, 8013116 <WM_SendToParent+0x24>
 80130fa:	f7fb fa39 	bl	800e570 <GUI_Lock>
 80130fe:	4628      	mov	r0, r5
 8013100:	f7ff fe12 	bl	8012d28 <WM_GetParent>
 8013104:	b118      	cbz	r0, 801310e <WM_SendToParent+0x1c>
 8013106:	60a5      	str	r5, [r4, #8]
 8013108:	4621      	mov	r1, r4
 801310a:	f000 fd21 	bl	8013b50 <WM__SendMessage>
 801310e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013112:	f7fb ba23 	b.w	800e55c <GUI_Unlock>
 8013116:	bd38      	pop	{r3, r4, r5, pc}

08013118 <WM_NotifyParent>:
 8013118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801311a:	2326      	movs	r3, #38	; 0x26
 801311c:	9103      	str	r1, [sp, #12]
 801311e:	4669      	mov	r1, sp
 8013120:	9300      	str	r3, [sp, #0]
 8013122:	f7ff ffe6 	bl	80130f2 <WM_SendToParent>
 8013126:	b005      	add	sp, #20
 8013128:	f85d fb04 	ldr.w	pc, [sp], #4

0801312c <WM_SetFocus>:
 801312c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801312e:	b087      	sub	sp, #28
 8013130:	4604      	mov	r4, r0
 8013132:	2210      	movs	r2, #16
 8013134:	2100      	movs	r1, #0
 8013136:	a802      	add	r0, sp, #8
 8013138:	f008 fbad 	bl	801b896 <memset>
 801313c:	f7fb fa18 	bl	800e570 <GUI_Lock>
 8013140:	2c00      	cmp	r4, #0
 8013142:	d03c      	beq.n	80131be <WM_SetFocus+0x92>
 8013144:	4b21      	ldr	r3, [pc, #132]	; (80131cc <WM_SetFocus+0xa0>)
 8013146:	4a22      	ldr	r2, [pc, #136]	; (80131d0 <WM_SetFocus+0xa4>)
 8013148:	6819      	ldr	r1, [r3, #0]
 801314a:	461e      	mov	r6, r3
 801314c:	4617      	mov	r7, r2
 801314e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8013152:	4284      	cmp	r4, r0
 8013154:	d033      	beq.n	80131be <WM_SetFocus+0x92>
 8013156:	231e      	movs	r3, #30
 8013158:	9302      	str	r3, [sp, #8]
 801315a:	2300      	movs	r3, #0
 801315c:	e88d 0011 	stmia.w	sp, {r0, r4}
 8013160:	9305      	str	r3, [sp, #20]
 8013162:	b110      	cbz	r0, 801316a <WM_SetFocus+0x3e>
 8013164:	a902      	add	r1, sp, #8
 8013166:	f000 fcf3 	bl	8013b50 <WM__SendMessage>
 801316a:	2301      	movs	r3, #1
 801316c:	a902      	add	r1, sp, #8
 801316e:	4620      	mov	r0, r4
 8013170:	9305      	str	r3, [sp, #20]
 8013172:	f000 fced 	bl	8013b50 <WM__SendMessage>
 8013176:	9d05      	ldr	r5, [sp, #20]
 8013178:	bb15      	cbnz	r5, 80131c0 <WM_SetFocus+0x94>
 801317a:	6833      	ldr	r3, [r6, #0]
 801317c:	2620      	movs	r6, #32
 801317e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 8013182:	4620      	mov	r0, r4
 8013184:	f7ff fdd0 	bl	8012d28 <WM_GetParent>
 8013188:	4604      	mov	r4, r0
 801318a:	b130      	cbz	r0, 801319a <WM_SetFocus+0x6e>
 801318c:	a902      	add	r1, sp, #8
 801318e:	9602      	str	r6, [sp, #8]
 8013190:	f8cd d014 	str.w	sp, [sp, #20]
 8013194:	f000 fcdc 	bl	8013b50 <WM__SendMessage>
 8013198:	e7f3      	b.n	8013182 <WM_SetFocus+0x56>
 801319a:	9c00      	ldr	r4, [sp, #0]
 801319c:	4620      	mov	r0, r4
 801319e:	f7ff fee9 	bl	8012f74 <WM_IsWindow>
 80131a2:	b168      	cbz	r0, 80131c0 <WM_SetFocus+0x94>
 80131a4:	2620      	movs	r6, #32
 80131a6:	4620      	mov	r0, r4
 80131a8:	f7ff fdbe 	bl	8012d28 <WM_GetParent>
 80131ac:	4604      	mov	r4, r0
 80131ae:	b138      	cbz	r0, 80131c0 <WM_SetFocus+0x94>
 80131b0:	a902      	add	r1, sp, #8
 80131b2:	9602      	str	r6, [sp, #8]
 80131b4:	f8cd d014 	str.w	sp, [sp, #20]
 80131b8:	f000 fcca 	bl	8013b50 <WM__SendMessage>
 80131bc:	e7f3      	b.n	80131a6 <WM_SetFocus+0x7a>
 80131be:	2501      	movs	r5, #1
 80131c0:	f7fb f9cc 	bl	800e55c <GUI_Unlock>
 80131c4:	4628      	mov	r0, r5
 80131c6:	b007      	add	sp, #28
 80131c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131ca:	bf00      	nop
 80131cc:	20022650 	.word	0x20022650
 80131d0:	20022640 	.word	0x20022640

080131d4 <WM_SetScrollState>:
 80131d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80131d6:	b130      	cbz	r0, 80131e6 <WM_SetScrollState+0x12>
 80131d8:	b129      	cbz	r1, 80131e6 <WM_SetScrollState+0x12>
 80131da:	2324      	movs	r3, #36	; 0x24
 80131dc:	9103      	str	r1, [sp, #12]
 80131de:	4669      	mov	r1, sp
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	f7fe fe0e 	bl	8011e02 <WM_SendMessage>
 80131e6:	b005      	add	sp, #20
 80131e8:	f85d fb04 	ldr.w	pc, [sp], #4

080131ec <WM_SetSize>:
 80131ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80131f0:	460f      	mov	r7, r1
 80131f2:	4690      	mov	r8, r2
 80131f4:	4606      	mov	r6, r0
 80131f6:	b308      	cbz	r0, 801323c <WM_SetSize+0x50>
 80131f8:	f7fb f9ba 	bl	800e570 <GUI_Lock>
 80131fc:	4630      	mov	r0, r6
 80131fe:	f7fa f867 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013202:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8013206:	f9b0 4000 	ldrsh.w	r4, [r0]
 801320a:	f10d 0e08 	add.w	lr, sp, #8
 801320e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013212:	1b2c      	subs	r4, r5, r4
 8013214:	f84e 0d04 	str.w	r0, [lr, #-4]!
 8013218:	3401      	adds	r4, #1
 801321a:	1b3d      	subs	r5, r7, r4
 801321c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8013220:	4670      	mov	r0, lr
 8013222:	1ae3      	subs	r3, r4, r3
 8013224:	3301      	adds	r3, #1
 8013226:	ebc3 0408 	rsb	r4, r3, r8
 801322a:	f7fa f85f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801322e:	4629      	mov	r1, r5
 8013230:	4630      	mov	r0, r6
 8013232:	4622      	mov	r2, r4
 8013234:	f7ff fecc 	bl	8012fd0 <WM_ResizeWindow>
 8013238:	f7fb f990 	bl	800e55c <GUI_Unlock>
 801323c:	b002      	add	sp, #8
 801323e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08013244 <WM_SetUserClipRect>:
 8013244:	b538      	push	{r3, r4, r5, lr}
 8013246:	4605      	mov	r5, r0
 8013248:	f7fb f992 	bl	800e570 <GUI_Lock>
 801324c:	4b04      	ldr	r3, [pc, #16]	; (8013260 <WM_SetUserClipRect+0x1c>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8013252:	645d      	str	r5, [r3, #68]	; 0x44
 8013254:	f7fe fd68 	bl	8011d28 <WM__ActivateClipRect>
 8013258:	f7fb f980 	bl	800e55c <GUI_Unlock>
 801325c:	4620      	mov	r0, r4
 801325e:	bd38      	pop	{r3, r4, r5, pc}
 8013260:	20000018 	.word	0x20000018

08013264 <WM_InvalidateWindowAndDescs>:
 8013264:	b510      	push	{r4, lr}
 8013266:	4604      	mov	r4, r0
 8013268:	f7fb f982 	bl	800e570 <GUI_Lock>
 801326c:	b91c      	cbnz	r4, 8013276 <WM_InvalidateWindowAndDescs+0x12>
 801326e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013272:	f7fb b973 	b.w	800e55c <GUI_Unlock>
 8013276:	4620      	mov	r0, r4
 8013278:	f7fe ff2c 	bl	80120d4 <WM_InvalidateWindow>
 801327c:	4620      	mov	r0, r4
 801327e:	f7ff fcb7 	bl	8012bf0 <WM_GetFirstChild>
 8013282:	4604      	mov	r4, r0
 8013284:	2c00      	cmp	r4, #0
 8013286:	d0f2      	beq.n	801326e <WM_InvalidateWindowAndDescs+0xa>
 8013288:	4620      	mov	r0, r4
 801328a:	f7ff ffeb 	bl	8013264 <WM_InvalidateWindowAndDescs>
 801328e:	4620      	mov	r0, r4
 8013290:	f7fa f814 	bl	800d2bc <GUI_ALLOC_h2p>
 8013294:	6a04      	ldr	r4, [r0, #32]
 8013296:	e7f5      	b.n	8013284 <WM_InvalidateWindowAndDescs+0x20>

08013298 <WM_ShowWindow>:
 8013298:	b513      	push	{r0, r1, r4, lr}
 801329a:	4604      	mov	r4, r0
 801329c:	b198      	cbz	r0, 80132c6 <WM_ShowWindow+0x2e>
 801329e:	f7fb f967 	bl	800e570 <GUI_Lock>
 80132a2:	4620      	mov	r0, r4
 80132a4:	f7fa f814 	bl	800d2d0 <GUI_ALLOC_LockH>
 80132a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80132aa:	9001      	str	r0, [sp, #4]
 80132ac:	079a      	lsls	r2, r3, #30
 80132ae:	d405      	bmi.n	80132bc <WM_ShowWindow+0x24>
 80132b0:	f043 0302 	orr.w	r3, r3, #2
 80132b4:	6283      	str	r3, [r0, #40]	; 0x28
 80132b6:	4620      	mov	r0, r4
 80132b8:	f7ff ffd4 	bl	8013264 <WM_InvalidateWindowAndDescs>
 80132bc:	a801      	add	r0, sp, #4
 80132be:	f7fa f815 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80132c2:	f7fb f94b 	bl	800e55c <GUI_Unlock>
 80132c6:	b002      	add	sp, #8
 80132c8:	bd10      	pop	{r4, pc}
	...

080132cc <_MULTIBUF_End>:
 80132cc:	b570      	push	{r4, r5, r6, lr}
 80132ce:	2400      	movs	r4, #0
 80132d0:	4e07      	ldr	r6, [pc, #28]	; (80132f0 <_MULTIBUF_End+0x24>)
 80132d2:	4d08      	ldr	r5, [pc, #32]	; (80132f4 <_MULTIBUF_End+0x28>)
 80132d4:	6832      	ldr	r2, [r6, #0]
 80132d6:	682b      	ldr	r3, [r5, #0]
 80132d8:	b102      	cbz	r2, 80132dc <_MULTIBUF_End+0x10>
 80132da:	4013      	ands	r3, r2
 80132dc:	40e3      	lsrs	r3, r4
 80132de:	07db      	lsls	r3, r3, #31
 80132e0:	d502      	bpl.n	80132e8 <_MULTIBUF_End+0x1c>
 80132e2:	4620      	mov	r0, r4
 80132e4:	f7fa fffe 	bl	800e2e4 <GUI_MULTIBUF_EndEx>
 80132e8:	3401      	adds	r4, #1
 80132ea:	2c02      	cmp	r4, #2
 80132ec:	d1f2      	bne.n	80132d4 <_MULTIBUF_End+0x8>
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	200225c0 	.word	0x200225c0
 80132f4:	20022658 	.word	0x20022658

080132f8 <_MULTIBUF_Begin>:
 80132f8:	b570      	push	{r4, r5, r6, lr}
 80132fa:	2400      	movs	r4, #0
 80132fc:	4e07      	ldr	r6, [pc, #28]	; (801331c <_MULTIBUF_Begin+0x24>)
 80132fe:	4d08      	ldr	r5, [pc, #32]	; (8013320 <_MULTIBUF_Begin+0x28>)
 8013300:	6832      	ldr	r2, [r6, #0]
 8013302:	682b      	ldr	r3, [r5, #0]
 8013304:	b102      	cbz	r2, 8013308 <_MULTIBUF_Begin+0x10>
 8013306:	4013      	ands	r3, r2
 8013308:	40e3      	lsrs	r3, r4
 801330a:	07db      	lsls	r3, r3, #31
 801330c:	d502      	bpl.n	8013314 <_MULTIBUF_Begin+0x1c>
 801330e:	4620      	mov	r0, r4
 8013310:	f7fa ffb4 	bl	800e27c <GUI_MULTIBUF_BeginEx>
 8013314:	3401      	adds	r4, #1
 8013316:	2c02      	cmp	r4, #2
 8013318:	d1f2      	bne.n	8013300 <_MULTIBUF_Begin+0x8>
 801331a:	bd70      	pop	{r4, r5, r6, pc}
 801331c:	200225c0 	.word	0x200225c0
 8013320:	20022658 	.word	0x20022658

08013324 <WM_MULTIBUF_Enable>:
 8013324:	4a05      	ldr	r2, [pc, #20]	; (801333c <WM_MULTIBUF_Enable+0x18>)
 8013326:	6813      	ldr	r3, [r2, #0]
 8013328:	3300      	adds	r3, #0
 801332a:	bf18      	it	ne
 801332c:	2301      	movne	r3, #1
 801332e:	b110      	cbz	r0, 8013336 <WM_MULTIBUF_Enable+0x12>
 8013330:	4903      	ldr	r1, [pc, #12]	; (8013340 <WM_MULTIBUF_Enable+0x1c>)
 8013332:	6011      	str	r1, [r2, #0]
 8013334:	e000      	b.n	8013338 <WM_MULTIBUF_Enable+0x14>
 8013336:	6010      	str	r0, [r2, #0]
 8013338:	4618      	mov	r0, r3
 801333a:	4770      	bx	lr
 801333c:	20022670 	.word	0x20022670
 8013340:	0801c2bc 	.word	0x0801c2bc

08013344 <_MoveDescendents>:
 8013344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013348:	b088      	sub	sp, #32
 801334a:	4616      	mov	r6, r2
 801334c:	2210      	movs	r2, #16
 801334e:	2703      	movs	r7, #3
 8013350:	f10d 0808 	add.w	r8, sp, #8
 8013354:	4604      	mov	r4, r0
 8013356:	460d      	mov	r5, r1
 8013358:	eb0d 0002 	add.w	r0, sp, r2
 801335c:	2100      	movs	r1, #0
 801335e:	f008 fa9a 	bl	801b896 <memset>
 8013362:	b32c      	cbz	r4, 80133b0 <_MoveDescendents+0x6c>
 8013364:	4620      	mov	r0, r4
 8013366:	f7f9 ffb3 	bl	800d2d0 <GUI_ALLOC_LockH>
 801336a:	4632      	mov	r2, r6
 801336c:	4629      	mov	r1, r5
 801336e:	9001      	str	r0, [sp, #4]
 8013370:	f7fa fa5f 	bl	800d832 <GUI_MoveRect>
 8013374:	9801      	ldr	r0, [sp, #4]
 8013376:	4632      	mov	r2, r6
 8013378:	4629      	mov	r1, r5
 801337a:	3008      	adds	r0, #8
 801337c:	f7fa fa59 	bl	800d832 <GUI_MoveRect>
 8013380:	9b01      	ldr	r3, [sp, #4]
 8013382:	a801      	add	r0, sp, #4
 8013384:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8013388:	f8d3 9020 	ldr.w	r9, [r3, #32]
 801338c:	f7f9 ffae 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013390:	4632      	mov	r2, r6
 8013392:	4629      	mov	r1, r5
 8013394:	4650      	mov	r0, sl
 8013396:	f7ff ffd5 	bl	8013344 <_MoveDescendents>
 801339a:	4620      	mov	r0, r4
 801339c:	a904      	add	r1, sp, #16
 801339e:	9704      	str	r7, [sp, #16]
 80133a0:	f8cd 801c 	str.w	r8, [sp, #28]
 80133a4:	464c      	mov	r4, r9
 80133a6:	9502      	str	r5, [sp, #8]
 80133a8:	9603      	str	r6, [sp, #12]
 80133aa:	f000 fbd1 	bl	8013b50 <WM__SendMessage>
 80133ae:	e7d8      	b.n	8013362 <_MoveDescendents+0x1e>
 80133b0:	b008      	add	sp, #32
 80133b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080133b6 <WM__MoveWindow>:
 80133b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133ba:	b08b      	sub	sp, #44	; 0x2c
 80133bc:	4606      	mov	r6, r0
 80133be:	460d      	mov	r5, r1
 80133c0:	4614      	mov	r4, r2
 80133c2:	2100      	movs	r1, #0
 80133c4:	2210      	movs	r2, #16
 80133c6:	a806      	add	r0, sp, #24
 80133c8:	f008 fa65 	bl	801b896 <memset>
 80133cc:	2e00      	cmp	r6, #0
 80133ce:	d043      	beq.n	8013458 <WM__MoveWindow+0xa2>
 80133d0:	b90d      	cbnz	r5, 80133d6 <WM__MoveWindow+0x20>
 80133d2:	2c00      	cmp	r4, #0
 80133d4:	d040      	beq.n	8013458 <WM__MoveWindow+0xa2>
 80133d6:	4630      	mov	r0, r6
 80133d8:	f10d 0808 	add.w	r8, sp, #8
 80133dc:	f7f9 ff78 	bl	800d2d0 <GUI_ALLOC_LockH>
 80133e0:	4603      	mov	r3, r0
 80133e2:	9001      	str	r0, [sp, #4]
 80133e4:	4622      	mov	r2, r4
 80133e6:	af0a      	add	r7, sp, #40	; 0x28
 80133e8:	c803      	ldmia	r0, {r0, r1}
 80133ea:	e888 0003 	stmia.w	r8, {r0, r1}
 80133ee:	4618      	mov	r0, r3
 80133f0:	4629      	mov	r1, r5
 80133f2:	f7fa fa1e 	bl	800d832 <GUI_MoveRect>
 80133f6:	9801      	ldr	r0, [sp, #4]
 80133f8:	4622      	mov	r2, r4
 80133fa:	4629      	mov	r1, r5
 80133fc:	3008      	adds	r0, #8
 80133fe:	f7fa fa18 	bl	800d832 <GUI_MoveRect>
 8013402:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8013406:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801340a:	4638      	mov	r0, r7
 801340c:	f7f9 ff6e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013410:	4622      	mov	r2, r4
 8013412:	4629      	mov	r1, r5
 8013414:	4648      	mov	r0, r9
 8013416:	f7ff ff95 	bl	8013344 <_MoveDescendents>
 801341a:	4630      	mov	r0, r6
 801341c:	f7f9 ff58 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013420:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013422:	9001      	str	r0, [sp, #4]
 8013424:	0792      	lsls	r2, r2, #30
 8013426:	d50a      	bpl.n	801343e <WM__MoveWindow+0x88>
 8013428:	6981      	ldr	r1, [r0, #24]
 801342a:	b141      	cbz	r1, 801343e <WM__MoveWindow+0x88>
 801342c:	6a02      	ldr	r2, [r0, #32]
 801342e:	f7fe fde3 	bl	8011ff8 <WM__InvalidateParent>
 8013432:	9b01      	ldr	r3, [sp, #4]
 8013434:	4640      	mov	r0, r8
 8013436:	6a1a      	ldr	r2, [r3, #32]
 8013438:	6999      	ldr	r1, [r3, #24]
 801343a:	f7fe fddd 	bl	8011ff8 <WM__InvalidateParent>
 801343e:	4638      	mov	r0, r7
 8013440:	f7f9 ff54 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013444:	2303      	movs	r3, #3
 8013446:	a906      	add	r1, sp, #24
 8013448:	4630      	mov	r0, r6
 801344a:	9306      	str	r3, [sp, #24]
 801344c:	ab04      	add	r3, sp, #16
 801344e:	9504      	str	r5, [sp, #16]
 8013450:	9309      	str	r3, [sp, #36]	; 0x24
 8013452:	9405      	str	r4, [sp, #20]
 8013454:	f000 fb7c 	bl	8013b50 <WM__SendMessage>
 8013458:	b00b      	add	sp, #44	; 0x2c
 801345a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801345e <WM_MoveWindow>:
 801345e:	b570      	push	{r4, r5, r6, lr}
 8013460:	4604      	mov	r4, r0
 8013462:	460d      	mov	r5, r1
 8013464:	4616      	mov	r6, r2
 8013466:	f7fb f883 	bl	800e570 <GUI_Lock>
 801346a:	4629      	mov	r1, r5
 801346c:	4620      	mov	r0, r4
 801346e:	4632      	mov	r2, r6
 8013470:	f7ff ffa1 	bl	80133b6 <WM__MoveWindow>
 8013474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013478:	f7fb b870 	b.w	800e55c <GUI_Unlock>

0801347c <_cbTimer>:
 801347c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801347e:	4604      	mov	r4, r0
 8013480:	2210      	movs	r2, #16
 8013482:	2100      	movs	r1, #0
 8013484:	4668      	mov	r0, sp
 8013486:	f008 fa06 	bl	801b896 <memset>
 801348a:	6860      	ldr	r0, [r4, #4]
 801348c:	b150      	cbz	r0, 80134a4 <_cbTimer+0x28>
 801348e:	f7f9 ff15 	bl	800d2bc <GUI_ALLOC_h2p>
 8013492:	f240 1313 	movw	r3, #275	; 0x113
 8013496:	6840      	ldr	r0, [r0, #4]
 8013498:	4669      	mov	r1, sp
 801349a:	9300      	str	r3, [sp, #0]
 801349c:	6863      	ldr	r3, [r4, #4]
 801349e:	9303      	str	r3, [sp, #12]
 80134a0:	f7fe fcaf 	bl	8011e02 <WM_SendMessage>
 80134a4:	b004      	add	sp, #16
 80134a6:	bd10      	pop	{r4, pc}

080134a8 <WM_DeleteTimer>:
 80134a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134aa:	4604      	mov	r4, r0
 80134ac:	b190      	cbz	r0, 80134d4 <WM_DeleteTimer+0x2c>
 80134ae:	ad02      	add	r5, sp, #8
 80134b0:	f7fb f85e 	bl	800e570 <GUI_Lock>
 80134b4:	4620      	mov	r0, r4
 80134b6:	f7f9 ff0b 	bl	800d2d0 <GUI_ALLOC_LockH>
 80134ba:	f845 0d04 	str.w	r0, [r5, #-4]!
 80134be:	6800      	ldr	r0, [r0, #0]
 80134c0:	f005 fbf2 	bl	8018ca8 <GUI_TIMER_Delete>
 80134c4:	4628      	mov	r0, r5
 80134c6:	f7f9 ff11 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80134ca:	4620      	mov	r0, r4
 80134cc:	f7f9 ff3e 	bl	800d34c <GUI_ALLOC_Free>
 80134d0:	f7fb f844 	bl	800e55c <GUI_Unlock>
 80134d4:	b003      	add	sp, #12
 80134d6:	bd30      	pop	{r4, r5, pc}

080134d8 <WM__DeleteAssocTimer>:
 80134d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134da:	4605      	mov	r5, r0
 80134dc:	f7fb f848 	bl	800e570 <GUI_Lock>
 80134e0:	a801      	add	r0, sp, #4
 80134e2:	f005 fb5f 	bl	8018ba4 <GUI_TIMER__GetFirstTimer>
 80134e6:	4604      	mov	r4, r0
 80134e8:	b1dc      	cbz	r4, 8013522 <WM__DeleteAssocTimer+0x4a>
 80134ea:	2101      	movs	r1, #1
 80134ec:	4620      	mov	r0, r4
 80134ee:	f005 fc45 	bl	8018d7c <GUI_TIMER_GetFlag>
 80134f2:	9b01      	ldr	r3, [sp, #4]
 80134f4:	b183      	cbz	r3, 8013518 <WM__DeleteAssocTimer+0x40>
 80134f6:	b178      	cbz	r0, 8013518 <WM__DeleteAssocTimer+0x40>
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7f9 fedf 	bl	800d2bc <GUI_ALLOC_h2p>
 80134fe:	6843      	ldr	r3, [r0, #4]
 8013500:	42ab      	cmp	r3, r5
 8013502:	d109      	bne.n	8013518 <WM__DeleteAssocTimer+0x40>
 8013504:	9e01      	ldr	r6, [sp, #4]
 8013506:	a901      	add	r1, sp, #4
 8013508:	4620      	mov	r0, r4
 801350a:	f005 fb63 	bl	8018bd4 <GUI_TIMER__GetNextTimerLin>
 801350e:	4604      	mov	r4, r0
 8013510:	4630      	mov	r0, r6
 8013512:	f7ff ffc9 	bl	80134a8 <WM_DeleteTimer>
 8013516:	e7e7      	b.n	80134e8 <WM__DeleteAssocTimer+0x10>
 8013518:	a901      	add	r1, sp, #4
 801351a:	4620      	mov	r0, r4
 801351c:	f005 fb5a 	bl	8018bd4 <GUI_TIMER__GetNextTimerLin>
 8013520:	e7e1      	b.n	80134e6 <WM__DeleteAssocTimer+0xe>
 8013522:	f7fb f81b 	bl	800e55c <GUI_Unlock>
 8013526:	b002      	add	sp, #8
 8013528:	bd70      	pop	{r4, r5, r6, pc}
	...

0801352c <WM_CreateTimer>:
 801352c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013530:	4680      	mov	r8, r0
 8013532:	460f      	mov	r7, r1
 8013534:	4616      	mov	r6, r2
 8013536:	f7fb f81b 	bl	800e570 <GUI_Lock>
 801353a:	200c      	movs	r0, #12
 801353c:	f7fa f8bc 	bl	800d6b8 <GUI_ALLOC_AllocZero>
 8013540:	4604      	mov	r4, r0
 8013542:	b1f0      	cbz	r0, 8013582 <WM_CreateTimer+0x56>
 8013544:	f7fb f8ae 	bl	800e6a4 <GUI_GetTime>
 8013548:	2301      	movs	r3, #1
 801354a:	1981      	adds	r1, r0, r6
 801354c:	4622      	mov	r2, r4
 801354e:	4810      	ldr	r0, [pc, #64]	; (8013590 <WM_CreateTimer+0x64>)
 8013550:	f005 fb5c 	bl	8018c0c <GUI_TIMER_Create>
 8013554:	4605      	mov	r5, r0
 8013556:	4620      	mov	r0, r4
 8013558:	b185      	cbz	r5, 801357c <WM_CreateTimer+0x50>
 801355a:	f7f9 feb9 	bl	800d2d0 <GUI_ALLOC_LockH>
 801355e:	4603      	mov	r3, r0
 8013560:	a802      	add	r0, sp, #8
 8013562:	f8c3 8004 	str.w	r8, [r3, #4]
 8013566:	f840 3d04 	str.w	r3, [r0, #-4]!
 801356a:	609f      	str	r7, [r3, #8]
 801356c:	601d      	str	r5, [r3, #0]
 801356e:	f7f9 febd 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013572:	4631      	mov	r1, r6
 8013574:	4628      	mov	r0, r5
 8013576:	f005 fbcf 	bl	8018d18 <GUI_TIMER_SetPeriod>
 801357a:	e002      	b.n	8013582 <WM_CreateTimer+0x56>
 801357c:	462c      	mov	r4, r5
 801357e:	f7f9 fee5 	bl	800d34c <GUI_ALLOC_Free>
 8013582:	f7fa ffeb 	bl	800e55c <GUI_Unlock>
 8013586:	4620      	mov	r0, r4
 8013588:	b002      	add	sp, #8
 801358a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801358e:	bf00      	nop
 8013590:	0801347d 	.word	0x0801347d

08013594 <WM_RestartTimer>:
 8013594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013596:	460c      	mov	r4, r1
 8013598:	4605      	mov	r5, r0
 801359a:	b1a8      	cbz	r0, 80135c8 <WM_RestartTimer+0x34>
 801359c:	f7fa ffe8 	bl	800e570 <GUI_Lock>
 80135a0:	4628      	mov	r0, r5
 80135a2:	f7f9 fe95 	bl	800d2d0 <GUI_ALLOC_LockH>
 80135a6:	9001      	str	r0, [sp, #4]
 80135a8:	b11c      	cbz	r4, 80135b2 <WM_RestartTimer+0x1e>
 80135aa:	4621      	mov	r1, r4
 80135ac:	6800      	ldr	r0, [r0, #0]
 80135ae:	f005 fbb3 	bl	8018d18 <GUI_TIMER_SetPeriod>
 80135b2:	ac02      	add	r4, sp, #8
 80135b4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 80135b8:	6818      	ldr	r0, [r3, #0]
 80135ba:	f005 fbc1 	bl	8018d40 <GUI_TIMER_Restart>
 80135be:	4620      	mov	r0, r4
 80135c0:	f7f9 fe94 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80135c4:	f7fa ffca 	bl	800e55c <GUI_Unlock>
 80135c8:	b003      	add	sp, #12
 80135ca:	bd30      	pop	{r4, r5, pc}

080135cc <WM__IsInModalArea>:
 80135cc:	b570      	push	{r4, r5, r6, lr}
 80135ce:	4604      	mov	r4, r0
 80135d0:	b908      	cbnz	r0, 80135d6 <WM__IsInModalArea+0xa>
 80135d2:	2000      	movs	r0, #0
 80135d4:	bd70      	pop	{r4, r5, r6, pc}
 80135d6:	4b11      	ldr	r3, [pc, #68]	; (801361c <WM__IsInModalArea+0x50>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	da0f      	bge.n	80135fe <WM__IsInModalArea+0x32>
 80135de:	4e10      	ldr	r6, [pc, #64]	; (8013620 <WM__IsInModalArea+0x54>)
 80135e0:	4620      	mov	r0, r4
 80135e2:	4d10      	ldr	r5, [pc, #64]	; (8013624 <WM__IsInModalArea+0x58>)
 80135e4:	6833      	ldr	r3, [r6, #0]
 80135e6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80135ea:	6859      	ldr	r1, [r3, #4]
 80135ec:	f000 fa69 	bl	8013ac2 <WM__IsAncestor>
 80135f0:	6833      	ldr	r3, [r6, #0]
 80135f2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80135f6:	686a      	ldr	r2, [r5, #4]
 80135f8:	686b      	ldr	r3, [r5, #4]
 80135fa:	b942      	cbnz	r2, 801360e <WM__IsInModalArea+0x42>
 80135fc:	e00c      	b.n	8013618 <WM__IsInModalArea+0x4c>
 80135fe:	4a0a      	ldr	r2, [pc, #40]	; (8013628 <WM__IsInModalArea+0x5c>)
 8013600:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013604:	f000 fa5d 	bl	8013ac2 <WM__IsAncestor>
 8013608:	2800      	cmp	r0, #0
 801360a:	d1e8      	bne.n	80135de <WM__IsInModalArea+0x12>
 801360c:	e7e1      	b.n	80135d2 <WM__IsInModalArea+0x6>
 801360e:	b918      	cbnz	r0, 8013618 <WM__IsInModalArea+0x4c>
 8013610:	1ae3      	subs	r3, r4, r3
 8013612:	4258      	negs	r0, r3
 8013614:	4158      	adcs	r0, r3
 8013616:	bd70      	pop	{r4, r5, r6, pc}
 8013618:	2001      	movs	r0, #1
 801361a:	bd70      	pop	{r4, r5, r6, pc}
 801361c:	20000048 	.word	0x20000048
 8013620:	20022650 	.word	0x20022650
 8013624:	200226a4 	.word	0x200226a4
 8013628:	20022630 	.word	0x20022630

0801362c <WM__SendPIDMessage>:
 801362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801362e:	4606      	mov	r6, r0
 8013630:	b085      	sub	sp, #20
 8013632:	460c      	mov	r4, r1
 8013634:	466d      	mov	r5, sp
 8013636:	4637      	mov	r7, r6
 8013638:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801363a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801363e:	230d      	movs	r3, #13
 8013640:	9602      	str	r6, [sp, #8]
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	4638      	mov	r0, r7
 8013646:	f7ff fc95 	bl	8012f74 <WM_IsWindow>
 801364a:	b150      	cbz	r0, 8013662 <WM__SendPIDMessage+0x36>
 801364c:	4638      	mov	r0, r7
 801364e:	f7ff fb6b 	bl	8012d28 <WM_GetParent>
 8013652:	4607      	mov	r7, r0
 8013654:	2800      	cmp	r0, #0
 8013656:	d0f5      	beq.n	8013644 <WM__SendPIDMessage+0x18>
 8013658:	4629      	mov	r1, r5
 801365a:	9403      	str	r4, [sp, #12]
 801365c:	f000 fa96 	bl	8013b8c <WM__SendMessageIfEnabled>
 8013660:	e7f0      	b.n	8013644 <WM__SendPIDMessage+0x18>
 8013662:	4621      	mov	r1, r4
 8013664:	4630      	mov	r0, r6
 8013666:	f000 fa91 	bl	8013b8c <WM__SendMessageIfEnabled>
 801366a:	b005      	add	sp, #20
 801366c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801366e <WM__SendTouchMessage>:
 801366e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013670:	68cc      	ldr	r4, [r1, #12]
 8013672:	4606      	mov	r6, r0
 8013674:	460d      	mov	r5, r1
 8013676:	b18c      	cbz	r4, 801369c <WM__SendTouchMessage+0x2e>
 8013678:	f7f9 fe2a 	bl	800d2d0 <GUI_ALLOC_LockH>
 801367c:	6822      	ldr	r2, [r4, #0]
 801367e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8013682:	ab02      	add	r3, sp, #8
 8013684:	1a52      	subs	r2, r2, r1
 8013686:	f843 0d04 	str.w	r0, [r3, #-4]!
 801368a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801368e:	4618      	mov	r0, r3
 8013690:	6022      	str	r2, [r4, #0]
 8013692:	6862      	ldr	r2, [r4, #4]
 8013694:	1a52      	subs	r2, r2, r1
 8013696:	6062      	str	r2, [r4, #4]
 8013698:	f7f9 fe28 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801369c:	4629      	mov	r1, r5
 801369e:	4630      	mov	r0, r6
 80136a0:	f7ff ffc4 	bl	801362c <WM__SendPIDMessage>
 80136a4:	b002      	add	sp, #8
 80136a6:	bd70      	pop	{r4, r5, r6, pc}

080136a8 <WM_HandlePID>:
 80136a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ac:	b097      	sub	sp, #92	; 0x5c
 80136ae:	2300      	movs	r3, #0
 80136b0:	ad06      	add	r5, sp, #24
 80136b2:	9306      	str	r3, [sp, #24]
 80136b4:	606b      	str	r3, [r5, #4]
 80136b6:	60ab      	str	r3, [r5, #8]
 80136b8:	f002 fe20 	bl	80162fc <GUI_PID_IsEmpty>
 80136bc:	4607      	mov	r7, r0
 80136be:	b108      	cbz	r0, 80136c4 <WM_HandlePID+0x1c>
 80136c0:	2700      	movs	r7, #0
 80136c2:	e1bb      	b.n	8013a3c <WM_HandlePID+0x394>
 80136c4:	ac09      	add	r4, sp, #36	; 0x24
 80136c6:	4ea3      	ldr	r6, [pc, #652]	; (8013954 <WM_HandlePID+0x2ac>)
 80136c8:	4620      	mov	r0, r4
 80136ca:	f002 fd93 	bl	80161f4 <GUI_PID_GetState>
 80136ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d0:	3301      	adds	r3, #1
 80136d2:	d10c      	bne.n	80136ee <WM_HandlePID+0x46>
 80136d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d6:	3301      	adds	r3, #1
 80136d8:	d109      	bne.n	80136ee <WM_HandlePID+0x46>
 80136da:	4a9f      	ldr	r2, [pc, #636]	; (8013958 <WM_HandlePID+0x2b0>)
 80136dc:	210c      	movs	r1, #12
 80136de:	6833      	ldr	r3, [r6, #0]
 80136e0:	fb01 2303 	mla	r3, r1, r3, r2
 80136e4:	7e1a      	ldrb	r2, [r3, #24]
 80136e6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d0e8      	beq.n	80136c0 <WM_HandlePID+0x18>
 80136ee:	f7fa ff3f 	bl	800e570 <GUI_Lock>
 80136f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	db0d      	blt.n	8013714 <WM_HandlePID+0x6c>
 80136f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136fa:	2a00      	cmp	r2, #0
 80136fc:	db18      	blt.n	8013730 <WM_HandlePID+0x88>
 80136fe:	4997      	ldr	r1, [pc, #604]	; (801395c <WM_HandlePID+0x2b4>)
 8013700:	f9b1 1000 	ldrsh.w	r1, [r1]
 8013704:	440b      	add	r3, r1
 8013706:	9309      	str	r3, [sp, #36]	; 0x24
 8013708:	4b95      	ldr	r3, [pc, #596]	; (8013960 <WM_HandlePID+0x2b8>)
 801370a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801370e:	441a      	add	r2, r3
 8013710:	920a      	str	r2, [sp, #40]	; 0x28
 8013712:	e00d      	b.n	8013730 <WM_HandlePID+0x88>
 8013714:	3301      	adds	r3, #1
 8013716:	d10b      	bne.n	8013730 <WM_HandlePID+0x88>
 8013718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801371a:	3301      	adds	r3, #1
 801371c:	d108      	bne.n	8013730 <WM_HandlePID+0x88>
 801371e:	6832      	ldr	r2, [r6, #0]
 8013720:	210c      	movs	r1, #12
 8013722:	4b8d      	ldr	r3, [pc, #564]	; (8013958 <WM_HandlePID+0x2b0>)
 8013724:	fb01 3302 	mla	r3, r1, r2, r3
 8013728:	691a      	ldr	r2, [r3, #16]
 801372a:	695b      	ldr	r3, [r3, #20]
 801372c:	9209      	str	r2, [sp, #36]	; 0x24
 801372e:	930a      	str	r3, [sp, #40]	; 0x28
 8013730:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8013734:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8013954 <WM_HandlePID+0x2ac>
 8013738:	2b01      	cmp	r3, #1
 801373a:	bf98      	it	ls
 801373c:	6033      	strls	r3, [r6, #0]
 801373e:	6830      	ldr	r0, [r6, #0]
 8013740:	f7fa fbf6 	bl	800df30 <GUI_DEVICE__GetpDriver>
 8013744:	b910      	cbnz	r0, 801374c <WM_HandlePID+0xa4>
 8013746:	f7fa ff09 	bl	800e55c <GUI_Unlock>
 801374a:	e177      	b.n	8013a3c <WM_HandlePID+0x394>
 801374c:	aa02      	add	r2, sp, #8
 801374e:	a901      	add	r1, sp, #4
 8013750:	f8d8 0000 	ldr.w	r0, [r8]
 8013754:	f7fa fe54 	bl	800e400 <GUI_GetLayerPosEx>
 8013758:	a804      	add	r0, sp, #16
 801375a:	f000 faaf 	bl	8013cbc <WM__AddCriticalHandle>
 801375e:	9b01      	ldr	r3, [sp, #4]
 8013760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013762:	220c      	movs	r2, #12
 8013764:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013766:	1ac0      	subs	r0, r0, r3
 8013768:	9b02      	ldr	r3, [sp, #8]
 801376a:	4f7b      	ldr	r7, [pc, #492]	; (8013958 <WM_HandlePID+0x2b0>)
 801376c:	1ac9      	subs	r1, r1, r3
 801376e:	f8d8 3000 	ldr.w	r3, [r8]
 8013772:	9009      	str	r0, [sp, #36]	; 0x24
 8013774:	fb02 7303 	mla	r3, r2, r3, r7
 8013778:	910a      	str	r1, [sp, #40]	; 0x28
 801377a:	691a      	ldr	r2, [r3, #16]
 801377c:	4290      	cmp	r0, r2
 801377e:	d108      	bne.n	8013792 <WM_HandlePID+0xea>
 8013780:	695a      	ldr	r2, [r3, #20]
 8013782:	4291      	cmp	r1, r2
 8013784:	d105      	bne.n	8013792 <WM_HandlePID+0xea>
 8013786:	7e1a      	ldrb	r2, [r3, #24]
 8013788:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801378c:	429a      	cmp	r2, r3
 801378e:	f000 814e 	beq.w	8013a2e <WM_HandlePID+0x386>
 8013792:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8013796:	f002 fa79 	bl	8015c8c <GUI_CURSOR_SetPositionEx>
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	b113      	cbz	r3, 80137a4 <WM_HandlePID+0xfc>
 801379e:	2100      	movs	r1, #0
 80137a0:	4620      	mov	r0, r4
 80137a2:	4798      	blx	r3
 80137a4:	6832      	ldr	r2, [r6, #0]
 80137a6:	4b6f      	ldr	r3, [pc, #444]	; (8013964 <WM_HandlePID+0x2bc>)
 80137a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80137ac:	b918      	cbnz	r0, 80137b6 <WM_HandlePID+0x10e>
 80137ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80137b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137b2:	f006 ff3b 	bl	801a62c <WM_Screen2hWin>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	9005      	str	r0, [sp, #20]
 80137ba:	b113      	cbz	r3, 80137c2 <WM_HandlePID+0x11a>
 80137bc:	9905      	ldr	r1, [sp, #20]
 80137be:	4620      	mov	r0, r4
 80137c0:	4798      	blx	r3
 80137c2:	4969      	ldr	r1, [pc, #420]	; (8013968 <WM_HandlePID+0x2c0>)
 80137c4:	6833      	ldr	r3, [r6, #0]
 80137c6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8013954 <WM_HandlePID+0x2ac>
 80137ca:	4688      	mov	r8, r1
 80137cc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80137d0:	685a      	ldr	r2, [r3, #4]
 80137d2:	9805      	ldr	r0, [sp, #20]
 80137d4:	b312      	cbz	r2, 801381c <WM_HandlePID+0x174>
 80137d6:	4282      	cmp	r2, r0
 80137d8:	d020      	beq.n	801381c <WM_HandlePID+0x174>
 80137da:	6858      	ldr	r0, [r3, #4]
 80137dc:	f7ff fef6 	bl	80135cc <WM__IsInModalArea>
 80137e0:	b1e0      	cbz	r0, 801381c <WM_HandlePID+0x174>
 80137e2:	f8d9 3000 	ldr.w	r3, [r9]
 80137e6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80137ea:	6858      	ldr	r0, [r3, #4]
 80137ec:	f000 f9a6 	bl	8013b3c <WM__IsEnabled>
 80137f0:	b1a0      	cbz	r0, 801381c <WM_HandlePID+0x174>
 80137f2:	2312      	movs	r3, #18
 80137f4:	9515      	str	r5, [sp, #84]	; 0x54
 80137f6:	9312      	str	r3, [sp, #72]	; 0x48
 80137f8:	f8d9 3000 	ldr.w	r3, [r9]
 80137fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013800:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8013804:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013808:	6858      	ldr	r0, [r3, #4]
 801380a:	a912      	add	r1, sp, #72	; 0x48
 801380c:	f7ff ff2f 	bl	801366e <WM__SendTouchMessage>
 8013810:	f8d9 3000 	ldr.w	r3, [r9]
 8013814:	2200      	movs	r2, #0
 8013816:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801381a:	605a      	str	r2, [r3, #4]
 801381c:	9805      	ldr	r0, [sp, #20]
 801381e:	f7ff fed5 	bl	80135cc <WM__IsInModalArea>
 8013822:	b908      	cbnz	r0, 8013828 <WM_HandlePID+0x180>
 8013824:	2500      	movs	r5, #0
 8013826:	e0f4      	b.n	8013a12 <WM_HandlePID+0x36a>
 8013828:	6833      	ldr	r3, [r6, #0]
 801382a:	9a05      	ldr	r2, [sp, #20]
 801382c:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 8013830:	f8df a120 	ldr.w	sl, [pc, #288]	; 8013954 <WM_HandlePID+0x2ac>
 8013834:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8013958 <WM_HandlePID+0x2b0>
 8013838:	f8c8 2004 	str.w	r2, [r8, #4]
 801383c:	f04f 080c 	mov.w	r8, #12
 8013840:	fb08 7303 	mla	r3, r8, r3, r7
 8013844:	7e1a      	ldrb	r2, [r3, #24]
 8013846:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801384a:	429a      	cmp	r2, r3
 801384c:	d063      	beq.n	8013916 <WM_HandlePID+0x26e>
 801384e:	9b05      	ldr	r3, [sp, #20]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d060      	beq.n	8013916 <WM_HandlePID+0x26e>
 8013854:	9805      	ldr	r0, [sp, #20]
 8013856:	f7f9 fd3b 	bl	800d2d0 <GUI_ALLOC_LockH>
 801385a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801385e:	9003      	str	r0, [sp, #12]
 8013860:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8013864:	f8da 3000 	ldr.w	r3, [sl]
 8013868:	fb08 9303 	mla	r3, r8, r3, r9
 801386c:	7e1b      	ldrb	r3, [r3, #24]
 801386e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8013872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013874:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013878:	1a9b      	subs	r3, r3, r2
 801387a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801387e:	eb0d 0008 	add.w	r0, sp, r8
 8013882:	930f      	str	r3, [sp, #60]	; 0x3c
 8013884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013886:	1a9b      	subs	r3, r3, r2
 8013888:	9310      	str	r3, [sp, #64]	; 0x40
 801388a:	f7f9 fd2f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801388e:	ab0f      	add	r3, sp, #60	; 0x3c
 8013890:	9315      	str	r3, [sp, #84]	; 0x54
 8013892:	2311      	movs	r3, #17
 8013894:	9312      	str	r3, [sp, #72]	; 0x48
 8013896:	f8da 3000 	ldr.w	r3, [sl]
 801389a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801389e:	fb08 9e03 	mla	lr, r8, r3, r9
 80138a2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 801396c <WM_HandlePID+0x2c4>
 80138a6:	00db      	lsls	r3, r3, #3
 80138a8:	f10e 0210 	add.w	r2, lr, #16
 80138ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80138ae:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 80138b2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80138b6:	f88e 2018 	strb.w	r2, [lr, #24]
 80138ba:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80138be:	b132      	cbz	r2, 80138ce <WM_HandlePID+0x226>
 80138c0:	eb09 0203 	add.w	r2, r9, r3
 80138c4:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80138c8:	9905      	ldr	r1, [sp, #20]
 80138ca:	6051      	str	r1, [r2, #4]
 80138cc:	e000      	b.n	80138d0 <WM_HandlePID+0x228>
 80138ce:	4690      	mov	r8, r2
 80138d0:	444b      	add	r3, r9
 80138d2:	a912      	add	r1, sp, #72	; 0x48
 80138d4:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80138d8:	9805      	ldr	r0, [sp, #20]
 80138da:	f000 f957 	bl	8013b8c <WM__SendMessageIfEnabled>
 80138de:	6833      	ldr	r3, [r6, #0]
 80138e0:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
 80138e4:	6851      	ldr	r1, [r2, #4]
 80138e6:	458b      	cmp	fp, r1
 80138e8:	d001      	beq.n	80138ee <WM_HandlePID+0x246>
 80138ea:	6852      	ldr	r2, [r2, #4]
 80138ec:	9205      	str	r2, [sp, #20]
 80138ee:	220c      	movs	r2, #12
 80138f0:	fb02 7303 	mla	r3, r2, r3, r7
 80138f4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80138f8:	3310      	adds	r3, #16
 80138fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80138fe:	f1b8 0f00 	cmp.w	r8, #0
 8013902:	d008      	beq.n	8013916 <WM_HandlePID+0x26e>
 8013904:	4640      	mov	r0, r8
 8013906:	f7ff fb35 	bl	8012f74 <WM_IsWindow>
 801390a:	b120      	cbz	r0, 8013916 <WM_HandlePID+0x26e>
 801390c:	6833      	ldr	r3, [r6, #0]
 801390e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8013912:	f8c9 8004 	str.w	r8, [r9, #4]
 8013916:	6833      	ldr	r3, [r6, #0]
 8013918:	200c      	movs	r0, #12
 801391a:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 801391e:	fb00 7003 	mla	r0, r0, r3, r7
 8013922:	7e02      	ldrb	r2, [r0, #24]
 8013924:	ea5e 0802 	orrs.w	r8, lr, r2
 8013928:	d05c      	beq.n	80139e4 <WM_HandlePID+0x33c>
 801392a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801392e:	490f      	ldr	r1, [pc, #60]	; (801396c <WM_HandlePID+0x2c4>)
 8013930:	00db      	lsls	r3, r3, #3
 8013932:	9212      	str	r2, [sp, #72]	; 0x48
 8013934:	18ca      	adds	r2, r1, r3
 8013936:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801393a:	f8dd c014 	ldr.w	ip, [sp, #20]
 801393e:	45e0      	cmp	r8, ip
 8013940:	4688      	mov	r8, r1
 8013942:	d026      	beq.n	8013992 <WM_HandlePID+0x2ea>
 8013944:	6852      	ldr	r2, [r2, #4]
 8013946:	b322      	cbz	r2, 8013992 <WM_HandlePID+0x2ea>
 8013948:	f1be 0f00 	cmp.w	lr, #0
 801394c:	d010      	beq.n	8013970 <WM_HandlePID+0x2c8>
 801394e:	2200      	movs	r2, #0
 8013950:	9215      	str	r2, [sp, #84]	; 0x54
 8013952:	e014      	b.n	801397e <WM_HandlePID+0x2d6>
 8013954:	20022650 	.word	0x20022650
 8013958:	2000047c 	.word	0x2000047c
 801395c:	200225e4 	.word	0x200225e4
 8013960:	200225d4 	.word	0x200225d4
 8013964:	20022674 	.word	0x20022674
 8013968:	20022684 	.word	0x20022684
 801396c:	20022694 	.word	0x20022694
 8013970:	6902      	ldr	r2, [r0, #16]
 8013972:	f88d e020 	strb.w	lr, [sp, #32]
 8013976:	9206      	str	r2, [sp, #24]
 8013978:	6942      	ldr	r2, [r0, #20]
 801397a:	9515      	str	r5, [sp, #84]	; 0x54
 801397c:	9207      	str	r2, [sp, #28]
 801397e:	4443      	add	r3, r8
 8013980:	a912      	add	r1, sp, #72	; 0x48
 8013982:	6858      	ldr	r0, [r3, #4]
 8013984:	f7ff fe73 	bl	801366e <WM__SendTouchMessage>
 8013988:	6833      	ldr	r3, [r6, #0]
 801398a:	2200      	movs	r2, #0
 801398c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8013990:	605a      	str	r2, [r3, #4]
 8013992:	6833      	ldr	r3, [r6, #0]
 8013994:	220c      	movs	r2, #12
 8013996:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 801399a:	fb02 7203 	mla	r2, r2, r3, r7
 801399e:	f882 e018 	strb.w	lr, [r2, #24]
 80139a2:	9a05      	ldr	r2, [sp, #20]
 80139a4:	2a00      	cmp	r2, #0
 80139a6:	d033      	beq.n	8013a10 <WM_HandlePID+0x368>
 80139a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80139ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80139b0:	f1be 0f00 	cmp.w	lr, #0
 80139b4:	d005      	beq.n	80139c2 <WM_HandlePID+0x31a>
 80139b6:	9a05      	ldr	r2, [sp, #20]
 80139b8:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 80139bc:	f8c8 2004 	str.w	r2, [r8, #4]
 80139c0:	e00a      	b.n	80139d8 <WM_HandlePID+0x330>
 80139c2:	4b20      	ldr	r3, [pc, #128]	; (8013a44 <WM_HandlePID+0x39c>)
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	b10b      	cbz	r3, 80139cc <WM_HandlePID+0x324>
 80139c8:	f006 fe7e 	bl	801a6c8 <WM_ReleaseCapture>
 80139cc:	6833      	ldr	r3, [r6, #0]
 80139ce:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 80139d2:	2300      	movs	r3, #0
 80139d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80139d8:	9805      	ldr	r0, [sp, #20]
 80139da:	a912      	add	r1, sp, #72	; 0x48
 80139dc:	9515      	str	r5, [sp, #84]	; 0x54
 80139de:	f7ff fe46 	bl	801366e <WM__SendTouchMessage>
 80139e2:	e015      	b.n	8013a10 <WM_HandlePID+0x368>
 80139e4:	9b05      	ldr	r3, [sp, #20]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	f43f af1c 	beq.w	8013824 <WM_HandlePID+0x17c>
 80139ec:	9805      	ldr	r0, [sp, #20]
 80139ee:	f000 f8a5 	bl	8013b3c <WM__IsEnabled>
 80139f2:	2800      	cmp	r0, #0
 80139f4:	f43f af16 	beq.w	8013824 <WM_HandlePID+0x17c>
 80139f8:	2310      	movs	r3, #16
 80139fa:	9515      	str	r5, [sp, #84]	; 0x54
 80139fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013a00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013a04:	9805      	ldr	r0, [sp, #20]
 8013a06:	a912      	add	r1, sp, #72	; 0x48
 8013a08:	9312      	str	r3, [sp, #72]	; 0x48
 8013a0a:	f7ff fe30 	bl	801366e <WM__SendTouchMessage>
 8013a0e:	e709      	b.n	8013824 <WM_HandlePID+0x17c>
 8013a10:	2501      	movs	r5, #1
 8013a12:	6836      	ldr	r6, [r6, #0]
 8013a14:	230c      	movs	r3, #12
 8013a16:	fb03 7706 	mla	r7, r3, r6, r7
 8013a1a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013a1e:	3710      	adds	r7, #16
 8013a20:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8013a24:	4631      	mov	r1, r6
 8013a26:	4620      	mov	r0, r4
 8013a28:	f006 fdaa 	bl	801a580 <WM_PID__SetPrevState>
 8013a2c:	e000      	b.n	8013a30 <WM_HandlePID+0x388>
 8013a2e:	2500      	movs	r5, #0
 8013a30:	462f      	mov	r7, r5
 8013a32:	a804      	add	r0, sp, #16
 8013a34:	f000 f94a 	bl	8013ccc <WM__RemoveCriticalHandle>
 8013a38:	f7fa fd90 	bl	800e55c <GUI_Unlock>
 8013a3c:	4638      	mov	r0, r7
 8013a3e:	b017      	add	sp, #92	; 0x5c
 8013a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a44:	20022654 	.word	0x20022654

08013a48 <WM__ForEachDesc>:
 8013a48:	b570      	push	{r4, r5, r6, lr}
 8013a4a:	460d      	mov	r5, r1
 8013a4c:	4616      	mov	r6, r2
 8013a4e:	f7f9 fc35 	bl	800d2bc <GUI_ALLOC_h2p>
 8013a52:	69c4      	ldr	r4, [r0, #28]
 8013a54:	b164      	cbz	r4, 8013a70 <WM__ForEachDesc+0x28>
 8013a56:	4620      	mov	r0, r4
 8013a58:	4631      	mov	r1, r6
 8013a5a:	47a8      	blx	r5
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	4632      	mov	r2, r6
 8013a60:	4629      	mov	r1, r5
 8013a62:	f7ff fff1 	bl	8013a48 <WM__ForEachDesc>
 8013a66:	4620      	mov	r0, r4
 8013a68:	f7f9 fc28 	bl	800d2bc <GUI_ALLOC_h2p>
 8013a6c:	6a04      	ldr	r4, [r0, #32]
 8013a6e:	e7f1      	b.n	8013a54 <WM__ForEachDesc+0xc>
 8013a70:	bd70      	pop	{r4, r5, r6, pc}

08013a72 <WM__GetFirstSibling>:
 8013a72:	b508      	push	{r3, lr}
 8013a74:	f7ff f958 	bl	8012d28 <WM_GetParent>
 8013a78:	b118      	cbz	r0, 8013a82 <WM__GetFirstSibling+0x10>
 8013a7a:	f7f9 fc1f 	bl	800d2bc <GUI_ALLOC_h2p>
 8013a7e:	69c0      	ldr	r0, [r0, #28]
 8013a80:	bd08      	pop	{r3, pc}
 8013a82:	bd08      	pop	{r3, pc}

08013a84 <WM__GetLastSibling>:
 8013a84:	b510      	push	{r4, lr}
 8013a86:	4604      	mov	r4, r0
 8013a88:	b134      	cbz	r4, 8013a98 <WM__GetLastSibling+0x14>
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f7f9 fc16 	bl	800d2bc <GUI_ALLOC_h2p>
 8013a90:	6a03      	ldr	r3, [r0, #32]
 8013a92:	b10b      	cbz	r3, 8013a98 <WM__GetLastSibling+0x14>
 8013a94:	461c      	mov	r4, r3
 8013a96:	e7f7      	b.n	8013a88 <WM__GetLastSibling+0x4>
 8013a98:	4620      	mov	r0, r4
 8013a9a:	bd10      	pop	{r4, pc}

08013a9c <WM__GetPrevSibling>:
 8013a9c:	b538      	push	{r3, r4, r5, lr}
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	f7ff ffe7 	bl	8013a72 <WM__GetFirstSibling>
 8013aa4:	4604      	mov	r4, r0
 8013aa6:	b154      	cbz	r4, 8013abe <WM__GetPrevSibling+0x22>
 8013aa8:	42ac      	cmp	r4, r5
 8013aaa:	d007      	beq.n	8013abc <WM__GetPrevSibling+0x20>
 8013aac:	4620      	mov	r0, r4
 8013aae:	f7f9 fc05 	bl	800d2bc <GUI_ALLOC_h2p>
 8013ab2:	6a03      	ldr	r3, [r0, #32]
 8013ab4:	429d      	cmp	r5, r3
 8013ab6:	d002      	beq.n	8013abe <WM__GetPrevSibling+0x22>
 8013ab8:	461c      	mov	r4, r3
 8013aba:	e7f4      	b.n	8013aa6 <WM__GetPrevSibling+0xa>
 8013abc:	2400      	movs	r4, #0
 8013abe:	4620      	mov	r0, r4
 8013ac0:	bd38      	pop	{r3, r4, r5, pc}

08013ac2 <WM__IsAncestor>:
 8013ac2:	b510      	push	{r4, lr}
 8013ac4:	460c      	mov	r4, r1
 8013ac6:	b908      	cbnz	r0, 8013acc <WM__IsAncestor+0xa>
 8013ac8:	2000      	movs	r0, #0
 8013aca:	bd10      	pop	{r4, pc}
 8013acc:	2900      	cmp	r1, #0
 8013ace:	d0fb      	beq.n	8013ac8 <WM__IsAncestor+0x6>
 8013ad0:	f7f9 fbf4 	bl	800d2bc <GUI_ALLOC_h2p>
 8013ad4:	6980      	ldr	r0, [r0, #24]
 8013ad6:	4284      	cmp	r4, r0
 8013ad8:	d002      	beq.n	8013ae0 <WM__IsAncestor+0x1e>
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d1f8      	bne.n	8013ad0 <WM__IsAncestor+0xe>
 8013ade:	e7f3      	b.n	8013ac8 <WM__IsAncestor+0x6>
 8013ae0:	2001      	movs	r0, #1
 8013ae2:	bd10      	pop	{r4, pc}

08013ae4 <WM__IsAncestorOrSelf>:
 8013ae4:	4288      	cmp	r0, r1
 8013ae6:	d001      	beq.n	8013aec <WM__IsAncestorOrSelf+0x8>
 8013ae8:	f7ff bfeb 	b.w	8013ac2 <WM__IsAncestor>
 8013aec:	2001      	movs	r0, #1
 8013aee:	4770      	bx	lr

08013af0 <WM__IsChild>:
 8013af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013af2:	460d      	mov	r5, r1
 8013af4:	4604      	mov	r4, r0
 8013af6:	b160      	cbz	r0, 8013b12 <WM__IsChild+0x22>
 8013af8:	f7f9 fbea 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013afc:	9001      	str	r0, [sp, #4]
 8013afe:	b120      	cbz	r0, 8013b0a <WM__IsChild+0x1a>
 8013b00:	6980      	ldr	r0, [r0, #24]
 8013b02:	1b43      	subs	r3, r0, r5
 8013b04:	425c      	negs	r4, r3
 8013b06:	415c      	adcs	r4, r3
 8013b08:	e000      	b.n	8013b0c <WM__IsChild+0x1c>
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	a801      	add	r0, sp, #4
 8013b0e:	f7f9 fbed 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013b12:	4620      	mov	r0, r4
 8013b14:	b003      	add	sp, #12
 8013b16:	bd30      	pop	{r4, r5, pc}

08013b18 <WM__GetFocusedChild>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	4d06      	ldr	r5, [pc, #24]	; (8013b34 <WM__GetFocusedChild+0x1c>)
 8013b1c:	4601      	mov	r1, r0
 8013b1e:	4c06      	ldr	r4, [pc, #24]	; (8013b38 <WM__GetFocusedChild+0x20>)
 8013b20:	682b      	ldr	r3, [r5, #0]
 8013b22:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8013b26:	f7ff ffe3 	bl	8013af0 <WM__IsChild>
 8013b2a:	b110      	cbz	r0, 8013b32 <WM__GetFocusedChild+0x1a>
 8013b2c:	682b      	ldr	r3, [r5, #0]
 8013b2e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8013b32:	bd38      	pop	{r3, r4, r5, pc}
 8013b34:	20022650 	.word	0x20022650
 8013b38:	20022640 	.word	0x20022640

08013b3c <WM__IsEnabled>:
 8013b3c:	b508      	push	{r3, lr}
 8013b3e:	f7f9 fbbd 	bl	800d2bc <GUI_ALLOC_h2p>
 8013b42:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013b44:	f080 0010 	eor.w	r0, r0, #16
 8013b48:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8013b4c:	bd08      	pop	{r3, pc}
	...

08013b50 <WM__SendMessage>:
 8013b50:	b570      	push	{r4, r5, r6, lr}
 8013b52:	4c0d      	ldr	r4, [pc, #52]	; (8013b88 <WM__SendMessage+0x38>)
 8013b54:	4606      	mov	r6, r0
 8013b56:	460d      	mov	r5, r1
 8013b58:	6823      	ldr	r3, [r4, #0]
 8013b5a:	2b13      	cmp	r3, #19
 8013b5c:	dc12      	bgt.n	8013b84 <WM__SendMessage+0x34>
 8013b5e:	f7f9 fbad 	bl	800d2bc <GUI_ALLOC_h2p>
 8013b62:	6902      	ldr	r2, [r0, #16]
 8013b64:	606e      	str	r6, [r5, #4]
 8013b66:	b142      	cbz	r2, 8013b7a <WM__SendMessage+0x2a>
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	6023      	str	r3, [r4, #0]
 8013b70:	4790      	blx	r2
 8013b72:	6823      	ldr	r3, [r4, #0]
 8013b74:	3b01      	subs	r3, #1
 8013b76:	6023      	str	r3, [r4, #0]
 8013b78:	bd70      	pop	{r4, r5, r6, pc}
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b80:	f7fe bf10 	b.w	80129a4 <WM_DefaultProc>
 8013b84:	bd70      	pop	{r4, r5, r6, pc}
 8013b86:	bf00      	nop
 8013b88:	200004a4 	.word	0x200004a4

08013b8c <WM__SendMessageIfEnabled>:
 8013b8c:	b538      	push	{r3, r4, r5, lr}
 8013b8e:	4604      	mov	r4, r0
 8013b90:	460d      	mov	r5, r1
 8013b92:	f7ff ffd3 	bl	8013b3c <WM__IsEnabled>
 8013b96:	b128      	cbz	r0, 8013ba4 <WM__SendMessageIfEnabled+0x18>
 8013b98:	4629      	mov	r1, r5
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ba0:	f7ff bfd6 	b.w	8013b50 <WM__SendMessage>
 8013ba4:	bd38      	pop	{r3, r4, r5, pc}

08013ba6 <WM__SendMessageNoPara>:
 8013ba6:	b530      	push	{r4, r5, lr}
 8013ba8:	b085      	sub	sp, #20
 8013baa:	4604      	mov	r4, r0
 8013bac:	2210      	movs	r2, #16
 8013bae:	460d      	mov	r5, r1
 8013bb0:	4668      	mov	r0, sp
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	f007 fe6f 	bl	801b896 <memset>
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f7f9 fb7f 	bl	800d2bc <GUI_ALLOC_h2p>
 8013bbe:	6903      	ldr	r3, [r0, #16]
 8013bc0:	b11b      	cbz	r3, 8013bca <WM__SendMessageNoPara+0x24>
 8013bc2:	9401      	str	r4, [sp, #4]
 8013bc4:	4668      	mov	r0, sp
 8013bc6:	9500      	str	r5, [sp, #0]
 8013bc8:	4798      	blx	r3
 8013bca:	b005      	add	sp, #20
 8013bcc:	bd30      	pop	{r4, r5, pc}

08013bce <WM__UpdateChildPositions>:
 8013bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd2:	b08b      	sub	sp, #44	; 0x2c
 8013bd4:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8013bd8:	9303      	str	r3, [sp, #12]
 8013bda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013bde:	9101      	str	r1, [sp, #4]
 8013be0:	9304      	str	r3, [sp, #16]
 8013be2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013be6:	9202      	str	r2, [sp, #8]
 8013be8:	9305      	str	r3, [sp, #20]
 8013bea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013bee:	9306      	str	r3, [sp, #24]
 8013bf0:	f1bb 0f00 	cmp.w	fp, #0
 8013bf4:	d05e      	beq.n	8013cb4 <WM__UpdateChildPositions+0xe6>
 8013bf6:	4658      	mov	r0, fp
 8013bf8:	f7f9 fb6a 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013bfc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013bfe:	9009      	str	r0, [sp, #36]	; 0x24
 8013c00:	f402 7120 	and.w	r1, r2, #640	; 0x280
 8013c04:	f9b0 a000 	ldrsh.w	sl, [r0]
 8013c08:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013c0c:	2980      	cmp	r1, #128	; 0x80
 8013c0e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8013c12:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8013c16:	d008      	beq.n	8013c2a <WM__UpdateChildPositions+0x5c>
 8013c18:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 8013c1c:	d107      	bne.n	8013c2e <WM__UpdateChildPositions+0x60>
 8013c1e:	9901      	ldr	r1, [sp, #4]
 8013c20:	eb0a 0601 	add.w	r6, sl, r1
 8013c24:	9903      	ldr	r1, [sp, #12]
 8013c26:	b236      	sxth	r6, r6
 8013c28:	e005      	b.n	8013c36 <WM__UpdateChildPositions+0x68>
 8013c2a:	9904      	ldr	r1, [sp, #16]
 8013c2c:	e000      	b.n	8013c30 <WM__UpdateChildPositions+0x62>
 8013c2e:	9905      	ldr	r1, [sp, #20]
 8013c30:	eb01 060a 	add.w	r6, r1, sl
 8013c34:	b236      	sxth	r6, r6
 8013c36:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8013c3a:	eb01 0508 	add.w	r5, r1, r8
 8013c3e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8013c42:	b22d      	sxth	r5, r5
 8013c44:	d007      	beq.n	8013c56 <WM__UpdateChildPositions+0x88>
 8013c46:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8013c4a:	d10a      	bne.n	8013c62 <WM__UpdateChildPositions+0x94>
 8013c4c:	9a02      	ldr	r2, [sp, #8]
 8013c4e:	189f      	adds	r7, r3, r2
 8013c50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013c52:	b23f      	sxth	r7, r7
 8013c54:	e002      	b.n	8013c5c <WM__UpdateChildPositions+0x8e>
 8013c56:	9a06      	ldr	r2, [sp, #24]
 8013c58:	18d7      	adds	r7, r2, r3
 8013c5a:	b23f      	sxth	r7, r7
 8013c5c:	eb09 0402 	add.w	r4, r9, r2
 8013c60:	e005      	b.n	8013c6e <WM__UpdateChildPositions+0xa0>
 8013c62:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8013c66:	18cf      	adds	r7, r1, r3
 8013c68:	eb01 0409 	add.w	r4, r1, r9
 8013c6c:	b23f      	sxth	r7, r7
 8013c6e:	ebb6 010a 	subs.w	r1, r6, sl
 8013c72:	b224      	sxth	r4, r4
 8013c74:	eba7 0203 	sub.w	r2, r7, r3
 8013c78:	d100      	bne.n	8013c7c <WM__UpdateChildPositions+0xae>
 8013c7a:	b122      	cbz	r2, 8013c86 <WM__UpdateChildPositions+0xb8>
 8013c7c:	4658      	mov	r0, fp
 8013c7e:	9307      	str	r3, [sp, #28]
 8013c80:	f7ff fbed 	bl	801345e <WM_MoveWindow>
 8013c84:	9b07      	ldr	r3, [sp, #28]
 8013c86:	1bad      	subs	r5, r5, r6
 8013c88:	ebca 0808 	rsb	r8, sl, r8
 8013c8c:	1be4      	subs	r4, r4, r7
 8013c8e:	ebc3 0909 	rsb	r9, r3, r9
 8013c92:	ebb5 0108 	subs.w	r1, r5, r8
 8013c96:	ebc9 0204 	rsb	r2, r9, r4
 8013c9a:	d100      	bne.n	8013c9e <WM__UpdateChildPositions+0xd0>
 8013c9c:	b112      	cbz	r2, 8013ca4 <WM__UpdateChildPositions+0xd6>
 8013c9e:	4658      	mov	r0, fp
 8013ca0:	f7ff f996 	bl	8012fd0 <WM_ResizeWindow>
 8013ca4:	a80a      	add	r0, sp, #40	; 0x28
 8013ca6:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8013caa:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8013cae:	f7f9 fb1d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013cb2:	e79d      	b.n	8013bf0 <WM__UpdateChildPositions+0x22>
 8013cb4:	b00b      	add	sp, #44	; 0x2c
 8013cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013cbc <WM__AddCriticalHandle>:
 8013cbc:	4b02      	ldr	r3, [pc, #8]	; (8013cc8 <WM__AddCriticalHandle+0xc>)
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	6002      	str	r2, [r0, #0]
 8013cc2:	6018      	str	r0, [r3, #0]
 8013cc4:	4770      	bx	lr
 8013cc6:	bf00      	nop
 8013cc8:	2002266c 	.word	0x2002266c

08013ccc <WM__RemoveCriticalHandle>:
 8013ccc:	4a09      	ldr	r2, [pc, #36]	; (8013cf4 <WM__RemoveCriticalHandle+0x28>)
 8013cce:	6813      	ldr	r3, [r2, #0]
 8013cd0:	b510      	push	{r4, lr}
 8013cd2:	b16b      	cbz	r3, 8013cf0 <WM__RemoveCriticalHandle+0x24>
 8013cd4:	2100      	movs	r1, #0
 8013cd6:	4298      	cmp	r0, r3
 8013cd8:	d105      	bne.n	8013ce6 <WM__RemoveCriticalHandle+0x1a>
 8013cda:	6803      	ldr	r3, [r0, #0]
 8013cdc:	b109      	cbz	r1, 8013ce2 <WM__RemoveCriticalHandle+0x16>
 8013cde:	600b      	str	r3, [r1, #0]
 8013ce0:	bd10      	pop	{r4, pc}
 8013ce2:	6013      	str	r3, [r2, #0]
 8013ce4:	bd10      	pop	{r4, pc}
 8013ce6:	681c      	ldr	r4, [r3, #0]
 8013ce8:	4619      	mov	r1, r3
 8013cea:	b10c      	cbz	r4, 8013cf0 <WM__RemoveCriticalHandle+0x24>
 8013cec:	4623      	mov	r3, r4
 8013cee:	e7f2      	b.n	8013cd6 <WM__RemoveCriticalHandle+0xa>
 8013cf0:	bd10      	pop	{r4, pc}
 8013cf2:	bf00      	nop
 8013cf4:	2002266c 	.word	0x2002266c

08013cf8 <WM__GetClientRectEx>:
 8013cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cfa:	460d      	mov	r5, r1
 8013cfc:	b158      	cbz	r0, 8013d16 <WM__GetClientRectEx+0x1e>
 8013cfe:	b151      	cbz	r1, 8013d16 <WM__GetClientRectEx+0x1e>
 8013d00:	ac02      	add	r4, sp, #8
 8013d02:	f7f9 fae5 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013d06:	4629      	mov	r1, r5
 8013d08:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013d0c:	f7fe f893 	bl	8011e36 <WM__GetClientRectWin>
 8013d10:	4620      	mov	r0, r4
 8013d12:	f7f9 faeb 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013d16:	b003      	add	sp, #12
 8013d18:	bd30      	pop	{r4, r5, pc}

08013d1a <GUI_CreateDialogBox>:
 8013d1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d1e:	4605      	mov	r5, r0
 8013d20:	4688      	mov	r8, r1
 8013d22:	4614      	mov	r4, r2
 8013d24:	461e      	mov	r6, r3
 8013d26:	b913      	cbnz	r3, 8013d2e <GUI_CreateDialogBox+0x14>
 8013d28:	f7fe ff4c 	bl	8012bc4 <WM_GetDesktopWindow>
 8013d2c:	4606      	mov	r6, r0
 8013d2e:	9400      	str	r4, [sp, #0]
 8013d30:	4631      	mov	r1, r6
 8013d32:	682c      	ldr	r4, [r5, #0]
 8013d34:	4628      	mov	r0, r5
 8013d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d3a:	47a0      	blx	r4
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	d040      	beq.n	8013dc4 <GUI_CreateDialogBox+0xaa>
 8013d42:	f7fe ff31 	bl	8012ba8 <WM_GetClientWindow>
 8013d46:	8a69      	ldrh	r1, [r5, #18]
 8013d48:	4607      	mov	r7, r0
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	f001 fa35 	bl	80151ba <WIDGET_OrState>
 8013d50:	f04f 0900 	mov.w	r9, #0
 8013d54:	4620      	mov	r0, r4
 8013d56:	f7ff fa9f 	bl	8013298 <WM_ShowWindow>
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	f7ff fa9c 	bl	8013298 <WM_ShowWindow>
 8013d60:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d64:	f1b8 0f00 	cmp.w	r8, #0
 8013d68:	dd12      	ble.n	8013d90 <GUI_CreateDialogBox+0x76>
 8013d6a:	f855 af1c 	ldr.w	sl, [r5, #28]!
 8013d6e:	2300      	movs	r3, #0
 8013d70:	f8cd 9000 	str.w	r9, [sp]
 8013d74:	4639      	mov	r1, r7
 8013d76:	461a      	mov	r2, r3
 8013d78:	4628      	mov	r0, r5
 8013d7a:	47d0      	blx	sl
 8013d7c:	4682      	mov	sl, r0
 8013d7e:	b920      	cbnz	r0, 8013d8a <GUI_CreateDialogBox+0x70>
 8013d80:	4620      	mov	r0, r4
 8013d82:	f7fe fa8d 	bl	80122a0 <WM_DeleteWindow>
 8013d86:	4650      	mov	r0, sl
 8013d88:	e01d      	b.n	8013dc6 <GUI_CreateDialogBox+0xac>
 8013d8a:	f7ff fa85 	bl	8013298 <WM_ShowWindow>
 8013d8e:	e7e7      	b.n	8013d60 <GUI_CreateDialogBox+0x46>
 8013d90:	211d      	movs	r1, #29
 8013d92:	4638      	mov	r0, r7
 8013d94:	f7ff f9a0 	bl	80130d8 <WM_SendMessageNoPara>
 8013d98:	1c73      	adds	r3, r6, #1
 8013d9a:	d013      	beq.n	8013dc4 <GUI_CreateDialogBox+0xaa>
 8013d9c:	f7fa fbe8 	bl	800e570 <GUI_Lock>
 8013da0:	f7fe ff40 	bl	8012c24 <WM_GetFocusedWindow>
 8013da4:	b150      	cbz	r0, 8013dbc <GUI_CreateDialogBox+0xa2>
 8013da6:	f7f9 fa89 	bl	800d2bc <GUI_ALLOC_h2p>
 8013daa:	6980      	ldr	r0, [r0, #24]
 8013dac:	4284      	cmp	r4, r0
 8013dae:	d007      	beq.n	8013dc0 <GUI_CreateDialogBox+0xa6>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	d1f8      	bne.n	8013da6 <GUI_CreateDialogBox+0x8c>
 8013db4:	4620      	mov	r0, r4
 8013db6:	f006 fca3 	bl	801a700 <WM_SetFocusOnNextChild>
 8013dba:	e001      	b.n	8013dc0 <GUI_CreateDialogBox+0xa6>
 8013dbc:	42a6      	cmp	r6, r4
 8013dbe:	d1f9      	bne.n	8013db4 <GUI_CreateDialogBox+0x9a>
 8013dc0:	f7fa fbcc 	bl	800e55c <GUI_Unlock>
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	b002      	add	sp, #8
 8013dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013dcc <_RestoreOldCursor>:
 8013dcc:	b538      	push	{r3, r4, r5, lr}
 8013dce:	4c07      	ldr	r4, [pc, #28]	; (8013dec <_RestoreOldCursor+0x20>)
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	b153      	cbz	r3, 8013dea <_RestoreOldCursor+0x1e>
 8013dd4:	4d06      	ldr	r5, [pc, #24]	; (8013df0 <_RestoreOldCursor+0x24>)
 8013dd6:	6828      	ldr	r0, [r5, #0]
 8013dd8:	f001 ff48 	bl	8015c6c <GUI_CURSOR_GetStateEx>
 8013ddc:	b118      	cbz	r0, 8013de6 <_RestoreOldCursor+0x1a>
 8013dde:	6829      	ldr	r1, [r5, #0]
 8013de0:	6820      	ldr	r0, [r4, #0]
 8013de2:	f001 fedd 	bl	8015ba0 <GUI_CURSOR_SelectEx>
 8013de6:	2300      	movs	r3, #0
 8013de8:	6023      	str	r3, [r4, #0]
 8013dea:	bd38      	pop	{r3, r4, r5, pc}
 8013dec:	200004a8 	.word	0x200004a8
 8013df0:	20022650 	.word	0x20022650

08013df4 <HEADER_CreateUser>:
 8013df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013df8:	4614      	mov	r4, r2
 8013dfa:	b087      	sub	sp, #28
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	460f      	mov	r7, r1
 8013e00:	461d      	mov	r5, r3
 8013e02:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8013e06:	f7fa fbb3 	bl	800e570 <GUI_Lock>
 8013e0a:	b96c      	cbnz	r4, 8013e28 <HEADER_CreateUser+0x34>
 8013e0c:	b966      	cbnz	r6, 8013e28 <HEADER_CreateUser+0x34>
 8013e0e:	b95f      	cbnz	r7, 8013e28 <HEADER_CreateUser+0x34>
 8013e10:	a904      	add	r1, sp, #16
 8013e12:	4640      	mov	r0, r8
 8013e14:	f7fe ff6f 	bl	8012cf6 <WM_GetInsideRectEx>
 8013e18:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8013e1c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8013e20:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8013e24:	1ba4      	subs	r4, r4, r6
 8013e26:	3401      	adds	r4, #1
 8013e28:	b975      	cbnz	r5, 8013e48 <HEADER_CreateUser+0x54>
 8013e2a:	f001 fabb 	bl	80153a4 <WIDGET_GetDefaultEffect>
 8013e2e:	4b28      	ldr	r3, [pc, #160]	; (8013ed0 <HEADER_CreateUser+0xdc>)
 8013e30:	4681      	mov	r9, r0
 8013e32:	6818      	ldr	r0, [r3, #0]
 8013e34:	f7f9 fcd0 	bl	800d7d8 <GUI_GetYDistOfFont>
 8013e38:	4b26      	ldr	r3, [pc, #152]	; (8013ed4 <HEADER_CreateUser+0xe0>)
 8013e3a:	685d      	ldr	r5, [r3, #4]
 8013e3c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013e40:	f8d9 0000 	ldr.w	r0, [r9]
 8013e44:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8013e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e4a:	4639      	mov	r1, r7
 8013e4c:	f8cd 8000 	str.w	r8, [sp]
 8013e50:	4622      	mov	r2, r4
 8013e52:	3344      	adds	r3, #68	; 0x44
 8013e54:	4630      	mov	r0, r6
 8013e56:	9303      	str	r3, [sp, #12]
 8013e58:	4b1f      	ldr	r3, [pc, #124]	; (8013ed8 <HEADER_CreateUser+0xe4>)
 8013e5a:	9302      	str	r3, [sp, #8]
 8013e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e5e:	f443 7320 	orr.w	r3, r3, #640	; 0x280
 8013e62:	9301      	str	r3, [sp, #4]
 8013e64:	462b      	mov	r3, r5
 8013e66:	f7fe f967 	bl	8012138 <WM_CreateWindowAsChild>
 8013e6a:	4607      	mov	r7, r0
 8013e6c:	b350      	cbz	r0, 8013ec4 <HEADER_CreateUser+0xd0>
 8013e6e:	f006 fd5f 	bl	801a930 <GUI_ARRAY_Create>
 8013e72:	4604      	mov	r4, r0
 8013e74:	4638      	mov	r0, r7
 8013e76:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8013ed0 <HEADER_CreateUser+0xdc>
 8013e7a:	f7f9 fa29 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013e7e:	2200      	movs	r2, #0
 8013e80:	9004      	str	r0, [sp, #16]
 8013e82:	4645      	mov	r5, r8
 8013e84:	64c4      	str	r4, [r0, #76]	; 0x4c
 8013e86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013e88:	f001 f978 	bl	801517c <WIDGET__Init>
 8013e8c:	f10d 0e18 	add.w	lr, sp, #24
 8013e90:	f85e 6d08 	ldr.w	r6, [lr, #-8]!
 8013e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e96:	f106 0434 	add.w	r4, r6, #52	; 0x34
 8013e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e9c:	682b      	ldr	r3, [r5, #0]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	4670      	mov	r0, lr
 8013ea2:	6023      	str	r3, [r4, #0]
 8013ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea8:	65b2      	str	r2, [r6, #88]	; 0x58
 8013eaa:	6533      	str	r3, [r6, #80]	; 0x50
 8013eac:	6573      	str	r3, [r6, #84]	; 0x54
 8013eae:	6633      	str	r3, [r6, #96]	; 0x60
 8013eb0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8013eb4:	64b3      	str	r3, [r6, #72]	; 0x48
 8013eb6:	f7f9 fa19 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013eba:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8013ebe:	4638      	mov	r0, r7
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	4798      	blx	r3
 8013ec4:	f7fa fb4a 	bl	800e55c <GUI_Unlock>
 8013ec8:	4638      	mov	r0, r7
 8013eca:	b007      	add	sp, #28
 8013ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ed0:	2000004c 	.word	0x2000004c
 8013ed4:	200004a8 	.word	0x200004a8
 8013ed8:	08014241 	.word	0x08014241

08013edc <HEADER_CreateIndirect>:
 8013edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ede:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	b087      	sub	sp, #28
 8013ee6:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
 8013eea:	441d      	add	r5, r3
 8013eec:	69a3      	ldr	r3, [r4, #24]
 8013eee:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8013ef2:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8013ef6:	9304      	str	r3, [sp, #16]
 8013ef8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013efc:	4410      	add	r0, r2
 8013efe:	4632      	mov	r2, r6
 8013f00:	9303      	str	r3, [sp, #12]
 8013f02:	2300      	movs	r3, #0
 8013f04:	9302      	str	r3, [sp, #8]
 8013f06:	8a63      	ldrh	r3, [r4, #18]
 8013f08:	e88d 000a 	stmia.w	sp, {r1, r3}
 8013f0c:	463b      	mov	r3, r7
 8013f0e:	4629      	mov	r1, r5
 8013f10:	f7ff ff70 	bl	8013df4 <HEADER_CreateUser>
 8013f14:	b007      	add	sp, #28
 8013f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f18 <HEADER_SetItemWidth>:
 8013f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f1a:	460f      	mov	r7, r1
 8013f1c:	b087      	sub	sp, #28
 8013f1e:	4615      	mov	r5, r2
 8013f20:	4604      	mov	r4, r0
 8013f22:	b3b0      	cbz	r0, 8013f92 <HEADER_SetItemWidth+0x7a>
 8013f24:	2a00      	cmp	r2, #0
 8013f26:	db34      	blt.n	8013f92 <HEADER_SetItemWidth+0x7a>
 8013f28:	f7fa fb22 	bl	800e570 <GUI_Lock>
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	f7f9 f9cf 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013f32:	ab06      	add	r3, sp, #24
 8013f34:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8013f36:	f843 0d18 	str.w	r0, [r3, #-24]!
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7f9 f9d6 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013f40:	4630      	mov	r0, r6
 8013f42:	f006 fcaa 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8013f46:	4287      	cmp	r7, r0
 8013f48:	d221      	bcs.n	8013f8e <HEADER_SetItemWidth+0x76>
 8013f4a:	4639      	mov	r1, r7
 8013f4c:	4630      	mov	r0, r6
 8013f4e:	f006 fcdc 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 8013f52:	4603      	mov	r3, r0
 8013f54:	a806      	add	r0, sp, #24
 8013f56:	f840 3d14 	str.w	r3, [r0, #-20]!
 8013f5a:	b1b3      	cbz	r3, 8013f8a <HEADER_SetItemWidth+0x72>
 8013f5c:	601d      	str	r5, [r3, #0]
 8013f5e:	f7f9 f9c5 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013f62:	4620      	mov	r0, r4
 8013f64:	f7fe fee0 	bl	8012d28 <WM_GetParent>
 8013f68:	2325      	movs	r3, #37	; 0x25
 8013f6a:	9003      	str	r0, [sp, #12]
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	9302      	str	r3, [sp, #8]
 8013f70:	9404      	str	r4, [sp, #16]
 8013f72:	f7fe f8af 	bl	80120d4 <WM_InvalidateWindow>
 8013f76:	a902      	add	r1, sp, #8
 8013f78:	9803      	ldr	r0, [sp, #12]
 8013f7a:	f7ff fde9 	bl	8013b50 <WM__SendMessage>
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f7fe fed2 	bl	8012d28 <WM_GetParent>
 8013f84:	f7fe f8a6 	bl	80120d4 <WM_InvalidateWindow>
 8013f88:	e001      	b.n	8013f8e <HEADER_SetItemWidth+0x76>
 8013f8a:	f7f9 f9af 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013f8e:	f7fa fae5 	bl	800e55c <GUI_Unlock>
 8013f92:	b007      	add	sp, #28
 8013f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f96 <HEADER_GetItemWidth>:
 8013f96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f98:	460d      	mov	r5, r1
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	b1e8      	cbz	r0, 8013fda <HEADER_GetItemWidth+0x44>
 8013f9e:	f7fa fae7 	bl	800e570 <GUI_Lock>
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f7f9 f994 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013fa8:	9001      	str	r0, [sp, #4]
 8013faa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8013fac:	f006 fc75 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8013fb0:	4285      	cmp	r5, r0
 8013fb2:	d20c      	bcs.n	8013fce <HEADER_GetItemWidth+0x38>
 8013fb4:	9b01      	ldr	r3, [sp, #4]
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013fba:	f006 fca6 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 8013fbe:	ab02      	add	r3, sp, #8
 8013fc0:	6804      	ldr	r4, [r0, #0]
 8013fc2:	f843 0d08 	str.w	r0, [r3, #-8]!
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7f9 f990 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013fcc:	e000      	b.n	8013fd0 <HEADER_GetItemWidth+0x3a>
 8013fce:	2400      	movs	r4, #0
 8013fd0:	a801      	add	r0, sp, #4
 8013fd2:	f7f9 f98b 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8013fd6:	f7fa fac1 	bl	800e55c <GUI_Unlock>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	b003      	add	sp, #12
 8013fde:	bd30      	pop	{r4, r5, pc}

08013fe0 <_HandlePID>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	b089      	sub	sp, #36	; 0x24
 8013fe8:	4615      	mov	r5, r2
 8013fea:	4688      	mov	r8, r1
 8013fec:	4699      	mov	r9, r3
 8013fee:	f7f9 f96f 	bl	800d2d0 <GUI_ALLOC_LockH>
 8013ff2:	9004      	str	r0, [sp, #16]
 8013ff4:	4682      	mov	sl, r0
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f006 faa6 	bl	801a548 <WM_GetWindowSizeY>
 8013ffc:	2d00      	cmp	r5, #0
 8013ffe:	db63      	blt.n	80140c8 <_HandlePID+0xe8>
 8014000:	4285      	cmp	r5, r0
 8014002:	da61      	bge.n	80140c8 <_HandlePID+0xe8>
 8014004:	2c00      	cmp	r4, #0
 8014006:	d05f      	beq.n	80140c8 <_HandlePID+0xe8>
 8014008:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801400c:	f006 fc45 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8014010:	f8da 5068 	ldr.w	r5, [sl, #104]	; 0x68
 8014014:	9000      	str	r0, [sp, #0]
 8014016:	b10d      	cbz	r5, 801401c <_HandlePID+0x3c>
 8014018:	f8da 5058 	ldr.w	r5, [sl, #88]	; 0x58
 801401c:	f1a8 0304 	sub.w	r3, r8, #4
 8014020:	2700      	movs	r7, #0
 8014022:	f04f 36ff 	mov.w	r6, #4294967295
 8014026:	9301      	str	r3, [sp, #4]
 8014028:	46bb      	mov	fp, r7
 801402a:	f108 0304 	add.w	r3, r8, #4
 801402e:	9302      	str	r3, [sp, #8]
 8014030:	9b00      	ldr	r3, [sp, #0]
 8014032:	42bb      	cmp	r3, r7
 8014034:	d035      	beq.n	80140a2 <_HandlePID+0xc2>
 8014036:	4639      	mov	r1, r7
 8014038:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801403c:	f006 fc65 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 8014040:	6802      	ldr	r2, [r0, #0]
 8014042:	9006      	str	r0, [sp, #24]
 8014044:	a806      	add	r0, sp, #24
 8014046:	4415      	add	r5, r2
 8014048:	f7f9 f950 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801404c:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
 8014050:	1c7a      	adds	r2, r7, #1
 8014052:	428f      	cmp	r7, r1
 8014054:	d308      	bcc.n	8014068 <_HandlePID+0x88>
 8014056:	b121      	cbz	r1, 8014062 <_HandlePID+0x82>
 8014058:	428f      	cmp	r7, r1
 801405a:	bf04      	itt	eq
 801405c:	f8da 1058 	ldreq.w	r1, [sl, #88]	; 0x58
 8014060:	1a6d      	subeq	r5, r5, r1
 8014062:	455d      	cmp	r5, fp
 8014064:	db1b      	blt.n	801409e <_HandlePID+0xbe>
 8014066:	e000      	b.n	801406a <_HandlePID+0x8a>
 8014068:	46ab      	mov	fp, r5
 801406a:	9b01      	ldr	r3, [sp, #4]
 801406c:	42ab      	cmp	r3, r5
 801406e:	dc16      	bgt.n	801409e <_HandlePID+0xbe>
 8014070:	9b02      	ldr	r3, [sp, #8]
 8014072:	42ab      	cmp	r3, r5
 8014074:	db13      	blt.n	801409e <_HandlePID+0xbe>
 8014076:	9b00      	ldr	r3, [sp, #0]
 8014078:	463e      	mov	r6, r7
 801407a:	1e59      	subs	r1, r3, #1
 801407c:	428f      	cmp	r7, r1
 801407e:	d20e      	bcs.n	801409e <_HandlePID+0xbe>
 8014080:	45a8      	cmp	r8, r5
 8014082:	da0c      	bge.n	801409e <_HandlePID+0xbe>
 8014084:	4611      	mov	r1, r2
 8014086:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801408a:	9203      	str	r2, [sp, #12]
 801408c:	f006 fc3d 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 8014090:	6807      	ldr	r7, [r0, #0]
 8014092:	9006      	str	r0, [sp, #24]
 8014094:	a806      	add	r0, sp, #24
 8014096:	f7f9 f929 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801409a:	9a03      	ldr	r2, [sp, #12]
 801409c:	b10f      	cbz	r7, 80140a2 <_HandlePID+0xc2>
 801409e:	4617      	mov	r7, r2
 80140a0:	e7c6      	b.n	8014030 <_HandlePID+0x50>
 80140a2:	f1b9 0f01 	cmp.w	r9, #1
 80140a6:	d10b      	bne.n	80140c0 <_HandlePID+0xe0>
 80140a8:	2e00      	cmp	r6, #0
 80140aa:	f2c0 80bb 	blt.w	8014224 <_HandlePID+0x244>
 80140ae:	9b04      	ldr	r3, [sp, #16]
 80140b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140b2:	3201      	adds	r2, #1
 80140b4:	f040 80ae 	bne.w	8014214 <_HandlePID+0x234>
 80140b8:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 80140bc:	655e      	str	r6, [r3, #84]	; 0x54
 80140be:	e0a9      	b.n	8014214 <_HandlePID+0x234>
 80140c0:	f1b9 0f00 	cmp.w	r9, #0
 80140c4:	dc0d      	bgt.n	80140e2 <_HandlePID+0x102>
 80140c6:	e008      	b.n	80140da <_HandlePID+0xfa>
 80140c8:	f1b9 0f01 	cmp.w	r9, #1
 80140cc:	f000 80a8 	beq.w	8014220 <_HandlePID+0x240>
 80140d0:	f1b9 0f00 	cmp.w	r9, #0
 80140d4:	dc29      	bgt.n	801412a <_HandlePID+0x14a>
 80140d6:	f04f 36ff 	mov.w	r6, #4294967295
 80140da:	f04f 32ff 	mov.w	r2, #4294967295
 80140de:	9b04      	ldr	r3, [sp, #16]
 80140e0:	651a      	str	r2, [r3, #80]	; 0x50
 80140e2:	a808      	add	r0, sp, #32
 80140e4:	f850 3d10 	ldr.w	r3, [r0, #-16]!
 80140e8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80140ea:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 80140ec:	f7f9 f8fe 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80140f0:	2e00      	cmp	r6, #0
 80140f2:	db17      	blt.n	8014124 <_HandlePID+0x144>
 80140f4:	f8df a140 	ldr.w	sl, [pc, #320]	; 8014238 <_HandlePID+0x258>
 80140f8:	2101      	movs	r1, #1
 80140fa:	4620      	mov	r0, r4
 80140fc:	f006 fac4 	bl	801a688 <WM_SetCapture>
 8014100:	f8da 3000 	ldr.w	r3, [sl]
 8014104:	b973      	cbnz	r3, 8014124 <_HandlePID+0x144>
 8014106:	f8df b134 	ldr.w	fp, [pc, #308]	; 801423c <_HandlePID+0x25c>
 801410a:	f8db 0000 	ldr.w	r0, [fp]
 801410e:	f001 fdad 	bl	8015c6c <GUI_CURSOR_GetStateEx>
 8014112:	b138      	cbz	r0, 8014124 <_HandlePID+0x144>
 8014114:	4b47      	ldr	r3, [pc, #284]	; (8014234 <_HandlePID+0x254>)
 8014116:	f8db 1000 	ldr.w	r1, [fp]
 801411a:	69d8      	ldr	r0, [r3, #28]
 801411c:	f001 fd40 	bl	8015ba0 <GUI_CURSOR_SelectEx>
 8014120:	f8ca 0000 	str.w	r0, [sl]
 8014124:	2d00      	cmp	r5, #0
 8014126:	da0b      	bge.n	8014140 <_HandlePID+0x160>
 8014128:	e05d      	b.n	80141e6 <_HandlePID+0x206>
 801412a:	a808      	add	r0, sp, #32
 801412c:	f850 3d10 	ldr.w	r3, [r0, #-16]!
 8014130:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8014132:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8014134:	f7f9 f8da 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014138:	2d00      	cmp	r5, #0
 801413a:	db5e      	blt.n	80141fa <_HandlePID+0x21a>
 801413c:	f04f 36ff 	mov.w	r6, #4294967295
 8014140:	45a8      	cmp	r8, r5
 8014142:	d050      	beq.n	80141e6 <_HandlePID+0x206>
 8014144:	f1b9 0f01 	cmp.w	r9, #1
 8014148:	d14d      	bne.n	80141e6 <_HandlePID+0x206>
 801414a:	4639      	mov	r1, r7
 801414c:	4620      	mov	r0, r4
 801414e:	f7ff ff22 	bl	8013f96 <HEADER_GetItemWidth>
 8014152:	4440      	add	r0, r8
 8014154:	1b42      	subs	r2, r0, r5
 8014156:	d450      	bmi.n	80141fa <_HandlePID+0x21a>
 8014158:	4639      	mov	r1, r7
 801415a:	4620      	mov	r0, r4
 801415c:	f7ff fedc 	bl	8013f18 <HEADER_SetItemWidth>
 8014160:	4620      	mov	r0, r4
 8014162:	f7f9 f8b5 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014166:	ab08      	add	r3, sp, #32
 8014168:	f890 606c 	ldrb.w	r6, [r0, #108]	; 0x6c
 801416c:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8014170:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
 8014174:	4618      	mov	r0, r3
 8014176:	f7f9 f8b9 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801417a:	b90e      	cbnz	r6, 8014180 <_HandlePID+0x1a0>
 801417c:	4645      	mov	r5, r8
 801417e:	e03c      	b.n	80141fa <_HandlePID+0x21a>
 8014180:	4620      	mov	r0, r4
 8014182:	a906      	add	r1, sp, #24
 8014184:	f7fe fced 	bl	8012b62 <WM_GetClientRectEx>
 8014188:	4620      	mov	r0, r4
 801418a:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 801418e:	f7fe fdcb 	bl	8012d28 <WM_GetParent>
 8014192:	b140      	cbz	r0, 80141a6 <_HandlePID+0x1c6>
 8014194:	4620      	mov	r0, r4
 8014196:	f7fe fdc7 	bl	8012d28 <WM_GetParent>
 801419a:	f7fe fe28 	bl	8012dee <WM_GetScrollbarV>
 801419e:	b110      	cbz	r0, 80141a6 <_HandlePID+0x1c6>
 80141a0:	f006 f9b6 	bl	801a510 <WM_GetWindowSizeX>
 80141a4:	1a3f      	subs	r7, r7, r0
 80141a6:	2600      	movs	r6, #0
 80141a8:	46b2      	mov	sl, r6
 80141aa:	45d1      	cmp	r9, sl
 80141ac:	db07      	blt.n	80141be <_HandlePID+0x1de>
 80141ae:	4651      	mov	r1, sl
 80141b0:	4620      	mov	r0, r4
 80141b2:	f7ff fef0 	bl	8013f96 <HEADER_GetItemWidth>
 80141b6:	f10a 0a01 	add.w	sl, sl, #1
 80141ba:	4406      	add	r6, r0
 80141bc:	e7f5      	b.n	80141aa <_HandlePID+0x1ca>
 80141be:	42be      	cmp	r6, r7
 80141c0:	dddc      	ble.n	801417c <_HandlePID+0x19c>
 80141c2:	2600      	movs	r6, #0
 80141c4:	46b0      	mov	r8, r6
 80141c6:	45c1      	cmp	r9, r8
 80141c8:	dd07      	ble.n	80141da <_HandlePID+0x1fa>
 80141ca:	4641      	mov	r1, r8
 80141cc:	4620      	mov	r0, r4
 80141ce:	f7ff fee2 	bl	8013f96 <HEADER_GetItemWidth>
 80141d2:	f108 0801 	add.w	r8, r8, #1
 80141d6:	4406      	add	r6, r0
 80141d8:	e7f5      	b.n	80141c6 <_HandlePID+0x1e6>
 80141da:	1bba      	subs	r2, r7, r6
 80141dc:	4649      	mov	r1, r9
 80141de:	4620      	mov	r0, r4
 80141e0:	f7ff fe9a 	bl	8013f18 <HEADER_SetItemWidth>
 80141e4:	e009      	b.n	80141fa <_HandlePID+0x21a>
 80141e6:	f1b9 0f00 	cmp.w	r9, #0
 80141ea:	dc06      	bgt.n	80141fa <_HandlePID+0x21a>
 80141ec:	1c73      	adds	r3, r6, #1
 80141ee:	d104      	bne.n	80141fa <_HandlePID+0x21a>
 80141f0:	4635      	mov	r5, r6
 80141f2:	f7ff fdeb 	bl	8013dcc <_RestoreOldCursor>
 80141f6:	f006 fa67 	bl	801a6c8 <WM_ReleaseCapture>
 80141fa:	4620      	mov	r0, r4
 80141fc:	f7f9 f868 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014200:	ab08      	add	r3, sp, #32
 8014202:	6505      	str	r5, [r0, #80]	; 0x50
 8014204:	f843 0d10 	str.w	r0, [r3, #-16]!
 8014208:	4618      	mov	r0, r3
 801420a:	f7f9 f86f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801420e:	b009      	add	sp, #36	; 0x24
 8014210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014214:	a804      	add	r0, sp, #16
 8014216:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8014218:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 801421a:	f7f9 f867 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801421e:	e769      	b.n	80140f4 <_HandlePID+0x114>
 8014220:	f04f 36ff 	mov.w	r6, #4294967295
 8014224:	a808      	add	r0, sp, #32
 8014226:	f850 3d10 	ldr.w	r3, [r0, #-16]!
 801422a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801422c:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 801422e:	f7f9 f85d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014232:	e777      	b.n	8014124 <_HandlePID+0x144>
 8014234:	2000004c 	.word	0x2000004c
 8014238:	200004a8 	.word	0x200004a8
 801423c:	20022650 	.word	0x20022650

08014240 <HEADER_Callback>:
 8014240:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014244:	6844      	ldr	r4, [r0, #4]
 8014246:	4605      	mov	r5, r0
 8014248:	4601      	mov	r1, r0
 801424a:	4620      	mov	r0, r4
 801424c:	f000 ffe9 	bl	8015222 <WIDGET_HandleActive>
 8014250:	2800      	cmp	r0, #0
 8014252:	f000 80cb 	beq.w	80143ec <HEADER_Callback+0x1ac>
 8014256:	f7fa f98b 	bl	800e570 <GUI_Lock>
 801425a:	682b      	ldr	r3, [r5, #0]
 801425c:	2b10      	cmp	r3, #16
 801425e:	f000 8087 	beq.w	8014370 <HEADER_Callback+0x130>
 8014262:	dc05      	bgt.n	8014270 <HEADER_Callback+0x30>
 8014264:	2b0b      	cmp	r3, #11
 8014266:	f000 8098 	beq.w	801439a <HEADER_Callback+0x15a>
 801426a:	2b0f      	cmp	r3, #15
 801426c:	d006      	beq.n	801427c <HEADER_Callback+0x3c>
 801426e:	e0b8      	b.n	80143e2 <HEADER_Callback+0x1a2>
 8014270:	2b11      	cmp	r3, #17
 8014272:	d014      	beq.n	801429e <HEADER_Callback+0x5e>
 8014274:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014278:	d05c      	beq.n	8014334 <HEADER_Callback+0xf4>
 801427a:	e0b2      	b.n	80143e2 <HEADER_Callback+0x1a2>
 801427c:	4620      	mov	r0, r4
 801427e:	f7f9 f827 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014282:	ab02      	add	r3, sp, #8
 8014284:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014288:	6c82      	ldr	r2, [r0, #72]	; 0x48
 801428a:	4618      	mov	r0, r3
 801428c:	6815      	ldr	r5, [r2, #0]
 801428e:	f7f9 f82d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014292:	2d00      	cmp	r5, #0
 8014294:	f000 80a8 	beq.w	80143e8 <HEADER_Callback+0x1a8>
 8014298:	4620      	mov	r0, r4
 801429a:	47a8      	blx	r5
 801429c:	e0a4      	b.n	80143e8 <HEADER_Callback+0x1a8>
 801429e:	4620      	mov	r0, r4
 80142a0:	f7f9 f816 	bl	800d2d0 <GUI_ALLOC_LockH>
 80142a4:	68eb      	ldr	r3, [r5, #12]
 80142a6:	9000      	str	r0, [sp, #0]
 80142a8:	4606      	mov	r6, r0
 80142aa:	891a      	ldrh	r2, [r3, #8]
 80142ac:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80142b0:	d13c      	bne.n	801432c <HEADER_Callback+0xec>
 80142b2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80142b4:	4620      	mov	r0, r4
 80142b6:	681f      	ldr	r7, [r3, #0]
 80142b8:	685d      	ldr	r5, [r3, #4]
 80142ba:	4417      	add	r7, r2
 80142bc:	f006 f944 	bl	801a548 <WM_GetWindowSizeY>
 80142c0:	2d00      	cmp	r5, #0
 80142c2:	da02      	bge.n	80142ca <HEADER_Callback+0x8a>
 80142c4:	f04f 35ff 	mov.w	r5, #4294967295
 80142c8:	e02f      	b.n	801432a <HEADER_Callback+0xea>
 80142ca:	42a8      	cmp	r0, r5
 80142cc:	ddfa      	ble.n	80142c4 <HEADER_Callback+0x84>
 80142ce:	2c00      	cmp	r4, #0
 80142d0:	d0f8      	beq.n	80142c4 <HEADER_Callback+0x84>
 80142d2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80142d4:	f006 fae1 	bl	801a89a <GUI_ARRAY_GetNumItems>
 80142d8:	6eb4      	ldr	r4, [r6, #104]	; 0x68
 80142da:	4682      	mov	sl, r0
 80142dc:	b104      	cbz	r4, 80142e0 <HEADER_Callback+0xa0>
 80142de:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80142e0:	2500      	movs	r5, #0
 80142e2:	46a8      	mov	r8, r5
 80142e4:	45aa      	cmp	sl, r5
 80142e6:	d0ed      	beq.n	80142c4 <HEADER_Callback+0x84>
 80142e8:	4629      	mov	r1, r5
 80142ea:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80142ec:	f006 fb0d 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 80142f0:	9001      	str	r0, [sp, #4]
 80142f2:	f8d0 9000 	ldr.w	r9, [r0]
 80142f6:	a801      	add	r0, sp, #4
 80142f8:	f7f8 fff8 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80142fc:	45a0      	cmp	r8, r4
 80142fe:	dc07      	bgt.n	8014310 <HEADER_Callback+0xd0>
 8014300:	1d23      	adds	r3, r4, #4
 8014302:	429f      	cmp	r7, r3
 8014304:	dd04      	ble.n	8014310 <HEADER_Callback+0xd0>
 8014306:	eb09 0304 	add.w	r3, r9, r4
 801430a:	3b04      	subs	r3, #4
 801430c:	429f      	cmp	r7, r3
 801430e:	db0c      	blt.n	801432a <HEADER_Callback+0xea>
 8014310:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8014312:	429d      	cmp	r5, r3
 8014314:	d305      	bcc.n	8014322 <HEADER_Callback+0xe2>
 8014316:	b12b      	cbz	r3, 8014324 <HEADER_Callback+0xe4>
 8014318:	429d      	cmp	r5, r3
 801431a:	d103      	bne.n	8014324 <HEADER_Callback+0xe4>
 801431c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 801431e:	1ae4      	subs	r4, r4, r3
 8014320:	e000      	b.n	8014324 <HEADER_Callback+0xe4>
 8014322:	46a0      	mov	r8, r4
 8014324:	444c      	add	r4, r9
 8014326:	3501      	adds	r5, #1
 8014328:	e7dc      	b.n	80142e4 <HEADER_Callback+0xa4>
 801432a:	65f5      	str	r5, [r6, #92]	; 0x5c
 801432c:	4668      	mov	r0, sp
 801432e:	f7f8 ffdd 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014332:	e059      	b.n	80143e8 <HEADER_Callback+0x1a8>
 8014334:	4620      	mov	r0, r4
 8014336:	f7f8 ffcb 	bl	800d2d0 <GUI_ALLOC_LockH>
 801433a:	ab02      	add	r3, sp, #8
 801433c:	6d86      	ldr	r6, [r0, #88]	; 0x58
 801433e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014342:	4618      	mov	r0, r3
 8014344:	f7f8 ffd2 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014348:	68ed      	ldr	r5, [r5, #12]
 801434a:	b165      	cbz	r5, 8014366 <HEADER_Callback+0x126>
 801434c:	6829      	ldr	r1, [r5, #0]
 801434e:	4620      	mov	r0, r4
 8014350:	7a2b      	ldrb	r3, [r5, #8]
 8014352:	4431      	add	r1, r6
 8014354:	686a      	ldr	r2, [r5, #4]
 8014356:	f7ff fe43 	bl	8013fe0 <_HandlePID>
 801435a:	7a2b      	ldrb	r3, [r5, #8]
 801435c:	2b00      	cmp	r3, #0
 801435e:	bf14      	ite	ne
 8014360:	2101      	movne	r1, #1
 8014362:	2102      	moveq	r1, #2
 8014364:	e000      	b.n	8014368 <HEADER_Callback+0x128>
 8014366:	2103      	movs	r1, #3
 8014368:	4620      	mov	r0, r4
 801436a:	f7fe fed5 	bl	8013118 <WM_NotifyParent>
 801436e:	e03b      	b.n	80143e8 <HEADER_Callback+0x1a8>
 8014370:	4620      	mov	r0, r4
 8014372:	f7f8 ffad 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014376:	ab02      	add	r3, sp, #8
 8014378:	6d86      	ldr	r6, [r0, #88]	; 0x58
 801437a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801437e:	4618      	mov	r0, r3
 8014380:	f7f8 ffb4 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014384:	68ea      	ldr	r2, [r5, #12]
 8014386:	b37a      	cbz	r2, 80143e8 <HEADER_Callback+0x1a8>
 8014388:	6811      	ldr	r1, [r2, #0]
 801438a:	f04f 33ff 	mov.w	r3, #4294967295
 801438e:	6852      	ldr	r2, [r2, #4]
 8014390:	4620      	mov	r0, r4
 8014392:	4431      	add	r1, r6
 8014394:	f7ff fe24 	bl	8013fe0 <_HandlePID>
 8014398:	e026      	b.n	80143e8 <HEADER_Callback+0x1a8>
 801439a:	4620      	mov	r0, r4
 801439c:	2400      	movs	r4, #0
 801439e:	f7f8 ff97 	bl	800d2d0 <GUI_ALLOC_LockH>
 80143a2:	ab02      	add	r3, sp, #8
 80143a4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80143a6:	f843 0d08 	str.w	r0, [r3, #-8]!
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7f8 ff9e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80143b0:	4630      	mov	r0, r6
 80143b2:	f006 fa72 	bl	801a89a <GUI_ARRAY_GetNumItems>
 80143b6:	4607      	mov	r7, r0
 80143b8:	42a7      	cmp	r7, r4
 80143ba:	dd0d      	ble.n	80143d8 <HEADER_Callback+0x198>
 80143bc:	4621      	mov	r1, r4
 80143be:	4630      	mov	r0, r6
 80143c0:	f006 faa3 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 80143c4:	9001      	str	r0, [sp, #4]
 80143c6:	6880      	ldr	r0, [r0, #8]
 80143c8:	b108      	cbz	r0, 80143ce <HEADER_Callback+0x18e>
 80143ca:	f7f8 ffbf 	bl	800d34c <GUI_ALLOC_Free>
 80143ce:	a801      	add	r0, sp, #4
 80143d0:	3401      	adds	r4, #1
 80143d2:	f7f8 ff8b 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80143d6:	e7ef      	b.n	80143b8 <HEADER_Callback+0x178>
 80143d8:	4630      	mov	r0, r6
 80143da:	f006 fa6d 	bl	801a8b8 <GUI_ARRAY_Delete>
 80143de:	f7ff fcf5 	bl	8013dcc <_RestoreOldCursor>
 80143e2:	4628      	mov	r0, r5
 80143e4:	f7fe fade 	bl	80129a4 <WM_DefaultProc>
 80143e8:	f7fa f8b8 	bl	800e55c <GUI_Unlock>
 80143ec:	b002      	add	sp, #8
 80143ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080143f2 <_Create>:
 80143f2:	b530      	push	{r4, r5, lr}
 80143f4:	b08b      	sub	sp, #44	; 0x2c
 80143f6:	4605      	mov	r5, r0
 80143f8:	f7f8 ff6a 	bl	800d2d0 <GUI_ALLOC_LockH>
 80143fc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80143fe:	ab0a      	add	r3, sp, #40	; 0x28
 8014400:	6894      	ldr	r4, [r2, #8]
 8014402:	f843 0d28 	str.w	r0, [r3, #-40]!
 8014406:	4618      	mov	r0, r3
 8014408:	f7f8 ff70 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801440c:	2300      	movs	r3, #0
 801440e:	a80a      	add	r0, sp, #40	; 0x28
 8014410:	9302      	str	r3, [sp, #8]
 8014412:	6823      	ldr	r3, [r4, #0]
 8014414:	f840 5d24 	str.w	r5, [r0, #-36]!
 8014418:	4798      	blx	r3
 801441a:	b00b      	add	sp, #44	; 0x2c
 801441c:	bd30      	pop	{r4, r5, pc}

0801441e <_Paint>:
 801441e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014422:	b095      	sub	sp, #84	; 0x54
 8014424:	4605      	mov	r5, r0
 8014426:	f7f8 ff53 	bl	800d2d0 <GUI_ALLOC_LockH>
 801442a:	4604      	mov	r4, r0
 801442c:	a814      	add	r0, sp, #80	; 0x50
 801442e:	f04f 0b05 	mov.w	fp, #5
 8014432:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8014434:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8014436:	f840 4d3c 	str.w	r4, [r0, #-60]!
 801443a:	9301      	str	r3, [sp, #4]
 801443c:	f8d4 8058 	ldr.w	r8, [r4, #88]	; 0x58
 8014440:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8014442:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
 8014446:	f7f8 ff51 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801444a:	4638      	mov	r0, r7
 801444c:	f006 fa25 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8014450:	a909      	add	r1, sp, #36	; 0x24
 8014452:	4681      	mov	r9, r0
 8014454:	4620      	mov	r0, r4
 8014456:	f000 fe6a 	bl	801512e <WIDGET__GetClientRect>
 801445a:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801445e:	950b      	str	r5, [sp, #44]	; 0x2c
 8014460:	2400      	movs	r4, #0
 8014462:	f1c8 0500 	rsb	r5, r8, #0
 8014466:	9310      	str	r3, [sp, #64]	; 0x40
 8014468:	f8ad 301e 	strh.w	r3, [sp, #30]
 801446c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8014470:	9511      	str	r5, [sp, #68]	; 0x44
 8014472:	9312      	str	r3, [sp, #72]	; 0x48
 8014474:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014478:	950f      	str	r5, [sp, #60]	; 0x3c
 801447a:	454c      	cmp	r4, r9
 801447c:	da3c      	bge.n	80144f8 <_Paint+0xda>
 801447e:	4621      	mov	r1, r4
 8014480:	4638      	mov	r0, r7
 8014482:	f006 fa42 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 8014486:	6882      	ldr	r2, [r0, #8]
 8014488:	6803      	ldr	r3, [r0, #0]
 801448a:	9006      	str	r0, [sp, #24]
 801448c:	a806      	add	r0, sp, #24
 801448e:	9202      	str	r2, [sp, #8]
 8014490:	9303      	str	r3, [sp, #12]
 8014492:	f7f8 ff2b 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014496:	9b01      	ldr	r3, [sp, #4]
 8014498:	a807      	add	r0, sp, #28
 801449a:	429c      	cmp	r4, r3
 801449c:	bfb4      	ite	lt
 801449e:	4641      	movlt	r1, r8
 80144a0:	2100      	movge	r1, #0
 80144a2:	9b03      	ldr	r3, [sp, #12]
 80144a4:	440d      	add	r5, r1
 80144a6:	442b      	add	r3, r5
 80144a8:	950f      	str	r5, [sp, #60]	; 0x3c
 80144aa:	f8ad 501c 	strh.w	r5, [sp, #28]
 80144ae:	3b01      	subs	r3, #1
 80144b0:	9311      	str	r3, [sp, #68]	; 0x44
 80144b2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80144b6:	f7fe fec5 	bl	8013244 <WM_SetUserClipRect>
 80144ba:	940d      	str	r4, [sp, #52]	; 0x34
 80144bc:	a80b      	add	r0, sp, #44	; 0x2c
 80144be:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80144c2:	47b0      	blx	r6
 80144c4:	9a02      	ldr	r2, [sp, #8]
 80144c6:	b11a      	cbz	r2, 80144d0 <_Paint+0xb2>
 80144c8:	2306      	movs	r3, #6
 80144ca:	a80b      	add	r0, sp, #44	; 0x2c
 80144cc:	930c      	str	r3, [sp, #48]	; 0x30
 80144ce:	47b0      	blx	r6
 80144d0:	2312      	movs	r3, #18
 80144d2:	a80b      	add	r0, sp, #44	; 0x2c
 80144d4:	930c      	str	r3, [sp, #48]	; 0x30
 80144d6:	47b0      	blx	r6
 80144d8:	4554      	cmp	r4, sl
 80144da:	d103      	bne.n	80144e4 <_Paint+0xc6>
 80144dc:	2302      	movs	r3, #2
 80144de:	a80b      	add	r0, sp, #44	; 0x2c
 80144e0:	930c      	str	r3, [sp, #48]	; 0x30
 80144e2:	47b0      	blx	r6
 80144e4:	2000      	movs	r0, #0
 80144e6:	3401      	adds	r4, #1
 80144e8:	f7fe feac 	bl	8013244 <WM_SetUserClipRect>
 80144ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80144f0:	1a9b      	subs	r3, r3, r2
 80144f2:	3301      	adds	r3, #1
 80144f4:	441d      	add	r5, r3
 80144f6:	e7c0      	b.n	801447a <_Paint+0x5c>
 80144f8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80144fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80144fe:	429a      	cmp	r2, r3
 8014500:	da0f      	bge.n	8014522 <_Paint+0x104>
 8014502:	a807      	add	r0, sp, #28
 8014504:	9311      	str	r3, [sp, #68]	; 0x44
 8014506:	f8ad 3020 	strh.w	r3, [sp, #32]
 801450a:	950f      	str	r5, [sp, #60]	; 0x3c
 801450c:	f8ad 501c 	strh.w	r5, [sp, #28]
 8014510:	f7fe fe98 	bl	8013244 <WM_SetUserClipRect>
 8014514:	230c      	movs	r3, #12
 8014516:	a80b      	add	r0, sp, #44	; 0x2c
 8014518:	930c      	str	r3, [sp, #48]	; 0x30
 801451a:	47b0      	blx	r6
 801451c:	2000      	movs	r0, #0
 801451e:	f7fe fe91 	bl	8013244 <WM_SetUserClipRect>
 8014522:	b015      	add	sp, #84	; 0x54
 8014524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014528 <HEADER_DrawSkinFlex>:
 8014528:	6843      	ldr	r3, [r0, #4]
 801452a:	2b06      	cmp	r3, #6
 801452c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014530:	4604      	mov	r4, r0
 8014532:	b086      	sub	sp, #24
 8014534:	d03e      	beq.n	80145b4 <HEADER_DrawSkinFlex+0x8c>
 8014536:	dc37      	bgt.n	80145a8 <HEADER_DrawSkinFlex+0x80>
 8014538:	2b02      	cmp	r3, #2
 801453a:	f000 80da 	beq.w	80146f2 <HEADER_DrawSkinFlex+0x1ca>
 801453e:	2b05      	cmp	r3, #5
 8014540:	f040 8134 	bne.w	80147ac <HEADER_DrawSkinFlex+0x284>
 8014544:	4e9b      	ldr	r6, [pc, #620]	; (80147b4 <HEADER_DrawSkinFlex+0x28c>)
 8014546:	6943      	ldr	r3, [r0, #20]
 8014548:	69c5      	ldr	r5, [r0, #28]
 801454a:	6830      	ldr	r0, [r6, #0]
 801454c:	441d      	add	r5, r3
 801454e:	f7f9 fa63 	bl	800da18 <GUI_SetColor>
 8014552:	69e2      	ldr	r2, [r4, #28]
 8014554:	6961      	ldr	r1, [r4, #20]
 8014556:	106d      	asrs	r5, r5, #1
 8014558:	3a01      	subs	r2, #1
 801455a:	69a0      	ldr	r0, [r4, #24]
 801455c:	f001 fde2 	bl	8016124 <GUI_DrawVLine>
 8014560:	69a2      	ldr	r2, [r4, #24]
 8014562:	6921      	ldr	r1, [r4, #16]
 8014564:	69e0      	ldr	r0, [r4, #28]
 8014566:	f001 fd87 	bl	8016078 <GUI_DrawHLine>
 801456a:	6870      	ldr	r0, [r6, #4]
 801456c:	f7f9 fa54 	bl	800da18 <GUI_SetColor>
 8014570:	69e2      	ldr	r2, [r4, #28]
 8014572:	6961      	ldr	r1, [r4, #20]
 8014574:	3a01      	subs	r2, #1
 8014576:	6920      	ldr	r0, [r4, #16]
 8014578:	f001 fdd4 	bl	8016124 <GUI_DrawVLine>
 801457c:	68f3      	ldr	r3, [r6, #12]
 801457e:	69a2      	ldr	r2, [r4, #24]
 8014580:	6920      	ldr	r0, [r4, #16]
 8014582:	9301      	str	r3, [sp, #4]
 8014584:	3a01      	subs	r2, #1
 8014586:	68b3      	ldr	r3, [r6, #8]
 8014588:	3001      	adds	r0, #1
 801458a:	9300      	str	r3, [sp, #0]
 801458c:	1e6b      	subs	r3, r5, #1
 801458e:	6961      	ldr	r1, [r4, #20]
 8014590:	f001 fcfe 	bl	8015f90 <GUI_DrawGradientV>
 8014594:	6971      	ldr	r1, [r6, #20]
 8014596:	69e3      	ldr	r3, [r4, #28]
 8014598:	69a2      	ldr	r2, [r4, #24]
 801459a:	6920      	ldr	r0, [r4, #16]
 801459c:	3b01      	subs	r3, #1
 801459e:	9101      	str	r1, [sp, #4]
 80145a0:	3a01      	subs	r2, #1
 80145a2:	6931      	ldr	r1, [r6, #16]
 80145a4:	9100      	str	r1, [sp, #0]
 80145a6:	e0fd      	b.n	80147a4 <HEADER_DrawSkinFlex+0x27c>
 80145a8:	2b0c      	cmp	r3, #12
 80145aa:	f000 80d2 	beq.w	8014752 <HEADER_DrawSkinFlex+0x22a>
 80145ae:	2b12      	cmp	r3, #18
 80145b0:	d04c      	beq.n	801464c <HEADER_DrawSkinFlex+0x124>
 80145b2:	e0fb      	b.n	80147ac <HEADER_DrawSkinFlex+0x284>
 80145b4:	6800      	ldr	r0, [r0, #0]
 80145b6:	f7f8 fe8b 	bl	800d2d0 <GUI_ALLOC_LockH>
 80145ba:	ab06      	add	r3, sp, #24
 80145bc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80145be:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7f8 fe92 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80145c8:	68a1      	ldr	r1, [r4, #8]
 80145ca:	4628      	mov	r0, r5
 80145cc:	f006 f99d 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 80145d0:	9004      	str	r0, [sp, #16]
 80145d2:	2800      	cmp	r0, #0
 80145d4:	f000 80ea 	beq.w	80147ac <HEADER_DrawSkinFlex+0x284>
 80145d8:	6886      	ldr	r6, [r0, #8]
 80145da:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80145de:	6807      	ldr	r7, [r0, #0]
 80145e0:	a804      	add	r0, sp, #16
 80145e2:	f7f8 fe83 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80145e6:	4630      	mov	r0, r6
 80145e8:	f006 f9be 	bl	801a968 <GUI_DRAW__GetXSize>
 80145ec:	4680      	mov	r8, r0
 80145ee:	4630      	mov	r0, r6
 80145f0:	f006 f9cc 	bl	801a98c <GUI_DRAW__GetYSize>
 80145f4:	f005 0303 	and.w	r3, r5, #3
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d006      	beq.n	801460a <HEADER_DrawSkinFlex+0xe2>
 80145fc:	2b02      	cmp	r3, #2
 80145fe:	d107      	bne.n	8014610 <HEADER_DrawSkinFlex+0xe8>
 8014600:	ebc8 0207 	rsb	r2, r8, r7
 8014604:	fb92 f2f3 	sdiv	r2, r2, r3
 8014608:	e003      	b.n	8014612 <HEADER_DrawSkinFlex+0xea>
 801460a:	ebc8 0207 	rsb	r2, r8, r7
 801460e:	e000      	b.n	8014612 <HEADER_DrawSkinFlex+0xea>
 8014610:	2200      	movs	r2, #0
 8014612:	f005 050c 	and.w	r5, r5, #12
 8014616:	6963      	ldr	r3, [r4, #20]
 8014618:	2d04      	cmp	r5, #4
 801461a:	d009      	beq.n	8014630 <HEADER_DrawSkinFlex+0x108>
 801461c:	2d0c      	cmp	r5, #12
 801461e:	d10c      	bne.n	801463a <HEADER_DrawSkinFlex+0x112>
 8014620:	69e1      	ldr	r1, [r4, #28]
 8014622:	1ac9      	subs	r1, r1, r3
 8014624:	3101      	adds	r1, #1
 8014626:	1a08      	subs	r0, r1, r0
 8014628:	2102      	movs	r1, #2
 801462a:	fb90 f0f1 	sdiv	r0, r0, r1
 801462e:	e005      	b.n	801463c <HEADER_DrawSkinFlex+0x114>
 8014630:	69e5      	ldr	r5, [r4, #28]
 8014632:	1aed      	subs	r5, r5, r3
 8014634:	3501      	adds	r5, #1
 8014636:	1a28      	subs	r0, r5, r0
 8014638:	e000      	b.n	801463c <HEADER_DrawSkinFlex+0x114>
 801463a:	2000      	movs	r0, #0
 801463c:	6921      	ldr	r1, [r4, #16]
 801463e:	4403      	add	r3, r0
 8014640:	4630      	mov	r0, r6
 8014642:	440a      	add	r2, r1
 8014644:	6821      	ldr	r1, [r4, #0]
 8014646:	f006 f976 	bl	801a936 <GUI_DRAW__Draw>
 801464a:	e0af      	b.n	80147ac <HEADER_DrawSkinFlex+0x284>
 801464c:	6800      	ldr	r0, [r0, #0]
 801464e:	f7f8 fe3f 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014652:	4603      	mov	r3, r0
 8014654:	a806      	add	r0, sp, #24
 8014656:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8014658:	f840 3d10 	str.w	r3, [r0, #-16]!
 801465c:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 8014660:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8014662:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 8014666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014668:	f8d3 a000 	ldr.w	sl, [r3]
 801466c:	f7f8 fe3e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014670:	68a1      	ldr	r1, [r4, #8]
 8014672:	4628      	mov	r0, r5
 8014674:	f006 f949 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 8014678:	9003      	str	r0, [sp, #12]
 801467a:	2800      	cmp	r0, #0
 801467c:	f000 8096 	beq.w	80147ac <HEADER_DrawSkinFlex+0x284>
 8014680:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8014684:	f100 050c 	add.w	r5, r0, #12
 8014688:	a803      	add	r0, sp, #12
 801468a:	f7f8 fe2f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	a904      	add	r1, sp, #16
 8014692:	4652      	mov	r2, sl
 8014694:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014698:	6963      	ldr	r3, [r4, #20]
 801469a:	4608      	mov	r0, r1
 801469c:	f8ad 3012 	strh.w	r3, [sp, #18]
 80146a0:	69a3      	ldr	r3, [r4, #24]
 80146a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80146a6:	69e3      	ldr	r3, [r4, #28]
 80146a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80146ac:	f7fa fc0e 	bl	800eecc <GUI__ReduceRect>
 80146b0:	68a3      	ldr	r3, [r4, #8]
 80146b2:	4599      	cmp	r9, r3
 80146b4:	d10e      	bne.n	80146d4 <HEADER_DrawSkinFlex+0x1ac>
 80146b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80146ba:	69e2      	ldr	r2, [r4, #28]
 80146bc:	1e59      	subs	r1, r3, #1
 80146be:	6963      	ldr	r3, [r4, #20]
 80146c0:	1ad3      	subs	r3, r2, r3
 80146c2:	1f1a      	subs	r2, r3, #4
 80146c4:	2303      	movs	r3, #3
 80146c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80146ca:	3b01      	subs	r3, #1
 80146cc:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 80146d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80146d4:	4640      	mov	r0, r8
 80146d6:	f7f9 f99f 	bl	800da18 <GUI_SetColor>
 80146da:	2002      	movs	r0, #2
 80146dc:	f7f9 fa02 	bl	800dae4 <GUI_SetTextMode>
 80146e0:	4638      	mov	r0, r7
 80146e2:	f7f9 f9b1 	bl	800da48 <GUI_SetFont>
 80146e6:	4632      	mov	r2, r6
 80146e8:	a904      	add	r1, sp, #16
 80146ea:	4628      	mov	r0, r5
 80146ec:	f7f9 fd9d 	bl	800e22a <GUI_DispStringInRect>
 80146f0:	e05c      	b.n	80147ac <HEADER_DrawSkinFlex+0x284>
 80146f2:	6800      	ldr	r0, [r0, #0]
 80146f4:	2503      	movs	r5, #3
 80146f6:	f7f8 fdeb 	bl	800d2d0 <GUI_ALLOC_LockH>
 80146fa:	ab06      	add	r3, sp, #24
 80146fc:	f8d0 8064 	ldr.w	r8, [r0, #100]	; 0x64
 8014700:	f843 0d08 	str.w	r0, [r3, #-8]!
 8014704:	4618      	mov	r0, r3
 8014706:	f7f8 fdf1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801470a:	6966      	ldr	r6, [r4, #20]
 801470c:	69e3      	ldr	r3, [r4, #28]
 801470e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8014712:	69a7      	ldr	r7, [r4, #24]
 8014714:	1b9b      	subs	r3, r3, r6
 8014716:	f1c8 0801 	rsb	r8, r8, #1
 801471a:	3f04      	subs	r7, #4
 801471c:	3b04      	subs	r3, #4
 801471e:	fb93 f6f5 	sdiv	r6, r3, r5
 8014722:	4b24      	ldr	r3, [pc, #144]	; (80147b4 <HEADER_DrawSkinFlex+0x28c>)
 8014724:	1e75      	subs	r5, r6, #1
 8014726:	6998      	ldr	r0, [r3, #24]
 8014728:	1b7f      	subs	r7, r7, r5
 801472a:	f7f9 f975 	bl	800da18 <GUI_SetColor>
 801472e:	69e3      	ldr	r3, [r4, #28]
 8014730:	106d      	asrs	r5, r5, #1
 8014732:	6964      	ldr	r4, [r4, #20]
 8014734:	fb08 f505 	mul.w	r5, r8, r5
 8014738:	1b1c      	subs	r4, r3, r4
 801473a:	ebc5 0464 	rsb	r4, r5, r4, asr #1
 801473e:	4635      	mov	r5, r6
 8014740:	3d01      	subs	r5, #1
 8014742:	d433      	bmi.n	80147ac <HEADER_DrawSkinFlex+0x284>
 8014744:	4620      	mov	r0, r4
 8014746:	19ea      	adds	r2, r5, r7
 8014748:	1b79      	subs	r1, r7, r5
 801474a:	4444      	add	r4, r8
 801474c:	f001 fc94 	bl	8016078 <GUI_DrawHLine>
 8014750:	e7f6      	b.n	8014740 <HEADER_DrawSkinFlex+0x218>
 8014752:	4e18      	ldr	r6, [pc, #96]	; (80147b4 <HEADER_DrawSkinFlex+0x28c>)
 8014754:	6943      	ldr	r3, [r0, #20]
 8014756:	69c5      	ldr	r5, [r0, #28]
 8014758:	6830      	ldr	r0, [r6, #0]
 801475a:	441d      	add	r5, r3
 801475c:	f7f9 f95c 	bl	800da18 <GUI_SetColor>
 8014760:	69a2      	ldr	r2, [r4, #24]
 8014762:	6921      	ldr	r1, [r4, #16]
 8014764:	106d      	asrs	r5, r5, #1
 8014766:	69e0      	ldr	r0, [r4, #28]
 8014768:	f001 fc86 	bl	8016078 <GUI_DrawHLine>
 801476c:	6870      	ldr	r0, [r6, #4]
 801476e:	f7f9 f953 	bl	800da18 <GUI_SetColor>
 8014772:	69e2      	ldr	r2, [r4, #28]
 8014774:	6961      	ldr	r1, [r4, #20]
 8014776:	3a01      	subs	r2, #1
 8014778:	6920      	ldr	r0, [r4, #16]
 801477a:	f001 fcd3 	bl	8016124 <GUI_DrawVLine>
 801477e:	68f3      	ldr	r3, [r6, #12]
 8014780:	6920      	ldr	r0, [r4, #16]
 8014782:	9301      	str	r3, [sp, #4]
 8014784:	68b3      	ldr	r3, [r6, #8]
 8014786:	3001      	adds	r0, #1
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	1e6b      	subs	r3, r5, #1
 801478c:	69a2      	ldr	r2, [r4, #24]
 801478e:	6961      	ldr	r1, [r4, #20]
 8014790:	f001 fbfe 	bl	8015f90 <GUI_DrawGradientV>
 8014794:	6972      	ldr	r2, [r6, #20]
 8014796:	69e3      	ldr	r3, [r4, #28]
 8014798:	6920      	ldr	r0, [r4, #16]
 801479a:	9201      	str	r2, [sp, #4]
 801479c:	3b01      	subs	r3, #1
 801479e:	6932      	ldr	r2, [r6, #16]
 80147a0:	9200      	str	r2, [sp, #0]
 80147a2:	69a2      	ldr	r2, [r4, #24]
 80147a4:	4629      	mov	r1, r5
 80147a6:	3001      	adds	r0, #1
 80147a8:	f001 fbf2 	bl	8015f90 <GUI_DrawGradientV>
 80147ac:	2000      	movs	r0, #0
 80147ae:	b006      	add	sp, #24
 80147b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147b4:	20000078 	.word	0x20000078

080147b8 <_GetNumItemsPerLine>:
 80147b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147ba:	4604      	mov	r4, r0
 80147bc:	a902      	add	r1, sp, #8
 80147be:	f7fe fb56 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 80147c2:	4620      	mov	r0, r4
 80147c4:	f7f8 fd84 	bl	800d2d0 <GUI_ALLOC_LockH>
 80147c8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80147cc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80147d0:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80147d2:	1a9b      	subs	r3, r3, r2
 80147d4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80147d8:	9001      	str	r0, [sp, #4]
 80147da:	a801      	add	r0, sp, #4
 80147dc:	3301      	adds	r3, #1
 80147de:	4423      	add	r3, r4
 80147e0:	4414      	add	r4, r2
 80147e2:	fb93 f4f4 	sdiv	r4, r3, r4
 80147e6:	f7f8 fd81 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80147ea:	4620      	mov	r0, r4
 80147ec:	b004      	add	sp, #16
 80147ee:	bd10      	pop	{r4, pc}

080147f0 <_GetRelRectFromIndex>:
 80147f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147f4:	b085      	sub	sp, #20
 80147f6:	4604      	mov	r4, r0
 80147f8:	460d      	mov	r5, r1
 80147fa:	4691      	mov	r9, r2
 80147fc:	a902      	add	r1, sp, #8
 80147fe:	f7fe fb36 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 8014802:	4620      	mov	r0, r4
 8014804:	f7ff ffd8 	bl	80147b8 <_GetNumItemsPerLine>
 8014808:	4680      	mov	r8, r0
 801480a:	4620      	mov	r0, r4
 801480c:	f7f8 fd60 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014810:	f1b8 0f00 	cmp.w	r8, #0
 8014814:	4606      	mov	r6, r0
 8014816:	a804      	add	r0, sp, #16
 8014818:	bf14      	ite	ne
 801481a:	46c6      	movne	lr, r8
 801481c:	f04f 0e01 	moveq.w	lr, #1
 8014820:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 8014824:	6f34      	ldr	r4, [r6, #112]	; 0x70
 8014826:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8014828:	443c      	add	r4, r7
 801482a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 801482c:	6f71      	ldr	r1, [r6, #116]	; 0x74
 801482e:	3f01      	subs	r7, #1
 8014830:	f840 6d0c 	str.w	r6, [r0, #-12]!
 8014834:	fb99 fefe 	sdiv	lr, r9, lr
 8014838:	fb0e 9818 	mls	r8, lr, r8, r9
 801483c:	ebc3 030e 	rsb	r3, r3, lr
 8014840:	fb14 2208 	smlabb	r2, r4, r8, r2
 8014844:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
 8014848:	6ef6      	ldr	r6, [r6, #108]	; 0x6c
 801484a:	4421      	add	r1, r4
 801484c:	b292      	uxth	r2, r2
 801484e:	3c01      	subs	r4, #1
 8014850:	fb11 6303 	smlabb	r3, r1, r3, r6
 8014854:	802a      	strh	r2, [r5, #0]
 8014856:	443a      	add	r2, r7
 8014858:	b29b      	uxth	r3, r3
 801485a:	80aa      	strh	r2, [r5, #4]
 801485c:	806b      	strh	r3, [r5, #2]
 801485e:	4423      	add	r3, r4
 8014860:	80eb      	strh	r3, [r5, #6]
 8014862:	f7f8 fd43 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014866:	b005      	add	sp, #20
 8014868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801486c <_GetIndexFromPos>:
 801486c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801486e:	4604      	mov	r4, r0
 8014870:	460d      	mov	r5, r1
 8014872:	4616      	mov	r6, r2
 8014874:	f7f8 fd2c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014878:	9001      	str	r0, [sp, #4]
 801487a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 801487e:	f006 f80c 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8014882:	4607      	mov	r7, r0
 8014884:	4620      	mov	r0, r4
 8014886:	f7ff ff97 	bl	80147b8 <_GetNumItemsPerLine>
 801488a:	9b01      	ldr	r3, [sp, #4]
 801488c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801488e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8014892:	1ab6      	subs	r6, r6, r2
 8014894:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014896:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8014898:	4422      	add	r2, r4
 801489a:	1a6d      	subs	r5, r5, r1
 801489c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80148a0:	fb96 f2f2 	sdiv	r2, r6, r2
 80148a4:	6f1e      	ldr	r6, [r3, #112]	; 0x70
 80148a6:	4431      	add	r1, r6
 80148a8:	fb95 f1f1 	sdiv	r1, r5, r1
 80148ac:	4288      	cmp	r0, r1
 80148ae:	da02      	bge.n	80148b6 <_GetIndexFromPos+0x4a>
 80148b0:	f04f 34ff 	mov.w	r4, #4294967295
 80148b4:	e007      	b.n	80148c6 <_GetIndexFromPos+0x5a>
 80148b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148b8:	441a      	add	r2, r3
 80148ba:	fb00 1402 	mla	r4, r0, r2, r1
 80148be:	42a7      	cmp	r7, r4
 80148c0:	bfb8      	it	lt
 80148c2:	f04f 34ff 	movlt.w	r4, #4294967295
 80148c6:	a801      	add	r0, sp, #4
 80148c8:	f7f8 fd10 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80148cc:	4620      	mov	r0, r4
 80148ce:	b003      	add	sp, #12
 80148d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148d2 <ICONVIEW_OwnerDraw>:
 80148d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148d6:	4604      	mov	r4, r0
 80148d8:	b08b      	sub	sp, #44	; 0x2c
 80148da:	6800      	ldr	r0, [r0, #0]
 80148dc:	f7f8 fcf8 	bl	800d2d0 <GUI_ALLOC_LockH>
 80148e0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80148e4:	9001      	str	r0, [sp, #4]
 80148e6:	9302      	str	r3, [sp, #8]
 80148e8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80148ec:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
 80148f0:	9303      	str	r3, [sp, #12]
 80148f2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80148f4:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
 80148f8:	9307      	str	r3, [sp, #28]
 80148fa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80148fc:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80148fe:	9308      	str	r3, [sp, #32]
 8014900:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8014902:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8014906:	f8d0 904c 	ldr.w	r9, [r0, #76]	; 0x4c
 801490a:	a801      	add	r0, sp, #4
 801490c:	9309      	str	r3, [sp, #36]	; 0x24
 801490e:	f7f8 fced 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014912:	6923      	ldr	r3, [r4, #16]
 8014914:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014918:	6963      	ldr	r3, [r4, #20]
 801491a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801491e:	69a3      	ldr	r3, [r4, #24]
 8014920:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014924:	69e3      	ldr	r3, [r4, #28]
 8014926:	f8ad 301a 	strh.w	r3, [sp, #26]
 801492a:	6863      	ldr	r3, [r4, #4]
 801492c:	2b12      	cmp	r3, #18
 801492e:	f000 809f 	beq.w	8014a70 <ICONVIEW_OwnerDraw+0x19e>
 8014932:	dc04      	bgt.n	801493e <ICONVIEW_OwnerDraw+0x6c>
 8014934:	2b05      	cmp	r3, #5
 8014936:	d022      	beq.n	801497e <ICONVIEW_OwnerDraw+0xac>
 8014938:	2b06      	cmp	r3, #6
 801493a:	d044      	beq.n	80149c6 <ICONVIEW_OwnerDraw+0xf4>
 801493c:	e0c4      	b.n	8014ac8 <ICONVIEW_OwnerDraw+0x1f6>
 801493e:	2b1b      	cmp	r3, #27
 8014940:	d006      	beq.n	8014950 <ICONVIEW_OwnerDraw+0x7e>
 8014942:	2b1e      	cmp	r3, #30
 8014944:	d006      	beq.n	8014954 <ICONVIEW_OwnerDraw+0x82>
 8014946:	2b1a      	cmp	r3, #26
 8014948:	f040 80be 	bne.w	8014ac8 <ICONVIEW_OwnerDraw+0x1f6>
 801494c:	9c02      	ldr	r4, [sp, #8]
 801494e:	e0bc      	b.n	8014aca <ICONVIEW_OwnerDraw+0x1f8>
 8014950:	9c03      	ldr	r4, [sp, #12]
 8014952:	e0ba      	b.n	8014aca <ICONVIEW_OwnerDraw+0x1f8>
 8014954:	6820      	ldr	r0, [r4, #0]
 8014956:	f005 ff70 	bl	801a83a <WM_GetHasTrans>
 801495a:	4604      	mov	r4, r0
 801495c:	2800      	cmp	r0, #0
 801495e:	f040 80b3 	bne.w	8014ac8 <ICONVIEW_OwnerDraw+0x1f6>
 8014962:	4640      	mov	r0, r8
 8014964:	f7f9 f84d 	bl	800da02 <GUI_SetBkColor>
 8014968:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801496c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8014970:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8014974:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8014978:	f7f9 f94a 	bl	800dc10 <GUI_ClearRect>
 801497c:	e0a5      	b.n	8014aca <ICONVIEW_OwnerDraw+0x1f8>
 801497e:	68a3      	ldr	r3, [r4, #8]
 8014980:	429f      	cmp	r7, r3
 8014982:	f040 80a1 	bne.w	8014ac8 <ICONVIEW_OwnerDraw+0x1f6>
 8014986:	0e2c      	lsrs	r4, r5, #24
 8014988:	2cff      	cmp	r4, #255	; 0xff
 801498a:	d00e      	beq.n	80149aa <ICONVIEW_OwnerDraw+0xd8>
 801498c:	f045 407f 	orr.w	r0, r5, #4278190080	; 0xff000000
 8014990:	f7f9 f842 	bl	800da18 <GUI_SetColor>
 8014994:	43e0      	mvns	r0, r4
 8014996:	b2c0      	uxtb	r0, r0
 8014998:	f003 fa54 	bl	8017e44 <GUI_SetAlpha>
 801499c:	a805      	add	r0, sp, #20
 801499e:	f001 fc13 	bl	80161c8 <GUI_FillRectEx>
 80149a2:	20ff      	movs	r0, #255	; 0xff
 80149a4:	f003 fa4e 	bl	8017e44 <GUI_SetAlpha>
 80149a8:	e08e      	b.n	8014ac8 <ICONVIEW_OwnerDraw+0x1f6>
 80149aa:	4628      	mov	r0, r5
 80149ac:	f7f9 f834 	bl	800da18 <GUI_SetColor>
 80149b0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80149b4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80149b8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80149bc:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80149c0:	f001 fbd8 	bl	8016174 <GUI_FillRect>
 80149c4:	e080      	b.n	8014ac8 <ICONVIEW_OwnerDraw+0x1f6>
 80149c6:	68a1      	ldr	r1, [r4, #8]
 80149c8:	4630      	mov	r0, r6
 80149ca:	f005 ff9e 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 80149ce:	6805      	ldr	r5, [r0, #0]
 80149d0:	9000      	str	r0, [sp, #0]
 80149d2:	2d00      	cmp	r5, #0
 80149d4:	d048      	beq.n	8014a68 <ICONVIEW_OwnerDraw+0x196>
 80149d6:	6906      	ldr	r6, [r0, #16]
 80149d8:	aa02      	add	r2, sp, #8
 80149da:	68c1      	ldr	r1, [r0, #12]
 80149dc:	ab03      	add	r3, sp, #12
 80149de:	6887      	ldr	r7, [r0, #8]
 80149e0:	4630      	mov	r0, r6
 80149e2:	47b8      	blx	r7
 80149e4:	6820      	ldr	r0, [r4, #0]
 80149e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80149ea:	9f03      	ldr	r7, [sp, #12]
 80149ec:	f7f8 fc70 	bl	800d2d0 <GUI_ALLOC_LockH>
 80149f0:	ab0a      	add	r3, sp, #40	; 0x28
 80149f2:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 80149f4:	f843 0d18 	str.w	r0, [r3, #-24]!
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7f8 fc77 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80149fe:	b2e3      	uxtb	r3, r4
 8014a00:	f003 0203 	and.w	r2, r3, #3
 8014a04:	f003 030c 	and.w	r3, r3, #12
 8014a08:	2a01      	cmp	r2, #1
 8014a0a:	d102      	bne.n	8014a12 <ICONVIEW_OwnerDraw+0x140>
 8014a0c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8014a10:	e011      	b.n	8014a36 <ICONVIEW_OwnerDraw+0x164>
 8014a12:	2a02      	cmp	r2, #2
 8014a14:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8014a18:	d103      	bne.n	8014a22 <ICONVIEW_OwnerDraw+0x150>
 8014a1a:	ebc8 0000 	rsb	r0, r8, r0
 8014a1e:	1c42      	adds	r2, r0, #1
 8014a20:	e009      	b.n	8014a36 <ICONVIEW_OwnerDraw+0x164>
 8014a22:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8014a26:	1a80      	subs	r0, r0, r2
 8014a28:	ebc8 0000 	rsb	r0, r8, r0
 8014a2c:	1c44      	adds	r4, r0, #1
 8014a2e:	2002      	movs	r0, #2
 8014a30:	fb94 f0f0 	sdiv	r0, r4, r0
 8014a34:	4402      	add	r2, r0
 8014a36:	2b08      	cmp	r3, #8
 8014a38:	d102      	bne.n	8014a40 <ICONVIEW_OwnerDraw+0x16e>
 8014a3a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014a3e:	e00f      	b.n	8014a60 <ICONVIEW_OwnerDraw+0x18e>
 8014a40:	2b04      	cmp	r3, #4
 8014a42:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8014a46:	d102      	bne.n	8014a4e <ICONVIEW_OwnerDraw+0x17c>
 8014a48:	1bc9      	subs	r1, r1, r7
 8014a4a:	1c4b      	adds	r3, r1, #1
 8014a4c:	e008      	b.n	8014a60 <ICONVIEW_OwnerDraw+0x18e>
 8014a4e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014a52:	1ac8      	subs	r0, r1, r3
 8014a54:	1bc1      	subs	r1, r0, r7
 8014a56:	1c48      	adds	r0, r1, #1
 8014a58:	2102      	movs	r1, #2
 8014a5a:	fb90 f1f1 	sdiv	r1, r0, r1
 8014a5e:	440b      	add	r3, r1
 8014a60:	9900      	ldr	r1, [sp, #0]
 8014a62:	4630      	mov	r0, r6
 8014a64:	68c9      	ldr	r1, [r1, #12]
 8014a66:	47a8      	blx	r5
 8014a68:	4668      	mov	r0, sp
 8014a6a:	f7f8 fc3f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014a6e:	e02b      	b.n	8014ac8 <ICONVIEW_OwnerDraw+0x1f6>
 8014a70:	2002      	movs	r0, #2
 8014a72:	f7f9 f837 	bl	800dae4 <GUI_SetTextMode>
 8014a76:	4648      	mov	r0, r9
 8014a78:	f7f8 ffe6 	bl	800da48 <GUI_SetFont>
 8014a7c:	6820      	ldr	r0, [r4, #0]
 8014a7e:	f7ff f85d 	bl	8013b3c <WM__IsEnabled>
 8014a82:	b120      	cbz	r0, 8014a8e <ICONVIEW_OwnerDraw+0x1bc>
 8014a84:	68a3      	ldr	r3, [r4, #8]
 8014a86:	1bda      	subs	r2, r3, r7
 8014a88:	4253      	negs	r3, r2
 8014a8a:	4153      	adcs	r3, r2
 8014a8c:	e000      	b.n	8014a90 <ICONVIEW_OwnerDraw+0x1be>
 8014a8e:	2302      	movs	r3, #2
 8014a90:	aa0a      	add	r2, sp, #40	; 0x28
 8014a92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a96:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8014a9a:	f7f8 ffbd 	bl	800da18 <GUI_SetColor>
 8014a9e:	68a1      	ldr	r1, [r4, #8]
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	f005 ff32 	bl	801a90a <GUI_ARRAY_GetpItemLocked>
 8014aa6:	6843      	ldr	r3, [r0, #4]
 8014aa8:	9000      	str	r0, [sp, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d0dc      	beq.n	8014a68 <ICONVIEW_OwnerDraw+0x196>
 8014aae:	6820      	ldr	r0, [r4, #0]
 8014ab0:	f7f8 fc0e 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014ab4:	9a00      	ldr	r2, [sp, #0]
 8014ab6:	9001      	str	r0, [sp, #4]
 8014ab8:	a905      	add	r1, sp, #20
 8014aba:	6853      	ldr	r3, [r2, #4]
 8014abc:	321c      	adds	r2, #28
 8014abe:	4798      	blx	r3
 8014ac0:	a801      	add	r0, sp, #4
 8014ac2:	f7f8 fc13 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014ac6:	e7cf      	b.n	8014a68 <ICONVIEW_OwnerDraw+0x196>
 8014ac8:	2400      	movs	r4, #0
 8014aca:	4620      	mov	r0, r4
 8014acc:	b00b      	add	sp, #44	; 0x2c
 8014ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014ad2 <_SetSel>:
 8014ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ad4:	b087      	sub	sp, #28
 8014ad6:	460e      	mov	r6, r1
 8014ad8:	4604      	mov	r4, r0
 8014ada:	f7f8 fbf9 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014ade:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8014ae2:	ad06      	add	r5, sp, #24
 8014ae4:	42b2      	cmp	r2, r6
 8014ae6:	f845 0d14 	str.w	r0, [r5, #-20]!
 8014aea:	d04e      	beq.n	8014b8a <_SetSel+0xb8>
 8014aec:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8014af0:	a902      	add	r1, sp, #8
 8014af2:	4620      	mov	r0, r4
 8014af4:	f7ff fe7c 	bl	80147f0 <_GetRelRectFromIndex>
 8014af8:	a902      	add	r1, sp, #8
 8014afa:	4620      	mov	r0, r4
 8014afc:	f7fd faa9 	bl	8012052 <WM_InvalidateRect>
 8014b00:	9b01      	ldr	r3, [sp, #4]
 8014b02:	a902      	add	r1, sp, #8
 8014b04:	4620      	mov	r0, r4
 8014b06:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014b0a:	f7ff fe71 	bl	80147f0 <_GetRelRectFromIndex>
 8014b0e:	a902      	add	r1, sp, #8
 8014b10:	4620      	mov	r0, r4
 8014b12:	f7fd fa9e 	bl	8012052 <WM_InvalidateRect>
 8014b16:	9e01      	ldr	r6, [sp, #4]
 8014b18:	4620      	mov	r0, r4
 8014b1a:	f7ff fe4d 	bl	80147b8 <_GetNumItemsPerLine>
 8014b1e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8014b22:	2800      	cmp	r0, #0
 8014b24:	bf08      	it	eq
 8014b26:	2001      	moveq	r0, #1
 8014b28:	a904      	add	r1, sp, #16
 8014b2a:	fb93 f7f0 	sdiv	r7, r3, r0
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7fe f99d 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 8014b34:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014b38:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8014b3c:	6f71      	ldr	r1, [r6, #116]	; 0x74
 8014b3e:	1ad2      	subs	r2, r2, r3
 8014b40:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8014b44:	3201      	adds	r2, #1
 8014b46:	440b      	add	r3, r1
 8014b48:	440a      	add	r2, r1
 8014b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b4e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8014b50:	18d1      	adds	r1, r2, r3
 8014b52:	428f      	cmp	r7, r1
 8014b54:	db03      	blt.n	8014b5e <_SetSel+0x8c>
 8014b56:	1afb      	subs	r3, r7, r3
 8014b58:	3301      	adds	r3, #1
 8014b5a:	63b3      	str	r3, [r6, #56]	; 0x38
 8014b5c:	e002      	b.n	8014b64 <_SetSel+0x92>
 8014b5e:	4297      	cmp	r7, r2
 8014b60:	da0b      	bge.n	8014b7a <_SetSel+0xa8>
 8014b62:	63b7      	str	r7, [r6, #56]	; 0x38
 8014b64:	21fe      	movs	r1, #254	; 0xfe
 8014b66:	4620      	mov	r0, r4
 8014b68:	f7fe f89f 	bl	8012caa <WM_GetDialogItem>
 8014b6c:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8014b70:	f7fe fb30 	bl	80131d4 <WM_SetScrollState>
 8014b74:	4620      	mov	r0, r4
 8014b76:	f7fd faad 	bl	80120d4 <WM_InvalidateWindow>
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f7f8 fbb6 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014b80:	2104      	movs	r1, #4
 8014b82:	4620      	mov	r0, r4
 8014b84:	f7fe fac8 	bl	8013118 <WM_NotifyParent>
 8014b88:	e002      	b.n	8014b90 <_SetSel+0xbe>
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	f7f8 fbae 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014b90:	b007      	add	sp, #28
 8014b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b94 <ICONVIEW__ManageAutoScroll>:
 8014b94:	4b40      	ldr	r3, [pc, #256]	; (8014c98 <ICONVIEW__ManageAutoScroll+0x104>)
 8014b96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9a:	f8d3 9000 	ldr.w	r9, [r3]
 8014b9e:	b087      	sub	sp, #28
 8014ba0:	4607      	mov	r7, r0
 8014ba2:	4698      	mov	r8, r3
 8014ba4:	f1b9 0f00 	cmp.w	r9, #0
 8014ba8:	d170      	bne.n	8014c8c <ICONVIEW__ManageAutoScroll+0xf8>
 8014baa:	2301      	movs	r3, #1
 8014bac:	ad03      	add	r5, sp, #12
 8014bae:	f10d 0a18 	add.w	sl, sp, #24
 8014bb2:	f8c8 3000 	str.w	r3, [r8]
 8014bb6:	f7f8 fb8b 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014bba:	4629      	mov	r1, r5
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	9000      	str	r0, [sp, #0]
 8014bc0:	4638      	mov	r0, r7
 8014bc2:	f7fe f954 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 8014bc6:	4638      	mov	r0, r7
 8014bc8:	f7ff fdf6 	bl	80147b8 <_GetNumItemsPerLine>
 8014bcc:	4604      	mov	r4, r0
 8014bce:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8014bd2:	f005 fe62 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8014bd6:	2c00      	cmp	r4, #0
 8014bd8:	4420      	add	r0, r4
 8014bda:	4629      	mov	r1, r5
 8014bdc:	bf08      	it	eq
 8014bde:	2401      	moveq	r4, #1
 8014be0:	1e46      	subs	r6, r0, #1
 8014be2:	4638      	mov	r0, r7
 8014be4:	fb96 f6f4 	sdiv	r6, r6, r4
 8014be8:	9c00      	ldr	r4, [sp, #0]
 8014bea:	f7fe f940 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 8014bee:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8014bf2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014bf6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014bf8:	1a9b      	subs	r3, r3, r2
 8014bfa:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8014bfe:	f85a ed18 	ldr.w	lr, [sl, #-24]!
 8014c02:	3301      	adds	r3, #1
 8014c04:	188c      	adds	r4, r1, r2
 8014c06:	f8be b094 	ldrh.w	fp, [lr, #148]	; 0x94
 8014c0a:	440b      	add	r3, r1
 8014c0c:	fb93 f4f4 	sdiv	r4, r3, r4
 8014c10:	f10e 0334 	add.w	r3, lr, #52	; 0x34
 8014c14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8014c1c:	4650      	mov	r0, sl
 8014c1e:	f7f8 fb65 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014c22:	a901      	add	r1, sp, #4
 8014c24:	4638      	mov	r0, r7
 8014c26:	f7fe f922 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 8014c2a:	42b4      	cmp	r4, r6
 8014c2c:	bfba      	itte	lt
 8014c2e:	9603      	strlt	r6, [sp, #12]
 8014c30:	9405      	strlt	r4, [sp, #20]
 8014c32:	f8cd 9010 	strge.w	r9, [sp, #16]
 8014c36:	f01b 0f02 	tst.w	fp, #2
 8014c3a:	d007      	beq.n	8014c4c <ICONVIEW__ManageAutoScroll+0xb8>
 8014c3c:	42b4      	cmp	r4, r6
 8014c3e:	4638      	mov	r0, r7
 8014c40:	bfac      	ite	ge
 8014c42:	2100      	movge	r1, #0
 8014c44:	2101      	movlt	r1, #1
 8014c46:	f005 fdea 	bl	801a81e <WM_SetScrollbarV>
 8014c4a:	e009      	b.n	8014c60 <ICONVIEW__ManageAutoScroll+0xcc>
 8014c4c:	4638      	mov	r0, r7
 8014c4e:	f7fe f8ce 	bl	8012dee <WM_GetScrollbarV>
 8014c52:	b128      	cbz	r0, 8014c60 <ICONVIEW__ManageAutoScroll+0xcc>
 8014c54:	42b4      	cmp	r4, r6
 8014c56:	db05      	blt.n	8014c64 <ICONVIEW__ManageAutoScroll+0xd0>
 8014c58:	2301      	movs	r3, #1
 8014c5a:	9303      	str	r3, [sp, #12]
 8014c5c:	9305      	str	r3, [sp, #20]
 8014c5e:	e001      	b.n	8014c64 <ICONVIEW__ManageAutoScroll+0xd0>
 8014c60:	42b4      	cmp	r4, r6
 8014c62:	da06      	bge.n	8014c72 <ICONVIEW__ManageAutoScroll+0xde>
 8014c64:	21fe      	movs	r1, #254	; 0xfe
 8014c66:	4638      	mov	r0, r7
 8014c68:	f7fe f81f 	bl	8012caa <WM_GetDialogItem>
 8014c6c:	4629      	mov	r1, r5
 8014c6e:	f7fe fab1 	bl	80131d4 <WM_SetScrollState>
 8014c72:	4638      	mov	r0, r7
 8014c74:	f7f8 fb2c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014c78:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8014c7c:	9000      	str	r0, [sp, #0]
 8014c7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014c86:	4650      	mov	r0, sl
 8014c88:	f7f8 fb30 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	f8c8 3000 	str.w	r3, [r8]
 8014c92:	b007      	add	sp, #28
 8014c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c98:	200004b0 	.word	0x200004b0

08014c9c <ICONVIEW_Callback>:
 8014c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ca0:	6844      	ldr	r4, [r0, #4]
 8014ca2:	b090      	sub	sp, #64	; 0x40
 8014ca4:	4680      	mov	r8, r0
 8014ca6:	4601      	mov	r1, r0
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f000 faba 	bl	8015222 <WIDGET_HandleActive>
 8014cae:	2800      	cmp	r0, #0
 8014cb0:	f000 81a2 	beq.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8014cb8:	2b0f      	cmp	r3, #15
 8014cba:	d01f      	beq.n	8014cfc <ICONVIEW_Callback+0x60>
 8014cbc:	dc05      	bgt.n	8014cca <ICONVIEW_Callback+0x2e>
 8014cbe:	2b0b      	cmp	r3, #11
 8014cc0:	d00e      	beq.n	8014ce0 <ICONVIEW_Callback+0x44>
 8014cc2:	2b0e      	cmp	r3, #14
 8014cc4:	f000 80e0 	beq.w	8014e88 <ICONVIEW_Callback+0x1ec>
 8014cc8:	e196      	b.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014cca:	2b26      	cmp	r3, #38	; 0x26
 8014ccc:	f000 8144 	beq.w	8014f58 <ICONVIEW_Callback+0x2bc>
 8014cd0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014cd4:	f000 809f 	beq.w	8014e16 <ICONVIEW_Callback+0x17a>
 8014cd8:	2b11      	cmp	r3, #17
 8014cda:	f040 818d 	bne.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014cde:	e0a1      	b.n	8014e24 <ICONVIEW_Callback+0x188>
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	ac10      	add	r4, sp, #64	; 0x40
 8014ce4:	f7f8 faf4 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014ce8:	f844 0d24 	str.w	r0, [r4, #-36]!
 8014cec:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8014cf0:	f005 fde2 	bl	801a8b8 <GUI_ARRAY_Delete>
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	f7f8 faf9 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014cfa:	e17d      	b.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014cfc:	2224      	movs	r2, #36	; 0x24
 8014cfe:	2100      	movs	r1, #0
 8014d00:	a807      	add	r0, sp, #28
 8014d02:	f006 fdc8 	bl	801b896 <memset>
 8014d06:	4620      	mov	r0, r4
 8014d08:	f7f8 fae2 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	a810      	add	r0, sp, #64	; 0x40
 8014d10:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8014d14:	f840 3d40 	str.w	r3, [r0, #-64]!
 8014d18:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8014d1c:	f9b3 9000 	ldrsh.w	r9, [r3]
 8014d20:	f9b3 a002 	ldrsh.w	sl, [r3, #2]
 8014d24:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8014d26:	f7f8 fae1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014d2a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8014d2e:	ab05      	add	r3, sp, #20
 8014d30:	6810      	ldr	r0, [r2, #0]
 8014d32:	6851      	ldr	r1, [r2, #4]
 8014d34:	f1ca 0200 	rsb	r2, sl, #0
 8014d38:	c303      	stmia	r3!, {r0, r1}
 8014d3a:	f1c9 0100 	rsb	r1, r9, #0
 8014d3e:	a805      	add	r0, sp, #20
 8014d40:	f7f8 fd77 	bl	800d832 <GUI_MoveRect>
 8014d44:	a901      	add	r1, sp, #4
 8014d46:	4620      	mov	r0, r4
 8014d48:	f7fe f891 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 8014d4c:	a901      	add	r1, sp, #4
 8014d4e:	a805      	add	r0, sp, #20
 8014d50:	f7fa f845 	bl	800edde <GUI__IntersectRect>
 8014d54:	f04f 33ff 	mov.w	r3, #4294967295
 8014d58:	9407      	str	r4, [sp, #28]
 8014d5a:	a807      	add	r0, sp, #28
 8014d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d5e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d64:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014d68:	930c      	str	r3, [sp, #48]	; 0x30
 8014d6a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014d6e:	930d      	str	r3, [sp, #52]	; 0x34
 8014d70:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014d74:	930e      	str	r3, [sp, #56]	; 0x38
 8014d76:	2300      	movs	r3, #0
 8014d78:	930a      	str	r3, [sp, #40]	; 0x28
 8014d7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d7c:	9308      	str	r3, [sp, #32]
 8014d7e:	47b0      	blx	r6
 8014d80:	231e      	movs	r3, #30
 8014d82:	a807      	add	r0, sp, #28
 8014d84:	9308      	str	r3, [sp, #32]
 8014d86:	47b0      	blx	r6
 8014d88:	4638      	mov	r0, r7
 8014d8a:	f005 fd86 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8014d8e:	4607      	mov	r7, r0
 8014d90:	2800      	cmp	r0, #0
 8014d92:	f000 8131 	beq.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014d96:	4620      	mov	r0, r4
 8014d98:	f04f 0805 	mov.w	r8, #5
 8014d9c:	f7ff fd0c 	bl	80147b8 <_GetNumItemsPerLine>
 8014da0:	f04f 0906 	mov.w	r9, #6
 8014da4:	4345      	muls	r5, r0
 8014da6:	2d00      	cmp	r5, #0
 8014da8:	f2c0 8126 	blt.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014dac:	42af      	cmp	r7, r5
 8014dae:	f340 8123 	ble.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014db2:	a903      	add	r1, sp, #12
 8014db4:	462a      	mov	r2, r5
 8014db6:	4620      	mov	r0, r4
 8014db8:	f7ff fd1a 	bl	80147f0 <_GetRelRectFromIndex>
 8014dbc:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8014dc0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014dc4:	428b      	cmp	r3, r1
 8014dc6:	f2c0 8117 	blt.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014dca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014dce:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	dc1d      	bgt.n	8014e12 <ICONVIEW_Callback+0x176>
 8014dd6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014dda:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8014dde:	4290      	cmp	r0, r2
 8014de0:	dc17      	bgt.n	8014e12 <ICONVIEW_Callback+0x176>
 8014de2:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8014de6:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8014dea:	4586      	cmp	lr, r0
 8014dec:	db11      	blt.n	8014e12 <ICONVIEW_Callback+0x176>
 8014dee:	930e      	str	r3, [sp, #56]	; 0x38
 8014df0:	900b      	str	r0, [sp, #44]	; 0x2c
 8014df2:	a807      	add	r0, sp, #28
 8014df4:	910c      	str	r1, [sp, #48]	; 0x30
 8014df6:	920d      	str	r2, [sp, #52]	; 0x34
 8014df8:	9407      	str	r4, [sp, #28]
 8014dfa:	9509      	str	r5, [sp, #36]	; 0x24
 8014dfc:	f8cd 8020 	str.w	r8, [sp, #32]
 8014e00:	47b0      	blx	r6
 8014e02:	f8cd 9020 	str.w	r9, [sp, #32]
 8014e06:	a807      	add	r0, sp, #28
 8014e08:	47b0      	blx	r6
 8014e0a:	2312      	movs	r3, #18
 8014e0c:	a807      	add	r0, sp, #28
 8014e0e:	9308      	str	r3, [sp, #32]
 8014e10:	47b0      	blx	r6
 8014e12:	3501      	adds	r5, #1
 8014e14:	e7c7      	b.n	8014da6 <ICONVIEW_Callback+0x10a>
 8014e16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f040 80ec 	bne.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014e20:	2103      	movs	r1, #3
 8014e22:	e0cd      	b.n	8014fc0 <ICONVIEW_Callback+0x324>
 8014e24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014e28:	891a      	ldrh	r2, [r3, #8]
 8014e2a:	2a01      	cmp	r2, #1
 8014e2c:	d10b      	bne.n	8014e46 <ICONVIEW_Callback+0x1aa>
 8014e2e:	4620      	mov	r0, r4
 8014e30:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014e34:	f7ff fd1a 	bl	801486c <_GetIndexFromPos>
 8014e38:	1e01      	subs	r1, r0, #0
 8014e3a:	db02      	blt.n	8014e42 <ICONVIEW_Callback+0x1a6>
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	f7ff fe48 	bl	8014ad2 <_SetSel>
 8014e42:	2101      	movs	r1, #1
 8014e44:	e0bc      	b.n	8014fc0 <ICONVIEW_Callback+0x324>
 8014e46:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8014e4a:	f040 80d5 	bne.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014e4e:	4620      	mov	r0, r4
 8014e50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014e54:	f7ff fd0a 	bl	801486c <_GetIndexFromPos>
 8014e58:	4605      	mov	r5, r0
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f7f8 fa38 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014e60:	9007      	str	r0, [sp, #28]
 8014e62:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8014e66:	f005 fd18 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8014e6a:	ab10      	add	r3, sp, #64	; 0x40
 8014e6c:	4285      	cmp	r5, r0
 8014e6e:	bfb4      	ite	lt
 8014e70:	4628      	movlt	r0, r5
 8014e72:	f04f 30ff 	movge.w	r0, #4294967295
 8014e76:	f853 2d24 	ldr.w	r2, [r3, #-36]!
 8014e7a:	f8c2 009c 	str.w	r0, [r2, #156]	; 0x9c
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7f8 fa34 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014e84:	2102      	movs	r1, #2
 8014e86:	e09b      	b.n	8014fc0 <ICONVIEW_Callback+0x324>
 8014e88:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8014e8c:	686b      	ldr	r3, [r5, #4]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	f000 80b2 	beq.w	8014ff8 <ICONVIEW_Callback+0x35c>
 8014e94:	4620      	mov	r0, r4
 8014e96:	f7f8 fa1b 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014e9a:	a907      	add	r1, sp, #28
 8014e9c:	9005      	str	r0, [sp, #20]
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f7fd ffe5 	bl	8012e6e <WM_GetInsideRectExScrollbar>
 8014ea4:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8014ea8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014eac:	9a05      	ldr	r2, [sp, #20]
 8014eae:	1a5b      	subs	r3, r3, r1
 8014eb0:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8014eb2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8014ebc:	443b      	add	r3, r7
 8014ebe:	440f      	add	r7, r1
 8014ec0:	fb93 f7f7 	sdiv	r7, r3, r7
 8014ec4:	f005 fce9 	bl	801a89a <GUI_ARRAY_GetNumItems>
 8014ec8:	4681      	mov	r9, r0
 8014eca:	a810      	add	r0, sp, #64	; 0x40
 8014ecc:	682e      	ldr	r6, [r5, #0]
 8014ece:	f850 3d2c 	ldr.w	r3, [r0, #-44]!
 8014ed2:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8014ed6:	f7f8 fa09 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014eda:	f1a6 0310 	sub.w	r3, r6, #16
 8014ede:	2d00      	cmp	r5, #0
 8014ee0:	db72      	blt.n	8014fc8 <ICONVIEW_Callback+0x32c>
 8014ee2:	2b08      	cmp	r3, #8
 8014ee4:	d828      	bhi.n	8014f38 <ICONVIEW_Callback+0x29c>
 8014ee6:	e8df f003 	tbb	[pc, r3]
 8014eea:	1b0e      	.short	0x1b0e
 8014eec:	27271305 	.word	0x27271305
 8014ef0:	2e27      	.short	0x2e27
 8014ef2:	23          	.byte	0x23
 8014ef3:	00          	.byte	0x00
 8014ef4:	462e      	mov	r6, r5
 8014ef6:	e000      	b.n	8014efa <ICONVIEW_Callback+0x25e>
 8014ef8:	2600      	movs	r6, #0
 8014efa:	f109 39ff 	add.w	r9, r9, #4294967295
 8014efe:	45b1      	cmp	r9, r6
 8014f00:	dd23      	ble.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f02:	1c75      	adds	r5, r6, #1
 8014f04:	e021      	b.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f06:	2d00      	cmp	r5, #0
 8014f08:	d076      	beq.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014f0a:	462e      	mov	r6, r5
 8014f0c:	3d01      	subs	r5, #1
 8014f0e:	e01c      	b.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f10:	462e      	mov	r6, r5
 8014f12:	e000      	b.n	8014f16 <ICONVIEW_Callback+0x27a>
 8014f14:	2600      	movs	r6, #0
 8014f16:	4437      	add	r7, r6
 8014f18:	45b9      	cmp	r9, r7
 8014f1a:	bfc8      	it	gt
 8014f1c:	463d      	movgt	r5, r7
 8014f1e:	e014      	b.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f20:	462e      	mov	r6, r5
 8014f22:	e000      	b.n	8014f26 <ICONVIEW_Callback+0x28a>
 8014f24:	2600      	movs	r6, #0
 8014f26:	42b7      	cmp	r7, r6
 8014f28:	dc0f      	bgt.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f2a:	1bf5      	subs	r5, r6, r7
 8014f2c:	e00d      	b.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f2e:	2500      	movs	r5, #0
 8014f30:	462e      	mov	r6, r5
 8014f32:	f109 35ff 	add.w	r5, r9, #4294967295
 8014f36:	e008      	b.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f38:	462e      	mov	r6, r5
 8014f3a:	e000      	b.n	8014f3e <ICONVIEW_Callback+0x2a2>
 8014f3c:	2600      	movs	r6, #0
 8014f3e:	4640      	mov	r0, r8
 8014f40:	f7fd fd30 	bl	80129a4 <WM_DefaultProc>
 8014f44:	e001      	b.n	8014f4a <ICONVIEW_Callback+0x2ae>
 8014f46:	462e      	mov	r6, r5
 8014f48:	2500      	movs	r5, #0
 8014f4a:	42b5      	cmp	r5, r6
 8014f4c:	d054      	beq.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014f4e:	4629      	mov	r1, r5
 8014f50:	4620      	mov	r0, r4
 8014f52:	f7ff fdbe 	bl	8014ad2 <_SetSel>
 8014f56:	e04f      	b.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014f58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f5c:	2b05      	cmp	r3, #5
 8014f5e:	d005      	beq.n	8014f6c <ICONVIEW_Callback+0x2d0>
 8014f60:	2b06      	cmp	r3, #6
 8014f62:	d149      	bne.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014f64:	4620      	mov	r0, r4
 8014f66:	f7ff fe15 	bl	8014b94 <ICONVIEW__ManageAutoScroll>
 8014f6a:	e045      	b.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	f7f8 f9af 	bl	800d2d0 <GUI_ALLOC_LockH>
 8014f72:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014f76:	9005      	str	r0, [sp, #20]
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f7fd ff38 	bl	8012dee <WM_GetScrollbarV>
 8014f7e:	4285      	cmp	r5, r0
 8014f80:	d108      	bne.n	8014f94 <ICONVIEW_Callback+0x2f8>
 8014f82:	a907      	add	r1, sp, #28
 8014f84:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014f88:	f7fd ff54 	bl	8012e34 <WM_GetScrollState>
 8014f8c:	9a08      	ldr	r2, [sp, #32]
 8014f8e:	9b05      	ldr	r3, [sp, #20]
 8014f90:	639a      	str	r2, [r3, #56]	; 0x38
 8014f92:	e00e      	b.n	8014fb2 <ICONVIEW_Callback+0x316>
 8014f94:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f7fd ff1a 	bl	8012dd2 <WM_GetScrollbarH>
 8014f9e:	4285      	cmp	r5, r0
 8014fa0:	d107      	bne.n	8014fb2 <ICONVIEW_Callback+0x316>
 8014fa2:	a907      	add	r1, sp, #28
 8014fa4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014fa8:	f7fd ff44 	bl	8012e34 <WM_GetScrollState>
 8014fac:	9a08      	ldr	r2, [sp, #32]
 8014fae:	9b05      	ldr	r3, [sp, #20]
 8014fb0:	645a      	str	r2, [r3, #68]	; 0x44
 8014fb2:	a805      	add	r0, sp, #20
 8014fb4:	f7f8 f99a 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f7fd f88b 	bl	80120d4 <WM_InvalidateWindow>
 8014fbe:	210a      	movs	r1, #10
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	f7fe f8a9 	bl	8013118 <WM_NotifyParent>
 8014fc6:	e017      	b.n	8014ff8 <ICONVIEW_Callback+0x35c>
 8014fc8:	2b08      	cmp	r3, #8
 8014fca:	d8b7      	bhi.n	8014f3c <ICONVIEW_Callback+0x2a0>
 8014fcc:	a201      	add	r2, pc, #4	; (adr r2, 8014fd4 <ICONVIEW_Callback+0x338>)
 8014fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fd2:	bf00      	nop
 8014fd4:	08014f4f 	.word	0x08014f4f
 8014fd8:	08014f25 	.word	0x08014f25
 8014fdc:	08014ef9 	.word	0x08014ef9
 8014fe0:	08014f15 	.word	0x08014f15
 8014fe4:	08014f3d 	.word	0x08014f3d
 8014fe8:	08014f3d 	.word	0x08014f3d
 8014fec:	08014f3d 	.word	0x08014f3d
 8014ff0:	08014ff9 	.word	0x08014ff9
 8014ff4:	08014f2f 	.word	0x08014f2f
 8014ff8:	b010      	add	sp, #64	; 0x40
 8014ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ffe:	bf00      	nop

08015000 <ICONVIEW_CreateUser>:
 8015000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015004:	b086      	sub	sp, #24
 8015006:	4617      	mov	r7, r2
 8015008:	4698      	mov	r8, r3
 801500a:	4605      	mov	r5, r0
 801500c:	460e      	mov	r6, r1
 801500e:	f7f9 faaf 	bl	800e570 <GUI_Lock>
 8015012:	4b27      	ldr	r3, [pc, #156]	; (80150b0 <ICONVIEW_CreateUser+0xb0>)
 8015014:	463a      	mov	r2, r7
 8015016:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015018:	4631      	mov	r1, r6
 801501a:	9302      	str	r3, [sp, #8]
 801501c:	4628      	mov	r0, r5
 801501e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015020:	3474      	adds	r4, #116	; 0x74
 8015022:	9301      	str	r3, [sp, #4]
 8015024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015026:	9403      	str	r4, [sp, #12]
 8015028:	9300      	str	r3, [sp, #0]
 801502a:	4643      	mov	r3, r8
 801502c:	f7fd f884 	bl	8012138 <WM_CreateWindowAsChild>
 8015030:	4607      	mov	r7, r0
 8015032:	2800      	cmp	r0, #0
 8015034:	d036      	beq.n	80150a4 <ICONVIEW_CreateUser+0xa4>
 8015036:	f005 fc7b 	bl	801a930 <GUI_ARRAY_Create>
 801503a:	4604      	mov	r4, r0
 801503c:	4638      	mov	r0, r7
 801503e:	4d1d      	ldr	r5, [pc, #116]	; (80150b4 <ICONVIEW_CreateUser+0xb4>)
 8015040:	f7f8 f946 	bl	800d2d0 <GUI_ALLOC_LockH>
 8015044:	2210      	movs	r2, #16
 8015046:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 801504a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801504c:	9005      	str	r0, [sp, #20]
 801504e:	f000 f895 	bl	801517c <WIDGET__Init>
 8015052:	f10d 0e18 	add.w	lr, sp, #24
 8015056:	4b18      	ldr	r3, [pc, #96]	; (80150b8 <ICONVIEW_CreateUser+0xb8>)
 8015058:	f85e 6d04 	ldr.w	r6, [lr, #-4]!
 801505c:	62f3      	str	r3, [r6, #44]	; 0x2c
 801505e:	f04f 33ff 	mov.w	r3, #4294967295
 8015062:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8015066:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 801506a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801506c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801506e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015076:	e895 0003 	ldmia.w	r5, {r0, r1}
 801507a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801507c:	e884 0003 	stmia.w	r4, {r0, r1}
 8015080:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8015084:	4670      	mov	r0, lr
 8015086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015088:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 801508c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801508e:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
 8015092:	4b0a      	ldr	r3, [pc, #40]	; (80150bc <ICONVIEW_CreateUser+0xbc>)
 8015094:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 8015098:	f7f8 f928 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801509c:	2100      	movs	r1, #0
 801509e:	4638      	mov	r0, r7
 80150a0:	f7ff fd17 	bl	8014ad2 <_SetSel>
 80150a4:	f7f9 fa5a 	bl	800e55c <GUI_Unlock>
 80150a8:	4638      	mov	r0, r7
 80150aa:	b006      	add	sp, #24
 80150ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150b0:	08014c9d 	.word	0x08014c9d
 80150b4:	20000094 	.word	0x20000094
 80150b8:	0801c2c4 	.word	0x0801c2c4
 80150bc:	080148d3 	.word	0x080148d3

080150c0 <ICONVIEW_CreateIndirect>:
 80150c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150c2:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 80150c6:	4604      	mov	r4, r0
 80150c8:	6945      	ldr	r5, [r0, #20]
 80150ca:	b089      	sub	sp, #36	; 0x24
 80150cc:	441e      	add	r6, r3
 80150ce:	69a3      	ldr	r3, [r4, #24]
 80150d0:	f9b0 e010 	ldrsh.w	lr, [r0, #16]
 80150d4:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
 80150d8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80150dc:	9306      	str	r3, [sp, #24]
 80150de:	0c2b      	lsrs	r3, r5, #16
 80150e0:	b2ad      	uxth	r5, r5
 80150e2:	4410      	add	r0, r2
 80150e4:	9305      	str	r3, [sp, #20]
 80150e6:	463a      	mov	r2, r7
 80150e8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80150ec:	9504      	str	r5, [sp, #16]
 80150ee:	9303      	str	r3, [sp, #12]
 80150f0:	2300      	movs	r3, #0
 80150f2:	9302      	str	r3, [sp, #8]
 80150f4:	8a63      	ldrh	r3, [r4, #18]
 80150f6:	e88d 000a 	stmia.w	sp, {r1, r3}
 80150fa:	4673      	mov	r3, lr
 80150fc:	4631      	mov	r1, r6
 80150fe:	f7ff ff7f 	bl	8015000 <ICONVIEW_CreateUser>
 8015102:	b009      	add	sp, #36	; 0x24
 8015104:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015106 <WIDGET__RotateRect90>:
 8015106:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801510a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801510e:	1a1b      	subs	r3, r3, r0
 8015110:	88d0      	ldrh	r0, [r2, #6]
 8015112:	b530      	push	{r4, r5, lr}
 8015114:	b29b      	uxth	r3, r3
 8015116:	f9b2 5000 	ldrsh.w	r5, [r2]
 801511a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 801511e:	8852      	ldrh	r2, [r2, #2]
 8015120:	1a18      	subs	r0, r3, r0
 8015122:	804d      	strh	r5, [r1, #2]
 8015124:	1a9b      	subs	r3, r3, r2
 8015126:	8008      	strh	r0, [r1, #0]
 8015128:	80cc      	strh	r4, [r1, #6]
 801512a:	808b      	strh	r3, [r1, #4]
 801512c:	bd30      	pop	{r4, r5, pc}

0801512e <WIDGET__GetClientRect>:
 801512e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015130:	071b      	lsls	r3, r3, #28
 8015132:	b513      	push	{r0, r1, r4, lr}
 8015134:	460c      	mov	r4, r1
 8015136:	d50f      	bpl.n	8015158 <WIDGET__GetClientRect+0x2a>
 8015138:	4668      	mov	r0, sp
 801513a:	f7fd fd1f 	bl	8012b7c <WM_GetClientRect>
 801513e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015142:	8023      	strh	r3, [r4, #0]
 8015144:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015148:	80a3      	strh	r3, [r4, #4]
 801514a:	f8bd 3000 	ldrh.w	r3, [sp]
 801514e:	8063      	strh	r3, [r4, #2]
 8015150:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015154:	80e3      	strh	r3, [r4, #6]
 8015156:	e002      	b.n	801515e <WIDGET__GetClientRect+0x30>
 8015158:	4608      	mov	r0, r1
 801515a:	f7fd fd0f 	bl	8012b7c <WM_GetClientRect>
 801515e:	b002      	add	sp, #8
 8015160:	bd10      	pop	{r4, pc}

08015162 <WIDGET__GetInsideRect>:
 8015162:	b538      	push	{r3, r4, r5, lr}
 8015164:	4605      	mov	r5, r0
 8015166:	460c      	mov	r4, r1
 8015168:	f7fc fe65 	bl	8011e36 <WM__GetClientRectWin>
 801516c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801516e:	4621      	mov	r1, r4
 8015170:	4620      	mov	r0, r4
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015178:	f7f9 bea8 	b.w	800eecc <GUI__ReduceRect>

0801517c <WIDGET__Init>:
 801517c:	4b02      	ldr	r3, [pc, #8]	; (8015188 <WIDGET__Init+0xc>)
 801517e:	8642      	strh	r2, [r0, #50]	; 0x32
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	8601      	strh	r1, [r0, #48]	; 0x30
 8015184:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015186:	4770      	bx	lr
 8015188:	200000cc 	.word	0x200000cc

0801518c <WIDGET_SetState>:
 801518c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801518e:	4604      	mov	r4, r0
 8015190:	460d      	mov	r5, r1
 8015192:	f7f9 f9ed 	bl	800e570 <GUI_Lock>
 8015196:	4620      	mov	r0, r4
 8015198:	f7f8 f89a 	bl	800d2d0 <GUI_ALLOC_LockH>
 801519c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801519e:	9001      	str	r0, [sp, #4]
 80151a0:	42ab      	cmp	r3, r5
 80151a2:	d003      	beq.n	80151ac <WIDGET_SetState+0x20>
 80151a4:	8645      	strh	r5, [r0, #50]	; 0x32
 80151a6:	4620      	mov	r0, r4
 80151a8:	f7fc ff94 	bl	80120d4 <WM_InvalidateWindow>
 80151ac:	a801      	add	r0, sp, #4
 80151ae:	f7f8 f89d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80151b2:	f7f9 f9d3 	bl	800e55c <GUI_Unlock>
 80151b6:	b003      	add	sp, #12
 80151b8:	bd30      	pop	{r4, r5, pc}

080151ba <WIDGET_OrState>:
 80151ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151bc:	460c      	mov	r4, r1
 80151be:	4605      	mov	r5, r0
 80151c0:	b198      	cbz	r0, 80151ea <WIDGET_OrState+0x30>
 80151c2:	f7f9 f9d5 	bl	800e570 <GUI_Lock>
 80151c6:	4628      	mov	r0, r5
 80151c8:	f7f8 f882 	bl	800d2d0 <GUI_ALLOC_LockH>
 80151cc:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 80151ce:	9001      	str	r0, [sp, #4]
 80151d0:	ea34 0301 	bics.w	r3, r4, r1
 80151d4:	d004      	beq.n	80151e0 <WIDGET_OrState+0x26>
 80151d6:	430c      	orrs	r4, r1
 80151d8:	8644      	strh	r4, [r0, #50]	; 0x32
 80151da:	4628      	mov	r0, r5
 80151dc:	f7fc ff7a 	bl	80120d4 <WM_InvalidateWindow>
 80151e0:	a801      	add	r0, sp, #4
 80151e2:	f7f8 f883 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80151e6:	f7f9 f9b9 	bl	800e55c <GUI_Unlock>
 80151ea:	b003      	add	sp, #12
 80151ec:	bd30      	pop	{r4, r5, pc}

080151ee <WIDGET_AndState>:
 80151ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151f0:	460c      	mov	r4, r1
 80151f2:	4605      	mov	r5, r0
 80151f4:	b198      	cbz	r0, 801521e <WIDGET_AndState+0x30>
 80151f6:	f7f9 f9bb 	bl	800e570 <GUI_Lock>
 80151fa:	4628      	mov	r0, r5
 80151fc:	f7f8 f868 	bl	800d2d0 <GUI_ALLOC_LockH>
 8015200:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015202:	9001      	str	r0, [sp, #4]
 8015204:	ea23 0104 	bic.w	r1, r3, r4
 8015208:	428b      	cmp	r3, r1
 801520a:	d003      	beq.n	8015214 <WIDGET_AndState+0x26>
 801520c:	8641      	strh	r1, [r0, #50]	; 0x32
 801520e:	4628      	mov	r0, r5
 8015210:	f7fc ff60 	bl	80120d4 <WM_InvalidateWindow>
 8015214:	a801      	add	r0, sp, #4
 8015216:	f7f8 f869 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801521a:	f7f9 f99f 	bl	800e55c <GUI_Unlock>
 801521e:	b003      	add	sp, #12
 8015220:	bd30      	pop	{r4, r5, pc}

08015222 <WIDGET_HandleActive>:
 8015222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015224:	460d      	mov	r5, r1
 8015226:	b085      	sub	sp, #20
 8015228:	4606      	mov	r6, r0
 801522a:	2800      	cmp	r0, #0
 801522c:	f000 8098 	beq.w	8015360 <WIDGET_HandleActive+0x13e>
 8015230:	f7f8 f84e 	bl	800d2d0 <GUI_ALLOC_LockH>
 8015234:	682b      	ldr	r3, [r5, #0]
 8015236:	9002      	str	r0, [sp, #8]
 8015238:	2b16      	cmp	r3, #22
 801523a:	d058      	beq.n	80152ee <WIDGET_HandleActive+0xcc>
 801523c:	dc0c      	bgt.n	8015258 <WIDGET_HandleActive+0x36>
 801523e:	2b11      	cmp	r3, #17
 8015240:	d037      	beq.n	80152b2 <WIDGET_HandleActive+0x90>
 8015242:	dc02      	bgt.n	801524a <WIDGET_HandleActive+0x28>
 8015244:	2b0d      	cmp	r3, #13
 8015246:	d044      	beq.n	80152d2 <WIDGET_HandleActive+0xb0>
 8015248:	e083      	b.n	8015352 <WIDGET_HandleActive+0x130>
 801524a:	2b14      	cmp	r3, #20
 801524c:	d07c      	beq.n	8015348 <WIDGET_HandleActive+0x126>
 801524e:	2b15      	cmp	r3, #21
 8015250:	d17f      	bne.n	8015352 <WIDGET_HandleActive+0x130>
 8015252:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8015256:	e075      	b.n	8015344 <WIDGET_HandleActive+0x122>
 8015258:	2b1f      	cmp	r3, #31
 801525a:	d070      	beq.n	801533e <WIDGET_HandleActive+0x11c>
 801525c:	dc02      	bgt.n	8015264 <WIDGET_HandleActive+0x42>
 801525e:	2b1e      	cmp	r3, #30
 8015260:	d048      	beq.n	80152f4 <WIDGET_HandleActive+0xd2>
 8015262:	e076      	b.n	8015352 <WIDGET_HandleActive+0x130>
 8015264:	2b31      	cmp	r3, #49	; 0x31
 8015266:	d022      	beq.n	80152ae <WIDGET_HandleActive+0x8c>
 8015268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801526c:	d171      	bne.n	8015352 <WIDGET_HandleActive+0x130>
 801526e:	68e9      	ldr	r1, [r5, #12]
 8015270:	ad04      	add	r5, sp, #16
 8015272:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015274:	680c      	ldr	r4, [r1, #0]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	62c1      	str	r1, [r0, #44]	; 0x2c
 801527a:	a802      	add	r0, sp, #8
 801527c:	1b1c      	subs	r4, r3, r4
 801527e:	f7f8 f835 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8015282:	f7f9 f975 	bl	800e570 <GUI_Lock>
 8015286:	4630      	mov	r0, r6
 8015288:	f7f8 f822 	bl	800d2d0 <GUI_ALLOC_LockH>
 801528c:	4262      	negs	r2, r4
 801528e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015292:	4623      	mov	r3, r4
 8015294:	4611      	mov	r1, r2
 8015296:	9400      	str	r4, [sp, #0]
 8015298:	f7fe fc99 	bl	8013bce <WM__UpdateChildPositions>
 801529c:	4628      	mov	r0, r5
 801529e:	f7f8 f825 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80152a2:	f7f9 f95b 	bl	800e55c <GUI_Unlock>
 80152a6:	4630      	mov	r0, r6
 80152a8:	f7fc ff14 	bl	80120d4 <WM_InvalidateWindow>
 80152ac:	e04f      	b.n	801534e <WIDGET_HandleActive+0x12c>
 80152ae:	2400      	movs	r4, #0
 80152b0:	e040      	b.n	8015334 <WIDGET_HandleActive+0x112>
 80152b2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80152b4:	06d9      	lsls	r1, r3, #27
 80152b6:	d54c      	bpl.n	8015352 <WIDGET_HandleActive+0x130>
 80152b8:	68eb      	ldr	r3, [r5, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d049      	beq.n	8015352 <WIDGET_HandleActive+0x130>
 80152be:	7a1b      	ldrb	r3, [r3, #8]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d046      	beq.n	8015352 <WIDGET_HandleActive+0x130>
 80152c4:	a802      	add	r0, sp, #8
 80152c6:	f7f8 f811 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80152ca:	4630      	mov	r0, r6
 80152cc:	f7fd ff2e 	bl	801312c <WM_SetFocus>
 80152d0:	e03f      	b.n	8015352 <WIDGET_HandleActive+0x130>
 80152d2:	68eb      	ldr	r3, [r5, #12]
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d03b      	beq.n	8015352 <WIDGET_HandleActive+0x130>
 80152da:	7a1b      	ldrb	r3, [r3, #8]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d038      	beq.n	8015352 <WIDGET_HandleActive+0x130>
 80152e0:	a802      	add	r0, sp, #8
 80152e2:	f7f8 f803 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80152e6:	4630      	mov	r0, r6
 80152e8:	f005 f8d2 	bl	801a490 <WM_BringToTop>
 80152ec:	e02f      	b.n	801534e <WIDGET_HandleActive+0x12c>
 80152ee:	68eb      	ldr	r3, [r5, #12]
 80152f0:	8603      	strh	r3, [r0, #48]	; 0x30
 80152f2:	e02c      	b.n	801534e <WIDGET_HandleActive+0x12c>
 80152f4:	68eb      	ldr	r3, [r5, #12]
 80152f6:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d108      	bne.n	801530e <WIDGET_HandleActive+0xec>
 80152fc:	06ca      	lsls	r2, r1, #27
 80152fe:	d50d      	bpl.n	801531c <WIDGET_HandleActive+0xfa>
 8015300:	f041 0101 	orr.w	r1, r1, #1
 8015304:	4630      	mov	r0, r6
 8015306:	f7ff ff41 	bl	801518c <WIDGET_SetState>
 801530a:	2708      	movs	r7, #8
 801530c:	e008      	b.n	8015320 <WIDGET_HandleActive+0xfe>
 801530e:	f021 0101 	bic.w	r1, r1, #1
 8015312:	4630      	mov	r0, r6
 8015314:	f7ff ff3a 	bl	801518c <WIDGET_SetState>
 8015318:	2709      	movs	r7, #9
 801531a:	e001      	b.n	8015320 <WIDGET_HandleActive+0xfe>
 801531c:	f04f 37ff 	mov.w	r7, #4294967295
 8015320:	a802      	add	r0, sp, #8
 8015322:	2400      	movs	r4, #0
 8015324:	f7f7 ffe2 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8015328:	1c7b      	adds	r3, r7, #1
 801532a:	d005      	beq.n	8015338 <WIDGET_HandleActive+0x116>
 801532c:	4639      	mov	r1, r7
 801532e:	4630      	mov	r0, r6
 8015330:	f7fd fef2 	bl	8013118 <WM_NotifyParent>
 8015334:	60ec      	str	r4, [r5, #12]
 8015336:	e00d      	b.n	8015354 <WIDGET_HandleActive+0x132>
 8015338:	2301      	movs	r3, #1
 801533a:	60eb      	str	r3, [r5, #12]
 801533c:	e00a      	b.n	8015354 <WIDGET_HandleActive+0x132>
 801533e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015340:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015344:	60eb      	str	r3, [r5, #12]
 8015346:	e002      	b.n	801534e <WIDGET_HandleActive+0x12c>
 8015348:	68e9      	ldr	r1, [r5, #12]
 801534a:	f7ff ff0a 	bl	8015162 <WIDGET__GetInsideRect>
 801534e:	2400      	movs	r4, #0
 8015350:	e000      	b.n	8015354 <WIDGET_HandleActive+0x132>
 8015352:	2401      	movs	r4, #1
 8015354:	9b02      	ldr	r3, [sp, #8]
 8015356:	b123      	cbz	r3, 8015362 <WIDGET_HandleActive+0x140>
 8015358:	a802      	add	r0, sp, #8
 801535a:	f7f7 ffc7 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801535e:	e000      	b.n	8015362 <WIDGET_HandleActive+0x140>
 8015360:	2401      	movs	r4, #1
 8015362:	4620      	mov	r0, r4
 8015364:	b005      	add	sp, #20
 8015366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015368 <WIDGET__DrawTriangle>:
 8015368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801536a:	461c      	mov	r4, r3
 801536c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801536e:	460d      	mov	r5, r1
 8015370:	4616      	mov	r6, r2
 8015372:	071b      	lsls	r3, r3, #28
 8015374:	9f06      	ldr	r7, [sp, #24]
 8015376:	d50a      	bpl.n	801538e <WIDGET__DrawTriangle+0x26>
 8015378:	2c00      	cmp	r4, #0
 801537a:	db07      	blt.n	801538c <WIDGET__DrawTriangle+0x24>
 801537c:	19a2      	adds	r2, r4, r6
 801537e:	1b31      	subs	r1, r6, r4
 8015380:	4628      	mov	r0, r5
 8015382:	3c01      	subs	r4, #1
 8015384:	f000 fe78 	bl	8016078 <GUI_DrawHLine>
 8015388:	443d      	add	r5, r7
 801538a:	e7f5      	b.n	8015378 <WIDGET__DrawTriangle+0x10>
 801538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801538e:	2c00      	cmp	r4, #0
 8015390:	db07      	blt.n	80153a2 <WIDGET__DrawTriangle+0x3a>
 8015392:	1932      	adds	r2, r6, r4
 8015394:	1b31      	subs	r1, r6, r4
 8015396:	4628      	mov	r0, r5
 8015398:	3c01      	subs	r4, #1
 801539a:	f000 fec3 	bl	8016124 <GUI_DrawVLine>
 801539e:	443d      	add	r5, r7
 80153a0:	e7f5      	b.n	801538e <WIDGET__DrawTriangle+0x26>
 80153a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080153a4 <WIDGET_GetDefaultEffect>:
 80153a4:	4b01      	ldr	r3, [pc, #4]	; (80153ac <WIDGET_GetDefaultEffect+0x8>)
 80153a6:	6818      	ldr	r0, [r3, #0]
 80153a8:	4770      	bx	lr
 80153aa:	bf00      	nop
 80153ac:	200000cc 	.word	0x200000cc

080153b0 <_DrawUpRect>:
 80153b0:	4770      	bx	lr

080153b2 <_DrawFlat>:
 80153b2:	4770      	bx	lr

080153b4 <_DrawDownRect>:
 80153b4:	4770      	bx	lr

080153b6 <_DrawDown>:
 80153b6:	4770      	bx	lr

080153b8 <_DrawUp>:
 80153b8:	4770      	bx	lr
	...

080153bc <_DrawDownRect>:
 80153bc:	b510      	push	{r4, lr}
 80153be:	b09e      	sub	sp, #120	; 0x78
 80153c0:	4604      	mov	r4, r0
 80153c2:	a801      	add	r0, sp, #4
 80153c4:	f7f8 fafc 	bl	800d9c0 <GUI_SaveContext_W>
 80153c8:	4b09      	ldr	r3, [pc, #36]	; (80153f0 <_DrawDownRect+0x34>)
 80153ca:	6818      	ldr	r0, [r3, #0]
 80153cc:	f7fa f90c 	bl	800f5e8 <LCD_SetColor>
 80153d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80153d4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80153d8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80153dc:	f9b4 0000 	ldrsh.w	r0, [r4]
 80153e0:	f000 f978 	bl	80156d4 <GUI_DrawRect>
 80153e4:	a801      	add	r0, sp, #4
 80153e6:	f7f8 faf5 	bl	800d9d4 <GUI_RestoreContext>
 80153ea:	b01e      	add	sp, #120	; 0x78
 80153ec:	bd10      	pop	{r4, pc}
 80153ee:	bf00      	nop
 80153f0:	200000d0 	.word	0x200000d0

080153f4 <_DrawUpRect>:
 80153f4:	f7ff bfe2 	b.w	80153bc <_DrawDownRect>

080153f8 <_DrawDown>:
 80153f8:	b507      	push	{r0, r1, r2, lr}
 80153fa:	4668      	mov	r0, sp
 80153fc:	f7fd fbbe 	bl	8012b7c <WM_GetClientRect>
 8015400:	4668      	mov	r0, sp
 8015402:	f7ff ffdb 	bl	80153bc <_DrawDownRect>
 8015406:	b003      	add	sp, #12
 8015408:	f85d fb04 	ldr.w	pc, [sp], #4

0801540c <_DrawUp>:
 801540c:	f7ff bff4 	b.w	80153f8 <_DrawDown>

08015410 <WINDOW_Callback>:
 8015410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015414:	6845      	ldr	r5, [r0, #4]
 8015416:	af02      	add	r7, sp, #8
 8015418:	4604      	mov	r4, r0
 801541a:	4628      	mov	r0, r5
 801541c:	f7f7 ff58 	bl	800d2d0 <GUI_ALLOC_LockH>
 8015420:	f847 0d08 	str.w	r0, [r7, #-8]!
 8015424:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8015426:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 801542a:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 801542e:	4638      	mov	r0, r7
 8015430:	f7f7 ff5c 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8015434:	6823      	ldr	r3, [r4, #0]
 8015436:	2b1f      	cmp	r3, #31
 8015438:	d02f      	beq.n	801549a <WINDOW_Callback+0x8a>
 801543a:	dc06      	bgt.n	801544a <WINDOW_Callback+0x3a>
 801543c:	2b0f      	cmp	r3, #15
 801543e:	d05f      	beq.n	8015500 <WINDOW_Callback+0xf0>
 8015440:	2b1e      	cmp	r3, #30
 8015442:	d015      	beq.n	8015470 <WINDOW_Callback+0x60>
 8015444:	2b0e      	cmp	r3, #14
 8015446:	d168      	bne.n	801551a <WINDOW_Callback+0x10a>
 8015448:	e049      	b.n	80154de <WINDOW_Callback+0xce>
 801544a:	2b22      	cmp	r3, #34	; 0x22
 801544c:	d062      	beq.n	8015514 <WINDOW_Callback+0x104>
 801544e:	2b2a      	cmp	r3, #42	; 0x2a
 8015450:	d002      	beq.n	8015458 <WINDOW_Callback+0x48>
 8015452:	2b20      	cmp	r3, #32
 8015454:	d161      	bne.n	801551a <WINDOW_Callback+0x10a>
 8015456:	e025      	b.n	80154a4 <WINDOW_Callback+0x94>
 8015458:	4628      	mov	r0, r5
 801545a:	f7f7 ff39 	bl	800d2d0 <GUI_ALLOC_LockH>
 801545e:	68e3      	ldr	r3, [r4, #12]
 8015460:	9000      	str	r0, [sp, #0]
 8015462:	b10b      	cbz	r3, 8015468 <WINDOW_Callback+0x58>
 8015464:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015466:	e001      	b.n	801546c <WINDOW_Callback+0x5c>
 8015468:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801546a:	60e3      	str	r3, [r4, #12]
 801546c:	4638      	mov	r0, r7
 801546e:	e033      	b.n	80154d8 <WINDOW_Callback+0xc8>
 8015470:	68e4      	ldr	r4, [r4, #12]
 8015472:	2c01      	cmp	r4, #1
 8015474:	d15a      	bne.n	801552c <WINDOW_Callback+0x11c>
 8015476:	4630      	mov	r0, r6
 8015478:	f7fd fd7c 	bl	8012f74 <WM_IsWindow>
 801547c:	2800      	cmp	r0, #0
 801547e:	d03b      	beq.n	80154f8 <WINDOW_Callback+0xe8>
 8015480:	4630      	mov	r0, r6
 8015482:	f7fd fe53 	bl	801312c <WM_SetFocus>
 8015486:	4630      	mov	r0, r6
 8015488:	f7fd fd48 	bl	8012f1c <WM_HasFocus>
 801548c:	2800      	cmp	r0, #0
 801548e:	d04d      	beq.n	801552c <WINDOW_Callback+0x11c>
 8015490:	4621      	mov	r1, r4
 8015492:	4630      	mov	r0, r6
 8015494:	f7ff fe91 	bl	80151ba <WIDGET_OrState>
 8015498:	e048      	b.n	801552c <WINDOW_Callback+0x11c>
 801549a:	4621      	mov	r1, r4
 801549c:	4628      	mov	r0, r5
 801549e:	f7ff fec0 	bl	8015222 <WIDGET_HandleActive>
 80154a2:	e043      	b.n	801552c <WINDOW_Callback+0x11c>
 80154a4:	4628      	mov	r0, r5
 80154a6:	f7f7 ff13 	bl	800d2d0 <GUI_ALLOC_LockH>
 80154aa:	68e4      	ldr	r4, [r4, #12]
 80154ac:	9001      	str	r0, [sp, #4]
 80154ae:	b194      	cbz	r4, 80154d6 <WINDOW_Callback+0xc6>
 80154b0:	4629      	mov	r1, r5
 80154b2:	6860      	ldr	r0, [r4, #4]
 80154b4:	f7fe fb16 	bl	8013ae4 <WM__IsAncestorOrSelf>
 80154b8:	4629      	mov	r1, r5
 80154ba:	b928      	cbnz	r0, 80154c8 <WINDOW_Callback+0xb8>
 80154bc:	6820      	ldr	r0, [r4, #0]
 80154be:	f7fe fb00 	bl	8013ac2 <WM__IsAncestor>
 80154c2:	b140      	cbz	r0, 80154d6 <WINDOW_Callback+0xc6>
 80154c4:	6822      	ldr	r2, [r4, #0]
 80154c6:	e004      	b.n	80154d2 <WINDOW_Callback+0xc2>
 80154c8:	6860      	ldr	r0, [r4, #4]
 80154ca:	f7fe fafa 	bl	8013ac2 <WM__IsAncestor>
 80154ce:	b110      	cbz	r0, 80154d6 <WINDOW_Callback+0xc6>
 80154d0:	6862      	ldr	r2, [r4, #4]
 80154d2:	9b01      	ldr	r3, [sp, #4]
 80154d4:	639a      	str	r2, [r3, #56]	; 0x38
 80154d6:	a801      	add	r0, sp, #4
 80154d8:	f7f7 ff08 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80154dc:	e026      	b.n	801552c <WINDOW_Callback+0x11c>
 80154de:	68e3      	ldr	r3, [r4, #12]
 80154e0:	685a      	ldr	r2, [r3, #4]
 80154e2:	2a00      	cmp	r2, #0
 80154e4:	dd19      	ble.n	801551a <WINDOW_Callback+0x10a>
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	2b09      	cmp	r3, #9
 80154ea:	d005      	beq.n	80154f8 <WINDOW_Callback+0xe8>
 80154ec:	2b0a      	cmp	r3, #10
 80154ee:	d114      	bne.n	801551a <WINDOW_Callback+0x10a>
 80154f0:	4628      	mov	r0, r5
 80154f2:	f005 f946 	bl	801a782 <WM_SetFocusOnPrevChild>
 80154f6:	e019      	b.n	801552c <WINDOW_Callback+0x11c>
 80154f8:	4628      	mov	r0, r5
 80154fa:	f005 f901 	bl	801a700 <WM_SetFocusOnNextChild>
 80154fe:	e015      	b.n	801552c <WINDOW_Callback+0x11c>
 8015500:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8015504:	4598      	cmp	r8, r3
 8015506:	d008      	beq.n	801551a <WINDOW_Callback+0x10a>
 8015508:	4640      	mov	r0, r8
 801550a:	f7fa f867 	bl	800f5dc <LCD_SetBkColor>
 801550e:	f7f8 fbb5 	bl	800dc7c <GUI_Clear>
 8015512:	e002      	b.n	801551a <WINDOW_Callback+0x10a>
 8015514:	f8c4 800c 	str.w	r8, [r4, #12]
 8015518:	e008      	b.n	801552c <WINDOW_Callback+0x11c>
 801551a:	f1b9 0f00 	cmp.w	r9, #0
 801551e:	d002      	beq.n	8015526 <WINDOW_Callback+0x116>
 8015520:	4620      	mov	r0, r4
 8015522:	47c8      	blx	r9
 8015524:	e002      	b.n	801552c <WINDOW_Callback+0x11c>
 8015526:	4620      	mov	r0, r4
 8015528:	f7fd fa3c 	bl	80129a4 <WM_DefaultProc>
 801552c:	b003      	add	sp, #12
 801552e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015532 <WINDOW_SetBkColor>:
 8015532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015534:	4604      	mov	r4, r0
 8015536:	460d      	mov	r5, r1
 8015538:	f7f9 f81a 	bl	800e570 <GUI_Lock>
 801553c:	4620      	mov	r0, r4
 801553e:	f7f7 fec7 	bl	800d2d0 <GUI_ALLOC_LockH>
 8015542:	ab02      	add	r3, sp, #8
 8015544:	6405      	str	r5, [r0, #64]	; 0x40
 8015546:	f843 0d04 	str.w	r0, [r3, #-4]!
 801554a:	4618      	mov	r0, r3
 801554c:	f7f7 fece 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8015550:	4620      	mov	r0, r4
 8015552:	f7fc fdbf 	bl	80120d4 <WM_InvalidateWindow>
 8015556:	f7f9 f801 	bl	800e55c <GUI_Unlock>
 801555a:	b003      	add	sp, #12
 801555c:	bd30      	pop	{r4, r5, pc}
	...

08015560 <WINDOW_CreateUser>:
 8015560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015564:	b086      	sub	sp, #24
 8015566:	4698      	mov	r8, r3
 8015568:	4605      	mov	r5, r0
 801556a:	460e      	mov	r6, r1
 801556c:	4617      	mov	r7, r2
 801556e:	f7f8 ffff 	bl	800e570 <GUI_Lock>
 8015572:	4b15      	ldr	r3, [pc, #84]	; (80155c8 <WINDOW_CreateUser+0x68>)
 8015574:	4631      	mov	r1, r6
 8015576:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015578:	463a      	mov	r2, r7
 801557a:	9302      	str	r3, [sp, #8]
 801557c:	4628      	mov	r0, r5
 801557e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015580:	3418      	adds	r4, #24
 8015582:	9301      	str	r3, [sp, #4]
 8015584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015586:	9403      	str	r4, [sp, #12]
 8015588:	9300      	str	r3, [sp, #0]
 801558a:	4643      	mov	r3, r8
 801558c:	f7fc fdd4 	bl	8012138 <WM_CreateWindowAsChild>
 8015590:	4604      	mov	r4, r0
 8015592:	b190      	cbz	r0, 80155ba <WINDOW_CreateUser+0x5a>
 8015594:	f7f7 fe9c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8015598:	2210      	movs	r2, #16
 801559a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801559c:	9005      	str	r0, [sp, #20]
 801559e:	f7ff fded 	bl	801517c <WIDGET__Init>
 80155a2:	a806      	add	r0, sp, #24
 80155a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80155a6:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80155aa:	635a      	str	r2, [r3, #52]	; 0x34
 80155ac:	2200      	movs	r2, #0
 80155ae:	639a      	str	r2, [r3, #56]	; 0x38
 80155b0:	4a06      	ldr	r2, [pc, #24]	; (80155cc <WINDOW_CreateUser+0x6c>)
 80155b2:	6812      	ldr	r2, [r2, #0]
 80155b4:	641a      	str	r2, [r3, #64]	; 0x40
 80155b6:	f7f7 fe99 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80155ba:	f7f8 ffcf 	bl	800e55c <GUI_Unlock>
 80155be:	4620      	mov	r0, r4
 80155c0:	b006      	add	sp, #24
 80155c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c6:	bf00      	nop
 80155c8:	08015411 	.word	0x08015411
 80155cc:	200000d4 	.word	0x200000d4

080155d0 <WINDOW_CreateIndirect>:
 80155d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155d2:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 80155d6:	4604      	mov	r4, r0
 80155d8:	b087      	sub	sp, #28
 80155da:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
 80155de:	441d      	add	r5, r3
 80155e0:	69a3      	ldr	r3, [r4, #24]
 80155e2:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 80155e6:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80155ea:	9305      	str	r3, [sp, #20]
 80155ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155ee:	4410      	add	r0, r2
 80155f0:	4632      	mov	r2, r6
 80155f2:	9304      	str	r3, [sp, #16]
 80155f4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80155f8:	9303      	str	r3, [sp, #12]
 80155fa:	2300      	movs	r3, #0
 80155fc:	9302      	str	r3, [sp, #8]
 80155fe:	8a63      	ldrh	r3, [r4, #18]
 8015600:	e88d 000a 	stmia.w	sp, {r1, r3}
 8015604:	463b      	mov	r3, r7
 8015606:	4629      	mov	r1, r5
 8015608:	f7ff ffaa 	bl	8015560 <WINDOW_CreateUser>
 801560c:	b007      	add	sp, #28
 801560e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015610 <_GetIndexMask_0>:
 8015610:	b508      	push	{r3, lr}
 8015612:	f7fa f8f3 	bl	800f7fc <LCD_GetNumColors>
 8015616:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801561a:	d010      	beq.n	801563e <_GetIndexMask_0+0x2e>
 801561c:	287f      	cmp	r0, #127	; 0x7f
 801561e:	d810      	bhi.n	8015642 <_GetIndexMask_0+0x32>
 8015620:	283f      	cmp	r0, #63	; 0x3f
 8015622:	d810      	bhi.n	8015646 <_GetIndexMask_0+0x36>
 8015624:	281f      	cmp	r0, #31
 8015626:	d810      	bhi.n	801564a <_GetIndexMask_0+0x3a>
 8015628:	280f      	cmp	r0, #15
 801562a:	d810      	bhi.n	801564e <_GetIndexMask_0+0x3e>
 801562c:	2807      	cmp	r0, #7
 801562e:	d810      	bhi.n	8015652 <_GetIndexMask_0+0x42>
 8015630:	2803      	cmp	r0, #3
 8015632:	d810      	bhi.n	8015656 <_GetIndexMask_0+0x46>
 8015634:	2801      	cmp	r0, #1
 8015636:	bf94      	ite	ls
 8015638:	2000      	movls	r0, #0
 801563a:	2001      	movhi	r0, #1
 801563c:	e00c      	b.n	8015658 <_GetIndexMask_0+0x48>
 801563e:	2008      	movs	r0, #8
 8015640:	e00a      	b.n	8015658 <_GetIndexMask_0+0x48>
 8015642:	2007      	movs	r0, #7
 8015644:	e008      	b.n	8015658 <_GetIndexMask_0+0x48>
 8015646:	2006      	movs	r0, #6
 8015648:	e006      	b.n	8015658 <_GetIndexMask_0+0x48>
 801564a:	2005      	movs	r0, #5
 801564c:	e004      	b.n	8015658 <_GetIndexMask_0+0x48>
 801564e:	2004      	movs	r0, #4
 8015650:	e002      	b.n	8015658 <_GetIndexMask_0+0x48>
 8015652:	2003      	movs	r0, #3
 8015654:	e000      	b.n	8015658 <_GetIndexMask_0+0x48>
 8015656:	2002      	movs	r0, #2
 8015658:	2301      	movs	r3, #1
 801565a:	fa03 f000 	lsl.w	r0, r3, r0
 801565e:	3801      	subs	r0, #1
 8015660:	bd08      	pop	{r3, pc}

08015662 <_Index2Color_0>:
 8015662:	b538      	push	{r3, r4, r5, lr}
 8015664:	4604      	mov	r4, r0
 8015666:	f7fa f8c9 	bl	800f7fc <LCD_GetNumColors>
 801566a:	4605      	mov	r5, r0
 801566c:	f7fa f8e4 	bl	800f838 <LCD_GetPalette>
 8015670:	42a5      	cmp	r5, r4
 8015672:	d903      	bls.n	801567c <_Index2Color_0+0x1a>
 8015674:	b118      	cbz	r0, 801567e <_Index2Color_0+0x1c>
 8015676:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801567a:	bd38      	pop	{r3, r4, r5, pc}
 801567c:	2000      	movs	r0, #0
 801567e:	bd38      	pop	{r3, r4, r5, pc}

08015680 <_Color2Index_0>:
 8015680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015684:	4681      	mov	r9, r0
 8015686:	f7fa f8b9 	bl	800f7fc <LCD_GetNumColors>
 801568a:	4607      	mov	r7, r0
 801568c:	f7fa f8d4 	bl	800f838 <LCD_GetPalette>
 8015690:	4606      	mov	r6, r0
 8015692:	b1e0      	cbz	r0, 80156ce <_Color2Index_0+0x4e>
 8015694:	2000      	movs	r0, #0
 8015696:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 801569a:	454b      	cmp	r3, r9
 801569c:	d017      	beq.n	80156ce <_Color2Index_0+0x4e>
 801569e:	3001      	adds	r0, #1
 80156a0:	4287      	cmp	r7, r0
 80156a2:	dcf8      	bgt.n	8015696 <_Color2Index_0+0x16>
 80156a4:	2400      	movs	r4, #0
 80156a6:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 80156aa:	4625      	mov	r5, r4
 80156ac:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80156b0:	4648      	mov	r0, r9
 80156b2:	f7f8 f81f 	bl	800d6f4 <GUI_CalcColorDist>
 80156b6:	4580      	cmp	r8, r0
 80156b8:	bf88      	it	hi
 80156ba:	462c      	movhi	r4, r5
 80156bc:	f105 0501 	add.w	r5, r5, #1
 80156c0:	bf88      	it	hi
 80156c2:	4680      	movhi	r8, r0
 80156c4:	42af      	cmp	r7, r5
 80156c6:	dcf1      	bgt.n	80156ac <_Color2Index_0+0x2c>
 80156c8:	4620      	mov	r0, r4
 80156ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080156d4 <GUI_DrawRect>:
 80156d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80156d8:	4606      	mov	r6, r0
 80156da:	461f      	mov	r7, r3
 80156dc:	4688      	mov	r8, r1
 80156de:	4691      	mov	r9, r2
 80156e0:	f7f8 ff46 	bl	800e570 <GUI_Lock>
 80156e4:	4b1e      	ldr	r3, [pc, #120]	; (8015760 <GUI_DrawRect+0x8c>)
 80156e6:	681c      	ldr	r4, [r3, #0]
 80156e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80156ea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80156ec:	7e24      	ldrb	r4, [r4, #24]
 80156ee:	4480      	add	r8, r0
 80156f0:	442e      	add	r6, r5
 80156f2:	444d      	add	r5, r9
 80156f4:	3c01      	subs	r4, #1
 80156f6:	4407      	add	r7, r0
 80156f8:	4668      	mov	r0, sp
 80156fa:	b2a4      	uxth	r4, r4
 80156fc:	1b33      	subs	r3, r6, r4
 80156fe:	f8ad 3000 	strh.w	r3, [sp]
 8015702:	1963      	adds	r3, r4, r5
 8015704:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015708:	ebc4 0308 	rsb	r3, r4, r8
 801570c:	443c      	add	r4, r7
 801570e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015712:	f8ad 4006 	strh.w	r4, [sp, #6]
 8015716:	f7fc ff63 	bl	80125e0 <WM__InitIVRSearch>
 801571a:	b920      	cbnz	r0, 8015726 <GUI_DrawRect+0x52>
 801571c:	f7f8 ff1e 	bl	800e55c <GUI_Unlock>
 8015720:	b003      	add	sp, #12
 8015722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015726:	f108 0401 	add.w	r4, r8, #1
 801572a:	f107 39ff 	add.w	r9, r7, #4294967295
 801572e:	462a      	mov	r2, r5
 8015730:	4641      	mov	r1, r8
 8015732:	4630      	mov	r0, r6
 8015734:	f7f9 fc22 	bl	800ef7c <LCD_DrawHLine>
 8015738:	462a      	mov	r2, r5
 801573a:	4639      	mov	r1, r7
 801573c:	4630      	mov	r0, r6
 801573e:	f7f9 fc1d 	bl	800ef7c <LCD_DrawHLine>
 8015742:	464a      	mov	r2, r9
 8015744:	4621      	mov	r1, r4
 8015746:	4630      	mov	r0, r6
 8015748:	f7f9 fc40 	bl	800efcc <LCD_DrawVLine>
 801574c:	464a      	mov	r2, r9
 801574e:	4621      	mov	r1, r4
 8015750:	4628      	mov	r0, r5
 8015752:	f7f9 fc3b 	bl	800efcc <LCD_DrawVLine>
 8015756:	f7fc fe81 	bl	801245c <WM__GetNextIVR>
 801575a:	2800      	cmp	r0, #0
 801575c:	d1e7      	bne.n	801572e <GUI_DrawRect+0x5a>
 801575e:	e7dd      	b.n	801571c <GUI_DrawRect+0x48>
 8015760:	20000018 	.word	0x20000018

08015764 <GUI_GetFontDistY>:
 8015764:	b510      	push	{r4, lr}
 8015766:	f7f8 ff03 	bl	800e570 <GUI_Lock>
 801576a:	4b04      	ldr	r3, [pc, #16]	; (801577c <GUI_GetFontDistY+0x18>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	69db      	ldr	r3, [r3, #28]
 8015770:	7e5c      	ldrb	r4, [r3, #25]
 8015772:	f7f8 fef3 	bl	800e55c <GUI_Unlock>
 8015776:	4620      	mov	r0, r4
 8015778:	bd10      	pop	{r4, pc}
 801577a:	bf00      	nop
 801577c:	20000018 	.word	0x20000018

08015780 <GUI_GetCharDistX>:
 8015780:	b510      	push	{r4, lr}
 8015782:	4604      	mov	r4, r0
 8015784:	f7f8 fef4 	bl	800e570 <GUI_Lock>
 8015788:	4b05      	ldr	r3, [pc, #20]	; (80157a0 <GUI_GetCharDistX+0x20>)
 801578a:	2100      	movs	r1, #0
 801578c:	4620      	mov	r0, r4
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	69db      	ldr	r3, [r3, #28]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	4798      	blx	r3
 8015796:	4604      	mov	r4, r0
 8015798:	f7f8 fee0 	bl	800e55c <GUI_Unlock>
 801579c:	4620      	mov	r0, r4
 801579e:	bd10      	pop	{r4, pc}
 80157a0:	20000018 	.word	0x20000018

080157a4 <GUI_GetCharDistXEx>:
 80157a4:	b538      	push	{r3, r4, r5, lr}
 80157a6:	4604      	mov	r4, r0
 80157a8:	460d      	mov	r5, r1
 80157aa:	f7f8 fee1 	bl	800e570 <GUI_Lock>
 80157ae:	4b06      	ldr	r3, [pc, #24]	; (80157c8 <GUI_GetCharDistXEx+0x24>)
 80157b0:	4629      	mov	r1, r5
 80157b2:	4620      	mov	r0, r4
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	69db      	ldr	r3, [r3, #28]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	4798      	blx	r3
 80157bc:	4604      	mov	r4, r0
 80157be:	f7f8 fecd 	bl	800e55c <GUI_Unlock>
 80157c2:	4620      	mov	r0, r4
 80157c4:	bd38      	pop	{r3, r4, r5, pc}
 80157c6:	bf00      	nop
 80157c8:	20000018 	.word	0x20000018

080157cc <_Log2VisBuffered>:
 80157cc:	4770      	bx	lr
	...

080157d0 <_DispLine>:
 80157d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80157d2:	4615      	mov	r5, r2
 80157d4:	ab02      	add	r3, sp, #8
 80157d6:	4a21      	ldr	r2, [pc, #132]	; (801585c <_DispLine+0x8c>)
 80157d8:	4c21      	ldr	r4, [pc, #132]	; (8015860 <_DispLine+0x90>)
 80157da:	f843 1d08 	str.w	r1, [r3, #-8]!
 80157de:	4619      	mov	r1, r3
 80157e0:	9001      	str	r0, [sp, #4]
 80157e2:	6812      	ldr	r2, [r2, #0]
 80157e4:	4790      	blx	r2
 80157e6:	6823      	ldr	r3, [r4, #0]
 80157e8:	9001      	str	r0, [sp, #4]
 80157ea:	6958      	ldr	r0, [r3, #20]
 80157ec:	b940      	cbnz	r0, 8015800 <_DispLine+0x30>
 80157ee:	2001      	movs	r0, #1
 80157f0:	f003 fcd6 	bl	80191a0 <GUI__ManageCache>
 80157f4:	6822      	ldr	r2, [r4, #0]
 80157f6:	69d3      	ldr	r3, [r2, #28]
 80157f8:	695b      	ldr	r3, [r3, #20]
 80157fa:	b93b      	cbnz	r3, 801580c <_DispLine+0x3c>
 80157fc:	4d19      	ldr	r5, [pc, #100]	; (8015864 <_DispLine+0x94>)
 80157fe:	e022      	b.n	8015846 <_DispLine+0x76>
 8015800:	4629      	mov	r1, r5
 8015802:	f7f8 f8bf 	bl	800d984 <GUI_RectsIntersect>
 8015806:	2800      	cmp	r0, #0
 8015808:	d1f1      	bne.n	80157ee <_DispLine+0x1e>
 801580a:	e024      	b.n	8015856 <_DispLine+0x86>
 801580c:	4c16      	ldr	r4, [pc, #88]	; (8015868 <_DispLine+0x98>)
 801580e:	689b      	ldr	r3, [r3, #8]
 8015810:	6821      	ldr	r1, [r4, #0]
 8015812:	b141      	cbz	r1, 8015826 <_DispLine+0x56>
 8015814:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8015818:	9801      	ldr	r0, [sp, #4]
 801581a:	9900      	ldr	r1, [sp, #0]
 801581c:	4798      	blx	r3
 801581e:	6823      	ldr	r3, [r4, #0]
 8015820:	4628      	mov	r0, r5
 8015822:	4798      	blx	r3
 8015824:	e014      	b.n	8015850 <_DispLine+0x80>
 8015826:	9900      	ldr	r1, [sp, #0]
 8015828:	9801      	ldr	r0, [sp, #4]
 801582a:	4798      	blx	r3
 801582c:	e010      	b.n	8015850 <_DispLine+0x80>
 801582e:	a801      	add	r0, sp, #4
 8015830:	f7f8 ff70 	bl	800e714 <GUI_UC__GetCharCodeInc>
 8015834:	6823      	ldr	r3, [r4, #0]
 8015836:	4606      	mov	r6, r0
 8015838:	69db      	ldr	r3, [r3, #28]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	4798      	blx	r3
 801583e:	682b      	ldr	r3, [r5, #0]
 8015840:	b10b      	cbz	r3, 8015846 <_DispLine+0x76>
 8015842:	4630      	mov	r0, r6
 8015844:	4798      	blx	r3
 8015846:	9b00      	ldr	r3, [sp, #0]
 8015848:	3b01      	subs	r3, #1
 801584a:	2b00      	cmp	r3, #0
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	daee      	bge.n	801582e <_DispLine+0x5e>
 8015850:	2000      	movs	r0, #0
 8015852:	f003 fca5 	bl	80191a0 <GUI__ManageCache>
 8015856:	b002      	add	sp, #8
 8015858:	bd70      	pop	{r4, r5, r6, pc}
 801585a:	bf00      	nop
 801585c:	200000d8 	.word	0x200000d8
 8015860:	20000018 	.word	0x20000018
 8015864:	200225e8 	.word	0x200225e8
 8015868:	200225dc 	.word	0x200225dc

0801586c <GUI__GetLineNumChars>:
 801586c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801586e:	460d      	mov	r5, r1
 8015870:	9001      	str	r0, [sp, #4]
 8015872:	4604      	mov	r4, r0
 8015874:	b188      	cbz	r0, 801589a <GUI__GetLineNumChars+0x2e>
 8015876:	4b0a      	ldr	r3, [pc, #40]	; (80158a0 <GUI__GetLineNumChars+0x34>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	69db      	ldr	r3, [r3, #28]
 801587c:	695c      	ldr	r4, [r3, #20]
 801587e:	b154      	cbz	r4, 8015896 <GUI__GetLineNumChars+0x2a>
 8015880:	6864      	ldr	r4, [r4, #4]
 8015882:	b144      	cbz	r4, 8015896 <GUI__GetLineNumChars+0x2a>
 8015884:	47a0      	blx	r4
 8015886:	e009      	b.n	801589c <GUI__GetLineNumChars+0x30>
 8015888:	a801      	add	r0, sp, #4
 801588a:	f7f8 ff43 	bl	800e714 <GUI_UC__GetCharCodeInc>
 801588e:	b120      	cbz	r0, 801589a <GUI__GetLineNumChars+0x2e>
 8015890:	280a      	cmp	r0, #10
 8015892:	d002      	beq.n	801589a <GUI__GetLineNumChars+0x2e>
 8015894:	3401      	adds	r4, #1
 8015896:	42ac      	cmp	r4, r5
 8015898:	dbf6      	blt.n	8015888 <GUI__GetLineNumChars+0x1c>
 801589a:	4620      	mov	r0, r4
 801589c:	b003      	add	sp, #12
 801589e:	bd30      	pop	{r4, r5, pc}
 80158a0:	20000018 	.word	0x20000018

080158a4 <GUI__GetOverlap>:
 80158a4:	b513      	push	{r0, r1, r4, lr}
 80158a6:	2400      	movs	r4, #0
 80158a8:	a902      	add	r1, sp, #8
 80158aa:	f841 4d04 	str.w	r4, [r1, #-4]!
 80158ae:	f7ff ff79 	bl	80157a4 <GUI_GetCharDistXEx>
 80158b2:	9b01      	ldr	r3, [sp, #4]
 80158b4:	4298      	cmp	r0, r3
 80158b6:	bfb4      	ite	lt
 80158b8:	1a18      	sublt	r0, r3, r0
 80158ba:	4620      	movge	r0, r4
 80158bc:	b002      	add	sp, #8
 80158be:	bd10      	pop	{r4, pc}

080158c0 <GUI__GetLineDistX>:
 80158c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158c2:	4a15      	ldr	r2, [pc, #84]	; (8015918 <GUI__GetLineDistX+0x58>)
 80158c4:	ab02      	add	r3, sp, #8
 80158c6:	9001      	str	r0, [sp, #4]
 80158c8:	f843 1d08 	str.w	r1, [r3, #-8]!
 80158cc:	4619      	mov	r1, r3
 80158ce:	6812      	ldr	r2, [r2, #0]
 80158d0:	4790      	blx	r2
 80158d2:	9001      	str	r0, [sp, #4]
 80158d4:	b1e8      	cbz	r0, 8015912 <GUI__GetLineDistX+0x52>
 80158d6:	4b11      	ldr	r3, [pc, #68]	; (801591c <GUI__GetLineDistX+0x5c>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	69db      	ldr	r3, [r3, #28]
 80158dc:	695c      	ldr	r4, [r3, #20]
 80158de:	b10c      	cbz	r4, 80158e4 <GUI__GetLineDistX+0x24>
 80158e0:	6824      	ldr	r4, [r4, #0]
 80158e2:	b90c      	cbnz	r4, 80158e8 <GUI__GetLineDistX+0x28>
 80158e4:	4625      	mov	r5, r4
 80158e6:	e002      	b.n	80158ee <GUI__GetLineDistX+0x2e>
 80158e8:	9900      	ldr	r1, [sp, #0]
 80158ea:	47a0      	blx	r4
 80158ec:	e011      	b.n	8015912 <GUI__GetLineDistX+0x52>
 80158ee:	9b00      	ldr	r3, [sp, #0]
 80158f0:	3b01      	subs	r3, #1
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	9300      	str	r3, [sp, #0]
 80158f6:	db07      	blt.n	8015908 <GUI__GetLineDistX+0x48>
 80158f8:	a801      	add	r0, sp, #4
 80158fa:	f7f8 ff0b 	bl	800e714 <GUI_UC__GetCharCodeInc>
 80158fe:	4604      	mov	r4, r0
 8015900:	f7ff ff3e 	bl	8015780 <GUI_GetCharDistX>
 8015904:	4405      	add	r5, r0
 8015906:	e7f2      	b.n	80158ee <GUI__GetLineDistX+0x2e>
 8015908:	4620      	mov	r0, r4
 801590a:	f7ff ffcb 	bl	80158a4 <GUI__GetOverlap>
 801590e:	4428      	add	r0, r5
 8015910:	e7ff      	b.n	8015912 <GUI__GetLineDistX+0x52>
 8015912:	b003      	add	sp, #12
 8015914:	bd30      	pop	{r4, r5, pc}
 8015916:	bf00      	nop
 8015918:	200000d8 	.word	0x200000d8
 801591c:	20000018 	.word	0x20000018

08015920 <GUI__DispLine>:
 8015920:	4b27      	ldr	r3, [pc, #156]	; (80159c0 <GUI__DispLine+0xa0>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015926:	4605      	mov	r5, r0
 8015928:	460e      	mov	r6, r1
 801592a:	b163      	cbz	r3, 8015946 <GUI__DispLine+0x26>
 801592c:	2000      	movs	r0, #0
 801592e:	f7fc fe57 	bl	80125e0 <WM__InitIVRSearch>
 8015932:	2800      	cmp	r0, #0
 8015934:	d041      	beq.n	80159ba <GUI__DispLine+0x9a>
 8015936:	466a      	mov	r2, sp
 8015938:	4631      	mov	r1, r6
 801593a:	4628      	mov	r0, r5
 801593c:	f7ff ff48 	bl	80157d0 <_DispLine>
 8015940:	f7fc fd8c 	bl	801245c <WM__GetNextIVR>
 8015944:	e7f5      	b.n	8015932 <GUI__DispLine+0x12>
 8015946:	4c1f      	ldr	r4, [pc, #124]	; (80159c4 <GUI__DispLine+0xa4>)
 8015948:	466b      	mov	r3, sp
 801594a:	6810      	ldr	r0, [r2, #0]
 801594c:	6851      	ldr	r1, [r2, #4]
 801594e:	6822      	ldr	r2, [r4, #0]
 8015950:	c303      	stmia	r3!, {r0, r1}
 8015952:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 8015956:	f8bd 3000 	ldrh.w	r3, [sp]
 801595a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 801595e:	443b      	add	r3, r7
 8015960:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8015964:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015968:	f8ad 3000 	strh.w	r3, [sp]
 801596c:	4401      	add	r1, r0
 801596e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015972:	443a      	add	r2, r7
 8015974:	f8ad 1002 	strh.w	r1, [sp, #2]
 8015978:	4403      	add	r3, r0
 801597a:	4668      	mov	r0, sp
 801597c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015980:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015984:	f7fc fe2c 	bl	80125e0 <WM__InitIVRSearch>
 8015988:	6823      	ldr	r3, [r4, #0]
 801598a:	b940      	cbnz	r0, 801599e <GUI__DispLine+0x7e>
 801598c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801598e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8015990:	1a52      	subs	r2, r2, r1
 8015992:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8015994:	845a      	strh	r2, [r3, #34]	; 0x22
 8015996:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8015998:	1a52      	subs	r2, r2, r1
 801599a:	849a      	strh	r2, [r3, #36]	; 0x24
 801599c:	e00d      	b.n	80159ba <GUI__DispLine+0x9a>
 801599e:	f8bd 2000 	ldrh.w	r2, [sp]
 80159a2:	4631      	mov	r1, r6
 80159a4:	4628      	mov	r0, r5
 80159a6:	845a      	strh	r2, [r3, #34]	; 0x22
 80159a8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80159ac:	849a      	strh	r2, [r3, #36]	; 0x24
 80159ae:	466a      	mov	r2, sp
 80159b0:	f7ff ff0e 	bl	80157d0 <_DispLine>
 80159b4:	f7fc fd52 	bl	801245c <WM__GetNextIVR>
 80159b8:	e7e6      	b.n	8015988 <GUI__DispLine+0x68>
 80159ba:	b003      	add	sp, #12
 80159bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159be:	bf00      	nop
 80159c0:	200225c8 	.word	0x200225c8
 80159c4:	20000018 	.word	0x20000018

080159c8 <GUIMONO_DispChar>:
 80159c8:	4b4d      	ldr	r3, [pc, #308]	; (8015b00 <GUIMONO_DispChar+0x138>)
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	69d1      	ldr	r1, [r2, #28]
 80159ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d2:	69cc      	ldr	r4, [r1, #28]
 80159d4:	b08b      	sub	sp, #44	; 0x2c
 80159d6:	89a3      	ldrh	r3, [r4, #12]
 80159d8:	4283      	cmp	r3, r0
 80159da:	d808      	bhi.n	80159ee <GUIMONO_DispChar+0x26>
 80159dc:	89e5      	ldrh	r5, [r4, #14]
 80159de:	4285      	cmp	r5, r0
 80159e0:	d305      	bcc.n	80159ee <GUIMONO_DispChar+0x26>
 80159e2:	6825      	ldr	r5, [r4, #0]
 80159e4:	1ac3      	subs	r3, r0, r3
 80159e6:	f04f 36ff 	mov.w	r6, #4294967295
 80159ea:	9506      	str	r5, [sp, #24]
 80159ec:	e013      	b.n	8015a16 <GUIMONO_DispChar+0x4e>
 80159ee:	68a3      	ldr	r3, [r4, #8]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d07c      	beq.n	8015aee <GUIMONO_DispChar+0x126>
 80159f4:	881d      	ldrh	r5, [r3, #0]
 80159f6:	42a8      	cmp	r0, r5
 80159f8:	d379      	bcc.n	8015aee <GUIMONO_DispChar+0x126>
 80159fa:	885e      	ldrh	r6, [r3, #2]
 80159fc:	4286      	cmp	r6, r0
 80159fe:	d376      	bcc.n	8015aee <GUIMONO_DispChar+0x126>
 8015a00:	1b40      	subs	r0, r0, r5
 8015a02:	685b      	ldr	r3, [r3, #4]
 8015a04:	6866      	ldr	r6, [r4, #4]
 8015a06:	b280      	uxth	r0, r0
 8015a08:	9606      	str	r6, [sp, #24]
 8015a0a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8015a0e:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 8015a12:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8015a16:	1c58      	adds	r0, r3, #1
 8015a18:	9309      	str	r3, [sp, #36]	; 0x24
 8015a1a:	d068      	beq.n	8015aee <GUIMONO_DispChar+0x126>
 8015a1c:	f891 b018 	ldrb.w	fp, [r1, #24]
 8015a20:	7ca1      	ldrb	r1, [r4, #18]
 8015a22:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8015a26:	fb1b f301 	smulbb	r3, fp, r1
 8015a2a:	4d35      	ldr	r5, [pc, #212]	; (8015b00 <GUIMONO_DispChar+0x138>)
 8015a2c:	4648      	mov	r0, r9
 8015a2e:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8015a32:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 8015a36:	9307      	str	r3, [sp, #28]
 8015a38:	f894 a010 	ldrb.w	sl, [r4, #16]
 8015a3c:	f7f9 fa68 	bl	800ef10 <LCD_SetDrawMode>
 8015a40:	6829      	ldr	r1, [r5, #0]
 8015a42:	9b07      	ldr	r3, [sp, #28]
 8015a44:	69ca      	ldr	r2, [r1, #28]
 8015a46:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8015a48:	9008      	str	r0, [sp, #32]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	9105      	str	r1, [sp, #20]
 8015a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a50:	9906      	ldr	r1, [sp, #24]
 8015a52:	fb00 1003 	mla	r0, r0, r3, r1
 8015a56:	4641      	mov	r1, r8
 8015a58:	9004      	str	r0, [sp, #16]
 8015a5a:	4638      	mov	r0, r7
 8015a5c:	7ca3      	ldrb	r3, [r4, #18]
 8015a5e:	9303      	str	r3, [sp, #12]
 8015a60:	2301      	movs	r3, #1
 8015a62:	9302      	str	r3, [sp, #8]
 8015a64:	7ed3      	ldrb	r3, [r2, #27]
 8015a66:	9301      	str	r3, [sp, #4]
 8015a68:	7e93      	ldrb	r3, [r2, #26]
 8015a6a:	4652      	mov	r2, sl
 8015a6c:	9300      	str	r3, [sp, #0]
 8015a6e:	465b      	mov	r3, fp
 8015a70:	f7f9 fbee 	bl	800f250 <LCD_DrawBitmap>
 8015a74:	1c73      	adds	r3, r6, #1
 8015a76:	d01a      	beq.n	8015aae <GUIMONO_DispChar+0xe6>
 8015a78:	f049 0002 	orr.w	r0, r9, #2
 8015a7c:	f7f9 fa48 	bl	800ef10 <LCD_SetDrawMode>
 8015a80:	682a      	ldr	r2, [r5, #0]
 8015a82:	9906      	ldr	r1, [sp, #24]
 8015a84:	4638      	mov	r0, r7
 8015a86:	69d3      	ldr	r3, [r2, #28]
 8015a88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015a8a:	9205      	str	r2, [sp, #20]
 8015a8c:	9a07      	ldr	r2, [sp, #28]
 8015a8e:	fb02 1606 	mla	r6, r2, r6, r1
 8015a92:	4641      	mov	r1, r8
 8015a94:	9604      	str	r6, [sp, #16]
 8015a96:	7ca2      	ldrb	r2, [r4, #18]
 8015a98:	9203      	str	r2, [sp, #12]
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	9202      	str	r2, [sp, #8]
 8015a9e:	7eda      	ldrb	r2, [r3, #27]
 8015aa0:	9201      	str	r2, [sp, #4]
 8015aa2:	4652      	mov	r2, sl
 8015aa4:	7e9b      	ldrb	r3, [r3, #26]
 8015aa6:	9300      	str	r3, [sp, #0]
 8015aa8:	465b      	mov	r3, fp
 8015aaa:	f7f9 fbd1 	bl	800f250 <LCD_DrawBitmap>
 8015aae:	682b      	ldr	r3, [r5, #0]
 8015ab0:	69db      	ldr	r3, [r3, #28]
 8015ab2:	7e5a      	ldrb	r2, [r3, #25]
 8015ab4:	7e1b      	ldrb	r3, [r3, #24]
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d915      	bls.n	8015ae6 <GUIMONO_DispChar+0x11e>
 8015aba:	f1b9 0f02 	cmp.w	r9, #2
 8015abe:	d012      	beq.n	8015ae6 <GUIMONO_DispChar+0x11e>
 8015ac0:	f089 0004 	eor.w	r0, r9, #4
 8015ac4:	f7f9 fa24 	bl	800ef10 <LCD_SetDrawMode>
 8015ac8:	4b0d      	ldr	r3, [pc, #52]	; (8015b00 <GUIMONO_DispChar+0x138>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	69db      	ldr	r3, [r3, #28]
 8015ace:	7e18      	ldrb	r0, [r3, #24]
 8015ad0:	7ed9      	ldrb	r1, [r3, #27]
 8015ad2:	7e9a      	ldrb	r2, [r3, #26]
 8015ad4:	7e5b      	ldrb	r3, [r3, #25]
 8015ad6:	fb00 8101 	mla	r1, r0, r1, r8
 8015ada:	fb0a 7202 	mla	r2, sl, r2, r7
 8015ade:	4638      	mov	r0, r7
 8015ae0:	4443      	add	r3, r8
 8015ae2:	f7f9 fa9d 	bl	800f020 <LCD_FillRect>
 8015ae6:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8015aea:	f7f9 fa11 	bl	800ef10 <LCD_SetDrawMode>
 8015aee:	4b04      	ldr	r3, [pc, #16]	; (8015b00 <GUIMONO_DispChar+0x138>)
 8015af0:	7c61      	ldrb	r1, [r4, #17]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8015af6:	440b      	add	r3, r1
 8015af8:	8453      	strh	r3, [r2, #34]	; 0x22
 8015afa:	b00b      	add	sp, #44	; 0x2c
 8015afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b00:	20000018 	.word	0x20000018

08015b04 <GUIMONO_GetCharDistX>:
 8015b04:	4b04      	ldr	r3, [pc, #16]	; (8015b18 <GUIMONO_GetCharDistX+0x14>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	69db      	ldr	r3, [r3, #28]
 8015b0a:	69db      	ldr	r3, [r3, #28]
 8015b0c:	b109      	cbz	r1, 8015b12 <GUIMONO_GetCharDistX+0xe>
 8015b0e:	7c1a      	ldrb	r2, [r3, #16]
 8015b10:	600a      	str	r2, [r1, #0]
 8015b12:	7c58      	ldrb	r0, [r3, #17]
 8015b14:	4770      	bx	lr
 8015b16:	bf00      	nop
 8015b18:	20000018 	.word	0x20000018

08015b1c <GUIMONO_GetFontInfo>:
 8015b1c:	2302      	movs	r3, #2
 8015b1e:	800b      	strh	r3, [r1, #0]
 8015b20:	4770      	bx	lr

08015b22 <GUIMONO_IsInFont>:
 8015b22:	69c3      	ldr	r3, [r0, #28]
 8015b24:	899a      	ldrh	r2, [r3, #12]
 8015b26:	428a      	cmp	r2, r1
 8015b28:	d802      	bhi.n	8015b30 <GUIMONO_IsInFont+0xe>
 8015b2a:	89da      	ldrh	r2, [r3, #14]
 8015b2c:	428a      	cmp	r2, r1
 8015b2e:	d20f      	bcs.n	8015b50 <GUIMONO_IsInFont+0x2e>
 8015b30:	6898      	ldr	r0, [r3, #8]
 8015b32:	b180      	cbz	r0, 8015b56 <GUIMONO_IsInFont+0x34>
 8015b34:	8803      	ldrh	r3, [r0, #0]
 8015b36:	4299      	cmp	r1, r3
 8015b38:	d30c      	bcc.n	8015b54 <GUIMONO_IsInFont+0x32>
 8015b3a:	8842      	ldrh	r2, [r0, #2]
 8015b3c:	428a      	cmp	r2, r1
 8015b3e:	d309      	bcc.n	8015b54 <GUIMONO_IsInFont+0x32>
 8015b40:	1ac9      	subs	r1, r1, r3
 8015b42:	6843      	ldr	r3, [r0, #4]
 8015b44:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8015b48:	43c0      	mvns	r0, r0
 8015b4a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8015b4e:	4770      	bx	lr
 8015b50:	2001      	movs	r0, #1
 8015b52:	4770      	bx	lr
 8015b54:	2000      	movs	r0, #0
 8015b56:	4770      	bx	lr

08015b58 <_OnExit>:
 8015b58:	2100      	movs	r1, #0
 8015b5a:	4803      	ldr	r0, [pc, #12]	; (8015b68 <_OnExit+0x10>)
 8015b5c:	4b03      	ldr	r3, [pc, #12]	; (8015b6c <_OnExit+0x14>)
 8015b5e:	2228      	movs	r2, #40	; 0x28
 8015b60:	f840 1b04 	str.w	r1, [r0], #4
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	4718      	bx	r3
 8015b68:	200004b4 	.word	0x200004b4
 8015b6c:	2000003c 	.word	0x2000003c

08015b70 <_Show>:
 8015b70:	b510      	push	{r4, lr}
 8015b72:	4604      	mov	r4, r0
 8015b74:	f7f8 fc3a 	bl	800e3ec <GUI_GetCursorLayer>
 8015b78:	b120      	cbz	r0, 8015b84 <_Show+0x14>
 8015b7a:	2101      	movs	r1, #1
 8015b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b80:	f7f8 bc8e 	b.w	800e4a0 <GUI_SetLayerVisEx>
 8015b84:	4b05      	ldr	r3, [pc, #20]	; (8015b9c <_Show+0x2c>)
 8015b86:	2014      	movs	r0, #20
 8015b88:	fb00 3004 	mla	r0, r0, r4, r3
 8015b8c:	7a03      	ldrb	r3, [r0, #8]
 8015b8e:	b123      	cbz	r3, 8015b9a <_Show+0x2a>
 8015b90:	6940      	ldr	r0, [r0, #20]
 8015b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b96:	f002 b8d7 	b.w	8017d48 <GUI_SPRITE_Show>
 8015b9a:	bd10      	pop	{r4, pc}
 8015b9c:	200004b4 	.word	0x200004b4

08015ba0 <GUI_CURSOR_SelectEx>:
 8015ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ba4:	460d      	mov	r5, r1
 8015ba6:	4606      	mov	r6, r0
 8015ba8:	f7f8 fce2 	bl	800e570 <GUI_Lock>
 8015bac:	4c2d      	ldr	r4, [pc, #180]	; (8015c64 <GUI_CURSOR_SelectEx+0xc4>)
 8015bae:	4628      	mov	r0, r5
 8015bb0:	f7f8 fc1c 	bl	800e3ec <GUI_GetCursorLayer>
 8015bb4:	2314      	movs	r3, #20
 8015bb6:	4681      	mov	r9, r0
 8015bb8:	fb03 4305 	mla	r3, r3, r5, r4
 8015bbc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8015bc0:	6823      	ldr	r3, [r4, #0]
 8015bc2:	b93b      	cbnz	r3, 8015bd4 <GUI_CURSOR_SelectEx+0x34>
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	6023      	str	r3, [r4, #0]
 8015bca:	4b27      	ldr	r3, [pc, #156]	; (8015c68 <GUI_CURSOR_SelectEx+0xc8>)
 8015bcc:	f840 3f2c 	str.w	r3, [r0, #44]!
 8015bd0:	f7f8 f976 	bl	800dec0 <GUI__RegisterExit>
 8015bd4:	f1b9 0f00 	cmp.w	r9, #0
 8015bd8:	d01d      	beq.n	8015c16 <GUI_CURSOR_SelectEx+0x76>
 8015bda:	4648      	mov	r0, r9
 8015bdc:	f7f8 fc24 	bl	800e428 <GUI_SelectLayer>
 8015be0:	4607      	mov	r7, r0
 8015be2:	2000      	movs	r0, #0
 8015be4:	f7f7 ff0d 	bl	800da02 <GUI_SetBkColor>
 8015be8:	f7f8 f848 	bl	800dc7c <GUI_Clear>
 8015bec:	2200      	movs	r2, #0
 8015bee:	6830      	ldr	r0, [r6, #0]
 8015bf0:	4611      	mov	r1, r2
 8015bf2:	f000 f8d5 	bl	8015da0 <GUI_DrawBitmap>
 8015bf6:	6833      	ldr	r3, [r6, #0]
 8015bf8:	4648      	mov	r0, r9
 8015bfa:	885a      	ldrh	r2, [r3, #2]
 8015bfc:	8819      	ldrh	r1, [r3, #0]
 8015bfe:	f7f8 fc3f 	bl	800e480 <GUI_SetLayerSizeEx>
 8015c02:	2314      	movs	r3, #20
 8015c04:	4638      	mov	r0, r7
 8015c06:	fb03 4405 	mla	r4, r3, r5, r4
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	6066      	str	r6, [r4, #4]
 8015c0e:	7223      	strb	r3, [r4, #8]
 8015c10:	f7f8 fc0a 	bl	800e428 <GUI_SelectLayer>
 8015c14:	e01c      	b.n	8015c50 <GUI_CURSOR_SelectEx+0xb0>
 8015c16:	2714      	movs	r7, #20
 8015c18:	2301      	movs	r3, #1
 8015c1a:	fb07 4705 	mla	r7, r7, r5, r4
 8015c1e:	6978      	ldr	r0, [r7, #20]
 8015c20:	607e      	str	r6, [r7, #4]
 8015c22:	723b      	strb	r3, [r7, #8]
 8015c24:	b118      	cbz	r0, 8015c2e <GUI_CURSOR_SelectEx+0x8e>
 8015c26:	f001 fe0f 	bl	8017848 <GUI_SPRITE_Delete>
 8015c2a:	f8c7 9014 	str.w	r9, [r7, #20]
 8015c2e:	b196      	cbz	r6, 8015c56 <GUI_CURSOR_SelectEx+0xb6>
 8015c30:	2314      	movs	r3, #20
 8015c32:	68b2      	ldr	r2, [r6, #8]
 8015c34:	6871      	ldr	r1, [r6, #4]
 8015c36:	fb03 4405 	mla	r4, r3, r5, r4
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	68e0      	ldr	r0, [r4, #12]
 8015c3e:	6927      	ldr	r7, [r4, #16]
 8015c40:	1a41      	subs	r1, r0, r1
 8015c42:	9300      	str	r3, [sp, #0]
 8015c44:	1aba      	subs	r2, r7, r2
 8015c46:	462b      	mov	r3, r5
 8015c48:	6830      	ldr	r0, [r6, #0]
 8015c4a:	f001 fd97 	bl	801777c <GUI_SPRITE__CreateEx>
 8015c4e:	6160      	str	r0, [r4, #20]
 8015c50:	4628      	mov	r0, r5
 8015c52:	f7ff ff8d 	bl	8015b70 <_Show>
 8015c56:	f7f8 fc81 	bl	800e55c <GUI_Unlock>
 8015c5a:	4640      	mov	r0, r8
 8015c5c:	b003      	add	sp, #12
 8015c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c62:	bf00      	nop
 8015c64:	200004b4 	.word	0x200004b4
 8015c68:	08015b59 	.word	0x08015b59

08015c6c <GUI_CURSOR_GetStateEx>:
 8015c6c:	b510      	push	{r4, lr}
 8015c6e:	4604      	mov	r4, r0
 8015c70:	f7f8 fc7e 	bl	800e570 <GUI_Lock>
 8015c74:	2014      	movs	r0, #20
 8015c76:	4b04      	ldr	r3, [pc, #16]	; (8015c88 <GUI_CURSOR_GetStateEx+0x1c>)
 8015c78:	fb00 3404 	mla	r4, r0, r4, r3
 8015c7c:	7a24      	ldrb	r4, [r4, #8]
 8015c7e:	f7f8 fc6d 	bl	800e55c <GUI_Unlock>
 8015c82:	4620      	mov	r0, r4
 8015c84:	bd10      	pop	{r4, pc}
 8015c86:	bf00      	nop
 8015c88:	200004b4 	.word	0x200004b4

08015c8c <GUI_CURSOR_SetPositionEx>:
 8015c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c8e:	4614      	mov	r4, r2
 8015c90:	4606      	mov	r6, r0
 8015c92:	460d      	mov	r5, r1
 8015c94:	f7f8 fc6c 	bl	800e570 <GUI_Lock>
 8015c98:	4620      	mov	r0, r4
 8015c9a:	4f16      	ldr	r7, [pc, #88]	; (8015cf4 <GUI_CURSOR_SetPositionEx+0x68>)
 8015c9c:	f7f8 fba6 	bl	800e3ec <GUI_GetCursorLayer>
 8015ca0:	2314      	movs	r3, #20
 8015ca2:	b148      	cbz	r0, 8015cb8 <GUI_CURSOR_SetPositionEx+0x2c>
 8015ca4:	fb03 7404 	mla	r4, r3, r4, r7
 8015ca8:	6863      	ldr	r3, [r4, #4]
 8015caa:	689a      	ldr	r2, [r3, #8]
 8015cac:	6859      	ldr	r1, [r3, #4]
 8015cae:	1aaa      	subs	r2, r5, r2
 8015cb0:	1a71      	subs	r1, r6, r1
 8015cb2:	f7f8 fbd5 	bl	800e460 <GUI_SetLayerPosEx>
 8015cb6:	e018      	b.n	8015cea <GUI_CURSOR_SetPositionEx+0x5e>
 8015cb8:	fb03 7304 	mla	r3, r3, r4, r7
 8015cbc:	68da      	ldr	r2, [r3, #12]
 8015cbe:	42b2      	cmp	r2, r6
 8015cc0:	d102      	bne.n	8015cc8 <GUI_CURSOR_SetPositionEx+0x3c>
 8015cc2:	691b      	ldr	r3, [r3, #16]
 8015cc4:	42ab      	cmp	r3, r5
 8015cc6:	d010      	beq.n	8015cea <GUI_CURSOR_SetPositionEx+0x5e>
 8015cc8:	2314      	movs	r3, #20
 8015cca:	fb03 7304 	mla	r3, r3, r4, r7
 8015cce:	6958      	ldr	r0, [r3, #20]
 8015cd0:	b130      	cbz	r0, 8015ce0 <GUI_CURSOR_SetPositionEx+0x54>
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	689a      	ldr	r2, [r3, #8]
 8015cd6:	6859      	ldr	r1, [r3, #4]
 8015cd8:	1aaa      	subs	r2, r5, r2
 8015cda:	1a71      	subs	r1, r6, r1
 8015cdc:	f001 fdda 	bl	8017894 <GUI_SPRITE_SetPosition>
 8015ce0:	2314      	movs	r3, #20
 8015ce2:	fb03 7404 	mla	r4, r3, r4, r7
 8015ce6:	60e6      	str	r6, [r4, #12]
 8015ce8:	6125      	str	r5, [r4, #16]
 8015cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015cee:	f7f8 bc35 	b.w	800e55c <GUI_Unlock>
 8015cf2:	bf00      	nop
 8015cf4:	200004b4 	.word	0x200004b4

08015cf8 <GL_DrawBitmap>:
 8015cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cfc:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015d00:	b086      	sub	sp, #24
 8015d02:	4604      	mov	r4, r0
 8015d04:	2000      	movs	r0, #0
 8015d06:	460e      	mov	r6, r1
 8015d08:	4617      	mov	r7, r2
 8015d0a:	f7f7 fe90 	bl	800da2e <GUI_SetDrawMode>
 8015d0e:	4605      	mov	r5, r0
 8015d10:	f1b8 0f00 	cmp.w	r8, #0
 8015d14:	d005      	beq.n	8015d22 <GL_DrawBitmap+0x2a>
 8015d16:	f898 3004 	ldrb.w	r3, [r8, #4]
 8015d1a:	b113      	cbz	r3, 8015d22 <GL_DrawBitmap+0x2a>
 8015d1c:	f040 0002 	orr.w	r0, r0, #2
 8015d20:	e001      	b.n	8015d26 <GL_DrawBitmap+0x2e>
 8015d22:	f025 0002 	bic.w	r0, r5, #2
 8015d26:	f7f7 fe82 	bl	800da2e <GUI_SetDrawMode>
 8015d2a:	6921      	ldr	r1, [r4, #16]
 8015d2c:	b169      	cbz	r1, 8015d4a <GL_DrawBitmap+0x52>
 8015d2e:	2001      	movs	r0, #1
 8015d30:	8863      	ldrh	r3, [r4, #2]
 8015d32:	8822      	ldrh	r2, [r4, #0]
 8015d34:	9003      	str	r0, [sp, #12]
 8015d36:	9002      	str	r0, [sp, #8]
 8015d38:	68e0      	ldr	r0, [r4, #12]
 8015d3a:	9001      	str	r0, [sp, #4]
 8015d3c:	68a0      	ldr	r0, [r4, #8]
 8015d3e:	9000      	str	r0, [sp, #0]
 8015d40:	4630      	mov	r0, r6
 8015d42:	680c      	ldr	r4, [r1, #0]
 8015d44:	4639      	mov	r1, r7
 8015d46:	47a0      	blx	r4
 8015d48:	e01f      	b.n	8015d8a <GL_DrawBitmap+0x92>
 8015d4a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8015d9c <GL_DrawBitmap+0xa4>
 8015d4e:	4621      	mov	r1, r4
 8015d50:	4b11      	ldr	r3, [pc, #68]	; (8015d98 <GL_DrawBitmap+0xa0>)
 8015d52:	f8d8 2000 	ldr.w	r2, [r8]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	7c52      	ldrb	r2, [r2, #17]
 8015d5a:	68e0      	ldr	r0, [r4, #12]
 8015d5c:	4798      	blx	r3
 8015d5e:	88e1      	ldrh	r1, [r4, #6]
 8015d60:	b920      	cbnz	r0, 8015d6c <GL_DrawBitmap+0x74>
 8015d62:	2901      	cmp	r1, #1
 8015d64:	bf04      	itt	eq
 8015d66:	f8d8 3000 	ldreq.w	r3, [r8]
 8015d6a:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 8015d6c:	8863      	ldrh	r3, [r4, #2]
 8015d6e:	8822      	ldrh	r2, [r4, #0]
 8015d70:	9005      	str	r0, [sp, #20]
 8015d72:	68a0      	ldr	r0, [r4, #8]
 8015d74:	9004      	str	r0, [sp, #16]
 8015d76:	88a0      	ldrh	r0, [r4, #4]
 8015d78:	9102      	str	r1, [sp, #8]
 8015d7a:	2101      	movs	r1, #1
 8015d7c:	9003      	str	r0, [sp, #12]
 8015d7e:	4630      	mov	r0, r6
 8015d80:	9101      	str	r1, [sp, #4]
 8015d82:	9100      	str	r1, [sp, #0]
 8015d84:	4639      	mov	r1, r7
 8015d86:	f7f9 fa63 	bl	800f250 <LCD_DrawBitmap>
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	b006      	add	sp, #24
 8015d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d92:	f7f7 be4c 	b.w	800da2e <GUI_SetDrawMode>
 8015d96:	bf00      	nop
 8015d98:	20000008 	.word	0x20000008
 8015d9c:	20000018 	.word	0x20000018

08015da0 <GUI_DrawBitmap>:
 8015da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015da2:	4606      	mov	r6, r0
 8015da4:	4615      	mov	r5, r2
 8015da6:	460c      	mov	r4, r1
 8015da8:	f7f8 fbe2 	bl	800e570 <GUI_Lock>
 8015dac:	4b11      	ldr	r3, [pc, #68]	; (8015df4 <GUI_DrawBitmap+0x54>)
 8015dae:	4668      	mov	r0, sp
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015db6:	4414      	add	r4, r2
 8015db8:	441d      	add	r5, r3
 8015dba:	8833      	ldrh	r3, [r6, #0]
 8015dbc:	f8ad 4000 	strh.w	r4, [sp]
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	f8ad 5002 	strh.w	r5, [sp, #2]
 8015dc6:	4423      	add	r3, r4
 8015dc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015dcc:	8873      	ldrh	r3, [r6, #2]
 8015dce:	3b01      	subs	r3, #1
 8015dd0:	442b      	add	r3, r5
 8015dd2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015dd6:	f7fc fc03 	bl	80125e0 <WM__InitIVRSearch>
 8015dda:	b918      	cbnz	r0, 8015de4 <GUI_DrawBitmap+0x44>
 8015ddc:	f7f8 fbbe 	bl	800e55c <GUI_Unlock>
 8015de0:	b002      	add	sp, #8
 8015de2:	bd70      	pop	{r4, r5, r6, pc}
 8015de4:	462a      	mov	r2, r5
 8015de6:	4621      	mov	r1, r4
 8015de8:	4630      	mov	r0, r6
 8015dea:	f7ff ff85 	bl	8015cf8 <GL_DrawBitmap>
 8015dee:	f7fc fb35 	bl	801245c <WM__GetNextIVR>
 8015df2:	e7f2      	b.n	8015dda <GUI_DrawBitmap+0x3a>
 8015df4:	20000018 	.word	0x20000018

08015df8 <_DrawGradient>:
 8015df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dfc:	b08d      	sub	sp, #52	; 0x34
 8015dfe:	461c      	mov	r4, r3
 8015e00:	4605      	mov	r5, r0
 8015e02:	4689      	mov	r9, r1
 8015e04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015e06:	4616      	mov	r6, r2
 8015e08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015e0c:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8015e10:	9301      	str	r3, [sp, #4]
 8015e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015e14:	9300      	str	r3, [sp, #0]
 8015e16:	f7f7 fca4 	bl	800d762 <GUI_GetColor>
 8015e1a:	45d8      	cmp	r8, fp
 8015e1c:	9006      	str	r0, [sp, #24]
 8015e1e:	d10d      	bne.n	8015e3c <_DrawGradient+0x44>
 8015e20:	4640      	mov	r0, r8
 8015e22:	f7f9 fbe1 	bl	800f5e8 <LCD_SetColor>
 8015e26:	9b00      	ldr	r3, [sp, #0]
 8015e28:	b11b      	cbz	r3, 8015e32 <_DrawGradient+0x3a>
 8015e2a:	4623      	mov	r3, r4
 8015e2c:	4632      	mov	r2, r6
 8015e2e:	4649      	mov	r1, r9
 8015e30:	e091      	b.n	8015f56 <_DrawGradient+0x15e>
 8015e32:	4633      	mov	r3, r6
 8015e34:	4622      	mov	r2, r4
 8015e36:	4629      	mov	r1, r5
 8015e38:	4648      	mov	r0, r9
 8015e3a:	e08d      	b.n	8015f58 <_DrawGradient+0x160>
 8015e3c:	ebb4 0709 	subs.w	r7, r4, r9
 8015e40:	f000 80a2 	beq.w	8015f88 <_DrawGradient+0x190>
 8015e44:	fa5f f288 	uxtb.w	r2, r8
 8015e48:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8015e4c:	fa5f f38b 	uxtb.w	r3, fp
 8015e50:	9806      	ldr	r0, [sp, #24]
 8015e52:	f04f 0a01 	mov.w	sl, #1
 8015e56:	1a9b      	subs	r3, r3, r2
 8015e58:	9308      	str	r3, [sp, #32]
 8015e5a:	2302      	movs	r3, #2
 8015e5c:	fb97 f3f3 	sdiv	r3, r7, r3
 8015e60:	fb02 3207 	mla	r2, r2, r7, r3
 8015e64:	9202      	str	r2, [sp, #8]
 8015e66:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8015e6a:	1a89      	subs	r1, r1, r2
 8015e6c:	fb02 3207 	mla	r2, r2, r7, r3
 8015e70:	9109      	str	r1, [sp, #36]	; 0x24
 8015e72:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8015e76:	9203      	str	r2, [sp, #12]
 8015e78:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8015e7c:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8015e80:	1a89      	subs	r1, r1, r2
 8015e82:	fb02 3207 	mla	r2, r2, r7, r3
 8015e86:	fb08 3307 	mla	r3, r8, r7, r3
 8015e8a:	9204      	str	r2, [sp, #16]
 8015e8c:	ebc8 621b 	rsb	r2, r8, fp, lsr #24
 8015e90:	f109 38ff 	add.w	r8, r9, #4294967295
 8015e94:	910a      	str	r1, [sp, #40]	; 0x28
 8015e96:	920b      	str	r2, [sp, #44]	; 0x2c
 8015e98:	9305      	str	r3, [sp, #20]
 8015e9a:	f108 0b01 	add.w	fp, r8, #1
 8015e9e:	455c      	cmp	r4, fp
 8015ea0:	db4d      	blt.n	8015f3e <_DrawGradient+0x146>
 8015ea2:	9b02      	ldr	r3, [sp, #8]
 8015ea4:	45d9      	cmp	r9, fp
 8015ea6:	9a08      	ldr	r2, [sp, #32]
 8015ea8:	fb93 f1f7 	sdiv	r1, r3, r7
 8015eac:	4413      	add	r3, r2
 8015eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015eb0:	9302      	str	r3, [sp, #8]
 8015eb2:	9b03      	ldr	r3, [sp, #12]
 8015eb4:	fb93 fef7 	sdiv	lr, r3, r7
 8015eb8:	4413      	add	r3, r2
 8015eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ebc:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8015ec0:	9303      	str	r3, [sp, #12]
 8015ec2:	9b04      	ldr	r3, [sp, #16]
 8015ec4:	fb93 fcf7 	sdiv	ip, r3, r7
 8015ec8:	4413      	add	r3, r2
 8015eca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ecc:	9304      	str	r3, [sp, #16]
 8015ece:	9b05      	ldr	r3, [sp, #20]
 8015ed0:	fb93 f3f7 	sdiv	r3, r3, r7
 8015ed4:	9307      	str	r3, [sp, #28]
 8015ed6:	9b05      	ldr	r3, [sp, #20]
 8015ed8:	4413      	add	r3, r2
 8015eda:	9305      	str	r3, [sp, #20]
 8015edc:	9b07      	ldr	r3, [sp, #28]
 8015ede:	ea4f 6203 	mov.w	r2, r3, lsl #24
 8015ee2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8015ee6:	ea42 0301 	orr.w	r3, r2, r1
 8015eea:	9307      	str	r3, [sp, #28]
 8015eec:	da24      	bge.n	8015f38 <_DrawGradient+0x140>
 8015eee:	4298      	cmp	r0, r3
 8015ef0:	d102      	bne.n	8015ef8 <_DrawGradient+0x100>
 8015ef2:	f10a 0a01 	add.w	sl, sl, #1
 8015ef6:	e01f      	b.n	8015f38 <_DrawGradient+0x140>
 8015ef8:	f7f9 fb76 	bl	800f5e8 <LCD_SetColor>
 8015efc:	f1ba 0f01 	cmp.w	sl, #1
 8015f00:	d010      	beq.n	8015f24 <_DrawGradient+0x12c>
 8015f02:	9b00      	ldr	r3, [sp, #0]
 8015f04:	ebca 000b 	rsb	r0, sl, fp
 8015f08:	b123      	cbz	r3, 8015f14 <_DrawGradient+0x11c>
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	4643      	mov	r3, r8
 8015f0e:	4632      	mov	r2, r6
 8015f10:	4628      	mov	r0, r5
 8015f12:	e002      	b.n	8015f1a <_DrawGradient+0x122>
 8015f14:	4633      	mov	r3, r6
 8015f16:	4642      	mov	r2, r8
 8015f18:	4629      	mov	r1, r5
 8015f1a:	f7f9 f881 	bl	800f020 <LCD_FillRect>
 8015f1e:	f04f 0a01 	mov.w	sl, #1
 8015f22:	e009      	b.n	8015f38 <_DrawGradient+0x140>
 8015f24:	9b00      	ldr	r3, [sp, #0]
 8015f26:	4632      	mov	r2, r6
 8015f28:	b113      	cbz	r3, 8015f30 <_DrawGradient+0x138>
 8015f2a:	4641      	mov	r1, r8
 8015f2c:	4628      	mov	r0, r5
 8015f2e:	e001      	b.n	8015f34 <_DrawGradient+0x13c>
 8015f30:	4629      	mov	r1, r5
 8015f32:	4640      	mov	r0, r8
 8015f34:	9b01      	ldr	r3, [sp, #4]
 8015f36:	4798      	blx	r3
 8015f38:	46d8      	mov	r8, fp
 8015f3a:	9807      	ldr	r0, [sp, #28]
 8015f3c:	e7ad      	b.n	8015e9a <_DrawGradient+0xa2>
 8015f3e:	f7f9 fb53 	bl	800f5e8 <LCD_SetColor>
 8015f42:	f1ba 0f01 	cmp.w	sl, #1
 8015f46:	d00f      	beq.n	8015f68 <_DrawGradient+0x170>
 8015f48:	9b00      	ldr	r3, [sp, #0]
 8015f4a:	ebca 0004 	rsb	r0, sl, r4
 8015f4e:	b133      	cbz	r3, 8015f5e <_DrawGradient+0x166>
 8015f50:	4623      	mov	r3, r4
 8015f52:	4632      	mov	r2, r6
 8015f54:	1c41      	adds	r1, r0, #1
 8015f56:	4628      	mov	r0, r5
 8015f58:	f7f9 f862 	bl	800f020 <LCD_FillRect>
 8015f5c:	e00e      	b.n	8015f7c <_DrawGradient+0x184>
 8015f5e:	4633      	mov	r3, r6
 8015f60:	4622      	mov	r2, r4
 8015f62:	4629      	mov	r1, r5
 8015f64:	3001      	adds	r0, #1
 8015f66:	e7f7      	b.n	8015f58 <_DrawGradient+0x160>
 8015f68:	9b00      	ldr	r3, [sp, #0]
 8015f6a:	4632      	mov	r2, r6
 8015f6c:	b113      	cbz	r3, 8015f74 <_DrawGradient+0x17c>
 8015f6e:	4621      	mov	r1, r4
 8015f70:	4628      	mov	r0, r5
 8015f72:	e001      	b.n	8015f78 <_DrawGradient+0x180>
 8015f74:	4629      	mov	r1, r5
 8015f76:	4620      	mov	r0, r4
 8015f78:	9b01      	ldr	r3, [sp, #4]
 8015f7a:	4798      	blx	r3
 8015f7c:	9806      	ldr	r0, [sp, #24]
 8015f7e:	b00d      	add	sp, #52	; 0x34
 8015f80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f84:	f7f9 bb30 	b.w	800f5e8 <LCD_SetColor>
 8015f88:	b00d      	add	sp, #52	; 0x34
 8015f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015f90 <GUI_DrawGradientV>:
 8015f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f94:	b087      	sub	sp, #28
 8015f96:	4604      	mov	r4, r0
 8015f98:	4690      	mov	r8, r2
 8015f9a:	4699      	mov	r9, r3
 8015f9c:	460d      	mov	r5, r1
 8015f9e:	f7f8 fae7 	bl	800e570 <GUI_Lock>
 8015fa2:	4b16      	ldr	r3, [pc, #88]	; (8015ffc <GUI_DrawGradientV+0x6c>)
 8015fa4:	a804      	add	r0, sp, #16
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015fac:	4414      	add	r4, r2
 8015fae:	4490      	add	r8, r2
 8015fb0:	441d      	add	r5, r3
 8015fb2:	4499      	add	r9, r3
 8015fb4:	f8ad 4010 	strh.w	r4, [sp, #16]
 8015fb8:	f8ad 8014 	strh.w	r8, [sp, #20]
 8015fbc:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015fc0:	f8ad 9016 	strh.w	r9, [sp, #22]
 8015fc4:	f7fc fb0c 	bl	80125e0 <WM__InitIVRSearch>
 8015fc8:	b920      	cbnz	r0, 8015fd4 <GUI_DrawGradientV+0x44>
 8015fca:	f7f8 fac7 	bl	800e55c <GUI_Unlock>
 8015fce:	b007      	add	sp, #28
 8015fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd4:	2701      	movs	r7, #1
 8015fd6:	4e0a      	ldr	r6, [pc, #40]	; (8016000 <GUI_DrawGradientV+0x70>)
 8015fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fda:	4642      	mov	r2, r8
 8015fdc:	4629      	mov	r1, r5
 8015fde:	4620      	mov	r0, r4
 8015fe0:	9301      	str	r3, [sp, #4]
 8015fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fe4:	9703      	str	r7, [sp, #12]
 8015fe6:	9300      	str	r3, [sp, #0]
 8015fe8:	464b      	mov	r3, r9
 8015fea:	9602      	str	r6, [sp, #8]
 8015fec:	f7ff ff04 	bl	8015df8 <_DrawGradient>
 8015ff0:	f7fc fa34 	bl	801245c <WM__GetNextIVR>
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	d1ef      	bne.n	8015fd8 <GUI_DrawGradientV+0x48>
 8015ff8:	e7e7      	b.n	8015fca <GUI_DrawGradientV+0x3a>
 8015ffa:	bf00      	nop
 8015ffc:	20000018 	.word	0x20000018
 8016000:	0800ef7d 	.word	0x0800ef7d

08016004 <GUI_DrawGradientH>:
 8016004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016008:	b087      	sub	sp, #28
 801600a:	4605      	mov	r5, r0
 801600c:	4691      	mov	r9, r2
 801600e:	4698      	mov	r8, r3
 8016010:	460c      	mov	r4, r1
 8016012:	f7f8 faad 	bl	800e570 <GUI_Lock>
 8016016:	4b16      	ldr	r3, [pc, #88]	; (8016070 <GUI_DrawGradientH+0x6c>)
 8016018:	a804      	add	r0, sp, #16
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016020:	4415      	add	r5, r2
 8016022:	4491      	add	r9, r2
 8016024:	441c      	add	r4, r3
 8016026:	4498      	add	r8, r3
 8016028:	f8ad 5010 	strh.w	r5, [sp, #16]
 801602c:	f8ad 9014 	strh.w	r9, [sp, #20]
 8016030:	f8ad 4012 	strh.w	r4, [sp, #18]
 8016034:	f8ad 8016 	strh.w	r8, [sp, #22]
 8016038:	f7fc fad2 	bl	80125e0 <WM__InitIVRSearch>
 801603c:	b920      	cbnz	r0, 8016048 <GUI_DrawGradientH+0x44>
 801603e:	f7f8 fa8d 	bl	800e55c <GUI_Unlock>
 8016042:	b007      	add	sp, #28
 8016044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016048:	2700      	movs	r7, #0
 801604a:	4e0a      	ldr	r6, [pc, #40]	; (8016074 <GUI_DrawGradientH+0x70>)
 801604c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801604e:	4642      	mov	r2, r8
 8016050:	4629      	mov	r1, r5
 8016052:	4620      	mov	r0, r4
 8016054:	9301      	str	r3, [sp, #4]
 8016056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016058:	9703      	str	r7, [sp, #12]
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	464b      	mov	r3, r9
 801605e:	9602      	str	r6, [sp, #8]
 8016060:	f7ff feca 	bl	8015df8 <_DrawGradient>
 8016064:	f7fc f9fa 	bl	801245c <WM__GetNextIVR>
 8016068:	2800      	cmp	r0, #0
 801606a:	d1ef      	bne.n	801604c <GUI_DrawGradientH+0x48>
 801606c:	e7e7      	b.n	801603e <GUI_DrawGradientH+0x3a>
 801606e:	bf00      	nop
 8016070:	20000018 	.word	0x20000018
 8016074:	0800efcd 	.word	0x0800efcd

08016078 <GUI_DrawHLine>:
 8016078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801607c:	4f14      	ldr	r7, [pc, #80]	; (80160d0 <GUI_DrawHLine+0x58>)
 801607e:	4680      	mov	r8, r0
 8016080:	4616      	mov	r6, r2
 8016082:	460c      	mov	r4, r1
 8016084:	f7f8 fa74 	bl	800e570 <GUI_Lock>
 8016088:	683d      	ldr	r5, [r7, #0]
 801608a:	4668      	mov	r0, sp
 801608c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801608e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016090:	eb08 0502 	add.w	r5, r8, r2
 8016094:	441c      	add	r4, r3
 8016096:	441e      	add	r6, r3
 8016098:	b22b      	sxth	r3, r5
 801609a:	f8ad 4000 	strh.w	r4, [sp]
 801609e:	f8ad 6004 	strh.w	r6, [sp, #4]
 80160a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80160a6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80160aa:	f7fc fa99 	bl	80125e0 <WM__InitIVRSearch>
 80160ae:	b920      	cbnz	r0, 80160ba <GUI_DrawHLine+0x42>
 80160b0:	f7f8 fa54 	bl	800e55c <GUI_Unlock>
 80160b4:	b002      	add	sp, #8
 80160b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	4632      	mov	r2, r6
 80160be:	4629      	mov	r1, r5
 80160c0:	4620      	mov	r0, r4
 80160c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	4798      	blx	r3
 80160c8:	f7fc f9c8 	bl	801245c <WM__GetNextIVR>
 80160cc:	e7ef      	b.n	80160ae <GUI_DrawHLine+0x36>
 80160ce:	bf00      	nop
 80160d0:	20000018 	.word	0x20000018

080160d4 <GUI_DrawPixel>:
 80160d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160d6:	4e12      	ldr	r6, [pc, #72]	; (8016120 <GUI_DrawPixel+0x4c>)
 80160d8:	4604      	mov	r4, r0
 80160da:	460d      	mov	r5, r1
 80160dc:	f7f8 fa48 	bl	800e570 <GUI_Lock>
 80160e0:	6833      	ldr	r3, [r6, #0]
 80160e2:	4668      	mov	r0, sp
 80160e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80160e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160e8:	4414      	add	r4, r2
 80160ea:	441d      	add	r5, r3
 80160ec:	b223      	sxth	r3, r4
 80160ee:	f8ad 3004 	strh.w	r3, [sp, #4]
 80160f2:	f8ad 3000 	strh.w	r3, [sp]
 80160f6:	b22b      	sxth	r3, r5
 80160f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80160fc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016100:	f7fc fa6e 	bl	80125e0 <WM__InitIVRSearch>
 8016104:	b918      	cbnz	r0, 801610e <GUI_DrawPixel+0x3a>
 8016106:	f7f8 fa29 	bl	800e55c <GUI_Unlock>
 801610a:	b002      	add	sp, #8
 801610c:	bd70      	pop	{r4, r5, r6, pc}
 801610e:	6833      	ldr	r3, [r6, #0]
 8016110:	4629      	mov	r1, r5
 8016112:	4620      	mov	r0, r4
 8016114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	4798      	blx	r3
 801611a:	f7fc f99f 	bl	801245c <WM__GetNextIVR>
 801611e:	e7f1      	b.n	8016104 <GUI_DrawPixel+0x30>
 8016120:	20000018 	.word	0x20000018

08016124 <GUI_DrawVLine>:
 8016124:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016126:	4604      	mov	r4, r0
 8016128:	4616      	mov	r6, r2
 801612a:	460d      	mov	r5, r1
 801612c:	f7f8 fa20 	bl	800e570 <GUI_Lock>
 8016130:	4b0f      	ldr	r3, [pc, #60]	; (8016170 <GUI_DrawVLine+0x4c>)
 8016132:	4668      	mov	r0, sp
 8016134:	681a      	ldr	r2, [r3, #0]
 8016136:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8016138:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801613a:	441c      	add	r4, r3
 801613c:	4415      	add	r5, r2
 801613e:	4416      	add	r6, r2
 8016140:	b223      	sxth	r3, r4
 8016142:	f8ad 5002 	strh.w	r5, [sp, #2]
 8016146:	f8ad 3000 	strh.w	r3, [sp]
 801614a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801614e:	f8ad 6006 	strh.w	r6, [sp, #6]
 8016152:	f7fc fa45 	bl	80125e0 <WM__InitIVRSearch>
 8016156:	b918      	cbnz	r0, 8016160 <GUI_DrawVLine+0x3c>
 8016158:	f7f8 fa00 	bl	800e55c <GUI_Unlock>
 801615c:	b002      	add	sp, #8
 801615e:	bd70      	pop	{r4, r5, r6, pc}
 8016160:	4632      	mov	r2, r6
 8016162:	4629      	mov	r1, r5
 8016164:	4620      	mov	r0, r4
 8016166:	f7f8 ff31 	bl	800efcc <LCD_DrawVLine>
 801616a:	f7fc f977 	bl	801245c <WM__GetNextIVR>
 801616e:	e7f2      	b.n	8016156 <GUI_DrawVLine+0x32>
 8016170:	20000018 	.word	0x20000018

08016174 <GUI_FillRect>:
 8016174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016176:	4604      	mov	r4, r0
 8016178:	4616      	mov	r6, r2
 801617a:	461f      	mov	r7, r3
 801617c:	460d      	mov	r5, r1
 801617e:	f7f8 f9f7 	bl	800e570 <GUI_Lock>
 8016182:	4b10      	ldr	r3, [pc, #64]	; (80161c4 <GUI_FillRect+0x50>)
 8016184:	4668      	mov	r0, sp
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801618a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801618c:	4414      	add	r4, r2
 801618e:	4416      	add	r6, r2
 8016190:	441d      	add	r5, r3
 8016192:	441f      	add	r7, r3
 8016194:	f8ad 4000 	strh.w	r4, [sp]
 8016198:	f8ad 6004 	strh.w	r6, [sp, #4]
 801619c:	f8ad 5002 	strh.w	r5, [sp, #2]
 80161a0:	f8ad 7006 	strh.w	r7, [sp, #6]
 80161a4:	f7fc fa1c 	bl	80125e0 <WM__InitIVRSearch>
 80161a8:	b918      	cbnz	r0, 80161b2 <GUI_FillRect+0x3e>
 80161aa:	f7f8 f9d7 	bl	800e55c <GUI_Unlock>
 80161ae:	b003      	add	sp, #12
 80161b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161b2:	463b      	mov	r3, r7
 80161b4:	4632      	mov	r2, r6
 80161b6:	4629      	mov	r1, r5
 80161b8:	4620      	mov	r0, r4
 80161ba:	f7f8 ff31 	bl	800f020 <LCD_FillRect>
 80161be:	f7fc f94d 	bl	801245c <WM__GetNextIVR>
 80161c2:	e7f1      	b.n	80161a8 <GUI_FillRect+0x34>
 80161c4:	20000018 	.word	0x20000018

080161c8 <GUI_FillRectEx>:
 80161c8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80161cc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80161d0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80161d4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80161d8:	f7ff bfcc 	b.w	8016174 <GUI_FillRect>

080161dc <_OnExit>:
 80161dc:	4b03      	ldr	r3, [pc, #12]	; (80161ec <_OnExit+0x10>)
 80161de:	4a04      	ldr	r2, [pc, #16]	; (80161f0 <_OnExit+0x14>)
 80161e0:	6013      	str	r3, [r2, #0]
 80161e2:	6053      	str	r3, [r2, #4]
 80161e4:	2200      	movs	r2, #0
 80161e6:	649a      	str	r2, [r3, #72]	; 0x48
 80161e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80161ea:	4770      	bx	lr
 80161ec:	20000500 	.word	0x20000500
 80161f0:	20000118 	.word	0x20000118

080161f4 <GUI_PID_GetState>:
 80161f4:	4a11      	ldr	r2, [pc, #68]	; (801623c <GUI_PID_GetState+0x48>)
 80161f6:	6813      	ldr	r3, [r2, #0]
 80161f8:	6851      	ldr	r1, [r2, #4]
 80161fa:	428b      	cmp	r3, r1
 80161fc:	b570      	push	{r4, r5, r6, lr}
 80161fe:	4604      	mov	r4, r0
 8016200:	4616      	mov	r6, r2
 8016202:	4d0f      	ldr	r5, [pc, #60]	; (8016240 <GUI_PID_GetState+0x4c>)
 8016204:	d109      	bne.n	801621a <GUI_PID_GetState+0x26>
 8016206:	42ab      	cmp	r3, r5
 8016208:	bf0a      	itet	eq
 801620a:	333c      	addeq	r3, #60	; 0x3c
 801620c:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 8016210:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 8016214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016218:	e00a      	b.n	8016230 <GUI_PID_GetState+0x3c>
 801621a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801621e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016222:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8016226:	4293      	cmp	r3, r2
 8016228:	bf18      	it	ne
 801622a:	f103 050c 	addne.w	r5, r3, #12
 801622e:	6035      	str	r5, [r6, #0]
 8016230:	7a20      	ldrb	r0, [r4, #8]
 8016232:	3000      	adds	r0, #0
 8016234:	bf18      	it	ne
 8016236:	2001      	movne	r0, #1
 8016238:	bd70      	pop	{r4, r5, r6, pc}
 801623a:	bf00      	nop
 801623c:	20000118 	.word	0x20000118
 8016240:	20000500 	.word	0x20000500

08016244 <GUI_PID_StoreState>:
 8016244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016246:	4c27      	ldr	r4, [pc, #156]	; (80162e4 <GUI_PID_StoreState+0xa0>)
 8016248:	b085      	sub	sp, #20
 801624a:	4606      	mov	r6, r0
 801624c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801624e:	b92b      	cbnz	r3, 801625c <GUI_PID_StoreState+0x18>
 8016250:	4620      	mov	r0, r4
 8016252:	4b25      	ldr	r3, [pc, #148]	; (80162e8 <GUI_PID_StoreState+0xa4>)
 8016254:	f840 3f50 	str.w	r3, [r0, #80]!
 8016258:	f7f7 fe32 	bl	800dec0 <GUI__RegisterExit>
 801625c:	4a23      	ldr	r2, [pc, #140]	; (80162ec <GUI_PID_StoreState+0xa8>)
 801625e:	ad01      	add	r5, sp, #4
 8016260:	4b23      	ldr	r3, [pc, #140]	; (80162f0 <GUI_PID_StoreState+0xac>)
 8016262:	601a      	str	r2, [r3, #0]
 8016264:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8016266:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801626a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801626e:	b10b      	cbz	r3, 8016274 <GUI_PID_StoreState+0x30>
 8016270:	4628      	mov	r0, r5
 8016272:	4798      	blx	r3
 8016274:	4e1f      	ldr	r6, [pc, #124]	; (80162f4 <GUI_PID_StoreState+0xb0>)
 8016276:	f8df e080 	ldr.w	lr, [pc, #128]	; 80162f8 <GUI_PID_StoreState+0xb4>
 801627a:	6837      	ldr	r7, [r6, #0]
 801627c:	6873      	ldr	r3, [r6, #4]
 801627e:	429f      	cmp	r7, r3
 8016280:	d017      	beq.n	80162b2 <GUI_PID_StoreState+0x6e>
 8016282:	42a3      	cmp	r3, r4
 8016284:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8016288:	bf14      	ite	ne
 801628a:	f1a3 020c 	subne.w	r2, r3, #12
 801628e:	4672      	moveq	r2, lr
 8016290:	7a10      	ldrb	r0, [r2, #8]
 8016292:	4288      	cmp	r0, r1
 8016294:	d10d      	bne.n	80162b2 <GUI_PID_StoreState+0x6e>
 8016296:	4297      	cmp	r7, r2
 8016298:	d00b      	beq.n	80162b2 <GUI_PID_StoreState+0x6e>
 801629a:	42a2      	cmp	r2, r4
 801629c:	bf14      	ite	ne
 801629e:	3a0c      	subne	r2, #12
 80162a0:	4a15      	ldreq	r2, [pc, #84]	; (80162f8 <GUI_PID_StoreState+0xb4>)
 80162a2:	7a12      	ldrb	r2, [r2, #8]
 80162a4:	428a      	cmp	r2, r1
 80162a6:	d104      	bne.n	80162b2 <GUI_PID_StoreState+0x6e>
 80162a8:	42a3      	cmp	r3, r4
 80162aa:	bf14      	ite	ne
 80162ac:	3b0c      	subne	r3, #12
 80162ae:	4b12      	ldreq	r3, [pc, #72]	; (80162f8 <GUI_PID_StoreState+0xb4>)
 80162b0:	6073      	str	r3, [r6, #4]
 80162b2:	6873      	ldr	r3, [r6, #4]
 80162b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80162b8:	4573      	cmp	r3, lr
 80162ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80162be:	bf14      	ite	ne
 80162c0:	330c      	addne	r3, #12
 80162c2:	4b08      	ldreq	r3, [pc, #32]	; (80162e4 <GUI_PID_StoreState+0xa0>)
 80162c4:	429f      	cmp	r7, r3
 80162c6:	6073      	str	r3, [r6, #4]
 80162c8:	d104      	bne.n	80162d4 <GUI_PID_StoreState+0x90>
 80162ca:	4577      	cmp	r7, lr
 80162cc:	bf14      	ite	ne
 80162ce:	370c      	addne	r7, #12
 80162d0:	4f04      	ldreq	r7, [pc, #16]	; (80162e4 <GUI_PID_StoreState+0xa0>)
 80162d2:	6037      	str	r7, [r6, #0]
 80162d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80162d6:	b10b      	cbz	r3, 80162dc <GUI_PID_StoreState+0x98>
 80162d8:	4628      	mov	r0, r5
 80162da:	4798      	blx	r3
 80162dc:	f7f8 fa4a 	bl	800e774 <GUI_SignalEvent>
 80162e0:	b005      	add	sp, #20
 80162e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162e4:	20000500 	.word	0x20000500
 80162e8:	080161dd 	.word	0x080161dd
 80162ec:	080136a9 	.word	0x080136a9
 80162f0:	20022618 	.word	0x20022618
 80162f4:	20000118 	.word	0x20000118
 80162f8:	2000053c 	.word	0x2000053c

080162fc <GUI_PID_IsEmpty>:
 80162fc:	4b02      	ldr	r3, [pc, #8]	; (8016308 <GUI_PID_IsEmpty+0xc>)
 80162fe:	cb09      	ldmia	r3, {r0, r3}
 8016300:	1ac3      	subs	r3, r0, r3
 8016302:	4258      	negs	r0, r3
 8016304:	4158      	adcs	r0, r3
 8016306:	4770      	bx	lr
 8016308:	20000118 	.word	0x20000118

0801630c <_GetClipRect>:
 801630c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801630e:	4603      	mov	r3, r0
 8016310:	6802      	ldr	r2, [r0, #0]
 8016312:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8016316:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
 801631a:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 801631e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8016322:	6940      	ldr	r0, [r0, #20]
 8016324:	b9e0      	cbnz	r0, 8016360 <_GetClipRect+0x54>
 8016326:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 801632a:	4281      	cmp	r1, r0
 801632c:	db62      	blt.n	80163f4 <_GetClipRect+0xe8>
 801632e:	f9b2 4000 	ldrsh.w	r4, [r2]
 8016332:	42a5      	cmp	r5, r4
 8016334:	db5e      	blt.n	80163f4 <_GetClipRect+0xe8>
 8016336:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 801633a:	42a7      	cmp	r7, r4
 801633c:	dc5a      	bgt.n	80163f4 <_GetClipRect+0xe8>
 801633e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8016342:	42a6      	cmp	r6, r4
 8016344:	dc56      	bgt.n	80163f4 <_GetClipRect+0xe8>
 8016346:	4287      	cmp	r7, r0
 8016348:	da08      	bge.n	801635c <_GetClipRect+0x50>
 801634a:	80df      	strh	r7, [r3, #6]
 801634c:	2001      	movs	r0, #1
 801634e:	8852      	ldrh	r2, [r2, #2]
 8016350:	809e      	strh	r6, [r3, #4]
 8016352:	3a01      	subs	r2, #1
 8016354:	811d      	strh	r5, [r3, #8]
 8016356:	6158      	str	r0, [r3, #20]
 8016358:	815a      	strh	r2, [r3, #10]
 801635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801635c:	2001      	movs	r0, #1
 801635e:	6158      	str	r0, [r3, #20]
 8016360:	6958      	ldr	r0, [r3, #20]
 8016362:	2801      	cmp	r0, #1
 8016364:	d118      	bne.n	8016398 <_GetClipRect+0x8c>
 8016366:	f9b2 4000 	ldrsh.w	r4, [r2]
 801636a:	42a6      	cmp	r6, r4
 801636c:	da12      	bge.n	8016394 <_GetClipRect+0x88>
 801636e:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8016372:	809e      	strh	r6, [r3, #4]
 8016374:	42bc      	cmp	r4, r7
 8016376:	8815      	ldrh	r5, [r2, #0]
 8016378:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801637c:	bfb8      	it	lt
 801637e:	463c      	movlt	r4, r7
 8016380:	3d01      	subs	r5, #1
 8016382:	4291      	cmp	r1, r2
 8016384:	811d      	strh	r5, [r3, #8]
 8016386:	bfa8      	it	ge
 8016388:	4611      	movge	r1, r2
 801638a:	2202      	movs	r2, #2
 801638c:	80dc      	strh	r4, [r3, #6]
 801638e:	8159      	strh	r1, [r3, #10]
 8016390:	615a      	str	r2, [r3, #20]
 8016392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016394:	2002      	movs	r0, #2
 8016396:	6158      	str	r0, [r3, #20]
 8016398:	6958      	ldr	r0, [r3, #20]
 801639a:	2802      	cmp	r0, #2
 801639c:	d118      	bne.n	80163d0 <_GetClipRect+0xc4>
 801639e:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 80163a2:	4285      	cmp	r5, r0
 80163a4:	dd12      	ble.n	80163cc <_GetClipRect+0xc0>
 80163a6:	811d      	strh	r5, [r3, #8]
 80163a8:	4638      	mov	r0, r7
 80163aa:	8894      	ldrh	r4, [r2, #4]
 80163ac:	3401      	adds	r4, #1
 80163ae:	809c      	strh	r4, [r3, #4]
 80163b0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80163b4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80163b8:	42a7      	cmp	r7, r4
 80163ba:	bfb8      	it	lt
 80163bc:	4620      	movlt	r0, r4
 80163be:	4291      	cmp	r1, r2
 80163c0:	bfa8      	it	ge
 80163c2:	4611      	movge	r1, r2
 80163c4:	80d8      	strh	r0, [r3, #6]
 80163c6:	2203      	movs	r2, #3
 80163c8:	8159      	strh	r1, [r3, #10]
 80163ca:	e00e      	b.n	80163ea <_GetClipRect+0xde>
 80163cc:	2003      	movs	r0, #3
 80163ce:	6158      	str	r0, [r3, #20]
 80163d0:	6958      	ldr	r0, [r3, #20]
 80163d2:	2803      	cmp	r0, #3
 80163d4:	d10e      	bne.n	80163f4 <_GetClipRect+0xe8>
 80163d6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80163da:	4291      	cmp	r1, r2
 80163dc:	dd08      	ble.n	80163f0 <_GetClipRect+0xe4>
 80163de:	3201      	adds	r2, #1
 80163e0:	8159      	strh	r1, [r3, #10]
 80163e2:	809e      	strh	r6, [r3, #4]
 80163e4:	80da      	strh	r2, [r3, #6]
 80163e6:	2204      	movs	r2, #4
 80163e8:	811d      	strh	r5, [r3, #8]
 80163ea:	615a      	str	r2, [r3, #20]
 80163ec:	2001      	movs	r0, #1
 80163ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163f0:	2204      	movs	r2, #4
 80163f2:	615a      	str	r2, [r3, #20]
 80163f4:	2000      	movs	r0, #0
 80163f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163f8 <_GetClipParam>:
 80163f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80163fe:	eb01 0e03 	add.w	lr, r1, r3
 8016402:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016404:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 8016408:	f10e 3eff 	add.w	lr, lr, #4294967295
 801640c:	60a1      	str	r1, [r4, #8]
 801640e:	ebc1 0108 	rsb	r1, r1, r8
 8016412:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016416:	9d06      	ldr	r5, [sp, #24]
 8016418:	2900      	cmp	r1, #0
 801641a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801641c:	6060      	str	r0, [r4, #4]
 801641e:	60e2      	str	r2, [r4, #12]
 8016420:	6123      	str	r3, [r4, #16]
 8016422:	f8c4 c014 	str.w	ip, [r4, #20]
 8016426:	6021      	str	r1, [r4, #0]
 8016428:	dd0c      	ble.n	8016444 <_GetClipParam+0x4c>
 801642a:	1a5b      	subs	r3, r3, r1
 801642c:	2b00      	cmp	r3, #0
 801642e:	6123      	str	r3, [r4, #16]
 8016430:	dc02      	bgt.n	8016438 <_GetClipParam+0x40>
 8016432:	2001      	movs	r0, #1
 8016434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016438:	9b07      	ldr	r3, [sp, #28]
 801643a:	f8c4 8008 	str.w	r8, [r4, #8]
 801643e:	fb03 c101 	mla	r1, r3, r1, ip
 8016442:	6161      	str	r1, [r4, #20]
 8016444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016448:	ebc3 030e 	rsb	r3, r3, lr
 801644c:	2b00      	cmp	r3, #0
 801644e:	6023      	str	r3, [r4, #0]
 8016450:	dc0a      	bgt.n	8016468 <_GetClipParam+0x70>
 8016452:	1883      	adds	r3, r0, r2
 8016454:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016458:	3b01      	subs	r3, #1
 801645a:	1a5b      	subs	r3, r3, r1
 801645c:	2b00      	cmp	r3, #0
 801645e:	6023      	str	r3, [r4, #0]
 8016460:	dd08      	ble.n	8016474 <_GetClipParam+0x7c>
 8016462:	1ad2      	subs	r2, r2, r3
 8016464:	60e2      	str	r2, [r4, #12]
 8016466:	e005      	b.n	8016474 <_GetClipParam+0x7c>
 8016468:	6921      	ldr	r1, [r4, #16]
 801646a:	1acb      	subs	r3, r1, r3
 801646c:	2b00      	cmp	r3, #0
 801646e:	6123      	str	r3, [r4, #16]
 8016470:	dcef      	bgt.n	8016452 <_GetClipParam+0x5a>
 8016472:	e7de      	b.n	8016432 <_GetClipParam+0x3a>
 8016474:	f9b7 7000 	ldrsh.w	r7, [r7]
 8016478:	6026      	str	r6, [r4, #0]
 801647a:	42b8      	cmp	r0, r7
 801647c:	da44      	bge.n	8016508 <_GetClipParam+0x110>
 801647e:	68e2      	ldr	r2, [r4, #12]
 8016480:	1a3b      	subs	r3, r7, r0
 8016482:	2d08      	cmp	r5, #8
 8016484:	4416      	add	r6, r2
 8016486:	6023      	str	r3, [r4, #0]
 8016488:	eba6 0603 	sub.w	r6, r6, r3
 801648c:	60e6      	str	r6, [r4, #12]
 801648e:	d031      	beq.n	80164f4 <_GetClipParam+0xfc>
 8016490:	dc10      	bgt.n	80164b4 <_GetClipParam+0xbc>
 8016492:	2d02      	cmp	r5, #2
 8016494:	d018      	beq.n	80164c8 <_GetClipParam+0xd0>
 8016496:	2d04      	cmp	r5, #4
 8016498:	d021      	beq.n	80164de <_GetClipParam+0xe6>
 801649a:	2d01      	cmp	r5, #1
 801649c:	d134      	bne.n	8016508 <_GetClipParam+0x110>
 801649e:	6962      	ldr	r2, [r4, #20]
 80164a0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80164a4:	6162      	str	r2, [r4, #20]
 80164a6:	f023 0207 	bic.w	r2, r3, #7
 80164aa:	f003 0307 	and.w	r3, r3, #7
 80164ae:	4410      	add	r0, r2
 80164b0:	6060      	str	r0, [r4, #4]
 80164b2:	e028      	b.n	8016506 <_GetClipParam+0x10e>
 80164b4:	2d18      	cmp	r5, #24
 80164b6:	d020      	beq.n	80164fa <_GetClipParam+0x102>
 80164b8:	2d20      	cmp	r5, #32
 80164ba:	d01e      	beq.n	80164fa <_GetClipParam+0x102>
 80164bc:	2d10      	cmp	r5, #16
 80164be:	d123      	bne.n	8016508 <_GetClipParam+0x110>
 80164c0:	6962      	ldr	r2, [r4, #20]
 80164c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80164c6:	e01b      	b.n	8016500 <_GetClipParam+0x108>
 80164c8:	6962      	ldr	r2, [r4, #20]
 80164ca:	eb02 0293 	add.w	r2, r2, r3, lsr #2
 80164ce:	6162      	str	r2, [r4, #20]
 80164d0:	f023 0203 	bic.w	r2, r3, #3
 80164d4:	f003 0303 	and.w	r3, r3, #3
 80164d8:	4410      	add	r0, r2
 80164da:	6060      	str	r0, [r4, #4]
 80164dc:	e013      	b.n	8016506 <_GetClipParam+0x10e>
 80164de:	6962      	ldr	r2, [r4, #20]
 80164e0:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80164e4:	6162      	str	r2, [r4, #20]
 80164e6:	f023 0201 	bic.w	r2, r3, #1
 80164ea:	f003 0301 	and.w	r3, r3, #1
 80164ee:	4410      	add	r0, r2
 80164f0:	6060      	str	r0, [r4, #4]
 80164f2:	e008      	b.n	8016506 <_GetClipParam+0x10e>
 80164f4:	6962      	ldr	r2, [r4, #20]
 80164f6:	4413      	add	r3, r2
 80164f8:	e002      	b.n	8016500 <_GetClipParam+0x108>
 80164fa:	6962      	ldr	r2, [r4, #20]
 80164fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016500:	6163      	str	r3, [r4, #20]
 8016502:	2300      	movs	r3, #0
 8016504:	6067      	str	r7, [r4, #4]
 8016506:	6023      	str	r3, [r4, #0]
 8016508:	e894 000c 	ldmia.w	r4, {r2, r3}
 801650c:	4413      	add	r3, r2
 801650e:	68e2      	ldr	r2, [r4, #12]
 8016510:	441a      	add	r2, r3
 8016512:	4291      	cmp	r1, r2
 8016514:	bfbe      	ittt	lt
 8016516:	1ac9      	sublt	r1, r1, r3
 8016518:	3101      	addlt	r1, #1
 801651a:	60e1      	strlt	r1, [r4, #12]
 801651c:	68e0      	ldr	r0, [r4, #12]
 801651e:	2800      	cmp	r0, #0
 8016520:	bfcc      	ite	gt
 8016522:	2000      	movgt	r0, #0
 8016524:	2001      	movle	r0, #1
 8016526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801652a <_GetDevData>:
 801652a:	2000      	movs	r0, #0
 801652c:	4770      	bx	lr

0801652e <_SetOrg>:
 801652e:	6800      	ldr	r0, [r0, #0]
 8016530:	b110      	cbz	r0, 8016538 <_SetOrg+0xa>
 8016532:	68c3      	ldr	r3, [r0, #12]
 8016534:	6a1b      	ldr	r3, [r3, #32]
 8016536:	4718      	bx	r3
 8016538:	4770      	bx	lr

0801653a <_GetDevFunc>:
 801653a:	6803      	ldr	r3, [r0, #0]
 801653c:	b513      	push	{r0, r1, r4, lr}
 801653e:	4604      	mov	r4, r0
 8016540:	9301      	str	r3, [sp, #4]
 8016542:	b90b      	cbnz	r3, 8016548 <_GetDevFunc+0xe>
 8016544:	2000      	movs	r0, #0
 8016546:	e00a      	b.n	801655e <_GetDevFunc+0x24>
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	9301      	str	r3, [sp, #4]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d0f9      	beq.n	8016544 <_GetDevFunc+0xa>
 8016550:	68db      	ldr	r3, [r3, #12]
 8016552:	a801      	add	r0, sp, #4
 8016554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016556:	4798      	blx	r3
 8016558:	b108      	cbz	r0, 801655e <_GetDevFunc+0x24>
 801655a:	9b01      	ldr	r3, [sp, #4]
 801655c:	6023      	str	r3, [r4, #0]
 801655e:	b002      	add	sp, #8
 8016560:	bd10      	pop	{r4, pc}

08016562 <_GetDevProp>:
 8016562:	6800      	ldr	r0, [r0, #0]
 8016564:	b110      	cbz	r0, 801656c <_GetDevProp+0xa>
 8016566:	68c3      	ldr	r3, [r0, #12]
 8016568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801656a:	4718      	bx	r3
 801656c:	4770      	bx	lr

0801656e <_GetRect>:
 801656e:	6800      	ldr	r0, [r0, #0]
 8016570:	b110      	cbz	r0, 8016578 <_GetRect+0xa>
 8016572:	68c3      	ldr	r3, [r0, #12]
 8016574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016576:	4718      	bx	r3
 8016578:	4770      	bx	lr

0801657a <_PixelExists>:
 801657a:	b538      	push	{r3, r4, r5, lr}
 801657c:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8016580:	4603      	mov	r3, r0
 8016582:	4614      	mov	r4, r2
 8016584:	4285      	cmp	r5, r0
 8016586:	dc1a      	bgt.n	80165be <_PixelExists+0x44>
 8016588:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801658c:	428a      	cmp	r2, r1
 801658e:	dc16      	bgt.n	80165be <_PixelExists+0x44>
 8016590:	6960      	ldr	r0, [r4, #20]
 8016592:	1b5b      	subs	r3, r3, r5
 8016594:	8805      	ldrh	r5, [r0, #0]
 8016596:	42ab      	cmp	r3, r5
 8016598:	da11      	bge.n	80165be <_PixelExists+0x44>
 801659a:	1a8a      	subs	r2, r1, r2
 801659c:	8841      	ldrh	r1, [r0, #2]
 801659e:	428a      	cmp	r2, r1
 80165a0:	da0d      	bge.n	80165be <_PixelExists+0x44>
 80165a2:	4619      	mov	r1, r3
 80165a4:	f7f7 f9c3 	bl	800d92e <GUI_GetBitmapPixelIndex>
 80165a8:	68e3      	ldr	r3, [r4, #12]
 80165aa:	b11b      	cbz	r3, 80165b4 <_PixelExists+0x3a>
 80165ac:	3000      	adds	r0, #0
 80165ae:	bf18      	it	ne
 80165b0:	2001      	movne	r0, #1
 80165b2:	bd38      	pop	{r3, r4, r5, pc}
 80165b4:	0e03      	lsrs	r3, r0, #24
 80165b6:	bf14      	ite	ne
 80165b8:	2001      	movne	r0, #1
 80165ba:	2000      	moveq	r0, #0
 80165bc:	bd38      	pop	{r3, r4, r5, pc}
 80165be:	2000      	movs	r0, #0
 80165c0:	bd38      	pop	{r3, r4, r5, pc}

080165c2 <_GetPixelIndex>:
 80165c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80165c6:	460d      	mov	r5, r1
 80165c8:	4616      	mov	r6, r2
 80165ca:	4604      	mov	r4, r0
 80165cc:	6880      	ldr	r0, [r0, #8]
 80165ce:	f7f6 fe7f 	bl	800d2d0 <GUI_ALLOC_LockH>
 80165d2:	4631      	mov	r1, r6
 80165d4:	9001      	str	r0, [sp, #4]
 80165d6:	4602      	mov	r2, r0
 80165d8:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80165dc:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80165e0:	4628      	mov	r0, r5
 80165e2:	6824      	ldr	r4, [r4, #0]
 80165e4:	f7ff ffc9 	bl	801657a <_PixelExists>
 80165e8:	b178      	cbz	r0, 801660a <_GetPixelIndex+0x48>
 80165ea:	9c01      	ldr	r4, [sp, #4]
 80165ec:	ebc8 0707 	rsb	r7, r8, r7
 80165f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80165f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80165f8:	1af2      	subs	r2, r6, r3
 80165fa:	1a69      	subs	r1, r5, r1
 80165fc:	fb07 2202 	mla	r2, r7, r2, r2
 8016600:	440a      	add	r2, r1
 8016602:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8016606:	6a24      	ldr	r4, [r4, #32]
 8016608:	e006      	b.n	8016618 <_GetPixelIndex+0x56>
 801660a:	68e3      	ldr	r3, [r4, #12]
 801660c:	4620      	mov	r0, r4
 801660e:	4632      	mov	r2, r6
 8016610:	4629      	mov	r1, r5
 8016612:	695b      	ldr	r3, [r3, #20]
 8016614:	4798      	blx	r3
 8016616:	4604      	mov	r4, r0
 8016618:	a801      	add	r0, sp, #4
 801661a:	f7f6 fe67 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801661e:	4620      	mov	r0, r4
 8016620:	b002      	add	sp, #8
 8016622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016628 <_XorPixel>:
 8016628:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801662c:	460e      	mov	r6, r1
 801662e:	4617      	mov	r7, r2
 8016630:	4605      	mov	r5, r0
 8016632:	6880      	ldr	r0, [r0, #8]
 8016634:	f7f6 fe4c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8016638:	4639      	mov	r1, r7
 801663a:	4602      	mov	r2, r0
 801663c:	9001      	str	r0, [sp, #4]
 801663e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8016642:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8016646:	4630      	mov	r0, r6
 8016648:	682d      	ldr	r5, [r5, #0]
 801664a:	f7ff ff96 	bl	801657a <_PixelExists>
 801664e:	2800      	cmp	r0, #0
 8016650:	d04a      	beq.n	80166e8 <_XorPixel+0xc0>
 8016652:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016656:	ebc9 0204 	rsb	r2, r9, r4
 801665a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801665e:	1afc      	subs	r4, r7, r3
 8016660:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8016664:	fb02 4404 	mla	r4, r2, r4, r4
 8016668:	1af3      	subs	r3, r6, r3
 801666a:	441c      	add	r4, r3
 801666c:	692b      	ldr	r3, [r5, #16]
 801666e:	00a4      	lsls	r4, r4, #2
 8016670:	689b      	ldr	r3, [r3, #8]
 8016672:	4798      	blx	r3
 8016674:	3420      	adds	r4, #32
 8016676:	f858 3004 	ldr.w	r3, [r8, r4]
 801667a:	4058      	eors	r0, r3
 801667c:	9b01      	ldr	r3, [sp, #4]
 801667e:	f848 0004 	str.w	r0, [r8, r4]
 8016682:	68da      	ldr	r2, [r3, #12]
 8016684:	2a00      	cmp	r2, #0
 8016686:	d135      	bne.n	80166f4 <_XorPixel+0xcc>
 8016688:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801668c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016690:	6958      	ldr	r0, [r3, #20]
 8016692:	1aba      	subs	r2, r7, r2
 8016694:	1a71      	subs	r1, r6, r1
 8016696:	f7f7 f94a 	bl	800d92e <GUI_GetBitmapPixelIndex>
 801669a:	4682      	mov	sl, r0
 801669c:	0e03      	lsrs	r3, r0, #24
 801669e:	2bff      	cmp	r3, #255	; 0xff
 80166a0:	d028      	beq.n	80166f4 <_XorPixel+0xcc>
 80166a2:	9b01      	ldr	r3, [sp, #4]
 80166a4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8016704 <_XorPixel+0xdc>
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	f858 0004 	ldr.w	r0, [r8, r4]
 80166ae:	699b      	ldr	r3, [r3, #24]
 80166b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80166b4:	691b      	ldr	r3, [r3, #16]
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	4798      	blx	r3
 80166ba:	4b11      	ldr	r3, [pc, #68]	; (8016700 <_XorPixel+0xd8>)
 80166bc:	f040 417f 	orr.w	r1, r0, #4278190080	; 0xff000000
 80166c0:	22ff      	movs	r2, #255	; 0xff
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4650      	mov	r0, sl
 80166c6:	4798      	blx	r3
 80166c8:	9b01      	ldr	r3, [sp, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	699b      	ldr	r3, [r3, #24]
 80166ce:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80166d2:	691b      	ldr	r3, [r3, #16]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	4798      	blx	r3
 80166d8:	68eb      	ldr	r3, [r5, #12]
 80166da:	463a      	mov	r2, r7
 80166dc:	4631      	mov	r1, r6
 80166de:	699c      	ldr	r4, [r3, #24]
 80166e0:	4603      	mov	r3, r0
 80166e2:	4628      	mov	r0, r5
 80166e4:	47a0      	blx	r4
 80166e6:	e005      	b.n	80166f4 <_XorPixel+0xcc>
 80166e8:	68eb      	ldr	r3, [r5, #12]
 80166ea:	463a      	mov	r2, r7
 80166ec:	4631      	mov	r1, r6
 80166ee:	4628      	mov	r0, r5
 80166f0:	69db      	ldr	r3, [r3, #28]
 80166f2:	4798      	blx	r3
 80166f4:	a801      	add	r0, sp, #4
 80166f6:	f7f6 fdf9 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80166fa:	b002      	add	sp, #8
 80166fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016700:	20000030 	.word	0x20000030
 8016704:	2002260c 	.word	0x2002260c

08016708 <_SetPixelIndex>:
 8016708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801670c:	460c      	mov	r4, r1
 801670e:	4615      	mov	r5, r2
 8016710:	4606      	mov	r6, r0
 8016712:	6880      	ldr	r0, [r0, #8]
 8016714:	461f      	mov	r7, r3
 8016716:	f7f6 fddb 	bl	800d2d0 <GUI_ALLOC_LockH>
 801671a:	4629      	mov	r1, r5
 801671c:	9001      	str	r0, [sp, #4]
 801671e:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 8016722:	4602      	mov	r2, r0
 8016724:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8016728:	4620      	mov	r0, r4
 801672a:	6836      	ldr	r6, [r6, #0]
 801672c:	f7ff ff25 	bl	801657a <_PixelExists>
 8016730:	2800      	cmp	r0, #0
 8016732:	d03e      	beq.n	80167b2 <_SetPixelIndex+0xaa>
 8016734:	9801      	ldr	r0, [sp, #4]
 8016736:	ebc9 0808 	rsb	r8, r9, r8
 801673a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801673e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016742:	1aea      	subs	r2, r5, r3
 8016744:	1a61      	subs	r1, r4, r1
 8016746:	fb08 2202 	mla	r2, r8, r2, r2
 801674a:	440a      	add	r2, r1
 801674c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8016750:	6217      	str	r7, [r2, #32]
 8016752:	68c3      	ldr	r3, [r0, #12]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d134      	bne.n	80167c2 <_SetPixelIndex+0xba>
 8016758:	6803      	ldr	r3, [r0, #0]
 801675a:	4638      	mov	r0, r7
 801675c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80167d4 <_SetPixelIndex+0xcc>
 8016760:	699b      	ldr	r3, [r3, #24]
 8016762:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016766:	691b      	ldr	r3, [r3, #16]
 8016768:	685b      	ldr	r3, [r3, #4]
 801676a:	4798      	blx	r3
 801676c:	9b01      	ldr	r3, [sp, #4]
 801676e:	4607      	mov	r7, r0
 8016770:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016774:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016778:	6958      	ldr	r0, [r3, #20]
 801677a:	1aaa      	subs	r2, r5, r2
 801677c:	1a61      	subs	r1, r4, r1
 801677e:	f7f7 f8d6 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016782:	0e03      	lsrs	r3, r0, #24
 8016784:	2bff      	cmp	r3, #255	; 0xff
 8016786:	d01c      	beq.n	80167c2 <_SetPixelIndex+0xba>
 8016788:	4b11      	ldr	r3, [pc, #68]	; (80167d0 <_SetPixelIndex+0xc8>)
 801678a:	4639      	mov	r1, r7
 801678c:	22ff      	movs	r2, #255	; 0xff
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	4798      	blx	r3
 8016792:	9b01      	ldr	r3, [sp, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	699b      	ldr	r3, [r3, #24]
 8016798:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801679c:	691b      	ldr	r3, [r3, #16]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	4798      	blx	r3
 80167a2:	68f3      	ldr	r3, [r6, #12]
 80167a4:	462a      	mov	r2, r5
 80167a6:	4621      	mov	r1, r4
 80167a8:	699f      	ldr	r7, [r3, #24]
 80167aa:	4603      	mov	r3, r0
 80167ac:	4630      	mov	r0, r6
 80167ae:	47b8      	blx	r7
 80167b0:	e007      	b.n	80167c2 <_SetPixelIndex+0xba>
 80167b2:	68f3      	ldr	r3, [r6, #12]
 80167b4:	462a      	mov	r2, r5
 80167b6:	4621      	mov	r1, r4
 80167b8:	4630      	mov	r0, r6
 80167ba:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80167be:	463b      	mov	r3, r7
 80167c0:	47c0      	blx	r8
 80167c2:	a801      	add	r0, sp, #4
 80167c4:	f7f6 fd92 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80167c8:	b003      	add	sp, #12
 80167ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167ce:	bf00      	nop
 80167d0:	20000030 	.word	0x20000030
 80167d4:	2002260c 	.word	0x2002260c

080167d8 <_FillRect>:
 80167d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167dc:	b08f      	sub	sp, #60	; 0x3c
 80167de:	4604      	mov	r4, r0
 80167e0:	460e      	mov	r6, r1
 80167e2:	4690      	mov	r8, r2
 80167e4:	2100      	movs	r1, #0
 80167e6:	2218      	movs	r2, #24
 80167e8:	a808      	add	r0, sp, #32
 80167ea:	469a      	mov	sl, r3
 80167ec:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80167ee:	f005 f852 	bl	801b896 <memset>
 80167f2:	68a0      	ldr	r0, [r4, #8]
 80167f4:	f7f6 fd6c 	bl	800d2d0 <GUI_ALLOC_LockH>
 80167f8:	1d01      	adds	r1, r0, #4
 80167fa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80167fe:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 8016802:	9005      	str	r0, [sp, #20]
 8016804:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8016808:	a80b      	add	r0, sp, #44	; 0x2c
 801680a:	9108      	str	r1, [sp, #32]
 801680c:	6824      	ldr	r4, [r4, #0]
 801680e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8016812:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
 8016816:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 801681a:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
 801681e:	f7f7 f8b1 	bl	800d984 <GUI_RectsIntersect>
 8016822:	2800      	cmp	r0, #0
 8016824:	f000 80ba 	beq.w	801699c <_FillRect+0x1c4>
 8016828:	a808      	add	r0, sp, #32
 801682a:	f7ff fd6f 	bl	801630c <_GetClipRect>
 801682e:	b168      	cbz	r0, 801684c <_FillRect+0x74>
 8016830:	68e0      	ldr	r0, [r4, #12]
 8016832:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8016836:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801683a:	9600      	str	r6, [sp, #0]
 801683c:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8016840:	6906      	ldr	r6, [r0, #16]
 8016842:	4620      	mov	r0, r4
 8016844:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8016848:	47b0      	blx	r6
 801684a:	e7ed      	b.n	8016828 <_FillRect+0x50>
 801684c:	9a08      	ldr	r2, [sp, #32]
 801684e:	ab06      	add	r3, sp, #24
 8016850:	6810      	ldr	r0, [r2, #0]
 8016852:	6851      	ldr	r1, [r2, #4]
 8016854:	c303      	stmia	r3!, {r0, r1}
 8016856:	a90b      	add	r1, sp, #44	; 0x2c
 8016858:	a806      	add	r0, sp, #24
 801685a:	f7f7 f893 	bl	800d984 <GUI_RectsIntersect>
 801685e:	2800      	cmp	r0, #0
 8016860:	f000 80a4 	beq.w	80169ac <_FillRect+0x1d4>
 8016864:	a90b      	add	r1, sp, #44	; 0x2c
 8016866:	a806      	add	r0, sp, #24
 8016868:	f7f8 fab9 	bl	800edde <GUI__IntersectRect>
 801686c:	4a52      	ldr	r2, [pc, #328]	; (80169b8 <_FillRect+0x1e0>)
 801686e:	ebcb 0705 	rsb	r7, fp, r5
 8016872:	6813      	ldr	r3, [r2, #0]
 8016874:	4692      	mov	sl, r2
 8016876:	3701      	adds	r7, #1
 8016878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801687a:	f8d3 8000 	ldr.w	r8, [r3]
 801687e:	9b05      	ldr	r3, [sp, #20]
 8016880:	68d9      	ldr	r1, [r3, #12]
 8016882:	b3a1      	cbz	r1, 80168ee <_FillRect+0x116>
 8016884:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8016888:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801688c:	429d      	cmp	r5, r3
 801688e:	f300 808d 	bgt.w	80169ac <_FillRect+0x1d4>
 8016892:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8016896:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801689a:	429e      	cmp	r6, r3
 801689c:	dc25      	bgt.n	80168ea <_FillRect+0x112>
 801689e:	9b05      	ldr	r3, [sp, #20]
 80168a0:	4648      	mov	r0, r9
 80168a2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80168a6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80168aa:	1aaa      	subs	r2, r5, r2
 80168ac:	1a71      	subs	r1, r6, r1
 80168ae:	f7f7 f83e 	bl	800d92e <GUI_GetBitmapPixelIndex>
 80168b2:	b168      	cbz	r0, 80168d0 <_FillRect+0xf8>
 80168b4:	9b05      	ldr	r3, [sp, #20]
 80168b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80168ba:	1aa9      	subs	r1, r5, r2
 80168bc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80168c0:	1ab2      	subs	r2, r6, r2
 80168c2:	fb07 2201 	mla	r2, r7, r1, r2
 80168c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80168ca:	f8c3 8020 	str.w	r8, [r3, #32]
 80168ce:	e00a      	b.n	80168e6 <_FillRect+0x10e>
 80168d0:	f8da 3000 	ldr.w	r3, [sl]
 80168d4:	4631      	mov	r1, r6
 80168d6:	68e2      	ldr	r2, [r4, #12]
 80168d8:	4620      	mov	r0, r4
 80168da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168dc:	f8d2 b018 	ldr.w	fp, [r2, #24]
 80168e0:	462a      	mov	r2, r5
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	47d8      	blx	fp
 80168e6:	3601      	adds	r6, #1
 80168e8:	e7d5      	b.n	8016896 <_FillRect+0xbe>
 80168ea:	3501      	adds	r5, #1
 80168ec:	e7cc      	b.n	8016888 <_FillRect+0xb0>
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	4640      	mov	r0, r8
 80168f2:	4e32      	ldr	r6, [pc, #200]	; (80169bc <_FillRect+0x1e4>)
 80168f4:	699b      	ldr	r3, [r3, #24]
 80168f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80169c0 <_FillRect+0x1e8>
 80168fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80168fe:	691b      	ldr	r3, [r3, #16]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	4798      	blx	r3
 8016904:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8016908:	9002      	str	r0, [sp, #8]
 801690a:	9603      	str	r6, [sp, #12]
 801690c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016910:	429d      	cmp	r5, r3
 8016912:	dc4b      	bgt.n	80169ac <_FillRect+0x1d4>
 8016914:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8016918:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801691c:	429e      	cmp	r6, r3
 801691e:	dc3b      	bgt.n	8016998 <_FillRect+0x1c0>
 8016920:	9b05      	ldr	r3, [sp, #20]
 8016922:	4648      	mov	r0, r9
 8016924:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016928:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801692c:	1aaa      	subs	r2, r5, r2
 801692e:	1a71      	subs	r1, r6, r1
 8016930:	f7f6 fffd 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016934:	ea5f 6e10 	movs.w	lr, r0, lsr #24
 8016938:	d024      	beq.n	8016984 <_FillRect+0x1ac>
 801693a:	9b05      	ldr	r3, [sp, #20]
 801693c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016940:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016944:	eba5 0102 	sub.w	r1, r5, r2
 8016948:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801694c:	eba6 0202 	sub.w	r2, r6, r2
 8016950:	fb07 2201 	mla	r2, r7, r1, r2
 8016954:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016958:	f8c3 8020 	str.w	r8, [r3, #32]
 801695c:	d01a      	beq.n	8016994 <_FillRect+0x1bc>
 801695e:	22ff      	movs	r2, #255	; 0xff
 8016960:	9902      	ldr	r1, [sp, #8]
 8016962:	f8da 3000 	ldr.w	r3, [sl]
 8016966:	4798      	blx	r3
 8016968:	9b05      	ldr	r3, [sp, #20]
 801696a:	9a03      	ldr	r2, [sp, #12]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	699b      	ldr	r3, [r3, #24]
 8016970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016974:	691b      	ldr	r3, [r3, #16]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4798      	blx	r3
 801697a:	68e3      	ldr	r3, [r4, #12]
 801697c:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8016980:	4603      	mov	r3, r0
 8016982:	e003      	b.n	801698c <_FillRect+0x1b4>
 8016984:	68e3      	ldr	r3, [r4, #12]
 8016986:	f8d3 b018 	ldr.w	fp, [r3, #24]
 801698a:	4643      	mov	r3, r8
 801698c:	462a      	mov	r2, r5
 801698e:	4631      	mov	r1, r6
 8016990:	4620      	mov	r0, r4
 8016992:	47d8      	blx	fp
 8016994:	3601      	adds	r6, #1
 8016996:	e7bf      	b.n	8016918 <_FillRect+0x140>
 8016998:	3501      	adds	r5, #1
 801699a:	e7b7      	b.n	801690c <_FillRect+0x134>
 801699c:	68e3      	ldr	r3, [r4, #12]
 801699e:	4642      	mov	r2, r8
 80169a0:	9700      	str	r7, [sp, #0]
 80169a2:	4631      	mov	r1, r6
 80169a4:	691d      	ldr	r5, [r3, #16]
 80169a6:	4620      	mov	r0, r4
 80169a8:	4653      	mov	r3, sl
 80169aa:	47a8      	blx	r5
 80169ac:	a805      	add	r0, sp, #20
 80169ae:	f7f6 fc9d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80169b2:	b00f      	add	sp, #60	; 0x3c
 80169b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169b8:	20000018 	.word	0x20000018
 80169bc:	2002260c 	.word	0x2002260c
 80169c0:	20000030 	.word	0x20000030

080169c4 <_DrawVLine>:
 80169c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c8:	4690      	mov	r8, r2
 80169ca:	b08d      	sub	sp, #52	; 0x34
 80169cc:	2218      	movs	r2, #24
 80169ce:	4604      	mov	r4, r0
 80169d0:	460d      	mov	r5, r1
 80169d2:	2100      	movs	r1, #0
 80169d4:	eb0d 0002 	add.w	r0, sp, r2
 80169d8:	469a      	mov	sl, r3
 80169da:	f004 ff5c 	bl	801b896 <memset>
 80169de:	68a0      	ldr	r0, [r4, #8]
 80169e0:	f7f6 fc76 	bl	800d2d0 <GUI_ALLOC_LockH>
 80169e4:	1d01      	adds	r1, r0, #4
 80169e6:	b22b      	sxth	r3, r5
 80169e8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80169ec:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80169f0:	9003      	str	r0, [sp, #12]
 80169f2:	f8d0 9014 	ldr.w	r9, [r0, #20]
 80169f6:	a809      	add	r0, sp, #36	; 0x24
 80169f8:	9106      	str	r1, [sp, #24]
 80169fa:	6824      	ldr	r4, [r4, #0]
 80169fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016a00:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8016a04:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8016a08:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
 8016a0c:	f7f6 ffba 	bl	800d984 <GUI_RectsIntersect>
 8016a10:	2800      	cmp	r0, #0
 8016a12:	f000 80a4 	beq.w	8016b5e <_DrawVLine+0x19a>
 8016a16:	a806      	add	r0, sp, #24
 8016a18:	f7ff fc78 	bl	801630c <_GetClipRect>
 8016a1c:	b158      	cbz	r0, 8016a36 <_DrawVLine+0x72>
 8016a1e:	68e3      	ldr	r3, [r4, #12]
 8016a20:	4620      	mov	r0, r4
 8016a22:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8016a26:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8016a2a:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8016a2e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016a32:	47c0      	blx	r8
 8016a34:	e7ef      	b.n	8016a16 <_DrawVLine+0x52>
 8016a36:	9a06      	ldr	r2, [sp, #24]
 8016a38:	ab04      	add	r3, sp, #16
 8016a3a:	6810      	ldr	r0, [r2, #0]
 8016a3c:	6851      	ldr	r1, [r2, #4]
 8016a3e:	c303      	stmia	r3!, {r0, r1}
 8016a40:	a909      	add	r1, sp, #36	; 0x24
 8016a42:	a804      	add	r0, sp, #16
 8016a44:	f7f6 ff9e 	bl	800d984 <GUI_RectsIntersect>
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	f000 808f 	beq.w	8016b6c <_DrawVLine+0x1a8>
 8016a4e:	a909      	add	r1, sp, #36	; 0x24
 8016a50:	a804      	add	r0, sp, #16
 8016a52:	f7f8 f9c4 	bl	800edde <GUI__IntersectRect>
 8016a56:	4b48      	ldr	r3, [pc, #288]	; (8016b78 <_DrawVLine+0x1b4>)
 8016a58:	1bf7      	subs	r7, r6, r7
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	3701      	adds	r7, #1
 8016a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a60:	f8d3 8000 	ldr.w	r8, [r3]
 8016a64:	9b03      	ldr	r3, [sp, #12]
 8016a66:	68da      	ldr	r2, [r3, #12]
 8016a68:	b342      	cbz	r2, 8016abc <_DrawVLine+0xf8>
 8016a6a:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8016a6e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016a72:	429e      	cmp	r6, r3
 8016a74:	dc7a      	bgt.n	8016b6c <_DrawVLine+0x1a8>
 8016a76:	9b03      	ldr	r3, [sp, #12]
 8016a78:	4648      	mov	r0, r9
 8016a7a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016a7e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016a82:	1ab2      	subs	r2, r6, r2
 8016a84:	1a69      	subs	r1, r5, r1
 8016a86:	f7f6 ff52 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016a8a:	b168      	cbz	r0, 8016aa8 <_DrawVLine+0xe4>
 8016a8c:	9b03      	ldr	r3, [sp, #12]
 8016a8e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016a92:	1ab1      	subs	r1, r6, r2
 8016a94:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016a98:	1aaa      	subs	r2, r5, r2
 8016a9a:	fb07 2201 	mla	r2, r7, r1, r2
 8016a9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016aa2:	f8c3 8020 	str.w	r8, [r3, #32]
 8016aa6:	e007      	b.n	8016ab8 <_DrawVLine+0xf4>
 8016aa8:	68e3      	ldr	r3, [r4, #12]
 8016aaa:	4632      	mov	r2, r6
 8016aac:	4629      	mov	r1, r5
 8016aae:	4620      	mov	r0, r4
 8016ab0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8016ab4:	4643      	mov	r3, r8
 8016ab6:	47d0      	blx	sl
 8016ab8:	3601      	adds	r6, #1
 8016aba:	e7d8      	b.n	8016a6e <_DrawVLine+0xaa>
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4640      	mov	r0, r8
 8016ac0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8016b7c <_DrawVLine+0x1b8>
 8016ac4:	699b      	ldr	r3, [r3, #24]
 8016ac6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8016aca:	691b      	ldr	r3, [r3, #16]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	4798      	blx	r3
 8016ad0:	f8cd a004 	str.w	sl, [sp, #4]
 8016ad4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8016ad8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8016b80 <_DrawVLine+0x1bc>
 8016adc:	9000      	str	r0, [sp, #0]
 8016ade:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016ae2:	429e      	cmp	r6, r3
 8016ae4:	dc42      	bgt.n	8016b6c <_DrawVLine+0x1a8>
 8016ae6:	9b03      	ldr	r3, [sp, #12]
 8016ae8:	4648      	mov	r0, r9
 8016aea:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016aee:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016af2:	1ab2      	subs	r2, r6, r2
 8016af4:	1a69      	subs	r1, r5, r1
 8016af6:	f7f6 ff1a 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016afa:	ea5f 6e10 	movs.w	lr, r0, lsr #24
 8016afe:	d024      	beq.n	8016b4a <_DrawVLine+0x186>
 8016b00:	9b03      	ldr	r3, [sp, #12]
 8016b02:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016b06:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016b0a:	eba6 0102 	sub.w	r1, r6, r2
 8016b0e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016b12:	eba5 0202 	sub.w	r2, r5, r2
 8016b16:	fb07 2201 	mla	r2, r7, r1, r2
 8016b1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016b1e:	f8c3 8020 	str.w	r8, [r3, #32]
 8016b22:	d01a      	beq.n	8016b5a <_DrawVLine+0x196>
 8016b24:	22ff      	movs	r2, #255	; 0xff
 8016b26:	9900      	ldr	r1, [sp, #0]
 8016b28:	f8da 3000 	ldr.w	r3, [sl]
 8016b2c:	4798      	blx	r3
 8016b2e:	9b03      	ldr	r3, [sp, #12]
 8016b30:	9a01      	ldr	r2, [sp, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	699b      	ldr	r3, [r3, #24]
 8016b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b3a:	691b      	ldr	r3, [r3, #16]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	4798      	blx	r3
 8016b40:	68e3      	ldr	r3, [r4, #12]
 8016b42:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8016b46:	4603      	mov	r3, r0
 8016b48:	e003      	b.n	8016b52 <_DrawVLine+0x18e>
 8016b4a:	68e3      	ldr	r3, [r4, #12]
 8016b4c:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8016b50:	4643      	mov	r3, r8
 8016b52:	4632      	mov	r2, r6
 8016b54:	4629      	mov	r1, r5
 8016b56:	4620      	mov	r0, r4
 8016b58:	47d8      	blx	fp
 8016b5a:	3601      	adds	r6, #1
 8016b5c:	e7bf      	b.n	8016ade <_DrawVLine+0x11a>
 8016b5e:	68e3      	ldr	r3, [r4, #12]
 8016b60:	4642      	mov	r2, r8
 8016b62:	4629      	mov	r1, r5
 8016b64:	4620      	mov	r0, r4
 8016b66:	68de      	ldr	r6, [r3, #12]
 8016b68:	4653      	mov	r3, sl
 8016b6a:	47b0      	blx	r6
 8016b6c:	a803      	add	r0, sp, #12
 8016b6e:	f7f6 fbbd 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8016b72:	b00d      	add	sp, #52	; 0x34
 8016b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b78:	20000018 	.word	0x20000018
 8016b7c:	2002260c 	.word	0x2002260c
 8016b80:	20000030 	.word	0x20000030

08016b84 <_DrawHLine>:
 8016b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b88:	4615      	mov	r5, r2
 8016b8a:	b08d      	sub	sp, #52	; 0x34
 8016b8c:	2218      	movs	r2, #24
 8016b8e:	4604      	mov	r4, r0
 8016b90:	4688      	mov	r8, r1
 8016b92:	2100      	movs	r1, #0
 8016b94:	eb0d 0002 	add.w	r0, sp, r2
 8016b98:	469a      	mov	sl, r3
 8016b9a:	f004 fe7c 	bl	801b896 <memset>
 8016b9e:	68a0      	ldr	r0, [r4, #8]
 8016ba0:	f7f6 fb96 	bl	800d2d0 <GUI_ALLOC_LockH>
 8016ba4:	1d01      	adds	r1, r0, #4
 8016ba6:	b22b      	sxth	r3, r5
 8016ba8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8016bac:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8016bb0:	9003      	str	r0, [sp, #12]
 8016bb2:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8016bb6:	a809      	add	r0, sp, #36	; 0x24
 8016bb8:	9106      	str	r1, [sp, #24]
 8016bba:	6824      	ldr	r4, [r4, #0]
 8016bbc:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 8016bc0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016bc4:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8016bc8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016bcc:	f7f6 feda 	bl	800d984 <GUI_RectsIntersect>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	f000 80af 	beq.w	8016d34 <_DrawHLine+0x1b0>
 8016bd6:	a806      	add	r0, sp, #24
 8016bd8:	f7ff fb98 	bl	801630c <_GetClipRect>
 8016bdc:	b158      	cbz	r0, 8016bf6 <_DrawHLine+0x72>
 8016bde:	68e3      	ldr	r3, [r4, #12]
 8016be0:	4620      	mov	r0, r4
 8016be2:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8016be6:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8016bea:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8016bee:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016bf2:	47c0      	blx	r8
 8016bf4:	e7ef      	b.n	8016bd6 <_DrawHLine+0x52>
 8016bf6:	9a06      	ldr	r2, [sp, #24]
 8016bf8:	ab04      	add	r3, sp, #16
 8016bfa:	6810      	ldr	r0, [r2, #0]
 8016bfc:	6851      	ldr	r1, [r2, #4]
 8016bfe:	c303      	stmia	r3!, {r0, r1}
 8016c00:	a909      	add	r1, sp, #36	; 0x24
 8016c02:	a804      	add	r0, sp, #16
 8016c04:	f7f6 febe 	bl	800d984 <GUI_RectsIntersect>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	f000 809a 	beq.w	8016d42 <_DrawHLine+0x1be>
 8016c0e:	a909      	add	r1, sp, #36	; 0x24
 8016c10:	a804      	add	r0, sp, #16
 8016c12:	f7f8 f8e4 	bl	800edde <GUI__IntersectRect>
 8016c16:	9b03      	ldr	r3, [sp, #12]
 8016c18:	1bf7      	subs	r7, r6, r7
 8016c1a:	68da      	ldr	r2, [r3, #12]
 8016c1c:	3701      	adds	r7, #1
 8016c1e:	b39a      	cbz	r2, 8016c88 <_DrawHLine+0x104>
 8016c20:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8016c24:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8016d50 <_DrawHLine+0x1cc>
 8016c28:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016c2c:	429e      	cmp	r6, r3
 8016c2e:	f300 8088 	bgt.w	8016d42 <_DrawHLine+0x1be>
 8016c32:	9b03      	ldr	r3, [sp, #12]
 8016c34:	4648      	mov	r0, r9
 8016c36:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016c3a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016c3e:	1aaa      	subs	r2, r5, r2
 8016c40:	1a71      	subs	r1, r6, r1
 8016c42:	f7f6 fe74 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016c46:	b190      	cbz	r0, 8016c6e <_DrawHLine+0xea>
 8016c48:	f8d8 2000 	ldr.w	r2, [r8]
 8016c4c:	9b03      	ldr	r3, [sp, #12]
 8016c4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8016c50:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8016c54:	6810      	ldr	r0, [r2, #0]
 8016c56:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8016c5a:	1a51      	subs	r1, r2, r1
 8016c5c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016c60:	1ab2      	subs	r2, r6, r2
 8016c62:	fb07 2201 	mla	r2, r7, r1, r2
 8016c66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016c6a:	6218      	str	r0, [r3, #32]
 8016c6c:	e00a      	b.n	8016c84 <_DrawHLine+0x100>
 8016c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8016c72:	4631      	mov	r1, r6
 8016c74:	68e2      	ldr	r2, [r4, #12]
 8016c76:	4620      	mov	r0, r4
 8016c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c7a:	f8d2 a018 	ldr.w	sl, [r2, #24]
 8016c7e:	462a      	mov	r2, r5
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	47d0      	blx	sl
 8016c84:	3601      	adds	r6, #1
 8016c86:	e7cf      	b.n	8016c28 <_DrawHLine+0xa4>
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	4a31      	ldr	r2, [pc, #196]	; (8016d50 <_DrawHLine+0x1cc>)
 8016c8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016d54 <_DrawHLine+0x1d0>
 8016c90:	6812      	ldr	r2, [r2, #0]
 8016c92:	699b      	ldr	r3, [r3, #24]
 8016c94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8016c96:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8016c9a:	f8d2 8000 	ldr.w	r8, [r2]
 8016c9e:	691b      	ldr	r3, [r3, #16]
 8016ca0:	4640      	mov	r0, r8
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	4798      	blx	r3
 8016ca6:	f8cd a004 	str.w	sl, [sp, #4]
 8016caa:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8016cae:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8016d58 <_DrawHLine+0x1d4>
 8016cb2:	9000      	str	r0, [sp, #0]
 8016cb4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016cb8:	429e      	cmp	r6, r3
 8016cba:	dc42      	bgt.n	8016d42 <_DrawHLine+0x1be>
 8016cbc:	9b03      	ldr	r3, [sp, #12]
 8016cbe:	4648      	mov	r0, r9
 8016cc0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016cc4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016cc8:	1aaa      	subs	r2, r5, r2
 8016cca:	1a71      	subs	r1, r6, r1
 8016ccc:	f7f6 fe2f 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016cd0:	ea5f 6e10 	movs.w	lr, r0, lsr #24
 8016cd4:	d024      	beq.n	8016d20 <_DrawHLine+0x19c>
 8016cd6:	9b03      	ldr	r3, [sp, #12]
 8016cd8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016cdc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016ce0:	eba5 0102 	sub.w	r1, r5, r2
 8016ce4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016ce8:	eba6 0202 	sub.w	r2, r6, r2
 8016cec:	fb07 2201 	mla	r2, r7, r1, r2
 8016cf0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016cf4:	f8c3 8020 	str.w	r8, [r3, #32]
 8016cf8:	d01a      	beq.n	8016d30 <_DrawHLine+0x1ac>
 8016cfa:	22ff      	movs	r2, #255	; 0xff
 8016cfc:	9900      	ldr	r1, [sp, #0]
 8016cfe:	f8da 3000 	ldr.w	r3, [sl]
 8016d02:	4798      	blx	r3
 8016d04:	9b03      	ldr	r3, [sp, #12]
 8016d06:	9a01      	ldr	r2, [sp, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	699b      	ldr	r3, [r3, #24]
 8016d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d10:	691b      	ldr	r3, [r3, #16]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	4798      	blx	r3
 8016d16:	68e3      	ldr	r3, [r4, #12]
 8016d18:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	e003      	b.n	8016d28 <_DrawHLine+0x1a4>
 8016d20:	68e3      	ldr	r3, [r4, #12]
 8016d22:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8016d26:	4643      	mov	r3, r8
 8016d28:	462a      	mov	r2, r5
 8016d2a:	4631      	mov	r1, r6
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	47d8      	blx	fp
 8016d30:	3601      	adds	r6, #1
 8016d32:	e7bf      	b.n	8016cb4 <_DrawHLine+0x130>
 8016d34:	68e3      	ldr	r3, [r4, #12]
 8016d36:	462a      	mov	r2, r5
 8016d38:	4641      	mov	r1, r8
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	689e      	ldr	r6, [r3, #8]
 8016d3e:	4653      	mov	r3, sl
 8016d40:	47b0      	blx	r6
 8016d42:	a803      	add	r0, sp, #12
 8016d44:	f7f6 fad2 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8016d48:	b00d      	add	sp, #52	; 0x34
 8016d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d4e:	bf00      	nop
 8016d50:	20000018 	.word	0x20000018
 8016d54:	2002260c 	.word	0x2002260c
 8016d58:	20000030 	.word	0x20000030

08016d5c <_DrawBitmap>:
 8016d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d60:	b09b      	sub	sp, #108	; 0x6c
 8016d62:	4604      	mov	r4, r0
 8016d64:	4616      	mov	r6, r2
 8016d66:	2218      	movs	r2, #24
 8016d68:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8016d6c:	9106      	str	r1, [sp, #24]
 8016d6e:	2100      	movs	r1, #0
 8016d70:	4698      	mov	r8, r3
 8016d72:	4650      	mov	r0, sl
 8016d74:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8016d78:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
 8016d7c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8016d7e:	f004 fd8a 	bl	801b896 <memset>
 8016d82:	68a0      	ldr	r0, [r4, #8]
 8016d84:	f7f6 faa4 	bl	800d2d0 <GUI_ALLOC_LockH>
 8016d88:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016d8c:	f108 32ff 	add.w	r2, r8, #4294967295
 8016d90:	1d01      	adds	r1, r0, #4
 8016d92:	9308      	str	r3, [sp, #32]
 8016d94:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016d98:	900b      	str	r0, [sp, #44]	; 0x2c
 8016d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8016d9c:	6943      	ldr	r3, [r0, #20]
 8016d9e:	a811      	add	r0, sp, #68	; 0x44
 8016da0:	910e      	str	r1, [sp, #56]	; 0x38
 8016da2:	9307      	str	r3, [sp, #28]
 8016da4:	9b06      	ldr	r3, [sp, #24]
 8016da6:	6824      	ldr	r4, [r4, #0]
 8016da8:	445b      	add	r3, fp
 8016daa:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8016db4:	4413      	add	r3, r2
 8016db6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8016dba:	f109 33ff 	add.w	r3, r9, #4294967295
 8016dbe:	4433      	add	r3, r6
 8016dc0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8016dc4:	f7f6 fdde 	bl	800d984 <GUI_RectsIntersect>
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	f000 8198 	beq.w	80170fe <_DrawBitmap+0x3a2>
 8016dce:	4650      	mov	r0, sl
 8016dd0:	f7ff fa9c 	bl	801630c <_GetClipRect>
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	d026      	beq.n	8016e26 <_DrawBitmap+0xca>
 8016dd8:	ab14      	add	r3, sp, #80	; 0x50
 8016dda:	f8cd b00c 	str.w	fp, [sp, #12]
 8016dde:	4642      	mov	r2, r8
 8016de0:	4631      	mov	r1, r6
 8016de2:	9305      	str	r3, [sp, #20]
 8016de4:	ab0f      	add	r3, sp, #60	; 0x3c
 8016de6:	9806      	ldr	r0, [sp, #24]
 8016de8:	9304      	str	r3, [sp, #16]
 8016dea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016dec:	9302      	str	r3, [sp, #8]
 8016dee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016df0:	9301      	str	r3, [sp, #4]
 8016df2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016df4:	9300      	str	r3, [sp, #0]
 8016df6:	464b      	mov	r3, r9
 8016df8:	f7ff fafe 	bl	80163f8 <_GetClipParam>
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	d1e6      	bne.n	8016dce <_DrawBitmap+0x72>
 8016e00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e02:	a915      	add	r1, sp, #84	; 0x54
 8016e04:	68e3      	ldr	r3, [r4, #12]
 8016e06:	4620      	mov	r0, r4
 8016e08:	9204      	str	r2, [sp, #16]
 8016e0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016e0c:	9505      	str	r5, [sp, #20]
 8016e0e:	9203      	str	r2, [sp, #12]
 8016e10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016e12:	9202      	str	r2, [sp, #8]
 8016e14:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016e16:	9201      	str	r2, [sp, #4]
 8016e18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016e1a:	9200      	str	r2, [sp, #0]
 8016e1c:	685b      	ldr	r3, [r3, #4]
 8016e1e:	461f      	mov	r7, r3
 8016e20:	c90e      	ldmia	r1, {r1, r2, r3}
 8016e22:	47b8      	blx	r7
 8016e24:	e7d3      	b.n	8016dce <_DrawBitmap+0x72>
 8016e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e28:	ab0c      	add	r3, sp, #48	; 0x30
 8016e2a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8016e2e:	6810      	ldr	r0, [r2, #0]
 8016e30:	6851      	ldr	r1, [r2, #4]
 8016e32:	c303      	stmia	r3!, {r0, r1}
 8016e34:	a911      	add	r1, sp, #68	; 0x44
 8016e36:	4650      	mov	r0, sl
 8016e38:	f7f6 fda4 	bl	800d984 <GUI_RectsIntersect>
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	f000 8170 	beq.w	8017122 <_DrawBitmap+0x3c6>
 8016e42:	a911      	add	r1, sp, #68	; 0x44
 8016e44:	4650      	mov	r0, sl
 8016e46:	f7f7 ffca 	bl	800edde <GUI__IntersectRect>
 8016e4a:	ab14      	add	r3, sp, #80	; 0x50
 8016e4c:	f8cd a010 	str.w	sl, [sp, #16]
 8016e50:	4642      	mov	r2, r8
 8016e52:	9305      	str	r3, [sp, #20]
 8016e54:	4631      	mov	r1, r6
 8016e56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016e58:	f8cd b00c 	str.w	fp, [sp, #12]
 8016e5c:	9302      	str	r3, [sp, #8]
 8016e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016e60:	9806      	ldr	r0, [sp, #24]
 8016e62:	9301      	str	r3, [sp, #4]
 8016e64:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016e66:	9300      	str	r3, [sp, #0]
 8016e68:	464b      	mov	r3, r9
 8016e6a:	f7ff fac5 	bl	80163f8 <_GetClipParam>
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	f040 8157 	bne.w	8017122 <_DrawBitmap+0x3c6>
 8016e74:	9b08      	ldr	r3, [sp, #32]
 8016e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e78:	1a9b      	subs	r3, r3, r2
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	9306      	str	r3, [sp, #24]
 8016e7e:	6923      	ldr	r3, [r4, #16]
 8016e80:	689b      	ldr	r3, [r3, #8]
 8016e82:	4798      	blx	r3
 8016e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e86:	4681      	mov	r9, r0
 8016e88:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8016e8c:	68df      	ldr	r7, [r3, #12]
 8016e8e:	2f00      	cmp	r7, #0
 8016e90:	f000 8083 	beq.w	8016f9a <_DrawBitmap+0x23e>
 8016e94:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8017138 <_DrawBitmap+0x3dc>
 8016e98:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8016e9c:	429e      	cmp	r6, r3
 8016e9e:	f300 8140 	bgt.w	8017122 <_DrawBitmap+0x3c6>
 8016ea2:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
 8016ea6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016eaa:	429f      	cmp	r7, r3
 8016eac:	dc73      	bgt.n	8016f96 <_DrawBitmap+0x23a>
 8016eae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016eb2:	1af3      	subs	r3, r6, r3
 8016eb4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016eb6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8016eb8:	9300      	str	r3, [sp, #0]
 8016eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ebc:	1afb      	subs	r3, r7, r3
 8016ebe:	f7f6 fcf2 	bl	800d8a6 <GUI_GetBitmapPixelIndexEx>
 8016ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ec4:	9008      	str	r0, [sp, #32]
 8016ec6:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016eca:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8016ece:	1ab2      	subs	r2, r6, r2
 8016ed0:	9807      	ldr	r0, [sp, #28]
 8016ed2:	1a79      	subs	r1, r7, r1
 8016ed4:	f7f6 fd2b 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016ed8:	9b08      	ldr	r3, [sp, #32]
 8016eda:	b348      	cbz	r0, 8016f30 <_DrawBitmap+0x1d4>
 8016edc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016ede:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016ee2:	1ab1      	subs	r1, r6, r2
 8016ee4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016ee8:	ebc2 0e07 	rsb	lr, r2, r7
 8016eec:	9a06      	ldr	r2, [sp, #24]
 8016eee:	fb02 e201 	mla	r2, r2, r1, lr
 8016ef2:	f8d8 1000 	ldr.w	r1, [r8]
 8016ef6:	0092      	lsls	r2, r2, #2
 8016ef8:	7c09      	ldrb	r1, [r1, #16]
 8016efa:	3220      	adds	r2, #32
 8016efc:	f001 0103 	and.w	r1, r1, #3
 8016f00:	b14d      	cbz	r5, 8016f16 <_DrawBitmap+0x1ba>
 8016f02:	2902      	cmp	r1, #2
 8016f04:	d002      	beq.n	8016f0c <_DrawBitmap+0x1b0>
 8016f06:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016f0a:	e006      	b.n	8016f1a <_DrawBitmap+0x1be>
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d040      	beq.n	8016f92 <_DrawBitmap+0x236>
 8016f10:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016f14:	e00a      	b.n	8016f2c <_DrawBitmap+0x1d0>
 8016f16:	2902      	cmp	r1, #2
 8016f18:	d004      	beq.n	8016f24 <_DrawBitmap+0x1c8>
 8016f1a:	2903      	cmp	r1, #3
 8016f1c:	d004      	beq.n	8016f28 <_DrawBitmap+0x1cc>
 8016f1e:	2901      	cmp	r1, #1
 8016f20:	d104      	bne.n	8016f2c <_DrawBitmap+0x1d0>
 8016f22:	e001      	b.n	8016f28 <_DrawBitmap+0x1cc>
 8016f24:	b3ab      	cbz	r3, 8016f92 <_DrawBitmap+0x236>
 8016f26:	e001      	b.n	8016f2c <_DrawBitmap+0x1d0>
 8016f28:	ea89 0303 	eor.w	r3, r9, r3
 8016f2c:	5083      	str	r3, [r0, r2]
 8016f2e:	e030      	b.n	8016f92 <_DrawBitmap+0x236>
 8016f30:	f8d8 2000 	ldr.w	r2, [r8]
 8016f34:	7c12      	ldrb	r2, [r2, #16]
 8016f36:	f002 0203 	and.w	r2, r2, #3
 8016f3a:	b1ad      	cbz	r5, 8016f68 <_DrawBitmap+0x20c>
 8016f3c:	2a02      	cmp	r2, #2
 8016f3e:	d007      	beq.n	8016f50 <_DrawBitmap+0x1f4>
 8016f40:	2a03      	cmp	r2, #3
 8016f42:	68e1      	ldr	r1, [r4, #12]
 8016f44:	d00b      	beq.n	8016f5e <_DrawBitmap+0x202>
 8016f46:	2a01      	cmp	r2, #1
 8016f48:	d009      	beq.n	8016f5e <_DrawBitmap+0x202>
 8016f4a:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8016f4e:	e003      	b.n	8016f58 <_DrawBitmap+0x1fc>
 8016f50:	b1fb      	cbz	r3, 8016f92 <_DrawBitmap+0x236>
 8016f52:	68e2      	ldr	r2, [r4, #12]
 8016f54:	f8d2 a018 	ldr.w	sl, [r2, #24]
 8016f58:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016f5c:	e015      	b.n	8016f8a <_DrawBitmap+0x22e>
 8016f5e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016f62:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8016f66:	e00e      	b.n	8016f86 <_DrawBitmap+0x22a>
 8016f68:	2a02      	cmp	r2, #2
 8016f6a:	d007      	beq.n	8016f7c <_DrawBitmap+0x220>
 8016f6c:	68e1      	ldr	r1, [r4, #12]
 8016f6e:	2a03      	cmp	r2, #3
 8016f70:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8016f74:	d007      	beq.n	8016f86 <_DrawBitmap+0x22a>
 8016f76:	2a01      	cmp	r2, #1
 8016f78:	d107      	bne.n	8016f8a <_DrawBitmap+0x22e>
 8016f7a:	e004      	b.n	8016f86 <_DrawBitmap+0x22a>
 8016f7c:	b14b      	cbz	r3, 8016f92 <_DrawBitmap+0x236>
 8016f7e:	68e2      	ldr	r2, [r4, #12]
 8016f80:	f8d2 a018 	ldr.w	sl, [r2, #24]
 8016f84:	e001      	b.n	8016f8a <_DrawBitmap+0x22e>
 8016f86:	ea89 0303 	eor.w	r3, r9, r3
 8016f8a:	4632      	mov	r2, r6
 8016f8c:	4639      	mov	r1, r7
 8016f8e:	4620      	mov	r0, r4
 8016f90:	47d0      	blx	sl
 8016f92:	3701      	adds	r7, #1
 8016f94:	e787      	b.n	8016ea6 <_DrawBitmap+0x14a>
 8016f96:	3601      	adds	r6, #1
 8016f98:	e77e      	b.n	8016e98 <_DrawBitmap+0x13c>
 8016f9a:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8017138 <_DrawBitmap+0x3dc>
 8016f9e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8016fa2:	429e      	cmp	r6, r3
 8016fa4:	f300 80bd 	bgt.w	8017122 <_DrawBitmap+0x3c6>
 8016fa8:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8016fac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016fb0:	4598      	cmp	r8, r3
 8016fb2:	f300 80a2 	bgt.w	80170fa <_DrawBitmap+0x39e>
 8016fb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016fb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016fba:	1af3      	subs	r3, r6, r3
 8016fbc:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016fbe:	9825      	ldr	r0, [sp, #148]	; 0x94
 8016fc0:	9300      	str	r3, [sp, #0]
 8016fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016fc4:	ebc3 0308 	rsb	r3, r3, r8
 8016fc8:	f7f6 fc6d 	bl	800d8a6 <GUI_GetBitmapPixelIndexEx>
 8016fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fce:	9008      	str	r0, [sp, #32]
 8016fd0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016fd4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8016fd8:	1ab2      	subs	r2, r6, r2
 8016fda:	9807      	ldr	r0, [sp, #28]
 8016fdc:	ebc1 0108 	rsb	r1, r1, r8
 8016fe0:	f7f6 fca5 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8016fe4:	9b08      	ldr	r3, [sp, #32]
 8016fe6:	ea5f 6e10 	movs.w	lr, r0, lsr #24
 8016fea:	4683      	mov	fp, r0
 8016fec:	d051      	beq.n	8017092 <_DrawBitmap+0x336>
 8016fee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ff0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016ff4:	1ab0      	subs	r0, r6, r2
 8016ff6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8016ffa:	ebc2 0c08 	rsb	ip, r2, r8
 8016ffe:	9a06      	ldr	r2, [sp, #24]
 8017000:	fb02 c200 	mla	r2, r2, r0, ip
 8017004:	f8da 0000 	ldr.w	r0, [sl]
 8017008:	0092      	lsls	r2, r2, #2
 801700a:	7c00      	ldrb	r0, [r0, #16]
 801700c:	3220      	adds	r2, #32
 801700e:	f000 0003 	and.w	r0, r0, #3
 8017012:	b17d      	cbz	r5, 8017034 <_DrawBitmap+0x2d8>
 8017014:	2802      	cmp	r0, #2
 8017016:	d006      	beq.n	8017026 <_DrawBitmap+0x2ca>
 8017018:	2803      	cmp	r0, #3
 801701a:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 801701e:	d006      	beq.n	801702e <_DrawBitmap+0x2d2>
 8017020:	2801      	cmp	r0, #1
 8017022:	d114      	bne.n	801704e <_DrawBitmap+0x2f2>
 8017024:	e003      	b.n	801702e <_DrawBitmap+0x2d2>
 8017026:	b19b      	cbz	r3, 8017050 <_DrawBitmap+0x2f4>
 8017028:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 801702c:	e00f      	b.n	801704e <_DrawBitmap+0x2f2>
 801702e:	ea89 0707 	eor.w	r7, r9, r7
 8017032:	e00c      	b.n	801704e <_DrawBitmap+0x2f2>
 8017034:	2802      	cmp	r0, #2
 8017036:	d004      	beq.n	8017042 <_DrawBitmap+0x2e6>
 8017038:	2803      	cmp	r0, #3
 801703a:	d006      	beq.n	801704a <_DrawBitmap+0x2ee>
 801703c:	2801      	cmp	r0, #1
 801703e:	d101      	bne.n	8017044 <_DrawBitmap+0x2e8>
 8017040:	e003      	b.n	801704a <_DrawBitmap+0x2ee>
 8017042:	b12b      	cbz	r3, 8017050 <_DrawBitmap+0x2f4>
 8017044:	508b      	str	r3, [r1, r2]
 8017046:	461f      	mov	r7, r3
 8017048:	e002      	b.n	8017050 <_DrawBitmap+0x2f4>
 801704a:	ea89 0703 	eor.w	r7, r9, r3
 801704e:	508f      	str	r7, [r1, r2]
 8017050:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017054:	d04e      	beq.n	80170f4 <_DrawBitmap+0x398>
 8017056:	680b      	ldr	r3, [r1, #0]
 8017058:	4638      	mov	r0, r7
 801705a:	4a35      	ldr	r2, [pc, #212]	; (8017130 <_DrawBitmap+0x3d4>)
 801705c:	699b      	ldr	r3, [r3, #24]
 801705e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017062:	691b      	ldr	r3, [r3, #16]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	4798      	blx	r3
 8017068:	4b32      	ldr	r3, [pc, #200]	; (8017134 <_DrawBitmap+0x3d8>)
 801706a:	f040 417f 	orr.w	r1, r0, #4278190080	; 0xff000000
 801706e:	22ff      	movs	r2, #255	; 0xff
 8017070:	4658      	mov	r0, fp
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	4798      	blx	r3
 8017076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017078:	4a2d      	ldr	r2, [pc, #180]	; (8017130 <_DrawBitmap+0x3d4>)
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	699b      	ldr	r3, [r3, #24]
 801707e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017082:	691b      	ldr	r3, [r3, #16]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	4798      	blx	r3
 8017088:	68e3      	ldr	r3, [r4, #12]
 801708a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 801708e:	4603      	mov	r3, r0
 8017090:	e02c      	b.n	80170ec <_DrawBitmap+0x390>
 8017092:	f8da 2000 	ldr.w	r2, [sl]
 8017096:	7c12      	ldrb	r2, [r2, #16]
 8017098:	f002 0203 	and.w	r2, r2, #3
 801709c:	b1ad      	cbz	r5, 80170ca <_DrawBitmap+0x36e>
 801709e:	2a02      	cmp	r2, #2
 80170a0:	d007      	beq.n	80170b2 <_DrawBitmap+0x356>
 80170a2:	2a03      	cmp	r2, #3
 80170a4:	68e1      	ldr	r1, [r4, #12]
 80170a6:	d00b      	beq.n	80170c0 <_DrawBitmap+0x364>
 80170a8:	2a01      	cmp	r2, #1
 80170aa:	d009      	beq.n	80170c0 <_DrawBitmap+0x364>
 80170ac:	f8d1 b018 	ldr.w	fp, [r1, #24]
 80170b0:	e003      	b.n	80170ba <_DrawBitmap+0x35e>
 80170b2:	b1fb      	cbz	r3, 80170f4 <_DrawBitmap+0x398>
 80170b4:	68e2      	ldr	r2, [r4, #12]
 80170b6:	f8d2 b018 	ldr.w	fp, [r2, #24]
 80170ba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80170be:	e015      	b.n	80170ec <_DrawBitmap+0x390>
 80170c0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80170c4:	f8d1 b018 	ldr.w	fp, [r1, #24]
 80170c8:	e00e      	b.n	80170e8 <_DrawBitmap+0x38c>
 80170ca:	2a02      	cmp	r2, #2
 80170cc:	d007      	beq.n	80170de <_DrawBitmap+0x382>
 80170ce:	68e1      	ldr	r1, [r4, #12]
 80170d0:	2a03      	cmp	r2, #3
 80170d2:	f8d1 b018 	ldr.w	fp, [r1, #24]
 80170d6:	d007      	beq.n	80170e8 <_DrawBitmap+0x38c>
 80170d8:	2a01      	cmp	r2, #1
 80170da:	d107      	bne.n	80170ec <_DrawBitmap+0x390>
 80170dc:	e004      	b.n	80170e8 <_DrawBitmap+0x38c>
 80170de:	b14b      	cbz	r3, 80170f4 <_DrawBitmap+0x398>
 80170e0:	68e2      	ldr	r2, [r4, #12]
 80170e2:	f8d2 b018 	ldr.w	fp, [r2, #24]
 80170e6:	e001      	b.n	80170ec <_DrawBitmap+0x390>
 80170e8:	ea89 0303 	eor.w	r3, r9, r3
 80170ec:	4632      	mov	r2, r6
 80170ee:	4641      	mov	r1, r8
 80170f0:	4620      	mov	r0, r4
 80170f2:	47d8      	blx	fp
 80170f4:	f108 0801 	add.w	r8, r8, #1
 80170f8:	e758      	b.n	8016fac <_DrawBitmap+0x250>
 80170fa:	3601      	adds	r6, #1
 80170fc:	e74f      	b.n	8016f9e <_DrawBitmap+0x242>
 80170fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017100:	4620      	mov	r0, r4
 8017102:	68e3      	ldr	r3, [r4, #12]
 8017104:	9203      	str	r2, [sp, #12]
 8017106:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017108:	9505      	str	r5, [sp, #20]
 801710a:	9202      	str	r2, [sp, #8]
 801710c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801710e:	f8cd b010 	str.w	fp, [sp, #16]
 8017112:	9201      	str	r2, [sp, #4]
 8017114:	4632      	mov	r2, r6
 8017116:	f8cd 9000 	str.w	r9, [sp]
 801711a:	9906      	ldr	r1, [sp, #24]
 801711c:	685d      	ldr	r5, [r3, #4]
 801711e:	4643      	mov	r3, r8
 8017120:	47a8      	blx	r5
 8017122:	a80b      	add	r0, sp, #44	; 0x2c
 8017124:	f7f6 f8e2 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017128:	b01b      	add	sp, #108	; 0x6c
 801712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801712e:	bf00      	nop
 8017130:	2002260c 	.word	0x2002260c
 8017134:	20000030 	.word	0x20000030
 8017138:	20000018 	.word	0x20000018

0801713c <_Link>:
 801713c:	b513      	push	{r0, r1, r4, lr}
 801713e:	ac02      	add	r4, sp, #8
 8017140:	f7f6 f8c6 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017144:	f844 0d04 	str.w	r0, [r4, #-4]!
 8017148:	6800      	ldr	r0, [r0, #0]
 801714a:	f7f6 ff41 	bl	800dfd0 <GUI_DEVICE_Link>
 801714e:	4620      	mov	r0, r4
 8017150:	f7f6 f8cc 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017154:	b002      	add	sp, #8
 8017156:	bd10      	pop	{r4, pc}

08017158 <_CreateBuffer>:
 8017158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801715a:	6943      	ldr	r3, [r0, #20]
 801715c:	4605      	mov	r5, r0
 801715e:	460e      	mov	r6, r1
 8017160:	8818      	ldrh	r0, [r3, #0]
 8017162:	300d      	adds	r0, #13
 8017164:	0080      	lsls	r0, r0, #2
 8017166:	f7f6 fa8d 	bl	800d684 <GUI_ALLOC_AllocNoInit>
 801716a:	4607      	mov	r7, r0
 801716c:	b908      	cbnz	r0, 8017172 <_CreateBuffer+0x1a>
 801716e:	2000      	movs	r0, #0
 8017170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017172:	f7f6 f8ad 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017176:	682b      	ldr	r3, [r5, #0]
 8017178:	4604      	mov	r4, r0
 801717a:	6998      	ldr	r0, [r3, #24]
 801717c:	f7f6 fed8 	bl	800df30 <GUI_DEVICE__GetpDriver>
 8017180:	2800      	cmp	r0, #0
 8017182:	d0f4      	beq.n	801716e <_CreateBuffer+0x16>
 8017184:	68c3      	ldr	r3, [r0, #12]
 8017186:	2108      	movs	r1, #8
 8017188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801718a:	4798      	blx	r3
 801718c:	2802      	cmp	r0, #2
 801718e:	dd0b      	ble.n	80171a8 <_CreateBuffer+0x50>
 8017190:	2804      	cmp	r0, #4
 8017192:	dd06      	ble.n	80171a2 <_CreateBuffer+0x4a>
 8017194:	2808      	cmp	r0, #8
 8017196:	dd06      	ble.n	80171a6 <_CreateBuffer+0x4e>
 8017198:	2810      	cmp	r0, #16
 801719a:	bfcc      	ite	gt
 801719c:	2020      	movgt	r0, #32
 801719e:	2010      	movle	r0, #16
 80171a0:	e002      	b.n	80171a8 <_CreateBuffer+0x50>
 80171a2:	2004      	movs	r0, #4
 80171a4:	e000      	b.n	80171a8 <_CreateBuffer+0x50>
 80171a6:	2008      	movs	r0, #8
 80171a8:	2808      	cmp	r0, #8
 80171aa:	61a0      	str	r0, [r4, #24]
 80171ac:	dd04      	ble.n	80171b8 <_CreateBuffer+0x60>
 80171ae:	2811      	cmp	r0, #17
 80171b0:	bfb4      	ite	lt
 80171b2:	2202      	movlt	r2, #2
 80171b4:	2204      	movge	r2, #4
 80171b6:	e000      	b.n	80171ba <_CreateBuffer+0x62>
 80171b8:	2201      	movs	r2, #1
 80171ba:	696b      	ldr	r3, [r5, #20]
 80171bc:	6122      	str	r2, [r4, #16]
 80171be:	881b      	ldrh	r3, [r3, #0]
 80171c0:	61e3      	str	r3, [r4, #28]
 80171c2:	4353      	muls	r3, r2
 80171c4:	6163      	str	r3, [r4, #20]
 80171c6:	f7f6 f9ad 	bl	800d524 <GUI_ALLOC_GetMaxSize>
 80171ca:	6963      	ldr	r3, [r4, #20]
 80171cc:	2200      	movs	r2, #0
 80171ce:	60a7      	str	r7, [r4, #8]
 80171d0:	4298      	cmp	r0, r3
 80171d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80171d6:	60e2      	str	r2, [r4, #12]
 80171d8:	bfb8      	it	lt
 80171da:	6160      	strlt	r0, [r4, #20]
 80171dc:	2e01      	cmp	r6, #1
 80171de:	6023      	str	r3, [r4, #0]
 80171e0:	4620      	mov	r0, r4
 80171e2:	bf18      	it	ne
 80171e4:	69e2      	ldrne	r2, [r4, #28]
 80171e6:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 80171ea:	bf1e      	ittt	ne
 80171ec:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 80171f0:	f102 32ff 	addne.w	r2, r2, #4294967295
 80171f4:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 80171f8:	6063      	str	r3, [r4, #4]
 80171fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080171fc <_Unlink>:
 80171fc:	b513      	push	{r0, r1, r4, lr}
 80171fe:	ac02      	add	r4, sp, #8
 8017200:	f7f6 f866 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017204:	f844 0d04 	str.w	r0, [r4, #-4]!
 8017208:	6800      	ldr	r0, [r0, #0]
 801720a:	f7f6 fec9 	bl	800dfa0 <GUI_DEVICE_Unlink>
 801720e:	4620      	mov	r0, r4
 8017210:	f7f6 f86c 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017214:	b002      	add	sp, #8
 8017216:	bd10      	pop	{r4, pc}

08017218 <_GetBkIndex.isra.0>:
 8017218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801721c:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8017220:	4607      	mov	r7, r0
 8017222:	4688      	mov	r8, r1
 8017224:	4691      	mov	r9, r2
 8017226:	4286      	cmp	r6, r0
 8017228:	461c      	mov	r4, r3
 801722a:	dd04      	ble.n	8017236 <_GetBkIndex.isra.0+0x1e>
 801722c:	f8d9 0000 	ldr.w	r0, [r9]
 8017230:	bb18      	cbnz	r0, 801727a <_GetBkIndex.isra.0+0x62>
 8017232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801723a:	4298      	cmp	r0, r3
 801723c:	dcf6      	bgt.n	801722c <_GetBkIndex.isra.0+0x14>
 801723e:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 8017242:	428d      	cmp	r5, r1
 8017244:	dcf2      	bgt.n	801722c <_GetBkIndex.isra.0+0x14>
 8017246:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801724a:	4299      	cmp	r1, r3
 801724c:	dcee      	bgt.n	801722c <_GetBkIndex.isra.0+0x14>
 801724e:	1b86      	subs	r6, r0, r6
 8017250:	1b4d      	subs	r5, r1, r5
 8017252:	6960      	ldr	r0, [r4, #20]
 8017254:	462a      	mov	r2, r5
 8017256:	4631      	mov	r1, r6
 8017258:	f7f6 fb69 	bl	800d92e <GUI_GetBitmapPixelIndex>
 801725c:	2800      	cmp	r0, #0
 801725e:	d0e5      	beq.n	801722c <_GetBkIndex.isra.0+0x14>
 8017260:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017264:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017268:	1a9b      	subs	r3, r3, r2
 801726a:	fb03 5505 	mla	r5, r3, r5, r5
 801726e:	4435      	add	r5, r6
 8017270:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8017274:	6a20      	ldr	r0, [r4, #32]
 8017276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801727a:	68c3      	ldr	r3, [r0, #12]
 801727c:	4642      	mov	r2, r8
 801727e:	4639      	mov	r1, r7
 8017280:	695b      	ldr	r3, [r3, #20]
 8017282:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017286:	4718      	bx	r3

08017288 <_GetBkIndexAlpha.isra.2>:
 8017288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801728c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8017290:	4607      	mov	r7, r0
 8017292:	4688      	mov	r8, r1
 8017294:	4691      	mov	r9, r2
 8017296:	4285      	cmp	r5, r0
 8017298:	461e      	mov	r6, r3
 801729a:	dc14      	bgt.n	80172c6 <_GetBkIndexAlpha.isra.2+0x3e>
 801729c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80172a0:	4298      	cmp	r0, r3
 80172a2:	dc10      	bgt.n	80172c6 <_GetBkIndexAlpha.isra.2+0x3e>
 80172a4:	f9b6 4006 	ldrsh.w	r4, [r6, #6]
 80172a8:	428c      	cmp	r4, r1
 80172aa:	dc0c      	bgt.n	80172c6 <_GetBkIndexAlpha.isra.2+0x3e>
 80172ac:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 80172b0:	4299      	cmp	r1, r3
 80172b2:	dc08      	bgt.n	80172c6 <_GetBkIndexAlpha.isra.2+0x3e>
 80172b4:	1b45      	subs	r5, r0, r5
 80172b6:	6970      	ldr	r0, [r6, #20]
 80172b8:	1b0c      	subs	r4, r1, r4
 80172ba:	b138      	cbz	r0, 80172cc <_GetBkIndexAlpha.isra.2+0x44>
 80172bc:	4622      	mov	r2, r4
 80172be:	4629      	mov	r1, r5
 80172c0:	f7f6 fb35 	bl	800d92e <GUI_GetBitmapPixelIndex>
 80172c4:	e002      	b.n	80172cc <_GetBkIndexAlpha.isra.2+0x44>
 80172c6:	2400      	movs	r4, #0
 80172c8:	4625      	mov	r5, r4
 80172ca:	4620      	mov	r0, r4
 80172cc:	0e03      	lsrs	r3, r0, #24
 80172ce:	d109      	bne.n	80172e4 <_GetBkIndexAlpha.isra.2+0x5c>
 80172d0:	f8d9 0000 	ldr.w	r0, [r9]
 80172d4:	b188      	cbz	r0, 80172fa <_GetBkIndexAlpha.isra.2+0x72>
 80172d6:	68c3      	ldr	r3, [r0, #12]
 80172d8:	4642      	mov	r2, r8
 80172da:	4639      	mov	r1, r7
 80172dc:	695b      	ldr	r3, [r3, #20]
 80172de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172e2:	4718      	bx	r3
 80172e4:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 80172e8:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 80172ec:	1a9b      	subs	r3, r3, r2
 80172ee:	fb03 4404 	mla	r4, r3, r4, r4
 80172f2:	442c      	add	r4, r5
 80172f4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80172f8:	6a20      	ldr	r0, [r4, #32]
 80172fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017300 <_DoColorConversion.isra.3>:
 8017300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017304:	ad02      	add	r5, sp, #8
 8017306:	4681      	mov	r9, r0
 8017308:	460e      	mov	r6, r1
 801730a:	f7f5 ffe1 	bl	800d2d0 <GUI_ALLOC_LockH>
 801730e:	68c4      	ldr	r4, [r0, #12]
 8017310:	6803      	ldr	r3, [r0, #0]
 8017312:	f845 0d08 	str.w	r0, [r5, #-8]!
 8017316:	4628      	mov	r0, r5
 8017318:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801731c:	f7f5 ffe6 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017320:	b114      	cbz	r4, 8017328 <_DoColorConversion.isra.3+0x28>
 8017322:	4620      	mov	r0, r4
 8017324:	f7f6 f812 	bl	800d34c <GUI_ALLOC_Free>
 8017328:	6833      	ldr	r3, [r6, #0]
 801732a:	6818      	ldr	r0, [r3, #0]
 801732c:	0080      	lsls	r0, r0, #2
 801732e:	f7f6 f9c3 	bl	800d6b8 <GUI_ALLOC_AllocZero>
 8017332:	4680      	mov	r8, r0
 8017334:	b320      	cbz	r0, 8017380 <_DoColorConversion.isra.3+0x80>
 8017336:	f7f5 ffcb 	bl	800d2d0 <GUI_ALLOC_LockH>
 801733a:	2400      	movs	r4, #0
 801733c:	4607      	mov	r7, r0
 801733e:	f8df b048 	ldr.w	fp, [pc, #72]	; 8017388 <_DoColorConversion.isra.3+0x88>
 8017342:	9001      	str	r0, [sp, #4]
 8017344:	6833      	ldr	r3, [r6, #0]
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	4294      	cmp	r4, r2
 801734a:	da0b      	bge.n	8017364 <_DoColorConversion.isra.3+0x64>
 801734c:	689a      	ldr	r2, [r3, #8]
 801734e:	f85b 302a 	ldr.w	r3, [fp, sl, lsl #2]
 8017352:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8017356:	691b      	ldr	r3, [r3, #16]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	4798      	blx	r3
 801735c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8017360:	3401      	adds	r4, #1
 8017362:	e7ef      	b.n	8017344 <_DoColorConversion.isra.3+0x44>
 8017364:	a801      	add	r0, sp, #4
 8017366:	f7f5 ffc1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801736a:	4648      	mov	r0, r9
 801736c:	f7f5 ffb0 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017370:	9000      	str	r0, [sp, #0]
 8017372:	f8c0 800c 	str.w	r8, [r0, #12]
 8017376:	4628      	mov	r0, r5
 8017378:	f7f5 ffb8 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801737c:	2000      	movs	r0, #0
 801737e:	e000      	b.n	8017382 <_DoColorConversion.isra.3+0x82>
 8017380:	2001      	movs	r0, #1
 8017382:	b003      	add	sp, #12
 8017384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017388:	2002260c 	.word	0x2002260c

0801738c <_GetDeviceRect>:
 801738c:	6983      	ldr	r3, [r0, #24]
 801738e:	4a0d      	ldr	r2, [pc, #52]	; (80173c4 <_GetDeviceRect+0x38>)
 8017390:	b570      	push	{r4, r5, r6, lr}
 8017392:	56d2      	ldrsb	r2, [r2, r3]
 8017394:	4605      	mov	r5, r0
 8017396:	460c      	mov	r4, r1
 8017398:	2a01      	cmp	r2, #1
 801739a:	dd0d      	ble.n	80173b8 <_GetDeviceRect+0x2c>
 801739c:	2200      	movs	r2, #0
 801739e:	4618      	mov	r0, r3
 80173a0:	804a      	strh	r2, [r1, #2]
 80173a2:	800a      	strh	r2, [r1, #0]
 80173a4:	f7f8 f9fe 	bl	800f7a4 <LCD_GetXSizeEx>
 80173a8:	3801      	subs	r0, #1
 80173aa:	80a0      	strh	r0, [r4, #4]
 80173ac:	69a8      	ldr	r0, [r5, #24]
 80173ae:	f7f8 f9fc 	bl	800f7aa <LCD_GetYSizeEx>
 80173b2:	3801      	subs	r0, #1
 80173b4:	80e0      	strh	r0, [r4, #6]
 80173b6:	bd70      	pop	{r4, r5, r6, pc}
 80173b8:	68c3      	ldr	r3, [r0, #12]
 80173ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173c0:	4718      	bx	r3
 80173c2:	bf00      	nop
 80173c4:	200225bc 	.word	0x200225bc

080173c8 <_FlushBuffer.isra.5>:
 80173c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173cc:	460c      	mov	r4, r1
 80173ce:	68c9      	ldr	r1, [r1, #12]
 80173d0:	b086      	sub	sp, #24
 80173d2:	2900      	cmp	r1, #0
 80173d4:	d031      	beq.n	801743a <_FlushBuffer.isra.5+0x72>
 80173d6:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 80173da:	6822      	ldr	r2, [r4, #0]
 80173dc:	2b01      	cmp	r3, #1
 80173de:	d104      	bne.n	80173ea <_FlushBuffer.isra.5+0x22>
 80173e0:	4616      	mov	r6, r2
 80173e2:	6062      	str	r2, [r4, #4]
 80173e4:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 80173e8:	e00a      	b.n	8017400 <_FlushBuffer.isra.5+0x38>
 80173ea:	69e3      	ldr	r3, [r4, #28]
 80173ec:	6866      	ldr	r6, [r4, #4]
 80173ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80173f2:	f8d4 8020 	ldr.w	r8, [r4, #32]
 80173f6:	3604      	adds	r6, #4
 80173f8:	3b01      	subs	r3, #1
 80173fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80173fe:	6063      	str	r3, [r4, #4]
 8017400:	6807      	ldr	r7, [r0, #0]
 8017402:	b1af      	cbz	r7, 8017430 <_FlushBuffer.isra.5+0x68>
 8017404:	69a2      	ldr	r2, [r4, #24]
 8017406:	4630      	mov	r0, r6
 8017408:	f001 fcd3 	bl	8018db2 <GUI__CompactPixelIndices>
 801740c:	6962      	ldr	r2, [r4, #20]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2500      	movs	r5, #0
 8017412:	9202      	str	r2, [sp, #8]
 8017414:	4641      	mov	r1, r8
 8017416:	69a2      	ldr	r2, [r4, #24]
 8017418:	4638      	mov	r0, r7
 801741a:	9505      	str	r5, [sp, #20]
 801741c:	9201      	str	r2, [sp, #4]
 801741e:	2201      	movs	r2, #1
 8017420:	9504      	str	r5, [sp, #16]
 8017422:	9200      	str	r2, [sp, #0]
 8017424:	9603      	str	r6, [sp, #12]
 8017426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017428:	685e      	ldr	r6, [r3, #4]
 801742a:	68e3      	ldr	r3, [r4, #12]
 801742c:	47b0      	blx	r6
 801742e:	e000      	b.n	8017432 <_FlushBuffer.isra.5+0x6a>
 8017430:	2501      	movs	r5, #1
 8017432:	2300      	movs	r3, #0
 8017434:	b2e8      	uxtb	r0, r5
 8017436:	60e3      	str	r3, [r4, #12]
 8017438:	e000      	b.n	801743c <_FlushBuffer.isra.5+0x74>
 801743a:	4608      	mov	r0, r1
 801743c:	b006      	add	sp, #24
 801743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017442 <_SetBkIndexBuffered>:
 8017442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017444:	9c06      	ldr	r4, [sp, #24]
 8017446:	4617      	mov	r7, r2
 8017448:	4606      	mov	r6, r0
 801744a:	460d      	mov	r5, r1
 801744c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801744e:	428a      	cmp	r2, r1
 8017450:	d105      	bne.n	801745e <_SetBkIndexBuffered+0x1c>
 8017452:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8017456:	6a21      	ldr	r1, [r4, #32]
 8017458:	4411      	add	r1, r2
 801745a:	4281      	cmp	r1, r0
 801745c:	d003      	beq.n	8017466 <_SetBkIndexBuffered+0x24>
 801745e:	4621      	mov	r1, r4
 8017460:	4618      	mov	r0, r3
 8017462:	f7ff ffb1 	bl	80173c8 <_FlushBuffer.isra.5>
 8017466:	6863      	ldr	r3, [r4, #4]
 8017468:	601f      	str	r7, [r3, #0]
 801746a:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 801746e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017472:	6063      	str	r3, [r4, #4]
 8017474:	68e3      	ldr	r3, [r4, #12]
 8017476:	b90b      	cbnz	r3, 801747c <_SetBkIndexBuffered+0x3a>
 8017478:	62a6      	str	r6, [r4, #40]	; 0x28
 801747a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801747c:	3301      	adds	r3, #1
 801747e:	6226      	str	r6, [r4, #32]
 8017480:	6265      	str	r5, [r4, #36]	; 0x24
 8017482:	60e3      	str	r3, [r4, #12]
 8017484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017486 <_ReleaseBuffer.isra.6>:
 8017486:	b513      	push	{r0, r1, r4, lr}
 8017488:	9101      	str	r1, [sp, #4]
 801748a:	f7ff ff9d 	bl	80173c8 <_FlushBuffer.isra.5>
 801748e:	a802      	add	r0, sp, #8
 8017490:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8017494:	689c      	ldr	r4, [r3, #8]
 8017496:	f7f5 ff29 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801749a:	4620      	mov	r0, r4
 801749c:	f7f5 ff56 	bl	800d34c <GUI_ALLOC_Free>
 80174a0:	b002      	add	sp, #8
 80174a2:	bd10      	pop	{r4, pc}

080174a4 <_SpriteDraw>:
 80174a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a8:	b091      	sub	sp, #68	; 0x44
 80174aa:	f7f5 ff11 	bl	800d2d0 <GUI_ALLOC_LockH>
 80174ae:	6983      	ldr	r3, [r0, #24]
 80174b0:	6805      	ldr	r5, [r0, #0]
 80174b2:	2101      	movs	r1, #1
 80174b4:	9305      	str	r3, [sp, #20]
 80174b6:	4604      	mov	r4, r0
 80174b8:	69c3      	ldr	r3, [r0, #28]
 80174ba:	69af      	ldr	r7, [r5, #24]
 80174bc:	9308      	str	r3, [sp, #32]
 80174be:	4b70      	ldr	r3, [pc, #448]	; (8017680 <_SpriteDraw+0x1dc>)
 80174c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	7c5a      	ldrb	r2, [r3, #17]
 80174c6:	4297      	cmp	r7, r2
 80174c8:	9204      	str	r2, [sp, #16]
 80174ca:	bf18      	it	ne
 80174cc:	745f      	strbne	r7, [r3, #17]
 80174ce:	f8d0 b014 	ldr.w	fp, [r0, #20]
 80174d2:	f7ff fe41 	bl	8017158 <_CreateBuffer>
 80174d6:	9003      	str	r0, [sp, #12]
 80174d8:	2800      	cmp	r0, #0
 80174da:	f000 80ba 	beq.w	8017652 <_SpriteDraw+0x1ae>
 80174de:	f104 0320 	add.w	r3, r4, #32
 80174e2:	2200      	movs	r2, #0
 80174e4:	ac0c      	add	r4, sp, #48	; 0x30
 80174e6:	9306      	str	r3, [sp, #24]
 80174e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174ea:	615a      	str	r2, [r3, #20]
 80174ec:	3304      	adds	r3, #4
 80174ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80174f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80174f6:	a90e      	add	r1, sp, #56	; 0x38
 80174f8:	4628      	mov	r0, r5
 80174fa:	f7ff ff47 	bl	801738c <_GetDeviceRect>
 80174fe:	4620      	mov	r0, r4
 8017500:	a90e      	add	r1, sp, #56	; 0x38
 8017502:	f7f7 fc6c 	bl	800edde <GUI__IntersectRect>
 8017506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017508:	68d8      	ldr	r0, [r3, #12]
 801750a:	2800      	cmp	r0, #0
 801750c:	d03e      	beq.n	801758c <_SpriteDraw+0xe8>
 801750e:	f7f5 fedf 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017512:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8017516:	900e      	str	r0, [sp, #56]	; 0x38
 8017518:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801751c:	429c      	cmp	r4, r3
 801751e:	dc31      	bgt.n	8017584 <_SpriteDraw+0xe0>
 8017520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017522:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 8017526:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801752a:	ebc8 0804 	rsb	r8, r8, r4
 801752e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017532:	429e      	cmp	r6, r3
 8017534:	dc24      	bgt.n	8017580 <_SpriteDraw+0xdc>
 8017536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017538:	4642      	mov	r2, r8
 801753a:	4658      	mov	r0, fp
 801753c:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8017540:	ebc9 0906 	rsb	r9, r9, r6
 8017544:	4649      	mov	r1, r9
 8017546:	f7f6 f9f2 	bl	800d92e <GUI_GetBitmapPixelIndex>
 801754a:	4682      	mov	sl, r0
 801754c:	b1b0      	cbz	r0, 801757c <_SpriteDraw+0xd8>
 801754e:	f8bb 3000 	ldrh.w	r3, [fp]
 8017552:	462a      	mov	r2, r5
 8017554:	4621      	mov	r1, r4
 8017556:	4630      	mov	r0, r6
 8017558:	fb08 9903 	mla	r9, r8, r3, r9
 801755c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801755e:	f7ff fe5b 	bl	8017218 <_GetBkIndex.isra.0>
 8017562:	9b06      	ldr	r3, [sp, #24]
 8017564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017566:	4621      	mov	r1, r4
 8017568:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 801756c:	4630      	mov	r0, r6
 801756e:	9b03      	ldr	r3, [sp, #12]
 8017570:	9300      	str	r3, [sp, #0]
 8017572:	462b      	mov	r3, r5
 8017574:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 8017578:	f7ff ff63 	bl	8017442 <_SetBkIndexBuffered>
 801757c:	3601      	adds	r6, #1
 801757e:	e7d6      	b.n	801752e <_SpriteDraw+0x8a>
 8017580:	3401      	adds	r4, #1
 8017582:	e7c9      	b.n	8017518 <_SpriteDraw+0x74>
 8017584:	a80e      	add	r0, sp, #56	; 0x38
 8017586:	f7f5 feb1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801758a:	e05d      	b.n	8017648 <_SpriteDraw+0x1a4>
 801758c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8017590:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8017688 <_SpriteDraw+0x1e4>
 8017594:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8017598:	429c      	cmp	r4, r3
 801759a:	dc55      	bgt.n	8017648 <_SpriteDraw+0x1a4>
 801759c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801759e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 80175a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80175a6:	1ae3      	subs	r3, r4, r3
 80175a8:	9307      	str	r3, [sp, #28]
 80175aa:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80175ae:	429e      	cmp	r6, r3
 80175b0:	dc48      	bgt.n	8017644 <_SpriteDraw+0x1a0>
 80175b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175b4:	4658      	mov	r0, fp
 80175b6:	9a07      	ldr	r2, [sp, #28]
 80175b8:	f9b3 a004 	ldrsh.w	sl, [r3, #4]
 80175bc:	ebca 0a06 	rsb	sl, sl, r6
 80175c0:	4651      	mov	r1, sl
 80175c2:	f7f6 f9b4 	bl	800d92e <GUI_GetBitmapPixelIndex>
 80175c6:	4680      	mov	r8, r0
 80175c8:	0e03      	lsrs	r3, r0, #24
 80175ca:	9309      	str	r3, [sp, #36]	; 0x24
 80175cc:	d038      	beq.n	8017640 <_SpriteDraw+0x19c>
 80175ce:	f8bb 3000 	ldrh.w	r3, [fp]
 80175d2:	4621      	mov	r1, r4
 80175d4:	9a07      	ldr	r2, [sp, #28]
 80175d6:	4630      	mov	r0, r6
 80175d8:	fb02 aa03 	mla	sl, r2, r3, sl
 80175dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175de:	462a      	mov	r2, r5
 80175e0:	f7ff fe52 	bl	8017288 <_GetBkIndexAlpha.isra.2>
 80175e4:	9b06      	ldr	r3, [sp, #24]
 80175e6:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80175ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ec:	2bff      	cmp	r3, #255	; 0xff
 80175ee:	d018      	beq.n	8017622 <_SpriteDraw+0x17e>
 80175f0:	462a      	mov	r2, r5
 80175f2:	4621      	mov	r1, r4
 80175f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175f6:	4630      	mov	r0, r6
 80175f8:	f7ff fe46 	bl	8017288 <_GetBkIndexAlpha.isra.2>
 80175fc:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8017600:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8017604:	691b      	ldr	r3, [r3, #16]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	4798      	blx	r3
 801760a:	4b1e      	ldr	r3, [pc, #120]	; (8017684 <_SpriteDraw+0x1e0>)
 801760c:	f040 417f 	orr.w	r1, r0, #4278190080	; 0xff000000
 8017610:	22ff      	movs	r2, #255	; 0xff
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	4640      	mov	r0, r8
 8017616:	4798      	blx	r3
 8017618:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 801761c:	691b      	ldr	r3, [r3, #16]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	e005      	b.n	801762e <_SpriteDraw+0x18a>
 8017622:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8017626:	f048 407f 	orr.w	r0, r8, #4278190080	; 0xff000000
 801762a:	691b      	ldr	r3, [r3, #16]
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	4798      	blx	r3
 8017630:	9b03      	ldr	r3, [sp, #12]
 8017632:	4602      	mov	r2, r0
 8017634:	4621      	mov	r1, r4
 8017636:	9300      	str	r3, [sp, #0]
 8017638:	4630      	mov	r0, r6
 801763a:	462b      	mov	r3, r5
 801763c:	f7ff ff01 	bl	8017442 <_SetBkIndexBuffered>
 8017640:	3601      	adds	r6, #1
 8017642:	e7b2      	b.n	80175aa <_SpriteDraw+0x106>
 8017644:	3401      	adds	r4, #1
 8017646:	e7a5      	b.n	8017594 <_SpriteDraw+0xf0>
 8017648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801764a:	9903      	ldr	r1, [sp, #12]
 801764c:	6818      	ldr	r0, [r3, #0]
 801764e:	f7ff ff1a 	bl	8017486 <_ReleaseBuffer.isra.6>
 8017652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017654:	a80b      	add	r0, sp, #44	; 0x2c
 8017656:	f8c3 b014 	str.w	fp, [r3, #20]
 801765a:	9b04      	ldr	r3, [sp, #16]
 801765c:	429f      	cmp	r7, r3
 801765e:	bf1f      	itttt	ne
 8017660:	4b07      	ldrne	r3, [pc, #28]	; (8017680 <_SpriteDraw+0x1dc>)
 8017662:	f89d 2010 	ldrbne.w	r2, [sp, #16]
 8017666:	681b      	ldrne	r3, [r3, #0]
 8017668:	745a      	strbne	r2, [r3, #17]
 801766a:	f7f5 fe3f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801766e:	9b05      	ldr	r3, [sp, #20]
 8017670:	b113      	cbz	r3, 8017678 <_SpriteDraw+0x1d4>
 8017672:	2100      	movs	r1, #0
 8017674:	9808      	ldr	r0, [sp, #32]
 8017676:	4798      	blx	r3
 8017678:	b011      	add	sp, #68	; 0x44
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	bf00      	nop
 8017680:	20000018 	.word	0x20000018
 8017684:	20000030 	.word	0x20000030
 8017688:	2002260c 	.word	0x2002260c

0801768c <_Undraw>:
 801768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017690:	b08d      	sub	sp, #52	; 0x34
 8017692:	f7f5 fe1d 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017696:	4a38      	ldr	r2, [pc, #224]	; (8017778 <_Undraw+0xec>)
 8017698:	f8d0 b000 	ldr.w	fp, [r0]
 801769c:	ac08      	add	r4, sp, #32
 801769e:	6813      	ldr	r3, [r2, #0]
 80176a0:	4605      	mov	r5, r0
 80176a2:	f8db 9018 	ldr.w	r9, [fp, #24]
 80176a6:	f893 8011 	ldrb.w	r8, [r3, #17]
 80176aa:	9007      	str	r0, [sp, #28]
 80176ac:	45c1      	cmp	r9, r8
 80176ae:	9204      	str	r2, [sp, #16]
 80176b0:	bf18      	it	ne
 80176b2:	f883 9011 	strbne.w	r9, [r3, #17]
 80176b6:	6943      	ldr	r3, [r0, #20]
 80176b8:	9303      	str	r3, [sp, #12]
 80176ba:	1d03      	adds	r3, r0, #4
 80176bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80176c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80176c4:	a90a      	add	r1, sp, #40	; 0x28
 80176c6:	4658      	mov	r0, fp
 80176c8:	f7ff fe60 	bl	801738c <_GetDeviceRect>
 80176cc:	a90a      	add	r1, sp, #40	; 0x28
 80176ce:	4620      	mov	r0, r4
 80176d0:	f7f7 fb85 	bl	800edde <GUI__IntersectRect>
 80176d4:	2101      	movs	r1, #1
 80176d6:	9807      	ldr	r0, [sp, #28]
 80176d8:	f7ff fd3e 	bl	8017158 <_CreateBuffer>
 80176dc:	4682      	mov	sl, r0
 80176de:	2800      	cmp	r0, #0
 80176e0:	d037      	beq.n	8017752 <_Undraw+0xc6>
 80176e2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80176e6:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80176ea:	429c      	cmp	r4, r3
 80176ec:	9b07      	ldr	r3, [sp, #28]
 80176ee:	dc2c      	bgt.n	801774a <_Undraw+0xbe>
 80176f0:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 80176f4:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80176f8:	1be7      	subs	r7, r4, r7
 80176fa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80176fe:	429e      	cmp	r6, r3
 8017700:	dc21      	bgt.n	8017746 <_Undraw+0xba>
 8017702:	9b07      	ldr	r3, [sp, #28]
 8017704:	463a      	mov	r2, r7
 8017706:	9803      	ldr	r0, [sp, #12]
 8017708:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801770c:	1a73      	subs	r3, r6, r1
 801770e:	4619      	mov	r1, r3
 8017710:	9305      	str	r3, [sp, #20]
 8017712:	f7f6 f90c 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8017716:	9a07      	ldr	r2, [sp, #28]
 8017718:	9b05      	ldr	r3, [sp, #20]
 801771a:	68d2      	ldr	r2, [r2, #12]
 801771c:	b10a      	cbz	r2, 8017722 <_Undraw+0x96>
 801771e:	b910      	cbnz	r0, 8017726 <_Undraw+0x9a>
 8017720:	e00f      	b.n	8017742 <_Undraw+0xb6>
 8017722:	0e02      	lsrs	r2, r0, #24
 8017724:	d00d      	beq.n	8017742 <_Undraw+0xb6>
 8017726:	9a03      	ldr	r2, [sp, #12]
 8017728:	4630      	mov	r0, r6
 801772a:	8811      	ldrh	r1, [r2, #0]
 801772c:	f8cd a000 	str.w	sl, [sp]
 8017730:	fb07 3101 	mla	r1, r7, r1, r3
 8017734:	465b      	mov	r3, fp
 8017736:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801773a:	6a0a      	ldr	r2, [r1, #32]
 801773c:	4621      	mov	r1, r4
 801773e:	f7ff fe80 	bl	8017442 <_SetBkIndexBuffered>
 8017742:	3601      	adds	r6, #1
 8017744:	e7d9      	b.n	80176fa <_Undraw+0x6e>
 8017746:	3401      	adds	r4, #1
 8017748:	e7cd      	b.n	80176e6 <_Undraw+0x5a>
 801774a:	4651      	mov	r1, sl
 801774c:	6818      	ldr	r0, [r3, #0]
 801774e:	f7ff fe9a 	bl	8017486 <_ReleaseBuffer.isra.6>
 8017752:	9a07      	ldr	r2, [sp, #28]
 8017754:	6993      	ldr	r3, [r2, #24]
 8017756:	b113      	cbz	r3, 801775e <_Undraw+0xd2>
 8017758:	2101      	movs	r1, #1
 801775a:	69d0      	ldr	r0, [r2, #28]
 801775c:	4798      	blx	r3
 801775e:	a807      	add	r0, sp, #28
 8017760:	f7f5 fdc4 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017764:	45c1      	cmp	r9, r8
 8017766:	bf1e      	ittt	ne
 8017768:	9b04      	ldrne	r3, [sp, #16]
 801776a:	681b      	ldrne	r3, [r3, #0]
 801776c:	f883 8011 	strbne.w	r8, [r3, #17]
 8017770:	b00d      	add	sp, #52	; 0x34
 8017772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017776:	bf00      	nop
 8017778:	20000018 	.word	0x20000018

0801777c <GUI_SPRITE__CreateEx>:
 801777c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017780:	4605      	mov	r5, r0
 8017782:	8800      	ldrh	r0, [r0, #0]
 8017784:	4688      	mov	r8, r1
 8017786:	4617      	mov	r7, r2
 8017788:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 801778c:	2800      	cmp	r0, #0
 801778e:	d056      	beq.n	801783e <GUI_SPRITE__CreateEx+0xc2>
 8017790:	8868      	ldrh	r0, [r5, #2]
 8017792:	2800      	cmp	r0, #0
 8017794:	d053      	beq.n	801783e <GUI_SPRITE__CreateEx+0xc2>
 8017796:	68e8      	ldr	r0, [r5, #12]
 8017798:	b110      	cbz	r0, 80177a0 <GUI_SPRITE__CreateEx+0x24>
 801779a:	6880      	ldr	r0, [r0, #8]
 801779c:	b918      	cbnz	r0, 80177a6 <GUI_SPRITE__CreateEx+0x2a>
 801779e:	e04e      	b.n	801783e <GUI_SPRITE__CreateEx+0xc2>
 80177a0:	88ea      	ldrh	r2, [r5, #6]
 80177a2:	2a20      	cmp	r2, #32
 80177a4:	d14b      	bne.n	801783e <GUI_SPRITE__CreateEx+0xc2>
 80177a6:	f006 0201 	and.w	r2, r6, #1
 80177aa:	2100      	movs	r1, #0
 80177ac:	4825      	ldr	r0, [pc, #148]	; (8017844 <GUI_SPRITE__CreateEx+0xc8>)
 80177ae:	f7f6 fbd1 	bl	800df54 <GUI_DEVICE_Create>
 80177b2:	4604      	mov	r4, r0
 80177b4:	2800      	cmp	r0, #0
 80177b6:	d042      	beq.n	801783e <GUI_SPRITE__CreateEx+0xc2>
 80177b8:	886b      	ldrh	r3, [r5, #2]
 80177ba:	f8b5 9000 	ldrh.w	r9, [r5]
 80177be:	fb03 f909 	mul.w	r9, r3, r9
 80177c2:	f7f6 fed5 	bl	800e570 <GUI_Lock>
 80177c6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80177ca:	f109 0020 	add.w	r0, r9, #32
 80177ce:	f7f5 ff73 	bl	800d6b8 <GUI_ALLOC_AllocZero>
 80177d2:	4681      	mov	r9, r0
 80177d4:	b918      	cbnz	r0, 80177de <GUI_SPRITE__CreateEx+0x62>
 80177d6:	4620      	mov	r0, r4
 80177d8:	f7f6 fbba 	bl	800df50 <GUI_DEVICE_Delete>
 80177dc:	e02b      	b.n	8017836 <GUI_SPRITE__CreateEx+0xba>
 80177de:	60a0      	str	r0, [r4, #8]
 80177e0:	f7f5 fd76 	bl	800d2d0 <GUI_ALLOC_LockH>
 80177e4:	882a      	ldrh	r2, [r5, #0]
 80177e6:	4603      	mov	r3, r0
 80177e8:	a802      	add	r0, sp, #8
 80177ea:	3a01      	subs	r2, #1
 80177ec:	f8a3 8004 	strh.w	r8, [r3, #4]
 80177f0:	4490      	add	r8, r2
 80177f2:	886a      	ldrh	r2, [r5, #2]
 80177f4:	80df      	strh	r7, [r3, #6]
 80177f6:	3a01      	subs	r2, #1
 80177f8:	f840 3d04 	str.w	r3, [r0, #-4]!
 80177fc:	821e      	strh	r6, [r3, #16]
 80177fe:	4417      	add	r7, r2
 8017800:	615d      	str	r5, [r3, #20]
 8017802:	f8a3 8008 	strh.w	r8, [r3, #8]
 8017806:	815f      	strh	r7, [r3, #10]
 8017808:	601c      	str	r4, [r3, #0]
 801780a:	f7f5 fd6f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801780e:	68eb      	ldr	r3, [r5, #12]
 8017810:	b14b      	cbz	r3, 8017826 <GUI_SPRITE__CreateEx+0xaa>
 8017812:	f105 010c 	add.w	r1, r5, #12
 8017816:	4648      	mov	r0, r9
 8017818:	f7ff fd72 	bl	8017300 <_DoColorConversion.isra.3>
 801781c:	b118      	cbz	r0, 8017826 <GUI_SPRITE__CreateEx+0xaa>
 801781e:	f7f6 fe9d 	bl	800e55c <GUI_Unlock>
 8017822:	2000      	movs	r0, #0
 8017824:	e00b      	b.n	801783e <GUI_SPRITE__CreateEx+0xc2>
 8017826:	07b3      	lsls	r3, r6, #30
 8017828:	d505      	bpl.n	8017836 <GUI_SPRITE__CreateEx+0xba>
 801782a:	4648      	mov	r0, r9
 801782c:	f7ff fc86 	bl	801713c <_Link>
 8017830:	4648      	mov	r0, r9
 8017832:	f7ff fe37 	bl	80174a4 <_SpriteDraw>
 8017836:	f7f6 fe91 	bl	800e55c <GUI_Unlock>
 801783a:	4648      	mov	r0, r9
 801783c:	e7ff      	b.n	801783e <GUI_SPRITE__CreateEx+0xc2>
 801783e:	b003      	add	sp, #12
 8017840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017844:	0801d798 	.word	0x0801d798

08017848 <GUI_SPRITE_Delete>:
 8017848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801784a:	4604      	mov	r4, r0
 801784c:	b300      	cbz	r0, 8017890 <GUI_SPRITE_Delete+0x48>
 801784e:	f7f6 fe8f 	bl	800e570 <GUI_Lock>
 8017852:	4620      	mov	r0, r4
 8017854:	f7ff ff1a 	bl	801768c <_Undraw>
 8017858:	4620      	mov	r0, r4
 801785a:	f7ff fccf 	bl	80171fc <_Unlink>
 801785e:	4620      	mov	r0, r4
 8017860:	f7f5 fd36 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017864:	9001      	str	r0, [sp, #4]
 8017866:	6800      	ldr	r0, [r0, #0]
 8017868:	ad02      	add	r5, sp, #8
 801786a:	f7f5 fd1d 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 801786e:	9b01      	ldr	r3, [sp, #4]
 8017870:	68d8      	ldr	r0, [r3, #12]
 8017872:	f7f5 fd6b 	bl	800d34c <GUI_ALLOC_Free>
 8017876:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801787a:	69d8      	ldr	r0, [r3, #28]
 801787c:	f7f5 fd66 	bl	800d34c <GUI_ALLOC_Free>
 8017880:	4628      	mov	r0, r5
 8017882:	f7f5 fd33 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017886:	4620      	mov	r0, r4
 8017888:	f7f5 fd60 	bl	800d34c <GUI_ALLOC_Free>
 801788c:	f7f6 fe66 	bl	800e55c <GUI_Unlock>
 8017890:	b003      	add	sp, #12
 8017892:	bd30      	pop	{r4, r5, pc}

08017894 <GUI_SPRITE_SetPosition>:
 8017894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017898:	b0a7      	sub	sp, #156	; 0x9c
 801789a:	4604      	mov	r4, r0
 801789c:	9111      	str	r1, [sp, #68]	; 0x44
 801789e:	9212      	str	r2, [sp, #72]	; 0x48
 80178a0:	2800      	cmp	r0, #0
 80178a2:	f000 8247 	beq.w	8017d34 <GUI_SPRITE_SetPosition+0x4a0>
 80178a6:	f7f6 fe63 	bl	800e570 <GUI_Lock>
 80178aa:	4620      	mov	r0, r4
 80178ac:	f7f5 fd10 	bl	800d2d0 <GUI_ALLOC_LockH>
 80178b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80178b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80178b6:	9023      	str	r0, [sp, #140]	; 0x8c
 80178b8:	429a      	cmp	r2, r3
 80178ba:	f8d0 b000 	ldr.w	fp, [r0]
 80178be:	d105      	bne.n	80178cc <GUI_SPRITE_SetPosition+0x38>
 80178c0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80178c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80178c6:	429a      	cmp	r2, r3
 80178c8:	f000 8204 	beq.w	8017cd4 <GUI_SPRITE_SetPosition+0x440>
 80178cc:	2000      	movs	r0, #0
 80178ce:	f001 fde1 	bl	8019494 <GUI_MEMDEV_Select>
 80178d2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80178d6:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80178d8:	9309      	str	r3, [sp, #36]	; 0x24
 80178da:	4b96      	ldr	r3, [pc, #600]	; (8017b34 <GUI_SPRITE_SetPosition+0x2a0>)
 80178dc:	901e      	str	r0, [sp, #120]	; 0x78
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	7c5a      	ldrb	r2, [r3, #17]
 80178e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80178e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80178e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178e8:	428a      	cmp	r2, r1
 80178ea:	bf1c      	itt	ne
 80178ec:	f89d 2024 	ldrbne.w	r2, [sp, #36]	; 0x24
 80178f0:	745a      	strbne	r2, [r3, #17]
 80178f2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80178f6:	9305      	str	r3, [sp, #20]
 80178f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80178fc:	9a05      	ldr	r2, [sp, #20]
 80178fe:	9306      	str	r3, [sp, #24]
 8017900:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8017904:	ebc2 0a03 	rsb	sl, r2, r3
 8017908:	9a06      	ldr	r2, [sp, #24]
 801790a:	f10a 0301 	add.w	r3, sl, #1
 801790e:	9307      	str	r3, [sp, #28]
 8017910:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8017914:	1a9b      	subs	r3, r3, r2
 8017916:	9308      	str	r3, [sp, #32]
 8017918:	3301      	adds	r3, #1
 801791a:	9319      	str	r3, [sp, #100]	; 0x64
 801791c:	8a2b      	ldrh	r3, [r5, #16]
 801791e:	079b      	lsls	r3, r3, #30
 8017920:	f140 81bb 	bpl.w	8017c9a <GUI_SPRITE_SetPosition+0x406>
 8017924:	696b      	ldr	r3, [r5, #20]
 8017926:	9a05      	ldr	r2, [sp, #20]
 8017928:	930c      	str	r3, [sp, #48]	; 0x30
 801792a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801792c:	1a9b      	subs	r3, r3, r2
 801792e:	9a06      	ldr	r2, [sp, #24]
 8017930:	9302      	str	r3, [sp, #8]
 8017932:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017934:	1a9b      	subs	r3, r3, r2
 8017936:	9303      	str	r3, [sp, #12]
 8017938:	9b02      	ldr	r3, [sp, #8]
 801793a:	2b00      	cmp	r3, #0
 801793c:	dc09      	bgt.n	8017952 <GUI_SPRITE_SetPosition+0xbe>
 801793e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8017942:	449a      	add	sl, r3
 8017944:	2300      	movs	r3, #0
 8017946:	9316      	str	r3, [sp, #88]	; 0x58
 8017948:	f04f 33ff 	mov.w	r3, #4294967295
 801794c:	930f      	str	r3, [sp, #60]	; 0x3c
 801794e:	9304      	str	r3, [sp, #16]
 8017950:	e007      	b.n	8017962 <GUI_SPRITE_SetPosition+0xce>
 8017952:	9b02      	ldr	r3, [sp, #8]
 8017954:	9316      	str	r3, [sp, #88]	; 0x58
 8017956:	9b07      	ldr	r3, [sp, #28]
 8017958:	930f      	str	r3, [sp, #60]	; 0x3c
 801795a:	2301      	movs	r3, #1
 801795c:	9304      	str	r3, [sp, #16]
 801795e:	2300      	movs	r3, #0
 8017960:	930b      	str	r3, [sp, #44]	; 0x2c
 8017962:	9b03      	ldr	r3, [sp, #12]
 8017964:	2b00      	cmp	r3, #0
 8017966:	dc0b      	bgt.n	8017980 <GUI_SPRITE_SetPosition+0xec>
 8017968:	9c08      	ldr	r4, [sp, #32]
 801796a:	9a03      	ldr	r2, [sp, #12]
 801796c:	4623      	mov	r3, r4
 801796e:	4413      	add	r3, r2
 8017970:	9308      	str	r3, [sp, #32]
 8017972:	2300      	movs	r3, #0
 8017974:	9314      	str	r3, [sp, #80]	; 0x50
 8017976:	f04f 33ff 	mov.w	r3, #4294967295
 801797a:	9310      	str	r3, [sp, #64]	; 0x40
 801797c:	930a      	str	r3, [sp, #40]	; 0x28
 801797e:	e006      	b.n	801798e <GUI_SPRITE_SetPosition+0xfa>
 8017980:	9b03      	ldr	r3, [sp, #12]
 8017982:	2400      	movs	r4, #0
 8017984:	9314      	str	r3, [sp, #80]	; 0x50
 8017986:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017988:	9310      	str	r3, [sp, #64]	; 0x40
 801798a:	2301      	movs	r3, #1
 801798c:	930a      	str	r3, [sp, #40]	; 0x28
 801798e:	a924      	add	r1, sp, #144	; 0x90
 8017990:	4658      	mov	r0, fp
 8017992:	f7ff fcfb 	bl	801738c <_GetDeviceRect>
 8017996:	9904      	ldr	r1, [sp, #16]
 8017998:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801799a:	f7ff fbdd 	bl	8017158 <_CreateBuffer>
 801799e:	900d      	str	r0, [sp, #52]	; 0x34
 80179a0:	2800      	cmp	r0, #0
 80179a2:	f000 817a 	beq.w	8017c9a <GUI_SPRITE_SetPosition+0x406>
 80179a6:	9904      	ldr	r1, [sp, #16]
 80179a8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80179aa:	f7ff fbd5 	bl	8017158 <_CreateBuffer>
 80179ae:	900e      	str	r0, [sp, #56]	; 0x38
 80179b0:	2800      	cmp	r0, #0
 80179b2:	f000 816d 	beq.w	8017c90 <GUI_SPRITE_SetPosition+0x3fc>
 80179b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80179b8:	68d8      	ldr	r0, [r3, #12]
 80179ba:	b980      	cbnz	r0, 80179de <GUI_SPRITE_SetPosition+0x14a>
 80179bc:	9b07      	ldr	r3, [sp, #28]
 80179be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	901d      	str	r0, [sp, #116]	; 0x74
 80179c4:	4353      	muls	r3, r2
 80179c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80179c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80179ca:	9b07      	ldr	r3, [sp, #28]
 80179cc:	fb03 2304 	mla	r3, r3, r4, r2
 80179d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80179d4:	9315      	str	r3, [sp, #84]	; 0x54
 80179d6:	9b04      	ldr	r3, [sp, #16]
 80179d8:	009b      	lsls	r3, r3, #2
 80179da:	9320      	str	r3, [sp, #128]	; 0x80
 80179dc:	e0cc      	b.n	8017b78 <GUI_SPRITE_SetPosition+0x2e4>
 80179de:	f7f5 fc77 	bl	800d2d0 <GUI_ALLOC_LockH>
 80179e2:	9b07      	ldr	r3, [sp, #28]
 80179e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179e6:	009b      	lsls	r3, r3, #2
 80179e8:	9022      	str	r0, [sp, #136]	; 0x88
 80179ea:	4353      	muls	r3, r2
 80179ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80179ee:	931f      	str	r3, [sp, #124]	; 0x7c
 80179f0:	9b07      	ldr	r3, [sp, #28]
 80179f2:	fb03 2304 	mla	r3, r3, r4, r2
 80179f6:	9a02      	ldr	r2, [sp, #8]
 80179f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80179fc:	9315      	str	r3, [sp, #84]	; 0x54
 80179fe:	9b04      	ldr	r3, [sp, #16]
 8017a00:	009b      	lsls	r3, r3, #2
 8017a02:	9320      	str	r3, [sp, #128]	; 0x80
 8017a04:	9b05      	ldr	r3, [sp, #20]
 8017a06:	4413      	add	r3, r2
 8017a08:	9321      	str	r3, [sp, #132]	; 0x84
 8017a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a0c:	429c      	cmp	r4, r3
 8017a0e:	f000 808c 	beq.w	8017b2a <GUI_SPRITE_SetPosition+0x296>
 8017a12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a14:	429c      	cmp	r4, r3
 8017a16:	db05      	blt.n	8017a24 <GUI_SPRITE_SetPosition+0x190>
 8017a18:	9b08      	ldr	r3, [sp, #32]
 8017a1a:	429c      	cmp	r4, r3
 8017a1c:	bfcc      	ite	gt
 8017a1e:	2300      	movgt	r3, #0
 8017a20:	2301      	movle	r3, #1
 8017a22:	e000      	b.n	8017a26 <GUI_SPRITE_SetPosition+0x192>
 8017a24:	2300      	movs	r3, #0
 8017a26:	931a      	str	r3, [sp, #104]	; 0x68
 8017a28:	9b06      	ldr	r3, [sp, #24]
 8017a2a:	9a06      	ldr	r2, [sp, #24]
 8017a2c:	18e3      	adds	r3, r4, r3
 8017a2e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8017a32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017a34:	9318      	str	r3, [sp, #96]	; 0x60
 8017a36:	9b03      	ldr	r3, [sp, #12]
 8017a38:	189e      	adds	r6, r3, r2
 8017a3a:	1ae3      	subs	r3, r4, r3
 8017a3c:	4426      	add	r6, r4
 8017a3e:	931d      	str	r3, [sp, #116]	; 0x74
 8017a40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a42:	429d      	cmp	r5, r3
 8017a44:	d06a      	beq.n	8017b1c <GUI_SPRITE_SetPosition+0x288>
 8017a46:	4622      	mov	r2, r4
 8017a48:	4629      	mov	r1, r5
 8017a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017a4c:	f7f5 ff6f 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8017a50:	901b      	str	r0, [sp, #108]	; 0x6c
 8017a52:	2800      	cmp	r0, #0
 8017a54:	d05d      	beq.n	8017b12 <GUI_SPRITE_SetPosition+0x27e>
 8017a56:	9b05      	ldr	r3, [sp, #20]
 8017a58:	18eb      	adds	r3, r5, r3
 8017a5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8017a5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a5e:	195f      	adds	r7, r3, r5
 8017a60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017a62:	429d      	cmp	r5, r3
 8017a64:	db04      	blt.n	8017a70 <GUI_SPRITE_SetPosition+0x1dc>
 8017a66:	4555      	cmp	r5, sl
 8017a68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017a6a:	bfc8      	it	gt
 8017a6c:	2300      	movgt	r3, #0
 8017a6e:	e000      	b.n	8017a72 <GUI_SPRITE_SetPosition+0x1de>
 8017a70:	2300      	movs	r3, #0
 8017a72:	931c      	str	r3, [sp, #112]	; 0x70
 8017a74:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8017a78:	42bb      	cmp	r3, r7
 8017a7a:	dc13      	bgt.n	8017aa4 <GUI_SPRITE_SetPosition+0x210>
 8017a7c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8017a80:	42b3      	cmp	r3, r6
 8017a82:	dc0f      	bgt.n	8017aa4 <GUI_SPRITE_SetPosition+0x210>
 8017a84:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8017a88:	42bb      	cmp	r3, r7
 8017a8a:	db0b      	blt.n	8017aa4 <GUI_SPRITE_SetPosition+0x210>
 8017a8c:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8017a90:	42b3      	cmp	r3, r6
 8017a92:	db07      	blt.n	8017aa4 <GUI_SPRITE_SetPosition+0x210>
 8017a94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017a96:	465a      	mov	r2, fp
 8017a98:	4631      	mov	r1, r6
 8017a9a:	4638      	mov	r0, r7
 8017a9c:	f7ff fbbc 	bl	8017218 <_GetBkIndex.isra.0>
 8017aa0:	4680      	mov	r8, r0
 8017aa2:	e001      	b.n	8017aa8 <GUI_SPRITE_SetPosition+0x214>
 8017aa4:	f04f 0800 	mov.w	r8, #0
 8017aa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017aaa:	b153      	cbz	r3, 8017ac2 <GUI_SPRITE_SetPosition+0x22e>
 8017aac:	9b02      	ldr	r3, [sp, #8]
 8017aae:	1ae9      	subs	r1, r5, r3
 8017ab0:	d412      	bmi.n	8017ad8 <GUI_SPRITE_SetPosition+0x244>
 8017ab2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	db0f      	blt.n	8017ad8 <GUI_SPRITE_SetPosition+0x244>
 8017ab8:	461a      	mov	r2, r3
 8017aba:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017abc:	f7f5 ff37 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8017ac0:	b950      	cbnz	r0, 8017ad8 <GUI_SPRITE_SetPosition+0x244>
 8017ac2:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8017ac6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017ac8:	4293      	cmp	r3, r2
 8017aca:	dc05      	bgt.n	8017ad8 <GUI_SPRITE_SetPosition+0x244>
 8017acc:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8017ad0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	f340 8104 	ble.w	8017ce0 <GUI_SPRITE_SetPosition+0x44c>
 8017ad8:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8017adc:	42bb      	cmp	r3, r7
 8017ade:	dc16      	bgt.n	8017b0e <GUI_SPRITE_SetPosition+0x27a>
 8017ae0:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8017ae4:	42b3      	cmp	r3, r6
 8017ae6:	dc12      	bgt.n	8017b0e <GUI_SPRITE_SetPosition+0x27a>
 8017ae8:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8017aec:	42bb      	cmp	r3, r7
 8017aee:	db0e      	blt.n	8017b0e <GUI_SPRITE_SetPosition+0x27a>
 8017af0:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8017af4:	42b3      	cmp	r3, r6
 8017af6:	db0a      	blt.n	8017b0e <GUI_SPRITE_SetPosition+0x27a>
 8017af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017afa:	4638      	mov	r0, r7
 8017afc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017afe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017b00:	9300      	str	r3, [sp, #0]
 8017b02:	465b      	mov	r3, fp
 8017b04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8017b08:	4631      	mov	r1, r6
 8017b0a:	f7ff fc9a 	bl	8017442 <_SetBkIndexBuffered>
 8017b0e:	f8c9 8020 	str.w	r8, [r9, #32]
 8017b12:	9b04      	ldr	r3, [sp, #16]
 8017b14:	441d      	add	r5, r3
 8017b16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017b18:	4499      	add	r9, r3
 8017b1a:	e791      	b.n	8017a40 <GUI_SPRITE_SetPosition+0x1ac>
 8017b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017b20:	441c      	add	r4, r3
 8017b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b24:	4413      	add	r3, r2
 8017b26:	9315      	str	r3, [sp, #84]	; 0x54
 8017b28:	e76f      	b.n	8017a0a <GUI_SPRITE_SetPosition+0x176>
 8017b2a:	a822      	add	r0, sp, #136	; 0x88
 8017b2c:	f7f5 fbde 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017b30:	e0a9      	b.n	8017c86 <GUI_SPRITE_SetPosition+0x3f2>
 8017b32:	bf00      	nop
 8017b34:	20000018 	.word	0x20000018
 8017b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b3a:	42a3      	cmp	r3, r4
 8017b3c:	dc20      	bgt.n	8017b80 <GUI_SPRITE_SetPosition+0x2ec>
 8017b3e:	9b08      	ldr	r3, [sp, #32]
 8017b40:	42a3      	cmp	r3, r4
 8017b42:	bfb4      	ite	lt
 8017b44:	2300      	movlt	r3, #0
 8017b46:	2301      	movge	r3, #1
 8017b48:	931a      	str	r3, [sp, #104]	; 0x68
 8017b4a:	9b06      	ldr	r3, [sp, #24]
 8017b4c:	9a06      	ldr	r2, [sp, #24]
 8017b4e:	4423      	add	r3, r4
 8017b50:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8017b54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017b56:	9318      	str	r3, [sp, #96]	; 0x60
 8017b58:	9b03      	ldr	r3, [sp, #12]
 8017b5a:	189e      	adds	r6, r3, r2
 8017b5c:	9b05      	ldr	r3, [sp, #20]
 8017b5e:	9a02      	ldr	r2, [sp, #8]
 8017b60:	4426      	add	r6, r4
 8017b62:	4413      	add	r3, r2
 8017b64:	9321      	str	r3, [sp, #132]	; 0x84
 8017b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b68:	42ab      	cmp	r3, r5
 8017b6a:	d10b      	bne.n	8017b84 <GUI_SPRITE_SetPosition+0x2f0>
 8017b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017b70:	441c      	add	r4, r3
 8017b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b74:	4413      	add	r3, r2
 8017b76:	9315      	str	r3, [sp, #84]	; 0x54
 8017b78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b7a:	42a3      	cmp	r3, r4
 8017b7c:	d1dc      	bne.n	8017b38 <GUI_SPRITE_SetPosition+0x2a4>
 8017b7e:	e082      	b.n	8017c86 <GUI_SPRITE_SetPosition+0x3f2>
 8017b80:	2300      	movs	r3, #0
 8017b82:	e7e1      	b.n	8017b48 <GUI_SPRITE_SetPosition+0x2b4>
 8017b84:	4622      	mov	r2, r4
 8017b86:	4629      	mov	r1, r5
 8017b88:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017b8a:	f7f5 fed0 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	901b      	str	r0, [sp, #108]	; 0x6c
 8017b92:	0e1b      	lsrs	r3, r3, #24
 8017b94:	d072      	beq.n	8017c7c <GUI_SPRITE_SetPosition+0x3e8>
 8017b96:	9b05      	ldr	r3, [sp, #20]
 8017b98:	18eb      	adds	r3, r5, r3
 8017b9a:	9317      	str	r3, [sp, #92]	; 0x5c
 8017b9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b9e:	eb03 0805 	add.w	r8, r3, r5
 8017ba2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017ba4:	42ab      	cmp	r3, r5
 8017ba6:	dc04      	bgt.n	8017bb2 <GUI_SPRITE_SetPosition+0x31e>
 8017ba8:	45aa      	cmp	sl, r5
 8017baa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017bac:	bfb8      	it	lt
 8017bae:	2300      	movlt	r3, #0
 8017bb0:	e000      	b.n	8017bb4 <GUI_SPRITE_SetPosition+0x320>
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	931c      	str	r3, [sp, #112]	; 0x70
 8017bb6:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8017bba:	4543      	cmp	r3, r8
 8017bbc:	dc1d      	bgt.n	8017bfa <GUI_SPRITE_SetPosition+0x366>
 8017bbe:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8017bc2:	42b3      	cmp	r3, r6
 8017bc4:	dc19      	bgt.n	8017bfa <GUI_SPRITE_SetPosition+0x366>
 8017bc6:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8017bca:	4543      	cmp	r3, r8
 8017bcc:	db15      	blt.n	8017bfa <GUI_SPRITE_SetPosition+0x366>
 8017bce:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8017bd2:	42b3      	cmp	r3, r6
 8017bd4:	db11      	blt.n	8017bfa <GUI_SPRITE_SetPosition+0x366>
 8017bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017bd8:	465a      	mov	r2, fp
 8017bda:	4631      	mov	r1, r6
 8017bdc:	4640      	mov	r0, r8
 8017bde:	f7ff fb53 	bl	8017288 <_GetBkIndexAlpha.isra.2>
 8017be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017be4:	4b55      	ldr	r3, [pc, #340]	; (8017d3c <GUI_SPRITE_SetPosition+0x4a8>)
 8017be6:	4607      	mov	r7, r0
 8017be8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8017bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bf0:	691b      	ldr	r3, [r3, #16]
 8017bf2:	685b      	ldr	r3, [r3, #4]
 8017bf4:	4798      	blx	r3
 8017bf6:	901d      	str	r0, [sp, #116]	; 0x74
 8017bf8:	e000      	b.n	8017bfc <GUI_SPRITE_SetPosition+0x368>
 8017bfa:	2700      	movs	r7, #0
 8017bfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017bfe:	b153      	cbz	r3, 8017c16 <GUI_SPRITE_SetPosition+0x382>
 8017c00:	9b02      	ldr	r3, [sp, #8]
 8017c02:	1ae9      	subs	r1, r5, r3
 8017c04:	d411      	bmi.n	8017c2a <GUI_SPRITE_SetPosition+0x396>
 8017c06:	9b03      	ldr	r3, [sp, #12]
 8017c08:	1ae2      	subs	r2, r4, r3
 8017c0a:	d40e      	bmi.n	8017c2a <GUI_SPRITE_SetPosition+0x396>
 8017c0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017c0e:	f7f5 fe8e 	bl	800d92e <GUI_GetBitmapPixelIndex>
 8017c12:	0e03      	lsrs	r3, r0, #24
 8017c14:	d109      	bne.n	8017c2a <GUI_SPRITE_SetPosition+0x396>
 8017c16:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8017c1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017c1c:	4293      	cmp	r3, r2
 8017c1e:	dc04      	bgt.n	8017c2a <GUI_SPRITE_SetPosition+0x396>
 8017c20:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8017c24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017c26:	4293      	cmp	r3, r2
 8017c28:	dd70      	ble.n	8017d0c <GUI_SPRITE_SetPosition+0x478>
 8017c2a:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8017c2e:	4543      	cmp	r3, r8
 8017c30:	dc22      	bgt.n	8017c78 <GUI_SPRITE_SetPosition+0x3e4>
 8017c32:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8017c36:	42b3      	cmp	r3, r6
 8017c38:	dc1e      	bgt.n	8017c78 <GUI_SPRITE_SetPosition+0x3e4>
 8017c3a:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8017c3e:	4543      	cmp	r3, r8
 8017c40:	db1a      	blt.n	8017c78 <GUI_SPRITE_SetPosition+0x3e4>
 8017c42:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8017c46:	42b3      	cmp	r3, r6
 8017c48:	db16      	blt.n	8017c78 <GUI_SPRITE_SetPosition+0x3e4>
 8017c4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c4c:	22ff      	movs	r2, #255	; 0xff
 8017c4e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017c50:	f043 417f 	orr.w	r1, r3, #4278190080	; 0xff000000
 8017c54:	4b3a      	ldr	r3, [pc, #232]	; (8017d40 <GUI_SPRITE_SetPosition+0x4ac>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	4798      	blx	r3
 8017c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c5c:	4b37      	ldr	r3, [pc, #220]	; (8017d3c <GUI_SPRITE_SetPosition+0x4a8>)
 8017c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c62:	691b      	ldr	r3, [r3, #16]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	4798      	blx	r3
 8017c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c6a:	4602      	mov	r2, r0
 8017c6c:	4631      	mov	r1, r6
 8017c6e:	9300      	str	r3, [sp, #0]
 8017c70:	4640      	mov	r0, r8
 8017c72:	465b      	mov	r3, fp
 8017c74:	f7ff fbe5 	bl	8017442 <_SetBkIndexBuffered>
 8017c78:	f8c9 7020 	str.w	r7, [r9, #32]
 8017c7c:	9b04      	ldr	r3, [sp, #16]
 8017c7e:	441d      	add	r5, r3
 8017c80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c82:	4499      	add	r9, r3
 8017c84:	e76f      	b.n	8017b66 <GUI_SPRITE_SetPosition+0x2d2>
 8017c86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017c88:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017c8a:	6818      	ldr	r0, [r3, #0]
 8017c8c:	f7ff fbfb 	bl	8017486 <_ReleaseBuffer.isra.6>
 8017c90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017c92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017c94:	6818      	ldr	r0, [r3, #0]
 8017c96:	f7ff fbf6 	bl	8017486 <_ReleaseBuffer.isra.6>
 8017c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017c9c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8017ca0:	9907      	ldr	r1, [sp, #28]
 8017ca2:	809a      	strh	r2, [r3, #4]
 8017ca4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017ca8:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017caa:	80da      	strh	r2, [r3, #6]
 8017cac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017cae:	440a      	add	r2, r1
 8017cb0:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017cb2:	3a01      	subs	r2, #1
 8017cb4:	811a      	strh	r2, [r3, #8]
 8017cb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cb8:	3a01      	subs	r2, #1
 8017cba:	440a      	add	r2, r1
 8017cbc:	815a      	strh	r2, [r3, #10]
 8017cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017cc2:	4293      	cmp	r3, r2
 8017cc4:	bf1f      	itttt	ne
 8017cc6:	4b1f      	ldrne	r3, [pc, #124]	; (8017d44 <GUI_SPRITE_SetPosition+0x4b0>)
 8017cc8:	f89d 204c 	ldrbne.w	r2, [sp, #76]	; 0x4c
 8017ccc:	681b      	ldrne	r3, [r3, #0]
 8017cce:	745a      	strbne	r2, [r3, #17]
 8017cd0:	f001 fbe0 	bl	8019494 <GUI_MEMDEV_Select>
 8017cd4:	a823      	add	r0, sp, #140	; 0x8c
 8017cd6:	f7f5 fb09 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017cda:	f7f6 fc3f 	bl	800e55c <GUI_Unlock>
 8017cde:	e029      	b.n	8017d34 <GUI_SPRITE_SetPosition+0x4a0>
 8017ce0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8017ce4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	f6ff aef6 	blt.w	8017ad8 <GUI_SPRITE_SetPosition+0x244>
 8017cec:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8017cf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017cf2:	4293      	cmp	r3, r2
 8017cf4:	f6ff aef0 	blt.w	8017ad8 <GUI_SPRITE_SetPosition+0x244>
 8017cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	465b      	mov	r3, fp
 8017d00:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8017d04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017d06:	f7ff fb9c 	bl	8017442 <_SetBkIndexBuffered>
 8017d0a:	e6e5      	b.n	8017ad8 <GUI_SPRITE_SetPosition+0x244>
 8017d0c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8017d10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017d12:	4293      	cmp	r3, r2
 8017d14:	db89      	blt.n	8017c2a <GUI_SPRITE_SetPosition+0x396>
 8017d16:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8017d1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	db84      	blt.n	8017c2a <GUI_SPRITE_SetPosition+0x396>
 8017d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	465b      	mov	r3, fp
 8017d28:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8017d2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017d2e:	f7ff fb88 	bl	8017442 <_SetBkIndexBuffered>
 8017d32:	e77a      	b.n	8017c2a <GUI_SPRITE_SetPosition+0x396>
 8017d34:	b027      	add	sp, #156	; 0x9c
 8017d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d3a:	bf00      	nop
 8017d3c:	2002260c 	.word	0x2002260c
 8017d40:	20000030 	.word	0x20000030
 8017d44:	20000018 	.word	0x20000018

08017d48 <GUI_SPRITE_Show>:
 8017d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	b300      	cbz	r0, 8017d90 <GUI_SPRITE_Show+0x48>
 8017d4e:	f7f6 fc0f 	bl	800e570 <GUI_Lock>
 8017d52:	4620      	mov	r0, r4
 8017d54:	f7f5 fabc 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017d58:	8a03      	ldrh	r3, [r0, #16]
 8017d5a:	ad02      	add	r5, sp, #8
 8017d5c:	079b      	lsls	r3, r3, #30
 8017d5e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017d62:	d410      	bmi.n	8017d86 <GUI_SPRITE_Show+0x3e>
 8017d64:	4620      	mov	r0, r4
 8017d66:	f7ff f9e9 	bl	801713c <_Link>
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	f7f5 fabe 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017d70:	4620      	mov	r0, r4
 8017d72:	f7ff fb97 	bl	80174a4 <_SpriteDraw>
 8017d76:	4620      	mov	r0, r4
 8017d78:	f7f5 faaa 	bl	800d2d0 <GUI_ALLOC_LockH>
 8017d7c:	8a03      	ldrh	r3, [r0, #16]
 8017d7e:	9001      	str	r0, [sp, #4]
 8017d80:	f043 0302 	orr.w	r3, r3, #2
 8017d84:	8203      	strh	r3, [r0, #16]
 8017d86:	4628      	mov	r0, r5
 8017d88:	f7f5 fab0 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8017d8c:	f7f6 fbe6 	bl	800e55c <GUI_Unlock>
 8017d90:	b003      	add	sp, #12
 8017d92:	bd30      	pop	{r4, r5, pc}

08017d94 <_Color2Index>:
 8017d94:	4b04      	ldr	r3, [pc, #16]	; (8017da8 <_Color2Index+0x14>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	7c5a      	ldrb	r2, [r3, #17]
 8017d9a:	4b04      	ldr	r3, [pc, #16]	; (8017dac <_Color2Index+0x18>)
 8017d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	691b      	ldr	r3, [r3, #16]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	4718      	bx	r3
 8017da8:	20000018 	.word	0x20000018
 8017dac:	20000558 	.word	0x20000558

08017db0 <_Index2Color>:
 8017db0:	4b04      	ldr	r3, [pc, #16]	; (8017dc4 <_Index2Color+0x14>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	7c5a      	ldrb	r2, [r3, #17]
 8017db6:	4b04      	ldr	r3, [pc, #16]	; (8017dc8 <_Index2Color+0x18>)
 8017db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	691b      	ldr	r3, [r3, #16]
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	4718      	bx	r3
 8017dc4:	20000018 	.word	0x20000018
 8017dc8:	20000558 	.word	0x20000558

08017dcc <_GetIndexMask>:
 8017dcc:	4b04      	ldr	r3, [pc, #16]	; (8017de0 <_GetIndexMask+0x14>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	7c5a      	ldrb	r2, [r3, #17]
 8017dd2:	4b04      	ldr	r3, [pc, #16]	; (8017de4 <_GetIndexMask+0x18>)
 8017dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	691b      	ldr	r3, [r3, #16]
 8017ddc:	689b      	ldr	r3, [r3, #8]
 8017dde:	4718      	bx	r3
 8017de0:	20000018 	.word	0x20000018
 8017de4:	20000558 	.word	0x20000558

08017de8 <_GetPixelIndex>:
 8017de8:	6800      	ldr	r0, [r0, #0]
 8017dea:	68c3      	ldr	r3, [r0, #12]
 8017dec:	695b      	ldr	r3, [r3, #20]
 8017dee:	4718      	bx	r3

08017df0 <_GetDevData>:
 8017df0:	2000      	movs	r0, #0
 8017df2:	4770      	bx	lr

08017df4 <_SetOrg>:
 8017df4:	6800      	ldr	r0, [r0, #0]
 8017df6:	b110      	cbz	r0, 8017dfe <_SetOrg+0xa>
 8017df8:	68c3      	ldr	r3, [r0, #12]
 8017dfa:	6a1b      	ldr	r3, [r3, #32]
 8017dfc:	4718      	bx	r3
 8017dfe:	4770      	bx	lr

08017e00 <_GetDevFunc>:
 8017e00:	6803      	ldr	r3, [r0, #0]
 8017e02:	b513      	push	{r0, r1, r4, lr}
 8017e04:	4604      	mov	r4, r0
 8017e06:	9301      	str	r3, [sp, #4]
 8017e08:	b90b      	cbnz	r3, 8017e0e <_GetDevFunc+0xe>
 8017e0a:	2000      	movs	r0, #0
 8017e0c:	e00a      	b.n	8017e24 <_GetDevFunc+0x24>
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	9301      	str	r3, [sp, #4]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d0f9      	beq.n	8017e0a <_GetDevFunc+0xa>
 8017e16:	68db      	ldr	r3, [r3, #12]
 8017e18:	a801      	add	r0, sp, #4
 8017e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e1c:	4798      	blx	r3
 8017e1e:	b108      	cbz	r0, 8017e24 <_GetDevFunc+0x24>
 8017e20:	9b01      	ldr	r3, [sp, #4]
 8017e22:	6023      	str	r3, [r4, #0]
 8017e24:	b002      	add	sp, #8
 8017e26:	bd10      	pop	{r4, pc}

08017e28 <_GetDevProp>:
 8017e28:	6800      	ldr	r0, [r0, #0]
 8017e2a:	b110      	cbz	r0, 8017e32 <_GetDevProp+0xa>
 8017e2c:	68c3      	ldr	r3, [r0, #12]
 8017e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e30:	4718      	bx	r3
 8017e32:	f04f 30ff 	mov.w	r0, #4294967295
 8017e36:	4770      	bx	lr

08017e38 <_GetRect>:
 8017e38:	6800      	ldr	r0, [r0, #0]
 8017e3a:	b110      	cbz	r0, 8017e42 <_GetRect+0xa>
 8017e3c:	68c3      	ldr	r3, [r0, #12]
 8017e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e40:	4718      	bx	r3
 8017e42:	4770      	bx	lr

08017e44 <GUI_SetAlpha>:
 8017e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e48:	4e3d      	ldr	r6, [pc, #244]	; (8017f40 <GUI_SetAlpha+0xfc>)
 8017e4a:	4680      	mov	r8, r0
 8017e4c:	4c3d      	ldr	r4, [pc, #244]	; (8017f44 <GUI_SetAlpha+0x100>)
 8017e4e:	6833      	ldr	r3, [r6, #0]
 8017e50:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017e54:	7c58      	ldrb	r0, [r3, #17]
 8017e56:	4b3c      	ldr	r3, [pc, #240]	; (8017f48 <GUI_SetAlpha+0x104>)
 8017e58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017e5c:	699f      	ldr	r7, [r3, #24]
 8017e5e:	f814 a007 	ldrb.w	sl, [r4, r7]
 8017e62:	d10e      	bne.n	8017e82 <GUI_SetAlpha+0x3e>
 8017e64:	2105      	movs	r1, #5
 8017e66:	f7f6 f851 	bl	800df0c <GUI_DEVICE__GetpDevice>
 8017e6a:	4605      	mov	r5, r0
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	d064      	beq.n	8017f3a <GUI_SetAlpha+0xf6>
 8017e70:	2000      	movs	r0, #0
 8017e72:	f001 fb97 	bl	80195a4 <GUI_MEMDEV__SetAlphaCallback>
 8017e76:	4628      	mov	r0, r5
 8017e78:	f7f6 f892 	bl	800dfa0 <GUI_DEVICE_Unlink>
 8017e7c:	f804 8007 	strb.w	r8, [r4, r7]
 8017e80:	e05b      	b.n	8017f3a <GUI_SetAlpha+0xf6>
 8017e82:	4c32      	ldr	r4, [pc, #200]	; (8017f4c <GUI_SetAlpha+0x108>)
 8017e84:	68a3      	ldr	r3, [r4, #8]
 8017e86:	4625      	mov	r5, r4
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d142      	bne.n	8017f12 <GUI_SetAlpha+0xce>
 8017e8c:	4b30      	ldr	r3, [pc, #192]	; (8017f50 <GUI_SetAlpha+0x10c>)
 8017e8e:	4620      	mov	r0, r4
 8017e90:	f840 3f0c 	str.w	r3, [r0, #12]!
 8017e94:	f7f6 f814 	bl	800dec0 <GUI__RegisterExit>
 8017e98:	f7f7 fcec 	bl	800f874 <LCD_GetVXSizeMax>
 8017e9c:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 8017ea0:	4658      	mov	r0, fp
 8017ea2:	f7f5 faed 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 8017ea6:	60a0      	str	r0, [r4, #8]
 8017ea8:	2800      	cmp	r0, #0
 8017eaa:	d046      	beq.n	8017f3a <GUI_SetAlpha+0xf6>
 8017eac:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8017eb0:	f1b9 0f00 	cmp.w	r9, #0
 8017eb4:	d12d      	bne.n	8017f12 <GUI_SetAlpha+0xce>
 8017eb6:	4658      	mov	r0, fp
 8017eb8:	f7f5 fae2 	bl	800d480 <GUI_ALLOC_GetFixedBlock>
 8017ebc:	6160      	str	r0, [r4, #20]
 8017ebe:	b918      	cbnz	r0, 8017ec8 <GUI_SetAlpha+0x84>
 8017ec0:	68a0      	ldr	r0, [r4, #8]
 8017ec2:	f7f5 f9f1 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 8017ec6:	e038      	b.n	8017f3a <GUI_SetAlpha+0xf6>
 8017ec8:	464c      	mov	r4, r9
 8017eca:	46ab      	mov	fp, r5
 8017ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ed0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8017f4c <GUI_SetAlpha+0x108>
 8017ed4:	b9d2      	cbnz	r2, 8017f0c <GUI_SetAlpha+0xc8>
 8017ed6:	491f      	ldr	r1, [pc, #124]	; (8017f54 <GUI_SetAlpha+0x110>)
 8017ed8:	4623      	mov	r3, r4
 8017eda:	f101 0018 	add.w	r0, r1, #24
 8017ede:	f7f6 f839 	bl	800df54 <GUI_DEVICE_Create>
 8017ee2:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8017ee6:	b988      	cbnz	r0, 8017f0c <GUI_SetAlpha+0xc8>
 8017ee8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8017eec:	f7f5 f9dc 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 8017ef0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8017ef4:	f7f5 f9d8 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 8017ef8:	f8d9 0000 	ldr.w	r0, [r9]
 8017efc:	b108      	cbz	r0, 8017f02 <GUI_SetAlpha+0xbe>
 8017efe:	f7f6 f827 	bl	800df50 <GUI_DEVICE_Delete>
 8017f02:	6868      	ldr	r0, [r5, #4]
 8017f04:	b1c8      	cbz	r0, 8017f3a <GUI_SetAlpha+0xf6>
 8017f06:	f7f6 f823 	bl	800df50 <GUI_DEVICE_Delete>
 8017f0a:	e016      	b.n	8017f3a <GUI_SetAlpha+0xf6>
 8017f0c:	3401      	adds	r4, #1
 8017f0e:	2c02      	cmp	r4, #2
 8017f10:	d1dc      	bne.n	8017ecc <GUI_SetAlpha+0x88>
 8017f12:	6833      	ldr	r3, [r6, #0]
 8017f14:	2105      	movs	r1, #5
 8017f16:	7c58      	ldrb	r0, [r3, #17]
 8017f18:	f7f5 fff8 	bl	800df0c <GUI_DEVICE__GetpDevice>
 8017f1c:	b950      	cbnz	r0, 8017f34 <GUI_SetAlpha+0xf0>
 8017f1e:	480e      	ldr	r0, [pc, #56]	; (8017f58 <GUI_SetAlpha+0x114>)
 8017f20:	f001 fb40 	bl	80195a4 <GUI_MEMDEV__SetAlphaCallback>
 8017f24:	4b06      	ldr	r3, [pc, #24]	; (8017f40 <GUI_SetAlpha+0xfc>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	7c5b      	ldrb	r3, [r3, #17]
 8017f2a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8017f2e:	b108      	cbz	r0, 8017f34 <GUI_SetAlpha+0xf0>
 8017f30:	f7f6 f84e 	bl	800dfd0 <GUI_DEVICE_Link>
 8017f34:	4b03      	ldr	r3, [pc, #12]	; (8017f44 <GUI_SetAlpha+0x100>)
 8017f36:	f803 8007 	strb.w	r8, [r3, r7]
 8017f3a:	4650      	mov	r0, sl
 8017f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f40:	20000018 	.word	0x20000018
 8017f44:	20000120 	.word	0x20000120
 8017f48:	2002260c 	.word	0x2002260c
 8017f4c:	20000558 	.word	0x20000558
 8017f50:	08017f5d 	.word	0x08017f5d
 8017f54:	0801d7cc 	.word	0x0801d7cc
 8017f58:	08017e45 	.word	0x08017e45

08017f5c <_OnExit>:
 8017f5c:	b538      	push	{r3, r4, r5, lr}
 8017f5e:	4c0b      	ldr	r4, [pc, #44]	; (8017f8c <_OnExit+0x30>)
 8017f60:	2500      	movs	r5, #0
 8017f62:	68a0      	ldr	r0, [r4, #8]
 8017f64:	f7f5 f9a0 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 8017f68:	6960      	ldr	r0, [r4, #20]
 8017f6a:	60a5      	str	r5, [r4, #8]
 8017f6c:	f7f5 f99c 	bl	800d2a8 <GUI_ALLOC_FreeFixedBlock>
 8017f70:	6820      	ldr	r0, [r4, #0]
 8017f72:	6165      	str	r5, [r4, #20]
 8017f74:	b110      	cbz	r0, 8017f7c <_OnExit+0x20>
 8017f76:	f7f5 ffeb 	bl	800df50 <GUI_DEVICE_Delete>
 8017f7a:	6025      	str	r5, [r4, #0]
 8017f7c:	6860      	ldr	r0, [r4, #4]
 8017f7e:	b120      	cbz	r0, 8017f8a <_OnExit+0x2e>
 8017f80:	f7f5 ffe6 	bl	800df50 <GUI_DEVICE_Delete>
 8017f84:	2200      	movs	r2, #0
 8017f86:	4b01      	ldr	r3, [pc, #4]	; (8017f8c <_OnExit+0x30>)
 8017f88:	605a      	str	r2, [r3, #4]
 8017f8a:	bd38      	pop	{r3, r4, r5, pc}
 8017f8c:	20000558 	.word	0x20000558

08017f90 <_ReadRectFromMemdev>:
 8017f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f94:	4c24      	ldr	r4, [pc, #144]	; (8018028 <_ReadRectFromMemdev+0x98>)
 8017f96:	461d      	mov	r5, r3
 8017f98:	4616      	mov	r6, r2
 8017f9a:	460f      	mov	r7, r1
 8017f9c:	6823      	ldr	r3, [r4, #0]
 8017f9e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8017fa2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017fa4:	f001 fbf8 	bl	8019798 <GUI_MEMDEV_GetXPos>
 8017fa8:	6823      	ldr	r3, [r4, #0]
 8017faa:	4681      	mov	r9, r0
 8017fac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017fae:	f001 fc0f 	bl	80197d0 <GUI_MEMDEV_GetYPos>
 8017fb2:	6823      	ldr	r3, [r4, #0]
 8017fb4:	4682      	mov	sl, r0
 8017fb6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017fb8:	f001 fc26 	bl	8019808 <GUI_MEMDEV_GetXSize>
 8017fbc:	45b2      	cmp	sl, r6
 8017fbe:	4683      	mov	fp, r0
 8017fc0:	dc2e      	bgt.n	8018020 <_ReadRectFromMemdev+0x90>
 8017fc2:	45b9      	cmp	r9, r7
 8017fc4:	dc2c      	bgt.n	8018020 <_ReadRectFromMemdev+0x90>
 8017fc6:	6823      	ldr	r3, [r4, #0]
 8017fc8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017fca:	f001 f9e1 	bl	8019390 <GUI_MEMDEV_GetBitsPerPixel>
 8017fce:	2808      	cmp	r0, #8
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	dd04      	ble.n	8017fde <_ReadRectFromMemdev+0x4e>
 8017fd4:	2811      	cmp	r0, #17
 8017fd6:	bfb4      	ite	lt
 8017fd8:	2102      	movlt	r1, #2
 8017fda:	2104      	movge	r1, #4
 8017fdc:	e000      	b.n	8017fe0 <_ReadRectFromMemdev+0x50>
 8017fde:	2101      	movs	r1, #1
 8017fe0:	6822      	ldr	r2, [r4, #0]
 8017fe2:	1bed      	subs	r5, r5, r7
 8017fe4:	ebca 0606 	rsb	r6, sl, r6
 8017fe8:	ebc9 0707 	rsb	r7, r9, r7
 8017fec:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8017fee:	3501      	adds	r5, #1
 8017ff0:	fb0b 7b06 	mla	fp, fp, r6, r7
 8017ff4:	e88d 000a 	stmia.w	sp, {r1, r3}
 8017ff8:	f001 fbb8 	bl	801976c <GUI_MEMDEV_GetDataPtr>
 8017ffc:	9900      	ldr	r1, [sp, #0]
 8017ffe:	4a0b      	ldr	r2, [pc, #44]	; (801802c <_ReadRectFromMemdev+0x9c>)
 8018000:	6814      	ldr	r4, [r2, #0]
 8018002:	fb05 f201 	mul.w	r2, r5, r1
 8018006:	fb01 010b 	mla	r1, r1, fp, r0
 801800a:	4640      	mov	r0, r8
 801800c:	47a0      	blx	r4
 801800e:	9b01      	ldr	r3, [sp, #4]
 8018010:	4629      	mov	r1, r5
 8018012:	4640      	mov	r0, r8
 8018014:	461a      	mov	r2, r3
 8018016:	b003      	add	sp, #12
 8018018:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801801c:	f7f6 bd8c 	b.w	800eb38 <GUI__ExpandPixelIndices>
 8018020:	b003      	add	sp, #12
 8018022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018026:	bf00      	nop
 8018028:	20000018 	.word	0x20000018
 801802c:	20000038 	.word	0x20000038

08018030 <_Color2IndexBulk>:
 8018030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018034:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80180ec <_Color2IndexBulk+0xbc>
 8018038:	4606      	mov	r6, r0
 801803a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80180f0 <_Color2IndexBulk+0xc0>
 801803e:	460c      	mov	r4, r1
 8018040:	f8d8 7000 	ldr.w	r7, [r8]
 8018044:	4615      	mov	r5, r2
 8018046:	469e      	mov	lr, r3
 8018048:	f897 c011 	ldrb.w	ip, [r7, #17]
 801804c:	4657      	mov	r7, sl
 801804e:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 8018052:	f8dc c000 	ldr.w	ip, [ip]
 8018056:	f8dc c010 	ldr.w	ip, [ip, #16]
 801805a:	f8dc 9010 	ldr.w	r9, [ip, #16]
 801805e:	f1b9 0f00 	cmp.w	r9, #0
 8018062:	d003      	beq.n	801806c <_Color2IndexBulk+0x3c>
 8018064:	46cc      	mov	ip, r9
 8018066:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801806a:	4760      	bx	ip
 801806c:	2b02      	cmp	r3, #2
 801806e:	d019      	beq.n	80180a4 <_Color2IndexBulk+0x74>
 8018070:	2b04      	cmp	r3, #4
 8018072:	d029      	beq.n	80180c8 <_Color2IndexBulk+0x98>
 8018074:	2b01      	cmp	r3, #1
 8018076:	d137      	bne.n	80180e8 <_Color2IndexBulk+0xb8>
 8018078:	f101 39ff 	add.w	r9, r1, #4294967295
 801807c:	f8d8 3000 	ldr.w	r3, [r8]
 8018080:	f856 0b04 	ldr.w	r0, [r6], #4
 8018084:	7c5b      	ldrb	r3, [r3, #17]
 8018086:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	691b      	ldr	r3, [r3, #16]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	4798      	blx	r3
 8018092:	f809 0f01 	strb.w	r0, [r9, #1]!
 8018096:	ea6f 0309 	mvn.w	r3, r9
 801809a:	442b      	add	r3, r5
 801809c:	42dc      	cmn	r4, r3
 801809e:	d1ed      	bne.n	801807c <_Color2IndexBulk+0x4c>
 80180a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180a4:	1e8c      	subs	r4, r1, #2
 80180a6:	f8d8 3000 	ldr.w	r3, [r8]
 80180aa:	f856 0b04 	ldr.w	r0, [r6], #4
 80180ae:	7c5b      	ldrb	r3, [r3, #17]
 80180b0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	691b      	ldr	r3, [r3, #16]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	4798      	blx	r3
 80180bc:	3d01      	subs	r5, #1
 80180be:	f824 0f02 	strh.w	r0, [r4, #2]!
 80180c2:	d1f0      	bne.n	80180a6 <_Color2IndexBulk+0x76>
 80180c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180c8:	1f0c      	subs	r4, r1, #4
 80180ca:	f8d8 3000 	ldr.w	r3, [r8]
 80180ce:	f856 0b04 	ldr.w	r0, [r6], #4
 80180d2:	7c5b      	ldrb	r3, [r3, #17]
 80180d4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	691b      	ldr	r3, [r3, #16]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	4798      	blx	r3
 80180e0:	3d01      	subs	r5, #1
 80180e2:	f844 0f04 	str.w	r0, [r4, #4]!
 80180e6:	d1f0      	bne.n	80180ca <_Color2IndexBulk+0x9a>
 80180e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ec:	20000018 	.word	0x20000018
 80180f0:	20000558 	.word	0x20000558

080180f4 <_Index2ColorBulk>:
 80180f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180f8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80181ac <_Index2ColorBulk+0xb8>
 80180fc:	4606      	mov	r6, r0
 80180fe:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80181b0 <_Index2ColorBulk+0xbc>
 8018102:	4615      	mov	r5, r2
 8018104:	f8d8 7000 	ldr.w	r7, [r8]
 8018108:	469e      	mov	lr, r3
 801810a:	f897 c011 	ldrb.w	ip, [r7, #17]
 801810e:	4657      	mov	r7, sl
 8018110:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 8018114:	f8dc c000 	ldr.w	ip, [ip]
 8018118:	f8dc c010 	ldr.w	ip, [ip, #16]
 801811c:	f8dc 9014 	ldr.w	r9, [ip, #20]
 8018120:	f1b9 0f00 	cmp.w	r9, #0
 8018124:	d003      	beq.n	801812e <_Index2ColorBulk+0x3a>
 8018126:	46cc      	mov	ip, r9
 8018128:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801812c:	4760      	bx	ip
 801812e:	2b02      	cmp	r3, #2
 8018130:	d018      	beq.n	8018164 <_Index2ColorBulk+0x70>
 8018132:	2b04      	cmp	r3, #4
 8018134:	d028      	beq.n	8018188 <_Index2ColorBulk+0x94>
 8018136:	2b01      	cmp	r3, #1
 8018138:	d136      	bne.n	80181a8 <_Index2ColorBulk+0xb4>
 801813a:	1f0c      	subs	r4, r1, #4
 801813c:	4681      	mov	r9, r0
 801813e:	f8d8 3000 	ldr.w	r3, [r8]
 8018142:	f819 0b01 	ldrb.w	r0, [r9], #1
 8018146:	7c5b      	ldrb	r3, [r3, #17]
 8018148:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	691b      	ldr	r3, [r3, #16]
 8018150:	685b      	ldr	r3, [r3, #4]
 8018152:	4798      	blx	r3
 8018154:	ebc9 0305 	rsb	r3, r9, r5
 8018158:	f844 0f04 	str.w	r0, [r4, #4]!
 801815c:	42de      	cmn	r6, r3
 801815e:	d1ee      	bne.n	801813e <_Index2ColorBulk+0x4a>
 8018160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018164:	1f0c      	subs	r4, r1, #4
 8018166:	f8d8 3000 	ldr.w	r3, [r8]
 801816a:	f836 0b02 	ldrh.w	r0, [r6], #2
 801816e:	7c5b      	ldrb	r3, [r3, #17]
 8018170:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	691b      	ldr	r3, [r3, #16]
 8018178:	685b      	ldr	r3, [r3, #4]
 801817a:	4798      	blx	r3
 801817c:	3d01      	subs	r5, #1
 801817e:	f844 0f04 	str.w	r0, [r4, #4]!
 8018182:	d1f0      	bne.n	8018166 <_Index2ColorBulk+0x72>
 8018184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018188:	1f0c      	subs	r4, r1, #4
 801818a:	f8d8 3000 	ldr.w	r3, [r8]
 801818e:	f856 0b04 	ldr.w	r0, [r6], #4
 8018192:	7c5b      	ldrb	r3, [r3, #17]
 8018194:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	691b      	ldr	r3, [r3, #16]
 801819c:	685b      	ldr	r3, [r3, #4]
 801819e:	4798      	blx	r3
 80181a0:	3d01      	subs	r5, #1
 80181a2:	f844 0f04 	str.w	r0, [r4, #4]!
 80181a6:	d1f0      	bne.n	801818a <_Index2ColorBulk+0x96>
 80181a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ac:	20000018 	.word	0x20000018
 80181b0:	20000558 	.word	0x20000558

080181b4 <_MixColors>:
 80181b4:	4b12      	ldr	r3, [pc, #72]	; (8018200 <_MixColors+0x4c>)
 80181b6:	4602      	mov	r2, r0
 80181b8:	b570      	push	{r4, r5, r6, lr}
 80181ba:	781e      	ldrb	r6, [r3, #0]
 80181bc:	4c11      	ldr	r4, [pc, #68]	; (8018204 <_MixColors+0x50>)
 80181be:	4b12      	ldr	r3, [pc, #72]	; (8018208 <_MixColors+0x54>)
 80181c0:	4d12      	ldr	r5, [pc, #72]	; (801820c <_MixColors+0x58>)
 80181c2:	b18e      	cbz	r6, 80181e8 <_MixColors+0x34>
 80181c4:	6828      	ldr	r0, [r5, #0]
 80181c6:	7c40      	ldrb	r0, [r0, #17]
 80181c8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80181cc:	6980      	ldr	r0, [r0, #24]
 80181ce:	5c18      	ldrb	r0, [r3, r0]
 80181d0:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 80181d4:	0e12      	lsrs	r2, r2, #24
 80181d6:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80181da:	2aff      	cmp	r2, #255	; 0xff
 80181dc:	d00f      	beq.n	80181fe <_MixColors+0x4a>
 80181de:	4b0c      	ldr	r3, [pc, #48]	; (8018210 <_MixColors+0x5c>)
 80181e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	4718      	bx	r3
 80181e8:	682a      	ldr	r2, [r5, #0]
 80181ea:	7c52      	ldrb	r2, [r2, #17]
 80181ec:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80181f0:	4c07      	ldr	r4, [pc, #28]	; (8018210 <_MixColors+0x5c>)
 80181f2:	6992      	ldr	r2, [r2, #24]
 80181f4:	6824      	ldr	r4, [r4, #0]
 80181f6:	5c9a      	ldrb	r2, [r3, r2]
 80181f8:	47a0      	blx	r4
 80181fa:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80181fe:	bd70      	pop	{r4, r5, r6, pc}
 8018200:	200225f4 	.word	0x200225f4
 8018204:	2002260c 	.word	0x2002260c
 8018208:	20000120 	.word	0x20000120
 801820c:	20000018 	.word	0x20000018
 8018210:	20000030 	.word	0x20000030

08018214 <_SetPixelIndex>:
 8018214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	6804      	ldr	r4, [r0, #0]
 801821a:	4698      	mov	r8, r3
 801821c:	460e      	mov	r6, r1
 801821e:	4617      	mov	r7, r2
 8018220:	68e3      	ldr	r3, [r4, #12]
 8018222:	4620      	mov	r0, r4
 8018224:	695b      	ldr	r3, [r3, #20]
 8018226:	4798      	blx	r3
 8018228:	6923      	ldr	r3, [r4, #16]
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	4798      	blx	r3
 801822e:	6923      	ldr	r3, [r4, #16]
 8018230:	4605      	mov	r5, r0
 8018232:	4640      	mov	r0, r8
 8018234:	685a      	ldr	r2, [r3, #4]
 8018236:	4790      	blx	r2
 8018238:	4629      	mov	r1, r5
 801823a:	f7ff ffbb 	bl	80181b4 <_MixColors>
 801823e:	6923      	ldr	r3, [r4, #16]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	4798      	blx	r3
 8018244:	68e3      	ldr	r3, [r4, #12]
 8018246:	463a      	mov	r2, r7
 8018248:	4631      	mov	r1, r6
 801824a:	699d      	ldr	r5, [r3, #24]
 801824c:	4603      	mov	r3, r0
 801824e:	4620      	mov	r0, r4
 8018250:	46ac      	mov	ip, r5
 8018252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018256:	4760      	bx	ip

08018258 <_XorPixel>:
 8018258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801825c:	4604      	mov	r4, r0
 801825e:	460d      	mov	r5, r1
 8018260:	4616      	mov	r6, r2
 8018262:	f7ff fdc1 	bl	8017de8 <_GetPixelIndex>
 8018266:	6823      	ldr	r3, [r4, #0]
 8018268:	4607      	mov	r7, r0
 801826a:	691b      	ldr	r3, [r3, #16]
 801826c:	689b      	ldr	r3, [r3, #8]
 801826e:	4798      	blx	r3
 8018270:	4632      	mov	r2, r6
 8018272:	ea87 0300 	eor.w	r3, r7, r0
 8018276:	4629      	mov	r1, r5
 8018278:	4620      	mov	r0, r4
 801827a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801827e:	f7ff bfc9 	b.w	8018214 <_SetPixelIndex>
	...

08018284 <_DrawVLine>:
 8018284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018288:	461e      	mov	r6, r3
 801828a:	4b11      	ldr	r3, [pc, #68]	; (80182d0 <_DrawVLine+0x4c>)
 801828c:	4614      	mov	r4, r2
 801828e:	4607      	mov	r7, r0
 8018290:	681a      	ldr	r2, [r3, #0]
 8018292:	4688      	mov	r8, r1
 8018294:	461d      	mov	r5, r3
 8018296:	7c12      	ldrb	r2, [r2, #16]
 8018298:	f012 0f01 	tst.w	r2, #1
 801829c:	d10d      	bne.n	80182ba <_DrawVLine+0x36>
 801829e:	42a6      	cmp	r6, r4
 80182a0:	db09      	blt.n	80182b6 <_DrawVLine+0x32>
 80182a2:	682b      	ldr	r3, [r5, #0]
 80182a4:	4622      	mov	r2, r4
 80182a6:	4641      	mov	r1, r8
 80182a8:	4638      	mov	r0, r7
 80182aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182ac:	3401      	adds	r4, #1
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	f7ff ffb0 	bl	8018214 <_SetPixelIndex>
 80182b4:	e7f3      	b.n	801829e <_DrawVLine+0x1a>
 80182b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ba:	42b4      	cmp	r4, r6
 80182bc:	dc06      	bgt.n	80182cc <_DrawVLine+0x48>
 80182be:	4622      	mov	r2, r4
 80182c0:	4641      	mov	r1, r8
 80182c2:	4638      	mov	r0, r7
 80182c4:	3401      	adds	r4, #1
 80182c6:	f7ff ffc7 	bl	8018258 <_XorPixel>
 80182ca:	e7f6      	b.n	80182ba <_DrawVLine+0x36>
 80182cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d0:	20000018 	.word	0x20000018

080182d4 <_GetLine>:
 80182d4:	e92d 4dff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
 80182d8:	4698      	mov	r8, r3
 80182da:	6803      	ldr	r3, [r0, #0]
 80182dc:	4616      	mov	r6, r2
 80182de:	460c      	mov	r4, r1
 80182e0:	9303      	str	r3, [sp, #12]
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80182e6:	681a      	ldr	r2, [r3, #0]
 80182e8:	2a04      	cmp	r2, #4
 80182ea:	d007      	beq.n	80182fc <_GetLine+0x28>
 80182ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ee:	2101      	movs	r1, #1
 80182f0:	a803      	add	r0, sp, #12
 80182f2:	f04f 0b01 	mov.w	fp, #1
 80182f6:	4798      	blx	r3
 80182f8:	4682      	mov	sl, r0
 80182fa:	e003      	b.n	8018304 <_GetLine+0x30>
 80182fc:	f8df a080 	ldr.w	sl, [pc, #128]	; 8018380 <_GetLine+0xac>
 8018300:	f04f 0b00 	mov.w	fp, #0
 8018304:	eb04 0308 	add.w	r3, r4, r8
 8018308:	1e5d      	subs	r5, r3, #1
 801830a:	f1ba 0f00 	cmp.w	sl, #0
 801830e:	d101      	bne.n	8018314 <_GetLine+0x40>
 8018310:	46ba      	mov	sl, r7
 8018312:	e018      	b.n	8018346 <_GetLine+0x72>
 8018314:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8018318:	462b      	mov	r3, r5
 801831a:	4632      	mov	r2, r6
 801831c:	4621      	mov	r1, r4
 801831e:	9803      	ldr	r0, [sp, #12]
 8018320:	47d0      	blx	sl
 8018322:	f1bb 0f00 	cmp.w	fp, #0
 8018326:	d00c      	beq.n	8018342 <_GetLine+0x6e>
 8018328:	4b14      	ldr	r3, [pc, #80]	; (801837c <_GetLine+0xa8>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	7c58      	ldrb	r0, [r3, #17]
 801832e:	f7f7 fa45 	bl	800f7bc <LCD_GetBitsPerPixelEx>
 8018332:	4641      	mov	r1, r8
 8018334:	2818      	cmp	r0, #24
 8018336:	bf14      	ite	ne
 8018338:	4602      	movne	r2, r0
 801833a:	2220      	moveq	r2, #32
 801833c:	4638      	mov	r0, r7
 801833e:	f7f6 fbfb 	bl	800eb38 <GUI__ExpandPixelIndices>
 8018342:	2400      	movs	r4, #0
 8018344:	e00b      	b.n	801835e <_GetLine+0x8a>
 8018346:	42ac      	cmp	r4, r5
 8018348:	dcfb      	bgt.n	8018342 <_GetLine+0x6e>
 801834a:	9803      	ldr	r0, [sp, #12]
 801834c:	4621      	mov	r1, r4
 801834e:	3401      	adds	r4, #1
 8018350:	68c2      	ldr	r2, [r0, #12]
 8018352:	6953      	ldr	r3, [r2, #20]
 8018354:	4632      	mov	r2, r6
 8018356:	4798      	blx	r3
 8018358:	f84a 0b04 	str.w	r0, [sl], #4
 801835c:	e7f3      	b.n	8018346 <_GetLine+0x72>
 801835e:	4544      	cmp	r4, r8
 8018360:	da08      	bge.n	8018374 <_GetLine+0xa0>
 8018362:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8018366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018368:	4798      	blx	r3
 801836a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801836c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018370:	3401      	adds	r4, #1
 8018372:	e7f4      	b.n	801835e <_GetLine+0x8a>
 8018374:	b004      	add	sp, #16
 8018376:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 801837a:	bf00      	nop
 801837c:	20000018 	.word	0x20000018
 8018380:	08017f91 	.word	0x08017f91

08018384 <_DrawBitmapLine.isra.6>:
 8018384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018388:	461c      	mov	r4, r3
 801838a:	4b13      	ldr	r3, [pc, #76]	; (80183d8 <_DrawBitmapLine.isra.6+0x54>)
 801838c:	b087      	sub	sp, #28
 801838e:	4681      	mov	r9, r0
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	460f      	mov	r7, r1
 8018394:	4690      	mov	r8, r2
 8018396:	4e11      	ldr	r6, [pc, #68]	; (80183dc <_DrawBitmapLine.isra.6+0x58>)
 8018398:	7c58      	ldrb	r0, [r3, #17]
 801839a:	f7f7 fa0f 	bl	800f7bc <LCD_GetBitsPerPixelEx>
 801839e:	2818      	cmp	r0, #24
 80183a0:	bf14      	ite	ne
 80183a2:	4605      	movne	r5, r0
 80183a4:	2520      	moveq	r5, #32
 80183a6:	4621      	mov	r1, r4
 80183a8:	68b0      	ldr	r0, [r6, #8]
 80183aa:	462a      	mov	r2, r5
 80183ac:	f000 fd01 	bl	8018db2 <GUI__CompactPixelIndices>
 80183b0:	2300      	movs	r3, #0
 80183b2:	f8d9 0000 	ldr.w	r0, [r9]
 80183b6:	68b1      	ldr	r1, [r6, #8]
 80183b8:	68c2      	ldr	r2, [r0, #12]
 80183ba:	9305      	str	r3, [sp, #20]
 80183bc:	9304      	str	r3, [sp, #16]
 80183be:	9302      	str	r3, [sp, #8]
 80183c0:	2301      	movs	r3, #1
 80183c2:	9103      	str	r1, [sp, #12]
 80183c4:	4639      	mov	r1, r7
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	4623      	mov	r3, r4
 80183ca:	9501      	str	r5, [sp, #4]
 80183cc:	6855      	ldr	r5, [r2, #4]
 80183ce:	4642      	mov	r2, r8
 80183d0:	47a8      	blx	r5
 80183d2:	b007      	add	sp, #28
 80183d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183d8:	20000018 	.word	0x20000018
 80183dc:	20000558 	.word	0x20000558

080183e0 <_DrawHLine>:
 80183e0:	1a5b      	subs	r3, r3, r1
 80183e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e6:	1c5d      	adds	r5, r3, #1
 80183e8:	6803      	ldr	r3, [r0, #0]
 80183ea:	b087      	sub	sp, #28
 80183ec:	4607      	mov	r7, r0
 80183ee:	691b      	ldr	r3, [r3, #16]
 80183f0:	4688      	mov	r8, r1
 80183f2:	4691      	mov	r9, r2
 80183f4:	2600      	movs	r6, #0
 80183f6:	681c      	ldr	r4, [r3, #0]
 80183f8:	685b      	ldr	r3, [r3, #4]
 80183fa:	9405      	str	r4, [sp, #20]
 80183fc:	4c14      	ldr	r4, [pc, #80]	; (8018450 <_DrawHLine+0x70>)
 80183fe:	9302      	str	r3, [sp, #8]
 8018400:	6963      	ldr	r3, [r4, #20]
 8018402:	9301      	str	r3, [sp, #4]
 8018404:	68a3      	ldr	r3, [r4, #8]
 8018406:	9300      	str	r3, [sp, #0]
 8018408:	462b      	mov	r3, r5
 801840a:	f7ff ff63 	bl	80182d4 <_GetLine>
 801840e:	4b11      	ldr	r3, [pc, #68]	; (8018454 <_DrawHLine+0x74>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018414:	6818      	ldr	r0, [r3, #0]
 8018416:	f7f7 f89b 	bl	800f550 <LCD_Index2Color>
 801841a:	4683      	mov	fp, r0
 801841c:	42ae      	cmp	r6, r5
 801841e:	da0d      	bge.n	801843c <_DrawHLine+0x5c>
 8018420:	6963      	ldr	r3, [r4, #20]
 8018422:	4658      	mov	r0, fp
 8018424:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8018428:	f7ff fec4 	bl	80181b4 <_MixColors>
 801842c:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8018430:	9b05      	ldr	r3, [sp, #20]
 8018432:	4798      	blx	r3
 8018434:	f84a 0026 	str.w	r0, [sl, r6, lsl #2]
 8018438:	3601      	adds	r6, #1
 801843a:	e7ef      	b.n	801841c <_DrawHLine+0x3c>
 801843c:	462b      	mov	r3, r5
 801843e:	464a      	mov	r2, r9
 8018440:	4641      	mov	r1, r8
 8018442:	4638      	mov	r0, r7
 8018444:	b007      	add	sp, #28
 8018446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801844a:	f7ff bf9b 	b.w	8018384 <_DrawBitmapLine.isra.6>
 801844e:	bf00      	nop
 8018450:	20000558 	.word	0x20000558
 8018454:	20000018 	.word	0x20000018

08018458 <_FillRect>:
 8018458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801845c:	9d06      	ldr	r5, [sp, #24]
 801845e:	4606      	mov	r6, r0
 8018460:	460f      	mov	r7, r1
 8018462:	4614      	mov	r4, r2
 8018464:	4698      	mov	r8, r3
 8018466:	42ac      	cmp	r4, r5
 8018468:	dc07      	bgt.n	801847a <_FillRect+0x22>
 801846a:	4622      	mov	r2, r4
 801846c:	4643      	mov	r3, r8
 801846e:	4639      	mov	r1, r7
 8018470:	4630      	mov	r0, r6
 8018472:	f7ff ffb5 	bl	80183e0 <_DrawHLine>
 8018476:	3401      	adds	r4, #1
 8018478:	e7f5      	b.n	8018466 <_FillRect+0xe>
 801847a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018480 <_DrawBitmap>:
 8018480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018484:	b08f      	sub	sp, #60	; 0x3c
 8018486:	461d      	mov	r5, r3
 8018488:	4604      	mov	r4, r0
 801848a:	9208      	str	r2, [sp, #32]
 801848c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801848e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8018492:	1a8b      	subs	r3, r1, r2
 8018494:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018496:	9107      	str	r1, [sp, #28]
 8018498:	9306      	str	r3, [sp, #24]
 801849a:	460b      	mov	r3, r1
 801849c:	4413      	add	r3, r2
 801849e:	9304      	str	r3, [sp, #16]
 80184a0:	18eb      	adds	r3, r5, r3
 80184a2:	9305      	str	r3, [sp, #20]
 80184a4:	9b08      	ldr	r3, [sp, #32]
 80184a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80184a8:	ebc3 030b 	rsb	r3, r3, fp
 80184ac:	429a      	cmp	r2, r3
 80184ae:	f340 82b0 	ble.w	8018a12 <_DrawBitmap+0x592>
 80184b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80184b4:	2b04      	cmp	r3, #4
 80184b6:	f000 8161 	beq.w	801877c <_DrawBitmap+0x2fc>
 80184ba:	dc05      	bgt.n	80184c8 <_DrawBitmap+0x48>
 80184bc:	2b01      	cmp	r3, #1
 80184be:	d00e      	beq.n	80184de <_DrawBitmap+0x5e>
 80184c0:	2b02      	cmp	r3, #2
 80184c2:	f000 80c3 	beq.w	801864c <_DrawBitmap+0x1cc>
 80184c6:	e29a      	b.n	80189fe <_DrawBitmap+0x57e>
 80184c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80184ca:	2b10      	cmp	r3, #16
 80184cc:	f000 8244 	beq.w	8018958 <_DrawBitmap+0x4d8>
 80184d0:	2b20      	cmp	r3, #32
 80184d2:	f000 8268 	beq.w	80189a6 <_DrawBitmap+0x526>
 80184d6:	2b08      	cmp	r3, #8
 80184d8:	f040 8291 	bne.w	80189fe <_DrawBitmap+0x57e>
 80184dc:	e1eb      	b.n	80188b6 <_DrawBitmap+0x436>
 80184de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80184e0:	685f      	ldr	r7, [r3, #4]
 80184e2:	4bac      	ldr	r3, [pc, #688]	; (8018794 <_DrawBitmap+0x314>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	7c1b      	ldrb	r3, [r3, #16]
 80184e8:	f003 0303 	and.w	r3, r3, #3
 80184ec:	2b02      	cmp	r3, #2
 80184ee:	d04a      	beq.n	8018586 <_DrawBitmap+0x106>
 80184f0:	2b03      	cmp	r3, #3
 80184f2:	f000 8085 	beq.w	8018600 <_DrawBitmap+0x180>
 80184f6:	2b01      	cmp	r3, #1
 80184f8:	f000 8082 	beq.w	8018600 <_DrawBitmap+0x180>
 80184fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80184fe:	465a      	mov	r2, fp
 8018500:	4ea5      	ldr	r6, [pc, #660]	; (8018798 <_DrawBitmap+0x318>)
 8018502:	4620      	mov	r0, r4
 8018504:	f8d3 9000 	ldr.w	r9, [r3]
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	9904      	ldr	r1, [sp, #16]
 801850c:	691b      	ldr	r3, [r3, #16]
 801850e:	e893 0108 	ldmia.w	r3, {r3, r8}
 8018512:	f8cd 8008 	str.w	r8, [sp, #8]
 8018516:	930a      	str	r3, [sp, #40]	; 0x28
 8018518:	6973      	ldr	r3, [r6, #20]
 801851a:	9301      	str	r3, [sp, #4]
 801851c:	68b3      	ldr	r3, [r6, #8]
 801851e:	9300      	str	r3, [sp, #0]
 8018520:	462b      	mov	r3, r5
 8018522:	f7ff fed7 	bl	80182d4 <_GetLine>
 8018526:	4648      	mov	r0, r9
 8018528:	47c0      	blx	r8
 801852a:	4682      	mov	sl, r0
 801852c:	4638      	mov	r0, r7
 801852e:	47c0      	blx	r8
 8018530:	46a8      	mov	r8, r5
 8018532:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8018534:	2380      	movs	r3, #128	; 0x80
 8018536:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 801853a:	9009      	str	r0, [sp, #36]	; 0x24
 801853c:	f899 1000 	ldrb.w	r1, [r9]
 8018540:	fa43 f207 	asr.w	r2, r3, r7
 8018544:	930d      	str	r3, [sp, #52]	; 0x34
 8018546:	3701      	adds	r7, #1
 8018548:	4211      	tst	r1, r2
 801854a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801854c:	ebc8 0205 	rsb	r2, r8, r5
 8018550:	6971      	ldr	r1, [r6, #20]
 8018552:	bf14      	ite	ne
 8018554:	4618      	movne	r0, r3
 8018556:	4650      	moveq	r0, sl
 8018558:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801855c:	920c      	str	r2, [sp, #48]	; 0x30
 801855e:	f7ff fe29 	bl	80181b4 <_MixColors>
 8018562:	68b1      	ldr	r1, [r6, #8]
 8018564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018566:	910b      	str	r1, [sp, #44]	; 0x2c
 8018568:	4798      	blx	r3
 801856a:	2f08      	cmp	r7, #8
 801856c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801856e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018570:	bf04      	itt	eq
 8018572:	f109 0901 	addeq.w	r9, r9, #1
 8018576:	2700      	moveq	r7, #0
 8018578:	f1b8 0801 	subs.w	r8, r8, #1
 801857c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8018580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018582:	d1db      	bne.n	801853c <_DrawBitmap+0xbc>
 8018584:	e038      	b.n	80185f8 <_DrawBitmap+0x178>
 8018586:	6823      	ldr	r3, [r4, #0]
 8018588:	465a      	mov	r2, fp
 801858a:	4e83      	ldr	r6, [pc, #524]	; (8018798 <_DrawBitmap+0x318>)
 801858c:	4620      	mov	r0, r4
 801858e:	691b      	ldr	r3, [r3, #16]
 8018590:	9904      	ldr	r1, [sp, #16]
 8018592:	e893 0108 	ldmia.w	r3, {r3, r8}
 8018596:	f8cd 8008 	str.w	r8, [sp, #8]
 801859a:	9309      	str	r3, [sp, #36]	; 0x24
 801859c:	6973      	ldr	r3, [r6, #20]
 801859e:	9301      	str	r3, [sp, #4]
 80185a0:	68b3      	ldr	r3, [r6, #8]
 80185a2:	9300      	str	r3, [sp, #0]
 80185a4:	462b      	mov	r3, r5
 80185a6:	f7ff fe95 	bl	80182d4 <_GetLine>
 80185aa:	4638      	mov	r0, r7
 80185ac:	47c0      	blx	r8
 80185ae:	46a8      	mov	r8, r5
 80185b0:	4682      	mov	sl, r0
 80185b2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80185b4:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80185b8:	2380      	movs	r3, #128	; 0x80
 80185ba:	f899 2000 	ldrb.w	r2, [r9]
 80185be:	413b      	asrs	r3, r7
 80185c0:	421a      	tst	r2, r3
 80185c2:	d010      	beq.n	80185e6 <_DrawBitmap+0x166>
 80185c4:	ebc8 0305 	rsb	r3, r8, r5
 80185c8:	6972      	ldr	r2, [r6, #20]
 80185ca:	4650      	mov	r0, sl
 80185cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80185d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80185d2:	f7ff fdef 	bl	80181b4 <_MixColors>
 80185d6:	68b2      	ldr	r2, [r6, #8]
 80185d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185da:	920a      	str	r2, [sp, #40]	; 0x28
 80185dc:	4798      	blx	r3
 80185de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185e2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80185e6:	3701      	adds	r7, #1
 80185e8:	2f08      	cmp	r7, #8
 80185ea:	bf04      	itt	eq
 80185ec:	f109 0901 	addeq.w	r9, r9, #1
 80185f0:	2700      	moveq	r7, #0
 80185f2:	f1b8 0801 	subs.w	r8, r8, #1
 80185f6:	d1df      	bne.n	80185b8 <_DrawBitmap+0x138>
 80185f8:	462b      	mov	r3, r5
 80185fa:	465a      	mov	r2, fp
 80185fc:	9904      	ldr	r1, [sp, #16]
 80185fe:	e1fb      	b.n	80189f8 <_DrawBitmap+0x578>
 8018600:	6923      	ldr	r3, [r4, #16]
 8018602:	462f      	mov	r7, r5
 8018604:	689b      	ldr	r3, [r3, #8]
 8018606:	4798      	blx	r3
 8018608:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801860a:	4682      	mov	sl, r0
 801860c:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8018610:	9b05      	ldr	r3, [sp, #20]
 8018612:	f898 2000 	ldrb.w	r2, [r8]
 8018616:	ebc7 0903 	rsb	r9, r7, r3
 801861a:	2380      	movs	r3, #128	; 0x80
 801861c:	4133      	asrs	r3, r6
 801861e:	421a      	tst	r2, r3
 8018620:	d00b      	beq.n	801863a <_DrawBitmap+0x1ba>
 8018622:	465a      	mov	r2, fp
 8018624:	4649      	mov	r1, r9
 8018626:	4620      	mov	r0, r4
 8018628:	f7ff fbde 	bl	8017de8 <_GetPixelIndex>
 801862c:	465a      	mov	r2, fp
 801862e:	ea80 030a 	eor.w	r3, r0, sl
 8018632:	4649      	mov	r1, r9
 8018634:	4620      	mov	r0, r4
 8018636:	f7ff fded 	bl	8018214 <_SetPixelIndex>
 801863a:	3601      	adds	r6, #1
 801863c:	2e08      	cmp	r6, #8
 801863e:	bf04      	itt	eq
 8018640:	f108 0801 	addeq.w	r8, r8, #1
 8018644:	2600      	moveq	r6, #0
 8018646:	3f01      	subs	r7, #1
 8018648:	d1e2      	bne.n	8018610 <_DrawBitmap+0x190>
 801864a:	e1d8      	b.n	80189fe <_DrawBitmap+0x57e>
 801864c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801864e:	781e      	ldrb	r6, [r3, #0]
 8018650:	4b50      	ldr	r3, [pc, #320]	; (8018794 <_DrawBitmap+0x314>)
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	7c1b      	ldrb	r3, [r3, #16]
 8018656:	f013 0303 	ands.w	r3, r3, #3
 801865a:	d002      	beq.n	8018662 <_DrawBitmap+0x1e2>
 801865c:	2b02      	cmp	r3, #2
 801865e:	d045      	beq.n	80186ec <_DrawBitmap+0x26c>
 8018660:	e1cd      	b.n	80189fe <_DrawBitmap+0x57e>
 8018662:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018664:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8018666:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 801866a:	9904      	ldr	r1, [sp, #16]
 801866c:	b303      	cbz	r3, 80186b0 <_DrawBitmap+0x230>
 801866e:	eb01 0905 	add.w	r9, r1, r5
 8018672:	f1c7 0303 	rsb	r3, r7, #3
 8018676:	20c0      	movs	r0, #192	; 0xc0
 8018678:	3701      	adds	r7, #1
 801867a:	f101 0a01 	add.w	sl, r1, #1
 801867e:	005a      	lsls	r2, r3, #1
 8018680:	f1c2 0306 	rsb	r3, r2, #6
 8018684:	fa40 f303 	asr.w	r3, r0, r3
 8018688:	4620      	mov	r0, r4
 801868a:	4033      	ands	r3, r6
 801868c:	40d3      	lsrs	r3, r2
 801868e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018694:	465a      	mov	r2, fp
 8018696:	f7ff fdbd 	bl	8018214 <_SetPixelIndex>
 801869a:	2f04      	cmp	r7, #4
 801869c:	4651      	mov	r1, sl
 801869e:	bf02      	ittt	eq
 80186a0:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 80186a4:	2700      	moveq	r7, #0
 80186a6:	f108 0801 	addeq.w	r8, r8, #1
 80186aa:	45ca      	cmp	sl, r9
 80186ac:	d1e1      	bne.n	8018672 <_DrawBitmap+0x1f2>
 80186ae:	e1a6      	b.n	80189fe <_DrawBitmap+0x57e>
 80186b0:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 80186b4:	f1c7 0203 	rsb	r2, r7, #3
 80186b8:	3701      	adds	r7, #1
 80186ba:	4620      	mov	r0, r4
 80186bc:	f101 0901 	add.w	r9, r1, #1
 80186c0:	0052      	lsls	r2, r2, #1
 80186c2:	f1c2 0306 	rsb	r3, r2, #6
 80186c6:	fa4a f303 	asr.w	r3, sl, r3
 80186ca:	4033      	ands	r3, r6
 80186cc:	40d3      	lsrs	r3, r2
 80186ce:	465a      	mov	r2, fp
 80186d0:	f7ff fda0 	bl	8018214 <_SetPixelIndex>
 80186d4:	2f04      	cmp	r7, #4
 80186d6:	9b05      	ldr	r3, [sp, #20]
 80186d8:	4649      	mov	r1, r9
 80186da:	bf02      	ittt	eq
 80186dc:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 80186e0:	2700      	moveq	r7, #0
 80186e2:	f108 0801 	addeq.w	r8, r8, #1
 80186e6:	4599      	cmp	r9, r3
 80186e8:	d1e4      	bne.n	80186b4 <_DrawBitmap+0x234>
 80186ea:	e188      	b.n	80189fe <_DrawBitmap+0x57e>
 80186ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80186ee:	46a8      	mov	r8, r5
 80186f0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80186f2:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 80186f6:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80186fa:	b363      	cbz	r3, 8018756 <_DrawBitmap+0x2d6>
 80186fc:	9b05      	ldr	r3, [sp, #20]
 80186fe:	ebc8 0103 	rsb	r1, r8, r3
 8018702:	f1c7 0303 	rsb	r3, r7, #3
 8018706:	0058      	lsls	r0, r3, #1
 8018708:	f1c0 0206 	rsb	r2, r0, #6
 801870c:	fa4a f202 	asr.w	r2, sl, r2
 8018710:	ea02 0306 	and.w	r3, r2, r6
 8018714:	40c3      	lsrs	r3, r0
 8018716:	d006      	beq.n	8018726 <_DrawBitmap+0x2a6>
 8018718:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801871a:	4620      	mov	r0, r4
 801871c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018720:	465a      	mov	r2, fp
 8018722:	f7ff fd77 	bl	8018214 <_SetPixelIndex>
 8018726:	3701      	adds	r7, #1
 8018728:	2f04      	cmp	r7, #4
 801872a:	bf02      	ittt	eq
 801872c:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8018730:	2700      	moveq	r7, #0
 8018732:	f109 0901 	addeq.w	r9, r9, #1
 8018736:	f1b8 0801 	subs.w	r8, r8, #1
 801873a:	d1df      	bne.n	80186fc <_DrawBitmap+0x27c>
 801873c:	e15f      	b.n	80189fe <_DrawBitmap+0x57e>
 801873e:	3701      	adds	r7, #1
 8018740:	2f04      	cmp	r7, #4
 8018742:	bf02      	ittt	eq
 8018744:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8018748:	2700      	moveq	r7, #0
 801874a:	f109 0901 	addeq.w	r9, r9, #1
 801874e:	f1b8 0801 	subs.w	r8, r8, #1
 8018752:	f000 8154 	beq.w	80189fe <_DrawBitmap+0x57e>
 8018756:	9b05      	ldr	r3, [sp, #20]
 8018758:	ebc8 0103 	rsb	r1, r8, r3
 801875c:	f1c7 0303 	rsb	r3, r7, #3
 8018760:	0058      	lsls	r0, r3, #1
 8018762:	f1c0 0206 	rsb	r2, r0, #6
 8018766:	fa4a f202 	asr.w	r2, sl, r2
 801876a:	ea02 0306 	and.w	r3, r2, r6
 801876e:	40c3      	lsrs	r3, r0
 8018770:	d0e5      	beq.n	801873e <_DrawBitmap+0x2be>
 8018772:	465a      	mov	r2, fp
 8018774:	4620      	mov	r0, r4
 8018776:	f7ff fd4d 	bl	8018214 <_SetPixelIndex>
 801877a:	e7e0      	b.n	801873e <_DrawBitmap+0x2be>
 801877c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801877e:	781e      	ldrb	r6, [r3, #0]
 8018780:	4b04      	ldr	r3, [pc, #16]	; (8018794 <_DrawBitmap+0x314>)
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	7c1b      	ldrb	r3, [r3, #16]
 8018786:	f013 0303 	ands.w	r3, r3, #3
 801878a:	d007      	beq.n	801879c <_DrawBitmap+0x31c>
 801878c:	2b02      	cmp	r3, #2
 801878e:	d04a      	beq.n	8018826 <_DrawBitmap+0x3a6>
 8018790:	e135      	b.n	80189fe <_DrawBitmap+0x57e>
 8018792:	bf00      	nop
 8018794:	20000018 	.word	0x20000018
 8018798:	20000558 	.word	0x20000558
 801879c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801879e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80187a0:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 80187a4:	9904      	ldr	r1, [sp, #16]
 80187a6:	b303      	cbz	r3, 80187ea <_DrawBitmap+0x36a>
 80187a8:	eb01 0905 	add.w	r9, r1, r5
 80187ac:	f1c7 0301 	rsb	r3, r7, #1
 80187b0:	20f0      	movs	r0, #240	; 0xf0
 80187b2:	3701      	adds	r7, #1
 80187b4:	f101 0a01 	add.w	sl, r1, #1
 80187b8:	009a      	lsls	r2, r3, #2
 80187ba:	f1c2 0304 	rsb	r3, r2, #4
 80187be:	fa40 f303 	asr.w	r3, r0, r3
 80187c2:	4620      	mov	r0, r4
 80187c4:	4033      	ands	r3, r6
 80187c6:	40d3      	lsrs	r3, r2
 80187c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80187ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80187ce:	465a      	mov	r2, fp
 80187d0:	f7ff fd20 	bl	8018214 <_SetPixelIndex>
 80187d4:	2f02      	cmp	r7, #2
 80187d6:	4651      	mov	r1, sl
 80187d8:	bf02      	ittt	eq
 80187da:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 80187de:	2700      	moveq	r7, #0
 80187e0:	f108 0801 	addeq.w	r8, r8, #1
 80187e4:	45ca      	cmp	sl, r9
 80187e6:	d1e1      	bne.n	80187ac <_DrawBitmap+0x32c>
 80187e8:	e109      	b.n	80189fe <_DrawBitmap+0x57e>
 80187ea:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 80187ee:	f1c7 0201 	rsb	r2, r7, #1
 80187f2:	3701      	adds	r7, #1
 80187f4:	4620      	mov	r0, r4
 80187f6:	f101 0901 	add.w	r9, r1, #1
 80187fa:	0092      	lsls	r2, r2, #2
 80187fc:	f1c2 0304 	rsb	r3, r2, #4
 8018800:	fa4a f303 	asr.w	r3, sl, r3
 8018804:	4033      	ands	r3, r6
 8018806:	40d3      	lsrs	r3, r2
 8018808:	465a      	mov	r2, fp
 801880a:	f7ff fd03 	bl	8018214 <_SetPixelIndex>
 801880e:	2f02      	cmp	r7, #2
 8018810:	9b05      	ldr	r3, [sp, #20]
 8018812:	4649      	mov	r1, r9
 8018814:	bf02      	ittt	eq
 8018816:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 801881a:	2700      	moveq	r7, #0
 801881c:	f108 0801 	addeq.w	r8, r8, #1
 8018820:	4599      	cmp	r9, r3
 8018822:	d1e4      	bne.n	80187ee <_DrawBitmap+0x36e>
 8018824:	e0eb      	b.n	80189fe <_DrawBitmap+0x57e>
 8018826:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018828:	46a8      	mov	r8, r5
 801882a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801882c:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8018830:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8018834:	b363      	cbz	r3, 8018890 <_DrawBitmap+0x410>
 8018836:	9b05      	ldr	r3, [sp, #20]
 8018838:	ebc8 0103 	rsb	r1, r8, r3
 801883c:	f1c7 0301 	rsb	r3, r7, #1
 8018840:	0098      	lsls	r0, r3, #2
 8018842:	f1c0 0204 	rsb	r2, r0, #4
 8018846:	fa4a f202 	asr.w	r2, sl, r2
 801884a:	ea02 0306 	and.w	r3, r2, r6
 801884e:	40c3      	lsrs	r3, r0
 8018850:	d006      	beq.n	8018860 <_DrawBitmap+0x3e0>
 8018852:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018854:	4620      	mov	r0, r4
 8018856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801885a:	465a      	mov	r2, fp
 801885c:	f7ff fcda 	bl	8018214 <_SetPixelIndex>
 8018860:	3701      	adds	r7, #1
 8018862:	2f02      	cmp	r7, #2
 8018864:	bf02      	ittt	eq
 8018866:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 801886a:	2700      	moveq	r7, #0
 801886c:	f109 0901 	addeq.w	r9, r9, #1
 8018870:	f1b8 0801 	subs.w	r8, r8, #1
 8018874:	d1df      	bne.n	8018836 <_DrawBitmap+0x3b6>
 8018876:	e0c2      	b.n	80189fe <_DrawBitmap+0x57e>
 8018878:	3701      	adds	r7, #1
 801887a:	2f02      	cmp	r7, #2
 801887c:	bf02      	ittt	eq
 801887e:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8018882:	2700      	moveq	r7, #0
 8018884:	f109 0901 	addeq.w	r9, r9, #1
 8018888:	f1b8 0801 	subs.w	r8, r8, #1
 801888c:	f000 80b7 	beq.w	80189fe <_DrawBitmap+0x57e>
 8018890:	9b05      	ldr	r3, [sp, #20]
 8018892:	ebc8 0103 	rsb	r1, r8, r3
 8018896:	f1c7 0301 	rsb	r3, r7, #1
 801889a:	0098      	lsls	r0, r3, #2
 801889c:	f1c0 0204 	rsb	r2, r0, #4
 80188a0:	fa4a f202 	asr.w	r2, sl, r2
 80188a4:	ea02 0306 	and.w	r3, r2, r6
 80188a8:	40c3      	lsrs	r3, r0
 80188aa:	d0e5      	beq.n	8018878 <_DrawBitmap+0x3f8>
 80188ac:	465a      	mov	r2, fp
 80188ae:	4620      	mov	r0, r4
 80188b0:	f7ff fcb0 	bl	8018214 <_SetPixelIndex>
 80188b4:	e7e0      	b.n	8018878 <_DrawBitmap+0x3f8>
 80188b6:	4b58      	ldr	r3, [pc, #352]	; (8018a18 <_DrawBitmap+0x598>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	7c1b      	ldrb	r3, [r3, #16]
 80188bc:	f013 0303 	ands.w	r3, r3, #3
 80188c0:	d002      	beq.n	80188c8 <_DrawBitmap+0x448>
 80188c2:	2b02      	cmp	r3, #2
 80188c4:	d023      	beq.n	801890e <_DrawBitmap+0x48e>
 80188c6:	e09a      	b.n	80189fe <_DrawBitmap+0x57e>
 80188c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80188ca:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80188cc:	b18b      	cbz	r3, 80188f2 <_DrawBitmap+0x472>
 80188ce:	9b06      	ldr	r3, [sp, #24]
 80188d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80188d2:	18f1      	adds	r1, r6, r3
 80188d4:	1bab      	subs	r3, r5, r6
 80188d6:	4413      	add	r3, r2
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f340 8090 	ble.w	80189fe <_DrawBitmap+0x57e>
 80188de:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80188e0:	4620      	mov	r0, r4
 80188e2:	f816 3b01 	ldrb.w	r3, [r6], #1
 80188e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188ea:	465a      	mov	r2, fp
 80188ec:	f7ff fc92 	bl	8018214 <_SetPixelIndex>
 80188f0:	e7ed      	b.n	80188ce <_DrawBitmap+0x44e>
 80188f2:	9b06      	ldr	r3, [sp, #24]
 80188f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80188f6:	18f1      	adds	r1, r6, r3
 80188f8:	1bab      	subs	r3, r5, r6
 80188fa:	4413      	add	r3, r2
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	dd7e      	ble.n	80189fe <_DrawBitmap+0x57e>
 8018900:	f816 3b01 	ldrb.w	r3, [r6], #1
 8018904:	465a      	mov	r2, fp
 8018906:	4620      	mov	r0, r4
 8018908:	f7ff fc84 	bl	8018214 <_SetPixelIndex>
 801890c:	e7f1      	b.n	80188f2 <_DrawBitmap+0x472>
 801890e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018910:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8018912:	b1cb      	cbz	r3, 8018948 <_DrawBitmap+0x4c8>
 8018914:	9b06      	ldr	r3, [sp, #24]
 8018916:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018918:	18f1      	adds	r1, r6, r3
 801891a:	1bab      	subs	r3, r5, r6
 801891c:	4413      	add	r3, r2
 801891e:	2b00      	cmp	r3, #0
 8018920:	dd6d      	ble.n	80189fe <_DrawBitmap+0x57e>
 8018922:	f816 3b01 	ldrb.w	r3, [r6], #1
 8018926:	2b00      	cmp	r3, #0
 8018928:	d0f4      	beq.n	8018914 <_DrawBitmap+0x494>
 801892a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801892c:	4620      	mov	r0, r4
 801892e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018932:	465a      	mov	r2, fp
 8018934:	f7ff fc6e 	bl	8018214 <_SetPixelIndex>
 8018938:	e7ec      	b.n	8018914 <_DrawBitmap+0x494>
 801893a:	f816 3b01 	ldrb.w	r3, [r6], #1
 801893e:	b11b      	cbz	r3, 8018948 <_DrawBitmap+0x4c8>
 8018940:	465a      	mov	r2, fp
 8018942:	4620      	mov	r0, r4
 8018944:	f7ff fc66 	bl	8018214 <_SetPixelIndex>
 8018948:	9b06      	ldr	r3, [sp, #24]
 801894a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801894c:	18f1      	adds	r1, r6, r3
 801894e:	1bab      	subs	r3, r5, r6
 8018950:	4413      	add	r3, r2
 8018952:	2b00      	cmp	r3, #0
 8018954:	dcf1      	bgt.n	801893a <_DrawBitmap+0x4ba>
 8018956:	e052      	b.n	80189fe <_DrawBitmap+0x57e>
 8018958:	6823      	ldr	r3, [r4, #0]
 801895a:	465a      	mov	r2, fp
 801895c:	4e2f      	ldr	r6, [pc, #188]	; (8018a1c <_DrawBitmap+0x59c>)
 801895e:	4620      	mov	r0, r4
 8018960:	691b      	ldr	r3, [r3, #16]
 8018962:	9907      	ldr	r1, [sp, #28]
 8018964:	cb88      	ldmia	r3, {r3, r7}
 8018966:	9702      	str	r7, [sp, #8]
 8018968:	9309      	str	r3, [sp, #36]	; 0x24
 801896a:	6973      	ldr	r3, [r6, #20]
 801896c:	9301      	str	r3, [sp, #4]
 801896e:	68b3      	ldr	r3, [r6, #8]
 8018970:	9300      	str	r3, [sp, #0]
 8018972:	462b      	mov	r3, r5
 8018974:	f7ff fcae 	bl	80182d4 <_GetLine>
 8018978:	f8d6 a014 	ldr.w	sl, [r6, #20]
 801897c:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8018980:	462e      	mov	r6, r5
 8018982:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8018986:	f85a 1b04 	ldr.w	r1, [sl], #4
 801898a:	f838 0b02 	ldrh.w	r0, [r8], #2
 801898e:	910a      	str	r1, [sp, #40]	; 0x28
 8018990:	47b8      	blx	r7
 8018992:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018994:	f7ff fc0e 	bl	80181b4 <_MixColors>
 8018998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801899a:	4798      	blx	r3
 801899c:	3e01      	subs	r6, #1
 801899e:	f849 0b04 	str.w	r0, [r9], #4
 80189a2:	d1f0      	bne.n	8018986 <_DrawBitmap+0x506>
 80189a4:	e025      	b.n	80189f2 <_DrawBitmap+0x572>
 80189a6:	6823      	ldr	r3, [r4, #0]
 80189a8:	465a      	mov	r2, fp
 80189aa:	4e1c      	ldr	r6, [pc, #112]	; (8018a1c <_DrawBitmap+0x59c>)
 80189ac:	4620      	mov	r0, r4
 80189ae:	691b      	ldr	r3, [r3, #16]
 80189b0:	9907      	ldr	r1, [sp, #28]
 80189b2:	cb88      	ldmia	r3, {r3, r7}
 80189b4:	9702      	str	r7, [sp, #8]
 80189b6:	9309      	str	r3, [sp, #36]	; 0x24
 80189b8:	6973      	ldr	r3, [r6, #20]
 80189ba:	9301      	str	r3, [sp, #4]
 80189bc:	68b3      	ldr	r3, [r6, #8]
 80189be:	9300      	str	r3, [sp, #0]
 80189c0:	462b      	mov	r3, r5
 80189c2:	f7ff fc87 	bl	80182d4 <_GetLine>
 80189c6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80189ca:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80189ce:	462e      	mov	r6, r5
 80189d0:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 80189d4:	f85a 1b04 	ldr.w	r1, [sl], #4
 80189d8:	f858 0b04 	ldr.w	r0, [r8], #4
 80189dc:	910a      	str	r1, [sp, #40]	; 0x28
 80189de:	47b8      	blx	r7
 80189e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80189e2:	f7ff fbe7 	bl	80181b4 <_MixColors>
 80189e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189e8:	4798      	blx	r3
 80189ea:	3e01      	subs	r6, #1
 80189ec:	f849 0b04 	str.w	r0, [r9], #4
 80189f0:	d1f0      	bne.n	80189d4 <_DrawBitmap+0x554>
 80189f2:	462b      	mov	r3, r5
 80189f4:	465a      	mov	r2, fp
 80189f6:	9907      	ldr	r1, [sp, #28]
 80189f8:	4620      	mov	r0, r4
 80189fa:	f7ff fcc3 	bl	8018384 <_DrawBitmapLine.isra.6>
 80189fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018a00:	f10b 0b01 	add.w	fp, fp, #1
 8018a04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018a06:	4413      	add	r3, r2
 8018a08:	931b      	str	r3, [sp, #108]	; 0x6c
 8018a0a:	9b06      	ldr	r3, [sp, #24]
 8018a0c:	1a9b      	subs	r3, r3, r2
 8018a0e:	9306      	str	r3, [sp, #24]
 8018a10:	e548      	b.n	80184a4 <_DrawBitmap+0x24>
 8018a12:	b00f      	add	sp, #60	; 0x3c
 8018a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a18:	20000018 	.word	0x20000018
 8018a1c:	20000558 	.word	0x20000558

08018a20 <GUI__AlphaPreserveTrans>:
 8018a20:	4b07      	ldr	r3, [pc, #28]	; (8018a40 <GUI__AlphaPreserveTrans+0x20>)
 8018a22:	b510      	push	{r4, lr}
 8018a24:	781c      	ldrb	r4, [r3, #0]
 8018a26:	b118      	cbz	r0, 8018a30 <GUI__AlphaPreserveTrans+0x10>
 8018a28:	2201      	movs	r2, #1
 8018a2a:	2000      	movs	r0, #0
 8018a2c:	701a      	strb	r2, [r3, #0]
 8018a2e:	e002      	b.n	8018a36 <GUI__AlphaPreserveTrans+0x16>
 8018a30:	7018      	strb	r0, [r3, #0]
 8018a32:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8018a36:	f000 fbdd 	bl	80191f4 <LCD_AA_SetOrMask>
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	bd10      	pop	{r4, pc}
 8018a3e:	bf00      	nop
 8018a40:	200225f4 	.word	0x200225f4

08018a44 <_OnExit>:
 8018a44:	4b02      	ldr	r3, [pc, #8]	; (8018a50 <_OnExit+0xc>)
 8018a46:	2200      	movs	r2, #0
 8018a48:	601a      	str	r2, [r3, #0]
 8018a4a:	605a      	str	r2, [r3, #4]
 8018a4c:	609a      	str	r2, [r3, #8]
 8018a4e:	4770      	bx	lr
 8018a50:	20000570 	.word	0x20000570

08018a54 <GUI_TIMER_Exec>:
 8018a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a58:	4c1a      	ldr	r4, [pc, #104]	; (8018ac4 <GUI_TIMER_Exec+0x70>)
 8018a5a:	b085      	sub	sp, #20
 8018a5c:	f7f5 fd88 	bl	800e570 <GUI_Lock>
 8018a60:	2500      	movs	r5, #0
 8018a62:	6867      	ldr	r7, [r4, #4]
 8018a64:	46a0      	mov	r8, r4
 8018a66:	6863      	ldr	r3, [r4, #4]
 8018a68:	b333      	cbz	r3, 8018ab8 <GUI_TIMER_Exec+0x64>
 8018a6a:	f7f5 fe1b 	bl	800e6a4 <GUI_GetTime>
 8018a6e:	4606      	mov	r6, r0
 8018a70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018a74:	f7f4 fc2c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018a78:	6943      	ldr	r3, [r0, #20]
 8018a7a:	9000      	str	r0, [sp, #0]
 8018a7c:	1b9b      	subs	r3, r3, r6
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	dc17      	bgt.n	8018ab2 <GUI_TIMER_Exec+0x5e>
 8018a82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018a86:	9601      	str	r6, [sp, #4]
 8018a88:	9303      	str	r3, [sp, #12]
 8018a8a:	6846      	ldr	r6, [r0, #4]
 8018a8c:	6903      	ldr	r3, [r0, #16]
 8018a8e:	f8d0 9000 	ldr.w	r9, [r0]
 8018a92:	4668      	mov	r0, sp
 8018a94:	9302      	str	r3, [sp, #8]
 8018a96:	f8c8 6004 	str.w	r6, [r8, #4]
 8018a9a:	f7f4 fc27 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018a9e:	a801      	add	r0, sp, #4
 8018aa0:	47c8      	blx	r9
 8018aa2:	b14e      	cbz	r6, 8018ab8 <GUI_TIMER_Exec+0x64>
 8018aa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018aa8:	2501      	movs	r5, #1
 8018aaa:	429f      	cmp	r7, r3
 8018aac:	d1db      	bne.n	8018a66 <GUI_TIMER_Exec+0x12>
 8018aae:	2500      	movs	r5, #0
 8018ab0:	e002      	b.n	8018ab8 <GUI_TIMER_Exec+0x64>
 8018ab2:	4668      	mov	r0, sp
 8018ab4:	f7f4 fc1a 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018ab8:	f7f5 fd50 	bl	800e55c <GUI_Unlock>
 8018abc:	4628      	mov	r0, r5
 8018abe:	b005      	add	sp, #20
 8018ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ac4:	20000570 	.word	0x20000570

08018ac8 <_Link>:
 8018ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018aca:	4c22      	ldr	r4, [pc, #136]	; (8018b54 <_Link+0x8c>)
 8018acc:	4605      	mov	r5, r0
 8018ace:	f7f4 fbff 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018ad2:	9001      	str	r0, [sp, #4]
 8018ad4:	6863      	ldr	r3, [r4, #4]
 8018ad6:	b913      	cbnz	r3, 8018ade <_Link+0x16>
 8018ad8:	6065      	str	r5, [r4, #4]
 8018ada:	6043      	str	r3, [r0, #4]
 8018adc:	e035      	b.n	8018b4a <_Link+0x82>
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7f4 fbf6 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018ae4:	aa04      	add	r2, sp, #16
 8018ae6:	6946      	ldr	r6, [r0, #20]
 8018ae8:	f842 0d10 	str.w	r0, [r2, #-16]!
 8018aec:	4610      	mov	r0, r2
 8018aee:	f7f4 fbfd 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018af2:	9a01      	ldr	r2, [sp, #4]
 8018af4:	6953      	ldr	r3, [r2, #20]
 8018af6:	1b9b      	subs	r3, r3, r6
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	dc03      	bgt.n	8018b04 <_Link+0x3c>
 8018afc:	6863      	ldr	r3, [r4, #4]
 8018afe:	6065      	str	r5, [r4, #4]
 8018b00:	6053      	str	r3, [r2, #4]
 8018b02:	e022      	b.n	8018b4a <_Link+0x82>
 8018b04:	6864      	ldr	r4, [r4, #4]
 8018b06:	4620      	mov	r0, r4
 8018b08:	f7f4 fbe2 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018b0c:	6844      	ldr	r4, [r0, #4]
 8018b0e:	9002      	str	r0, [sp, #8]
 8018b10:	b1ac      	cbz	r4, 8018b3e <_Link+0x76>
 8018b12:	4620      	mov	r0, r4
 8018b14:	f7f4 fbdc 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018b18:	6946      	ldr	r6, [r0, #20]
 8018b1a:	9003      	str	r0, [sp, #12]
 8018b1c:	a803      	add	r0, sp, #12
 8018b1e:	f7f4 fbe5 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018b22:	9a01      	ldr	r2, [sp, #4]
 8018b24:	6953      	ldr	r3, [r2, #20]
 8018b26:	1b9b      	subs	r3, r3, r6
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	9b02      	ldr	r3, [sp, #8]
 8018b2c:	dc02      	bgt.n	8018b34 <_Link+0x6c>
 8018b2e:	6054      	str	r4, [r2, #4]
 8018b30:	605d      	str	r5, [r3, #4]
 8018b32:	e007      	b.n	8018b44 <_Link+0x7c>
 8018b34:	a802      	add	r0, sp, #8
 8018b36:	685c      	ldr	r4, [r3, #4]
 8018b38:	f7f4 fbd8 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018b3c:	e7e3      	b.n	8018b06 <_Link+0x3e>
 8018b3e:	9b01      	ldr	r3, [sp, #4]
 8018b40:	605c      	str	r4, [r3, #4]
 8018b42:	6045      	str	r5, [r0, #4]
 8018b44:	a802      	add	r0, sp, #8
 8018b46:	f7f4 fbd1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018b4a:	a801      	add	r0, sp, #4
 8018b4c:	f7f4 fbce 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018b50:	b004      	add	sp, #16
 8018b52:	bd70      	pop	{r4, r5, r6, pc}
 8018b54:	20000570 	.word	0x20000570

08018b58 <_Unlink>:
 8018b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b5a:	4605      	mov	r5, r0
 8018b5c:	b1e8      	cbz	r0, 8018b9a <_Unlink+0x42>
 8018b5e:	f7f4 fbb7 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018b62:	4b0f      	ldr	r3, [pc, #60]	; (8018ba0 <_Unlink+0x48>)
 8018b64:	9000      	str	r0, [sp, #0]
 8018b66:	685c      	ldr	r4, [r3, #4]
 8018b68:	42a5      	cmp	r5, r4
 8018b6a:	d105      	bne.n	8018b78 <_Unlink+0x20>
 8018b6c:	6842      	ldr	r2, [r0, #4]
 8018b6e:	605a      	str	r2, [r3, #4]
 8018b70:	e010      	b.n	8018b94 <_Unlink+0x3c>
 8018b72:	a801      	add	r0, sp, #4
 8018b74:	f7f4 fbba 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018b78:	b164      	cbz	r4, 8018b94 <_Unlink+0x3c>
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	f7f4 fba8 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018b80:	6844      	ldr	r4, [r0, #4]
 8018b82:	9001      	str	r0, [sp, #4]
 8018b84:	42a5      	cmp	r5, r4
 8018b86:	d1f4      	bne.n	8018b72 <_Unlink+0x1a>
 8018b88:	9b00      	ldr	r3, [sp, #0]
 8018b8a:	685b      	ldr	r3, [r3, #4]
 8018b8c:	6043      	str	r3, [r0, #4]
 8018b8e:	a801      	add	r0, sp, #4
 8018b90:	f7f4 fbac 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018b94:	4668      	mov	r0, sp
 8018b96:	f7f4 fba9 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018b9a:	b003      	add	sp, #12
 8018b9c:	bd30      	pop	{r4, r5, pc}
 8018b9e:	bf00      	nop
 8018ba0:	20000570 	.word	0x20000570

08018ba4 <GUI_TIMER__GetFirstTimer>:
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ba8:	6003      	str	r3, [r0, #0]
 8018baa:	4605      	mov	r5, r0
 8018bac:	4b08      	ldr	r3, [pc, #32]	; (8018bd0 <GUI_TIMER__GetFirstTimer+0x2c>)
 8018bae:	681c      	ldr	r4, [r3, #0]
 8018bb0:	b154      	cbz	r4, 8018bc8 <GUI_TIMER__GetFirstTimer+0x24>
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	f7f4 fb8c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018bb8:	ab02      	add	r3, sp, #8
 8018bba:	6902      	ldr	r2, [r0, #16]
 8018bbc:	f843 0d04 	str.w	r0, [r3, #-4]!
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	602a      	str	r2, [r5, #0]
 8018bc4:	f7f4 fb92 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018bc8:	4620      	mov	r0, r4
 8018bca:	b003      	add	sp, #12
 8018bcc:	bd30      	pop	{r4, r5, pc}
 8018bce:	bf00      	nop
 8018bd0:	20000570 	.word	0x20000570

08018bd4 <GUI_TIMER__GetNextTimerLin>:
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018bd8:	600b      	str	r3, [r1, #0]
 8018bda:	460e      	mov	r6, r1
 8018bdc:	4604      	mov	r4, r0
 8018bde:	b190      	cbz	r0, 8018c06 <GUI_TIMER__GetNextTimerLin+0x32>
 8018be0:	f7f4 fb76 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018be4:	ad02      	add	r5, sp, #8
 8018be6:	6884      	ldr	r4, [r0, #8]
 8018be8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018bec:	b144      	cbz	r4, 8018c00 <GUI_TIMER__GetNextTimerLin+0x2c>
 8018bee:	4628      	mov	r0, r5
 8018bf0:	f7f4 fb7c 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	f7f4 fb6b 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018bfa:	6903      	ldr	r3, [r0, #16]
 8018bfc:	9001      	str	r0, [sp, #4]
 8018bfe:	6033      	str	r3, [r6, #0]
 8018c00:	4628      	mov	r0, r5
 8018c02:	f7f4 fb73 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018c06:	4620      	mov	r0, r4
 8018c08:	b002      	add	sp, #8
 8018c0a:	bd70      	pop	{r4, r5, r6, pc}

08018c0c <GUI_TIMER_Create>:
 8018c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018c10:	4680      	mov	r8, r0
 8018c12:	460c      	mov	r4, r1
 8018c14:	4617      	mov	r7, r2
 8018c16:	461e      	mov	r6, r3
 8018c18:	f7f5 fcaa 	bl	800e570 <GUI_Lock>
 8018c1c:	201c      	movs	r0, #28
 8018c1e:	f7f4 fd4b 	bl	800d6b8 <GUI_ALLOC_AllocZero>
 8018c22:	4605      	mov	r5, r0
 8018c24:	2800      	cmp	r0, #0
 8018c26:	d030      	beq.n	8018c8a <GUI_TIMER_Create+0x7e>
 8018c28:	4a1b      	ldr	r2, [pc, #108]	; (8018c98 <GUI_TIMER_Create+0x8c>)
 8018c2a:	4b1c      	ldr	r3, [pc, #112]	; (8018c9c <GUI_TIMER_Create+0x90>)
 8018c2c:	601a      	str	r2, [r3, #0]
 8018c2e:	f7f4 fb4f 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018c32:	9000      	str	r0, [sp, #0]
 8018c34:	b914      	cbnz	r4, 8018c3c <GUI_TIMER_Create+0x30>
 8018c36:	f7f5 fd35 	bl	800e6a4 <GUI_GetTime>
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	a802      	add	r0, sp, #8
 8018c3e:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8018c42:	615c      	str	r4, [r3, #20]
 8018c44:	f8c3 8000 	str.w	r8, [r3]
 8018c48:	611f      	str	r7, [r3, #16]
 8018c4a:	819e      	strh	r6, [r3, #12]
 8018c4c:	4c14      	ldr	r4, [pc, #80]	; (8018ca0 <GUI_TIMER_Create+0x94>)
 8018c4e:	f7f4 fb4d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018c52:	4628      	mov	r0, r5
 8018c54:	f7ff ff38 	bl	8018ac8 <_Link>
 8018c58:	68a3      	ldr	r3, [r4, #8]
 8018c5a:	b93b      	cbnz	r3, 8018c6c <GUI_TIMER_Create+0x60>
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	4620      	mov	r0, r4
 8018c60:	60a3      	str	r3, [r4, #8]
 8018c62:	4b10      	ldr	r3, [pc, #64]	; (8018ca4 <GUI_TIMER_Create+0x98>)
 8018c64:	f840 3f0c 	str.w	r3, [r0, #12]!
 8018c68:	f7f5 f92a 	bl	800dec0 <GUI__RegisterExit>
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	f7f4 fb2f 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018c72:	6823      	ldr	r3, [r4, #0]
 8018c74:	9001      	str	r0, [sp, #4]
 8018c76:	4a0a      	ldr	r2, [pc, #40]	; (8018ca0 <GUI_TIMER_Create+0x94>)
 8018c78:	b913      	cbnz	r3, 8018c80 <GUI_TIMER_Create+0x74>
 8018c7a:	6015      	str	r5, [r2, #0]
 8018c7c:	6083      	str	r3, [r0, #8]
 8018c7e:	e001      	b.n	8018c84 <GUI_TIMER_Create+0x78>
 8018c80:	6083      	str	r3, [r0, #8]
 8018c82:	6015      	str	r5, [r2, #0]
 8018c84:	a801      	add	r0, sp, #4
 8018c86:	f7f4 fb31 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018c8a:	f7f5 fc67 	bl	800e55c <GUI_Unlock>
 8018c8e:	4628      	mov	r0, r5
 8018c90:	b002      	add	sp, #8
 8018c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c96:	bf00      	nop
 8018c98:	08018a55 	.word	0x08018a55
 8018c9c:	200225e0 	.word	0x200225e0
 8018ca0:	20000570 	.word	0x20000570
 8018ca4:	08018a45 	.word	0x08018a45

08018ca8 <GUI_TIMER_Delete>:
 8018ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018caa:	4604      	mov	r4, r0
 8018cac:	b378      	cbz	r0, 8018d0e <GUI_TIMER_Delete+0x66>
 8018cae:	4e19      	ldr	r6, [pc, #100]	; (8018d14 <GUI_TIMER_Delete+0x6c>)
 8018cb0:	f7f5 fc5e 	bl	800e570 <GUI_Lock>
 8018cb4:	6835      	ldr	r5, [r6, #0]
 8018cb6:	42ac      	cmp	r4, r5
 8018cb8:	d10c      	bne.n	8018cd4 <GUI_TIMER_Delete+0x2c>
 8018cba:	4620      	mov	r0, r4
 8018cbc:	f7f4 fb08 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018cc0:	ab02      	add	r3, sp, #8
 8018cc2:	6882      	ldr	r2, [r0, #8]
 8018cc4:	f843 0d04 	str.w	r0, [r3, #-4]!
 8018cc8:	4618      	mov	r0, r3
 8018cca:	6032      	str	r2, [r6, #0]
 8018ccc:	e015      	b.n	8018cfa <GUI_TIMER_Delete+0x52>
 8018cce:	4668      	mov	r0, sp
 8018cd0:	f7f4 fb0c 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018cd4:	b19d      	cbz	r5, 8018cfe <GUI_TIMER_Delete+0x56>
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f7f4 fafa 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018cdc:	6885      	ldr	r5, [r0, #8]
 8018cde:	9000      	str	r0, [sp, #0]
 8018ce0:	42ac      	cmp	r4, r5
 8018ce2:	d1f4      	bne.n	8018cce <GUI_TIMER_Delete+0x26>
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f7f4 faf3 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018cea:	9b00      	ldr	r3, [sp, #0]
 8018cec:	6882      	ldr	r2, [r0, #8]
 8018cee:	9001      	str	r0, [sp, #4]
 8018cf0:	a801      	add	r0, sp, #4
 8018cf2:	609a      	str	r2, [r3, #8]
 8018cf4:	f7f4 fafa 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018cf8:	4668      	mov	r0, sp
 8018cfa:	f7f4 faf7 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018cfe:	4620      	mov	r0, r4
 8018d00:	f7ff ff2a 	bl	8018b58 <_Unlink>
 8018d04:	4620      	mov	r0, r4
 8018d06:	f7f4 fb21 	bl	800d34c <GUI_ALLOC_Free>
 8018d0a:	f7f5 fc27 	bl	800e55c <GUI_Unlock>
 8018d0e:	b002      	add	sp, #8
 8018d10:	bd70      	pop	{r4, r5, r6, pc}
 8018d12:	bf00      	nop
 8018d14:	20000570 	.word	0x20000570

08018d18 <GUI_TIMER_SetPeriod>:
 8018d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d1a:	460d      	mov	r5, r1
 8018d1c:	4604      	mov	r4, r0
 8018d1e:	b168      	cbz	r0, 8018d3c <GUI_TIMER_SetPeriod+0x24>
 8018d20:	f7f5 fc26 	bl	800e570 <GUI_Lock>
 8018d24:	4620      	mov	r0, r4
 8018d26:	f7f4 fad3 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018d2a:	ab02      	add	r3, sp, #8
 8018d2c:	6185      	str	r5, [r0, #24]
 8018d2e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7f4 fada 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018d38:	f7f5 fc10 	bl	800e55c <GUI_Unlock>
 8018d3c:	b003      	add	sp, #12
 8018d3e:	bd30      	pop	{r4, r5, pc}

08018d40 <GUI_TIMER_Restart>:
 8018d40:	b513      	push	{r0, r1, r4, lr}
 8018d42:	4604      	mov	r4, r0
 8018d44:	b1c0      	cbz	r0, 8018d78 <GUI_TIMER_Restart+0x38>
 8018d46:	f7f5 fc13 	bl	800e570 <GUI_Lock>
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	f7f4 fac0 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018d50:	9001      	str	r0, [sp, #4]
 8018d52:	f7f5 fca7 	bl	800e6a4 <GUI_GetTime>
 8018d56:	ab02      	add	r3, sp, #8
 8018d58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018d5c:	698a      	ldr	r2, [r1, #24]
 8018d5e:	4410      	add	r0, r2
 8018d60:	6148      	str	r0, [r1, #20]
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7f4 fac2 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018d68:	4620      	mov	r0, r4
 8018d6a:	f7ff fef5 	bl	8018b58 <_Unlink>
 8018d6e:	4620      	mov	r0, r4
 8018d70:	f7ff feaa 	bl	8018ac8 <_Link>
 8018d74:	f7f5 fbf2 	bl	800e55c <GUI_Unlock>
 8018d78:	b002      	add	sp, #8
 8018d7a:	bd10      	pop	{r4, pc}

08018d7c <GUI_TIMER_GetFlag>:
 8018d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d7e:	460d      	mov	r5, r1
 8018d80:	4604      	mov	r4, r0
 8018d82:	b190      	cbz	r0, 8018daa <GUI_TIMER_GetFlag+0x2e>
 8018d84:	f7f5 fbf4 	bl	800e570 <GUI_Lock>
 8018d88:	4620      	mov	r0, r4
 8018d8a:	f7f4 faa1 	bl	800d2d0 <GUI_ALLOC_LockH>
 8018d8e:	8982      	ldrh	r2, [r0, #12]
 8018d90:	ab02      	add	r3, sp, #8
 8018d92:	422a      	tst	r2, r5
 8018d94:	f843 0d04 	str.w	r0, [r3, #-4]!
 8018d98:	4618      	mov	r0, r3
 8018d9a:	bf14      	ite	ne
 8018d9c:	2401      	movne	r4, #1
 8018d9e:	2400      	moveq	r4, #0
 8018da0:	f7f4 faa4 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8018da4:	f7f5 fbda 	bl	800e55c <GUI_Unlock>
 8018da8:	e000      	b.n	8018dac <GUI_TIMER_GetFlag+0x30>
 8018daa:	2401      	movs	r4, #1
 8018dac:	4620      	mov	r0, r4
 8018dae:	b003      	add	sp, #12
 8018db0:	bd30      	pop	{r4, r5, pc}

08018db2 <GUI__CompactPixelIndices>:
 8018db2:	2a08      	cmp	r2, #8
 8018db4:	b510      	push	{r4, lr}
 8018db6:	dd0e      	ble.n	8018dd6 <GUI__CompactPixelIndices+0x24>
 8018db8:	2a10      	cmp	r2, #16
 8018dba:	dc0a      	bgt.n	8018dd2 <GUI__CompactPixelIndices+0x20>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018dc2:	f850 2b04 	ldr.w	r2, [r0], #4
 8018dc6:	f823 2b02 	strh.w	r2, [r3], #2
 8018dca:	428b      	cmp	r3, r1
 8018dcc:	d1f9      	bne.n	8018dc2 <GUI__CompactPixelIndices+0x10>
 8018dce:	2001      	movs	r0, #1
 8018dd0:	bd10      	pop	{r4, pc}
 8018dd2:	2000      	movs	r0, #0
 8018dd4:	bd10      	pop	{r4, pc}
 8018dd6:	2a02      	cmp	r2, #2
 8018dd8:	d12a      	bne.n	8018e30 <GUI__CompactPixelIndices+0x7e>
 8018dda:	4604      	mov	r4, r0
 8018ddc:	6803      	ldr	r3, [r0, #0]
 8018dde:	2901      	cmp	r1, #1
 8018de0:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	d020      	beq.n	8018e2a <GUI__CompactPixelIndices+0x78>
 8018de8:	6842      	ldr	r2, [r0, #4]
 8018dea:	2902      	cmp	r1, #2
 8018dec:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8018df0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8018df4:	ea43 0302 	orr.w	r3, r3, r2
 8018df8:	d101      	bne.n	8018dfe <GUI__CompactPixelIndices+0x4c>
 8018dfa:	3008      	adds	r0, #8
 8018dfc:	e016      	b.n	8018e2c <GUI__CompactPixelIndices+0x7a>
 8018dfe:	6882      	ldr	r2, [r0, #8]
 8018e00:	2903      	cmp	r1, #3
 8018e02:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8018e06:	f002 020c 	and.w	r2, r2, #12
 8018e0a:	ea43 0302 	orr.w	r3, r3, r2
 8018e0e:	d101      	bne.n	8018e14 <GUI__CompactPixelIndices+0x62>
 8018e10:	300c      	adds	r0, #12
 8018e12:	e00b      	b.n	8018e2c <GUI__CompactPixelIndices+0x7a>
 8018e14:	68c2      	ldr	r2, [r0, #12]
 8018e16:	3904      	subs	r1, #4
 8018e18:	3010      	adds	r0, #16
 8018e1a:	f002 0203 	and.w	r2, r2, #3
 8018e1e:	4313      	orrs	r3, r2
 8018e20:	f804 3b01 	strb.w	r3, [r4], #1
 8018e24:	2900      	cmp	r1, #0
 8018e26:	d1d9      	bne.n	8018ddc <GUI__CompactPixelIndices+0x2a>
 8018e28:	e7d1      	b.n	8018dce <GUI__CompactPixelIndices+0x1c>
 8018e2a:	3004      	adds	r0, #4
 8018e2c:	2100      	movs	r1, #0
 8018e2e:	e7f7      	b.n	8018e20 <GUI__CompactPixelIndices+0x6e>
 8018e30:	2a04      	cmp	r2, #4
 8018e32:	d115      	bne.n	8018e60 <GUI__CompactPixelIndices+0xae>
 8018e34:	4604      	mov	r4, r0
 8018e36:	2901      	cmp	r1, #1
 8018e38:	6803      	ldr	r3, [r0, #0]
 8018e3a:	bf18      	it	ne
 8018e3c:	6842      	ldrne	r2, [r0, #4]
 8018e3e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8018e42:	bf0c      	ite	eq
 8018e44:	2100      	moveq	r1, #0
 8018e46:	3902      	subne	r1, #2
 8018e48:	b2db      	uxtb	r3, r3
 8018e4a:	bf17      	itett	ne
 8018e4c:	f002 020f 	andne.w	r2, r2, #15
 8018e50:	3004      	addeq	r0, #4
 8018e52:	3008      	addne	r0, #8
 8018e54:	4313      	orrne	r3, r2
 8018e56:	f804 3b01 	strb.w	r3, [r4], #1
 8018e5a:	2900      	cmp	r1, #0
 8018e5c:	d1eb      	bne.n	8018e36 <GUI__CompactPixelIndices+0x84>
 8018e5e:	e7b6      	b.n	8018dce <GUI__CompactPixelIndices+0x1c>
 8018e60:	2a01      	cmp	r2, #1
 8018e62:	4603      	mov	r3, r0
 8018e64:	d154      	bne.n	8018f10 <GUI__CompactPixelIndices+0x15e>
 8018e66:	681a      	ldr	r2, [r3, #0]
 8018e68:	2901      	cmp	r1, #1
 8018e6a:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8018e6e:	b2d2      	uxtb	r2, r2
 8018e70:	d04b      	beq.n	8018f0a <GUI__CompactPixelIndices+0x158>
 8018e72:	685c      	ldr	r4, [r3, #4]
 8018e74:	2902      	cmp	r1, #2
 8018e76:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8018e7a:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8018e7e:	ea42 0204 	orr.w	r2, r2, r4
 8018e82:	d101      	bne.n	8018e88 <GUI__CompactPixelIndices+0xd6>
 8018e84:	3308      	adds	r3, #8
 8018e86:	e041      	b.n	8018f0c <GUI__CompactPixelIndices+0x15a>
 8018e88:	689c      	ldr	r4, [r3, #8]
 8018e8a:	2903      	cmp	r1, #3
 8018e8c:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8018e90:	f004 0420 	and.w	r4, r4, #32
 8018e94:	ea42 0204 	orr.w	r2, r2, r4
 8018e98:	d101      	bne.n	8018e9e <GUI__CompactPixelIndices+0xec>
 8018e9a:	330c      	adds	r3, #12
 8018e9c:	e036      	b.n	8018f0c <GUI__CompactPixelIndices+0x15a>
 8018e9e:	68dc      	ldr	r4, [r3, #12]
 8018ea0:	2904      	cmp	r1, #4
 8018ea2:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8018ea6:	f004 0410 	and.w	r4, r4, #16
 8018eaa:	ea42 0204 	orr.w	r2, r2, r4
 8018eae:	d101      	bne.n	8018eb4 <GUI__CompactPixelIndices+0x102>
 8018eb0:	3310      	adds	r3, #16
 8018eb2:	e02b      	b.n	8018f0c <GUI__CompactPixelIndices+0x15a>
 8018eb4:	691c      	ldr	r4, [r3, #16]
 8018eb6:	2905      	cmp	r1, #5
 8018eb8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018ebc:	f004 0408 	and.w	r4, r4, #8
 8018ec0:	ea42 0204 	orr.w	r2, r2, r4
 8018ec4:	d101      	bne.n	8018eca <GUI__CompactPixelIndices+0x118>
 8018ec6:	3314      	adds	r3, #20
 8018ec8:	e020      	b.n	8018f0c <GUI__CompactPixelIndices+0x15a>
 8018eca:	695c      	ldr	r4, [r3, #20]
 8018ecc:	2906      	cmp	r1, #6
 8018ece:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8018ed2:	f004 0404 	and.w	r4, r4, #4
 8018ed6:	ea42 0204 	orr.w	r2, r2, r4
 8018eda:	d101      	bne.n	8018ee0 <GUI__CompactPixelIndices+0x12e>
 8018edc:	3318      	adds	r3, #24
 8018ede:	e015      	b.n	8018f0c <GUI__CompactPixelIndices+0x15a>
 8018ee0:	699c      	ldr	r4, [r3, #24]
 8018ee2:	3907      	subs	r1, #7
 8018ee4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8018ee8:	bf08      	it	eq
 8018eea:	331c      	addeq	r3, #28
 8018eec:	f004 0402 	and.w	r4, r4, #2
 8018ef0:	ea42 0204 	orr.w	r2, r2, r4
 8018ef4:	bf1f      	itttt	ne
 8018ef6:	69dc      	ldrne	r4, [r3, #28]
 8018ef8:	3320      	addne	r3, #32
 8018efa:	f004 0401 	andne.w	r4, r4, #1
 8018efe:	4322      	orrne	r2, r4
 8018f00:	f800 2b01 	strb.w	r2, [r0], #1
 8018f04:	2900      	cmp	r1, #0
 8018f06:	d1ae      	bne.n	8018e66 <GUI__CompactPixelIndices+0xb4>
 8018f08:	e761      	b.n	8018dce <GUI__CompactPixelIndices+0x1c>
 8018f0a:	3304      	adds	r3, #4
 8018f0c:	2100      	movs	r1, #0
 8018f0e:	e7f7      	b.n	8018f00 <GUI__CompactPixelIndices+0x14e>
 8018f10:	4401      	add	r1, r0
 8018f12:	f850 2b04 	ldr.w	r2, [r0], #4
 8018f16:	f803 2b01 	strb.w	r2, [r3], #1
 8018f1a:	4299      	cmp	r1, r3
 8018f1c:	d1f9      	bne.n	8018f12 <GUI__CompactPixelIndices+0x160>
 8018f1e:	e756      	b.n	8018dce <GUI__CompactPixelIndices+0x1c>

08018f20 <GUI__ConvertColor2Index>:
 8018f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f24:	9f08      	ldr	r7, [sp, #32]
 8018f26:	4604      	mov	r4, r0
 8018f28:	460d      	mov	r5, r1
 8018f2a:	f8d3 8000 	ldr.w	r8, [r3]
 8018f2e:	2f00      	cmp	r7, #0
 8018f30:	bf08      	it	eq
 8018f32:	4607      	moveq	r7, r0
 8018f34:	2a08      	cmp	r2, #8
 8018f36:	dd05      	ble.n	8018f44 <GUI__ConvertColor2Index+0x24>
 8018f38:	2a10      	cmp	r2, #16
 8018f3a:	f340 80ad 	ble.w	8019098 <GUI__ConvertColor2Index+0x178>
 8018f3e:	2000      	movs	r0, #0
 8018f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f44:	3a01      	subs	r2, #1
 8018f46:	2a07      	cmp	r2, #7
 8018f48:	f200 809d 	bhi.w	8019086 <GUI__ConvertColor2Index+0x166>
 8018f4c:	e8df f002 	tbb	[pc, r2]
 8018f50:	7f9b5b11 	.word	0x7f9b5b11
 8018f54:	899b9b9b 	.word	0x899b9b9b
 8018f58:	69e0      	ldr	r0, [r4, #28]
 8018f5a:	f104 0920 	add.w	r9, r4, #32
 8018f5e:	47c0      	blx	r8
 8018f60:	4330      	orrs	r0, r6
 8018f62:	3d08      	subs	r5, #8
 8018f64:	464c      	mov	r4, r9
 8018f66:	b2c6      	uxtb	r6, r0
 8018f68:	f807 6b01 	strb.w	r6, [r7], #1
 8018f6c:	2d00      	cmp	r5, #0
 8018f6e:	f000 808a 	beq.w	8019086 <GUI__ConvertColor2Index+0x166>
 8018f72:	6820      	ldr	r0, [r4, #0]
 8018f74:	47c0      	blx	r8
 8018f76:	2d01      	cmp	r5, #1
 8018f78:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8018f7c:	b2c6      	uxtb	r6, r0
 8018f7e:	f000 8085 	beq.w	801908c <GUI__ConvertColor2Index+0x16c>
 8018f82:	6860      	ldr	r0, [r4, #4]
 8018f84:	47c0      	blx	r8
 8018f86:	2d02      	cmp	r5, #2
 8018f88:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 8018f8c:	b2c6      	uxtb	r6, r0
 8018f8e:	d101      	bne.n	8018f94 <GUI__ConvertColor2Index+0x74>
 8018f90:	3408      	adds	r4, #8
 8018f92:	e07c      	b.n	801908e <GUI__ConvertColor2Index+0x16e>
 8018f94:	68a0      	ldr	r0, [r4, #8]
 8018f96:	47c0      	blx	r8
 8018f98:	2d03      	cmp	r5, #3
 8018f9a:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 8018f9e:	b2c6      	uxtb	r6, r0
 8018fa0:	d101      	bne.n	8018fa6 <GUI__ConvertColor2Index+0x86>
 8018fa2:	340c      	adds	r4, #12
 8018fa4:	e073      	b.n	801908e <GUI__ConvertColor2Index+0x16e>
 8018fa6:	68e0      	ldr	r0, [r4, #12]
 8018fa8:	47c0      	blx	r8
 8018faa:	2d04      	cmp	r5, #4
 8018fac:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8018fb0:	b2c6      	uxtb	r6, r0
 8018fb2:	d101      	bne.n	8018fb8 <GUI__ConvertColor2Index+0x98>
 8018fb4:	3410      	adds	r4, #16
 8018fb6:	e06a      	b.n	801908e <GUI__ConvertColor2Index+0x16e>
 8018fb8:	6920      	ldr	r0, [r4, #16]
 8018fba:	47c0      	blx	r8
 8018fbc:	2d05      	cmp	r5, #5
 8018fbe:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 8018fc2:	b2c6      	uxtb	r6, r0
 8018fc4:	d101      	bne.n	8018fca <GUI__ConvertColor2Index+0xaa>
 8018fc6:	3414      	adds	r4, #20
 8018fc8:	e061      	b.n	801908e <GUI__ConvertColor2Index+0x16e>
 8018fca:	6960      	ldr	r0, [r4, #20]
 8018fcc:	47c0      	blx	r8
 8018fce:	2d06      	cmp	r5, #6
 8018fd0:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8018fd4:	b2c6      	uxtb	r6, r0
 8018fd6:	d101      	bne.n	8018fdc <GUI__ConvertColor2Index+0xbc>
 8018fd8:	3418      	adds	r4, #24
 8018fda:	e058      	b.n	801908e <GUI__ConvertColor2Index+0x16e>
 8018fdc:	69a0      	ldr	r0, [r4, #24]
 8018fde:	47c0      	blx	r8
 8018fe0:	2d07      	cmp	r5, #7
 8018fe2:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 8018fe6:	b2c6      	uxtb	r6, r0
 8018fe8:	d1b6      	bne.n	8018f58 <GUI__ConvertColor2Index+0x38>
 8018fea:	341c      	adds	r4, #28
 8018fec:	e04f      	b.n	801908e <GUI__ConvertColor2Index+0x16e>
 8018fee:	68e0      	ldr	r0, [r4, #12]
 8018ff0:	f104 0910 	add.w	r9, r4, #16
 8018ff4:	47c0      	blx	r8
 8018ff6:	4330      	orrs	r0, r6
 8018ff8:	3d04      	subs	r5, #4
 8018ffa:	464c      	mov	r4, r9
 8018ffc:	b2c6      	uxtb	r6, r0
 8018ffe:	f807 6b01 	strb.w	r6, [r7], #1
 8019002:	2d00      	cmp	r5, #0
 8019004:	d03f      	beq.n	8019086 <GUI__ConvertColor2Index+0x166>
 8019006:	6820      	ldr	r0, [r4, #0]
 8019008:	47c0      	blx	r8
 801900a:	2d01      	cmp	r5, #1
 801900c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8019010:	b2c6      	uxtb	r6, r0
 8019012:	d03e      	beq.n	8019092 <GUI__ConvertColor2Index+0x172>
 8019014:	6860      	ldr	r0, [r4, #4]
 8019016:	47c0      	blx	r8
 8019018:	2d02      	cmp	r5, #2
 801901a:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801901e:	b2c6      	uxtb	r6, r0
 8019020:	d101      	bne.n	8019026 <GUI__ConvertColor2Index+0x106>
 8019022:	3408      	adds	r4, #8
 8019024:	e036      	b.n	8019094 <GUI__ConvertColor2Index+0x174>
 8019026:	68a0      	ldr	r0, [r4, #8]
 8019028:	47c0      	blx	r8
 801902a:	2d03      	cmp	r5, #3
 801902c:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8019030:	b2c6      	uxtb	r6, r0
 8019032:	d1dc      	bne.n	8018fee <GUI__ConvertColor2Index+0xce>
 8019034:	340c      	adds	r4, #12
 8019036:	e02d      	b.n	8019094 <GUI__ConvertColor2Index+0x174>
 8019038:	6860      	ldr	r0, [r4, #4]
 801903a:	f104 0908 	add.w	r9, r4, #8
 801903e:	47c0      	blx	r8
 8019040:	4330      	orrs	r0, r6
 8019042:	3d02      	subs	r5, #2
 8019044:	464c      	mov	r4, r9
 8019046:	b2c6      	uxtb	r6, r0
 8019048:	f807 6b01 	strb.w	r6, [r7], #1
 801904c:	b1dd      	cbz	r5, 8019086 <GUI__ConvertColor2Index+0x166>
 801904e:	6820      	ldr	r0, [r4, #0]
 8019050:	47c0      	blx	r8
 8019052:	2d01      	cmp	r5, #1
 8019054:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019058:	b2c6      	uxtb	r6, r0
 801905a:	d1ed      	bne.n	8019038 <GUI__ConvertColor2Index+0x118>
 801905c:	3404      	adds	r4, #4
 801905e:	2500      	movs	r5, #0
 8019060:	e7f2      	b.n	8019048 <GUI__ConvertColor2Index+0x128>
 8019062:	691e      	ldr	r6, [r3, #16]
 8019064:	b12e      	cbz	r6, 8019072 <GUI__ConvertColor2Index+0x152>
 8019066:	2301      	movs	r3, #1
 8019068:	462a      	mov	r2, r5
 801906a:	4639      	mov	r1, r7
 801906c:	4620      	mov	r0, r4
 801906e:	47b0      	blx	r6
 8019070:	e009      	b.n	8019086 <GUI__ConvertColor2Index+0x166>
 8019072:	1e7e      	subs	r6, r7, #1
 8019074:	f854 0b04 	ldr.w	r0, [r4], #4
 8019078:	47c0      	blx	r8
 801907a:	f806 0f01 	strb.w	r0, [r6, #1]!
 801907e:	43f3      	mvns	r3, r6
 8019080:	442b      	add	r3, r5
 8019082:	42df      	cmn	r7, r3
 8019084:	d1f6      	bne.n	8019074 <GUI__ConvertColor2Index+0x154>
 8019086:	2001      	movs	r0, #1
 8019088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801908c:	3404      	adds	r4, #4
 801908e:	2500      	movs	r5, #0
 8019090:	e76a      	b.n	8018f68 <GUI__ConvertColor2Index+0x48>
 8019092:	3404      	adds	r4, #4
 8019094:	2500      	movs	r5, #0
 8019096:	e7b2      	b.n	8018ffe <GUI__ConvertColor2Index+0xde>
 8019098:	691e      	ldr	r6, [r3, #16]
 801909a:	b11e      	cbz	r6, 80190a4 <GUI__ConvertColor2Index+0x184>
 801909c:	2302      	movs	r3, #2
 801909e:	462a      	mov	r2, r5
 80190a0:	4639      	mov	r1, r7
 80190a2:	e7e4      	b.n	801906e <GUI__ConvertColor2Index+0x14e>
 80190a4:	3f02      	subs	r7, #2
 80190a6:	f854 0b04 	ldr.w	r0, [r4], #4
 80190aa:	47c0      	blx	r8
 80190ac:	3d01      	subs	r5, #1
 80190ae:	f827 0f02 	strh.w	r0, [r7, #2]!
 80190b2:	d1f8      	bne.n	80190a6 <GUI__ConvertColor2Index+0x186>
 80190b4:	e7e7      	b.n	8019086 <GUI__ConvertColor2Index+0x166>

080190b6 <GUI__CompactPixelIndicesEx>:
 80190b6:	b513      	push	{r0, r1, r4, lr}
 80190b8:	2400      	movs	r4, #0
 80190ba:	9400      	str	r4, [sp, #0]
 80190bc:	f7ff ff30 	bl	8018f20 <GUI__ConvertColor2Index>
 80190c0:	b002      	add	sp, #8
 80190c2:	bd10      	pop	{r4, pc}

080190c4 <GUI__ManageCacheEx>:
 80190c4:	2801      	cmp	r0, #1
 80190c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190c8:	4606      	mov	r6, r0
 80190ca:	460c      	mov	r4, r1
 80190cc:	dc62      	bgt.n	8019194 <GUI__ManageCacheEx+0xd0>
 80190ce:	4d33      	ldr	r5, [pc, #204]	; (801919c <GUI__ManageCacheEx+0xd8>)
 80190d0:	686b      	ldr	r3, [r5, #4]
 80190d2:	b103      	cbz	r3, 80190d6 <GUI__ManageCacheEx+0x12>
 80190d4:	4798      	blx	r3
 80190d6:	2c01      	cmp	r4, #1
 80190d8:	d004      	beq.n	80190e4 <GUI__ManageCacheEx+0x20>
 80190da:	2c02      	cmp	r4, #2
 80190dc:	d020      	beq.n	8019120 <GUI__ManageCacheEx+0x5c>
 80190de:	2c00      	cmp	r4, #0
 80190e0:	d158      	bne.n	8019194 <GUI__ManageCacheEx+0xd0>
 80190e2:	e033      	b.n	801914c <GUI__ManageCacheEx+0x88>
 80190e4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80190e8:	68af      	ldr	r7, [r5, #8]
 80190ea:	b9af      	cbnz	r7, 8019118 <GUI__ManageCacheEx+0x54>
 80190ec:	4630      	mov	r0, r6
 80190ee:	f7f4 ff1f 	bl	800df30 <GUI_DEVICE__GetpDriver>
 80190f2:	9001      	str	r0, [sp, #4]
 80190f4:	2800      	cmp	r0, #0
 80190f6:	d04d      	beq.n	8019194 <GUI__ManageCacheEx+0xd0>
 80190f8:	68c3      	ldr	r3, [r0, #12]
 80190fa:	210d      	movs	r1, #13
 80190fc:	a801      	add	r0, sp, #4
 80190fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019100:	4798      	blx	r3
 8019102:	4603      	mov	r3, r0
 8019104:	2800      	cmp	r0, #0
 8019106:	d045      	beq.n	8019194 <GUI__ManageCacheEx+0xd0>
 8019108:	4621      	mov	r1, r4
 801910a:	9801      	ldr	r0, [sp, #4]
 801910c:	4798      	blx	r3
 801910e:	68ab      	ldr	r3, [r5, #8]
 8019110:	4638      	mov	r0, r7
 8019112:	3301      	adds	r3, #1
 8019114:	60ab      	str	r3, [r5, #8]
 8019116:	e03e      	b.n	8019196 <GUI__ManageCacheEx+0xd2>
 8019118:	1c78      	adds	r0, r7, #1
 801911a:	60a8      	str	r0, [r5, #8]
 801911c:	4620      	mov	r0, r4
 801911e:	e03a      	b.n	8019196 <GUI__ManageCacheEx+0xd2>
 8019120:	4630      	mov	r0, r6
 8019122:	f7f4 ff05 	bl	800df30 <GUI_DEVICE__GetpDriver>
 8019126:	9001      	str	r0, [sp, #4]
 8019128:	2800      	cmp	r0, #0
 801912a:	d033      	beq.n	8019194 <GUI__ManageCacheEx+0xd0>
 801912c:	68c3      	ldr	r3, [r0, #12]
 801912e:	210d      	movs	r1, #13
 8019130:	a801      	add	r0, sp, #4
 8019132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019134:	4798      	blx	r3
 8019136:	4604      	mov	r4, r0
 8019138:	2800      	cmp	r0, #0
 801913a:	d02b      	beq.n	8019194 <GUI__ManageCacheEx+0xd0>
 801913c:	682b      	ldr	r3, [r5, #0]
 801913e:	b103      	cbz	r3, 8019142 <GUI__ManageCacheEx+0x7e>
 8019140:	4798      	blx	r3
 8019142:	2102      	movs	r1, #2
 8019144:	9801      	ldr	r0, [sp, #4]
 8019146:	47a0      	blx	r4
 8019148:	2000      	movs	r0, #0
 801914a:	e024      	b.n	8019196 <GUI__ManageCacheEx+0xd2>
 801914c:	00b4      	lsls	r4, r6, #2
 801914e:	192b      	adds	r3, r5, r4
 8019150:	689b      	ldr	r3, [r3, #8]
 8019152:	2b01      	cmp	r3, #1
 8019154:	d001      	beq.n	801915a <GUI__ManageCacheEx+0x96>
 8019156:	2001      	movs	r0, #1
 8019158:	e015      	b.n	8019186 <GUI__ManageCacheEx+0xc2>
 801915a:	4630      	mov	r0, r6
 801915c:	f7f4 fee8 	bl	800df30 <GUI_DEVICE__GetpDriver>
 8019160:	9001      	str	r0, [sp, #4]
 8019162:	2800      	cmp	r0, #0
 8019164:	d0f7      	beq.n	8019156 <GUI__ManageCacheEx+0x92>
 8019166:	68c3      	ldr	r3, [r0, #12]
 8019168:	210d      	movs	r1, #13
 801916a:	a801      	add	r0, sp, #4
 801916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801916e:	4798      	blx	r3
 8019170:	4606      	mov	r6, r0
 8019172:	2800      	cmp	r0, #0
 8019174:	d0ef      	beq.n	8019156 <GUI__ManageCacheEx+0x92>
 8019176:	4b09      	ldr	r3, [pc, #36]	; (801919c <GUI__ManageCacheEx+0xd8>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	b103      	cbz	r3, 801917e <GUI__ManageCacheEx+0xba>
 801917c:	4798      	blx	r3
 801917e:	2100      	movs	r1, #0
 8019180:	9801      	ldr	r0, [sp, #4]
 8019182:	47b0      	blx	r6
 8019184:	2000      	movs	r0, #0
 8019186:	4425      	add	r5, r4
 8019188:	68ab      	ldr	r3, [r5, #8]
 801918a:	2b00      	cmp	r3, #0
 801918c:	bf18      	it	ne
 801918e:	3b01      	subne	r3, #1
 8019190:	60ab      	str	r3, [r5, #8]
 8019192:	e000      	b.n	8019196 <GUI__ManageCacheEx+0xd2>
 8019194:	2001      	movs	r0, #1
 8019196:	b003      	add	sp, #12
 8019198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801919a:	bf00      	nop
 801919c:	20000584 	.word	0x20000584

080191a0 <GUI__ManageCache>:
 80191a0:	4b02      	ldr	r3, [pc, #8]	; (80191ac <GUI__ManageCache+0xc>)
 80191a2:	4601      	mov	r1, r0
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	7c58      	ldrb	r0, [r3, #17]
 80191a8:	f7ff bf8c 	b.w	80190c4 <GUI__ManageCacheEx>
 80191ac:	20000018 	.word	0x20000018

080191b0 <LCD_AA_MixColors16>:
 80191b0:	0e0b      	lsrs	r3, r1, #24
 80191b2:	b510      	push	{r4, lr}
 80191b4:	4c0d      	ldr	r4, [pc, #52]	; (80191ec <LCD_AA_MixColors16+0x3c>)
 80191b6:	d110      	bne.n	80191da <LCD_AA_MixColors16+0x2a>
 80191b8:	0e03      	lsrs	r3, r0, #24
 80191ba:	2bff      	cmp	r3, #255	; 0xff
 80191bc:	d108      	bne.n	80191d0 <LCD_AA_MixColors16+0x20>
 80191be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80191c2:	6863      	ldr	r3, [r4, #4]
 80191c4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80191c8:	4303      	orrs	r3, r0
 80191ca:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
 80191ce:	bd10      	pop	{r4, pc}
 80191d0:	b91b      	cbnz	r3, 80191da <LCD_AA_MixColors16+0x2a>
 80191d2:	6862      	ldr	r2, [r4, #4]
 80191d4:	ea41 0002 	orr.w	r0, r1, r2
 80191d8:	bd10      	pop	{r4, pc}
 80191da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80191de:	4b04      	ldr	r3, [pc, #16]	; (80191f0 <LCD_AA_MixColors16+0x40>)
 80191e0:	b2d2      	uxtb	r2, r2
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	4798      	blx	r3
 80191e6:	6861      	ldr	r1, [r4, #4]
 80191e8:	4308      	orrs	r0, r1
 80191ea:	bd10      	pop	{r4, pc}
 80191ec:	20000124 	.word	0x20000124
 80191f0:	20000030 	.word	0x20000030

080191f4 <LCD_AA_SetOrMask>:
 80191f4:	4b02      	ldr	r3, [pc, #8]	; (8019200 <LCD_AA_SetOrMask+0xc>)
 80191f6:	685a      	ldr	r2, [r3, #4]
 80191f8:	6058      	str	r0, [r3, #4]
 80191fa:	4610      	mov	r0, r2
 80191fc:	4770      	bx	lr
 80191fe:	bf00      	nop
 8019200:	20000124 	.word	0x20000124

08019204 <LCD_SetClipRectEx>:
 8019204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019206:	4c09      	ldr	r4, [pc, #36]	; (801922c <LCD_SetClipRectEx+0x28>)
 8019208:	4605      	mov	r5, r0
 801920a:	4669      	mov	r1, sp
 801920c:	6823      	ldr	r3, [r4, #0]
 801920e:	7c5a      	ldrb	r2, [r3, #17]
 8019210:	4b07      	ldr	r3, [pc, #28]	; (8019230 <LCD_SetClipRectEx+0x2c>)
 8019212:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019216:	68c3      	ldr	r3, [r0, #12]
 8019218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801921a:	4798      	blx	r3
 801921c:	6820      	ldr	r0, [r4, #0]
 801921e:	466a      	mov	r2, sp
 8019220:	4629      	mov	r1, r5
 8019222:	3008      	adds	r0, #8
 8019224:	f7f5 fdf8 	bl	800ee18 <GUI__IntersectRects>
 8019228:	b003      	add	sp, #12
 801922a:	bd30      	pop	{r4, r5, pc}
 801922c:	20000018 	.word	0x20000018
 8019230:	2002260c 	.word	0x2002260c

08019234 <GUI_MEMDEV__WriteToActiveAt>:
 8019234:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019238:	460f      	mov	r7, r1
 801923a:	4690      	mov	r8, r2
 801923c:	4606      	mov	r6, r0
 801923e:	f7f4 f847 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019242:	6803      	ldr	r3, [r0, #0]
 8019244:	ac02      	add	r4, sp, #8
 8019246:	2116      	movs	r1, #22
 8019248:	68db      	ldr	r3, [r3, #12]
 801924a:	f844 0d04 	str.w	r0, [r4, #-4]!
 801924e:	2000      	movs	r0, #0
 8019250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019252:	4798      	blx	r3
 8019254:	4605      	mov	r5, r0
 8019256:	4620      	mov	r0, r4
 8019258:	f7f4 f848 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801925c:	b11d      	cbz	r5, 8019266 <GUI_MEMDEV__WriteToActiveAt+0x32>
 801925e:	4642      	mov	r2, r8
 8019260:	4639      	mov	r1, r7
 8019262:	4630      	mov	r0, r6
 8019264:	47a8      	blx	r5
 8019266:	b002      	add	sp, #8
 8019268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801926c <GUI_MEMDEV__CreateFixed>:
 801926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019270:	4d46      	ldr	r5, [pc, #280]	; (801938c <GUI_MEMDEV__CreateFixed+0x120>)
 8019272:	b087      	sub	sp, #28
 8019274:	461c      	mov	r4, r3
 8019276:	4681      	mov	r9, r0
 8019278:	682b      	ldr	r3, [r5, #0]
 801927a:	468a      	mov	sl, r1
 801927c:	4690      	mov	r8, r2
 801927e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019280:	7c5b      	ldrb	r3, [r3, #17]
 8019282:	2200      	movs	r2, #0
 8019284:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019286:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019288:	f7f4 fe64 	bl	800df54 <GUI_DEVICE_Create>
 801928c:	9503      	str	r5, [sp, #12]
 801928e:	4606      	mov	r6, r0
 8019290:	b380      	cbz	r0, 80192f4 <GUI_MEMDEV__CreateFixed+0x88>
 8019292:	6903      	ldr	r3, [r0, #16]
 8019294:	689b      	ldr	r3, [r3, #8]
 8019296:	4798      	blx	r3
 8019298:	f7f6 fb41 	bl	800f91e <LCD__GetBPPDevice>
 801929c:	fb00 f508 	mul.w	r5, r0, r8
 80192a0:	9002      	str	r0, [sp, #8]
 80192a2:	f7f4 f95d 	bl	800d560 <GUI_ALLOC_RequestSize>
 80192a6:	f017 0701 	ands.w	r7, r7, #1
 80192aa:	f105 0507 	add.w	r5, r5, #7
 80192ae:	bf08      	it	eq
 80192b0:	2304      	moveq	r3, #4
 80192b2:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 80192b6:	bf04      	itt	eq
 80192b8:	fb90 f0f3 	sdiveq	r0, r0, r3
 80192bc:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 80192c0:	2c00      	cmp	r4, #0
 80192c2:	dc44      	bgt.n	801934e <GUI_MEMDEV__CreateFixed+0xe2>
 80192c4:	b11d      	cbz	r5, 80192ce <GUI_MEMDEV__CreateFixed+0x62>
 80192c6:	3818      	subs	r0, #24
 80192c8:	fbb0 f0f5 	udiv	r0, r0, r5
 80192cc:	e000      	b.n	80192d0 <GUI_MEMDEV__CreateFixed+0x64>
 80192ce:	4628      	mov	r0, r5
 80192d0:	4264      	negs	r4, r4
 80192d2:	4284      	cmp	r4, r0
 80192d4:	bfa8      	it	ge
 80192d6:	4604      	movge	r4, r0
 80192d8:	b977      	cbnz	r7, 80192f8 <GUI_MEMDEV__CreateFixed+0x8c>
 80192da:	9700      	str	r7, [sp, #0]
 80192dc:	4623      	mov	r3, r4
 80192de:	4642      	mov	r2, r8
 80192e0:	4651      	mov	r1, sl
 80192e2:	4648      	mov	r0, r9
 80192e4:	f000 fc7e 	bl	8019be4 <GUI_USAGE_BM_Create>
 80192e8:	2c00      	cmp	r4, #0
 80192ea:	4683      	mov	fp, r0
 80192ec:	dc39      	bgt.n	8019362 <GUI_MEMDEV__CreateFixed+0xf6>
 80192ee:	4630      	mov	r0, r6
 80192f0:	f7f4 fe2e 	bl	800df50 <GUI_DEVICE_Delete>
 80192f4:	2000      	movs	r0, #0
 80192f6:	e046      	b.n	8019386 <GUI_MEMDEV__CreateFixed+0x11a>
 80192f8:	2c00      	cmp	r4, #0
 80192fa:	ddf8      	ble.n	80192ee <GUI_MEMDEV__CreateFixed+0x82>
 80192fc:	fb05 f004 	mul.w	r0, r5, r4
 8019300:	3018      	adds	r0, #24
 8019302:	f7f4 f9bf 	bl	800d684 <GUI_ALLOC_AllocNoInit>
 8019306:	4607      	mov	r7, r0
 8019308:	2800      	cmp	r0, #0
 801930a:	d0f0      	beq.n	80192ee <GUI_MEMDEV__CreateFixed+0x82>
 801930c:	f04f 0b00 	mov.w	fp, #0
 8019310:	4638      	mov	r0, r7
 8019312:	f7f3 ffdd 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019316:	9a02      	ldr	r2, [sp, #8]
 8019318:	4603      	mov	r3, r0
 801931a:	a806      	add	r0, sp, #24
 801931c:	f8a3 9004 	strh.w	r9, [r3, #4]
 8019320:	f840 3d04 	str.w	r3, [r0, #-4]!
 8019324:	f8a3 a006 	strh.w	sl, [r3, #6]
 8019328:	601e      	str	r6, [r3, #0]
 801932a:	f8a3 8008 	strh.w	r8, [r3, #8]
 801932e:	815c      	strh	r4, [r3, #10]
 8019330:	60dd      	str	r5, [r3, #12]
 8019332:	611a      	str	r2, [r3, #16]
 8019334:	f8c3 b014 	str.w	fp, [r3, #20]
 8019338:	f7f3 ffd8 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801933c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801933e:	60b7      	str	r7, [r6, #8]
 8019340:	6133      	str	r3, [r6, #16]
 8019342:	9b03      	ldr	r3, [sp, #12]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	7c5b      	ldrb	r3, [r3, #17]
 8019348:	61b3      	str	r3, [r6, #24]
 801934a:	4638      	mov	r0, r7
 801934c:	e01b      	b.n	8019386 <GUI_MEMDEV__CreateFixed+0x11a>
 801934e:	2f00      	cmp	r7, #0
 8019350:	d1d4      	bne.n	80192fc <GUI_MEMDEV__CreateFixed+0x90>
 8019352:	9700      	str	r7, [sp, #0]
 8019354:	4623      	mov	r3, r4
 8019356:	4642      	mov	r2, r8
 8019358:	4651      	mov	r1, sl
 801935a:	4648      	mov	r0, r9
 801935c:	f000 fc42 	bl	8019be4 <GUI_USAGE_BM_Create>
 8019360:	4683      	mov	fp, r0
 8019362:	fb05 f004 	mul.w	r0, r5, r4
 8019366:	3018      	adds	r0, #24
 8019368:	f7f4 f9a6 	bl	800d6b8 <GUI_ALLOC_AllocZero>
 801936c:	4607      	mov	r7, r0
 801936e:	2800      	cmp	r0, #0
 8019370:	d1ce      	bne.n	8019310 <GUI_MEMDEV__CreateFixed+0xa4>
 8019372:	4630      	mov	r0, r6
 8019374:	f7f4 fdec 	bl	800df50 <GUI_DEVICE_Delete>
 8019378:	f1bb 0f00 	cmp.w	fp, #0
 801937c:	d0ba      	beq.n	80192f4 <GUI_MEMDEV__CreateFixed+0x88>
 801937e:	4658      	mov	r0, fp
 8019380:	f7f3 ffe4 	bl	800d34c <GUI_ALLOC_Free>
 8019384:	e7e1      	b.n	801934a <GUI_MEMDEV__CreateFixed+0xde>
 8019386:	b007      	add	sp, #28
 8019388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801938c:	20000018 	.word	0x20000018

08019390 <GUI_MEMDEV_GetBitsPerPixel>:
 8019390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019392:	4604      	mov	r4, r0
 8019394:	b198      	cbz	r0, 80193be <GUI_MEMDEV_GetBitsPerPixel+0x2e>
 8019396:	f7f5 f8eb 	bl	800e570 <GUI_Lock>
 801939a:	4620      	mov	r0, r4
 801939c:	f7f3 ff98 	bl	800d2d0 <GUI_ALLOC_LockH>
 80193a0:	6803      	ldr	r3, [r0, #0]
 80193a2:	ad02      	add	r5, sp, #8
 80193a4:	691b      	ldr	r3, [r3, #16]
 80193a6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80193aa:	689b      	ldr	r3, [r3, #8]
 80193ac:	4798      	blx	r3
 80193ae:	f7f6 fab6 	bl	800f91e <LCD__GetBPPDevice>
 80193b2:	4604      	mov	r4, r0
 80193b4:	4628      	mov	r0, r5
 80193b6:	f7f3 ff99 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80193ba:	f7f5 f8cf 	bl	800e55c <GUI_Unlock>
 80193be:	4620      	mov	r0, r4
 80193c0:	b003      	add	sp, #12
 80193c2:	bd30      	pop	{r4, r5, pc}

080193c4 <GUI_MEMDEV_Delete>:
 80193c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80193c6:	4604      	mov	r4, r0
 80193c8:	b1f0      	cbz	r0, 8019408 <GUI_MEMDEV_Delete+0x44>
 80193ca:	f7f5 f8d1 	bl	800e570 <GUI_Lock>
 80193ce:	4b0f      	ldr	r3, [pc, #60]	; (801940c <GUI_MEMDEV_Delete+0x48>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80193d4:	429c      	cmp	r4, r3
 80193d6:	d101      	bne.n	80193dc <GUI_MEMDEV_Delete+0x18>
 80193d8:	f7f4 fb06 	bl	800d9e8 <GUI_SelectLCD>
 80193dc:	4620      	mov	r0, r4
 80193de:	f7f3 ff77 	bl	800d2d0 <GUI_ALLOC_LockH>
 80193e2:	9001      	str	r0, [sp, #4]
 80193e4:	6940      	ldr	r0, [r0, #20]
 80193e6:	b108      	cbz	r0, 80193ec <GUI_MEMDEV_Delete+0x28>
 80193e8:	f7f7 ffd8 	bl	801139c <GUI_USAGE_DecUseCnt>
 80193ec:	ad02      	add	r5, sp, #8
 80193ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80193f2:	6818      	ldr	r0, [r3, #0]
 80193f4:	f7f4 fdac 	bl	800df50 <GUI_DEVICE_Delete>
 80193f8:	4628      	mov	r0, r5
 80193fa:	f7f3 ff77 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80193fe:	4620      	mov	r0, r4
 8019400:	f7f3 ffa4 	bl	800d34c <GUI_ALLOC_Free>
 8019404:	f7f5 f8aa 	bl	800e55c <GUI_Unlock>
 8019408:	b003      	add	sp, #12
 801940a:	bd30      	pop	{r4, r5, pc}
 801940c:	20000018 	.word	0x20000018

08019410 <GUI_MEMDEV_CreateEx>:
 8019410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019414:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019416:	4607      	mov	r7, r0
 8019418:	469a      	mov	sl, r3
 801941a:	4688      	mov	r8, r1
 801941c:	4691      	mov	r9, r2
 801941e:	f7f5 f8a7 	bl	800e570 <GUI_Lock>
 8019422:	4b19      	ldr	r3, [pc, #100]	; (8019488 <GUI_MEMDEV_CreateEx+0x78>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	7c58      	ldrb	r0, [r3, #17]
 8019428:	4b18      	ldr	r3, [pc, #96]	; (801948c <GUI_MEMDEV_CreateEx+0x7c>)
 801942a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801942e:	68e3      	ldr	r3, [r4, #12]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	2b04      	cmp	r3, #4
 8019434:	d006      	beq.n	8019444 <GUI_MEMDEV_CreateEx+0x34>
 8019436:	6824      	ldr	r4, [r4, #0]
 8019438:	2c00      	cmp	r4, #0
 801943a:	d1f8      	bne.n	801942e <GUI_MEMDEV_CreateEx+0x1e>
 801943c:	f7f4 fd78 	bl	800df30 <GUI_DEVICE__GetpDriver>
 8019440:	4604      	mov	r4, r0
 8019442:	b1e0      	cbz	r0, 801947e <GUI_MEMDEV_CreateEx+0x6e>
 8019444:	68e3      	ldr	r3, [r4, #12]
 8019446:	2101      	movs	r1, #1
 8019448:	4620      	mov	r0, r4
 801944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801944c:	4798      	blx	r3
 801944e:	4606      	mov	r6, r0
 8019450:	b190      	cbz	r0, 8019478 <GUI_MEMDEV_CreateEx+0x68>
 8019452:	6924      	ldr	r4, [r4, #16]
 8019454:	68a3      	ldr	r3, [r4, #8]
 8019456:	4798      	blx	r3
 8019458:	3001      	adds	r0, #1
 801945a:	4653      	mov	r3, sl
 801945c:	464a      	mov	r2, r9
 801945e:	bf04      	itt	eq
 8019460:	4c0b      	ldreq	r4, [pc, #44]	; (8019490 <GUI_MEMDEV_CreateEx+0x80>)
 8019462:	f045 0501 	orreq.w	r5, r5, #1
 8019466:	4641      	mov	r1, r8
 8019468:	4638      	mov	r0, r7
 801946a:	9402      	str	r4, [sp, #8]
 801946c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8019470:	f7ff fefc 	bl	801926c <GUI_MEMDEV__CreateFixed>
 8019474:	4604      	mov	r4, r0
 8019476:	e000      	b.n	801947a <GUI_MEMDEV_CreateEx+0x6a>
 8019478:	4604      	mov	r4, r0
 801947a:	f7f5 f86f 	bl	800e55c <GUI_Unlock>
 801947e:	4620      	mov	r0, r4
 8019480:	b004      	add	sp, #16
 8019482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019486:	bf00      	nop
 8019488:	20000018 	.word	0x20000018
 801948c:	2002260c 	.word	0x2002260c
 8019490:	0801ba8c 	.word	0x0801ba8c

08019494 <GUI_MEMDEV_Select>:
 8019494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019496:	4606      	mov	r6, r0
 8019498:	f7f5 f86a 	bl	800e570 <GUI_Lock>
 801949c:	4b11      	ldr	r3, [pc, #68]	; (80194e4 <GUI_MEMDEV_Select+0x50>)
 801949e:	681a      	ldr	r2, [r3, #0]
 80194a0:	461c      	mov	r4, r3
 80194a2:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80194a4:	b916      	cbnz	r6, 80194ac <GUI_MEMDEV_Select+0x18>
 80194a6:	f7f4 fa9f 	bl	800d9e8 <GUI_SelectLCD>
 80194aa:	e016      	b.n	80194da <GUI_MEMDEV_Select+0x46>
 80194ac:	b10f      	cbz	r7, 80194b2 <GUI_MEMDEV_Select+0x1e>
 80194ae:	f7f4 fa9b 	bl	800d9e8 <GUI_SelectLCD>
 80194b2:	f7f9 fa67 	bl	8012984 <WM_Deactivate>
 80194b6:	4630      	mov	r0, r6
 80194b8:	f7f3 ff0a 	bl	800d2d0 <GUI_ALLOC_LockH>
 80194bc:	ad02      	add	r5, sp, #8
 80194be:	6823      	ldr	r3, [r4, #0]
 80194c0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80194c4:	661e      	str	r6, [r3, #96]	; 0x60
 80194c6:	6800      	ldr	r0, [r0, #0]
 80194c8:	f7f4 fd82 	bl	800dfd0 <GUI_DEVICE_Link>
 80194cc:	4628      	mov	r0, r5
 80194ce:	f7f3 ff0d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80194d2:	f7f6 fc29 	bl	800fd28 <LCD_UpdateColorIndices>
 80194d6:	f7f5 ffcd 	bl	800f474 <LCD_SetClipRectMax>
 80194da:	f7f5 f83f 	bl	800e55c <GUI_Unlock>
 80194de:	4638      	mov	r0, r7
 80194e0:	b003      	add	sp, #12
 80194e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194e4:	20000018 	.word	0x20000018

080194e8 <GUI_MEMDEV_CopyToLCDAt>:
 80194e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194ec:	460c      	mov	r4, r1
 80194ee:	b085      	sub	sp, #20
 80194f0:	4615      	mov	r5, r2
 80194f2:	4606      	mov	r6, r0
 80194f4:	2800      	cmp	r0, #0
 80194f6:	d047      	beq.n	8019588 <GUI_MEMDEV_CopyToLCDAt+0xa0>
 80194f8:	f7f5 f83a 	bl	800e570 <GUI_Lock>
 80194fc:	2000      	movs	r0, #0
 80194fe:	f7f4 fa96 	bl	800da2e <GUI_SetDrawMode>
 8019502:	4b23      	ldr	r3, [pc, #140]	; (8019590 <GUI_MEMDEV_CopyToLCDAt+0xa8>)
 8019504:	4607      	mov	r7, r0
 8019506:	4630      	mov	r0, r6
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 801950e:	f7f3 fedf 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019512:	6803      	ldr	r3, [r0, #0]
 8019514:	9001      	str	r0, [sp, #4]
 8019516:	6998      	ldr	r0, [r3, #24]
 8019518:	f7f4 ff86 	bl	800e428 <GUI_SelectLayer>
 801951c:	9a01      	ldr	r2, [sp, #4]
 801951e:	4b1d      	ldr	r3, [pc, #116]	; (8019594 <GUI_MEMDEV_CopyToLCDAt+0xac>)
 8019520:	4681      	mov	r9, r0
 8019522:	429c      	cmp	r4, r3
 8019524:	8913      	ldrh	r3, [r2, #8]
 8019526:	bf08      	it	eq
 8019528:	f9b2 4004 	ldrsheq.w	r4, [r2, #4]
 801952c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019530:	bf08      	it	eq
 8019532:	f9b2 5006 	ldrsheq.w	r5, [r2, #6]
 8019536:	4423      	add	r3, r4
 8019538:	f8ad 4008 	strh.w	r4, [sp, #8]
 801953c:	f8ad 500a 	strh.w	r5, [sp, #10]
 8019540:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019544:	8953      	ldrh	r3, [r2, #10]
 8019546:	3b01      	subs	r3, #1
 8019548:	442b      	add	r3, r5
 801954a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801954e:	f7f9 fa11 	bl	8012974 <WM_Activate>
 8019552:	a801      	add	r0, sp, #4
 8019554:	f7f3 feca 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019558:	a802      	add	r0, sp, #8
 801955a:	f7f9 f841 	bl	80125e0 <WM__InitIVRSearch>
 801955e:	b958      	cbnz	r0, 8019578 <GUI_MEMDEV_CopyToLCDAt+0x90>
 8019560:	4648      	mov	r0, r9
 8019562:	f7f4 ff61 	bl	800e428 <GUI_SelectLayer>
 8019566:	4640      	mov	r0, r8
 8019568:	f7ff ff94 	bl	8019494 <GUI_MEMDEV_Select>
 801956c:	4638      	mov	r0, r7
 801956e:	f7f4 fa5e 	bl	800da2e <GUI_SetDrawMode>
 8019572:	f7f4 fff3 	bl	800e55c <GUI_Unlock>
 8019576:	e007      	b.n	8019588 <GUI_MEMDEV_CopyToLCDAt+0xa0>
 8019578:	462a      	mov	r2, r5
 801957a:	4621      	mov	r1, r4
 801957c:	4630      	mov	r0, r6
 801957e:	f000 fbdf 	bl	8019d40 <GUI_MEMDEV__WriteToActiveOpaque>
 8019582:	f7f8 ff6b 	bl	801245c <WM__GetNextIVR>
 8019586:	e7ea      	b.n	801955e <GUI_MEMDEV_CopyToLCDAt+0x76>
 8019588:	b005      	add	sp, #20
 801958a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801958e:	bf00      	nop
 8019590:	20000018 	.word	0x20000018
 8019594:	fffff001 	.word	0xfffff001

08019598 <GUI_MEMDEV_CopyToLCD>:
 8019598:	4a01      	ldr	r2, [pc, #4]	; (80195a0 <GUI_MEMDEV_CopyToLCD+0x8>)
 801959a:	4611      	mov	r1, r2
 801959c:	f7ff bfa4 	b.w	80194e8 <GUI_MEMDEV_CopyToLCDAt>
 80195a0:	fffff001 	.word	0xfffff001

080195a4 <GUI_MEMDEV__SetAlphaCallback>:
 80195a4:	4b01      	ldr	r3, [pc, #4]	; (80195ac <GUI_MEMDEV__SetAlphaCallback+0x8>)
 80195a6:	6018      	str	r0, [r3, #0]
 80195a8:	4770      	bx	lr
 80195aa:	bf00      	nop
 80195ac:	2000059c 	.word	0x2000059c

080195b0 <GUI_MEMDEV_Draw>:
 80195b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b4:	b087      	sub	sp, #28
 80195b6:	4606      	mov	r6, r0
 80195b8:	4698      	mov	r8, r3
 80195ba:	9203      	str	r2, [sp, #12]
 80195bc:	9102      	str	r1, [sp, #8]
 80195be:	f7f4 ffd7 	bl	800e570 <GUI_Lock>
 80195c2:	4b54      	ldr	r3, [pc, #336]	; (8019714 <GUI_MEMDEV_Draw+0x164>)
 80195c4:	681a      	ldr	r2, [r3, #0]
 80195c6:	469b      	mov	fp, r3
 80195c8:	7c54      	ldrb	r4, [r2, #17]
 80195ca:	4a53      	ldr	r2, [pc, #332]	; (8019718 <GUI_MEMDEV_Draw+0x168>)
 80195cc:	4620      	mov	r0, r4
 80195ce:	5712      	ldrsb	r2, [r2, r4]
 80195d0:	2a01      	cmp	r2, #1
 80195d2:	dd06      	ble.n	80195e2 <GUI_MEMDEV_Draw+0x32>
 80195d4:	f7f6 f8e6 	bl	800f7a4 <LCD_GetXSizeEx>
 80195d8:	4681      	mov	r9, r0
 80195da:	4620      	mov	r0, r4
 80195dc:	f7f6 f8e5 	bl	800f7aa <LCD_GetYSizeEx>
 80195e0:	e005      	b.n	80195ee <GUI_MEMDEV_Draw+0x3e>
 80195e2:	f7f6 f8e5 	bl	800f7b0 <LCD_GetVXSizeEx>
 80195e6:	4681      	mov	r9, r0
 80195e8:	4620      	mov	r0, r4
 80195ea:	f7f6 f8e4 	bl	800f7b6 <LCD_GetVYSizeEx>
 80195ee:	4604      	mov	r4, r0
 80195f0:	b336      	cbz	r6, 8019640 <GUI_MEMDEV_Draw+0x90>
 80195f2:	a905      	add	r1, sp, #20
 80195f4:	a804      	add	r0, sp, #16
 80195f6:	f7f4 f8cd 	bl	800d794 <GUI_GetOrg>
 80195fa:	9a04      	ldr	r2, [sp, #16]
 80195fc:	9b05      	ldr	r3, [sp, #20]
 80195fe:	4491      	add	r9, r2
 8019600:	f9b6 7000 	ldrsh.w	r7, [r6]
 8019604:	441c      	add	r4, r3
 8019606:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 801960a:	f109 32ff 	add.w	r2, r9, #4294967295
 801960e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8019612:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019616:	f9b6 9004 	ldrsh.w	r9, [r6, #4]
 801961a:	3c01      	subs	r4, #1
 801961c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019620:	454a      	cmp	r2, r9
 8019622:	bfd4      	ite	le
 8019624:	ebc7 0902 	rsble	r9, r7, r2
 8019628:	ebc7 0909 	rsbgt	r9, r7, r9
 801962c:	429c      	cmp	r4, r3
 801962e:	bfd4      	ite	le
 8019630:	ebc5 0404 	rsble	r4, r5, r4
 8019634:	ebc5 0403 	rsbgt	r4, r5, r3
 8019638:	f109 0901 	add.w	r9, r9, #1
 801963c:	3401      	adds	r4, #1
 801963e:	e001      	b.n	8019644 <GUI_MEMDEV_Draw+0x94>
 8019640:	4635      	mov	r5, r6
 8019642:	4637      	mov	r7, r6
 8019644:	f1b8 0f00 	cmp.w	r8, #0
 8019648:	d101      	bne.n	801964e <GUI_MEMDEV_Draw+0x9e>
 801964a:	f1c4 0800 	rsb	r8, r4, #0
 801964e:	f1b9 0f00 	cmp.w	r9, #0
 8019652:	dd01      	ble.n	8019658 <GUI_MEMDEV_Draw+0xa8>
 8019654:	2c00      	cmp	r4, #0
 8019656:	dc03      	bgt.n	8019660 <GUI_MEMDEV_Draw+0xb0>
 8019658:	f7f4 ff80 	bl	800e55c <GUI_Unlock>
 801965c:	2000      	movs	r0, #0
 801965e:	e055      	b.n	801970c <GUI_MEMDEV_Draw+0x15c>
 8019660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019662:	464a      	mov	r2, r9
 8019664:	4629      	mov	r1, r5
 8019666:	4638      	mov	r0, r7
 8019668:	9300      	str	r3, [sp, #0]
 801966a:	4643      	mov	r3, r8
 801966c:	f7ff fed0 	bl	8019410 <GUI_MEMDEV_CreateEx>
 8019670:	4606      	mov	r6, r0
 8019672:	b930      	cbnz	r0, 8019682 <GUI_MEMDEV_Draw+0xd2>
 8019674:	9803      	ldr	r0, [sp, #12]
 8019676:	9b02      	ldr	r3, [sp, #8]
 8019678:	4798      	blx	r3
 801967a:	f7f4 ff6f 	bl	800e55c <GUI_Unlock>
 801967e:	2001      	movs	r0, #1
 8019680:	e044      	b.n	801970c <GUI_MEMDEV_Draw+0x15c>
 8019682:	f000 f8dd 	bl	8019840 <GUI_MEMDEV_GetYSize>
 8019686:	4284      	cmp	r4, r0
 8019688:	4680      	mov	r8, r0
 801968a:	d006      	beq.n	801969a <GUI_MEMDEV_Draw+0xea>
 801968c:	f8db 3000 	ldr.w	r3, [fp]
 8019690:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019692:	b110      	cbz	r0, 801969a <GUI_MEMDEV_Draw+0xea>
 8019694:	2132      	movs	r1, #50	; 0x32
 8019696:	f7fa fa86 	bl	8013ba6 <WM__SendMessageNoPara>
 801969a:	46a2      	mov	sl, r4
 801969c:	f04f 0900 	mov.w	r9, #0
 80196a0:	4630      	mov	r0, r6
 80196a2:	f7ff fef7 	bl	8019494 <GUI_MEMDEV_Select>
 80196a6:	45d0      	cmp	r8, sl
 80196a8:	dd03      	ble.n	80196b2 <GUI_MEMDEV_Draw+0x102>
 80196aa:	4651      	mov	r1, sl
 80196ac:	4630      	mov	r0, r6
 80196ae:	f000 f8e3 	bl	8019878 <GUI_MEMDEV_ReduceYSize>
 80196b2:	f1b9 0f00 	cmp.w	r9, #0
 80196b6:	d008      	beq.n	80196ca <GUI_MEMDEV_Draw+0x11a>
 80196b8:	4630      	mov	r0, r6
 80196ba:	eb05 0209 	add.w	r2, r5, r9
 80196be:	4639      	mov	r1, r7
 80196c0:	f000 f8f6 	bl	80198b0 <GUI_MEMDEV_SetOrg>
 80196c4:	4630      	mov	r0, r6
 80196c6:	f000 f82b 	bl	8019720 <GUI_MEMDEV_Clear>
 80196ca:	9b02      	ldr	r3, [sp, #8]
 80196cc:	9803      	ldr	r0, [sp, #12]
 80196ce:	4798      	blx	r3
 80196d0:	4b12      	ldr	r3, [pc, #72]	; (801971c <GUI_MEMDEV_Draw+0x16c>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	b10b      	cbz	r3, 80196da <GUI_MEMDEV_Draw+0x12a>
 80196d6:	20ff      	movs	r0, #255	; 0xff
 80196d8:	4798      	blx	r3
 80196da:	44c1      	add	r9, r8
 80196dc:	4630      	mov	r0, r6
 80196de:	f7ff ff5b 	bl	8019598 <GUI_MEMDEV_CopyToLCD>
 80196e2:	ebc8 0a0a 	rsb	sl, r8, sl
 80196e6:	454c      	cmp	r4, r9
 80196e8:	dcdd      	bgt.n	80196a6 <GUI_MEMDEV_Draw+0xf6>
 80196ea:	4630      	mov	r0, r6
 80196ec:	f7ff fe6a 	bl	80193c4 <GUI_MEMDEV_Delete>
 80196f0:	2000      	movs	r0, #0
 80196f2:	f7ff fecf 	bl	8019494 <GUI_MEMDEV_Select>
 80196f6:	4544      	cmp	r4, r8
 80196f8:	d0ae      	beq.n	8019658 <GUI_MEMDEV_Draw+0xa8>
 80196fa:	f8db 3000 	ldr.w	r3, [fp]
 80196fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019700:	2800      	cmp	r0, #0
 8019702:	d0a9      	beq.n	8019658 <GUI_MEMDEV_Draw+0xa8>
 8019704:	2133      	movs	r1, #51	; 0x33
 8019706:	f7fa fa4e 	bl	8013ba6 <WM__SendMessageNoPara>
 801970a:	e7a5      	b.n	8019658 <GUI_MEMDEV_Draw+0xa8>
 801970c:	b007      	add	sp, #28
 801970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019712:	bf00      	nop
 8019714:	20000018 	.word	0x20000018
 8019718:	200225bc 	.word	0x200225bc
 801971c:	2000059c 	.word	0x2000059c

08019720 <GUI_MEMDEV_Clear>:
 8019720:	b513      	push	{r0, r1, r4, lr}
 8019722:	4604      	mov	r4, r0
 8019724:	b918      	cbnz	r0, 801972e <GUI_MEMDEV_Clear+0xe>
 8019726:	4b10      	ldr	r3, [pc, #64]	; (8019768 <GUI_MEMDEV_Clear+0x48>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801972c:	b1d4      	cbz	r4, 8019764 <GUI_MEMDEV_Clear+0x44>
 801972e:	f7f4 ff1f 	bl	800e570 <GUI_Lock>
 8019732:	4620      	mov	r0, r4
 8019734:	f7f3 fdcc 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019738:	ab02      	add	r3, sp, #8
 801973a:	6944      	ldr	r4, [r0, #20]
 801973c:	f843 0d08 	str.w	r0, [r3, #-8]!
 8019740:	4618      	mov	r0, r3
 8019742:	f7f3 fdd3 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019746:	b15c      	cbz	r4, 8019760 <GUI_MEMDEV_Clear+0x40>
 8019748:	4620      	mov	r0, r4
 801974a:	ac02      	add	r4, sp, #8
 801974c:	f7f3 fdc0 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019750:	6883      	ldr	r3, [r0, #8]
 8019752:	f844 0d04 	str.w	r0, [r4, #-4]!
 8019756:	689b      	ldr	r3, [r3, #8]
 8019758:	4798      	blx	r3
 801975a:	4620      	mov	r0, r4
 801975c:	f7f3 fdc6 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019760:	f7f4 fefc 	bl	800e55c <GUI_Unlock>
 8019764:	b002      	add	sp, #8
 8019766:	bd10      	pop	{r4, pc}
 8019768:	20000018 	.word	0x20000018

0801976c <GUI_MEMDEV_GetDataPtr>:
 801976c:	b513      	push	{r0, r1, r4, lr}
 801976e:	4604      	mov	r4, r0
 8019770:	b170      	cbz	r0, 8019790 <GUI_MEMDEV_GetDataPtr+0x24>
 8019772:	f7f4 fefd 	bl	800e570 <GUI_Lock>
 8019776:	4620      	mov	r0, r4
 8019778:	f7f3 fdaa 	bl	800d2d0 <GUI_ALLOC_LockH>
 801977c:	ab02      	add	r3, sp, #8
 801977e:	f100 0418 	add.w	r4, r0, #24
 8019782:	f843 0d04 	str.w	r0, [r3, #-4]!
 8019786:	4618      	mov	r0, r3
 8019788:	f7f3 fdb0 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801978c:	f7f4 fee6 	bl	800e55c <GUI_Unlock>
 8019790:	4620      	mov	r0, r4
 8019792:	b002      	add	sp, #8
 8019794:	bd10      	pop	{r4, pc}
	...

08019798 <GUI_MEMDEV_GetXPos>:
 8019798:	b513      	push	{r0, r1, r4, lr}
 801979a:	4604      	mov	r4, r0
 801979c:	f7f4 fee8 	bl	800e570 <GUI_Lock>
 80197a0:	b91c      	cbnz	r4, 80197aa <GUI_MEMDEV_GetXPos+0x12>
 80197a2:	4b0a      	ldr	r3, [pc, #40]	; (80197cc <GUI_MEMDEV_GetXPos+0x34>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80197a8:	b154      	cbz	r4, 80197c0 <GUI_MEMDEV_GetXPos+0x28>
 80197aa:	4620      	mov	r0, r4
 80197ac:	f7f3 fd90 	bl	800d2d0 <GUI_ALLOC_LockH>
 80197b0:	ab02      	add	r3, sp, #8
 80197b2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80197b6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80197ba:	4618      	mov	r0, r3
 80197bc:	f7f3 fd96 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80197c0:	f7f4 fecc 	bl	800e55c <GUI_Unlock>
 80197c4:	4620      	mov	r0, r4
 80197c6:	b002      	add	sp, #8
 80197c8:	bd10      	pop	{r4, pc}
 80197ca:	bf00      	nop
 80197cc:	20000018 	.word	0x20000018

080197d0 <GUI_MEMDEV_GetYPos>:
 80197d0:	b513      	push	{r0, r1, r4, lr}
 80197d2:	4604      	mov	r4, r0
 80197d4:	f7f4 fecc 	bl	800e570 <GUI_Lock>
 80197d8:	b91c      	cbnz	r4, 80197e2 <GUI_MEMDEV_GetYPos+0x12>
 80197da:	4b0a      	ldr	r3, [pc, #40]	; (8019804 <GUI_MEMDEV_GetYPos+0x34>)
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80197e0:	b154      	cbz	r4, 80197f8 <GUI_MEMDEV_GetYPos+0x28>
 80197e2:	4620      	mov	r0, r4
 80197e4:	f7f3 fd74 	bl	800d2d0 <GUI_ALLOC_LockH>
 80197e8:	ab02      	add	r3, sp, #8
 80197ea:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 80197ee:	f843 0d04 	str.w	r0, [r3, #-4]!
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7f3 fd7a 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80197f8:	f7f4 feb0 	bl	800e55c <GUI_Unlock>
 80197fc:	4620      	mov	r0, r4
 80197fe:	b002      	add	sp, #8
 8019800:	bd10      	pop	{r4, pc}
 8019802:	bf00      	nop
 8019804:	20000018 	.word	0x20000018

08019808 <GUI_MEMDEV_GetXSize>:
 8019808:	b513      	push	{r0, r1, r4, lr}
 801980a:	4604      	mov	r4, r0
 801980c:	f7f4 feb0 	bl	800e570 <GUI_Lock>
 8019810:	b91c      	cbnz	r4, 801981a <GUI_MEMDEV_GetXSize+0x12>
 8019812:	4b0a      	ldr	r3, [pc, #40]	; (801983c <GUI_MEMDEV_GetXSize+0x34>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8019818:	b154      	cbz	r4, 8019830 <GUI_MEMDEV_GetXSize+0x28>
 801981a:	4620      	mov	r0, r4
 801981c:	f7f3 fd58 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019820:	ab02      	add	r3, sp, #8
 8019822:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8019826:	f843 0d04 	str.w	r0, [r3, #-4]!
 801982a:	4618      	mov	r0, r3
 801982c:	f7f3 fd5e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019830:	f7f4 fe94 	bl	800e55c <GUI_Unlock>
 8019834:	4620      	mov	r0, r4
 8019836:	b002      	add	sp, #8
 8019838:	bd10      	pop	{r4, pc}
 801983a:	bf00      	nop
 801983c:	20000018 	.word	0x20000018

08019840 <GUI_MEMDEV_GetYSize>:
 8019840:	b513      	push	{r0, r1, r4, lr}
 8019842:	4604      	mov	r4, r0
 8019844:	f7f4 fe94 	bl	800e570 <GUI_Lock>
 8019848:	b91c      	cbnz	r4, 8019852 <GUI_MEMDEV_GetYSize+0x12>
 801984a:	4b0a      	ldr	r3, [pc, #40]	; (8019874 <GUI_MEMDEV_GetYSize+0x34>)
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8019850:	b154      	cbz	r4, 8019868 <GUI_MEMDEV_GetYSize+0x28>
 8019852:	4620      	mov	r0, r4
 8019854:	f7f3 fd3c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019858:	ab02      	add	r3, sp, #8
 801985a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801985e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8019862:	4618      	mov	r0, r3
 8019864:	f7f3 fd42 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019868:	f7f4 fe78 	bl	800e55c <GUI_Unlock>
 801986c:	4620      	mov	r0, r4
 801986e:	b002      	add	sp, #8
 8019870:	bd10      	pop	{r4, pc}
 8019872:	bf00      	nop
 8019874:	20000018 	.word	0x20000018

08019878 <GUI_MEMDEV_ReduceYSize>:
 8019878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801987a:	460d      	mov	r5, r1
 801987c:	4604      	mov	r4, r0
 801987e:	b918      	cbnz	r0, 8019888 <GUI_MEMDEV_ReduceYSize+0x10>
 8019880:	4b0a      	ldr	r3, [pc, #40]	; (80198ac <GUI_MEMDEV_ReduceYSize+0x34>)
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8019886:	b17c      	cbz	r4, 80198a8 <GUI_MEMDEV_ReduceYSize+0x30>
 8019888:	f7f4 fe72 	bl	800e570 <GUI_Lock>
 801988c:	4620      	mov	r0, r4
 801988e:	f7f3 fd1f 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019892:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019896:	9001      	str	r0, [sp, #4]
 8019898:	42ab      	cmp	r3, r5
 801989a:	bfc8      	it	gt
 801989c:	8145      	strhgt	r5, [r0, #10]
 801989e:	a801      	add	r0, sp, #4
 80198a0:	f7f3 fd24 	bl	800d2ec <GUI_ALLOC_UnlockH>
 80198a4:	f7f4 fe5a 	bl	800e55c <GUI_Unlock>
 80198a8:	b003      	add	sp, #12
 80198aa:	bd30      	pop	{r4, r5, pc}
 80198ac:	20000018 	.word	0x20000018

080198b0 <GUI_MEMDEV_SetOrg>:
 80198b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80198b2:	460d      	mov	r5, r1
 80198b4:	4614      	mov	r4, r2
 80198b6:	4606      	mov	r6, r0
 80198b8:	b918      	cbnz	r0, 80198c2 <GUI_MEMDEV_SetOrg+0x12>
 80198ba:	4b15      	ldr	r3, [pc, #84]	; (8019910 <GUI_MEMDEV_SetOrg+0x60>)
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80198c0:	b326      	cbz	r6, 801990c <GUI_MEMDEV_SetOrg+0x5c>
 80198c2:	b224      	sxth	r4, r4
 80198c4:	b22d      	sxth	r5, r5
 80198c6:	f7f4 fe53 	bl	800e570 <GUI_Lock>
 80198ca:	4630      	mov	r0, r6
 80198cc:	f7f3 fd00 	bl	800d2d0 <GUI_ALLOC_LockH>
 80198d0:	80c4      	strh	r4, [r0, #6]
 80198d2:	8085      	strh	r5, [r0, #4]
 80198d4:	9000      	str	r0, [sp, #0]
 80198d6:	f7f5 fdcd 	bl	800f474 <LCD_SetClipRectMax>
 80198da:	9b00      	ldr	r3, [sp, #0]
 80198dc:	6958      	ldr	r0, [r3, #20]
 80198de:	b180      	cbz	r0, 8019902 <GUI_MEMDEV_SetOrg+0x52>
 80198e0:	f7f3 fcf6 	bl	800d2d0 <GUI_ALLOC_LockH>
 80198e4:	9b00      	ldr	r3, [sp, #0]
 80198e6:	9001      	str	r0, [sp, #4]
 80198e8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80198ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80198f0:	8082      	strh	r2, [r0, #4]
 80198f2:	80c3      	strh	r3, [r0, #6]
 80198f4:	b112      	cbz	r2, 80198fc <GUI_MEMDEV_SetOrg+0x4c>
 80198f6:	b10b      	cbz	r3, 80198fc <GUI_MEMDEV_SetOrg+0x4c>
 80198f8:	8005      	strh	r5, [r0, #0]
 80198fa:	8044      	strh	r4, [r0, #2]
 80198fc:	a801      	add	r0, sp, #4
 80198fe:	f7f3 fcf5 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019902:	4668      	mov	r0, sp
 8019904:	f7f3 fcf2 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019908:	f7f4 fe28 	bl	800e55c <GUI_Unlock>
 801990c:	b002      	add	sp, #8
 801990e:	bd70      	pop	{r4, r5, r6, pc}
 8019910:	20000018 	.word	0x20000018

08019914 <_CreateStaticDevice>:
 8019914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019918:	b087      	sub	sp, #28
 801991a:	4607      	mov	r7, r0
 801991c:	f7f3 fcd8 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019920:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019924:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8019928:	f10d 0818 	add.w	r8, sp, #24
 801992c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8019930:	ebc9 0606 	rsb	r6, r9, r6
 8019934:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8019938:	f848 0d04 	str.w	r0, [r8, #-4]!
 801993c:	3601      	adds	r6, #1
 801993e:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8019942:	4640      	mov	r0, r8
 8019944:	ebc5 040b 	rsb	r4, r5, fp
 8019948:	f7f3 fcd0 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801994c:	2e00      	cmp	r6, #0
 801994e:	f104 0401 	add.w	r4, r4, #1
 8019952:	dd4c      	ble.n	80199ee <_CreateStaticDevice+0xda>
 8019954:	2c00      	cmp	r4, #0
 8019956:	dd4a      	ble.n	80199ee <_CreateStaticDevice+0xda>
 8019958:	f1ba 0f00 	cmp.w	sl, #0
 801995c:	d049      	beq.n	80199f2 <_CreateStaticDevice+0xde>
 801995e:	4650      	mov	r0, sl
 8019960:	f7f3 fcb6 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019964:	ab06      	add	r3, sp, #24
 8019966:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801996a:	f843 0d08 	str.w	r0, [r3, #-8]!
 801996e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8019972:	4618      	mov	r0, r3
 8019974:	f7f3 fcba 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019978:	454e      	cmp	r6, r9
 801997a:	d101      	bne.n	8019980 <_CreateStaticDevice+0x6c>
 801997c:	42ac      	cmp	r4, r5
 801997e:	d031      	beq.n	80199e4 <_CreateStaticDevice+0xd0>
 8019980:	462a      	mov	r2, r5
 8019982:	4649      	mov	r1, r9
 8019984:	4650      	mov	r0, sl
 8019986:	f7ff ff93 	bl	80198b0 <GUI_MEMDEV_SetOrg>
 801998a:	e02b      	b.n	80199e4 <_CreateStaticDevice+0xd0>
 801998c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801998e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019992:	6283      	str	r3, [r0, #40]	; 0x28
 8019994:	4640      	mov	r0, r8
 8019996:	f7f3 fca9 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801999a:	4628      	mov	r0, r5
 801999c:	f7ff fd7a 	bl	8019494 <GUI_MEMDEV_Select>
 80199a0:	4680      	mov	r8, r0
 80199a2:	4650      	mov	r0, sl
 80199a4:	f7ff f83c 	bl	8018a20 <GUI__AlphaPreserveTrans>
 80199a8:	4628      	mov	r0, r5
 80199aa:	f7ff fedf 	bl	801976c <GUI_MEMDEV_GetDataPtr>
 80199ae:	fb04 f206 	mul.w	r2, r4, r6
 80199b2:	4b2b      	ldr	r3, [pc, #172]	; (8019a60 <_CreateStaticDevice+0x14c>)
 80199b4:	492b      	ldr	r1, [pc, #172]	; (8019a64 <_CreateStaticDevice+0x150>)
 80199b6:	0092      	lsls	r2, r2, #2
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	7809      	ldrb	r1, [r1, #0]
 80199bc:	4c2a      	ldr	r4, [pc, #168]	; (8019a68 <_CreateStaticDevice+0x154>)
 80199be:	4798      	blx	r3
 80199c0:	4d2a      	ldr	r5, [pc, #168]	; (8019a6c <_CreateStaticDevice+0x158>)
 80199c2:	4638      	mov	r0, r7
 80199c4:	6826      	ldr	r6, [r4, #0]
 80199c6:	602f      	str	r7, [r5, #0]
 80199c8:	f7f9 f9a0 	bl	8012d0c <WM_GetWindowOrgX>
 80199cc:	6020      	str	r0, [r4, #0]
 80199ce:	4638      	mov	r0, r7
 80199d0:	f7f8 fe90 	bl	80126f4 <WM__Paint1>
 80199d4:	2000      	movs	r0, #0
 80199d6:	6026      	str	r6, [r4, #0]
 80199d8:	6028      	str	r0, [r5, #0]
 80199da:	f7ff f821 	bl	8018a20 <GUI__AlphaPreserveTrans>
 80199de:	4640      	mov	r0, r8
 80199e0:	f7ff fd58 	bl	8019494 <GUI_MEMDEV_Select>
 80199e4:	4638      	mov	r0, r7
 80199e6:	f7f3 fc69 	bl	800d2bc <GUI_ALLOC_h2p>
 80199ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80199ec:	e035      	b.n	8019a5a <_CreateStaticDevice+0x146>
 80199ee:	2000      	movs	r0, #0
 80199f0:	e033      	b.n	8019a5a <_CreateStaticDevice+0x146>
 80199f2:	f7f9 f8e7 	bl	8012bc4 <WM_GetDesktopWindow>
 80199f6:	4287      	cmp	r7, r0
 80199f8:	d112      	bne.n	8019a20 <_CreateStaticDevice+0x10c>
 80199fa:	f7f5 feef 	bl	800f7dc <LCD_GetXSize>
 80199fe:	4682      	mov	sl, r0
 8019a00:	f7f5 fef4 	bl	800f7ec <LCD_GetYSize>
 8019a04:	4556      	cmp	r6, sl
 8019a06:	dc02      	bgt.n	8019a0e <_CreateStaticDevice+0xfa>
 8019a08:	4284      	cmp	r4, r0
 8019a0a:	dd09      	ble.n	8019a20 <_CreateStaticDevice+0x10c>
 8019a0c:	e000      	b.n	8019a10 <_CreateStaticDevice+0xfc>
 8019a0e:	4656      	mov	r6, sl
 8019a10:	4284      	cmp	r4, r0
 8019a12:	4631      	mov	r1, r6
 8019a14:	bfa8      	it	ge
 8019a16:	4604      	movge	r4, r0
 8019a18:	4638      	mov	r0, r7
 8019a1a:	4622      	mov	r2, r4
 8019a1c:	f7f9 fbe6 	bl	80131ec <WM_SetSize>
 8019a20:	4b13      	ldr	r3, [pc, #76]	; (8019a70 <_CreateStaticDevice+0x15c>)
 8019a22:	f04f 0a01 	mov.w	sl, #1
 8019a26:	4629      	mov	r1, r5
 8019a28:	4632      	mov	r2, r6
 8019a2a:	9302      	str	r3, [sp, #8]
 8019a2c:	4648      	mov	r0, r9
 8019a2e:	4b11      	ldr	r3, [pc, #68]	; (8019a74 <_CreateStaticDevice+0x160>)
 8019a30:	f8cd a000 	str.w	sl, [sp]
 8019a34:	9301      	str	r3, [sp, #4]
 8019a36:	4623      	mov	r3, r4
 8019a38:	f7ff fc18 	bl	801926c <GUI_MEMDEV__CreateFixed>
 8019a3c:	4605      	mov	r5, r0
 8019a3e:	4638      	mov	r0, r7
 8019a40:	f7f3 fc46 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019a44:	9005      	str	r0, [sp, #20]
 8019a46:	6245      	str	r5, [r0, #36]	; 0x24
 8019a48:	2d00      	cmp	r5, #0
 8019a4a:	d19f      	bne.n	801998c <_CreateStaticDevice+0x78>
 8019a4c:	4640      	mov	r0, r8
 8019a4e:	f7f3 fc4d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019a52:	4638      	mov	r0, r7
 8019a54:	f7f8 fe4e 	bl	80126f4 <WM__Paint1>
 8019a58:	4628      	mov	r0, r5
 8019a5a:	b007      	add	sp, #28
 8019a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a60:	2000003c 	.word	0x2000003c
 8019a64:	200005a0 	.word	0x200005a0
 8019a68:	200225cc 	.word	0x200225cc
 8019a6c:	2002267c 	.word	0x2002267c
 8019a70:	0801ba8c 	.word	0x0801ba8c
 8019a74:	0801c248 	.word	0x0801c248

08019a78 <GUI_MEMDEV_Paint1Static>:
 8019a78:	b538      	push	{r3, r4, r5, lr}
 8019a7a:	4605      	mov	r5, r0
 8019a7c:	2405      	movs	r4, #5
 8019a7e:	4628      	mov	r0, r5
 8019a80:	f7ff ff48 	bl	8019914 <_CreateStaticDevice>
 8019a84:	b910      	cbnz	r0, 8019a8c <GUI_MEMDEV_Paint1Static+0x14>
 8019a86:	3c01      	subs	r4, #1
 8019a88:	d1f9      	bne.n	8019a7e <GUI_MEMDEV_Paint1Static+0x6>
 8019a8a:	bd38      	pop	{r3, r4, r5, pc}
 8019a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a90:	f000 b910 	b.w	8019cb4 <GUI_MEMDEV_Write>

08019a94 <GUI_USAGE_BM_AddPixel>:
 8019a94:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019a98:	1ac9      	subs	r1, r1, r3
 8019a9a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019a9e:	1ad2      	subs	r2, r2, r3
 8019aa0:	6903      	ldr	r3, [r0, #16]
 8019aa2:	435a      	muls	r2, r3
 8019aa4:	2380      	movs	r3, #128	; 0x80
 8019aa6:	3214      	adds	r2, #20
 8019aa8:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 8019aac:	f001 0107 	and.w	r1, r1, #7
 8019ab0:	fa43 f101 	asr.w	r1, r3, r1
 8019ab4:	5c83      	ldrb	r3, [r0, r2]
 8019ab6:	4319      	orrs	r1, r3
 8019ab8:	5481      	strb	r1, [r0, r2]
 8019aba:	4770      	bx	lr

08019abc <GUI_USAGE_BM_GetNextDirty>:
 8019abc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019ac0:	4293      	cmp	r3, r2
 8019ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ac4:	dd44      	ble.n	8019b50 <GUI_USAGE_BM_GetNextDirty+0x94>
 8019ac6:	680c      	ldr	r4, [r1, #0]
 8019ac8:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8019acc:	42b4      	cmp	r4, r6
 8019ace:	da3f      	bge.n	8019b50 <GUI_USAGE_BM_GetNextDirty+0x94>
 8019ad0:	10e3      	asrs	r3, r4, #3
 8019ad2:	6907      	ldr	r7, [r0, #16]
 8019ad4:	461d      	mov	r5, r3
 8019ad6:	fb07 3202 	mla	r2, r7, r2, r3
 8019ada:	1e73      	subs	r3, r6, #1
 8019adc:	ebc5 03e3 	rsb	r3, r5, r3, asr #3
 8019ae0:	f102 0515 	add.w	r5, r2, #21
 8019ae4:	3214      	adds	r2, #20
 8019ae6:	4405      	add	r5, r0
 8019ae8:	5c82      	ldrb	r2, [r0, r2]
 8019aea:	f004 0007 	and.w	r0, r4, #7
 8019aee:	4082      	lsls	r2, r0
 8019af0:	b2d2      	uxtb	r2, r2
 8019af2:	b93a      	cbnz	r2, 8019b04 <GUI_USAGE_BM_GetNextDirty+0x48>
 8019af4:	b373      	cbz	r3, 8019b54 <GUI_USAGE_BM_GetNextDirty+0x98>
 8019af6:	3408      	adds	r4, #8
 8019af8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019afc:	3b01      	subs	r3, #1
 8019afe:	f024 0407 	bic.w	r4, r4, #7
 8019b02:	e7f6      	b.n	8019af2 <GUI_USAGE_BM_GetNextDirty+0x36>
 8019b04:	0617      	lsls	r7, r2, #24
 8019b06:	d403      	bmi.n	8019b10 <GUI_USAGE_BM_GetNextDirty+0x54>
 8019b08:	0052      	lsls	r2, r2, #1
 8019b0a:	3401      	adds	r4, #1
 8019b0c:	b2d2      	uxtb	r2, r2
 8019b0e:	e7f9      	b.n	8019b04 <GUI_USAGE_BM_GetNextDirty+0x48>
 8019b10:	2aff      	cmp	r2, #255	; 0xff
 8019b12:	d006      	beq.n	8019b22 <GUI_USAGE_BM_GetNextDirty+0x66>
 8019b14:	4620      	mov	r0, r4
 8019b16:	0656      	lsls	r6, r2, #25
 8019b18:	d504      	bpl.n	8019b24 <GUI_USAGE_BM_GetNextDirty+0x68>
 8019b1a:	0052      	lsls	r2, r2, #1
 8019b1c:	3001      	adds	r0, #1
 8019b1e:	b2d2      	uxtb	r2, r2
 8019b20:	e7f9      	b.n	8019b16 <GUI_USAGE_BM_GetNextDirty+0x5a>
 8019b22:	1de0      	adds	r0, r4, #7
 8019b24:	f000 0207 	and.w	r2, r0, #7
 8019b28:	2a07      	cmp	r2, #7
 8019b2a:	d10d      	bne.n	8019b48 <GUI_USAGE_BM_GetNextDirty+0x8c>
 8019b2c:	3b01      	subs	r3, #1
 8019b2e:	d40b      	bmi.n	8019b48 <GUI_USAGE_BM_GetNextDirty+0x8c>
 8019b30:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019b34:	2aff      	cmp	r2, #255	; 0xff
 8019b36:	d101      	bne.n	8019b3c <GUI_USAGE_BM_GetNextDirty+0x80>
 8019b38:	3008      	adds	r0, #8
 8019b3a:	e7f7      	b.n	8019b2c <GUI_USAGE_BM_GetNextDirty+0x70>
 8019b3c:	0613      	lsls	r3, r2, #24
 8019b3e:	d503      	bpl.n	8019b48 <GUI_USAGE_BM_GetNextDirty+0x8c>
 8019b40:	0052      	lsls	r2, r2, #1
 8019b42:	3001      	adds	r0, #1
 8019b44:	b2d2      	uxtb	r2, r2
 8019b46:	e7f9      	b.n	8019b3c <GUI_USAGE_BM_GetNextDirty+0x80>
 8019b48:	1b00      	subs	r0, r0, r4
 8019b4a:	600c      	str	r4, [r1, #0]
 8019b4c:	3001      	adds	r0, #1
 8019b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b50:	2000      	movs	r0, #0
 8019b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b54:	4618      	mov	r0, r3
 8019b56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b58 <_GUI_USAGE_BM_Delete>:
 8019b58:	f7f3 bbf8 	b.w	800d34c <GUI_ALLOC_Free>

08019b5c <GUI_USAGE_BM_Clear>:
 8019b5c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019b60:	2100      	movs	r1, #0
 8019b62:	6902      	ldr	r2, [r0, #16]
 8019b64:	3014      	adds	r0, #20
 8019b66:	435a      	muls	r2, r3
 8019b68:	f001 be95 	b.w	801b896 <memset>

08019b6c <GUI_USAGE_BM_AddHLine>:
 8019b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b6e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019b72:	1b09      	subs	r1, r1, r4
 8019b74:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019b78:	42a1      	cmp	r1, r4
 8019b7a:	da32      	bge.n	8019be2 <GUI_USAGE_BM_AddHLine+0x76>
 8019b7c:	440b      	add	r3, r1
 8019b7e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8019b82:	10ce      	asrs	r6, r1, #3
 8019b84:	f001 0407 	and.w	r4, r1, #7
 8019b88:	3b01      	subs	r3, #1
 8019b8a:	1b52      	subs	r2, r2, r5
 8019b8c:	6905      	ldr	r5, [r0, #16]
 8019b8e:	21ff      	movs	r1, #255	; 0xff
 8019b90:	43df      	mvns	r7, r3
 8019b92:	fb05 6502 	mla	r5, r5, r2, r6
 8019b96:	fa41 f404 	asr.w	r4, r1, r4
 8019b9a:	f007 0707 	and.w	r7, r7, #7
 8019b9e:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 8019ba2:	f105 0514 	add.w	r5, r5, #20
 8019ba6:	b2e4      	uxtb	r4, r4
 8019ba8:	fa01 f707 	lsl.w	r7, r1, r7
 8019bac:	eb00 0205 	add.w	r2, r0, r5
 8019bb0:	f810 e005 	ldrb.w	lr, [r0, r5]
 8019bb4:	b2ff      	uxtb	r7, r7
 8019bb6:	d104      	bne.n	8019bc2 <GUI_USAGE_BM_AddHLine+0x56>
 8019bb8:	403c      	ands	r4, r7
 8019bba:	ea4e 0404 	orr.w	r4, lr, r4
 8019bbe:	5544      	strb	r4, [r0, r5]
 8019bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bc2:	ea44 040e 	orr.w	r4, r4, lr
 8019bc6:	1c53      	adds	r3, r2, #1
 8019bc8:	5544      	strb	r4, [r0, r5]
 8019bca:	1e75      	subs	r5, r6, #1
 8019bcc:	2d00      	cmp	r5, #0
 8019bce:	dd05      	ble.n	8019bdc <GUI_USAGE_BM_AddHLine+0x70>
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	462a      	mov	r2, r5
 8019bd4:	f001 fe5f 	bl	801b896 <memset>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	442b      	add	r3, r5
 8019bdc:	781c      	ldrb	r4, [r3, #0]
 8019bde:	433c      	orrs	r4, r7
 8019be0:	701c      	strb	r4, [r3, #0]
 8019be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019be4 <GUI_USAGE_BM_Create>:
 8019be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019be8:	f102 040f 	add.w	r4, r2, #15
 8019bec:	4681      	mov	r9, r0
 8019bee:	4688      	mov	r8, r1
 8019bf0:	4617      	mov	r7, r2
 8019bf2:	1124      	asrs	r4, r4, #4
 8019bf4:	461e      	mov	r6, r3
 8019bf6:	0064      	lsls	r4, r4, #1
 8019bf8:	fb03 f004 	mul.w	r0, r3, r4
 8019bfc:	3014      	adds	r0, #20
 8019bfe:	f7f3 fd5b 	bl	800d6b8 <GUI_ALLOC_AllocZero>
 8019c02:	4605      	mov	r5, r0
 8019c04:	b1b8      	cbz	r0, 8019c36 <GUI_USAGE_BM_Create+0x52>
 8019c06:	f7f4 fcb3 	bl	800e570 <GUI_Lock>
 8019c0a:	4628      	mov	r0, r5
 8019c0c:	f7f3 fb60 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019c10:	4a0b      	ldr	r2, [pc, #44]	; (8019c40 <GUI_USAGE_BM_Create+0x5c>)
 8019c12:	4603      	mov	r3, r0
 8019c14:	a802      	add	r0, sp, #8
 8019c16:	609a      	str	r2, [r3, #8]
 8019c18:	2201      	movs	r2, #1
 8019c1a:	f840 3d04 	str.w	r3, [r0, #-4]!
 8019c1e:	809f      	strh	r7, [r3, #4]
 8019c20:	f8a3 9000 	strh.w	r9, [r3]
 8019c24:	f8a3 8002 	strh.w	r8, [r3, #2]
 8019c28:	80de      	strh	r6, [r3, #6]
 8019c2a:	819a      	strh	r2, [r3, #12]
 8019c2c:	611c      	str	r4, [r3, #16]
 8019c2e:	f7f3 fb5d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019c32:	f7f4 fc93 	bl	800e55c <GUI_Unlock>
 8019c36:	4628      	mov	r0, r5
 8019c38:	b003      	add	sp, #12
 8019c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c3e:	bf00      	nop
 8019c40:	0801e9a8 	.word	0x0801e9a8

08019c44 <GUI_MEMDEV_WriteAt>:
 8019c44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019c46:	460c      	mov	r4, r1
 8019c48:	4615      	mov	r5, r2
 8019c4a:	4606      	mov	r6, r0
 8019c4c:	b370      	cbz	r0, 8019cac <GUI_MEMDEV_WriteAt+0x68>
 8019c4e:	f7f4 fc8f 	bl	800e570 <GUI_Lock>
 8019c52:	4630      	mov	r0, r6
 8019c54:	f7f3 fb3c 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019c58:	4b15      	ldr	r3, [pc, #84]	; (8019cb0 <GUI_MEMDEV_WriteAt+0x6c>)
 8019c5a:	9001      	str	r0, [sp, #4]
 8019c5c:	429c      	cmp	r4, r3
 8019c5e:	8903      	ldrh	r3, [r0, #8]
 8019c60:	bf08      	it	eq
 8019c62:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8019c66:	f103 33ff 	add.w	r3, r3, #4294967295
 8019c6a:	bf08      	it	eq
 8019c6c:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8019c70:	4423      	add	r3, r4
 8019c72:	f8ad 4008 	strh.w	r4, [sp, #8]
 8019c76:	f8ad 500a 	strh.w	r5, [sp, #10]
 8019c7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019c7e:	8943      	ldrh	r3, [r0, #10]
 8019c80:	a801      	add	r0, sp, #4
 8019c82:	3b01      	subs	r3, #1
 8019c84:	442b      	add	r3, r5
 8019c86:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019c8a:	f7f3 fb2f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019c8e:	a802      	add	r0, sp, #8
 8019c90:	f7f8 fca6 	bl	80125e0 <WM__InitIVRSearch>
 8019c94:	b910      	cbnz	r0, 8019c9c <GUI_MEMDEV_WriteAt+0x58>
 8019c96:	f7f4 fc61 	bl	800e55c <GUI_Unlock>
 8019c9a:	e007      	b.n	8019cac <GUI_MEMDEV_WriteAt+0x68>
 8019c9c:	462a      	mov	r2, r5
 8019c9e:	4621      	mov	r1, r4
 8019ca0:	4630      	mov	r0, r6
 8019ca2:	f7ff fac7 	bl	8019234 <GUI_MEMDEV__WriteToActiveAt>
 8019ca6:	f7f8 fbd9 	bl	801245c <WM__GetNextIVR>
 8019caa:	e7f3      	b.n	8019c94 <GUI_MEMDEV_WriteAt+0x50>
 8019cac:	b004      	add	sp, #16
 8019cae:	bd70      	pop	{r4, r5, r6, pc}
 8019cb0:	fffff001 	.word	0xfffff001

08019cb4 <GUI_MEMDEV_Write>:
 8019cb4:	4a01      	ldr	r2, [pc, #4]	; (8019cbc <GUI_MEMDEV_Write+0x8>)
 8019cb6:	4611      	mov	r1, r2
 8019cb8:	f7ff bfc4 	b.w	8019c44 <GUI_MEMDEV_WriteAt>
 8019cbc:	fffff001 	.word	0xfffff001

08019cc0 <_Convert16>:
 8019cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8019cc8:	4681      	mov	r9, r0
 8019cca:	460d      	mov	r5, r1
 8019ccc:	4616      	mov	r6, r2
 8019cce:	461f      	mov	r7, r3
 8019cd0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8019cd4:	4614      	mov	r4, r2
 8019cd6:	4688      	mov	r8, r1
 8019cd8:	f839 0b02 	ldrh.w	r0, [r9], #2
 8019cdc:	47d8      	blx	fp
 8019cde:	47d0      	blx	sl
 8019ce0:	3c01      	subs	r4, #1
 8019ce2:	f848 0b04 	str.w	r0, [r8], #4
 8019ce6:	d1f7      	bne.n	8019cd8 <_Convert16+0x18>
 8019ce8:	2f1f      	cmp	r7, #31
 8019cea:	d806      	bhi.n	8019cfa <_Convert16+0x3a>
 8019cec:	463a      	mov	r2, r7
 8019cee:	4631      	mov	r1, r6
 8019cf0:	4628      	mov	r0, r5
 8019cf2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cf6:	f7ff b85c 	b.w	8018db2 <GUI__CompactPixelIndices>
 8019cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019cfe <_Convert8>:
 8019cfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d02:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8019d06:	4680      	mov	r8, r0
 8019d08:	460d      	mov	r5, r1
 8019d0a:	4616      	mov	r6, r2
 8019d0c:	461f      	mov	r7, r3
 8019d0e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8019d12:	4689      	mov	r9, r1
 8019d14:	4604      	mov	r4, r0
 8019d16:	f814 0b01 	ldrb.w	r0, [r4], #1
 8019d1a:	47d8      	blx	fp
 8019d1c:	47d0      	blx	sl
 8019d1e:	1b33      	subs	r3, r6, r4
 8019d20:	f849 0b04 	str.w	r0, [r9], #4
 8019d24:	eb18 0f03 	cmn.w	r8, r3
 8019d28:	d1f5      	bne.n	8019d16 <_Convert8+0x18>
 8019d2a:	2f1f      	cmp	r7, #31
 8019d2c:	d806      	bhi.n	8019d3c <_Convert8+0x3e>
 8019d2e:	463a      	mov	r2, r7
 8019d30:	4631      	mov	r1, r6
 8019d32:	4628      	mov	r0, r5
 8019d34:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d38:	f7ff b83b 	b.w	8018db2 <GUI__CompactPixelIndices>
 8019d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d40 <GUI_MEMDEV__WriteToActiveOpaque>:
 8019d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d44:	b09b      	sub	sp, #108	; 0x6c
 8019d46:	4605      	mov	r5, r0
 8019d48:	9108      	str	r1, [sp, #32]
 8019d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8019d4c:	2800      	cmp	r0, #0
 8019d4e:	f000 8399 	beq.w	801a484 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8019d52:	f7f3 fabd 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019d56:	ab1a      	add	r3, sp, #104	; 0x68
 8019d58:	6944      	ldr	r4, [r0, #20]
 8019d5a:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f7f3 fac4 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019d64:	4628      	mov	r0, r5
 8019d66:	f7ff fb13 	bl	8019390 <GUI_MEMDEV_GetBitsPerPixel>
 8019d6a:	2808      	cmp	r0, #8
 8019d6c:	4607      	mov	r7, r0
 8019d6e:	4ea5      	ldr	r6, [pc, #660]	; (801a004 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 8019d70:	dd02      	ble.n	8019d78 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 8019d72:	2c00      	cmp	r4, #0
 8019d74:	f000 81c9 	beq.w	801a10a <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 8019d78:	2301      	movs	r3, #1
 8019d7a:	2700      	movs	r7, #0
 8019d7c:	4628      	mov	r0, r5
 8019d7e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8019d82:	9319      	str	r3, [sp, #100]	; 0x64
 8019d84:	930d      	str	r3, [sp, #52]	; 0x34
 8019d86:	9718      	str	r7, [sp, #96]	; 0x60
 8019d88:	f7f3 faa2 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019d8c:	6802      	ldr	r2, [r0, #0]
 8019d8e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019d92:	6912      	ldr	r2, [r2, #16]
 8019d94:	930e      	str	r3, [sp, #56]	; 0x38
 8019d96:	6853      	ldr	r3, [r2, #4]
 8019d98:	6832      	ldr	r2, [r6, #0]
 8019d9a:	f849 0d14 	str.w	r0, [r9, #-20]!
 8019d9e:	6904      	ldr	r4, [r0, #16]
 8019da0:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8019da4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8019da8:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8019dac:	7c50      	ldrb	r0, [r2, #17]
 8019dae:	930c      	str	r3, [sp, #48]	; 0x30
 8019db0:	f7f5 fd2c 	bl	800f80c <GUI_GetBitsPerPixelEx>
 8019db4:	6832      	ldr	r2, [r6, #0]
 8019db6:	900b      	str	r0, [sp, #44]	; 0x2c
 8019db8:	7c50      	ldrb	r0, [r2, #17]
 8019dba:	f7f5 fd45 	bl	800f848 <GUI_GetpfIndex2ColorEx>
 8019dbe:	900a      	str	r0, [sp, #40]	; 0x28
 8019dc0:	4648      	mov	r0, r9
 8019dc2:	f7f3 fa93 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019dc6:	2c08      	cmp	r4, #8
 8019dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019dcc:	d904      	bls.n	8019dd8 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 8019dce:	2c10      	cmp	r4, #16
 8019dd0:	bf8c      	ite	hi
 8019dd2:	2304      	movhi	r3, #4
 8019dd4:	2302      	movls	r3, #2
 8019dd6:	e005      	b.n	8019de4 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8019dd8:	2c01      	cmp	r4, #1
 8019dda:	d103      	bne.n	8019de4 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8019ddc:	ab18      	add	r3, sp, #96	; 0x60
 8019dde:	940d      	str	r4, [sp, #52]	; 0x34
 8019de0:	930a      	str	r3, [sp, #40]	; 0x28
 8019de2:	e001      	b.n	8019de8 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8019de4:	930d      	str	r3, [sp, #52]	; 0x34
 8019de6:	970a      	str	r7, [sp, #40]	; 0x28
 8019de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019dea:	4293      	cmp	r3, r2
 8019dec:	f000 80df 	beq.w	8019fae <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 8019df0:	6833      	ldr	r3, [r6, #0]
 8019df2:	7c58      	ldrb	r0, [r3, #17]
 8019df4:	f7f5 fd30 	bl	800f858 <GUI_GetpfColor2IndexEx>
 8019df8:	900f      	str	r0, [sp, #60]	; 0x3c
 8019dfa:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8019dfe:	f7f3 fc41 	bl	800d684 <GUI_ALLOC_AllocNoInit>
 8019e02:	9010      	str	r0, [sp, #64]	; 0x40
 8019e04:	2800      	cmp	r0, #0
 8019e06:	f000 833d 	beq.w	801a484 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8019e0a:	4628      	mov	r0, r5
 8019e0c:	f7ff fcae 	bl	801976c <GUI_MEMDEV_GetDataPtr>
 8019e10:	4605      	mov	r5, r0
 8019e12:	f1b8 0f00 	cmp.w	r8, #0
 8019e16:	f000 80b9 	beq.w	8019f8c <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 8019e1a:	4640      	mov	r0, r8
 8019e1c:	f7f3 fa58 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019e20:	eb05 030a 	add.w	r3, r5, sl
 8019e24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019e28:	9311      	str	r3, [sp, #68]	; 0x44
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	9016      	str	r0, [sp, #88]	; 0x58
 8019e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8019e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e34:	ebca 0703 	rsb	r7, sl, r3
 8019e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e3a:	4293      	cmp	r3, r2
 8019e3c:	f340 80a2 	ble.w	8019f84 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 8019e40:	2300      	movs	r3, #0
 8019e42:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019e44:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8019e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8019e4c:	6883      	ldr	r3, [r0, #8]
 8019e4e:	4641      	mov	r1, r8
 8019e50:	695b      	ldr	r3, [r3, #20]
 8019e52:	4798      	blx	r3
 8019e54:	4583      	cmp	fp, r0
 8019e56:	4605      	mov	r5, r0
 8019e58:	d128      	bne.n	8019eac <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 8019e5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019e5c:	f7f3 fa38 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e62:	2c08      	cmp	r4, #8
 8019e64:	4601      	mov	r1, r0
 8019e66:	9301      	str	r3, [sp, #4]
 8019e68:	465a      	mov	r2, fp
 8019e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e6c:	9014      	str	r0, [sp, #80]	; 0x50
 8019e6e:	4638      	mov	r0, r7
 8019e70:	9300      	str	r3, [sp, #0]
 8019e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e74:	d902      	bls.n	8019e7c <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 8019e76:	f7ff ff23 	bl	8019cc0 <_Convert16>
 8019e7a:	e001      	b.n	8019e80 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 8019e7c:	f7ff ff3f 	bl	8019cfe <_Convert8>
 8019e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e82:	ad1a      	add	r5, sp, #104	; 0x68
 8019e84:	9808      	ldr	r0, [sp, #32]
 8019e86:	465a      	mov	r2, fp
 8019e88:	9305      	str	r3, [sp, #20]
 8019e8a:	4649      	mov	r1, r9
 8019e8c:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 8019e90:	9304      	str	r3, [sp, #16]
 8019e92:	2300      	movs	r3, #0
 8019e94:	9303      	str	r3, [sp, #12]
 8019e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e98:	9302      	str	r3, [sp, #8]
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	9301      	str	r3, [sp, #4]
 8019e9e:	9300      	str	r3, [sp, #0]
 8019ea0:	f7f5 f9d6 	bl	800f250 <LCD_DrawBitmap>
 8019ea4:	4628      	mov	r0, r5
 8019ea6:	f7f3 fa21 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019eaa:	e062      	b.n	8019f72 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8019eac:	2c01      	cmp	r4, #1
 8019eae:	d002      	beq.n	8019eb6 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8019eb0:	f04f 0801 	mov.w	r8, #1
 8019eb4:	e057      	b.n	8019f66 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 8019eb6:	2d00      	cmp	r5, #0
 8019eb8:	d05b      	beq.n	8019f72 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8019eba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019ebc:	462a      	mov	r2, r5
 8019ebe:	9e08      	ldr	r6, [sp, #32]
 8019ec0:	4649      	mov	r1, r9
 8019ec2:	f000 0307 	and.w	r3, r0, #7
 8019ec6:	f8cd a00c 	str.w	sl, [sp, #12]
 8019eca:	9306      	str	r3, [sp, #24]
 8019ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ece:	9305      	str	r3, [sp, #20]
 8019ed0:	2308      	movs	r3, #8
 8019ed2:	fb90 f3f3 	sdiv	r3, r0, r3
 8019ed6:	443b      	add	r3, r7
 8019ed8:	4430      	add	r0, r6
 8019eda:	9304      	str	r3, [sp, #16]
 8019edc:	2301      	movs	r3, #1
 8019ede:	9302      	str	r3, [sp, #8]
 8019ee0:	9301      	str	r3, [sp, #4]
 8019ee2:	9300      	str	r3, [sp, #0]
 8019ee4:	f7f5 f8c8 	bl	800f078 <LCD__DrawBitmap_1bpp>
 8019ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019eea:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019eec:	4641      	mov	r1, r8
 8019eee:	441d      	add	r5, r3
 8019ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ef2:	6883      	ldr	r3, [r0, #8]
 8019ef4:	9517      	str	r5, [sp, #92]	; 0x5c
 8019ef6:	695b      	ldr	r3, [r3, #20]
 8019ef8:	4798      	blx	r3
 8019efa:	4605      	mov	r5, r0
 8019efc:	e7db      	b.n	8019eb6 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8019efe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019f00:	f7f3 f9e6 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f06:	4601      	mov	r1, r0
 8019f08:	9014      	str	r0, [sp, #80]	; 0x50
 8019f0a:	9301      	str	r3, [sp, #4]
 8019f0c:	2c08      	cmp	r4, #8
 8019f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f10:	462a      	mov	r2, r5
 8019f12:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019f14:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8019f16:	9300      	str	r3, [sp, #0]
 8019f18:	fb00 7006 	mla	r0, r0, r6, r7
 8019f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f1e:	d925      	bls.n	8019f6c <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 8019f20:	f7ff fece 	bl	8019cc0 <_Convert16>
 8019f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f26:	462a      	mov	r2, r5
 8019f28:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019f2a:	4649      	mov	r1, r9
 8019f2c:	9305      	str	r3, [sp, #20]
 8019f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f30:	9e08      	ldr	r6, [sp, #32]
 8019f32:	9304      	str	r3, [sp, #16]
 8019f34:	2300      	movs	r3, #0
 8019f36:	4430      	add	r0, r6
 8019f38:	f8cd 8004 	str.w	r8, [sp, #4]
 8019f3c:	9303      	str	r3, [sp, #12]
 8019f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f40:	f8cd 8000 	str.w	r8, [sp]
 8019f44:	9302      	str	r3, [sp, #8]
 8019f46:	2301      	movs	r3, #1
 8019f48:	f7f5 f982 	bl	800f250 <LCD_DrawBitmap>
 8019f4c:	a814      	add	r0, sp, #80	; 0x50
 8019f4e:	f7f3 f9cd 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019f52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019f54:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019f56:	a917      	add	r1, sp, #92	; 0x5c
 8019f58:	441d      	add	r5, r3
 8019f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f5c:	6883      	ldr	r3, [r0, #8]
 8019f5e:	9517      	str	r5, [sp, #92]	; 0x5c
 8019f60:	695b      	ldr	r3, [r3, #20]
 8019f62:	4798      	blx	r3
 8019f64:	4605      	mov	r5, r0
 8019f66:	2d00      	cmp	r5, #0
 8019f68:	d1c9      	bne.n	8019efe <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 8019f6a:	e002      	b.n	8019f72 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8019f6c:	f7ff fec7 	bl	8019cfe <_Convert8>
 8019f70:	e7d8      	b.n	8019f24 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 8019f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f74:	f109 0901 	add.w	r9, r9, #1
 8019f78:	3301      	adds	r3, #1
 8019f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019f7e:	4453      	add	r3, sl
 8019f80:	9311      	str	r3, [sp, #68]	; 0x44
 8019f82:	e755      	b.n	8019e30 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8019f84:	a816      	add	r0, sp, #88	; 0x58
 8019f86:	f7f3 f9b1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 8019f8a:	e00e      	b.n	8019faa <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 8019f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f8e:	465a      	mov	r2, fp
 8019f90:	9004      	str	r0, [sp, #16]
 8019f92:	9305      	str	r3, [sp, #20]
 8019f94:	2301      	movs	r3, #1
 8019f96:	f8cd a00c 	str.w	sl, [sp, #12]
 8019f9a:	9301      	str	r3, [sp, #4]
 8019f9c:	9300      	str	r3, [sp, #0]
 8019f9e:	9402      	str	r4, [sp, #8]
 8019fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019fa4:	9808      	ldr	r0, [sp, #32]
 8019fa6:	f7f5 f953 	bl	800f250 <LCD_DrawBitmap>
 8019faa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019fac:	e268      	b.n	801a480 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 8019fae:	4628      	mov	r0, r5
 8019fb0:	f7ff fbdc 	bl	801976c <GUI_MEMDEV_GetDataPtr>
 8019fb4:	4607      	mov	r7, r0
 8019fb6:	f1b8 0f00 	cmp.w	r8, #0
 8019fba:	f000 809a 	beq.w	801a0f2 <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 8019fbe:	2500      	movs	r5, #0
 8019fc0:	4640      	mov	r0, r8
 8019fc2:	f7f3 f985 	bl	800d2d0 <GUI_ALLOC_LockH>
 8019fc6:	9016      	str	r0, [sp, #88]	; 0x58
 8019fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fca:	42ab      	cmp	r3, r5
 8019fcc:	f340 808d 	ble.w	801a0ea <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019fd4:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8019fd8:	462a      	mov	r2, r5
 8019fda:	9317      	str	r3, [sp, #92]	; 0x5c
 8019fdc:	6883      	ldr	r3, [r0, #8]
 8019fde:	4641      	mov	r1, r8
 8019fe0:	695b      	ldr	r3, [r3, #20]
 8019fe2:	4798      	blx	r3
 8019fe4:	4583      	cmp	fp, r0
 8019fe6:	4606      	mov	r6, r0
 8019fe8:	d126      	bne.n	801a038 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 8019fea:	462e      	mov	r6, r5
 8019fec:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019fee:	f106 0901 	add.w	r9, r6, #1
 8019ff2:	4641      	mov	r1, r8
 8019ff4:	6883      	ldr	r3, [r0, #8]
 8019ff6:	464a      	mov	r2, r9
 8019ff8:	695b      	ldr	r3, [r3, #20]
 8019ffa:	4798      	blx	r3
 8019ffc:	4583      	cmp	fp, r0
 8019ffe:	d103      	bne.n	801a008 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 801a000:	464e      	mov	r6, r9
 801a002:	e7f3      	b.n	8019fec <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 801a004:	20000018 	.word	0x20000018
 801a008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a00a:	ebc5 0806 	rsb	r8, r5, r6
 801a00e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a010:	465a      	mov	r2, fp
 801a012:	f108 0801 	add.w	r8, r8, #1
 801a016:	9305      	str	r3, [sp, #20]
 801a018:	2301      	movs	r3, #1
 801a01a:	9704      	str	r7, [sp, #16]
 801a01c:	4429      	add	r1, r5
 801a01e:	f8cd a00c 	str.w	sl, [sp, #12]
 801a022:	9301      	str	r3, [sp, #4]
 801a024:	4635      	mov	r5, r6
 801a026:	9300      	str	r3, [sp, #0]
 801a028:	4643      	mov	r3, r8
 801a02a:	9402      	str	r4, [sp, #8]
 801a02c:	9808      	ldr	r0, [sp, #32]
 801a02e:	fb0a 7708 	mla	r7, sl, r8, r7
 801a032:	f7f5 f90d 	bl	800f250 <LCD_DrawBitmap>
 801a036:	e056      	b.n	801a0e6 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 801a038:	2c01      	cmp	r4, #1
 801a03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a03c:	d004      	beq.n	801a048 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 801a03e:	442b      	add	r3, r5
 801a040:	f04f 0901 	mov.w	r9, #1
 801a044:	930b      	str	r3, [sp, #44]	; 0x2c
 801a046:	e02b      	b.n	801a0a0 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 801a048:	eb03 0905 	add.w	r9, r3, r5
 801a04c:	46a0      	mov	r8, r4
 801a04e:	b32e      	cbz	r6, 801a09c <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 801a050:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801a054:	4632      	mov	r2, r6
 801a056:	9808      	ldr	r0, [sp, #32]
 801a058:	4649      	mov	r1, r9
 801a05a:	f00e 0307 	and.w	r3, lr, #7
 801a05e:	f8cd a00c 	str.w	sl, [sp, #12]
 801a062:	4470      	add	r0, lr
 801a064:	f8cd 8008 	str.w	r8, [sp, #8]
 801a068:	9306      	str	r3, [sp, #24]
 801a06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a06c:	f8cd 8004 	str.w	r8, [sp, #4]
 801a070:	9305      	str	r3, [sp, #20]
 801a072:	2308      	movs	r3, #8
 801a074:	f8cd 8000 	str.w	r8, [sp]
 801a078:	fb9e f3f3 	sdiv	r3, lr, r3
 801a07c:	443b      	add	r3, r7
 801a07e:	9304      	str	r3, [sp, #16]
 801a080:	2301      	movs	r3, #1
 801a082:	f7f4 fff9 	bl	800f078 <LCD__DrawBitmap_1bpp>
 801a086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a088:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a08a:	462a      	mov	r2, r5
 801a08c:	441e      	add	r6, r3
 801a08e:	a917      	add	r1, sp, #92	; 0x5c
 801a090:	6883      	ldr	r3, [r0, #8]
 801a092:	9617      	str	r6, [sp, #92]	; 0x5c
 801a094:	695b      	ldr	r3, [r3, #20]
 801a096:	4798      	blx	r3
 801a098:	4606      	mov	r6, r0
 801a09a:	e7d8      	b.n	801a04e <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 801a09c:	4457      	add	r7, sl
 801a09e:	e022      	b.n	801a0e6 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 801a0a0:	2e00      	cmp	r6, #0
 801a0a2:	d0fb      	beq.n	801a09c <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 801a0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0a6:	4632      	mov	r2, r6
 801a0a8:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801a0ac:	9305      	str	r3, [sp, #20]
 801a0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0b0:	9808      	ldr	r0, [sp, #32]
 801a0b2:	fb03 730e 	mla	r3, r3, lr, r7
 801a0b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a0b8:	4470      	add	r0, lr
 801a0ba:	f8cd a00c 	str.w	sl, [sp, #12]
 801a0be:	9304      	str	r3, [sp, #16]
 801a0c0:	2301      	movs	r3, #1
 801a0c2:	9402      	str	r4, [sp, #8]
 801a0c4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a0c8:	f8cd 9000 	str.w	r9, [sp]
 801a0cc:	f7f5 f8c0 	bl	800f250 <LCD_DrawBitmap>
 801a0d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a0d2:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a0d4:	462a      	mov	r2, r5
 801a0d6:	441e      	add	r6, r3
 801a0d8:	4641      	mov	r1, r8
 801a0da:	6883      	ldr	r3, [r0, #8]
 801a0dc:	9617      	str	r6, [sp, #92]	; 0x5c
 801a0de:	695b      	ldr	r3, [r3, #20]
 801a0e0:	4798      	blx	r3
 801a0e2:	4606      	mov	r6, r0
 801a0e4:	e7dc      	b.n	801a0a0 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 801a0e6:	3501      	adds	r5, #1
 801a0e8:	e76e      	b.n	8019fc8 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 801a0ea:	a816      	add	r0, sp, #88	; 0x58
 801a0ec:	f7f3 f8fe 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a0f0:	e1c8      	b.n	801a484 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801a0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0f4:	465a      	mov	r2, fp
 801a0f6:	9004      	str	r0, [sp, #16]
 801a0f8:	9305      	str	r3, [sp, #20]
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	f8cd a00c 	str.w	sl, [sp, #12]
 801a100:	9301      	str	r3, [sp, #4]
 801a102:	9300      	str	r3, [sp, #0]
 801a104:	9402      	str	r4, [sp, #8]
 801a106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a108:	e03a      	b.n	801a180 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 801a10a:	4628      	mov	r0, r5
 801a10c:	f7f3 f8e0 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a110:	4683      	mov	fp, r0
 801a112:	a81a      	add	r0, sp, #104	; 0x68
 801a114:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801a118:	f840 bd10 	str.w	fp, [r0, #-16]!
 801a11c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a11e:	f8db 2000 	ldr.w	r2, [fp]
 801a122:	f8db 300c 	ldr.w	r3, [fp, #12]
 801a126:	f8d2 8010 	ldr.w	r8, [r2, #16]
 801a12a:	930c      	str	r3, [sp, #48]	; 0x30
 801a12c:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801a130:	f7f3 f8dc 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a134:	6832      	ldr	r2, [r6, #0]
 801a136:	f8d8 9004 	ldr.w	r9, [r8, #4]
 801a13a:	7c50      	ldrb	r0, [r2, #17]
 801a13c:	4aa1      	ldr	r2, [pc, #644]	; (801a3c4 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 801a13e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801a142:	6916      	ldr	r6, [r2, #16]
 801a144:	6833      	ldr	r3, [r6, #0]
 801a146:	930a      	str	r3, [sp, #40]	; 0x28
 801a148:	f7f5 fb60 	bl	800f80c <GUI_GetBitsPerPixelEx>
 801a14c:	2808      	cmp	r0, #8
 801a14e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a150:	d906      	bls.n	801a160 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 801a152:	2810      	cmp	r0, #16
 801a154:	bf8c      	ite	hi
 801a156:	f04f 0a04 	movhi.w	sl, #4
 801a15a:	f04f 0a02 	movls.w	sl, #2
 801a15e:	e001      	b.n	801a164 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 801a160:	f04f 0a01 	mov.w	sl, #1
 801a164:	45b0      	cmp	r8, r6
 801a166:	d110      	bne.n	801a18a <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 801a168:	2200      	movs	r2, #0
 801a16a:	9303      	str	r3, [sp, #12]
 801a16c:	2301      	movs	r3, #1
 801a16e:	f10b 0018 	add.w	r0, fp, #24
 801a172:	9205      	str	r2, [sp, #20]
 801a174:	4622      	mov	r2, r4
 801a176:	9301      	str	r3, [sp, #4]
 801a178:	9300      	str	r3, [sp, #0]
 801a17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a17c:	9004      	str	r0, [sp, #16]
 801a17e:	9702      	str	r7, [sp, #8]
 801a180:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a182:	9808      	ldr	r0, [sp, #32]
 801a184:	f7f5 f864 	bl	800f250 <LCD_DrawBitmap>
 801a188:	e17c      	b.n	801a484 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801a18a:	2f20      	cmp	r7, #32
 801a18c:	f040 80a2 	bne.w	801a2d4 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 801a190:	fb0a f004 	mul.w	r0, sl, r4
 801a194:	f7f3 fa76 	bl	800d684 <GUI_ALLOC_AllocNoInit>
 801a198:	900d      	str	r0, [sp, #52]	; 0x34
 801a19a:	2800      	cmp	r0, #0
 801a19c:	f000 8172 	beq.w	801a484 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801a1a0:	f7f3 f896 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a1a4:	9018      	str	r0, [sp, #96]	; 0x60
 801a1a6:	4628      	mov	r0, r5
 801a1a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a1ac:	f7f3 f890 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a1b0:	9016      	str	r0, [sp, #88]	; 0x58
 801a1b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801a1b6:	6933      	ldr	r3, [r6, #16]
 801a1b8:	f100 0518 	add.w	r5, r0, #24
 801a1bc:	920c      	str	r2, [sp, #48]	; 0x30
 801a1be:	b373      	cbz	r3, 801a21e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 801a1c0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a1c4:	f04f 0901 	mov.w	r9, #1
 801a1c8:	f1ba 0f02 	cmp.w	sl, #2
 801a1cc:	d005      	beq.n	801a1da <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 801a1ce:	f1ba 0f04 	cmp.w	sl, #4
 801a1d2:	d002      	beq.n	801a1da <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 801a1d4:	f1ba 0f01 	cmp.w	sl, #1
 801a1d8:	d106      	bne.n	801a1e8 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 801a1da:	4628      	mov	r0, r5
 801a1dc:	445d      	add	r5, fp
 801a1de:	6937      	ldr	r7, [r6, #16]
 801a1e0:	4653      	mov	r3, sl
 801a1e2:	4622      	mov	r2, r4
 801a1e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a1e6:	47b8      	blx	r7
 801a1e8:	2300      	movs	r3, #0
 801a1ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a1ec:	f8cd 9004 	str.w	r9, [sp, #4]
 801a1f0:	4641      	mov	r1, r8
 801a1f2:	9305      	str	r3, [sp, #20]
 801a1f4:	f108 0701 	add.w	r7, r8, #1
 801a1f8:	9303      	str	r3, [sp, #12]
 801a1fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a1fc:	9204      	str	r2, [sp, #16]
 801a1fe:	4622      	mov	r2, r4
 801a200:	9302      	str	r3, [sp, #8]
 801a202:	2301      	movs	r3, #1
 801a204:	f8cd 9000 	str.w	r9, [sp]
 801a208:	9808      	ldr	r0, [sp, #32]
 801a20a:	f7f5 f821 	bl	800f250 <LCD_DrawBitmap>
 801a20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a212:	4413      	add	r3, r2
 801a214:	429f      	cmp	r7, r3
 801a216:	f000 812c 	beq.w	801a472 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801a21a:	46b8      	mov	r8, r7
 801a21c:	e7d4      	b.n	801a1c8 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 801a21e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a220:	461e      	mov	r6, r3
 801a222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a224:	f04f 0901 	mov.w	r9, #1
 801a228:	443b      	add	r3, r7
 801a22a:	9309      	str	r3, [sp, #36]	; 0x24
 801a22c:	f1ba 0f02 	cmp.w	sl, #2
 801a230:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a234:	d016      	beq.n	801a264 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 801a236:	f1ba 0f04 	cmp.w	sl, #4
 801a23a:	d024      	beq.n	801a286 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 801a23c:	f1ba 0f01 	cmp.w	sl, #1
 801a240:	d130      	bne.n	801a2a4 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 801a242:	4643      	mov	r3, r8
 801a244:	462a      	mov	r2, r5
 801a246:	f852 0b04 	ldr.w	r0, [r2], #4
 801a24a:	930e      	str	r3, [sp, #56]	; 0x38
 801a24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a24e:	920b      	str	r2, [sp, #44]	; 0x2c
 801a250:	4798      	blx	r3
 801a252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a256:	f803 0b01 	strb.w	r0, [r3], #1
 801a25a:	1ae1      	subs	r1, r4, r3
 801a25c:	eb18 0f01 	cmn.w	r8, r1
 801a260:	d1f1      	bne.n	801a246 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 801a262:	e01e      	b.n	801a2a2 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 801a264:	4643      	mov	r3, r8
 801a266:	462a      	mov	r2, r5
 801a268:	46a0      	mov	r8, r4
 801a26a:	f852 0b04 	ldr.w	r0, [r2], #4
 801a26e:	930e      	str	r3, [sp, #56]	; 0x38
 801a270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a272:	920b      	str	r2, [sp, #44]	; 0x2c
 801a274:	4798      	blx	r3
 801a276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a278:	f1b8 0801 	subs.w	r8, r8, #1
 801a27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a27e:	f823 0b02 	strh.w	r0, [r3], #2
 801a282:	d1f2      	bne.n	801a26a <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 801a284:	e00d      	b.n	801a2a2 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 801a286:	462a      	mov	r2, r5
 801a288:	4623      	mov	r3, r4
 801a28a:	f852 0b04 	ldr.w	r0, [r2], #4
 801a28e:	930e      	str	r3, [sp, #56]	; 0x38
 801a290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a292:	920b      	str	r2, [sp, #44]	; 0x2c
 801a294:	4798      	blx	r3
 801a296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a298:	f848 0b04 	str.w	r0, [r8], #4
 801a29c:	3b01      	subs	r3, #1
 801a29e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a2a0:	d1f3      	bne.n	801a28a <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 801a2a2:	445d      	add	r5, fp
 801a2a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a2a6:	4622      	mov	r2, r4
 801a2a8:	9605      	str	r6, [sp, #20]
 801a2aa:	4639      	mov	r1, r7
 801a2ac:	9304      	str	r3, [sp, #16]
 801a2ae:	f107 0801 	add.w	r8, r7, #1
 801a2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2b4:	9603      	str	r6, [sp, #12]
 801a2b6:	9302      	str	r3, [sp, #8]
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	f8cd 9004 	str.w	r9, [sp, #4]
 801a2be:	f8cd 9000 	str.w	r9, [sp]
 801a2c2:	9808      	ldr	r0, [sp, #32]
 801a2c4:	f7f4 ffc4 	bl	800f250 <LCD_DrawBitmap>
 801a2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2ca:	4543      	cmp	r3, r8
 801a2cc:	f000 80d1 	beq.w	801a472 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801a2d0:	4647      	mov	r7, r8
 801a2d2:	e7ab      	b.n	801a22c <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 801a2d4:	2f10      	cmp	r7, #16
 801a2d6:	f040 80d5 	bne.w	801a484 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801a2da:	fb04 f00a 	mul.w	r0, r4, sl
 801a2de:	f7f3 f9d1 	bl	800d684 <GUI_ALLOC_AllocNoInit>
 801a2e2:	900d      	str	r0, [sp, #52]	; 0x34
 801a2e4:	2800      	cmp	r0, #0
 801a2e6:	f000 80cd 	beq.w	801a484 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801a2ea:	f7f2 fff1 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a2ee:	9018      	str	r0, [sp, #96]	; 0x60
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	f7f2 ffed 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a2f6:	9016      	str	r0, [sp, #88]	; 0x58
 801a2f8:	6933      	ldr	r3, [r6, #16]
 801a2fa:	f100 0718 	add.w	r7, r0, #24
 801a2fe:	b113      	cbz	r3, 801a306 <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 801a300:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a304:	b953      	cbnz	r3, 801a31c <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 801a306:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a30a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a30c:	0066      	lsls	r6, r4, #1
 801a30e:	f04f 0b00 	mov.w	fp, #0
 801a312:	930c      	str	r3, [sp, #48]	; 0x30
 801a314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a316:	442b      	add	r3, r5
 801a318:	9309      	str	r3, [sp, #36]	; 0x24
 801a31a:	e083      	b.n	801a424 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 801a31c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801a320:	0080      	lsls	r0, r0, #2
 801a322:	f7f3 f9af 	bl	800d684 <GUI_ALLOC_AllocNoInit>
 801a326:	900c      	str	r0, [sp, #48]	; 0x30
 801a328:	b118      	cbz	r0, 801a332 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 801a32a:	f7f2 ffd1 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a32e:	9017      	str	r0, [sp, #92]	; 0x5c
 801a330:	e001      	b.n	801a336 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 801a332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a334:	9317      	str	r3, [sp, #92]	; 0x5c
 801a336:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a338:	2b00      	cmp	r3, #0
 801a33a:	f000 809a 	beq.w	801a472 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801a33e:	0063      	lsls	r3, r4, #1
 801a340:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a344:	930a      	str	r3, [sp, #40]	; 0x28
 801a346:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a34a:	930e      	str	r3, [sp, #56]	; 0x38
 801a34c:	f1ba 0f02 	cmp.w	sl, #2
 801a350:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801a354:	d006      	beq.n	801a364 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 801a356:	f1ba 0f04 	cmp.w	sl, #4
 801a35a:	d005      	beq.n	801a368 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 801a35c:	f1ba 0f01 	cmp.w	sl, #1
 801a360:	d111      	bne.n	801a386 <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 801a362:	e001      	b.n	801a368 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 801a364:	4653      	mov	r3, sl
 801a366:	e000      	b.n	801a36a <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 801a368:	2302      	movs	r3, #2
 801a36a:	4638      	mov	r0, r7
 801a36c:	4622      	mov	r2, r4
 801a36e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a370:	f8d8 5014 	ldr.w	r5, [r8, #20]
 801a374:	47a8      	blx	r5
 801a376:	4653      	mov	r3, sl
 801a378:	4622      	mov	r2, r4
 801a37a:	4649      	mov	r1, r9
 801a37c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a37e:	6935      	ldr	r5, [r6, #16]
 801a380:	47a8      	blx	r5
 801a382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a384:	441f      	add	r7, r3
 801a386:	2300      	movs	r3, #0
 801a388:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a38a:	4659      	mov	r1, fp
 801a38c:	9808      	ldr	r0, [sp, #32]
 801a38e:	9305      	str	r3, [sp, #20]
 801a390:	f10b 0901 	add.w	r9, fp, #1
 801a394:	9303      	str	r3, [sp, #12]
 801a396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a398:	9204      	str	r2, [sp, #16]
 801a39a:	4622      	mov	r2, r4
 801a39c:	9302      	str	r3, [sp, #8]
 801a39e:	2301      	movs	r3, #1
 801a3a0:	9301      	str	r3, [sp, #4]
 801a3a2:	9300      	str	r3, [sp, #0]
 801a3a4:	f7f4 ff54 	bl	800f250 <LCD_DrawBitmap>
 801a3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3ac:	4413      	add	r3, r2
 801a3ae:	4599      	cmp	r9, r3
 801a3b0:	d001      	beq.n	801a3b6 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 801a3b2:	46cb      	mov	fp, r9
 801a3b4:	e7ca      	b.n	801a34c <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 801a3b6:	a817      	add	r0, sp, #92	; 0x5c
 801a3b8:	f7f2 ff98 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a3bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a3be:	f7f2 ffc5 	bl	800d34c <GUI_ALLOC_Free>
 801a3c2:	e056      	b.n	801a472 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801a3c4:	2002260c 	.word	0x2002260c
 801a3c8:	f1ba 0f04 	cmp.w	sl, #4
 801a3cc:	d041      	beq.n	801a452 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 801a3ce:	f1ba 0f01 	cmp.w	sl, #1
 801a3d2:	d111      	bne.n	801a3f8 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 801a3d4:	4643      	mov	r3, r8
 801a3d6:	463a      	mov	r2, r7
 801a3d8:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a3dc:	930e      	str	r3, [sp, #56]	; 0x38
 801a3de:	920b      	str	r2, [sp, #44]	; 0x2c
 801a3e0:	47c8      	blx	r9
 801a3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3e4:	4798      	blx	r3
 801a3e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a3ea:	f803 0b01 	strb.w	r0, [r3], #1
 801a3ee:	1ae1      	subs	r1, r4, r3
 801a3f0:	eb18 0f01 	cmn.w	r8, r1
 801a3f4:	d1f0      	bne.n	801a3d8 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 801a3f6:	4437      	add	r7, r6
 801a3f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a3fa:	4622      	mov	r2, r4
 801a3fc:	f8cd b014 	str.w	fp, [sp, #20]
 801a400:	4629      	mov	r1, r5
 801a402:	9304      	str	r3, [sp, #16]
 801a404:	f105 0801 	add.w	r8, r5, #1
 801a408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a40a:	f8cd b00c 	str.w	fp, [sp, #12]
 801a40e:	9302      	str	r3, [sp, #8]
 801a410:	2301      	movs	r3, #1
 801a412:	9808      	ldr	r0, [sp, #32]
 801a414:	9301      	str	r3, [sp, #4]
 801a416:	9300      	str	r3, [sp, #0]
 801a418:	f7f4 ff1a 	bl	800f250 <LCD_DrawBitmap>
 801a41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a41e:	4543      	cmp	r3, r8
 801a420:	d027      	beq.n	801a472 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801a422:	4645      	mov	r5, r8
 801a424:	f1ba 0f02 	cmp.w	sl, #2
 801a428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a42c:	d1cc      	bne.n	801a3c8 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 801a42e:	4643      	mov	r3, r8
 801a430:	463a      	mov	r2, r7
 801a432:	46a0      	mov	r8, r4
 801a434:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a438:	930e      	str	r3, [sp, #56]	; 0x38
 801a43a:	920b      	str	r2, [sp, #44]	; 0x2c
 801a43c:	47c8      	blx	r9
 801a43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a440:	4798      	blx	r3
 801a442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a444:	f1b8 0801 	subs.w	r8, r8, #1
 801a448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a44a:	f823 0b02 	strh.w	r0, [r3], #2
 801a44e:	d1f1      	bne.n	801a434 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 801a450:	e7d1      	b.n	801a3f6 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 801a452:	463a      	mov	r2, r7
 801a454:	4623      	mov	r3, r4
 801a456:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a45a:	930e      	str	r3, [sp, #56]	; 0x38
 801a45c:	920b      	str	r2, [sp, #44]	; 0x2c
 801a45e:	47c8      	blx	r9
 801a460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a462:	4798      	blx	r3
 801a464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a466:	f848 0b04 	str.w	r0, [r8], #4
 801a46a:	3b01      	subs	r3, #1
 801a46c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a46e:	d1f2      	bne.n	801a456 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 801a470:	e7c1      	b.n	801a3f6 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 801a472:	a816      	add	r0, sp, #88	; 0x58
 801a474:	f7f2 ff3a 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a478:	a818      	add	r0, sp, #96	; 0x60
 801a47a:	f7f2 ff37 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a47e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a480:	f7f2 ff64 	bl	800d34c <GUI_ALLOC_Free>
 801a484:	b01b      	add	sp, #108	; 0x6c
 801a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a48a:	bf00      	nop

0801a48c <_cbInvalidateOne>:
 801a48c:	f7f7 be22 	b.w	80120d4 <WM_InvalidateWindow>

0801a490 <WM_BringToTop>:
 801a490:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a492:	4604      	mov	r4, r0
 801a494:	f7f4 f86c 	bl	800e570 <GUI_Lock>
 801a498:	b39c      	cbz	r4, 801a502 <WM_BringToTop+0x72>
 801a49a:	ad02      	add	r5, sp, #8
 801a49c:	4620      	mov	r0, r4
 801a49e:	f7f2 ff17 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	f845 0d08 	str.w	r0, [r5, #-8]!
 801a4a8:	6a00      	ldr	r0, [r0, #32]
 801a4aa:	b908      	cbnz	r0, 801a4b0 <WM_BringToTop+0x20>
 801a4ac:	4628      	mov	r0, r5
 801a4ae:	e00e      	b.n	801a4ce <WM_BringToTop+0x3e>
 801a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4b2:	071a      	lsls	r2, r3, #28
 801a4b4:	d411      	bmi.n	801a4da <WM_BringToTop+0x4a>
 801a4b6:	f7f2 ff0b 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a4ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a4bc:	ae02      	add	r6, sp, #8
 801a4be:	071b      	lsls	r3, r3, #28
 801a4c0:	f846 0d04 	str.w	r0, [r6, #-4]!
 801a4c4:	d506      	bpl.n	801a4d4 <WM_BringToTop+0x44>
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	f7f2 ff10 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a4cc:	4630      	mov	r0, r6
 801a4ce:	f7f2 ff0d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a4d2:	e016      	b.n	801a502 <WM_BringToTop+0x72>
 801a4d4:	4630      	mov	r0, r6
 801a4d6:	f7f2 ff09 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a4da:	9b00      	ldr	r3, [sp, #0]
 801a4dc:	4628      	mov	r0, r5
 801a4de:	699e      	ldr	r6, [r3, #24]
 801a4e0:	f7f2 ff04 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a4e4:	4620      	mov	r0, r4
 801a4e6:	f7f7 fbd1 	bl	8011c8c <WM__RemoveWindowFromList>
 801a4ea:	4631      	mov	r1, r6
 801a4ec:	4620      	mov	r0, r4
 801a4ee:	f7f7 fb77 	bl	8011be0 <WM__InsertWindowIntoList>
 801a4f2:	4620      	mov	r0, r4
 801a4f4:	f7f7 fdee 	bl	80120d4 <WM_InvalidateWindow>
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	4904      	ldr	r1, [pc, #16]	; (801a50c <WM_BringToTop+0x7c>)
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f7f8 fb21 	bl	8012b44 <WM_ForEachDesc>
 801a502:	f7f4 f82b 	bl	800e55c <GUI_Unlock>
 801a506:	b002      	add	sp, #8
 801a508:	bd70      	pop	{r4, r5, r6, pc}
 801a50a:	bf00      	nop
 801a50c:	0801a48d 	.word	0x0801a48d

0801a510 <WM_GetWindowSizeX>:
 801a510:	b513      	push	{r0, r1, r4, lr}
 801a512:	4604      	mov	r4, r0
 801a514:	f7f4 f82c 	bl	800e570 <GUI_Lock>
 801a518:	b914      	cbnz	r4, 801a520 <WM_GetWindowSizeX+0x10>
 801a51a:	f7f7 ff99 	bl	8012450 <WM_GetActiveWindow>
 801a51e:	4604      	mov	r4, r0
 801a520:	4620      	mov	r0, r4
 801a522:	f7f2 fed5 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a526:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a52a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a52e:	aa02      	add	r2, sp, #8
 801a530:	1b1c      	subs	r4, r3, r4
 801a532:	f842 0d04 	str.w	r0, [r2, #-4]!
 801a536:	4610      	mov	r0, r2
 801a538:	3401      	adds	r4, #1
 801a53a:	f7f2 fed7 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a53e:	f7f4 f80d 	bl	800e55c <GUI_Unlock>
 801a542:	4620      	mov	r0, r4
 801a544:	b002      	add	sp, #8
 801a546:	bd10      	pop	{r4, pc}

0801a548 <WM_GetWindowSizeY>:
 801a548:	b513      	push	{r0, r1, r4, lr}
 801a54a:	4604      	mov	r4, r0
 801a54c:	f7f4 f810 	bl	800e570 <GUI_Lock>
 801a550:	b914      	cbnz	r4, 801a558 <WM_GetWindowSizeY+0x10>
 801a552:	f7f7 ff7d 	bl	8012450 <WM_GetActiveWindow>
 801a556:	4604      	mov	r4, r0
 801a558:	4620      	mov	r0, r4
 801a55a:	f7f2 feb9 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a55e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a562:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a566:	aa02      	add	r2, sp, #8
 801a568:	1b1c      	subs	r4, r3, r4
 801a56a:	f842 0d04 	str.w	r0, [r2, #-4]!
 801a56e:	4610      	mov	r0, r2
 801a570:	3401      	adds	r4, #1
 801a572:	f7f2 febb 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a576:	f7f3 fff1 	bl	800e55c <GUI_Unlock>
 801a57a:	4620      	mov	r0, r4
 801a57c:	b002      	add	sp, #8
 801a57e:	bd10      	pop	{r4, pc}

0801a580 <WM_PID__SetPrevState>:
 801a580:	4a03      	ldr	r2, [pc, #12]	; (801a590 <WM_PID__SetPrevState+0x10>)
 801a582:	230c      	movs	r3, #12
 801a584:	fb03 2301 	mla	r3, r3, r1, r2
 801a588:	c807      	ldmia	r0, {r0, r1, r2}
 801a58a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a58e:	4770      	bx	lr
 801a590:	200005a4 	.word	0x200005a4

0801a594 <WM__IsInWindow>:
 801a594:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a596:	f013 0302 	ands.w	r3, r3, #2
 801a59a:	d012      	beq.n	801a5c2 <WM__IsInWindow+0x2e>
 801a59c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a5a0:	428b      	cmp	r3, r1
 801a5a2:	dc10      	bgt.n	801a5c6 <WM__IsInWindow+0x32>
 801a5a4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a5a8:	4299      	cmp	r1, r3
 801a5aa:	dc0c      	bgt.n	801a5c6 <WM__IsInWindow+0x32>
 801a5ac:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a5b0:	4293      	cmp	r3, r2
 801a5b2:	dc08      	bgt.n	801a5c6 <WM__IsInWindow+0x32>
 801a5b4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	bfcc      	ite	gt
 801a5bc:	2000      	movgt	r0, #0
 801a5be:	2001      	movle	r0, #1
 801a5c0:	4770      	bx	lr
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	4770      	bx	lr
 801a5c6:	2000      	movs	r0, #0
 801a5c8:	4770      	bx	lr

0801a5ca <_Screen2hWin>:
 801a5ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a5ce:	460e      	mov	r6, r1
 801a5d0:	4617      	mov	r7, r2
 801a5d2:	4698      	mov	r8, r3
 801a5d4:	4604      	mov	r4, r0
 801a5d6:	b320      	cbz	r0, 801a622 <_Screen2hWin+0x58>
 801a5d8:	f7f2 fe7a 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a5dc:	4642      	mov	r2, r8
 801a5de:	4639      	mov	r1, r7
 801a5e0:	4605      	mov	r5, r0
 801a5e2:	9001      	str	r0, [sp, #4]
 801a5e4:	f7ff ffd6 	bl	801a594 <WM__IsInWindow>
 801a5e8:	4681      	mov	r9, r0
 801a5ea:	b920      	cbnz	r0, 801a5f6 <_Screen2hWin+0x2c>
 801a5ec:	a801      	add	r0, sp, #4
 801a5ee:	f7f2 fe7d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a5f2:	4648      	mov	r0, r9
 801a5f4:	e016      	b.n	801a624 <_Screen2hWin+0x5a>
 801a5f6:	69ed      	ldr	r5, [r5, #28]
 801a5f8:	b91d      	cbnz	r5, 801a602 <_Screen2hWin+0x38>
 801a5fa:	a801      	add	r0, sp, #4
 801a5fc:	f7f2 fe76 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a600:	e00f      	b.n	801a622 <_Screen2hWin+0x58>
 801a602:	42b5      	cmp	r5, r6
 801a604:	d0f9      	beq.n	801a5fa <_Screen2hWin+0x30>
 801a606:	4643      	mov	r3, r8
 801a608:	463a      	mov	r2, r7
 801a60a:	4631      	mov	r1, r6
 801a60c:	4628      	mov	r0, r5
 801a60e:	f7ff ffdc 	bl	801a5ca <_Screen2hWin>
 801a612:	2800      	cmp	r0, #0
 801a614:	bf18      	it	ne
 801a616:	4604      	movne	r4, r0
 801a618:	4628      	mov	r0, r5
 801a61a:	f7f2 fe4f 	bl	800d2bc <GUI_ALLOC_h2p>
 801a61e:	6a05      	ldr	r5, [r0, #32]
 801a620:	e7ea      	b.n	801a5f8 <_Screen2hWin+0x2e>
 801a622:	4620      	mov	r0, r4
 801a624:	b003      	add	sp, #12
 801a626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801a62c <WM_Screen2hWin>:
 801a62c:	b538      	push	{r3, r4, r5, lr}
 801a62e:	460d      	mov	r5, r1
 801a630:	4604      	mov	r4, r0
 801a632:	f7f3 ff9d 	bl	800e570 <GUI_Lock>
 801a636:	4b07      	ldr	r3, [pc, #28]	; (801a654 <WM_Screen2hWin+0x28>)
 801a638:	6818      	ldr	r0, [r3, #0]
 801a63a:	f7f8 facf 	bl	8012bdc <WM_GetDesktopWindowEx>
 801a63e:	4622      	mov	r2, r4
 801a640:	462b      	mov	r3, r5
 801a642:	2100      	movs	r1, #0
 801a644:	f7ff ffc1 	bl	801a5ca <_Screen2hWin>
 801a648:	4604      	mov	r4, r0
 801a64a:	f7f3 ff87 	bl	800e55c <GUI_Unlock>
 801a64e:	4620      	mov	r0, r4
 801a650:	bd38      	pop	{r3, r4, r5, pc}
 801a652:	bf00      	nop
 801a654:	20022650 	.word	0x20022650

0801a658 <WM__ReleaseCapture>:
 801a658:	b530      	push	{r4, r5, lr}
 801a65a:	4d09      	ldr	r5, [pc, #36]	; (801a680 <WM__ReleaseCapture+0x28>)
 801a65c:	b085      	sub	sp, #20
 801a65e:	4c09      	ldr	r4, [pc, #36]	; (801a684 <WM__ReleaseCapture+0x2c>)
 801a660:	682b      	ldr	r3, [r5, #0]
 801a662:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801a666:	b148      	cbz	r0, 801a67c <WM__ReleaseCapture+0x24>
 801a668:	2318      	movs	r3, #24
 801a66a:	a904      	add	r1, sp, #16
 801a66c:	f841 3d10 	str.w	r3, [r1, #-16]!
 801a670:	f7f9 fa6e 	bl	8013b50 <WM__SendMessage>
 801a674:	682b      	ldr	r3, [r5, #0]
 801a676:	2200      	movs	r2, #0
 801a678:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801a67c:	b005      	add	sp, #20
 801a67e:	bd30      	pop	{r4, r5, pc}
 801a680:	20022650 	.word	0x20022650
 801a684:	20022674 	.word	0x20022674

0801a688 <WM_SetCapture>:
 801a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a68a:	4606      	mov	r6, r0
 801a68c:	460f      	mov	r7, r1
 801a68e:	f7f3 ff6f 	bl	800e570 <GUI_Lock>
 801a692:	4a0a      	ldr	r2, [pc, #40]	; (801a6bc <WM_SetCapture+0x34>)
 801a694:	4b0a      	ldr	r3, [pc, #40]	; (801a6c0 <WM_SetCapture+0x38>)
 801a696:	6811      	ldr	r1, [r2, #0]
 801a698:	4615      	mov	r5, r2
 801a69a:	461c      	mov	r4, r3
 801a69c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801a6a0:	42b1      	cmp	r1, r6
 801a6a2:	d001      	beq.n	801a6a8 <WM_SetCapture+0x20>
 801a6a4:	f7ff ffd8 	bl	801a658 <WM__ReleaseCapture>
 801a6a8:	682b      	ldr	r3, [r5, #0]
 801a6aa:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801a6ae:	4b05      	ldr	r3, [pc, #20]	; (801a6c4 <WM_SetCapture+0x3c>)
 801a6b0:	701f      	strb	r7, [r3, #0]
 801a6b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a6b6:	f7f3 bf51 	b.w	800e55c <GUI_Unlock>
 801a6ba:	bf00      	nop
 801a6bc:	20022650 	.word	0x20022650
 801a6c0:	20022674 	.word	0x20022674
 801a6c4:	20022654 	.word	0x20022654

0801a6c8 <WM_ReleaseCapture>:
 801a6c8:	b508      	push	{r3, lr}
 801a6ca:	f7f3 ff51 	bl	800e570 <GUI_Lock>
 801a6ce:	f7ff ffc3 	bl	801a658 <WM__ReleaseCapture>
 801a6d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a6d6:	f7f3 bf41 	b.w	800e55c <GUI_Unlock>

0801a6da <_GetNextChild>:
 801a6da:	b538      	push	{r3, r4, r5, lr}
 801a6dc:	4605      	mov	r5, r0
 801a6de:	460c      	mov	r4, r1
 801a6e0:	b921      	cbnz	r1, 801a6ec <_GetNextChild+0x12>
 801a6e2:	4628      	mov	r0, r5
 801a6e4:	f7f2 fdea 	bl	800d2bc <GUI_ALLOC_h2p>
 801a6e8:	69c0      	ldr	r0, [r0, #28]
 801a6ea:	e005      	b.n	801a6f8 <_GetNextChild+0x1e>
 801a6ec:	4608      	mov	r0, r1
 801a6ee:	f7f2 fde5 	bl	800d2bc <GUI_ALLOC_h2p>
 801a6f2:	6a00      	ldr	r0, [r0, #32]
 801a6f4:	2800      	cmp	r0, #0
 801a6f6:	d0f4      	beq.n	801a6e2 <_GetNextChild+0x8>
 801a6f8:	42a0      	cmp	r0, r4
 801a6fa:	bf08      	it	eq
 801a6fc:	2000      	moveq	r0, #0
 801a6fe:	bd38      	pop	{r3, r4, r5, pc}

0801a700 <WM_SetFocusOnNextChild>:
 801a700:	b570      	push	{r4, r5, r6, lr}
 801a702:	4605      	mov	r5, r0
 801a704:	b340      	cbz	r0, 801a758 <WM_SetFocusOnNextChild+0x58>
 801a706:	f7f3 ff33 	bl	800e570 <GUI_Lock>
 801a70a:	4628      	mov	r0, r5
 801a70c:	f7f9 fa04 	bl	8013b18 <WM__GetFocusedChild>
 801a710:	4601      	mov	r1, r0
 801a712:	4628      	mov	r0, r5
 801a714:	f7ff ffe1 	bl	801a6da <_GetNextChild>
 801a718:	4606      	mov	r6, r0
 801a71a:	4604      	mov	r4, r0
 801a71c:	4620      	mov	r0, r4
 801a71e:	f7f8 fc0b 	bl	8012f38 <WM_IsFocusable>
 801a722:	b938      	cbnz	r0, 801a734 <WM_SetFocusOnNextChild+0x34>
 801a724:	b1a4      	cbz	r4, 801a750 <WM_SetFocusOnNextChild+0x50>
 801a726:	4621      	mov	r1, r4
 801a728:	4628      	mov	r0, r5
 801a72a:	f7ff ffd6 	bl	801a6da <_GetNextChild>
 801a72e:	4286      	cmp	r6, r0
 801a730:	4604      	mov	r4, r0
 801a732:	d1f3      	bne.n	801a71c <WM_SetFocusOnNextChild+0x1c>
 801a734:	b164      	cbz	r4, 801a750 <WM_SetFocusOnNextChild+0x50>
 801a736:	4d0a      	ldr	r5, [pc, #40]	; (801a760 <WM_SetFocusOnNextChild+0x60>)
 801a738:	4620      	mov	r0, r4
 801a73a:	682e      	ldr	r6, [r5, #0]
 801a73c:	f7f7 fb88 	bl	8011e50 <WM__GetTopLevelLayer>
 801a740:	1c43      	adds	r3, r0, #1
 801a742:	d006      	beq.n	801a752 <WM_SetFocusOnNextChild+0x52>
 801a744:	6028      	str	r0, [r5, #0]
 801a746:	4620      	mov	r0, r4
 801a748:	f7f8 fcf0 	bl	801312c <WM_SetFocus>
 801a74c:	602e      	str	r6, [r5, #0]
 801a74e:	b100      	cbz	r0, 801a752 <WM_SetFocusOnNextChild+0x52>
 801a750:	2400      	movs	r4, #0
 801a752:	f7f3 ff03 	bl	800e55c <GUI_Unlock>
 801a756:	e000      	b.n	801a75a <WM_SetFocusOnNextChild+0x5a>
 801a758:	4604      	mov	r4, r0
 801a75a:	4620      	mov	r0, r4
 801a75c:	bd70      	pop	{r4, r5, r6, pc}
 801a75e:	bf00      	nop
 801a760:	20022650 	.word	0x20022650

0801a764 <_GetPrevChild>:
 801a764:	b510      	push	{r4, lr}
 801a766:	4604      	mov	r4, r0
 801a768:	b918      	cbnz	r0, 801a772 <_GetPrevChild+0xe>
 801a76a:	4620      	mov	r0, r4
 801a76c:	f7f9 f98a 	bl	8013a84 <WM__GetLastSibling>
 801a770:	e003      	b.n	801a77a <_GetPrevChild+0x16>
 801a772:	f7f9 f993 	bl	8013a9c <WM__GetPrevSibling>
 801a776:	2800      	cmp	r0, #0
 801a778:	d0f7      	beq.n	801a76a <_GetPrevChild+0x6>
 801a77a:	42a0      	cmp	r0, r4
 801a77c:	bf08      	it	eq
 801a77e:	2000      	moveq	r0, #0
 801a780:	bd10      	pop	{r4, pc}

0801a782 <WM_SetFocusOnPrevChild>:
 801a782:	b538      	push	{r3, r4, r5, lr}
 801a784:	4604      	mov	r4, r0
 801a786:	b1d8      	cbz	r0, 801a7c0 <WM_SetFocusOnPrevChild+0x3e>
 801a788:	f7f3 fef2 	bl	800e570 <GUI_Lock>
 801a78c:	4620      	mov	r0, r4
 801a78e:	f7f9 f9c3 	bl	8013b18 <WM__GetFocusedChild>
 801a792:	f7ff ffe7 	bl	801a764 <_GetPrevChild>
 801a796:	4605      	mov	r5, r0
 801a798:	4604      	mov	r4, r0
 801a79a:	4620      	mov	r0, r4
 801a79c:	f7f8 fbcc 	bl	8012f38 <WM_IsFocusable>
 801a7a0:	b930      	cbnz	r0, 801a7b0 <WM_SetFocusOnPrevChild+0x2e>
 801a7a2:	b12c      	cbz	r4, 801a7b0 <WM_SetFocusOnPrevChild+0x2e>
 801a7a4:	4620      	mov	r0, r4
 801a7a6:	f7ff ffdd 	bl	801a764 <_GetPrevChild>
 801a7aa:	4285      	cmp	r5, r0
 801a7ac:	4604      	mov	r4, r0
 801a7ae:	d1f4      	bne.n	801a79a <WM_SetFocusOnPrevChild+0x18>
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	f7f8 fcbb 	bl	801312c <WM_SetFocus>
 801a7b6:	2800      	cmp	r0, #0
 801a7b8:	bf18      	it	ne
 801a7ba:	2400      	movne	r4, #0
 801a7bc:	f7f3 fece 	bl	800e55c <GUI_Unlock>
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	bd38      	pop	{r3, r4, r5, pc}

0801a7c4 <_SetScrollbar>:
 801a7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a7c6:	460f      	mov	r7, r1
 801a7c8:	4611      	mov	r1, r2
 801a7ca:	4605      	mov	r5, r0
 801a7cc:	461e      	mov	r6, r3
 801a7ce:	f7f8 fa6c 	bl	8012caa <WM_GetDialogItem>
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	b1a7      	cbz	r7, 801a800 <_SetScrollbar+0x3c>
 801a7d6:	b920      	cbnz	r0, 801a7e2 <_SetScrollbar+0x1e>
 801a7d8:	4631      	mov	r1, r6
 801a7da:	4628      	mov	r0, r5
 801a7dc:	f000 f9b2 	bl	801ab44 <SCROLLBAR_CreateAttached>
 801a7e0:	e014      	b.n	801a80c <_SetScrollbar+0x48>
 801a7e2:	f7f2 fd75 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a7e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a7e8:	aa02      	add	r2, sp, #8
 801a7ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801a7ee:	f842 0d04 	str.w	r0, [r2, #-4]!
 801a7f2:	f043 0302 	orr.w	r3, r3, #2
 801a7f6:	6283      	str	r3, [r0, #40]	; 0x28
 801a7f8:	4610      	mov	r0, r2
 801a7fa:	f7f2 fd77 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a7fe:	e005      	b.n	801a80c <_SetScrollbar+0x48>
 801a800:	b120      	cbz	r0, 801a80c <_SetScrollbar+0x48>
 801a802:	f000 ffbe 	bl	801b782 <WM_HideWindow>
 801a806:	4620      	mov	r0, r4
 801a808:	f7f8 f862 	bl	80128d0 <WM__DeleteSecure>
 801a80c:	1c20      	adds	r0, r4, #0
 801a80e:	bf18      	it	ne
 801a810:	2001      	movne	r0, #1
 801a812:	b003      	add	sp, #12
 801a814:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a816 <WM__SetScrollbarV>:
 801a816:	2308      	movs	r3, #8
 801a818:	22fe      	movs	r2, #254	; 0xfe
 801a81a:	f7ff bfd3 	b.w	801a7c4 <_SetScrollbar>

0801a81e <WM_SetScrollbarV>:
 801a81e:	b538      	push	{r3, r4, r5, lr}
 801a820:	4604      	mov	r4, r0
 801a822:	460d      	mov	r5, r1
 801a824:	f7f3 fea4 	bl	800e570 <GUI_Lock>
 801a828:	4629      	mov	r1, r5
 801a82a:	4620      	mov	r0, r4
 801a82c:	f7ff fff3 	bl	801a816 <WM__SetScrollbarV>
 801a830:	4604      	mov	r4, r0
 801a832:	f7f3 fe93 	bl	800e55c <GUI_Unlock>
 801a836:	4620      	mov	r0, r4
 801a838:	bd38      	pop	{r3, r4, r5, pc}

0801a83a <WM_GetHasTrans>:
 801a83a:	b510      	push	{r4, lr}
 801a83c:	4604      	mov	r4, r0
 801a83e:	f7f3 fe97 	bl	800e570 <GUI_Lock>
 801a842:	b12c      	cbz	r4, 801a850 <WM_GetHasTrans+0x16>
 801a844:	4620      	mov	r0, r4
 801a846:	f7f2 fd39 	bl	800d2bc <GUI_ALLOC_h2p>
 801a84a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a84c:	f004 0401 	and.w	r4, r4, #1
 801a850:	f7f3 fe84 	bl	800e55c <GUI_Unlock>
 801a854:	4620      	mov	r0, r4
 801a856:	bd10      	pop	{r4, pc}

0801a858 <GUI_ARRAY__GethItem>:
 801a858:	8803      	ldrh	r3, [r0, #0]
 801a85a:	428b      	cmp	r3, r1
 801a85c:	b513      	push	{r0, r1, r4, lr}
 801a85e:	460c      	mov	r4, r1
 801a860:	d90e      	bls.n	801a880 <GUI_ARRAY__GethItem+0x28>
 801a862:	6840      	ldr	r0, [r0, #4]
 801a864:	b150      	cbz	r0, 801a87c <GUI_ARRAY__GethItem+0x24>
 801a866:	f7f2 fd33 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a86a:	ab02      	add	r3, sp, #8
 801a86c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801a870:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a874:	4618      	mov	r0, r3
 801a876:	f7f2 fd39 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a87a:	e002      	b.n	801a882 <GUI_ARRAY__GethItem+0x2a>
 801a87c:	4604      	mov	r4, r0
 801a87e:	e000      	b.n	801a882 <GUI_ARRAY__GethItem+0x2a>
 801a880:	2400      	movs	r4, #0
 801a882:	4620      	mov	r0, r4
 801a884:	b002      	add	sp, #8
 801a886:	bd10      	pop	{r4, pc}

0801a888 <GUI_ARRAY__GetpItemLocked>:
 801a888:	b508      	push	{r3, lr}
 801a88a:	f7ff ffe5 	bl	801a858 <GUI_ARRAY__GethItem>
 801a88e:	b118      	cbz	r0, 801a898 <GUI_ARRAY__GetpItemLocked+0x10>
 801a890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a894:	f7f2 bd1c 	b.w	800d2d0 <GUI_ALLOC_LockH>
 801a898:	bd08      	pop	{r3, pc}

0801a89a <GUI_ARRAY_GetNumItems>:
 801a89a:	b513      	push	{r0, r1, r4, lr}
 801a89c:	4604      	mov	r4, r0
 801a89e:	b140      	cbz	r0, 801a8b2 <GUI_ARRAY_GetNumItems+0x18>
 801a8a0:	f7f2 fd16 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a8a4:	ab02      	add	r3, sp, #8
 801a8a6:	8804      	ldrh	r4, [r0, #0]
 801a8a8:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f7f2 fd1d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	b002      	add	sp, #8
 801a8b6:	bd10      	pop	{r4, pc}

0801a8b8 <GUI_ARRAY_Delete>:
 801a8b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a8ba:	4605      	mov	r5, r0
 801a8bc:	b318      	cbz	r0, 801a906 <GUI_ARRAY_Delete+0x4e>
 801a8be:	f7f2 fd07 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a8c2:	9000      	str	r0, [sp, #0]
 801a8c4:	6840      	ldr	r0, [r0, #4]
 801a8c6:	b1c0      	cbz	r0, 801a8fa <GUI_ARRAY_Delete+0x42>
 801a8c8:	2400      	movs	r4, #0
 801a8ca:	f7f2 fd01 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a8ce:	9001      	str	r0, [sp, #4]
 801a8d0:	9b00      	ldr	r3, [sp, #0]
 801a8d2:	881b      	ldrh	r3, [r3, #0]
 801a8d4:	429c      	cmp	r4, r3
 801a8d6:	da06      	bge.n	801a8e6 <GUI_ARRAY_Delete+0x2e>
 801a8d8:	9801      	ldr	r0, [sp, #4]
 801a8da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801a8de:	3401      	adds	r4, #1
 801a8e0:	f7f2 fedd 	bl	800d69e <GUI_ALLOC_FreePtr>
 801a8e4:	e7f4      	b.n	801a8d0 <GUI_ARRAY_Delete+0x18>
 801a8e6:	a801      	add	r0, sp, #4
 801a8e8:	f7f2 fd00 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a8ec:	9800      	ldr	r0, [sp, #0]
 801a8ee:	3004      	adds	r0, #4
 801a8f0:	f7f2 fed5 	bl	800d69e <GUI_ALLOC_FreePtr>
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	9b00      	ldr	r3, [sp, #0]
 801a8f8:	801a      	strh	r2, [r3, #0]
 801a8fa:	4668      	mov	r0, sp
 801a8fc:	f7f2 fcf6 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a900:	4628      	mov	r0, r5
 801a902:	f7f2 fd23 	bl	800d34c <GUI_ALLOC_Free>
 801a906:	b003      	add	sp, #12
 801a908:	bd30      	pop	{r4, r5, pc}

0801a90a <GUI_ARRAY_GetpItemLocked>:
 801a90a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a90c:	460e      	mov	r6, r1
 801a90e:	4604      	mov	r4, r0
 801a910:	b158      	cbz	r0, 801a92a <GUI_ARRAY_GetpItemLocked+0x20>
 801a912:	ad02      	add	r5, sp, #8
 801a914:	f7f2 fcdc 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a918:	4631      	mov	r1, r6
 801a91a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a91e:	f7ff ffb3 	bl	801a888 <GUI_ARRAY__GetpItemLocked>
 801a922:	4604      	mov	r4, r0
 801a924:	4628      	mov	r0, r5
 801a926:	f7f2 fce1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a92a:	4620      	mov	r0, r4
 801a92c:	b002      	add	sp, #8
 801a92e:	bd70      	pop	{r4, r5, r6, pc}

0801a930 <GUI_ARRAY_Create>:
 801a930:	2008      	movs	r0, #8
 801a932:	f7f2 bec1 	b.w	800d6b8 <GUI_ALLOC_AllocZero>

0801a936 <GUI_DRAW__Draw>:
 801a936:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a93a:	460e      	mov	r6, r1
 801a93c:	4617      	mov	r7, r2
 801a93e:	4698      	mov	r8, r3
 801a940:	4605      	mov	r5, r0
 801a942:	b170      	cbz	r0, 801a962 <GUI_DRAW__Draw+0x2c>
 801a944:	f7f2 fcc4 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a948:	4604      	mov	r4, r0
 801a94a:	a802      	add	r0, sp, #8
 801a94c:	6823      	ldr	r3, [r4, #0]
 801a94e:	f840 4d04 	str.w	r4, [r0, #-4]!
 801a952:	681c      	ldr	r4, [r3, #0]
 801a954:	f7f2 fcca 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a958:	4643      	mov	r3, r8
 801a95a:	463a      	mov	r2, r7
 801a95c:	4631      	mov	r1, r6
 801a95e:	4628      	mov	r0, r5
 801a960:	47a0      	blx	r4
 801a962:	b002      	add	sp, #8
 801a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a968 <GUI_DRAW__GetXSize>:
 801a968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a96a:	4604      	mov	r4, r0
 801a96c:	b160      	cbz	r0, 801a988 <GUI_DRAW__GetXSize+0x20>
 801a96e:	f7f2 fcaf 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a972:	ab02      	add	r3, sp, #8
 801a974:	6802      	ldr	r2, [r0, #0]
 801a976:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a97a:	4618      	mov	r0, r3
 801a97c:	6855      	ldr	r5, [r2, #4]
 801a97e:	f7f2 fcb5 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a982:	4620      	mov	r0, r4
 801a984:	47a8      	blx	r5
 801a986:	e7ff      	b.n	801a988 <GUI_DRAW__GetXSize+0x20>
 801a988:	b003      	add	sp, #12
 801a98a:	bd30      	pop	{r4, r5, pc}

0801a98c <GUI_DRAW__GetYSize>:
 801a98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a98e:	4604      	mov	r4, r0
 801a990:	b160      	cbz	r0, 801a9ac <GUI_DRAW__GetYSize+0x20>
 801a992:	f7f2 fc9d 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a996:	ab02      	add	r3, sp, #8
 801a998:	6802      	ldr	r2, [r0, #0]
 801a99a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a99e:	4618      	mov	r0, r3
 801a9a0:	6895      	ldr	r5, [r2, #8]
 801a9a2:	f7f2 fca3 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a9a6:	4620      	mov	r0, r4
 801a9a8:	47a8      	blx	r5
 801a9aa:	e7ff      	b.n	801a9ac <GUI_DRAW__GetYSize+0x20>
 801a9ac:	b003      	add	sp, #12
 801a9ae:	bd30      	pop	{r4, r5, pc}

0801a9b0 <_DeleteTimer>:
 801a9b0:	b507      	push	{r0, r1, r2, lr}
 801a9b2:	f7f2 fc8d 	bl	800d2d0 <GUI_ALLOC_LockH>
 801a9b6:	9001      	str	r0, [sp, #4]
 801a9b8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801a9ba:	f7f8 fd75 	bl	80134a8 <WM_DeleteTimer>
 801a9be:	a802      	add	r0, sp, #8
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801a9c6:	665a      	str	r2, [r3, #100]	; 0x64
 801a9c8:	65da      	str	r2, [r3, #92]	; 0x5c
 801a9ca:	f7f2 fc8f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801a9ce:	b003      	add	sp, #12
 801a9d0:	f85d fb04 	ldr.w	pc, [sp], #4

0801a9d4 <SCROLLBAR__Rect2VRect>:
 801a9d4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801a9d6:	071b      	lsls	r3, r3, #28
 801a9d8:	b510      	push	{r4, lr}
 801a9da:	d514      	bpl.n	801aa06 <SCROLLBAR__Rect2VRect+0x32>
 801a9dc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a9e0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a9e4:	f9b1 0000 	ldrsh.w	r0, [r1]
 801a9e8:	1a9b      	subs	r3, r3, r2
 801a9ea:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801a9ee:	884c      	ldrh	r4, [r1, #2]
 801a9f0:	43c0      	mvns	r0, r0
 801a9f2:	3301      	adds	r3, #1
 801a9f4:	43d2      	mvns	r2, r2
 801a9f6:	800c      	strh	r4, [r1, #0]
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	88cc      	ldrh	r4, [r1, #6]
 801a9fc:	4418      	add	r0, r3
 801a9fe:	4413      	add	r3, r2
 801aa00:	808c      	strh	r4, [r1, #4]
 801aa02:	80c8      	strh	r0, [r1, #6]
 801aa04:	804b      	strh	r3, [r1, #2]
 801aa06:	bd10      	pop	{r4, pc}

0801aa08 <SCROLLBAR__InvalidatePartner>:
 801aa08:	b510      	push	{r4, lr}
 801aa0a:	4604      	mov	r4, r0
 801aa0c:	f7f8 f9fd 	bl	8012e0a <WM_GetScrollPartner>
 801aa10:	f7f7 fb60 	bl	80120d4 <WM_InvalidateWindow>
 801aa14:	4620      	mov	r0, r4
 801aa16:	f7f8 f987 	bl	8012d28 <WM_GetParent>
 801aa1a:	2125      	movs	r1, #37	; 0x25
 801aa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa20:	f7f8 bb5a 	b.w	80130d8 <WM_SendMessageNoPara>

0801aa24 <SCROLLBAR_CreateUser>:
 801aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa28:	4691      	mov	r9, r2
 801aa2a:	b089      	sub	sp, #36	; 0x24
 801aa2c:	4682      	mov	sl, r0
 801aa2e:	468b      	mov	fp, r1
 801aa30:	4698      	mov	r8, r3
 801aa32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801aa34:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801aa36:	f7f3 fd9b 	bl	800e570 <GUI_Lock>
 801aa3a:	f1b9 0f00 	cmp.w	r9, #0
 801aa3e:	d125      	bne.n	801aa8c <SCROLLBAR_CreateUser+0x68>
 801aa40:	f1b8 0f00 	cmp.w	r8, #0
 801aa44:	d122      	bne.n	801aa8c <SCROLLBAR_CreateUser+0x68>
 801aa46:	a906      	add	r1, sp, #24
 801aa48:	9812      	ldr	r0, [sp, #72]	; 0x48
 801aa4a:	f7f8 f954 	bl	8012cf6 <WM_GetInsideRectEx>
 801aa4e:	f017 0f08 	tst.w	r7, #8
 801aa52:	4b32      	ldr	r3, [pc, #200]	; (801ab1c <SCROLLBAR_CreateUser+0xf8>)
 801aa54:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801aa58:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801aa5c:	d00b      	beq.n	801aa76 <SCROLLBAR_CreateUser+0x52>
 801aa5e:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
 801aa62:	1c60      	adds	r0, r4, #1
 801aa64:	f9b3 9000 	ldrsh.w	r9, [r3]
 801aa68:	ebcb 0305 	rsb	r3, fp, r5
 801aa6c:	ebc9 0a00 	rsb	sl, r9, r0
 801aa70:	f103 0801 	add.w	r8, r3, #1
 801aa74:	e00a      	b.n	801aa8c <SCROLLBAR_CreateUser+0x68>
 801aa76:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801aa7a:	3501      	adds	r5, #1
 801aa7c:	f9b3 8000 	ldrsh.w	r8, [r3]
 801aa80:	ebca 0404 	rsb	r4, sl, r4
 801aa84:	ebc8 0b05 	rsb	fp, r8, r5
 801aa88:	f104 0901 	add.w	r9, r4, #1
 801aa8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801aa8e:	4659      	mov	r1, fp
 801aa90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aa92:	4650      	mov	r0, sl
 801aa94:	323c      	adds	r2, #60	; 0x3c
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	4643      	mov	r3, r8
 801aa9a:	9203      	str	r2, [sp, #12]
 801aa9c:	4a20      	ldr	r2, [pc, #128]	; (801ab20 <SCROLLBAR_CreateUser+0xfc>)
 801aa9e:	9202      	str	r2, [sp, #8]
 801aaa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aaa2:	9201      	str	r2, [sp, #4]
 801aaa4:	464a      	mov	r2, r9
 801aaa6:	f7f7 fb47 	bl	8012138 <WM_CreateWindowAsChild>
 801aaaa:	4680      	mov	r8, r0
 801aaac:	b378      	cbz	r0, 801ab0e <SCROLLBAR_CreateUser+0xea>
 801aaae:	f7f2 fc0f 	bl	800d2d0 <GUI_ALLOC_LockH>
 801aab2:	f007 0208 	and.w	r2, r7, #8
 801aab6:	06fb      	lsls	r3, r7, #27
 801aab8:	f1a6 03fe 	sub.w	r3, r6, #254	; 0xfe
 801aabc:	4631      	mov	r1, r6
 801aabe:	af08      	add	r7, sp, #32
 801aac0:	bf48      	it	mi
 801aac2:	f042 0210 	orrmi.w	r2, r2, #16
 801aac6:	4e15      	ldr	r6, [pc, #84]	; (801ab1c <SCROLLBAR_CreateUser+0xf8>)
 801aac8:	9005      	str	r0, [sp, #20]
 801aaca:	bf48      	it	mi
 801aacc:	b292      	uxthmi	r2, r2
 801aace:	2b01      	cmp	r3, #1
 801aad0:	bf88      	it	hi
 801aad2:	f042 0210 	orrhi.w	r2, r2, #16
 801aad6:	f7fa fb51 	bl	801517c <WIDGET__Init>
 801aada:	f857 4d0c 	ldr.w	r4, [r7, #-12]!
 801aade:	1d33      	adds	r3, r6, #4
 801aae0:	f104 0534 	add.w	r5, r4, #52	; 0x34
 801aae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aae6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801aaea:	2364      	movs	r3, #100	; 0x64
 801aaec:	4638      	mov	r0, r7
 801aaee:	64e3      	str	r3, [r4, #76]	; 0x4c
 801aaf0:	230a      	movs	r3, #10
 801aaf2:	6563      	str	r3, [r4, #84]	; 0x54
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	6523      	str	r3, [r4, #80]	; 0x50
 801aaf8:	6973      	ldr	r3, [r6, #20]
 801aafa:	6463      	str	r3, [r4, #68]	; 0x44
 801aafc:	f7f2 fbf6 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801ab00:	6973      	ldr	r3, [r6, #20]
 801ab02:	4640      	mov	r0, r8
 801ab04:	685b      	ldr	r3, [r3, #4]
 801ab06:	4798      	blx	r3
 801ab08:	4640      	mov	r0, r8
 801ab0a:	f7ff ff7d 	bl	801aa08 <SCROLLBAR__InvalidatePartner>
 801ab0e:	f7f3 fd25 	bl	800e55c <GUI_Unlock>
 801ab12:	4640      	mov	r0, r8
 801ab14:	b009      	add	sp, #36	; 0x24
 801ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab1a:	bf00      	nop
 801ab1c:	2000013c 	.word	0x2000013c
 801ab20:	0801ac15 	.word	0x0801ac15

0801ab24 <SCROLLBAR_CreateEx>:
 801ab24:	b510      	push	{r4, lr}
 801ab26:	2400      	movs	r4, #0
 801ab28:	b086      	sub	sp, #24
 801ab2a:	9404      	str	r4, [sp, #16]
 801ab2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ab2e:	9403      	str	r4, [sp, #12]
 801ab30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ab32:	9402      	str	r4, [sp, #8]
 801ab34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ab36:	9401      	str	r4, [sp, #4]
 801ab38:	9c08      	ldr	r4, [sp, #32]
 801ab3a:	9400      	str	r4, [sp, #0]
 801ab3c:	f7ff ff72 	bl	801aa24 <SCROLLBAR_CreateUser>
 801ab40:	b006      	add	sp, #24
 801ab42:	bd10      	pop	{r4, pc}

0801ab44 <SCROLLBAR_CreateAttached>:
 801ab44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab46:	f001 0308 	and.w	r3, r1, #8
 801ab4a:	f240 348a 	movw	r4, #906	; 0x38a
 801ab4e:	9102      	str	r1, [sp, #8]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	f240 538a 	movw	r3, #1418	; 0x58a
 801ab56:	bf0a      	itet	eq
 801ab58:	4623      	moveq	r3, r4
 801ab5a:	22fe      	movne	r2, #254	; 0xfe
 801ab5c:	22ff      	moveq	r2, #255	; 0xff
 801ab5e:	e88d 0009 	stmia.w	sp, {r0, r3}
 801ab62:	2300      	movs	r3, #0
 801ab64:	9203      	str	r2, [sp, #12]
 801ab66:	4619      	mov	r1, r3
 801ab68:	461a      	mov	r2, r3
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7ff ffda 	bl	801ab24 <SCROLLBAR_CreateEx>
 801ab70:	4604      	mov	r4, r0
 801ab72:	2106      	movs	r1, #6
 801ab74:	f7f8 fad0 	bl	8013118 <WM_NotifyParent>
 801ab78:	4620      	mov	r0, r4
 801ab7a:	b004      	add	sp, #16
 801ab7c:	bd10      	pop	{r4, pc}

0801ab7e <SCROLLBAR_SetValue>:
 801ab7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab80:	460d      	mov	r5, r1
 801ab82:	4604      	mov	r4, r0
 801ab84:	b328      	cbz	r0, 801abd2 <SCROLLBAR_SetValue+0x54>
 801ab86:	f7f3 fcf3 	bl	800e570 <GUI_Lock>
 801ab8a:	4620      	mov	r0, r4
 801ab8c:	f7f2 fba0 	bl	800d2d0 <GUI_ALLOC_LockH>
 801ab90:	2d00      	cmp	r5, #0
 801ab92:	9001      	str	r0, [sp, #4]
 801ab94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801ab96:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801ab98:	db05      	blt.n	801aba6 <SCROLLBAR_SetValue+0x28>
 801ab9a:	1a9b      	subs	r3, r3, r2
 801ab9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aba0:	429d      	cmp	r5, r3
 801aba2:	dc02      	bgt.n	801abaa <SCROLLBAR_SetValue+0x2c>
 801aba4:	e000      	b.n	801aba8 <SCROLLBAR_SetValue+0x2a>
 801aba6:	2500      	movs	r5, #0
 801aba8:	462b      	mov	r3, r5
 801abaa:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801abac:	429a      	cmp	r2, r3
 801abae:	d00b      	beq.n	801abc8 <SCROLLBAR_SetValue+0x4a>
 801abb0:	6503      	str	r3, [r0, #80]	; 0x50
 801abb2:	4620      	mov	r0, r4
 801abb4:	f7f7 fa8e 	bl	80120d4 <WM_InvalidateWindow>
 801abb8:	a801      	add	r0, sp, #4
 801abba:	f7f2 fb97 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801abbe:	2105      	movs	r1, #5
 801abc0:	4620      	mov	r0, r4
 801abc2:	f7f8 faa9 	bl	8013118 <WM_NotifyParent>
 801abc6:	e002      	b.n	801abce <SCROLLBAR_SetValue+0x50>
 801abc8:	a801      	add	r0, sp, #4
 801abca:	f7f2 fb8f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801abce:	f7f3 fcc5 	bl	800e55c <GUI_Unlock>
 801abd2:	b003      	add	sp, #12
 801abd4:	bd30      	pop	{r4, r5, pc}

0801abd6 <SCROLLBAR_AddValue>:
 801abd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801abd8:	460e      	mov	r6, r1
 801abda:	4604      	mov	r4, r0
 801abdc:	b188      	cbz	r0, 801ac02 <SCROLLBAR_AddValue+0x2c>
 801abde:	f7f3 fcc7 	bl	800e570 <GUI_Lock>
 801abe2:	4620      	mov	r0, r4
 801abe4:	f7f2 fb74 	bl	800d2d0 <GUI_ALLOC_LockH>
 801abe8:	ab02      	add	r3, sp, #8
 801abea:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801abec:	f843 0d04 	str.w	r0, [r3, #-4]!
 801abf0:	4618      	mov	r0, r3
 801abf2:	f7f2 fb7b 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801abf6:	1971      	adds	r1, r6, r5
 801abf8:	4620      	mov	r0, r4
 801abfa:	f7ff ffc0 	bl	801ab7e <SCROLLBAR_SetValue>
 801abfe:	f7f3 fcad 	bl	800e55c <GUI_Unlock>
 801ac02:	b002      	add	sp, #8
 801ac04:	bd70      	pop	{r4, r5, r6, pc}

0801ac06 <SCROLLBAR_Dec>:
 801ac06:	f04f 31ff 	mov.w	r1, #4294967295
 801ac0a:	f7ff bfe4 	b.w	801abd6 <SCROLLBAR_AddValue>

0801ac0e <SCROLLBAR_Inc>:
 801ac0e:	2101      	movs	r1, #1
 801ac10:	f7ff bfe1 	b.w	801abd6 <SCROLLBAR_AddValue>

0801ac14 <SCROLLBAR_Callback>:
 801ac14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac18:	6844      	ldr	r4, [r0, #4]
 801ac1a:	b08f      	sub	sp, #60	; 0x3c
 801ac1c:	4680      	mov	r8, r0
 801ac1e:	4601      	mov	r1, r0
 801ac20:	4620      	mov	r0, r4
 801ac22:	f7fa fafe 	bl	8015222 <WIDGET_HandleActive>
 801ac26:	2800      	cmp	r0, #0
 801ac28:	f000 81bc 	beq.w	801afa4 <SCROLLBAR_Callback+0x390>
 801ac2c:	f8d8 3000 	ldr.w	r3, [r8]
 801ac30:	2b23      	cmp	r3, #35	; 0x23
 801ac32:	f000 817e 	beq.w	801af32 <SCROLLBAR_Callback+0x31e>
 801ac36:	dc0b      	bgt.n	801ac50 <SCROLLBAR_Callback+0x3c>
 801ac38:	2b0e      	cmp	r3, #14
 801ac3a:	f000 8128 	beq.w	801ae8e <SCROLLBAR_Callback+0x27a>
 801ac3e:	2b0f      	cmp	r3, #15
 801ac40:	d012      	beq.n	801ac68 <SCROLLBAR_Callback+0x54>
 801ac42:	2b0b      	cmp	r3, #11
 801ac44:	f040 81ab 	bne.w	801af9e <SCROLLBAR_Callback+0x38a>
 801ac48:	4620      	mov	r0, r4
 801ac4a:	f7ff fedd 	bl	801aa08 <SCROLLBAR__InvalidatePartner>
 801ac4e:	e1a6      	b.n	801af9e <SCROLLBAR_Callback+0x38a>
 801ac50:	f240 1213 	movw	r2, #275	; 0x113
 801ac54:	4293      	cmp	r3, r2
 801ac56:	f000 817b 	beq.w	801af50 <SCROLLBAR_Callback+0x33c>
 801ac5a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801ac5e:	d012      	beq.n	801ac86 <SCROLLBAR_Callback+0x72>
 801ac60:	2b24      	cmp	r3, #36	; 0x24
 801ac62:	f040 819c 	bne.w	801af9e <SCROLLBAR_Callback+0x38a>
 801ac66:	e140      	b.n	801aeea <SCROLLBAR_Callback+0x2d6>
 801ac68:	4620      	mov	r0, r4
 801ac6a:	f7f2 fb31 	bl	800d2d0 <GUI_ALLOC_LockH>
 801ac6e:	9005      	str	r0, [sp, #20]
 801ac70:	2800      	cmp	r0, #0
 801ac72:	f000 8197 	beq.w	801afa4 <SCROLLBAR_Callback+0x390>
 801ac76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801ac78:	a805      	add	r0, sp, #20
 801ac7a:	681d      	ldr	r5, [r3, #0]
 801ac7c:	f7f2 fb36 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801ac80:	4620      	mov	r0, r4
 801ac82:	47a8      	blx	r5
 801ac84:	e18e      	b.n	801afa4 <SCROLLBAR_Callback+0x390>
 801ac86:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801ac8a:	2e00      	cmp	r6, #0
 801ac8c:	f000 8187 	beq.w	801af9e <SCROLLBAR_Callback+0x38a>
 801ac90:	7a33      	ldrb	r3, [r6, #8]
 801ac92:	4620      	mov	r0, r4
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	f000 80d5 	beq.w	801ae44 <SCROLLBAR_Callback+0x230>
 801ac9a:	f7f2 fb19 	bl	800d2d0 <GUI_ALLOC_LockH>
 801ac9e:	a905      	add	r1, sp, #20
 801aca0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801aca2:	9003      	str	r0, [sp, #12]
 801aca4:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801aca6:	4620      	mov	r0, r4
 801aca8:	4798      	blx	r3
 801acaa:	9a03      	ldr	r2, [sp, #12]
 801acac:	f8b2 a032 	ldrh.w	sl, [r2, #50]	; 0x32
 801acb0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801acb2:	f01a 0f08 	tst.w	sl, #8
 801acb6:	6d55      	ldr	r5, [r2, #84]	; 0x54
 801acb8:	bf18      	it	ne
 801acba:	6871      	ldrne	r1, [r6, #4]
 801acbc:	ebc5 0903 	rsb	r9, r5, r3
 801acc0:	bf1c      	itt	ne
 801acc2:	6833      	ldrne	r3, [r6, #0]
 801acc4:	e886 000a 	stmiane.w	r6, {r1, r3}
 801acc8:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801acca:	6836      	ldr	r6, [r6, #0]
 801accc:	2903      	cmp	r1, #3
 801acce:	d114      	bne.n	801acfa <SCROLLBAR_Callback+0xe6>
 801acd0:	4620      	mov	r0, r4
 801acd2:	f7ff fe6d 	bl	801a9b0 <_DeleteTimer>
 801acd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acd8:	2002      	movs	r0, #2
 801acda:	990c      	ldr	r1, [sp, #48]	; 0x30
 801acdc:	fb93 f0f0 	sdiv	r0, r3, r0
 801ace0:	1a36      	subs	r6, r6, r0
 801ace2:	9806      	ldr	r0, [sp, #24]
 801ace4:	1a30      	subs	r0, r6, r0
 801ace6:	3801      	subs	r0, #1
 801ace8:	fb09 f000 	mul.w	r0, r9, r0
 801acec:	f7f4 f858 	bl	800eda0 <GUI__DivideRound32>
 801acf0:	9b03      	ldr	r3, [sp, #12]
 801acf2:	4607      	mov	r7, r0
 801acf4:	6618      	str	r0, [r3, #96]	; 0x60
 801acf6:	a803      	add	r0, sp, #12
 801acf8:	e07d      	b.n	801adf6 <SCROLLBAR_Callback+0x1e2>
 801acfa:	9806      	ldr	r0, [sp, #24]
 801acfc:	4286      	cmp	r6, r0
 801acfe:	dc0b      	bgt.n	801ad18 <SCROLLBAR_Callback+0x104>
 801ad00:	2902      	cmp	r1, #2
 801ad02:	d039      	beq.n	801ad78 <SCROLLBAR_Callback+0x164>
 801ad04:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801ad06:	b113      	cbz	r3, 801ad0e <SCROLLBAR_Callback+0xfa>
 801ad08:	4620      	mov	r0, r4
 801ad0a:	f7ff fe51 	bl	801a9b0 <_DeleteTimer>
 801ad0e:	2202      	movs	r2, #2
 801ad10:	9b03      	ldr	r3, [sp, #12]
 801ad12:	3f01      	subs	r7, #1
 801ad14:	659a      	str	r2, [r3, #88]	; 0x58
 801ad16:	e02f      	b.n	801ad78 <SCROLLBAR_Callback+0x164>
 801ad18:	9b07      	ldr	r3, [sp, #28]
 801ad1a:	429e      	cmp	r6, r3
 801ad1c:	da02      	bge.n	801ad24 <SCROLLBAR_Callback+0x110>
 801ad1e:	1b7f      	subs	r7, r7, r5
 801ad20:	426d      	negs	r5, r5
 801ad22:	e02f      	b.n	801ad84 <SCROLLBAR_Callback+0x170>
 801ad24:	9b08      	ldr	r3, [sp, #32]
 801ad26:	429e      	cmp	r6, r3
 801ad28:	dc12      	bgt.n	801ad50 <SCROLLBAR_Callback+0x13c>
 801ad2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ad2c:	2900      	cmp	r1, #0
 801ad2e:	dd0b      	ble.n	801ad48 <SCROLLBAR_Callback+0x134>
 801ad30:	2202      	movs	r2, #2
 801ad32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad34:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad38:	1af6      	subs	r6, r6, r3
 801ad3a:	1a36      	subs	r6, r6, r0
 801ad3c:	3e01      	subs	r6, #1
 801ad3e:	fb06 f009 	mul.w	r0, r6, r9
 801ad42:	f7f4 f82d 	bl	800eda0 <GUI__DivideRound32>
 801ad46:	4607      	mov	r7, r0
 801ad48:	2203      	movs	r2, #3
 801ad4a:	9b03      	ldr	r3, [sp, #12]
 801ad4c:	659a      	str	r2, [r3, #88]	; 0x58
 801ad4e:	e016      	b.n	801ad7e <SCROLLBAR_Callback+0x16a>
 801ad50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad52:	429e      	cmp	r6, r3
 801ad54:	da01      	bge.n	801ad5a <SCROLLBAR_Callback+0x146>
 801ad56:	442f      	add	r7, r5
 801ad58:	e014      	b.n	801ad84 <SCROLLBAR_Callback+0x170>
 801ad5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad5c:	429e      	cmp	r6, r3
 801ad5e:	dc0e      	bgt.n	801ad7e <SCROLLBAR_Callback+0x16a>
 801ad60:	2901      	cmp	r1, #1
 801ad62:	d00e      	beq.n	801ad82 <SCROLLBAR_Callback+0x16e>
 801ad64:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801ad66:	b113      	cbz	r3, 801ad6e <SCROLLBAR_Callback+0x15a>
 801ad68:	4620      	mov	r0, r4
 801ad6a:	f7ff fe21 	bl	801a9b0 <_DeleteTimer>
 801ad6e:	2501      	movs	r5, #1
 801ad70:	9b03      	ldr	r3, [sp, #12]
 801ad72:	3701      	adds	r7, #1
 801ad74:	659d      	str	r5, [r3, #88]	; 0x58
 801ad76:	e005      	b.n	801ad84 <SCROLLBAR_Callback+0x170>
 801ad78:	f04f 35ff 	mov.w	r5, #4294967295
 801ad7c:	e002      	b.n	801ad84 <SCROLLBAR_Callback+0x170>
 801ad7e:	2500      	movs	r5, #0
 801ad80:	e000      	b.n	801ad84 <SCROLLBAR_Callback+0x170>
 801ad82:	460d      	mov	r5, r1
 801ad84:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801ad88:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ad8a:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 801ad8e:	b181      	cbz	r1, 801adb2 <SCROLLBAR_Callback+0x19e>
 801ad90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad92:	2002      	movs	r0, #2
 801ad94:	9301      	str	r3, [sp, #4]
 801ad96:	fb92 f0f0 	sdiv	r0, r2, r0
 801ad9a:	1a36      	subs	r6, r6, r0
 801ad9c:	9806      	ldr	r0, [sp, #24]
 801ad9e:	1a30      	subs	r0, r6, r0
 801ada0:	3801      	subs	r0, #1
 801ada2:	fb09 f000 	mul.w	r0, r9, r0
 801ada6:	f7f3 fffb 	bl	800eda0 <GUI__DivideRound32>
 801adaa:	9b01      	ldr	r3, [sp, #4]
 801adac:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 801adb0:	e009      	b.n	801adc6 <SCROLLBAR_Callback+0x1b2>
 801adb2:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 801adb6:	2a01      	cmp	r2, #1
 801adb8:	bf04      	itt	eq
 801adba:	f8db 104c 	ldreq.w	r1, [fp, #76]	; 0x4c
 801adbe:	f101 31ff 	addeq.w	r1, r1, #4294967295
 801adc2:	f8cb 1060 	str.w	r1, [fp, #96]	; 0x60
 801adc6:	a803      	add	r0, sp, #12
 801adc8:	9301      	str	r3, [sp, #4]
 801adca:	f7f2 fa8f 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801adce:	9b01      	ldr	r3, [sp, #4]
 801add0:	b1a5      	cbz	r5, 801adfc <SCROLLBAR_Callback+0x1e8>
 801add2:	b9bb      	cbnz	r3, 801ae04 <SCROLLBAR_Callback+0x1f0>
 801add4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801add8:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801addc:	4620      	mov	r0, r4
 801adde:	f7f8 fba5 	bl	801352c <WM_CreateTimer>
 801ade2:	4606      	mov	r6, r0
 801ade4:	4620      	mov	r0, r4
 801ade6:	f7f2 fa73 	bl	800d2d0 <GUI_ALLOC_LockH>
 801adea:	ab0e      	add	r3, sp, #56	; 0x38
 801adec:	f843 0d28 	str.w	r0, [r3, #-40]!
 801adf0:	6646      	str	r6, [r0, #100]	; 0x64
 801adf2:	65c5      	str	r5, [r0, #92]	; 0x5c
 801adf4:	4618      	mov	r0, r3
 801adf6:	f7f2 fa79 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801adfa:	e003      	b.n	801ae04 <SCROLLBAR_Callback+0x1f0>
 801adfc:	b113      	cbz	r3, 801ae04 <SCROLLBAR_Callback+0x1f0>
 801adfe:	4620      	mov	r0, r4
 801ae00:	f7ff fdd6 	bl	801a9b0 <_DeleteTimer>
 801ae04:	2101      	movs	r1, #1
 801ae06:	4620      	mov	r0, r4
 801ae08:	f7ff fc3e 	bl	801a688 <WM_SetCapture>
 801ae0c:	4639      	mov	r1, r7
 801ae0e:	4620      	mov	r0, r4
 801ae10:	f7ff feb5 	bl	801ab7e <SCROLLBAR_SetValue>
 801ae14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801ae18:	f040 80c1 	bne.w	801af9e <SCROLLBAR_Callback+0x38a>
 801ae1c:	4620      	mov	r0, r4
 801ae1e:	f7f2 fa57 	bl	800d2d0 <GUI_ALLOC_LockH>
 801ae22:	ab0e      	add	r3, sp, #56	; 0x38
 801ae24:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801ae26:	f843 0d28 	str.w	r0, [r3, #-40]!
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	f7f2 fa5e 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801ae30:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ae34:	4620      	mov	r0, r4
 801ae36:	f7fa f9c0 	bl	80151ba <WIDGET_OrState>
 801ae3a:	07a9      	lsls	r1, r5, #30
 801ae3c:	f140 80af 	bpl.w	801af9e <SCROLLBAR_Callback+0x38a>
 801ae40:	2101      	movs	r1, #1
 801ae42:	e070      	b.n	801af26 <SCROLLBAR_Callback+0x312>
 801ae44:	f7f2 fa44 	bl	800d2d0 <GUI_ALLOC_LockH>
 801ae48:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 801ae4a:	9003      	str	r0, [sp, #12]
 801ae4c:	a803      	add	r0, sp, #12
 801ae4e:	f7f2 fa4d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801ae52:	05ea      	lsls	r2, r5, #23
 801ae54:	f140 80a3 	bpl.w	801af9e <SCROLLBAR_Callback+0x38a>
 801ae58:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	f7fa f9c6 	bl	80151ee <WIDGET_AndState>
 801ae62:	4620      	mov	r0, r4
 801ae64:	f7f2 fa34 	bl	800d2d0 <GUI_ALLOC_LockH>
 801ae68:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801ae6a:	9005      	str	r0, [sp, #20]
 801ae6c:	b113      	cbz	r3, 801ae74 <SCROLLBAR_Callback+0x260>
 801ae6e:	4620      	mov	r0, r4
 801ae70:	f7ff fd9e 	bl	801a9b0 <_DeleteTimer>
 801ae74:	a80e      	add	r0, sp, #56	; 0x38
 801ae76:	2200      	movs	r2, #0
 801ae78:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 801ae7c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801ae7e:	659a      	str	r2, [r3, #88]	; 0x58
 801ae80:	f7f2 fa34 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801ae84:	07ab      	lsls	r3, r5, #30
 801ae86:	f140 808a 	bpl.w	801af9e <SCROLLBAR_Callback+0x38a>
 801ae8a:	2102      	movs	r1, #2
 801ae8c:	e04b      	b.n	801af26 <SCROLLBAR_Callback+0x312>
 801ae8e:	4620      	mov	r0, r4
 801ae90:	f7f2 fa1e 	bl	800d2d0 <GUI_ALLOC_LockH>
 801ae94:	ab0e      	add	r3, sp, #56	; 0x38
 801ae96:	6d45      	ldr	r5, [r0, #84]	; 0x54
 801ae98:	f843 0d24 	str.w	r0, [r3, #-36]!
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	f7f2 fa25 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801aea2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aea6:	685a      	ldr	r2, [r3, #4]
 801aea8:	2a00      	cmp	r2, #0
 801aeaa:	dd78      	ble.n	801af9e <SCROLLBAR_Callback+0x38a>
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	3b10      	subs	r3, #16
 801aeb0:	2b12      	cmp	r3, #18
 801aeb2:	d874      	bhi.n	801af9e <SCROLLBAR_Callback+0x38a>
 801aeb4:	e8df f003 	tbb	[pc, r3]
 801aeb8:	11111515 	.word	0x11111515
 801aebc:	73737373 	.word	0x73737373
 801aec0:	73737373 	.word	0x73737373
 801aec4:	73737373 	.word	0x73737373
 801aec8:	0a73      	.short	0x0a73
 801aeca:	0c          	.byte	0x0c
 801aecb:	00          	.byte	0x00
 801aecc:	4629      	mov	r1, r5
 801aece:	e000      	b.n	801aed2 <SCROLLBAR_Callback+0x2be>
 801aed0:	4269      	negs	r1, r5
 801aed2:	4620      	mov	r0, r4
 801aed4:	f7ff fe7f 	bl	801abd6 <SCROLLBAR_AddValue>
 801aed8:	e061      	b.n	801af9e <SCROLLBAR_Callback+0x38a>
 801aeda:	4620      	mov	r0, r4
 801aedc:	f7ff fe97 	bl	801ac0e <SCROLLBAR_Inc>
 801aee0:	e05d      	b.n	801af9e <SCROLLBAR_Callback+0x38a>
 801aee2:	4620      	mov	r0, r4
 801aee4:	f7ff fe8f 	bl	801ac06 <SCROLLBAR_Dec>
 801aee8:	e059      	b.n	801af9e <SCROLLBAR_Callback+0x38a>
 801aeea:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801aeee:	4620      	mov	r0, r4
 801aef0:	f7f2 f9ee 	bl	800d2d0 <GUI_ALLOC_LockH>
 801aef4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801aef6:	6831      	ldr	r1, [r6, #0]
 801aef8:	ad0e      	add	r5, sp, #56	; 0x38
 801aefa:	68b2      	ldr	r2, [r6, #8]
 801aefc:	4299      	cmp	r1, r3
 801aefe:	f845 0d24 	str.w	r0, [r5, #-36]!
 801af02:	6873      	ldr	r3, [r6, #4]
 801af04:	d105      	bne.n	801af12 <SCROLLBAR_Callback+0x2fe>
 801af06:	6d46      	ldr	r6, [r0, #84]	; 0x54
 801af08:	4296      	cmp	r6, r2
 801af0a:	d102      	bne.n	801af12 <SCROLLBAR_Callback+0x2fe>
 801af0c:	6d06      	ldr	r6, [r0, #80]	; 0x50
 801af0e:	429e      	cmp	r6, r3
 801af10:	d00d      	beq.n	801af2e <SCROLLBAR_Callback+0x31a>
 801af12:	64c1      	str	r1, [r0, #76]	; 0x4c
 801af14:	6542      	str	r2, [r0, #84]	; 0x54
 801af16:	6503      	str	r3, [r0, #80]	; 0x50
 801af18:	4620      	mov	r0, r4
 801af1a:	f7f7 f8db 	bl	80120d4 <WM_InvalidateWindow>
 801af1e:	4628      	mov	r0, r5
 801af20:	f7f2 f9e4 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801af24:	2105      	movs	r1, #5
 801af26:	4620      	mov	r0, r4
 801af28:	f7f8 f8f6 	bl	8013118 <WM_NotifyParent>
 801af2c:	e037      	b.n	801af9e <SCROLLBAR_Callback+0x38a>
 801af2e:	4628      	mov	r0, r5
 801af30:	e033      	b.n	801af9a <SCROLLBAR_Callback+0x386>
 801af32:	4620      	mov	r0, r4
 801af34:	f7f2 f9cc 	bl	800d2d0 <GUI_ALLOC_LockH>
 801af38:	9005      	str	r0, [sp, #20]
 801af3a:	2800      	cmp	r0, #0
 801af3c:	d02f      	beq.n	801af9e <SCROLLBAR_Callback+0x38a>
 801af3e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801af40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801af44:	601a      	str	r2, [r3, #0]
 801af46:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801af48:	609a      	str	r2, [r3, #8]
 801af4a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801af4c:	605a      	str	r2, [r3, #4]
 801af4e:	e023      	b.n	801af98 <SCROLLBAR_Callback+0x384>
 801af50:	4620      	mov	r0, r4
 801af52:	f7f2 f9bd 	bl	800d2d0 <GUI_ALLOC_LockH>
 801af56:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 801af58:	9005      	str	r0, [sp, #20]
 801af5a:	b111      	cbz	r1, 801af62 <SCROLLBAR_Callback+0x34e>
 801af5c:	4620      	mov	r0, r4
 801af5e:	f7ff fe3a 	bl	801abd6 <SCROLLBAR_AddValue>
 801af62:	9b05      	ldr	r3, [sp, #20]
 801af64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801af66:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801af68:	2a00      	cmp	r2, #0
 801af6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801af6c:	dd05      	ble.n	801af7a <SCROLLBAR_Callback+0x366>
 801af6e:	4291      	cmp	r1, r2
 801af70:	bfac      	ite	ge
 801af72:	2101      	movge	r1, #1
 801af74:	2100      	movlt	r1, #0
 801af76:	dd06      	ble.n	801af86 <SCROLLBAR_Callback+0x372>
 801af78:	e004      	b.n	801af84 <SCROLLBAR_Callback+0x370>
 801af7a:	4291      	cmp	r1, r2
 801af7c:	bfd4      	ite	le
 801af7e:	2101      	movle	r1, #1
 801af80:	2100      	movgt	r1, #0
 801af82:	da00      	bge.n	801af86 <SCROLLBAR_Callback+0x372>
 801af84:	651a      	str	r2, [r3, #80]	; 0x50
 801af86:	b119      	cbz	r1, 801af90 <SCROLLBAR_Callback+0x37c>
 801af88:	4620      	mov	r0, r4
 801af8a:	f7ff fd11 	bl	801a9b0 <_DeleteTimer>
 801af8e:	e003      	b.n	801af98 <SCROLLBAR_Callback+0x384>
 801af90:	2132      	movs	r1, #50	; 0x32
 801af92:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801af94:	f7f8 fafe 	bl	8013594 <WM_RestartTimer>
 801af98:	a805      	add	r0, sp, #20
 801af9a:	f7f2 f9a7 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801af9e:	4640      	mov	r0, r8
 801afa0:	f7f7 fd00 	bl	80129a4 <WM_DefaultProc>
 801afa4:	b00f      	add	sp, #60	; 0x3c
 801afa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801afac <_Create>:
 801afac:	b530      	push	{r4, r5, lr}
 801afae:	b08d      	sub	sp, #52	; 0x34
 801afb0:	4605      	mov	r5, r0
 801afb2:	f7f2 f98d 	bl	800d2d0 <GUI_ALLOC_LockH>
 801afb6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801afb8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801afba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801afbe:	9000      	str	r0, [sp, #0]
 801afc0:	9301      	str	r3, [sp, #4]
 801afc2:	4b07      	ldr	r3, [pc, #28]	; (801afe0 <_Create+0x34>)
 801afc4:	6483      	str	r3, [r0, #72]	; 0x48
 801afc6:	4668      	mov	r0, sp
 801afc8:	f7f2 f990 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801afcc:	2300      	movs	r3, #0
 801afce:	9503      	str	r5, [sp, #12]
 801afd0:	a803      	add	r0, sp, #12
 801afd2:	9304      	str	r3, [sp, #16]
 801afd4:	ab01      	add	r3, sp, #4
 801afd6:	930b      	str	r3, [sp, #44]	; 0x2c
 801afd8:	47a0      	blx	r4
 801afda:	b00d      	add	sp, #52	; 0x34
 801afdc:	bd30      	pop	{r4, r5, pc}
 801afde:	bf00      	nop
 801afe0:	0801afe5 	.word	0x0801afe5

0801afe4 <_CalcPositions>:
 801afe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afe8:	b090      	sub	sp, #64	; 0x40
 801afea:	4604      	mov	r4, r0
 801afec:	460d      	mov	r5, r1
 801afee:	f7f2 f96f 	bl	800d2d0 <GUI_ALLOC_LockH>
 801aff2:	4603      	mov	r3, r0
 801aff4:	9000      	str	r0, [sp, #0]
 801aff6:	ae03      	add	r6, sp, #12
 801aff8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801affa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801affc:	f002 0208 	and.w	r2, r2, #8
 801b000:	c803      	ldmia	r0, {r0, r1}
 801b002:	2a00      	cmp	r2, #0
 801b004:	9407      	str	r4, [sp, #28]
 801b006:	e886 0003 	stmia.w	r6, {r0, r1}
 801b00a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801b00e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801b012:	bf08      	it	eq
 801b014:	4602      	moveq	r2, r0
 801b016:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b01a:	bf18      	it	ne
 801b01c:	460a      	movne	r2, r1
 801b01e:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801b022:	900d      	str	r0, [sp, #52]	; 0x34
 801b024:	a807      	add	r0, sp, #28
 801b026:	61aa      	str	r2, [r5, #24]
 801b028:	bf14      	ite	ne
 801b02a:	2201      	movne	r2, #1
 801b02c:	2200      	moveq	r2, #0
 801b02e:	970b      	str	r7, [sp, #44]	; 0x2c
 801b030:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801b034:	9201      	str	r2, [sp, #4]
 801b036:	2219      	movs	r2, #25
 801b038:	910e      	str	r1, [sp, #56]	; 0x38
 801b03a:	9208      	str	r2, [sp, #32]
 801b03c:	aa01      	add	r2, sp, #4
 801b03e:	920f      	str	r2, [sp, #60]	; 0x3c
 801b040:	4798      	blx	r3
 801b042:	9b00      	ldr	r3, [sp, #0]
 801b044:	4604      	mov	r4, r0
 801b046:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801b04a:	2aff      	cmp	r2, #255	; 0xff
 801b04c:	d112      	bne.n	801b074 <_CalcPositions+0x90>
 801b04e:	6998      	ldr	r0, [r3, #24]
 801b050:	f7f7 fecd 	bl	8012dee <WM_GetScrollbarV>
 801b054:	b170      	cbz	r0, 801b074 <_CalcPositions+0x90>
 801b056:	a905      	add	r1, sp, #20
 801b058:	f7f7 fef6 	bl	8012e48 <WM_GetWindowRectEx>
 801b05c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b060:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b064:	429a      	cmp	r2, r3
 801b066:	bf02      	ittt	eq
 801b068:	f8bd 3014 	ldrheq.w	r3, [sp, #20]
 801b06c:	f103 33ff 	addeq.w	r3, r3, #4294967295
 801b070:	f8ad 3010 	strheq.w	r3, [sp, #16]
 801b074:	9b00      	ldr	r3, [sp, #0]
 801b076:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801b07a:	2afe      	cmp	r2, #254	; 0xfe
 801b07c:	d112      	bne.n	801b0a4 <_CalcPositions+0xc0>
 801b07e:	6998      	ldr	r0, [r3, #24]
 801b080:	f7f7 fea7 	bl	8012dd2 <WM_GetScrollbarH>
 801b084:	b170      	cbz	r0, 801b0a4 <_CalcPositions+0xc0>
 801b086:	a905      	add	r1, sp, #20
 801b088:	f7f7 fede 	bl	8012e48 <WM_GetWindowRectEx>
 801b08c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b090:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801b094:	429a      	cmp	r2, r3
 801b096:	bf02      	ittt	eq
 801b098:	f8bd 3016 	ldrheq.w	r3, [sp, #22]
 801b09c:	f103 33ff 	addeq.w	r3, r3, #4294967295
 801b0a0:	f8ad 3012 	strheq.w	r3, [sp, #18]
 801b0a4:	f1c8 0200 	rsb	r2, r8, #0
 801b0a8:	4279      	negs	r1, r7
 801b0aa:	4630      	mov	r0, r6
 801b0ac:	f7f2 fbc1 	bl	800d832 <GUI_MoveRect>
 801b0b0:	4631      	mov	r1, r6
 801b0b2:	9800      	ldr	r0, [sp, #0]
 801b0b4:	f7ff fc8e 	bl	801a9d4 <SCROLLBAR__Rect2VRect>
 801b0b8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b0bc:	f9bd 8010 	ldrsh.w	r8, [sp, #16]
 801b0c0:	9b00      	ldr	r3, [sp, #0]
 801b0c2:	ebc2 0808 	rsb	r8, r2, r8
 801b0c6:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 801b0ca:	f108 0601 	add.w	r6, r8, #1
 801b0ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801b0d0:	4651      	mov	r1, sl
 801b0d2:	eba6 0644 	sub.w	r6, r6, r4, lsl #1
 801b0d6:	4370      	muls	r0, r6
 801b0d8:	f7f3 fe62 	bl	800eda0 <GUI__DivideRound32>
 801b0dc:	4b17      	ldr	r3, [pc, #92]	; (801b13c <_CalcPositions+0x158>)
 801b0de:	f8c5 8014 	str.w	r8, [r5, #20]
 801b0e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0e6:	1c5a      	adds	r2, r3, #1
 801b0e8:	4290      	cmp	r0, r2
 801b0ea:	bfd8      	it	le
 801b0ec:	1c98      	addle	r0, r3, #2
 801b0ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b0f2:	42b0      	cmp	r0, r6
 801b0f4:	602b      	str	r3, [r5, #0]
 801b0f6:	f104 33ff 	add.w	r3, r4, #4294967295
 801b0fa:	bfa8      	it	ge
 801b0fc:	4630      	movge	r0, r6
 801b0fe:	606b      	str	r3, [r5, #4]
 801b100:	ebc0 0906 	rsb	r9, r0, r6
 801b104:	4426      	add	r6, r4
 801b106:	4607      	mov	r7, r0
 801b108:	612e      	str	r6, [r5, #16]
 801b10a:	ae10      	add	r6, sp, #64	; 0x40
 801b10c:	f856 3d40 	ldr.w	r3, [r6, #-64]!
 801b110:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b112:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801b114:	ebc1 010a 	rsb	r1, r1, sl
 801b118:	fb00 f009 	mul.w	r0, r0, r9
 801b11c:	f7f3 fe40 	bl	800eda0 <GUI__DivideRound32>
 801b120:	4420      	add	r0, r4
 801b122:	f8c5 901c 	str.w	r9, [r5, #28]
 801b126:	19c4      	adds	r4, r0, r7
 801b128:	60a8      	str	r0, [r5, #8]
 801b12a:	622f      	str	r7, [r5, #32]
 801b12c:	4630      	mov	r0, r6
 801b12e:	3c01      	subs	r4, #1
 801b130:	60ec      	str	r4, [r5, #12]
 801b132:	f7f2 f8db 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801b136:	b010      	add	sp, #64	; 0x40
 801b138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b13c:	20000154 	.word	0x20000154

0801b140 <_Paint>:
 801b140:	b570      	push	{r4, r5, r6, lr}
 801b142:	b098      	sub	sp, #96	; 0x60
 801b144:	4606      	mov	r6, r0
 801b146:	f7f2 f8c3 	bl	800d2d0 <GUI_ALLOC_LockH>
 801b14a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801b14c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801b14e:	a906      	add	r1, sp, #24
 801b150:	9305      	str	r3, [sp, #20]
 801b152:	4605      	mov	r5, r0
 801b154:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801b156:	9001      	str	r0, [sp, #4]
 801b158:	4630      	mov	r0, r6
 801b15a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b15e:	9304      	str	r3, [sp, #16]
 801b160:	f7ff ff40 	bl	801afe4 <_CalcPositions>
 801b164:	a801      	add	r0, sp, #4
 801b166:	f7f2 f8c1 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801b16a:	a902      	add	r1, sp, #8
 801b16c:	4628      	mov	r0, r5
 801b16e:	f7f9 ffde 	bl	801512e <WIDGET__GetClientRect>
 801b172:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801b176:	960f      	str	r6, [sp, #60]	; 0x3c
 801b178:	a80f      	add	r0, sp, #60	; 0x3c
 801b17a:	9314      	str	r3, [sp, #80]	; 0x50
 801b17c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b180:	9316      	str	r3, [sp, #88]	; 0x58
 801b182:	ab04      	add	r3, sp, #16
 801b184:	9317      	str	r3, [sp, #92]	; 0x5c
 801b186:	2308      	movs	r3, #8
 801b188:	9310      	str	r3, [sp, #64]	; 0x40
 801b18a:	9b06      	ldr	r3, [sp, #24]
 801b18c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b18e:	9b07      	ldr	r3, [sp, #28]
 801b190:	9315      	str	r3, [sp, #84]	; 0x54
 801b192:	47a0      	blx	r4
 801b194:	2310      	movs	r3, #16
 801b196:	a80f      	add	r0, sp, #60	; 0x3c
 801b198:	9310      	str	r3, [sp, #64]	; 0x40
 801b19a:	9b07      	ldr	r3, [sp, #28]
 801b19c:	3301      	adds	r3, #1
 801b19e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1a0:	9b08      	ldr	r3, [sp, #32]
 801b1a2:	3b01      	subs	r3, #1
 801b1a4:	9315      	str	r3, [sp, #84]	; 0x54
 801b1a6:	47a0      	blx	r4
 801b1a8:	2311      	movs	r3, #17
 801b1aa:	a80f      	add	r0, sp, #60	; 0x3c
 801b1ac:	9310      	str	r3, [sp, #64]	; 0x40
 801b1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1b0:	3301      	adds	r3, #1
 801b1b2:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1b6:	3b01      	subs	r3, #1
 801b1b8:	9315      	str	r3, [sp, #84]	; 0x54
 801b1ba:	47a0      	blx	r4
 801b1bc:	2313      	movs	r3, #19
 801b1be:	a80f      	add	r0, sp, #60	; 0x3c
 801b1c0:	9310      	str	r3, [sp, #64]	; 0x40
 801b1c2:	9b08      	ldr	r3, [sp, #32]
 801b1c4:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1c8:	9315      	str	r3, [sp, #84]	; 0x54
 801b1ca:	47a0      	blx	r4
 801b1cc:	2309      	movs	r3, #9
 801b1ce:	a80f      	add	r0, sp, #60	; 0x3c
 801b1d0:	9310      	str	r3, [sp, #64]	; 0x40
 801b1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1d4:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1d8:	9315      	str	r3, [sp, #84]	; 0x54
 801b1da:	47a0      	blx	r4
 801b1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b1e0:	4293      	cmp	r3, r2
 801b1e2:	d006      	beq.n	801b1f2 <_Paint+0xb2>
 801b1e4:	210c      	movs	r1, #12
 801b1e6:	3301      	adds	r3, #1
 801b1e8:	9215      	str	r2, [sp, #84]	; 0x54
 801b1ea:	a80f      	add	r0, sp, #60	; 0x3c
 801b1ec:	9110      	str	r1, [sp, #64]	; 0x40
 801b1ee:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1f0:	47a0      	blx	r4
 801b1f2:	b018      	add	sp, #96	; 0x60
 801b1f4:	bd70      	pop	{r4, r5, r6, pc}

0801b1f6 <_GetArrowPara>:
 801b1f6:	b510      	push	{r4, lr}
 801b1f8:	b121      	cbz	r1, 801b204 <_GetArrowPara+0xe>
 801b1fa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b1fe:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b202:	e003      	b.n	801b20c <_GetArrowPara+0x16>
 801b204:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b208:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801b20c:	1a09      	subs	r1, r1, r0
 801b20e:	2403      	movs	r4, #3
 801b210:	3101      	adds	r1, #1
 801b212:	1f08      	subs	r0, r1, #4
 801b214:	fb90 f0f4 	sdiv	r0, r0, r4
 801b218:	6010      	str	r0, [r2, #0]
 801b21a:	1a08      	subs	r0, r1, r0
 801b21c:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 801b220:	3901      	subs	r1, #1
 801b222:	6019      	str	r1, [r3, #0]
 801b224:	bd10      	pop	{r4, pc}

0801b226 <_DrawGraspH>:
 801b226:	b570      	push	{r4, r5, r6, lr}
 801b228:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b22c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b230:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801b234:	441c      	add	r4, r3
 801b236:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b23a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801b23c:	1b5e      	subs	r6, r3, r5
 801b23e:	1064      	asrs	r4, r4, #1
 801b240:	3603      	adds	r6, #3
 801b242:	10b6      	asrs	r6, r6, #2
 801b244:	4435      	add	r5, r6
 801b246:	1b9e      	subs	r6, r3, r6
 801b248:	f7f2 fbe6 	bl	800da18 <GUI_SetColor>
 801b24c:	4620      	mov	r0, r4
 801b24e:	4632      	mov	r2, r6
 801b250:	4629      	mov	r1, r5
 801b252:	f7fa ff67 	bl	8016124 <GUI_DrawVLine>
 801b256:	4632      	mov	r2, r6
 801b258:	4629      	mov	r1, r5
 801b25a:	1ca0      	adds	r0, r4, #2
 801b25c:	f7fa ff62 	bl	8016124 <GUI_DrawVLine>
 801b260:	4632      	mov	r2, r6
 801b262:	4629      	mov	r1, r5
 801b264:	1d20      	adds	r0, r4, #4
 801b266:	f7fa ff5d 	bl	8016124 <GUI_DrawVLine>
 801b26a:	4632      	mov	r2, r6
 801b26c:	4629      	mov	r1, r5
 801b26e:	1ea0      	subs	r0, r4, #2
 801b270:	f7fa ff58 	bl	8016124 <GUI_DrawVLine>
 801b274:	4632      	mov	r2, r6
 801b276:	4629      	mov	r1, r5
 801b278:	1f20      	subs	r0, r4, #4
 801b27a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b27e:	f7fa bf51 	b.w	8016124 <GUI_DrawVLine>

0801b282 <_DrawGraspV>:
 801b282:	b570      	push	{r4, r5, r6, lr}
 801b284:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b288:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801b28c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b290:	441c      	add	r4, r3
 801b292:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b296:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801b298:	1b5e      	subs	r6, r3, r5
 801b29a:	1064      	asrs	r4, r4, #1
 801b29c:	3603      	adds	r6, #3
 801b29e:	10b6      	asrs	r6, r6, #2
 801b2a0:	4435      	add	r5, r6
 801b2a2:	1b9e      	subs	r6, r3, r6
 801b2a4:	f7f2 fbb8 	bl	800da18 <GUI_SetColor>
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	4632      	mov	r2, r6
 801b2ac:	4629      	mov	r1, r5
 801b2ae:	f7fa fee3 	bl	8016078 <GUI_DrawHLine>
 801b2b2:	4632      	mov	r2, r6
 801b2b4:	4629      	mov	r1, r5
 801b2b6:	1ca0      	adds	r0, r4, #2
 801b2b8:	f7fa fede 	bl	8016078 <GUI_DrawHLine>
 801b2bc:	4632      	mov	r2, r6
 801b2be:	4629      	mov	r1, r5
 801b2c0:	1d20      	adds	r0, r4, #4
 801b2c2:	f7fa fed9 	bl	8016078 <GUI_DrawHLine>
 801b2c6:	4632      	mov	r2, r6
 801b2c8:	4629      	mov	r1, r5
 801b2ca:	1ea0      	subs	r0, r4, #2
 801b2cc:	f7fa fed4 	bl	8016078 <GUI_DrawHLine>
 801b2d0:	4632      	mov	r2, r6
 801b2d2:	4629      	mov	r1, r5
 801b2d4:	1f20      	subs	r0, r4, #4
 801b2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b2da:	f7fa becd 	b.w	8016078 <GUI_DrawHLine>

0801b2de <_DrawFrame>:
 801b2de:	b538      	push	{r3, r4, r5, lr}
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	6808      	ldr	r0, [r1, #0]
 801b2e4:	460d      	mov	r5, r1
 801b2e6:	f7f2 fb97 	bl	800da18 <GUI_SetColor>
 801b2ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b2ee:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b2f2:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801b2f6:	3a01      	subs	r2, #1
 801b2f8:	3101      	adds	r1, #1
 801b2fa:	f7fa febd 	bl	8016078 <GUI_DrawHLine>
 801b2fe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b302:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b306:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801b30a:	3a01      	subs	r2, #1
 801b30c:	3101      	adds	r1, #1
 801b30e:	f7fa feb3 	bl	8016078 <GUI_DrawHLine>
 801b312:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b316:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b31a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b31e:	3a01      	subs	r2, #1
 801b320:	3101      	adds	r1, #1
 801b322:	f7fa feff 	bl	8016124 <GUI_DrawVLine>
 801b326:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b32a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b32e:	3a01      	subs	r2, #1
 801b330:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b334:	3101      	adds	r1, #1
 801b336:	f7fa fef5 	bl	8016124 <GUI_DrawVLine>
 801b33a:	6868      	ldr	r0, [r5, #4]
 801b33c:	f7f2 fb6c 	bl	800da18 <GUI_SetColor>
 801b340:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b344:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b348:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801b34c:	3a01      	subs	r2, #1
 801b34e:	3101      	adds	r1, #1
 801b350:	3001      	adds	r0, #1
 801b352:	f7fa fe91 	bl	8016078 <GUI_DrawHLine>
 801b356:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b35a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b35e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801b362:	3a01      	subs	r2, #1
 801b364:	3101      	adds	r1, #1
 801b366:	3801      	subs	r0, #1
 801b368:	f7fa fe86 	bl	8016078 <GUI_DrawHLine>
 801b36c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b370:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b374:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b378:	3a02      	subs	r2, #2
 801b37a:	3102      	adds	r1, #2
 801b37c:	3001      	adds	r0, #1
 801b37e:	f7fa fed1 	bl	8016124 <GUI_DrawVLine>
 801b382:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b386:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b38a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b38e:	3a02      	subs	r2, #2
 801b390:	3102      	adds	r1, #2
 801b392:	3801      	subs	r0, #1
 801b394:	f7fa fec6 	bl	8016124 <GUI_DrawVLine>
 801b398:	68a8      	ldr	r0, [r5, #8]
 801b39a:	f7f2 fb3d 	bl	800da18 <GUI_SetColor>
 801b39e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b3a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b3a6:	f7fa fe95 	bl	80160d4 <GUI_DrawPixel>
 801b3aa:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b3ae:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b3b2:	f7fa fe8f 	bl	80160d4 <GUI_DrawPixel>
 801b3b6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b3ba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b3be:	f7fa fe89 	bl	80160d4 <GUI_DrawPixel>
 801b3c2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b3c6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3ce:	f7fa be81 	b.w	80160d4 <GUI_DrawPixel>

0801b3d2 <_DrawBackgroundH>:
 801b3d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b3d4:	4604      	mov	r4, r0
 801b3d6:	460d      	mov	r5, r1
 801b3d8:	f7ff ff81 	bl	801b2de <_DrawFrame>
 801b3dc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b3e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b3e4:	692e      	ldr	r6, [r5, #16]
 801b3e6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b3ea:	440b      	add	r3, r1
 801b3ec:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b3f0:	3102      	adds	r1, #2
 801b3f2:	9601      	str	r6, [sp, #4]
 801b3f4:	105b      	asrs	r3, r3, #1
 801b3f6:	68ee      	ldr	r6, [r5, #12]
 801b3f8:	3a02      	subs	r2, #2
 801b3fa:	3002      	adds	r0, #2
 801b3fc:	9600      	str	r6, [sp, #0]
 801b3fe:	f7fa fdc7 	bl	8015f90 <GUI_DrawGradientV>
 801b402:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b406:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b40a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b40e:	4419      	add	r1, r3
 801b410:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b414:	69ac      	ldr	r4, [r5, #24]
 801b416:	3b02      	subs	r3, #2
 801b418:	1049      	asrs	r1, r1, #1
 801b41a:	3a02      	subs	r2, #2
 801b41c:	9401      	str	r4, [sp, #4]
 801b41e:	3002      	adds	r0, #2
 801b420:	696c      	ldr	r4, [r5, #20]
 801b422:	3101      	adds	r1, #1
 801b424:	9400      	str	r4, [sp, #0]
 801b426:	f7fa fdb3 	bl	8015f90 <GUI_DrawGradientV>
 801b42a:	b002      	add	sp, #8
 801b42c:	bd70      	pop	{r4, r5, r6, pc}

0801b42e <_DrawBackgroundV>:
 801b42e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b430:	4604      	mov	r4, r0
 801b432:	460d      	mov	r5, r1
 801b434:	f7ff ff53 	bl	801b2de <_DrawFrame>
 801b438:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b43c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b440:	692e      	ldr	r6, [r5, #16]
 801b442:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b446:	4402      	add	r2, r0
 801b448:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b44c:	3002      	adds	r0, #2
 801b44e:	9601      	str	r6, [sp, #4]
 801b450:	3b02      	subs	r3, #2
 801b452:	68ee      	ldr	r6, [r5, #12]
 801b454:	1052      	asrs	r2, r2, #1
 801b456:	3102      	adds	r1, #2
 801b458:	9600      	str	r6, [sp, #0]
 801b45a:	f7fa fdd3 	bl	8016004 <GUI_DrawGradientH>
 801b45e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b462:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b466:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b46a:	4410      	add	r0, r2
 801b46c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b470:	69ac      	ldr	r4, [r5, #24]
 801b472:	3b02      	subs	r3, #2
 801b474:	1040      	asrs	r0, r0, #1
 801b476:	3a02      	subs	r2, #2
 801b478:	9401      	str	r4, [sp, #4]
 801b47a:	3102      	adds	r1, #2
 801b47c:	696c      	ldr	r4, [r5, #20]
 801b47e:	3001      	adds	r0, #1
 801b480:	9400      	str	r4, [sp, #0]
 801b482:	f7fa fdbf 	bl	8016004 <GUI_DrawGradientH>
 801b486:	b002      	add	sp, #8
 801b488:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b48c <SCROLLBAR_DrawSkinFlex>:
 801b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b490:	b08a      	sub	sp, #40	; 0x28
 801b492:	4604      	mov	r4, r0
 801b494:	6800      	ldr	r0, [r0, #0]
 801b496:	f7f1 ff1b 	bl	800d2d0 <GUI_ALLOC_LockH>
 801b49a:	4680      	mov	r8, r0
 801b49c:	a80a      	add	r0, sp, #40	; 0x28
 801b49e:	ae06      	add	r6, sp, #24
 801b4a0:	f10d 0920 	add.w	r9, sp, #32
 801b4a4:	f840 8d1c 	str.w	r8, [r0, #-28]!
 801b4a8:	f7f1 ff20 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801b4ac:	6923      	ldr	r3, [r4, #16]
 801b4ae:	6a25      	ldr	r5, [r4, #32]
 801b4b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b4b4:	6963      	ldr	r3, [r4, #20]
 801b4b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b4ba:	69a3      	ldr	r3, [r4, #24]
 801b4bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b4c0:	69e3      	ldr	r3, [r4, #28]
 801b4c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b4c6:	682b      	ldr	r3, [r5, #0]
 801b4c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b4cc:	e889 0003 	stmia.w	r9, {r0, r1}
 801b4d0:	b14b      	cbz	r3, 801b4e6 <SCROLLBAR_DrawSkinFlex+0x5a>
 801b4d2:	4632      	mov	r2, r6
 801b4d4:	4631      	mov	r1, r6
 801b4d6:	4640      	mov	r0, r8
 801b4d8:	4f4e      	ldr	r7, [pc, #312]	; (801b614 <SCROLLBAR_DrawSkinFlex+0x188>)
 801b4da:	f7f9 fe14 	bl	8015106 <WIDGET__RotateRect90>
 801b4de:	f8df a148 	ldr.w	sl, [pc, #328]	; 801b628 <SCROLLBAR_DrawSkinFlex+0x19c>
 801b4e2:	4a4d      	ldr	r2, [pc, #308]	; (801b618 <SCROLLBAR_DrawSkinFlex+0x18c>)
 801b4e4:	e003      	b.n	801b4ee <SCROLLBAR_DrawSkinFlex+0x62>
 801b4e6:	4f4d      	ldr	r7, [pc, #308]	; (801b61c <SCROLLBAR_DrawSkinFlex+0x190>)
 801b4e8:	f8df a140 	ldr.w	sl, [pc, #320]	; 801b62c <SCROLLBAR_DrawSkinFlex+0x1a0>
 801b4ec:	4a4c      	ldr	r2, [pc, #304]	; (801b620 <SCROLLBAR_DrawSkinFlex+0x194>)
 801b4ee:	6863      	ldr	r3, [r4, #4]
 801b4f0:	3b08      	subs	r3, #8
 801b4f2:	2b11      	cmp	r3, #17
 801b4f4:	f200 808a 	bhi.w	801b60c <SCROLLBAR_DrawSkinFlex+0x180>
 801b4f8:	e8df f003 	tbb	[pc, r3]
 801b4fc:	88886413 	.word	0x88886413
 801b500:	88888837 	.word	0x88888837
 801b504:	46883737 	.word	0x46883737
 801b508:	88888888 	.word	0x88888888
 801b50c:	0988      	.short	0x0988
 801b50e:	682b      	ldr	r3, [r5, #0]
 801b510:	b113      	cbz	r3, 801b518 <SCROLLBAR_DrawSkinFlex+0x8c>
 801b512:	69a3      	ldr	r3, [r4, #24]
 801b514:	6920      	ldr	r0, [r4, #16]
 801b516:	e001      	b.n	801b51c <SCROLLBAR_DrawSkinFlex+0x90>
 801b518:	69e3      	ldr	r3, [r4, #28]
 801b51a:	6960      	ldr	r0, [r4, #20]
 801b51c:	1a18      	subs	r0, r3, r0
 801b51e:	3001      	adds	r0, #1
 801b520:	e075      	b.n	801b60e <SCROLLBAR_DrawSkinFlex+0x182>
 801b522:	4b40      	ldr	r3, [pc, #256]	; (801b624 <SCROLLBAR_DrawSkinFlex+0x198>)
 801b524:	4630      	mov	r0, r6
 801b526:	686c      	ldr	r4, [r5, #4]
 801b528:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 801b52c:	2c02      	cmp	r4, #2
 801b52e:	bf0c      	ite	eq
 801b530:	461c      	moveq	r4, r3
 801b532:	460c      	movne	r4, r1
 801b534:	4621      	mov	r1, r4
 801b536:	4790      	blx	r2
 801b538:	ab05      	add	r3, sp, #20
 801b53a:	aa04      	add	r2, sp, #16
 801b53c:	6829      	ldr	r1, [r5, #0]
 801b53e:	4648      	mov	r0, r9
 801b540:	f7ff fe59 	bl	801b1f6 <_GetArrowPara>
 801b544:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b546:	f7f2 fa67 	bl	800da18 <GUI_SetColor>
 801b54a:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801b54e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801b552:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801b556:	1a9a      	subs	r2, r3, r2
 801b558:	9905      	ldr	r1, [sp, #20]
 801b55a:	f04f 33ff 	mov.w	r3, #4294967295
 801b55e:	3201      	adds	r2, #1
 801b560:	4401      	add	r1, r0
 801b562:	9300      	str	r3, [sp, #0]
 801b564:	1052      	asrs	r2, r2, #1
 801b566:	9b04      	ldr	r3, [sp, #16]
 801b568:	e04d      	b.n	801b606 <SCROLLBAR_DrawSkinFlex+0x17a>
 801b56a:	4c2e      	ldr	r4, [pc, #184]	; (801b624 <SCROLLBAR_DrawSkinFlex+0x198>)
 801b56c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b570:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801b572:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b576:	9501      	str	r5, [sp, #4]
 801b578:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 801b57a:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 801b57e:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801b582:	9400      	str	r4, [sp, #0]
 801b584:	47d0      	blx	sl
 801b586:	e041      	b.n	801b60c <SCROLLBAR_DrawSkinFlex+0x180>
 801b588:	4b26      	ldr	r3, [pc, #152]	; (801b624 <SCROLLBAR_DrawSkinFlex+0x198>)
 801b58a:	4630      	mov	r0, r6
 801b58c:	686c      	ldr	r4, [r5, #4]
 801b58e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 801b592:	2c03      	cmp	r4, #3
 801b594:	bf0c      	ite	eq
 801b596:	461c      	moveq	r4, r3
 801b598:	460c      	movne	r4, r1
 801b59a:	4621      	mov	r1, r4
 801b59c:	4790      	blx	r2
 801b59e:	682b      	ldr	r3, [r5, #0]
 801b5a0:	b123      	cbz	r3, 801b5ac <SCROLLBAR_DrawSkinFlex+0x120>
 801b5a2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b5a6:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801b5aa:	e003      	b.n	801b5b4 <SCROLLBAR_DrawSkinFlex+0x128>
 801b5ac:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b5b0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801b5b4:	1a9b      	subs	r3, r3, r2
 801b5b6:	3301      	adds	r3, #1
 801b5b8:	2b0e      	cmp	r3, #14
 801b5ba:	dd27      	ble.n	801b60c <SCROLLBAR_DrawSkinFlex+0x180>
 801b5bc:	4621      	mov	r1, r4
 801b5be:	4630      	mov	r0, r6
 801b5c0:	47b8      	blx	r7
 801b5c2:	e023      	b.n	801b60c <SCROLLBAR_DrawSkinFlex+0x180>
 801b5c4:	4b17      	ldr	r3, [pc, #92]	; (801b624 <SCROLLBAR_DrawSkinFlex+0x198>)
 801b5c6:	4630      	mov	r0, r6
 801b5c8:	686c      	ldr	r4, [r5, #4]
 801b5ca:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 801b5ce:	2c01      	cmp	r4, #1
 801b5d0:	bf0c      	ite	eq
 801b5d2:	461c      	moveq	r4, r3
 801b5d4:	460c      	movne	r4, r1
 801b5d6:	4621      	mov	r1, r4
 801b5d8:	4790      	blx	r2
 801b5da:	ab05      	add	r3, sp, #20
 801b5dc:	aa04      	add	r2, sp, #16
 801b5de:	6829      	ldr	r1, [r5, #0]
 801b5e0:	4648      	mov	r0, r9
 801b5e2:	f7ff fe08 	bl	801b1f6 <_GetArrowPara>
 801b5e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b5e8:	f7f2 fa16 	bl	800da18 <GUI_SetColor>
 801b5ec:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801b5f0:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801b5f4:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801b5f8:	1a9a      	subs	r2, r3, r2
 801b5fa:	9905      	ldr	r1, [sp, #20]
 801b5fc:	2301      	movs	r3, #1
 801b5fe:	1052      	asrs	r2, r2, #1
 801b600:	1a41      	subs	r1, r0, r1
 801b602:	9300      	str	r3, [sp, #0]
 801b604:	9b04      	ldr	r3, [sp, #16]
 801b606:	4640      	mov	r0, r8
 801b608:	f7f9 feae 	bl	8015368 <WIDGET__DrawTriangle>
 801b60c:	2000      	movs	r0, #0
 801b60e:	b00a      	add	sp, #40	; 0x28
 801b610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b614:	0801b283 	.word	0x0801b283
 801b618:	0801b42f 	.word	0x0801b42f
 801b61c:	0801b227 	.word	0x0801b227
 801b620:	0801b3d3 	.word	0x0801b3d3
 801b624:	20000164 	.word	0x20000164
 801b628:	08016005 	.word	0x08016005
 801b62c:	08015f91 	.word	0x08015f91

0801b630 <GUIPROP__FindChar>:
 801b630:	b138      	cbz	r0, 801b642 <GUIPROP__FindChar+0x12>
 801b632:	8803      	ldrh	r3, [r0, #0]
 801b634:	428b      	cmp	r3, r1
 801b636:	d802      	bhi.n	801b63e <GUIPROP__FindChar+0xe>
 801b638:	8843      	ldrh	r3, [r0, #2]
 801b63a:	428b      	cmp	r3, r1
 801b63c:	d201      	bcs.n	801b642 <GUIPROP__FindChar+0x12>
 801b63e:	6880      	ldr	r0, [r0, #8]
 801b640:	e7f6      	b.n	801b630 <GUIPROP__FindChar>
 801b642:	4770      	bx	lr

0801b644 <GUIPROP_DispChar>:
 801b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b648:	4c38      	ldr	r4, [pc, #224]	; (801b72c <GUIPROP_DispChar+0xe8>)
 801b64a:	b089      	sub	sp, #36	; 0x24
 801b64c:	4606      	mov	r6, r0
 801b64e:	4601      	mov	r1, r0
 801b650:	6823      	ldr	r3, [r4, #0]
 801b652:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 801b656:	69db      	ldr	r3, [r3, #28]
 801b658:	69d8      	ldr	r0, [r3, #28]
 801b65a:	f7ff ffe9 	bl	801b630 <GUIPROP__FindChar>
 801b65e:	2800      	cmp	r0, #0
 801b660:	d060      	beq.n	801b724 <GUIPROP_DispChar+0xe0>
 801b662:	8805      	ldrh	r5, [r0, #0]
 801b664:	6847      	ldr	r7, [r0, #4]
 801b666:	4640      	mov	r0, r8
 801b668:	1b75      	subs	r5, r6, r5
 801b66a:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 801b66e:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b672:	f7f3 fc4d 	bl	800ef10 <LCD_SetDrawMode>
 801b676:	f8d4 c000 	ldr.w	ip, [r4]
 801b67a:	4681      	mov	r9, r0
 801b67c:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 801b680:	f8dc e01c 	ldr.w	lr, [ip, #28]
 801b684:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 801b688:	f89e b018 	ldrb.w	fp, [lr, #24]
 801b68c:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 801b690:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 801b694:	f04f 0c01 	mov.w	ip, #1
 801b698:	9305      	str	r3, [sp, #20]
 801b69a:	6873      	ldr	r3, [r6, #4]
 801b69c:	f8cd a00c 	str.w	sl, [sp, #12]
 801b6a0:	9304      	str	r3, [sp, #16]
 801b6a2:	465b      	mov	r3, fp
 801b6a4:	f8cd c008 	str.w	ip, [sp, #8]
 801b6a8:	f89e c01b 	ldrb.w	ip, [lr, #27]
 801b6ac:	f8cd c004 	str.w	ip, [sp, #4]
 801b6b0:	f89e e01a 	ldrb.w	lr, [lr, #26]
 801b6b4:	f8cd e000 	str.w	lr, [sp]
 801b6b8:	f7f3 fdca 	bl	800f250 <LCD_DrawBitmap>
 801b6bc:	6823      	ldr	r3, [r4, #0]
 801b6be:	69db      	ldr	r3, [r3, #28]
 801b6c0:	7e59      	ldrb	r1, [r3, #25]
 801b6c2:	f893 a018 	ldrb.w	sl, [r3, #24]
 801b6c6:	9107      	str	r1, [sp, #28]
 801b6c8:	4551      	cmp	r1, sl
 801b6ca:	d920      	bls.n	801b70e <GUIPROP_DispChar+0xca>
 801b6cc:	f1b8 0f02 	cmp.w	r8, #2
 801b6d0:	d01d      	beq.n	801b70e <GUIPROP_DispChar+0xca>
 801b6d2:	f893 b01b 	ldrb.w	fp, [r3, #27]
 801b6d6:	f7f2 f844 	bl	800d762 <GUI_GetColor>
 801b6da:	4680      	mov	r8, r0
 801b6dc:	f7f2 f835 	bl	800d74a <GUI_GetBkColor>
 801b6e0:	f7f2 f99a 	bl	800da18 <GUI_SetColor>
 801b6e4:	6823      	ldr	r3, [r4, #0]
 801b6e6:	9907      	ldr	r1, [sp, #28]
 801b6e8:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 801b6ec:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 801b6f0:	69db      	ldr	r3, [r3, #28]
 801b6f2:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 801b6f6:	7eda      	ldrb	r2, [r3, #27]
 801b6f8:	fb0b e301 	mla	r3, fp, r1, lr
 801b6fc:	fb0b e10a 	mla	r1, fp, sl, lr
 801b700:	fb05 0202 	mla	r2, r5, r2, r0
 801b704:	f7f3 fc8c 	bl	800f020 <LCD_FillRect>
 801b708:	4640      	mov	r0, r8
 801b70a:	f7f2 f985 	bl	800da18 <GUI_SetColor>
 801b70e:	4648      	mov	r0, r9
 801b710:	f7f3 fbfe 	bl	800ef10 <LCD_SetDrawMode>
 801b714:	6823      	ldr	r3, [r4, #0]
 801b716:	7871      	ldrb	r1, [r6, #1]
 801b718:	69da      	ldr	r2, [r3, #28]
 801b71a:	7e90      	ldrb	r0, [r2, #26]
 801b71c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801b71e:	fb00 2201 	mla	r2, r0, r1, r2
 801b722:	845a      	strh	r2, [r3, #34]	; 0x22
 801b724:	b009      	add	sp, #36	; 0x24
 801b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b72a:	bf00      	nop
 801b72c:	20000018 	.word	0x20000018

0801b730 <GUIPROP_GetCharDistX>:
 801b730:	b538      	push	{r3, r4, r5, lr}
 801b732:	4b0d      	ldr	r3, [pc, #52]	; (801b768 <GUIPROP_GetCharDistX+0x38>)
 801b734:	4602      	mov	r2, r0
 801b736:	460c      	mov	r4, r1
 801b738:	4601      	mov	r1, r0
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	69dd      	ldr	r5, [r3, #28]
 801b73e:	69e8      	ldr	r0, [r5, #28]
 801b740:	f7ff ff76 	bl	801b630 <GUIPROP__FindChar>
 801b744:	b170      	cbz	r0, 801b764 <GUIPROP_GetCharDistX+0x34>
 801b746:	8803      	ldrh	r3, [r0, #0]
 801b748:	1ad2      	subs	r2, r2, r3
 801b74a:	6843      	ldr	r3, [r0, #4]
 801b74c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801b750:	7848      	ldrb	r0, [r1, #1]
 801b752:	7ea9      	ldrb	r1, [r5, #26]
 801b754:	fb10 f001 	smulbb	r0, r0, r1
 801b758:	b124      	cbz	r4, 801b764 <GUIPROP_GetCharDistX+0x34>
 801b75a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 801b75e:	fb11 f303 	smulbb	r3, r1, r3
 801b762:	6023      	str	r3, [r4, #0]
 801b764:	bd38      	pop	{r3, r4, r5, pc}
 801b766:	bf00      	nop
 801b768:	20000018 	.word	0x20000018

0801b76c <GUIPROP_GetFontInfo>:
 801b76c:	2301      	movs	r3, #1
 801b76e:	800b      	strh	r3, [r1, #0]
 801b770:	4770      	bx	lr

0801b772 <GUIPROP_IsInFont>:
 801b772:	b508      	push	{r3, lr}
 801b774:	69c0      	ldr	r0, [r0, #28]
 801b776:	f7ff ff5b 	bl	801b630 <GUIPROP__FindChar>
 801b77a:	3000      	adds	r0, #0
 801b77c:	bf18      	it	ne
 801b77e:	2001      	movne	r0, #1
 801b780:	bd08      	pop	{r3, pc}

0801b782 <WM_HideWindow>:
 801b782:	b513      	push	{r0, r1, r4, lr}
 801b784:	4604      	mov	r4, r0
 801b786:	b1b0      	cbz	r0, 801b7b6 <WM_HideWindow+0x34>
 801b788:	f7f2 fef2 	bl	800e570 <GUI_Lock>
 801b78c:	4620      	mov	r0, r4
 801b78e:	f7f1 fd9f 	bl	800d2d0 <GUI_ALLOC_LockH>
 801b792:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b794:	ac02      	add	r4, sp, #8
 801b796:	0791      	lsls	r1, r2, #30
 801b798:	f844 0d04 	str.w	r0, [r4, #-4]!
 801b79c:	d506      	bpl.n	801b7ac <WM_HideWindow+0x2a>
 801b79e:	f022 0202 	bic.w	r2, r2, #2
 801b7a2:	6981      	ldr	r1, [r0, #24]
 801b7a4:	6282      	str	r2, [r0, #40]	; 0x28
 801b7a6:	6a02      	ldr	r2, [r0, #32]
 801b7a8:	f7f6 fc3b 	bl	8012022 <WM__InvalidateRectEx>
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	f7f1 fd9d 	bl	800d2ec <GUI_ALLOC_UnlockH>
 801b7b2:	f7f2 fed3 	bl	800e55c <GUI_Unlock>
 801b7b6:	b002      	add	sp, #8
 801b7b8:	bd10      	pop	{r4, pc}
	...

0801b7bc <__errno>:
 801b7bc:	4b01      	ldr	r3, [pc, #4]	; (801b7c4 <__errno+0x8>)
 801b7be:	6818      	ldr	r0, [r3, #0]
 801b7c0:	4770      	bx	lr
 801b7c2:	bf00      	nop
 801b7c4:	20000210 	.word	0x20000210

0801b7c8 <__libc_init_array>:
 801b7c8:	b570      	push	{r4, r5, r6, lr}
 801b7ca:	4e0d      	ldr	r6, [pc, #52]	; (801b800 <__libc_init_array+0x38>)
 801b7cc:	4c0d      	ldr	r4, [pc, #52]	; (801b804 <__libc_init_array+0x3c>)
 801b7ce:	1ba4      	subs	r4, r4, r6
 801b7d0:	10a4      	asrs	r4, r4, #2
 801b7d2:	2500      	movs	r5, #0
 801b7d4:	42a5      	cmp	r5, r4
 801b7d6:	d109      	bne.n	801b7ec <__libc_init_array+0x24>
 801b7d8:	4e0b      	ldr	r6, [pc, #44]	; (801b808 <__libc_init_array+0x40>)
 801b7da:	4c0c      	ldr	r4, [pc, #48]	; (801b80c <__libc_init_array+0x44>)
 801b7dc:	f000 f91e 	bl	801ba1c <_init>
 801b7e0:	1ba4      	subs	r4, r4, r6
 801b7e2:	10a4      	asrs	r4, r4, #2
 801b7e4:	2500      	movs	r5, #0
 801b7e6:	42a5      	cmp	r5, r4
 801b7e8:	d105      	bne.n	801b7f6 <__libc_init_array+0x2e>
 801b7ea:	bd70      	pop	{r4, r5, r6, pc}
 801b7ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b7f0:	4798      	blx	r3
 801b7f2:	3501      	adds	r5, #1
 801b7f4:	e7ee      	b.n	801b7d4 <__libc_init_array+0xc>
 801b7f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b7fa:	4798      	blx	r3
 801b7fc:	3501      	adds	r5, #1
 801b7fe:	e7f2      	b.n	801b7e6 <__libc_init_array+0x1e>
 801b800:	0801eac0 	.word	0x0801eac0
 801b804:	0801eac0 	.word	0x0801eac0
 801b808:	0801eac0 	.word	0x0801eac0
 801b80c:	0801eac4 	.word	0x0801eac4

0801b810 <malloc>:
 801b810:	4b02      	ldr	r3, [pc, #8]	; (801b81c <malloc+0xc>)
 801b812:	4601      	mov	r1, r0
 801b814:	6818      	ldr	r0, [r3, #0]
 801b816:	f000 b895 	b.w	801b944 <_malloc_r>
 801b81a:	bf00      	nop
 801b81c:	20000210 	.word	0x20000210

0801b820 <free>:
 801b820:	4b02      	ldr	r3, [pc, #8]	; (801b82c <free+0xc>)
 801b822:	4601      	mov	r1, r0
 801b824:	6818      	ldr	r0, [r3, #0]
 801b826:	f000 b83f 	b.w	801b8a8 <_free_r>
 801b82a:	bf00      	nop
 801b82c:	20000210 	.word	0x20000210

0801b830 <memcmp>:
 801b830:	b530      	push	{r4, r5, lr}
 801b832:	2400      	movs	r4, #0
 801b834:	42a2      	cmp	r2, r4
 801b836:	d101      	bne.n	801b83c <memcmp+0xc>
 801b838:	2000      	movs	r0, #0
 801b83a:	e007      	b.n	801b84c <memcmp+0x1c>
 801b83c:	5d03      	ldrb	r3, [r0, r4]
 801b83e:	3401      	adds	r4, #1
 801b840:	190d      	adds	r5, r1, r4
 801b842:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801b846:	42ab      	cmp	r3, r5
 801b848:	d0f4      	beq.n	801b834 <memcmp+0x4>
 801b84a:	1b58      	subs	r0, r3, r5
 801b84c:	bd30      	pop	{r4, r5, pc}

0801b84e <memcpy>:
 801b84e:	b510      	push	{r4, lr}
 801b850:	1e43      	subs	r3, r0, #1
 801b852:	440a      	add	r2, r1
 801b854:	4291      	cmp	r1, r2
 801b856:	d100      	bne.n	801b85a <memcpy+0xc>
 801b858:	bd10      	pop	{r4, pc}
 801b85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b862:	e7f7      	b.n	801b854 <memcpy+0x6>

0801b864 <memmove>:
 801b864:	4288      	cmp	r0, r1
 801b866:	b510      	push	{r4, lr}
 801b868:	eb01 0302 	add.w	r3, r1, r2
 801b86c:	d807      	bhi.n	801b87e <memmove+0x1a>
 801b86e:	1e42      	subs	r2, r0, #1
 801b870:	4299      	cmp	r1, r3
 801b872:	d00a      	beq.n	801b88a <memmove+0x26>
 801b874:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b878:	f802 4f01 	strb.w	r4, [r2, #1]!
 801b87c:	e7f8      	b.n	801b870 <memmove+0xc>
 801b87e:	4283      	cmp	r3, r0
 801b880:	d9f5      	bls.n	801b86e <memmove+0xa>
 801b882:	1881      	adds	r1, r0, r2
 801b884:	1ad2      	subs	r2, r2, r3
 801b886:	42d3      	cmn	r3, r2
 801b888:	d100      	bne.n	801b88c <memmove+0x28>
 801b88a:	bd10      	pop	{r4, pc}
 801b88c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b890:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b894:	e7f7      	b.n	801b886 <memmove+0x22>

0801b896 <memset>:
 801b896:	4402      	add	r2, r0
 801b898:	4603      	mov	r3, r0
 801b89a:	4293      	cmp	r3, r2
 801b89c:	d100      	bne.n	801b8a0 <memset+0xa>
 801b89e:	4770      	bx	lr
 801b8a0:	f803 1b01 	strb.w	r1, [r3], #1
 801b8a4:	e7f9      	b.n	801b89a <memset+0x4>
	...

0801b8a8 <_free_r>:
 801b8a8:	b538      	push	{r3, r4, r5, lr}
 801b8aa:	4605      	mov	r5, r0
 801b8ac:	2900      	cmp	r1, #0
 801b8ae:	d045      	beq.n	801b93c <_free_r+0x94>
 801b8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b8b4:	1f0c      	subs	r4, r1, #4
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	bfb8      	it	lt
 801b8ba:	18e4      	addlt	r4, r4, r3
 801b8bc:	f000 f8ac 	bl	801ba18 <__malloc_lock>
 801b8c0:	4a1f      	ldr	r2, [pc, #124]	; (801b940 <_free_r+0x98>)
 801b8c2:	6813      	ldr	r3, [r2, #0]
 801b8c4:	4610      	mov	r0, r2
 801b8c6:	b933      	cbnz	r3, 801b8d6 <_free_r+0x2e>
 801b8c8:	6063      	str	r3, [r4, #4]
 801b8ca:	6014      	str	r4, [r2, #0]
 801b8cc:	4628      	mov	r0, r5
 801b8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b8d2:	f000 b8a2 	b.w	801ba1a <__malloc_unlock>
 801b8d6:	42a3      	cmp	r3, r4
 801b8d8:	d90c      	bls.n	801b8f4 <_free_r+0x4c>
 801b8da:	6821      	ldr	r1, [r4, #0]
 801b8dc:	1862      	adds	r2, r4, r1
 801b8de:	4293      	cmp	r3, r2
 801b8e0:	bf04      	itt	eq
 801b8e2:	681a      	ldreq	r2, [r3, #0]
 801b8e4:	685b      	ldreq	r3, [r3, #4]
 801b8e6:	6063      	str	r3, [r4, #4]
 801b8e8:	bf04      	itt	eq
 801b8ea:	1852      	addeq	r2, r2, r1
 801b8ec:	6022      	streq	r2, [r4, #0]
 801b8ee:	6004      	str	r4, [r0, #0]
 801b8f0:	e7ec      	b.n	801b8cc <_free_r+0x24>
 801b8f2:	4613      	mov	r3, r2
 801b8f4:	685a      	ldr	r2, [r3, #4]
 801b8f6:	b10a      	cbz	r2, 801b8fc <_free_r+0x54>
 801b8f8:	42a2      	cmp	r2, r4
 801b8fa:	d9fa      	bls.n	801b8f2 <_free_r+0x4a>
 801b8fc:	6819      	ldr	r1, [r3, #0]
 801b8fe:	1858      	adds	r0, r3, r1
 801b900:	42a0      	cmp	r0, r4
 801b902:	d10b      	bne.n	801b91c <_free_r+0x74>
 801b904:	6820      	ldr	r0, [r4, #0]
 801b906:	4401      	add	r1, r0
 801b908:	1858      	adds	r0, r3, r1
 801b90a:	4282      	cmp	r2, r0
 801b90c:	6019      	str	r1, [r3, #0]
 801b90e:	d1dd      	bne.n	801b8cc <_free_r+0x24>
 801b910:	6810      	ldr	r0, [r2, #0]
 801b912:	6852      	ldr	r2, [r2, #4]
 801b914:	605a      	str	r2, [r3, #4]
 801b916:	4401      	add	r1, r0
 801b918:	6019      	str	r1, [r3, #0]
 801b91a:	e7d7      	b.n	801b8cc <_free_r+0x24>
 801b91c:	d902      	bls.n	801b924 <_free_r+0x7c>
 801b91e:	230c      	movs	r3, #12
 801b920:	602b      	str	r3, [r5, #0]
 801b922:	e7d3      	b.n	801b8cc <_free_r+0x24>
 801b924:	6820      	ldr	r0, [r4, #0]
 801b926:	1821      	adds	r1, r4, r0
 801b928:	428a      	cmp	r2, r1
 801b92a:	bf04      	itt	eq
 801b92c:	6811      	ldreq	r1, [r2, #0]
 801b92e:	6852      	ldreq	r2, [r2, #4]
 801b930:	6062      	str	r2, [r4, #4]
 801b932:	bf04      	itt	eq
 801b934:	1809      	addeq	r1, r1, r0
 801b936:	6021      	streq	r1, [r4, #0]
 801b938:	605c      	str	r4, [r3, #4]
 801b93a:	e7c7      	b.n	801b8cc <_free_r+0x24>
 801b93c:	bd38      	pop	{r3, r4, r5, pc}
 801b93e:	bf00      	nop
 801b940:	2002126c 	.word	0x2002126c

0801b944 <_malloc_r>:
 801b944:	b570      	push	{r4, r5, r6, lr}
 801b946:	1ccd      	adds	r5, r1, #3
 801b948:	f025 0503 	bic.w	r5, r5, #3
 801b94c:	3508      	adds	r5, #8
 801b94e:	2d0c      	cmp	r5, #12
 801b950:	bf38      	it	cc
 801b952:	250c      	movcc	r5, #12
 801b954:	2d00      	cmp	r5, #0
 801b956:	4606      	mov	r6, r0
 801b958:	db01      	blt.n	801b95e <_malloc_r+0x1a>
 801b95a:	42a9      	cmp	r1, r5
 801b95c:	d903      	bls.n	801b966 <_malloc_r+0x22>
 801b95e:	230c      	movs	r3, #12
 801b960:	6033      	str	r3, [r6, #0]
 801b962:	2000      	movs	r0, #0
 801b964:	bd70      	pop	{r4, r5, r6, pc}
 801b966:	f000 f857 	bl	801ba18 <__malloc_lock>
 801b96a:	4a21      	ldr	r2, [pc, #132]	; (801b9f0 <_malloc_r+0xac>)
 801b96c:	6814      	ldr	r4, [r2, #0]
 801b96e:	4621      	mov	r1, r4
 801b970:	b991      	cbnz	r1, 801b998 <_malloc_r+0x54>
 801b972:	4c20      	ldr	r4, [pc, #128]	; (801b9f4 <_malloc_r+0xb0>)
 801b974:	6823      	ldr	r3, [r4, #0]
 801b976:	b91b      	cbnz	r3, 801b980 <_malloc_r+0x3c>
 801b978:	4630      	mov	r0, r6
 801b97a:	f000 f83d 	bl	801b9f8 <_sbrk_r>
 801b97e:	6020      	str	r0, [r4, #0]
 801b980:	4629      	mov	r1, r5
 801b982:	4630      	mov	r0, r6
 801b984:	f000 f838 	bl	801b9f8 <_sbrk_r>
 801b988:	1c43      	adds	r3, r0, #1
 801b98a:	d124      	bne.n	801b9d6 <_malloc_r+0x92>
 801b98c:	230c      	movs	r3, #12
 801b98e:	6033      	str	r3, [r6, #0]
 801b990:	4630      	mov	r0, r6
 801b992:	f000 f842 	bl	801ba1a <__malloc_unlock>
 801b996:	e7e4      	b.n	801b962 <_malloc_r+0x1e>
 801b998:	680b      	ldr	r3, [r1, #0]
 801b99a:	1b5b      	subs	r3, r3, r5
 801b99c:	d418      	bmi.n	801b9d0 <_malloc_r+0x8c>
 801b99e:	2b0b      	cmp	r3, #11
 801b9a0:	d90f      	bls.n	801b9c2 <_malloc_r+0x7e>
 801b9a2:	600b      	str	r3, [r1, #0]
 801b9a4:	50cd      	str	r5, [r1, r3]
 801b9a6:	18cc      	adds	r4, r1, r3
 801b9a8:	4630      	mov	r0, r6
 801b9aa:	f000 f836 	bl	801ba1a <__malloc_unlock>
 801b9ae:	f104 000b 	add.w	r0, r4, #11
 801b9b2:	1d23      	adds	r3, r4, #4
 801b9b4:	f020 0007 	bic.w	r0, r0, #7
 801b9b8:	1ac3      	subs	r3, r0, r3
 801b9ba:	d0d3      	beq.n	801b964 <_malloc_r+0x20>
 801b9bc:	425a      	negs	r2, r3
 801b9be:	50e2      	str	r2, [r4, r3]
 801b9c0:	e7d0      	b.n	801b964 <_malloc_r+0x20>
 801b9c2:	428c      	cmp	r4, r1
 801b9c4:	684b      	ldr	r3, [r1, #4]
 801b9c6:	bf16      	itet	ne
 801b9c8:	6063      	strne	r3, [r4, #4]
 801b9ca:	6013      	streq	r3, [r2, #0]
 801b9cc:	460c      	movne	r4, r1
 801b9ce:	e7eb      	b.n	801b9a8 <_malloc_r+0x64>
 801b9d0:	460c      	mov	r4, r1
 801b9d2:	6849      	ldr	r1, [r1, #4]
 801b9d4:	e7cc      	b.n	801b970 <_malloc_r+0x2c>
 801b9d6:	1cc4      	adds	r4, r0, #3
 801b9d8:	f024 0403 	bic.w	r4, r4, #3
 801b9dc:	42a0      	cmp	r0, r4
 801b9de:	d005      	beq.n	801b9ec <_malloc_r+0xa8>
 801b9e0:	1a21      	subs	r1, r4, r0
 801b9e2:	4630      	mov	r0, r6
 801b9e4:	f000 f808 	bl	801b9f8 <_sbrk_r>
 801b9e8:	3001      	adds	r0, #1
 801b9ea:	d0cf      	beq.n	801b98c <_malloc_r+0x48>
 801b9ec:	6025      	str	r5, [r4, #0]
 801b9ee:	e7db      	b.n	801b9a8 <_malloc_r+0x64>
 801b9f0:	2002126c 	.word	0x2002126c
 801b9f4:	20021270 	.word	0x20021270

0801b9f8 <_sbrk_r>:
 801b9f8:	b538      	push	{r3, r4, r5, lr}
 801b9fa:	4c06      	ldr	r4, [pc, #24]	; (801ba14 <_sbrk_r+0x1c>)
 801b9fc:	2300      	movs	r3, #0
 801b9fe:	4605      	mov	r5, r0
 801ba00:	4608      	mov	r0, r1
 801ba02:	6023      	str	r3, [r4, #0]
 801ba04:	f7e6 fc1e 	bl	8002244 <_sbrk>
 801ba08:	1c43      	adds	r3, r0, #1
 801ba0a:	d102      	bne.n	801ba12 <_sbrk_r+0x1a>
 801ba0c:	6823      	ldr	r3, [r4, #0]
 801ba0e:	b103      	cbz	r3, 801ba12 <_sbrk_r+0x1a>
 801ba10:	602b      	str	r3, [r5, #0]
 801ba12:	bd38      	pop	{r3, r4, r5, pc}
 801ba14:	200226b4 	.word	0x200226b4

0801ba18 <__malloc_lock>:
 801ba18:	4770      	bx	lr

0801ba1a <__malloc_unlock>:
 801ba1a:	4770      	bx	lr

0801ba1c <_init>:
 801ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba1e:	bf00      	nop
 801ba20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba22:	bc08      	pop	{r3}
 801ba24:	469e      	mov	lr, r3
 801ba26:	4770      	bx	lr

0801ba28 <_fini>:
 801ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba2a:	bf00      	nop
 801ba2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba2e:	bc08      	pop	{r3}
 801ba30:	469e      	mov	lr, r3
 801ba32:	4770      	bx	lr
