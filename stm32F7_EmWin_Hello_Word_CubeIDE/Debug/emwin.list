
emwin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004970  0801ed64  0801ed64  0002ed64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080236d4  080236d4  0004012c  2**0
                  CONTENTS
  4 .ARM          00000008  080236d4  080236d4  000336d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080236dc  080236dc  0004012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080236dc  080236dc  000336dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080236e0  080236e0  000336e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080236e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002241c  2000012c  08023810  0004012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20022548  08023810  00042548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00063dc6  00000000  00000000  0004015c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008cc2  00000000  00000000  000a3f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003280  00000000  00000000  000acbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002e90  00000000  00000000  000afe68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000394c1  00000000  00000000  000b2cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032fc6  00000000  00000000  000ec1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012d2de  00000000  00000000  0011f17f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0024c45d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d4d8  00000000  00000000  0024c548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ed4c 	.word	0x0801ed4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000130 	.word	0x20000130
 800020c:	0801ed4c 	.word	0x0801ed4c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800052e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000450 	.word	0x20000450
 8000540:	200004a4 	.word	0x200004a4

08000544 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800054e:	20c8      	movs	r0, #200	; 0xc8
 8000550:	f001 fd84 	bl	800205c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000554:	f000 fa7a 	bl	8000a4c <ft5336_I2C_InitializeIfRequired>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000588:	2300      	movs	r3, #0
 800058a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800058c:	f000 fa5e 	bl	8000a4c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e010      	b.n	80005b8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	21a8      	movs	r1, #168	; 0xa8
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fd3f 	bl	8002020 <TS_IO_Read>
 80005a2:	4603      	mov	r3, r0
 80005a4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005a6:	7b7b      	ldrb	r3, [r7, #13]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b51      	cmp	r3, #81	; 0x51
 80005ac:	d101      	bne.n	80005b2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d802      	bhi.n	80005c4 <ft5336_ReadID+0x4e>
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0e8      	beq.n	8000596 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	b29b      	uxth	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4603      	mov	r3, r0
 80005da:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fa44 	bl	8000a6c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f932 	bl	8000850 <ft5336_TS_DisableIT>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fd09 	bl	8002020 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b05      	cmp	r3, #5
 8000624:	d901      	bls.n	800062a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000630:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200018a4 	.word	0x200018a4

08000648 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800066a:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800066c:	789a      	ldrb	r2, [r3, #2]
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	429a      	cmp	r2, r3
 8000674:	f080 80cf 	bcs.w	8000816 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000678:	4b69      	ldr	r3, [pc, #420]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d871      	bhi.n	8000764 <ft5336_TS_GetXY+0x11c>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ft5336_TS_GetXY+0x40>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006b1 	.word	0x080006b1
 800068c:	080006c3 	.word	0x080006c3
 8000690:	080006d5 	.word	0x080006d5
 8000694:	080006e7 	.word	0x080006e7
 8000698:	080006f9 	.word	0x080006f9
 800069c:	0800070b 	.word	0x0800070b
 80006a0:	0800071d 	.word	0x0800071d
 80006a4:	0800072f 	.word	0x0800072f
 80006a8:	08000741 	.word	0x08000741
 80006ac:	08000753 	.word	0x08000753
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006b0:	2304      	movs	r3, #4
 80006b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006b4:	2303      	movs	r3, #3
 80006b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b8:	2306      	movs	r3, #6
 80006ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006bc:	2305      	movs	r3, #5
 80006be:	753b      	strb	r3, [r7, #20]
      break;
 80006c0:	e051      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006c2:	230a      	movs	r3, #10
 80006c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006c6:	2309      	movs	r3, #9
 80006c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006ca:	230c      	movs	r3, #12
 80006cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006ce:	230b      	movs	r3, #11
 80006d0:	753b      	strb	r3, [r7, #20]
      break;
 80006d2:	e048      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006d4:	2310      	movs	r3, #16
 80006d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d8:	230f      	movs	r3, #15
 80006da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006dc:	2312      	movs	r3, #18
 80006de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006e0:	2311      	movs	r3, #17
 80006e2:	753b      	strb	r3, [r7, #20]
      break;
 80006e4:	e03f      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006e6:	2316      	movs	r3, #22
 80006e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ea:	2315      	movs	r3, #21
 80006ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006ee:	2318      	movs	r3, #24
 80006f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006f2:	2317      	movs	r3, #23
 80006f4:	753b      	strb	r3, [r7, #20]
      break;
 80006f6:	e036      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f8:	231c      	movs	r3, #28
 80006fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006fc:	231b      	movs	r3, #27
 80006fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000700:	231e      	movs	r3, #30
 8000702:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000704:	231d      	movs	r3, #29
 8000706:	753b      	strb	r3, [r7, #20]
      break;
 8000708:	e02d      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800070a:	2322      	movs	r3, #34	; 0x22
 800070c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800070e:	2321      	movs	r3, #33	; 0x21
 8000710:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000712:	2324      	movs	r3, #36	; 0x24
 8000714:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000716:	2323      	movs	r3, #35	; 0x23
 8000718:	753b      	strb	r3, [r7, #20]
      break;
 800071a:	e024      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800071c:	2328      	movs	r3, #40	; 0x28
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000720:	2327      	movs	r3, #39	; 0x27
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000724:	232a      	movs	r3, #42	; 0x2a
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000728:	2329      	movs	r3, #41	; 0x29
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e01b      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800072e:	232e      	movs	r3, #46	; 0x2e
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000732:	232d      	movs	r3, #45	; 0x2d
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000736:	2330      	movs	r3, #48	; 0x30
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800073a:	232f      	movs	r3, #47	; 0x2f
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e012      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000740:	2334      	movs	r3, #52	; 0x34
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000744:	2333      	movs	r3, #51	; 0x33
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000748:	2336      	movs	r3, #54	; 0x36
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800074c:	2335      	movs	r3, #53	; 0x35
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e009      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000752:	233a      	movs	r3, #58	; 0x3a
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000756:	2339      	movs	r3, #57	; 0x39
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800075a:	233c      	movs	r3, #60	; 0x3c
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800075e:	233b      	movs	r3, #59	; 0x3b
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e000      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000764:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	7dfa      	ldrb	r2, [r7, #23]
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fc56 	bl	8002020 <TS_IO_Read>
 8000774:	4603      	mov	r3, r0
 8000776:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000780:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7dba      	ldrb	r2, [r7, #22]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fc48 	bl	8002020 <TS_IO_Read>
 8000790:	4603      	mov	r3, r0
 8000792:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000794:	7cfb      	ldrb	r3, [r7, #19]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800079e:	b21a      	sxth	r2, r3
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	7d7a      	ldrb	r2, [r7, #21]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fc2d 	bl	8002020 <TS_IO_Read>
 80007c6:	4603      	mov	r3, r0
 80007c8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007d2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	7d3a      	ldrb	r2, [r7, #20]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fc1f 	bl	8002020 <TS_IO_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007e6:	7cfb      	ldrb	r3, [r7, #19]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000800:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000804:	881a      	ldrh	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	3301      	adds	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000814:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200018a4 	.word	0x200018a4
 8000824:	200018a8 	.word	0x200018a8

08000828 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	21a4      	movs	r1, #164	; 0xa4
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fbd2 	bl	8001fec <TS_IO_Write>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	21a4      	movs	r1, #164	; 0xa4
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fbbe 	bl	8001fec <TS_IO_Write>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b084      	sub	sp, #16
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	6039      	str	r1, [r7, #0]
 80008b0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fbaf 	bl	8002020 <TS_IO_Read>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4603      	mov	r3, r0
 80008e6:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f8:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <ft5336_TS_GetTouchInfo+0x158>)
 80008fa:	785b      	ldrb	r3, [r3, #1]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4293      	cmp	r3, r2
 8000902:	f080 8090 	bcs.w	8000a26 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	2b09      	cmp	r3, #9
 800090a:	d85d      	bhi.n	80009c8 <ft5336_TS_GetTouchInfo+0xf0>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <ft5336_TS_GetTouchInfo+0x3c>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	0800093d 	.word	0x0800093d
 8000918:	0800094b 	.word	0x0800094b
 800091c:	08000959 	.word	0x08000959
 8000920:	08000967 	.word	0x08000967
 8000924:	08000975 	.word	0x08000975
 8000928:	08000983 	.word	0x08000983
 800092c:	08000991 	.word	0x08000991
 8000930:	0800099f 	.word	0x0800099f
 8000934:	080009ad 	.word	0x080009ad
 8000938:	080009bb 	.word	0x080009bb
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 800093c:	2303      	movs	r3, #3
 800093e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000940:	2307      	movs	r3, #7
 8000942:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000944:	2308      	movs	r3, #8
 8000946:	757b      	strb	r3, [r7, #21]
      break;
 8000948:	e03f      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800094a:	2309      	movs	r3, #9
 800094c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800094e:	230d      	movs	r3, #13
 8000950:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000952:	230e      	movs	r3, #14
 8000954:	757b      	strb	r3, [r7, #21]
      break;
 8000956:	e038      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000958:	230f      	movs	r3, #15
 800095a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 800095c:	2313      	movs	r3, #19
 800095e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000960:	2314      	movs	r3, #20
 8000962:	757b      	strb	r3, [r7, #21]
      break;
 8000964:	e031      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000966:	2315      	movs	r3, #21
 8000968:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800096a:	2319      	movs	r3, #25
 800096c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800096e:	231a      	movs	r3, #26
 8000970:	757b      	strb	r3, [r7, #21]
      break;
 8000972:	e02a      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000974:	231b      	movs	r3, #27
 8000976:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000978:	231f      	movs	r3, #31
 800097a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 800097c:	2320      	movs	r3, #32
 800097e:	757b      	strb	r3, [r7, #21]
      break;
 8000980:	e023      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000982:	2321      	movs	r3, #33	; 0x21
 8000984:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000986:	2325      	movs	r3, #37	; 0x25
 8000988:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800098a:	2326      	movs	r3, #38	; 0x26
 800098c:	757b      	strb	r3, [r7, #21]
      break;
 800098e:	e01c      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000990:	2327      	movs	r3, #39	; 0x27
 8000992:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000994:	232b      	movs	r3, #43	; 0x2b
 8000996:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000998:	232c      	movs	r3, #44	; 0x2c
 800099a:	757b      	strb	r3, [r7, #21]
      break;
 800099c:	e015      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800099e:	232d      	movs	r3, #45	; 0x2d
 80009a0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80009a2:	2331      	movs	r3, #49	; 0x31
 80009a4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80009a6:	2332      	movs	r3, #50	; 0x32
 80009a8:	757b      	strb	r3, [r7, #21]
      break;
 80009aa:	e00e      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009ac:	2333      	movs	r3, #51	; 0x33
 80009ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009b0:	2337      	movs	r3, #55	; 0x37
 80009b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009b4:	2338      	movs	r3, #56	; 0x38
 80009b6:	757b      	strb	r3, [r7, #21]
      break;
 80009b8:	e007      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009ba:	2339      	movs	r3, #57	; 0x39
 80009bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009be:	233d      	movs	r3, #61	; 0x3d
 80009c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009c2:	233e      	movs	r3, #62	; 0x3e
 80009c4:	757b      	strb	r3, [r7, #21]
      break;
 80009c6:	e000      	b.n	80009ca <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c8:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	7dfa      	ldrb	r2, [r7, #23]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fb24 	bl	8002020 <TS_IO_Read>
 80009d8:	4603      	mov	r3, r0
 80009da:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	119b      	asrs	r3, r3, #6
 80009e2:	f003 0203 	and.w	r2, r3, #3
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	7dba      	ldrb	r2, [r7, #22]
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fb14 	bl	8002020 <TS_IO_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009fc:	7d3b      	ldrb	r3, [r7, #20]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	7d7a      	ldrb	r2, [r7, #21]
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fb06 	bl	8002020 <TS_IO_Read>
 8000a14:	4603      	mov	r3, r0
 8000a16:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a18:	7d3b      	ldrb	r3, [r7, #20]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	111b      	asrs	r3, r3, #4
 8000a1e:	f003 0204 	and.w	r2, r3, #4
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200018a4 	.word	0x200018a4

08000a34 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200018a4 	.word	0x200018a4

08000a4c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a50:	f7ff fff0 	bl	8000a34 <ft5336_Get_I2C_InitializedStatus>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d104      	bne.n	8000a64 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a5a:	f001 fabd 	bl	8001fd8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
  }
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200018a4 	.word	0x200018a4

08000a6c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f002 fc3a 	bl	8003306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f845 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 fecf 	bl	8001838 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000a9a:	f000 f901 	bl	8000ca0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000a9e:	f000 f951 	bl	8000d44 <MX_CRC_Init>
  MX_DCMI_Init();
 8000aa2:	f000 f971 	bl	8000d88 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000aa6:	f000 f9a3 	bl	8000df0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000aaa:	f000 f9e1 	bl	8000e70 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8000aae:	f000 fa1f 	bl	8000ef0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000ab2:	f000 fa49 	bl	8000f48 <MX_RTC_Init>
  MX_SAI2_Init();
 8000ab6:	f000 fae7 	bl	8001088 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000aba:	f000 fb8d 	bl	80011d8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000abe:	f000 fbab 	bl	8001218 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8000ac2:	f000 fbd9 	bl	8001278 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ac6:	f000 fc83 	bl	80013d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aca:	f000 fcf7 	bl	80014bc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ace:	f000 fd47 	bl	8001560 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ad2:	f000 fdbb 	bl	800164c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ad6:	f000 fe0b 	bl	80016f0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ada:	f000 fe4d 	bl	8001778 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ade:	f000 fe7b 	bl	80017d8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  TouchTimer_Init();
 8000ae2:	f001 f8ad 	bl	8001c40 <TouchTimer_Init>
  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8000ae6:	f014 f9a7 	bl	8014e38 <GRAPHICS_HW_Init>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 8000aea:	f014 f9b3 	bl	8014e54 <GRAPHICS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <main+0x90>)
 8000af0:	1d3c      	adds	r4, r7, #4
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00f fe4f 	bl	80107a8 <osThreadCreate>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <main+0x94>)
 8000b0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b10:	f00f fe27 	bl	8010762 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x8c>
 8000b16:	bf00      	nop
 8000b18:	0801ed70 	.word	0x0801ed70
 8000b1c:	20021188 	.word	0x20021188

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0b4      	sub	sp, #208	; 0xd0
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b2a:	2230      	movs	r2, #48	; 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f01e f849 	bl	801ebc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	2284      	movs	r2, #132	; 0x84
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f01e f83a 	bl	801ebc6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000b52:	f006 fe03 	bl	800775c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <SystemClock_Config+0x174>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a4e      	ldr	r2, [pc, #312]	; (8000c94 <SystemClock_Config+0x174>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <SystemClock_Config+0x174>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6e:	4b4a      	ldr	r3, [pc, #296]	; (8000c98 <SystemClock_Config+0x178>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a49      	ldr	r2, [pc, #292]	; (8000c98 <SystemClock_Config+0x178>)
 8000b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <SystemClock_Config+0x178>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b86:	2309      	movs	r3, #9
 8000b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ba8:	2319      	movs	r3, #25
 8000baa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000bae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f006 fef8 	bl	80079bc <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bd2:	f001 f8a3 	bl	8001d1c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bd6:	f006 fdd1 	bl	800777c <HAL_PWREx_EnableOverDrive>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000be0:	f001 f89c 	bl	8001d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	230f      	movs	r3, #15
 8000be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c0a:	2106      	movs	r1, #6
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f007 f945 	bl	8007e9c <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000c18:	f001 f880 	bl	8001d1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <SystemClock_Config+0x17c>)
 8000c1e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c36:	2305      	movs	r3, #5
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000c56:	2300      	movs	r3, #0
 8000c58:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 fb0d 	bl	800829c <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000c88:	f001 f848 	bl	8001d1c <Error_Handler>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	37d0      	adds	r7, #208	; 0xd0
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000
 8000c9c:	01b14868 	.word	0x01b14868

08000ca0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <MX_ADC3_Init+0x9c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_ADC3_Init+0xa0>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000d02:	f002 fb4f 	bl	80033a4 <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f001 f806 	bl	8001d1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000d22:	f002 fb83 	bl	800342c <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d2c:	f000 fff6 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2002145c 	.word	0x2002145c
 8000d3c:	40012200 	.word	0x40012200
 8000d40:	0f000001 	.word	0x0f000001

08000d44 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <MX_CRC_Init+0x40>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d6e:	f002 fe9d 	bl	8003aac <HAL_CRC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d78:	f000 ffd0 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20021334 	.word	0x20021334
 8000d84:	40023000 	.word	0x40023000

08000d88 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <MX_DCMI_Init+0x64>)
 8000d90:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_DCMI_Init+0x60>)
 8000dd6:	f002 ff53 	bl	8003c80 <HAL_DCMI_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000de0:	f000 ff9c 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200214a4 	.word	0x200214a4
 8000dec:	50050000 	.word	0x50050000

08000df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <MX_I2C1_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <MX_I2C1_Init+0x7c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e2c:	f005 f960 	bl	80060f0 <HAL_I2C_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e36:	f000 ff71 	bl	8001d1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e3e:	f005 fe6f 	bl	8006b20 <HAL_I2CEx_ConfigAnalogFilter>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 ff68 	bl	8001d1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e50:	f005 feb1 	bl	8006bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 ff5f 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200212e8 	.word	0x200212e8
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	00c0eaff 	.word	0x00c0eaff

08000e70 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <MX_I2C3_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <MX_I2C3_Init+0x7c>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000eac:	f005 f920 	bl	80060f0 <HAL_I2C_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f000 ff31 	bl	8001d1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ebe:	f005 fe2f 	bl	8006b20 <HAL_I2CEx_ConfigAnalogFilter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ec8:	f000 ff28 	bl	8001d1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ed0:	f005 fe71 	bl	8006bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 ff1f 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2002118c 	.word	0x2002118c
 8000ee8:	40005c00 	.word	0x40005c00
 8000eec:	00c0eaff 	.word	0x00c0eaff

08000ef0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <MX_QUADSPI_Init+0x54>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f2c:	f006 fc76 	bl	800781c <HAL_QSPI_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f36:	f000 fef1 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200216d8 	.word	0x200216d8
 8000f44:	a0001000 	.word	0xa0001000

08000f48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b092      	sub	sp, #72	; 0x48
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
 8000f5e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	222c      	movs	r2, #44	; 0x2c
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f01d fe2b 	bl	801ebc6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000f70:	4b43      	ldr	r3, [pc, #268]	; (8001080 <MX_RTC_Init+0x138>)
 8000f72:	4a44      	ldr	r2, [pc, #272]	; (8001084 <MX_RTC_Init+0x13c>)
 8000f74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f76:	4b42      	ldr	r3, [pc, #264]	; (8001080 <MX_RTC_Init+0x138>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <MX_RTC_Init+0x138>)
 8000f7e:	227f      	movs	r2, #127	; 0x7f
 8000f80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <MX_RTC_Init+0x138>)
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f88:	483d      	ldr	r0, [pc, #244]	; (8001080 <MX_RTC_Init+0x138>)
 8000f8a:	f007 fea9 	bl	8008ce0 <HAL_RTC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 8000f94:	f000 fec2 	bl	8001d1c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4831      	ldr	r0, [pc, #196]	; (8001080 <MX_RTC_Init+0x138>)
 8000fbc:	f007 ff0c 	bl	8008dd8 <HAL_RTC_SetTime>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000fc6:	f000 fea9 	bl	8001d1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4825      	ldr	r0, [pc, #148]	; (8001080 <MX_RTC_Init+0x138>)
 8000fec:	f007 ffb2 	bl	8008f54 <HAL_RTC_SetDate>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000ff6:	f000 fe91 	bl	8001d1c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001002:	2300      	movs	r3, #0
 8001004:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800101e:	2301      	movs	r3, #1
 8001020:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <MX_RTC_Init+0x138>)
 8001032:	f008 f837 	bl	80090a4 <HAL_RTC_SetAlarm>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_RTC_Init+0xf8>
  {
    Error_Handler();
 800103c:	f000 fe6e 	bl	8001d1c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001040:	2301      	movs	r3, #1
 8001042:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	2201      	movs	r2, #1
 8001050:	4619      	mov	r1, r3
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <MX_RTC_Init+0x138>)
 8001054:	f008 f826 	bl	80090a4 <HAL_RTC_SetAlarm>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_RTC_Init+0x11a>
  {
    Error_Handler();
 800105e:	f000 fe5d 	bl	8001d1c <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001062:	2202      	movs	r2, #2
 8001064:	2100      	movs	r1, #0
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_RTC_Init+0x138>)
 8001068:	f008 f9a6 	bl	80093b8 <HAL_RTCEx_SetTimeStamp>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 8001072:	f000 fe53 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3748      	adds	r7, #72	; 0x48
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20021578 	.word	0x20021578
 8001084:	40002800 	.word	0x40002800

08001088 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800108c:	4b4d      	ldr	r3, [pc, #308]	; (80011c4 <MX_SAI2_Init+0x13c>)
 800108e:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <MX_SAI2_Init+0x140>)
 8001090:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <MX_SAI2_Init+0x13c>)
 8001094:	2200      	movs	r2, #0
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <MX_SAI2_Init+0x13c>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010c2:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010ca:	4a40      	ldr	r2, [pc, #256]	; (80011cc <MX_SAI2_Init+0x144>)
 80010cc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_SAI2_Init+0x13c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <MX_SAI2_Init+0x13c>)
 8001100:	2200      	movs	r2, #0
 8001102:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_SAI2_Init+0x13c>)
 8001106:	2200      	movs	r2, #0
 8001108:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <MX_SAI2_Init+0x13c>)
 800110c:	2200      	movs	r2, #0
 800110e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <MX_SAI2_Init+0x13c>)
 8001112:	2201      	movs	r2, #1
 8001114:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <MX_SAI2_Init+0x13c>)
 8001118:	2200      	movs	r2, #0
 800111a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800111c:	4829      	ldr	r0, [pc, #164]	; (80011c4 <MX_SAI2_Init+0x13c>)
 800111e:	f008 f9a1 	bl	8009464 <HAL_SAI_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001128:	f000 fdf8 	bl	8001d1c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_SAI2_Init+0x148>)
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <MX_SAI2_Init+0x14c>)
 8001130:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001134:	2200      	movs	r2, #0
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_SAI2_Init+0x148>)
 800113a:	2203      	movs	r2, #3
 800113c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001140:	2240      	movs	r2, #64	; 0x40
 8001142:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001146:	2200      	movs	r2, #0
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_SAI2_Init+0x148>)
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001152:	2201      	movs	r2, #1
 8001154:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_SAI2_Init+0x148>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_SAI2_Init+0x148>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_SAI2_Init+0x148>)
 800117c:	2208      	movs	r2, #8
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001182:	2201      	movs	r2, #1
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001188:	2200      	movs	r2, #0
 800118a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_SAI2_Init+0x148>)
 800118e:	2200      	movs	r2, #0
 8001190:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_SAI2_Init+0x148>)
 8001194:	2200      	movs	r2, #0
 8001196:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_SAI2_Init+0x148>)
 800119a:	2200      	movs	r2, #0
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SAI2_Init+0x148>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_SAI2_Init+0x148>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SAI2_Init+0x148>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_SAI2_Init+0x148>)
 80011b2:	f008 f957 	bl	8009464 <HAL_SAI_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80011bc:	f000 fdae 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20021264 	.word	0x20021264
 80011c8:	40015c04 	.word	0x40015c04
 80011cc:	0002ee00 	.word	0x0002ee00
 80011d0:	20021104 	.word	0x20021104
 80011d4:	40015c24 	.word	0x40015c24

080011d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_SDMMC1_SD_Init+0x38>)
 80011de:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <MX_SDMMC1_SD_Init+0x3c>)
 80011e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_SDMMC1_SD_Init+0x38>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_SDMMC1_SD_Init+0x38>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_SDMMC1_SD_Init+0x38>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_SDMMC1_SD_Init+0x38>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <MX_SDMMC1_SD_Init+0x38>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <MX_SDMMC1_SD_Init+0x38>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20021358 	.word	0x20021358
 8001214:	40012c00 	.word	0x40012c00

08001218 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 800121e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001222:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_SPDIFRX_Init+0x5c>)
 8001262:	f009 fbe7 	bl	800aa34 <HAL_SPDIFRX_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800126c:	f000 fd56 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20021218 	.word	0x20021218

08001278 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b09a      	sub	sp, #104	; 0x68
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	222c      	movs	r2, #44	; 0x2c
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f01d fc87 	bl	801ebc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012ba:	4a44      	ldr	r2, [pc, #272]	; (80013cc <MX_TIM1_Init+0x154>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e2:	4839      	ldr	r0, [pc, #228]	; (80013c8 <MX_TIM1_Init+0x150>)
 80012e4:	f009 fc02 	bl	800aaec <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012ee:	f000 fd15 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012fc:	4619      	mov	r1, r3
 80012fe:	4832      	ldr	r0, [pc, #200]	; (80013c8 <MX_TIM1_Init+0x150>)
 8001300:	f009 feac 	bl	800b05c <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800130a:	f000 fd07 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800130e:	482e      	ldr	r0, [pc, #184]	; (80013c8 <MX_TIM1_Init+0x150>)
 8001310:	f009 fc42 	bl	800ab98 <HAL_TIM_PWM_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800131a:	f000 fcff 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800132e:	4619      	mov	r1, r3
 8001330:	4825      	ldr	r0, [pc, #148]	; (80013c8 <MX_TIM1_Init+0x150>)
 8001332:	f00a fbd7 	bl	800bae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800133c:	f000 fcee 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001340:	2360      	movs	r3, #96	; 0x60
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_TIM1_Init+0x150>)
 8001366:	f009 fd61 	bl	800ae2c <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001370:	f000 fcd4 	bl	8001d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM1_Init+0x150>)
 80013aa:	f00a fbf7 	bl	800bb9c <HAL_TIMEx_ConfigBreakDeadTime>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80013b4:	f000 fcb2 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM1_Init+0x150>)
 80013ba:	f001 fccf 	bl	8002d5c <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3768      	adds	r7, #104	; 0x68
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20021598 	.word	0x20021598
 80013cc:	40010000 	.word	0x40010000

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <MX_TIM2_Init+0xe8>)
 8001404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <MX_TIM2_Init+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <MX_TIM2_Init+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MX_TIM2_Init+0xe8>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_TIM2_Init+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_TIM2_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <MX_TIM2_Init+0xe8>)
 800142a:	f009 fb5f 	bl	800aaec <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001434:	f000 fc72 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001442:	4619      	mov	r1, r3
 8001444:	481c      	ldr	r0, [pc, #112]	; (80014b8 <MX_TIM2_Init+0xe8>)
 8001446:	f009 fe09 	bl	800b05c <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001450:	f000 fc64 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_TIM2_Init+0xe8>)
 8001456:	f009 fb9f 	bl	800ab98 <HAL_TIM_PWM_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001460:	f000 fc5c 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <MX_TIM2_Init+0xe8>)
 8001474:	f00a fb36 	bl	800bae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800147e:	f000 fc4d 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001482:	2360      	movs	r3, #96	; 0x60
 8001484:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_TIM2_Init+0xe8>)
 800149a:	f009 fcc7 	bl	800ae2c <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014a4:	f000 fc3a 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_TIM2_Init+0xe8>)
 80014aa:	f001 fc57 	bl	8002d5c <HAL_TIM_MspPostInit>

}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	; 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20021658 	.word	0x20021658

080014bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_TIM3_Init+0x9c>)
 80014de:	4a1f      	ldr	r2, [pc, #124]	; (800155c <MX_TIM3_Init+0xa0>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM3_Init+0x9c>)
 80014e4:	f242 3227 	movw	r2, #8999	; 0x2327
 80014e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM3_Init+0x9c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_TIM3_Init+0x9c>)
 80014f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80014f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_TIM3_Init+0x9c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM3_Init+0x9c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <MX_TIM3_Init+0x9c>)
 8001506:	f009 faf1 	bl	800aaec <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001510:	f000 fc04 	bl	8001d1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001514:	2304      	movs	r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM3_Init+0x9c>)
 8001524:	f009 fe54 	bl	800b1d0 <HAL_TIM_SlaveConfigSynchro>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800152e:	f000 fbf5 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_TIM3_Init+0x9c>)
 8001540:	f00a fad0 	bl	800bae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800154a:	f000 fbe7 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2002141c 	.word	0x2002141c
 800155c:	40000400 	.word	0x40000400

08001560 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_TIM5_Init+0xe4>)
 8001594:	4a2c      	ldr	r2, [pc, #176]	; (8001648 <MX_TIM5_Init+0xe8>)
 8001596:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_TIM5_Init+0xe4>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_TIM5_Init+0xe4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_TIM5_Init+0xe4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_TIM5_Init+0xe4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_TIM5_Init+0xe4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015b6:	4823      	ldr	r0, [pc, #140]	; (8001644 <MX_TIM5_Init+0xe4>)
 80015b8:	f009 fa98 	bl	800aaec <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80015c2:	f000 fbab 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d0:	4619      	mov	r1, r3
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <MX_TIM5_Init+0xe4>)
 80015d4:	f009 fd42 	bl	800b05c <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80015de:	f000 fb9d 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015e2:	4818      	ldr	r0, [pc, #96]	; (8001644 <MX_TIM5_Init+0xe4>)
 80015e4:	f009 fad8 	bl	800ab98 <HAL_TIM_PWM_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80015ee:	f000 fb95 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <MX_TIM5_Init+0xe4>)
 8001602:	f00a fa6f 	bl	800bae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800160c:	f000 fb86 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001610:	2360      	movs	r3, #96	; 0x60
 8001612:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	220c      	movs	r2, #12
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM5_Init+0xe4>)
 8001628:	f009 fc00 	bl	800ae2c <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001632:	f000 fb73 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM5_Init+0xe4>)
 8001638:	f001 fb90 	bl	8002d5c <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200213dc 	.word	0x200213dc
 8001648:	40000c00 	.word	0x40000c00

0800164c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_TIM8_Init+0x9c>)
 800166c:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <MX_TIM8_Init+0xa0>)
 800166e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM8_Init+0x9c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_TIM8_Init+0x9c>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001694:	4814      	ldr	r0, [pc, #80]	; (80016e8 <MX_TIM8_Init+0x9c>)
 8001696:	f009 fa29 	bl	800aaec <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80016a0:	f000 fb3c 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4619      	mov	r1, r3
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_TIM8_Init+0x9c>)
 80016b2:	f009 fcd3 	bl	800b05c <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80016bc:	f000 fb2e 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_TIM8_Init+0x9c>)
 80016d2:	f00a fa07 	bl	800bae4 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80016dc:	f000 fb1e 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200211d8 	.word	0x200211d8
 80016ec:	40010400 	.word	0x40010400

080016f0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_TIM12_Init+0x80>)
 800170a:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <MX_TIM12_Init+0x84>)
 800170c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_TIM12_Init+0x80>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_TIM12_Init+0x80>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_TIM12_Init+0x80>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_TIM12_Init+0x80>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_TIM12_Init+0x80>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <MX_TIM12_Init+0x80>)
 800172e:	f009 fa33 	bl	800ab98 <HAL_TIM_PWM_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001738:	f000 faf0 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173c:	2360      	movs	r3, #96	; 0x60
 800173e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	4619      	mov	r1, r3
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <MX_TIM12_Init+0x80>)
 8001754:	f009 fb6a 	bl	800ae2c <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800175e:	f000 fadd 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <MX_TIM12_Init+0x80>)
 8001764:	f001 fafa 	bl	8002d5c <HAL_TIM_MspPostInit>

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20021698 	.word	0x20021698
 8001774:	40001800 	.word	0x40001800

08001778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 8001780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_USART1_UART_Init+0x58>)
 80017bc:	f00a fa8a 	bl	800bcd4 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017c6:	f000 faa9 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200214f4 	.word	0x200214f4
 80017d4:	40011000 	.word	0x40011000

080017d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_USART6_UART_Init+0x58>)
 80017de:	4a15      	ldr	r2, [pc, #84]	; (8001834 <MX_USART6_UART_Init+0x5c>)
 80017e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MX_USART6_UART_Init+0x58>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART6_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_USART6_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART6_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART6_UART_Init+0x58>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART6_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART6_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART6_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART6_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART6_UART_Init+0x58>)
 800181c:	f00a fa5a 	bl	800bcd4 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001826:	f000 fa79 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200215d8 	.word	0x200215d8
 8001834:	40011400 	.word	0x40011400

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800184e:	4baf      	ldr	r3, [pc, #700]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4aae      	ldr	r2, [pc, #696]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4bac      	ldr	r3, [pc, #688]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001866:	4ba9      	ldr	r3, [pc, #676]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4aa8      	ldr	r2, [pc, #672]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 800186c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4ba6      	ldr	r3, [pc, #664]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4ba3      	ldr	r3, [pc, #652]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4aa2      	ldr	r2, [pc, #648]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4ba0      	ldr	r3, [pc, #640]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	4b9d      	ldr	r3, [pc, #628]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a9c      	ldr	r2, [pc, #624]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b9a      	ldr	r3, [pc, #616]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b97      	ldr	r3, [pc, #604]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a96      	ldr	r2, [pc, #600]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b94      	ldr	r3, [pc, #592]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a90      	ldr	r2, [pc, #576]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b8e      	ldr	r3, [pc, #568]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018de:	4b8b      	ldr	r3, [pc, #556]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a8a      	ldr	r2, [pc, #552]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018f6:	4b85      	ldr	r3, [pc, #532]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a84      	ldr	r2, [pc, #528]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b82      	ldr	r3, [pc, #520]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800190e:	4b7f      	ldr	r3, [pc, #508]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a7e      	ldr	r2, [pc, #504]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b7c      	ldr	r3, [pc, #496]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a78      	ldr	r2, [pc, #480]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a72      	ldr	r2, [pc, #456]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <MX_GPIO_Init+0x2d4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2120      	movs	r1, #32
 800195a:	486d      	ldr	r0, [pc, #436]	; (8001b10 <MX_GPIO_Init+0x2d8>)
 800195c:	f002 ff54 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	210e      	movs	r1, #14
 8001964:	486b      	ldr	r0, [pc, #428]	; (8001b14 <MX_GPIO_Init+0x2dc>)
 8001966:	f002 ff4f 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	2108      	movs	r1, #8
 800196e:	486a      	ldr	r0, [pc, #424]	; (8001b18 <MX_GPIO_Init+0x2e0>)
 8001970:	f002 ff4a 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	4866      	ldr	r0, [pc, #408]	; (8001b14 <MX_GPIO_Init+0x2dc>)
 800197c:	f002 ff44 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001986:	4865      	ldr	r0, [pc, #404]	; (8001b1c <MX_GPIO_Init+0x2e4>)
 8001988:	f002 ff3e 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	21c8      	movs	r1, #200	; 0xc8
 8001990:	4863      	ldr	r0, [pc, #396]	; (8001b20 <MX_GPIO_Init+0x2e8>)
 8001992:	f002 ff39 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001996:	2308      	movs	r3, #8
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a6:	4619      	mov	r1, r3
 80019a8:	485e      	ldr	r0, [pc, #376]	; (8001b24 <MX_GPIO_Init+0x2ec>)
 80019aa:	f002 fc61 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80019ae:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c0:	230b      	movs	r3, #11
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	4855      	ldr	r0, [pc, #340]	; (8001b20 <MX_GPIO_Init+0x2e8>)
 80019cc:	f002 fc50 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80019d0:	f643 4323 	movw	r3, #15395	; 0x3c23
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019e2:	230a      	movs	r3, #10
 80019e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ea:	4619      	mov	r1, r3
 80019ec:	484e      	ldr	r0, [pc, #312]	; (8001b28 <MX_GPIO_Init+0x2f0>)
 80019ee:	f002 fc3f 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a04:	4619      	mov	r1, r3
 8001a06:	4849      	ldr	r0, [pc, #292]	; (8001b2c <MX_GPIO_Init+0x2f4>)
 8001a08:	f002 fc32 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a0c:	2340      	movs	r3, #64	; 0x40
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a10:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <MX_GPIO_Init+0x2f8>)
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	483c      	ldr	r0, [pc, #240]	; (8001b10 <MX_GPIO_Init+0x2d8>)
 8001a20:	f002 fc26 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a24:	2320      	movs	r3, #32
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4835      	ldr	r0, [pc, #212]	; (8001b10 <MX_GPIO_Init+0x2d8>)
 8001a3c:	f002 fc18 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8001a40:	f241 030e 	movw	r3, #4110	; 0x100e
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a56:	4619      	mov	r1, r3
 8001a58:	482e      	ldr	r0, [pc, #184]	; (8001b14 <MX_GPIO_Init+0x2dc>)
 8001a5a:	f002 fc09 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a70:	4619      	mov	r1, r3
 8001a72:	4830      	ldr	r0, [pc, #192]	; (8001b34 <MX_GPIO_Init+0x2fc>)
 8001a74:	f002 fbfc 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4822      	ldr	r0, [pc, #136]	; (8001b18 <MX_GPIO_Init+0x2e0>)
 8001a90:	f002 fbee 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a94:	2310      	movs	r3, #16
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	481a      	ldr	r0, [pc, #104]	; (8001b10 <MX_GPIO_Init+0x2d8>)
 8001aa8:	f002 fbe2 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001aac:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4816      	ldr	r0, [pc, #88]	; (8001b1c <MX_GPIO_Init+0x2e4>)
 8001ac2:	f002 fbd5 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	480f      	ldr	r0, [pc, #60]	; (8001b1c <MX_GPIO_Init+0x2e4>)
 8001ae0:	f002 fbc6 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_GPIO_Init+0x2f8>)
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MX_GPIO_Init+0x2dc>)
 8001afa:	f002 fbb9 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001afe:	2310      	movs	r3, #16
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e016      	b.n	8001b38 <MX_GPIO_Init+0x300>
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40022800 	.word	0x40022800
 8001b1c:	40021c00 	.word	0x40021c00
 8001b20:	40021800 	.word	0x40021800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40022400 	.word	0x40022400
 8001b30:	10120000 	.word	0x10120000
 8001b34:	40020800 	.word	0x40020800
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b3e:	230a      	movs	r3, #10
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4838      	ldr	r0, [pc, #224]	; (8001c2c <MX_GPIO_Init+0x3f4>)
 8001b4a:	f002 fb91 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001b4e:	23c8      	movs	r3, #200	; 0xc8
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4832      	ldr	r0, [pc, #200]	; (8001c30 <MX_GPIO_Init+0x3f8>)
 8001b66:	f002 fb83 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	482b      	ldr	r0, [pc, #172]	; (8001c34 <MX_GPIO_Init+0x3fc>)
 8001b86:	f002 fb73 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b8a:	2332      	movs	r3, #50	; 0x32
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4823      	ldr	r0, [pc, #140]	; (8001c34 <MX_GPIO_Init+0x3fc>)
 8001ba6:	f002 fb63 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001baa:	2304      	movs	r3, #4
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481c      	ldr	r0, [pc, #112]	; (8001c30 <MX_GPIO_Init+0x3f8>)
 8001bbe:	f002 fb57 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bc2:	2386      	movs	r3, #134	; 0x86
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd2:	230b      	movs	r3, #11
 8001bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4816      	ldr	r0, [pc, #88]	; (8001c38 <MX_GPIO_Init+0x400>)
 8001bde:	f002 fb47 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001be2:	2328      	movs	r3, #40	; 0x28
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480e      	ldr	r0, [pc, #56]	; (8001c38 <MX_GPIO_Init+0x400>)
 8001bfe:	f002 fb37 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001c02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c14:	2305      	movs	r3, #5
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <MX_GPIO_Init+0x404>)
 8001c20:	f002 fb26 	bl	8004270 <HAL_GPIO_Init>

}
 8001c24:	bf00      	nop
 8001c26:	3740      	adds	r7, #64	; 0x40
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021c00 	.word	0x40021c00
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400

08001c40 <TouchTimer_Init>:

/* USER CODE BEGIN 4 */

void TouchTimer_Init()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
BSP_TS_Init(800, 272);
 8001c44:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001c48:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001c4c:	f000 fa12 	bl	8002074 <BSP_TS_Init>
if(HAL_TIM_Base_Init(&htim3) != HAL_OK ) { while(1);}
 8001c50:	4807      	ldr	r0, [pc, #28]	; (8001c70 <TouchTimer_Init+0x30>)
 8001c52:	f008 ff4b 	bl	800aaec <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d000      	beq.n	8001c5e <TouchTimer_Init+0x1e>
 8001c5c:	e7fe      	b.n	8001c5c <TouchTimer_Init+0x1c>
if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK ) { while(1);}
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <TouchTimer_Init+0x30>)
 8001c60:	f008 ff70 	bl	800ab44 <HAL_TIM_Base_Start_IT>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d000      	beq.n	8001c6c <TouchTimer_Init+0x2c>
 8001c6a:	e7fe      	b.n	8001c6a <TouchTimer_Init+0x2a>

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2002141c 	.word	0x2002141c

08001c74 <PollTouchScreen>:

void PollTouchScreen()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0

static TS_StateTypeDef prev_state;

TS_StateTypeDef ts;

BSP_TS_GetState(&ts);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fa39 	bl	80020f4 <BSP_TS_GetState>

TS_State.Pressed = ts.touchDetected;
 8001c82:	783b      	ldrb	r3, [r7, #0]
 8001c84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

if (prev_state.touchDetected != ts.touchDetected)
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <PollTouchScreen+0x54>)
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	783b      	ldrb	r3, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d016      	beq.n	8001cc0 <PollTouchScreen+0x4c>
{
		prev_state.touchDetected =ts.touchDetected;
 8001c92:	783a      	ldrb	r2, [r7, #0]
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <PollTouchScreen+0x54>)
 8001c96:	701a      	strb	r2, [r3, #0]
		if ((ts.touchX != 0) &&(ts.touchY != 0))
		{
			prev_state.touchX[0] =ts.touchX[0];
 8001c98:	887a      	ldrh	r2, [r7, #2]
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <PollTouchScreen+0x54>)
 8001c9c:	805a      	strh	r2, [r3, #2]
			prev_state.touchY[0] =ts.touchY[0];
 8001c9e:	89ba      	ldrh	r2, [r7, #12]
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <PollTouchScreen+0x54>)
 8001ca2:	819a      	strh	r2, [r3, #12]
		}

	    TS_State.Layer=0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	    TS_State.x = prev_state.touchX[0];
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <PollTouchScreen+0x54>)
 8001cac:	885b      	ldrh	r3, [r3, #2]
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	    TS_State.y = prev_state.touchY[0];
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <PollTouchScreen+0x54>)
 8001cb2:	899b      	ldrh	r3, [r3, #12]
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30


		GUI_TOUCH_StoreStateEx(&TS_State);
 8001cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f015 fa82 	bl	80171c4 <GUI_TOUCH_StoreStateEx>





}
 8001cc0:	bf00      	nop
 8001cc2:	3738      	adds	r7, #56	; 0x38
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200018ac 	.word	0x200018ac

08001ccc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8001cd4:	f00c f9b8 	bl	800e048 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001cd8:	f013 f8c6 	bl	8014e68 <MX_USB_HOST_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 8001cdc:	f011 fbe6 	bl	80134ac <GRAPHICS_MainTask>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f00e fdb4 	bl	801084e <osDelay>
 8001ce6:	e7fb      	b.n	8001ce0 <StartDefaultTask+0x14>

08001ce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cfa:	f001 fb11 	bl	8003320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM3) {
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_TIM_PeriodElapsedCallback+0x24>

   //   BSP_TS_Init(480, 272);
	  PollTouchScreen();
 8001d08:	f7ff ffb4 	bl	8001c74 <PollTouchScreen>
//  PID_X_Exec();
//  BSP_TS_ITClear();
  }

  /* USER CODE END Callback 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40001000 	.word	0x40001000
 8001d18:	40000400 	.word	0x40000400

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <I2Cx_MspInit+0x150>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d14d      	bne.n	8001dd8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001d60:	2302      	movs	r3, #2
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001d64:	2304      	movs	r3, #4
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4845      	ldr	r0, [pc, #276]	; (8001e84 <I2Cx_MspInit+0x158>)
 8001d70:	f002 fa7e 	bl	8004270 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4840      	ldr	r0, [pc, #256]	; (8001e84 <I2Cx_MspInit+0x158>)
 8001d82:	f002 fa75 	bl	8004270 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a37      	ldr	r2, [pc, #220]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001db0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001db4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	210f      	movs	r1, #15
 8001dba:	2048      	movs	r0, #72	; 0x48
 8001dbc:	f001 fe3e 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001dc0:	2048      	movs	r0, #72	; 0x48
 8001dc2:	f001 fe57 	bl	8003a74 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	210f      	movs	r1, #15
 8001dca:	2049      	movs	r0, #73	; 0x49
 8001dcc:	f001 fe36 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001dd0:	2049      	movs	r0, #73	; 0x49
 8001dd2:	f001 fe4f 	bl	8003a74 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001dd6:	e04d      	b.n	8001e74 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001df6:	2312      	movs	r3, #18
 8001df8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001e02:	2304      	movs	r3, #4
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	481e      	ldr	r0, [pc, #120]	; (8001e88 <I2Cx_MspInit+0x15c>)
 8001e0e:	f002 fa2f 	bl	8004270 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481a      	ldr	r0, [pc, #104]	; (8001e88 <I2Cx_MspInit+0x15c>)
 8001e20:	f002 fa26 	bl	8004270 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e46:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <I2Cx_MspInit+0x154>)
 8001e4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e52:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	210f      	movs	r1, #15
 8001e58:	201f      	movs	r0, #31
 8001e5a:	f001 fdef 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001e5e:	201f      	movs	r0, #31
 8001e60:	f001 fe08 	bl	8003a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	210f      	movs	r1, #15
 8001e68:	2020      	movs	r0, #32
 8001e6a:	f001 fde7 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001e6e:	2020      	movs	r0, #32
 8001e70:	f001 fe00 	bl	8003a74 <HAL_NVIC_EnableIRQ>
}
 8001e74:	bf00      	nop
 8001e76:	3730      	adds	r7, #48	; 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200018d8 	.word	0x200018d8
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40021c00 	.word	0x40021c00
 8001e88:	40020400 	.word	0x40020400

08001e8c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f004 fc19 	bl	80066cc <HAL_I2C_GetState>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d125      	bne.n	8001eec <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <I2Cx_Init+0x68>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <I2Cx_Init+0x6c>)
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e002      	b.n	8001eb6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <I2Cx_Init+0x70>)
 8001eb4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <I2Cx_Init+0x74>)
 8001eba:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff23 	bl	8001d2c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f004 f902 	bl	80060f0 <HAL_I2C_Init>
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200018d8 	.word	0x200018d8
 8001ef8:	40005c00 	.word	0x40005c00
 8001efc:	40005400 	.word	0x40005400
 8001f00:	40912732 	.word	0x40912732

08001f04 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af04      	add	r7, sp, #16
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	72fb      	strb	r3, [r7, #11]
 8001f16:	460b      	mov	r3, r1
 8001f18:	813b      	strh	r3, [r7, #8]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	b299      	uxth	r1, r3
 8001f26:	88f8      	ldrh	r0, [r7, #6]
 8001f28:	893a      	ldrh	r2, [r7, #8]
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4603      	mov	r3, r0
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f004 faac 	bl	8006498 <HAL_I2C_Mem_Read>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f832 	bl	8001fb8 <I2Cx_Error>
  }
  return status;    
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	; 0x28
 8001f62:	af04      	add	r7, sp, #16
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	4608      	mov	r0, r1
 8001f68:	4611      	mov	r1, r2
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	72fb      	strb	r3, [r7, #11]
 8001f70:	460b      	mov	r3, r1
 8001f72:	813b      	strh	r3, [r7, #8]
 8001f74:	4613      	mov	r3, r2
 8001f76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	88f8      	ldrh	r0, [r7, #6]
 8001f82:	893a      	ldrh	r2, [r7, #8]
 8001f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4603      	mov	r3, r0
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f004 f96b 	bl	8006270 <HAL_I2C_Mem_Write>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f805 	bl	8001fb8 <I2Cx_Error>
  }
  return status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f004 f923 	bl	8006210 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff5e 	bl	8001e8c <I2Cx_Init>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TS_IO_Init+0x10>)
 8001fde:	f7ff ff55 	bl	8001e8c <I2Cx_Init>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200018d8 	.word	0x200018d8

08001fec <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	b29a      	uxth	r2, r3
 8002002:	79f9      	ldrb	r1, [r7, #7]
 8002004:	2301      	movs	r3, #1
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	1d7b      	adds	r3, r7, #5
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	4803      	ldr	r0, [pc, #12]	; (800201c <TS_IO_Write+0x30>)
 8002010:	f7ff ffa5 	bl	8001f5e <I2Cx_WriteMultiple>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200018d8 	.word	0x200018d8

08002020 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	b29a      	uxth	r2, r3
 8002038:	79f9      	ldrb	r1, [r7, #7]
 800203a:	2301      	movs	r3, #1
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	f107 030f 	add.w	r3, r7, #15
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	4804      	ldr	r0, [pc, #16]	; (8002058 <TS_IO_Read+0x38>)
 8002048:	f7ff ff5c 	bl	8001f04 <I2Cx_ReadMultiple>

  return read_value;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200018d8 	.word	0x200018d8

0800205c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f001 f97b 	bl	8003360 <HAL_Delay>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	80fb      	strh	r3, [r7, #6]
 8002080:	4613      	mov	r3, r2
 8002082:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <BSP_TS_Init+0x68>)
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <BSP_TS_Init+0x6c>)
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <BSP_TS_Init+0x70>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2070      	movs	r0, #112	; 0x70
 800209a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <BSP_TS_Init+0x70>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2070      	movs	r0, #112	; 0x70
 80020a2:	4798      	blx	r3
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b51      	cmp	r3, #81	; 0x51
 80020a8:	d111      	bne.n	80020ce <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <BSP_TS_Init+0x74>)
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <BSP_TS_Init+0x70>)
 80020ae:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <BSP_TS_Init+0x78>)
 80020b2:	2270      	movs	r2, #112	; 0x70
 80020b4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <BSP_TS_Init+0x7c>)
 80020b8:	2208      	movs	r2, #8
 80020ba:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <BSP_TS_Init+0x74>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <BSP_TS_Init+0x78>)
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	b292      	uxth	r2, r2
 80020c8:	4610      	mov	r0, r2
 80020ca:	4798      	blx	r3
 80020cc:	e001      	b.n	80020d2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80020ce:	2303      	movs	r3, #3
 80020d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20001928 	.word	0x20001928
 80020e0:	2000192a 	.word	0x2000192a
 80020e4:	20000070 	.word	0x20000070
 80020e8:	20001924 	.word	0x20001924
 80020ec:	2000192d 	.word	0x2000192d
 80020f0:	2000192c 	.word	0x2000192c

080020f4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b097      	sub	sp, #92	; 0x5c
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800210e:	4b97      	ldr	r3, [pc, #604]	; (800236c <BSP_TS_GetState+0x278>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a96      	ldr	r2, [pc, #600]	; (8002370 <BSP_TS_GetState+0x27c>)
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	b292      	uxth	r2, r2
 800211a:	4610      	mov	r0, r2
 800211c:	4798      	blx	r3
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 81a8 	beq.w	8002480 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002130:	2300      	movs	r3, #0
 8002132:	64bb      	str	r3, [r7, #72]	; 0x48
 8002134:	e197      	b.n	8002466 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002136:	4b8d      	ldr	r3, [pc, #564]	; (800236c <BSP_TS_GetState+0x278>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	4a8c      	ldr	r2, [pc, #560]	; (8002370 <BSP_TS_GetState+0x27c>)
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	b290      	uxth	r0, r2
 8002142:	f107 0120 	add.w	r1, r7, #32
 8002146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002148:	0052      	lsls	r2, r2, #1
 800214a:	188c      	adds	r4, r1, r2
 800214c:	f107 0114 	add.w	r1, r7, #20
 8002150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002152:	0052      	lsls	r2, r2, #1
 8002154:	440a      	add	r2, r1
 8002156:	4621      	mov	r1, r4
 8002158:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800215a:	4b86      	ldr	r3, [pc, #536]	; (8002374 <BSP_TS_GetState+0x280>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d11b      	bne.n	800219a <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8002162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800216a:	4413      	add	r3, r2
 800216c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002178:	440b      	add	r3, r1
 800217a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800217e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002186:	4413      	add	r3, r2
 8002188:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800218c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002194:	440b      	add	r3, r1
 8002196:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <BSP_TS_GetState+0x280>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80021a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021ae:	4413      	add	r3, r2
 80021b0:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80021b4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80021c2:	440b      	add	r3, r1
 80021c4:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <BSP_TS_GetState+0x280>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021dc:	4413      	add	r3, r2
 80021de:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80021e2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80021f0:	440b      	add	r3, r1
 80021f2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80021f6:	4b5f      	ldr	r3, [pc, #380]	; (8002374 <BSP_TS_GetState+0x280>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01b      	beq.n	800223a <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800220a:	4413      	add	r3, r2
 800220c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002218:	440b      	add	r3, r1
 800221a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800221e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002226:	4413      	add	r3, r2
 8002228:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800222c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002234:	440b      	add	r3, r1
 8002236:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800223a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002242:	4413      	add	r3, r2
 8002244:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002248:	4619      	mov	r1, r3
 800224a:	4a4b      	ldr	r2, [pc, #300]	; (8002378 <BSP_TS_GetState+0x284>)
 800224c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	4299      	cmp	r1, r3
 8002254:	d90e      	bls.n	8002274 <BSP_TS_GetState+0x180>
 8002256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800225e:	4413      	add	r3, r2
 8002260:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002264:	4944      	ldr	r1, [pc, #272]	; (8002378 <BSP_TS_GetState+0x284>)
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800226c:	b29b      	uxth	r3, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	e00d      	b.n	8002290 <BSP_TS_GetState+0x19c>
 8002274:	4a40      	ldr	r2, [pc, #256]	; (8002378 <BSP_TS_GetState+0x284>)
 8002276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	b29a      	uxth	r2, r3
 800227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002286:	440b      	add	r3, r1
 8002288:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800229c:	4413      	add	r3, r2
 800229e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4a35      	ldr	r2, [pc, #212]	; (800237c <BSP_TS_GetState+0x288>)
 80022a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	4299      	cmp	r1, r3
 80022ae:	d90e      	bls.n	80022ce <BSP_TS_GetState+0x1da>
 80022b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022b8:	4413      	add	r3, r2
 80022ba:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80022be:	492f      	ldr	r1, [pc, #188]	; (800237c <BSP_TS_GetState+0x288>)
 80022c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	e00d      	b.n	80022ea <BSP_TS_GetState+0x1f6>
 80022ce:	4a2b      	ldr	r2, [pc, #172]	; (800237c <BSP_TS_GetState+0x288>)
 80022d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80022e0:	440b      	add	r3, r1
 80022e2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80022ee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80022f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80022f6:	4413      	add	r3, r2
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	dd17      	ble.n	800232c <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80022fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002304:	4413      	add	r3, r2
 8002306:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800230a:	4619      	mov	r1, r3
 800230c:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <BSP_TS_GetState+0x284>)
 800230e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800231c:	4413      	add	r3, r2
 800231e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002322:	4619      	mov	r1, r3
 8002324:	4a15      	ldr	r2, [pc, #84]	; (800237c <BSP_TS_GetState+0x288>)
 8002326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002328:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <BSP_TS_GetState+0x27c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b70      	cmp	r3, #112	; 0x70
 8002332:	d125      	bne.n	8002380 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8002334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800233c:	4413      	add	r3, r2
 800233e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	460a      	mov	r2, r1
 800234c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800234e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002356:	4413      	add	r3, r2
 8002358:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002360:	3304      	adds	r3, #4
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	460a      	mov	r2, r1
 8002368:	809a      	strh	r2, [r3, #4]
 800236a:	e02c      	b.n	80023c6 <BSP_TS_GetState+0x2d2>
 800236c:	20001924 	.word	0x20001924
 8002370:	2000192d 	.word	0x2000192d
 8002374:	2000192c 	.word	0x2000192c
 8002378:	20001930 	.word	0x20001930
 800237c:	20001944 	.word	0x20001944
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8002380:	4b42      	ldr	r3, [pc, #264]	; (800248c <BSP_TS_GetState+0x398>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	4a42      	ldr	r2, [pc, #264]	; (8002490 <BSP_TS_GetState+0x39c>)
 8002388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	fb03 f301 	mul.w	r3, r3, r1
 8002392:	0b1b      	lsrs	r3, r3, #12
 8002394:	b299      	uxth	r1, r3
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	460a      	mov	r2, r1
 80023a0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80023a2:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <BSP_TS_GetState+0x3a0>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <BSP_TS_GetState+0x3a4>)
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	fb03 f301 	mul.w	r3, r3, r1
 80023b4:	0b1b      	lsrs	r3, r3, #12
 80023b6:	b299      	uxth	r1, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	3304      	adds	r3, #4
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	460a      	mov	r2, r1
 80023c4:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80023c6:	4b35      	ldr	r3, [pc, #212]	; (800249c <BSP_TS_GetState+0x3a8>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b298      	uxth	r0, r3
 80023cc:	f107 010c 	add.w	r1, r7, #12
 80023d0:	f107 0210 	add.w	r2, r7, #16
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	460b      	mov	r3, r1
 80023dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023de:	f7fe fa7b 	bl	80008d8 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	b2d9      	uxtb	r1, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ea:	4413      	add	r3, r2
 80023ec:	3316      	adds	r3, #22
 80023ee:	460a      	mov	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	b2d9      	uxtb	r1, r3
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	4413      	add	r3, r2
 80023fc:	3320      	adds	r3, #32
 80023fe:	460a      	mov	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d827      	bhi.n	8002458 <BSP_TS_GetState+0x364>
 8002408:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <BSP_TS_GetState+0x31c>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002421 	.word	0x08002421
 8002414:	0800242f 	.word	0x0800242f
 8002418:	0800243d 	.word	0x0800243d
 800241c:	0800244b 	.word	0x0800244b
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002424:	4413      	add	r3, r2
 8002426:	331b      	adds	r3, #27
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
          break;
 800242c:	e018      	b.n	8002460 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002432:	4413      	add	r3, r2
 8002434:	331b      	adds	r3, #27
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
          break;
 800243a:	e011      	b.n	8002460 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	4413      	add	r3, r2
 8002442:	331b      	adds	r3, #27
 8002444:	2203      	movs	r2, #3
 8002446:	701a      	strb	r2, [r3, #0]
          break;
 8002448:	e00a      	b.n	8002460 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244e:	4413      	add	r3, r2
 8002450:	331b      	adds	r3, #27
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
          break;
 8002456:	e003      	b.n	8002460 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800245e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8002460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002462:	3301      	adds	r3, #1
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246e:	4293      	cmp	r3, r2
 8002470:	f4ff ae61 	bcc.w	8002136 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f813 	bl	80024a0 <BSP_TS_Get_GestureId>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002480:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002484:	4618      	mov	r0, r3
 8002486:	3754      	adds	r7, #84	; 0x54
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	20001928 	.word	0x20001928
 8002490:	20001930 	.word	0x20001930
 8002494:	2000192a 	.word	0x2000192a
 8002498:	20001944 	.word	0x20001944
 800249c:	2000192d 	.word	0x2000192d

080024a0 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <BSP_TS_Get_GestureId+0x90>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f107 0208 	add.w	r2, r7, #8
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f9f2 	bl	80008a6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b18      	cmp	r3, #24
 80024c6:	d01b      	beq.n	8002500 <BSP_TS_Get_GestureId+0x60>
 80024c8:	2b18      	cmp	r3, #24
 80024ca:	d806      	bhi.n	80024da <BSP_TS_Get_GestureId+0x3a>
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d00f      	beq.n	80024f0 <BSP_TS_Get_GestureId+0x50>
 80024d0:	2b14      	cmp	r3, #20
 80024d2:	d011      	beq.n	80024f8 <BSP_TS_Get_GestureId+0x58>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <BSP_TS_Get_GestureId+0x48>
 80024d8:	e022      	b.n	8002520 <BSP_TS_Get_GestureId+0x80>
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d018      	beq.n	8002510 <BSP_TS_Get_GestureId+0x70>
 80024de:	2b49      	cmp	r3, #73	; 0x49
 80024e0:	d01a      	beq.n	8002518 <BSP_TS_Get_GestureId+0x78>
 80024e2:	2b1c      	cmp	r3, #28
 80024e4:	d010      	beq.n	8002508 <BSP_TS_Get_GestureId+0x68>
 80024e6:	e01b      	b.n	8002520 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80024ee:	e01a      	b.n	8002526 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80024f6:	e016      	b.n	8002526 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80024fe:	e012      	b.n	8002526 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2203      	movs	r2, #3
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002506:	e00e      	b.n	8002526 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2204      	movs	r2, #4
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800250e:	e00a      	b.n	8002526 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2205      	movs	r2, #5
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002516:	e006      	b.n	8002526 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2206      	movs	r2, #6
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800251e:	e002      	b.n	8002526 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      break;
 8002524:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	2000192d 	.word	0x2000192d

08002534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_MspInit+0x4c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_MspInit+0x4c>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_MspInit+0x4c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_MspInit+0x4c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_MspInit+0x4c>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_MspInit+0x4c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	210f      	movs	r1, #15
 800256e:	f06f 0001 	mvn.w	r0, #1
 8002572:	f001 fa63 	bl	8003a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800

08002584 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <HAL_ADC_MspInit+0xa4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d13c      	bne.n	8002620 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a20      	ldr	r2, [pc, #128]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_ADC_MspInit+0xa8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80025ee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80025f2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f4:	2303      	movs	r3, #3
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	480b      	ldr	r0, [pc, #44]	; (8002630 <HAL_ADC_MspInit+0xac>)
 8002604:	f001 fe34 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002608:	2301      	movs	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260c:	2303      	movs	r3, #3
 800260e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	4806      	ldr	r0, [pc, #24]	; (8002634 <HAL_ADC_MspInit+0xb0>)
 800261c:	f001 fe28 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40012200 	.word	0x40012200
 800262c:	40023800 	.word	0x40023800
 8002630:	40021400 	.word	0x40021400
 8002634:	40020000 	.word	0x40020000

08002638 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_CRC_MspInit+0x38>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10b      	bne.n	8002662 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_CRC_MspInit+0x3c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_CRC_MspInit+0x3c>)
 8002650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_CRC_MspInit+0x3c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023000 	.word	0x40023000
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08e      	sub	sp, #56	; 0x38
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a50      	ldr	r2, [pc, #320]	; (80027d8 <HAL_DCMI_MspInit+0x160>)
 8002696:	4293      	cmp	r3, r2
 8002698:	f040 809a 	bne.w	80027d0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800269c:	4b4f      	ldr	r3, [pc, #316]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 800269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6353      	str	r3, [r2, #52]	; 0x34
 80026a8:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b4:	4b49      	ldr	r3, [pc, #292]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	6313      	str	r3, [r2, #48]	; 0x30
 80026c0:	4b46      	ldr	r3, [pc, #280]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a42      	ldr	r2, [pc, #264]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b40      	ldr	r3, [pc, #256]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026e4:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 8002702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002706:	6313      	str	r3, [r2, #48]	; 0x30
 8002708:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4a30      	ldr	r2, [pc, #192]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6313      	str	r3, [r2, #48]	; 0x30
 8002720:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_DCMI_MspInit+0x164>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800272c:	2360      	movs	r3, #96	; 0x60
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800273c:	230d      	movs	r3, #13
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002744:	4619      	mov	r1, r3
 8002746:	4826      	ldr	r0, [pc, #152]	; (80027e0 <HAL_DCMI_MspInit+0x168>)
 8002748:	f001 fd92 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800274c:	2308      	movs	r3, #8
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800275c:	230d      	movs	r3, #13
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002764:	4619      	mov	r1, r3
 8002766:	481f      	ldr	r0, [pc, #124]	; (80027e4 <HAL_DCMI_MspInit+0x16c>)
 8002768:	f001 fd82 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800276c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800277e:	230d      	movs	r3, #13
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002786:	4619      	mov	r1, r3
 8002788:	4817      	ldr	r0, [pc, #92]	; (80027e8 <HAL_DCMI_MspInit+0x170>)
 800278a:	f001 fd71 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800278e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027a0:	230d      	movs	r3, #13
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a8:	4619      	mov	r1, r3
 80027aa:	4810      	ldr	r0, [pc, #64]	; (80027ec <HAL_DCMI_MspInit+0x174>)
 80027ac:	f001 fd60 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80027b0:	2350      	movs	r3, #80	; 0x50
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027c0:	230d      	movs	r3, #13
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c8:	4619      	mov	r1, r3
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <HAL_DCMI_MspInit+0x178>)
 80027cc:	f001 fd50 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80027d0:	bf00      	nop
 80027d2:	3738      	adds	r7, #56	; 0x38
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	50050000 	.word	0x50050000
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40020c00 	.word	0x40020c00
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40021c00 	.word	0x40021c00
 80027f0:	40020000 	.word	0x40020000

080027f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <HAL_I2C_MspInit+0xdc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d129      	bne.n	800286a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800282e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002834:	2312      	movs	r3, #18
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002840:	2304      	movs	r3, #4
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	4823      	ldr	r0, [pc, #140]	; (80028d8 <HAL_I2C_MspInit+0xe4>)
 800284c:	f001 fd10 	bl	8004270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 8002856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002868:	e02d      	b.n	80028c6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_I2C_MspInit+0xe8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d128      	bne.n	80028c6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800288c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002892:	2312      	movs	r3, #18
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002896:	2301      	movs	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800289e:	2304      	movs	r3, #4
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <HAL_I2C_MspInit+0xec>)
 80028aa:	f001 fce1 	bl	8004270 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 80028b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_I2C_MspInit+0xe0>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	bf00      	nop
 80028c8:	3730      	adds	r7, #48	; 0x30
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40005400 	.word	0x40005400
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40005c00 	.word	0x40005c00
 80028e0:	40021c00 	.word	0x40021c00

080028e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_I2C_MspDeInit+0x54>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10b      	bne.n	800290e <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_I2C_MspDeInit+0x58>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_I2C_MspDeInit+0x58>)
 80028fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8002902:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002906:	480e      	ldr	r0, [pc, #56]	; (8002940 <HAL_I2C_MspDeInit+0x5c>)
 8002908:	f001 fe5c 	bl	80045c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800290c:	e00f      	b.n	800292e <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_I2C_MspDeInit+0x60>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d10a      	bne.n	800292e <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_I2C_MspDeInit+0x58>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_I2C_MspDeInit+0x58>)
 800291e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8002924:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002928:	4807      	ldr	r0, [pc, #28]	; (8002948 <HAL_I2C_MspDeInit+0x64>)
 800292a:	f001 fe4b 	bl	80045c4 <HAL_GPIO_DeInit>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40005400 	.word	0x40005400
 800293c:	40023800 	.word	0x40023800
 8002940:	40020400 	.word	0x40020400
 8002944:	40005c00 	.word	0x40005c00
 8002948:	40021c00 	.word	0x40021c00

0800294c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_QSPI_MspInit+0x10c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d170      	bne.n	8002a50 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	4a3a      	ldr	r2, [pc, #232]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6393      	str	r3, [r2, #56]	; 0x38
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_QSPI_MspInit+0x110>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80029ce:	2304      	movs	r3, #4
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80029de:	2309      	movs	r3, #9
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	481d      	ldr	r0, [pc, #116]	; (8002a60 <HAL_QSPI_MspInit+0x114>)
 80029ea:	f001 fc41 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80029ee:	2340      	movs	r3, #64	; 0x40
 80029f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80029fe:	230a      	movs	r3, #10
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002a02:	f107 031c 	add.w	r3, r7, #28
 8002a06:	4619      	mov	r1, r3
 8002a08:	4816      	ldr	r0, [pc, #88]	; (8002a64 <HAL_QSPI_MspInit+0x118>)
 8002a0a:	f001 fc31 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a1e:	2309      	movs	r3, #9
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	480e      	ldr	r0, [pc, #56]	; (8002a64 <HAL_QSPI_MspInit+0x118>)
 8002a2a:	f001 fc21 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002a2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a40:	2309      	movs	r3, #9
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4807      	ldr	r0, [pc, #28]	; (8002a68 <HAL_QSPI_MspInit+0x11c>)
 8002a4c:	f001 fc10 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3730      	adds	r7, #48	; 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	a0001000 	.word	0xa0001000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020c00 	.word	0x40020c00

08002a6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_RTC_MspInit+0x2c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d105      	bne.n	8002a8a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_RTC_MspInit+0x30>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <HAL_RTC_MspInit+0x30>)
 8002a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40002800 	.word	0x40002800
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <HAL_SD_MspInit+0xb4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d144      	bne.n	8002b4c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002af8:	f043 0308 	orr.w	r3, r3, #8
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_SD_MspInit+0xb8>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002b0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002b0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4619      	mov	r1, r3
 8002b26:	480d      	ldr	r0, [pc, #52]	; (8002b5c <HAL_SD_MspInit+0xbc>)
 8002b28:	f001 fba2 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b3c:	230c      	movs	r3, #12
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <HAL_SD_MspInit+0xc0>)
 8002b48:	f001 fb92 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00

08002b64 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002b84:	d127      	bne.n	8002bd6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ba4:	f043 0308 	orr.w	r3, r3, #8
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4804      	ldr	r0, [pc, #16]	; (8002be4 <HAL_SPDIFRX_MspInit+0x80>)
 8002bd2:	f001 fb4d 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020c00 	.word	0x40020c00

08002be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <HAL_TIM_Base_MspInit+0x11c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10c      	bne.n	8002c24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a3e      	ldr	r2, [pc, #248]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c22:	e06a      	b.n	8002cfa <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c2e:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a35      	ldr	r2, [pc, #212]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	69fb      	ldr	r3, [r7, #28]
}
 8002c46:	e058      	b.n	8002cfa <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2f      	ldr	r2, [pc, #188]	; (8002d0c <HAL_TIM_Base_MspInit+0x124>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d130      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002c82:	2310      	movs	r3, #16
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c92:	2302      	movs	r3, #2
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	481c      	ldr	r0, [pc, #112]	; (8002d10 <HAL_TIM_Base_MspInit+0x128>)
 8002c9e:	f001 fae7 	bl	8004270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2105      	movs	r1, #5
 8002ca6:	201d      	movs	r0, #29
 8002ca8:	f000 fec8 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cac:	201d      	movs	r0, #29
 8002cae:	f000 fee1 	bl	8003a74 <HAL_NVIC_EnableIRQ>
}
 8002cb2:	e022      	b.n	8002cfa <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_TIM_Base_MspInit+0x12c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
}
 8002cd6:	e010      	b.n	8002cfa <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM8)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <HAL_TIM_Base_MspInit+0x130>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10b      	bne.n	8002cfa <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_TIM_Base_MspInit+0x120>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
}
 8002cfa:	bf00      	nop
 8002cfc:	3738      	adds	r7, #56	; 0x38
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40000c00 	.word	0x40000c00
 8002d18:	40010400 	.word	0x40010400

08002d1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_TIM_PWM_MspInit+0x38>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10b      	bne.n	8002d46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40001800 	.word	0x40001800
 8002d58:	40023800 	.word	0x40023800

08002d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 031c 	add.w	r3, r7, #28
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a45      	ldr	r2, [pc, #276]	; (8002e90 <HAL_TIM_MspPostInit+0x134>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d11d      	bne.n	8002dba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a44      	ldr	r2, [pc, #272]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4839      	ldr	r0, [pc, #228]	; (8002e98 <HAL_TIM_MspPostInit+0x13c>)
 8002db4:	f001 fa5c 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002db8:	e065      	b.n	8002e86 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc2:	d11d      	bne.n	8002e00 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4a32      	ldr	r2, [pc, #200]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dee:	2301      	movs	r3, #1
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002df2:	f107 031c 	add.w	r3, r7, #28
 8002df6:	4619      	mov	r1, r3
 8002df8:	4827      	ldr	r0, [pc, #156]	; (8002e98 <HAL_TIM_MspPostInit+0x13c>)
 8002dfa:	f001 fa39 	bl	8004270 <HAL_GPIO_Init>
}
 8002dfe:	e042      	b.n	8002e86 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <HAL_TIM_MspPostInit+0x140>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d11c      	bne.n	8002e44 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002e22:	2301      	movs	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e32:	2302      	movs	r3, #2
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f107 031c 	add.w	r3, r7, #28
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4818      	ldr	r0, [pc, #96]	; (8002ea0 <HAL_TIM_MspPostInit+0x144>)
 8002e3e:	f001 fa17 	bl	8004270 <HAL_GPIO_Init>
}
 8002e42:	e020      	b.n	8002e86 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM12)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_TIM_MspPostInit+0x148>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d11b      	bne.n	8002e86 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_TIM_MspPostInit+0x138>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002e66:	2340      	movs	r3, #64	; 0x40
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002e76:	2309      	movs	r3, #9
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002e7a:	f107 031c 	add.w	r3, r7, #28
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <HAL_TIM_MspPostInit+0x14c>)
 8002e82:	f001 f9f5 	bl	8004270 <HAL_GPIO_Init>
}
 8002e86:	bf00      	nop
 8002e88:	3730      	adds	r7, #48	; 0x30
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40001800 	.word	0x40001800
 8002ea8:	40021c00 	.word	0x40021c00

08002eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a3c      	ldr	r2, [pc, #240]	; (8002fbc <HAL_UART_MspInit+0x110>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d145      	bne.n	8002f5a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ece:	4b3c      	ldr	r3, [pc, #240]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a3b      	ldr	r2, [pc, #236]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002ed4:	f043 0310 	orr.w	r3, r3, #16
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a35      	ldr	r2, [pc, #212]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f26:	2307      	movs	r3, #7
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002f2a:	f107 031c 	add.w	r3, r7, #28
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4824      	ldr	r0, [pc, #144]	; (8002fc4 <HAL_UART_MspInit+0x118>)
 8002f32:	f001 f99d 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f48:	2307      	movs	r3, #7
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	481d      	ldr	r0, [pc, #116]	; (8002fc8 <HAL_UART_MspInit+0x11c>)
 8002f54:	f001 f98c 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f58:	e02c      	b.n	8002fb4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <HAL_UART_MspInit+0x120>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d127      	bne.n	8002fb4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f6a:	f043 0320 	orr.w	r3, r3, #32
 8002f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	6313      	str	r3, [r2, #48]	; 0x30
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_UART_MspInit+0x114>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002f94:	23c0      	movs	r3, #192	; 0xc0
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	4619      	mov	r1, r3
 8002fae:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <HAL_UART_MspInit+0x124>)
 8002fb0:	f001 f95e 	bl	8004270 <HAL_GPIO_Init>
}
 8002fb4:	bf00      	nop
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	40020800 	.word	0x40020800

08002fd4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <HAL_SAI_MspInit+0xbc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d124      	bne.n	8003030 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_SAI_MspInit+0xc0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_SAI_MspInit+0xc4>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_SAI_MspInit+0xc4>)
 8002ff4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_SAI_MspInit+0xc4>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_SAI_MspInit+0xc0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_SAI_MspInit+0xc0>)
 800300e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003010:	23f0      	movs	r3, #240	; 0xf0
 8003012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	2300      	movs	r3, #0
 800301e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003020:	230a      	movs	r3, #10
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4619      	mov	r1, r3
 800302a:	481c      	ldr	r0, [pc, #112]	; (800309c <HAL_SAI_MspInit+0xc8>)
 800302c:	f001 f920 	bl	8004270 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_SAI_MspInit+0xcc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d125      	bne.n	8003086 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_SAI_MspInit+0xc0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10b      	bne.n	800305a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_SAI_MspInit+0xc4>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_SAI_MspInit+0xc4>)
 8003048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_SAI_MspInit+0xc4>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_SAI_MspInit+0xc0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <HAL_SAI_MspInit+0xc0>)
 8003062:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003076:	230a      	movs	r3, #10
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	4808      	ldr	r0, [pc, #32]	; (80030a4 <HAL_SAI_MspInit+0xd0>)
 8003082:	f001 f8f5 	bl	8004270 <HAL_GPIO_Init>

    }
}
 8003086:	bf00      	nop
 8003088:	3728      	adds	r7, #40	; 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40015c04 	.word	0x40015c04
 8003094:	20001958 	.word	0x20001958
 8003098:	40023800 	.word	0x40023800
 800309c:	40022000 	.word	0x40022000
 80030a0:	40015c24 	.word	0x40015c24
 80030a4:	40021800 	.word	0x40021800

080030a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80030b8:	2200      	movs	r2, #0
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	2036      	movs	r0, #54	; 0x36
 80030be:	f000 fcbd 	bl	8003a3c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80030c2:	2036      	movs	r0, #54	; 0x36
 80030c4:	f000 fcd6 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <HAL_InitTick+0xa0>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_InitTick+0xa0>)
 80030ce:	f043 0310 	orr.w	r3, r3, #16
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_InitTick+0xa0>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030e0:	f107 0210 	add.w	r2, r7, #16
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f005 f8a4 	bl	8008238 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80030f0:	f005 f87a 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 80030f4:	4603      	mov	r3, r0
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <HAL_InitTick+0xa4>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	3b01      	subs	r3, #1
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_InitTick+0xa8>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_InitTick+0xac>)
 800310c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_InitTick+0xa8>)
 8003110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003114:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_InitTick+0xa8>)
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_InitTick+0xa8>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_InitTick+0xa8>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <HAL_InitTick+0xa8>)
 800312a:	f007 fcdf 	bl	800aaec <HAL_TIM_Base_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003134:	4806      	ldr	r0, [pc, #24]	; (8003150 <HAL_InitTick+0xa8>)
 8003136:	f007 fd05 	bl	800ab44 <HAL_TIM_Base_Start_IT>
 800313a:	4603      	mov	r3, r0
 800313c:	e000      	b.n	8003140 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	431bde83 	.word	0x431bde83
 8003150:	20021724 	.word	0x20021724
 8003154:	40001000 	.word	0x40001000

08003158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <HardFault_Handler+0x4>

0800316c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <MemManage_Handler+0x4>

08003172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <BusFault_Handler+0x4>

08003178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <UsageFault_Handler+0x4>

0800317e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <TIM3_IRQHandler+0x10>)
 8003192:	f007 fd2c 	bl	800abee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2002141c 	.word	0x2002141c

080031a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <TIM6_DAC_IRQHandler+0x10>)
 80031a6:	f007 fd22 	bl	800abee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20021724 	.word	0x20021724

080031b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <OTG_FS_IRQHandler+0x10>)
 80031ba:	f001 fdb7 	bl	8004d2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200220c8 	.word	0x200220c8

080031c8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80031cc:	4802      	ldr	r0, [pc, #8]	; (80031d8 <LTDC_IRQHandler+0x10>)
 80031ce:	f003 fe27 	bl	8006e20 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20021bd4 	.word	0x20021bd4

080031dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <DMA2D_IRQHandler+0x10>)
 80031e2:	f000 fea3 	bl	8003f2c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20021c7c 	.word	0x20021c7c

080031f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <_sbrk+0x50>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <_sbrk+0x16>
		heap_end = &end;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <_sbrk+0x50>)
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <_sbrk+0x54>)
 8003204:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <_sbrk+0x50>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <_sbrk+0x50>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	466a      	mov	r2, sp
 8003216:	4293      	cmp	r3, r2
 8003218:	d907      	bls.n	800322a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800321a:	f01b fc67 	bl	801eaec <__errno>
 800321e:	4602      	mov	r2, r0
 8003220:	230c      	movs	r3, #12
 8003222:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	e006      	b.n	8003238 <_sbrk+0x48>
	}

	heap_end += incr;
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <_sbrk+0x50>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	4a03      	ldr	r2, [pc, #12]	; (8003240 <_sbrk+0x50>)
 8003234:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003236:	68fb      	ldr	r3, [r7, #12]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	2000195c 	.word	0x2000195c
 8003244:	20022548 	.word	0x20022548

08003248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <SystemInit+0x5c>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <SystemInit+0x5c>)
 8003254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <SystemInit+0x60>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <SystemInit+0x60>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <SystemInit+0x60>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <SystemInit+0x60>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	490d      	ldr	r1, [pc, #52]	; (80032a8 <SystemInit+0x60>)
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <SystemInit+0x64>)
 8003276:	4013      	ands	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <SystemInit+0x60>)
 800327c:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <SystemInit+0x68>)
 800327e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <SystemInit+0x60>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a08      	ldr	r2, [pc, #32]	; (80032a8 <SystemInit+0x60>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <SystemInit+0x60>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <SystemInit+0x5c>)
 8003294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003298:	609a      	str	r2, [r3, #8]
#endif
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	fef6ffff 	.word	0xfef6ffff
 80032b0:	24003010 	.word	0x24003010

080032b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ba:	e003      	b.n	80032c4 <LoopCopyDataInit>

080032bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032c2:	3104      	adds	r1, #4

080032c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032c4:	480b      	ldr	r0, [pc, #44]	; (80032f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032cc:	d3f6      	bcc.n	80032bc <CopyDataInit>
  ldr  r2, =_sbss
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032d0:	e002      	b.n	80032d8 <LoopFillZerobss>

080032d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032d4:	f842 3b04 	str.w	r3, [r2], #4

080032d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032dc:	d3f9      	bcc.n	80032d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032de:	f7ff ffb3 	bl	8003248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032e2:	f01b fc09 	bl	801eaf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032e6:	f7fd fbcf 	bl	8000a88 <main>
  bx  lr    
 80032ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80032f0:	080236e4 	.word	0x080236e4
  ldr  r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032f8:	2000012c 	.word	0x2000012c
  ldr  r2, =_sbss
 80032fc:	2000012c 	.word	0x2000012c
  ldr  r3, = _ebss
 8003300:	20022548 	.word	0x20022548

08003304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003304:	e7fe      	b.n	8003304 <ADC_IRQHandler>

08003306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330a:	2003      	movs	r0, #3
 800330c:	f000 fb8b 	bl	8003a26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003310:	2000      	movs	r0, #0
 8003312:	f7ff fec9 	bl	80030a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003316:	f7ff f90d 	bl	8002534 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_IncTick+0x20>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_IncTick+0x24>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_IncTick+0x24>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000009c 	.word	0x2000009c
 8003344:	20021764 	.word	0x20021764

08003348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return uwTick;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_GetTick+0x14>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20021764 	.word	0x20021764

08003360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff ffee 	bl	8003348 <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d005      	beq.n	8003386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_Delay+0x40>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003386:	bf00      	nop
 8003388:	f7ff ffde 	bl	8003348 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d8f7      	bhi.n	8003388 <HAL_Delay+0x28>
  {
  }
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	2000009c 	.word	0x2000009c

080033a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e031      	b.n	800341e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff f8de 	bl	8002584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_ADC_Init+0x84>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	f043 0202 	orr.w	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f94e 	bl	8003694 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
 800340e:	e001      	b.n	8003414 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	ffffeefd 	.word	0xffffeefd

0800342c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e115      	b.n	8003674 <HAL_ADC_ConfigChannel+0x248>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b09      	cmp	r3, #9
 8003456:	d935      	bls.n	80034c4 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	3b1e      	subs	r3, #30
 800346e:	2207      	movs	r2, #7
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43da      	mvns	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	400a      	ands	r2, r1
 800347c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7f      	ldr	r2, [pc, #508]	; (8003680 <HAL_ADC_ConfigChannel+0x254>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10a      	bne.n	800349e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68d9      	ldr	r1, [r3, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	061a      	lsls	r2, r3, #24
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	e035      	b.n	800350a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68d9      	ldr	r1, [r3, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	4603      	mov	r3, r0
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4403      	add	r3, r0
 80034b6:	3b1e      	subs	r3, #30
 80034b8:	409a      	lsls	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	e022      	b.n	800350a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6919      	ldr	r1, [r3, #16]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	2207      	movs	r2, #7
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	400a      	ands	r2, r1
 80034e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6919      	ldr	r1, [r3, #16]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4403      	add	r3, r0
 8003500:	409a      	lsls	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d824      	bhi.n	800355c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	3b05      	subs	r3, #5
 8003524:	221f      	movs	r2, #31
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	400a      	ands	r2, r1
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	3b05      	subs	r3, #5
 800354e:	fa00 f203 	lsl.w	r2, r0, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	635a      	str	r2, [r3, #52]	; 0x34
 800355a:	e04c      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d824      	bhi.n	80035ae <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b23      	subs	r3, #35	; 0x23
 8003576:	221f      	movs	r2, #31
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43da      	mvns	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	400a      	ands	r2, r1
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	4618      	mov	r0, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b23      	subs	r3, #35	; 0x23
 80035a0:	fa00 f203 	lsl.w	r2, r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
 80035ac:	e023      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	3b41      	subs	r3, #65	; 0x41
 80035c0:	221f      	movs	r2, #31
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	400a      	ands	r2, r1
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4618      	mov	r0, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b41      	subs	r3, #65	; 0x41
 80035ea:	fa00 f203 	lsl.w	r2, r0, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a22      	ldr	r2, [pc, #136]	; (8003684 <HAL_ADC_ConfigChannel+0x258>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d109      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x1e8>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b12      	cmp	r3, #18
 8003606:	d105      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_ADC_ConfigChannel+0x25c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <HAL_ADC_ConfigChannel+0x25c>)
 800360e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003612:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <HAL_ADC_ConfigChannel+0x258>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d125      	bne.n	800366a <HAL_ADC_ConfigChannel+0x23e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a17      	ldr	r2, [pc, #92]	; (8003680 <HAL_ADC_ConfigChannel+0x254>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x204>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b11      	cmp	r3, #17
 800362e:	d11c      	bne.n	800366a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_ADC_ConfigChannel+0x25c>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <HAL_ADC_ConfigChannel+0x25c>)
 8003636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800363a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <HAL_ADC_ConfigChannel+0x254>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d111      	bne.n	800366a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <HAL_ADC_ConfigChannel+0x260>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <HAL_ADC_ConfigChannel+0x264>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	0c9a      	lsrs	r2, r3, #18
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800365c:	e002      	b.n	8003664 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b01      	subs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f9      	bne.n	800365e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	10000012 	.word	0x10000012
 8003684:	40012000 	.word	0x40012000
 8003688:	40012300 	.word	0x40012300
 800368c:	20000098 	.word	0x20000098
 8003690:	431bde83 	.word	0x431bde83

08003694 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800369c:	4b78      	ldr	r3, [pc, #480]	; (8003880 <ADC_Init+0x1ec>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a77      	ldr	r2, [pc, #476]	; (8003880 <ADC_Init+0x1ec>)
 80036a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80036a8:	4b75      	ldr	r3, [pc, #468]	; (8003880 <ADC_Init+0x1ec>)
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4973      	ldr	r1, [pc, #460]	; (8003880 <ADC_Init+0x1ec>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	021a      	lsls	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	4a58      	ldr	r2, [pc, #352]	; (8003884 <ADC_Init+0x1f0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d022      	beq.n	800376e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	e00f      	b.n	800378e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800377c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800378c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0202 	bic.w	r2, r2, #2
 800379c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	005a      	lsls	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	3b01      	subs	r3, #1
 80037e8:	035a      	lsls	r2, r3, #13
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e007      	b.n	8003804 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003802:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	3b01      	subs	r3, #1
 8003820:	051a      	lsls	r2, r3, #20
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003846:	025a      	lsls	r2, r3, #9
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	029a      	lsls	r2, r3, #10
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40012300 	.word	0x40012300
 8003884:	0f000001 	.word	0x0f000001

08003888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <__NVIC_SetPriorityGrouping+0x40>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a4:	4013      	ands	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <__NVIC_SetPriorityGrouping+0x44>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <__NVIC_SetPriorityGrouping+0x40>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00
 80038cc:	05fa0000 	.word	0x05fa0000

080038d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <__NVIC_GetPriorityGrouping+0x18>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	f003 0307 	and.w	r3, r3, #7
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	db0b      	blt.n	8003916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	4907      	ldr	r1, [pc, #28]	; (8003924 <__NVIC_EnableIRQ+0x38>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2001      	movs	r0, #1
 800390e:	fa00 f202 	lsl.w	r2, r0, r2
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	db10      	blt.n	800395c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	4909      	ldr	r1, [pc, #36]	; (8003968 <__NVIC_DisableIRQ+0x40>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2001      	movs	r0, #1
 800394a:	fa00 f202 	lsl.w	r2, r0, r2
 800394e:	3320      	adds	r3, #32
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003954:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003958:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	; (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	; (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff2a 	bl	8003888 <__NVIC_SetPriorityGrouping>
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4e:	f7ff ff3f 	bl	80038d0 <__NVIC_GetPriorityGrouping>
 8003a52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f7ff ffb1 	bl	80039c0 <NVIC_EncodePriority>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff80 	bl	800396c <__NVIC_SetPriority>
}
 8003a6c:	bf00      	nop
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff32 	bl	80038ec <__NVIC_EnableIRQ>
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff42 	bl	8003928 <__NVIC_DisableIRQ>
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e054      	b.n	8003b68 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7f5b      	ldrb	r3, [r3, #29]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe fdb2 	bl	8002638 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	791b      	ldrb	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_CRC_Init+0xc4>)
 8003ae8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0218 	bic.w	r2, r2, #24
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	e00c      	b.n	8003b16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f834 	bl	8003b74 <HAL_CRCEx_Polynomial_Set>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e028      	b.n	8003b68 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	795b      	ldrb	r3, [r3, #5]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f04f 32ff 	mov.w	r2, #4294967295
 8003b26:	611a      	str	r2, [r3, #16]
 8003b28:	e004      	b.n	8003b34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6912      	ldr	r2, [r2, #16]
 8003b32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	04c11db7 	.word	0x04c11db7

08003b74 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003b84:	231f      	movs	r3, #31
 8003b86:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b88:	bf00      	nop
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1e5a      	subs	r2, r3, #1
 8003b8e:	613a      	str	r2, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <HAL_CRCEx_Polynomial_Set+0x34>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b18      	cmp	r3, #24
 8003bac:	d846      	bhi.n	8003c3c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003c43 	.word	0x08003c43
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003c3d 	.word	0x08003c3d
 8003bc0:	08003c3d 	.word	0x08003c3d
 8003bc4:	08003c3d 	.word	0x08003c3d
 8003bc8:	08003c3d 	.word	0x08003c3d
 8003bcc:	08003c3d 	.word	0x08003c3d
 8003bd0:	08003c3d 	.word	0x08003c3d
 8003bd4:	08003c31 	.word	0x08003c31
 8003bd8:	08003c3d 	.word	0x08003c3d
 8003bdc:	08003c3d 	.word	0x08003c3d
 8003be0:	08003c3d 	.word	0x08003c3d
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c3d 	.word	0x08003c3d
 8003bec:	08003c3d 	.word	0x08003c3d
 8003bf0:	08003c3d 	.word	0x08003c3d
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c3d 	.word	0x08003c3d
 8003bfc:	08003c3d 	.word	0x08003c3d
 8003c00:	08003c3d 	.word	0x08003c3d
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c3d 	.word	0x08003c3d
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c19 	.word	0x08003c19
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d913      	bls.n	8003c46 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c22:	e010      	b.n	8003c46 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b07      	cmp	r3, #7
 8003c28:	d90f      	bls.n	8003c4a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c2e:	e00c      	b.n	8003c4a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b0f      	cmp	r3, #15
 8003c34:	d90b      	bls.n	8003c4e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c3a:	e008      	b.n	8003c4e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	e006      	b.n	8003c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c42:	bf00      	nop
 8003c44:	e004      	b.n	8003c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c4e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f023 0118 	bic.w	r1, r3, #24
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e062      	b.n	8003d58 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fe fcea 	bl	8002678 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_DCMI_Init+0xe0>)
 8003cb8:	400b      	ands	r3, r1
 8003cba:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003cd0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003cdc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003ce8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003cf4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003d00:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d112      	bne.n	8003d38 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7f1b      	ldrb	r3, [r3, #28]
 8003d16:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7f5b      	ldrb	r3, [r3, #29]
 8003d1c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d1e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7f9b      	ldrb	r3, [r3, #30]
 8003d24:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003d26:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7fdb      	ldrb	r3, [r3, #31]
 8003d2e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003d34:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d36:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 021e 	orr.w	r2, r2, #30
 8003d46:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	ffe0f007 	.word	0xffe0f007

08003d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_DMA_Start_IT+0x26>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e048      	b.n	8003e1c <HAL_DMA_Start_IT+0xb8>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d137      	bne.n	8003e0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f842 	bl	8003e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	223f      	movs	r2, #63	; 0x3f
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0216 	orr.w	r2, r2, #22
 8003dd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0208 	orr.w	r2, r2, #8
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e005      	b.n	8003e1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d108      	bne.n	8003e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e7a:	e007      	b.n	8003e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e039      	b.n	8003f1e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f00f fe2e 	bl	8013b20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	f023 0107 	bic.w	r1, r3, #7
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_DMA2D_Init+0x90>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68d1      	ldr	r1, [r2, #12]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	ffffc000 	.word	0xffffc000

08003f2c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d026      	beq.n	8003f9c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d021      	beq.n	8003f9c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f66:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d026      	beq.n	8003ff4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d021      	beq.n	8003ff4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	f043 0202 	orr.w	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d026      	beq.n	800404c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004004:	2b00      	cmp	r3, #0
 8004006:	d021      	beq.n	800404c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004016:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2208      	movs	r2, #8
 800401e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2204      	movs	r2, #4
 8004030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d013      	beq.n	800407e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2204      	movs	r2, #4
 8004076:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f853 	bl	8004124 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d024      	beq.n	80040d2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01f      	beq.n	80040d2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2202      	movs	r2, #2
 80040a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01f      	beq.n	800411c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01a      	beq.n	800411c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040f4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2210      	movs	r2, #16
 80040fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f80e 	bl	8004138 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_DMA2D_ConfigLayer+0x20>
 8004168:	2302      	movs	r3, #2
 800416a:	e079      	b.n	8004260 <HAL_DMA2D_ConfigLayer+0x114>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	3318      	adds	r3, #24
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004196:	4b35      	ldr	r3, [pc, #212]	; (800426c <HAL_DMA2D_ConfigLayer+0x120>)
 8004198:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b0a      	cmp	r3, #10
 80041a0:	d003      	beq.n	80041aa <HAL_DMA2D_ConfigLayer+0x5e>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	d107      	bne.n	80041ba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e005      	b.n	80041c6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d120      	bne.n	800420e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	ea02 0103 	and.w	r1, r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b0a      	cmp	r3, #10
 80041f4:	d003      	beq.n	80041fe <HAL_DMA2D_ConfigLayer+0xb2>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b09      	cmp	r3, #9
 80041fc:	d127      	bne.n	800424e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
 800420c:	e01f      	b.n	800424e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43db      	mvns	r3, r3
 8004218:	ea02 0103 	and.w	r1, r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	430a      	orrs	r2, r1
 8004224:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b0a      	cmp	r3, #10
 8004236:	d003      	beq.n	8004240 <HAL_DMA2D_ConfigLayer+0xf4>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b09      	cmp	r3, #9
 800423e:	d106      	bne.n	800424e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800424c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	ff03000f 	.word	0xff03000f

08004270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e175      	b.n	800457c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 8164 	bne.w	8004576 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x4e>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b12      	cmp	r3, #18
 80042bc:	d123      	bne.n	8004306 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	08da      	lsrs	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3208      	adds	r2, #8
 80042c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	220f      	movs	r2, #15
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	08da      	lsrs	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3208      	adds	r2, #8
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	2203      	movs	r2, #3
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0203 	and.w	r2, r3, #3
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d00b      	beq.n	800435a <HAL_GPIO_Init+0xea>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d007      	beq.n	800435a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800434e:	2b11      	cmp	r3, #17
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b12      	cmp	r3, #18
 8004358:	d130      	bne.n	80043bc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	2203      	movs	r2, #3
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0201 	and.w	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80be 	beq.w	8004576 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_GPIO_Init+0x320>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	4a64      	ldr	r2, [pc, #400]	; (8004590 <HAL_GPIO_Init+0x320>)
 8004400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004404:	6453      	str	r3, [r2, #68]	; 0x44
 8004406:	4b62      	ldr	r3, [pc, #392]	; (8004590 <HAL_GPIO_Init+0x320>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004412:	4a60      	ldr	r2, [pc, #384]	; (8004594 <HAL_GPIO_Init+0x324>)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	220f      	movs	r2, #15
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a57      	ldr	r2, [pc, #348]	; (8004598 <HAL_GPIO_Init+0x328>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d037      	beq.n	80044ae <HAL_GPIO_Init+0x23e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a56      	ldr	r2, [pc, #344]	; (800459c <HAL_GPIO_Init+0x32c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d031      	beq.n	80044aa <HAL_GPIO_Init+0x23a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a55      	ldr	r2, [pc, #340]	; (80045a0 <HAL_GPIO_Init+0x330>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d02b      	beq.n	80044a6 <HAL_GPIO_Init+0x236>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a54      	ldr	r2, [pc, #336]	; (80045a4 <HAL_GPIO_Init+0x334>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d025      	beq.n	80044a2 <HAL_GPIO_Init+0x232>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a53      	ldr	r2, [pc, #332]	; (80045a8 <HAL_GPIO_Init+0x338>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01f      	beq.n	800449e <HAL_GPIO_Init+0x22e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a52      	ldr	r2, [pc, #328]	; (80045ac <HAL_GPIO_Init+0x33c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d019      	beq.n	800449a <HAL_GPIO_Init+0x22a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a51      	ldr	r2, [pc, #324]	; (80045b0 <HAL_GPIO_Init+0x340>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_GPIO_Init+0x226>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a50      	ldr	r2, [pc, #320]	; (80045b4 <HAL_GPIO_Init+0x344>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00d      	beq.n	8004492 <HAL_GPIO_Init+0x222>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a4f      	ldr	r2, [pc, #316]	; (80045b8 <HAL_GPIO_Init+0x348>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <HAL_GPIO_Init+0x21e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4e      	ldr	r2, [pc, #312]	; (80045bc <HAL_GPIO_Init+0x34c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_GPIO_Init+0x21a>
 8004486:	2309      	movs	r3, #9
 8004488:	e012      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 800448a:	230a      	movs	r3, #10
 800448c:	e010      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 800448e:	2308      	movs	r3, #8
 8004490:	e00e      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 8004492:	2307      	movs	r3, #7
 8004494:	e00c      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 8004496:	2306      	movs	r3, #6
 8004498:	e00a      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 800449a:	2305      	movs	r3, #5
 800449c:	e008      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 800449e:	2304      	movs	r3, #4
 80044a0:	e006      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 80044a2:	2303      	movs	r3, #3
 80044a4:	e004      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e002      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_GPIO_Init+0x240>
 80044ae:	2300      	movs	r3, #0
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	f002 0203 	and.w	r2, r2, #3
 80044b6:	0092      	lsls	r2, r2, #2
 80044b8:	4093      	lsls	r3, r2
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80044c0:	4934      	ldr	r1, [pc, #208]	; (8004594 <HAL_GPIO_Init+0x324>)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	3302      	adds	r3, #2
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044ce:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <HAL_GPIO_Init+0x350>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044f2:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <HAL_GPIO_Init+0x350>)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_GPIO_Init+0x350>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	43db      	mvns	r3, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800451c:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <HAL_GPIO_Init+0x350>)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_GPIO_Init+0x350>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <HAL_GPIO_Init+0x350>)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800454c:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_GPIO_Init+0x350>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <HAL_GPIO_Init+0x350>)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3301      	adds	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b0f      	cmp	r3, #15
 8004580:	f67f ae86 	bls.w	8004290 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004584:	bf00      	nop
 8004586:	3724      	adds	r7, #36	; 0x24
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40023800 	.word	0x40023800
 8004594:	40013800 	.word	0x40013800
 8004598:	40020000 	.word	0x40020000
 800459c:	40020400 	.word	0x40020400
 80045a0:	40020800 	.word	0x40020800
 80045a4:	40020c00 	.word	0x40020c00
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40021400 	.word	0x40021400
 80045b0:	40021800 	.word	0x40021800
 80045b4:	40021c00 	.word	0x40021c00
 80045b8:	40022000 	.word	0x40022000
 80045bc:	40022400 	.word	0x40022400
 80045c0:	40013c00 	.word	0x40013c00

080045c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e0d9      	b.n	8004794 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045e0:	2201      	movs	r2, #1
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	f040 80c9 	bne.w	800478e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80045fc:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_GPIO_DeInit+0x1e4>)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	3302      	adds	r3, #2
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	220f      	movs	r2, #15
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a62      	ldr	r2, [pc, #392]	; (80047ac <HAL_GPIO_DeInit+0x1e8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d037      	beq.n	8004696 <HAL_GPIO_DeInit+0xd2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a61      	ldr	r2, [pc, #388]	; (80047b0 <HAL_GPIO_DeInit+0x1ec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d031      	beq.n	8004692 <HAL_GPIO_DeInit+0xce>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a60      	ldr	r2, [pc, #384]	; (80047b4 <HAL_GPIO_DeInit+0x1f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02b      	beq.n	800468e <HAL_GPIO_DeInit+0xca>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a5f      	ldr	r2, [pc, #380]	; (80047b8 <HAL_GPIO_DeInit+0x1f4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d025      	beq.n	800468a <HAL_GPIO_DeInit+0xc6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a5e      	ldr	r2, [pc, #376]	; (80047bc <HAL_GPIO_DeInit+0x1f8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01f      	beq.n	8004686 <HAL_GPIO_DeInit+0xc2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a5d      	ldr	r2, [pc, #372]	; (80047c0 <HAL_GPIO_DeInit+0x1fc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d019      	beq.n	8004682 <HAL_GPIO_DeInit+0xbe>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a5c      	ldr	r2, [pc, #368]	; (80047c4 <HAL_GPIO_DeInit+0x200>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_GPIO_DeInit+0xba>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a5b      	ldr	r2, [pc, #364]	; (80047c8 <HAL_GPIO_DeInit+0x204>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00d      	beq.n	800467a <HAL_GPIO_DeInit+0xb6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a5a      	ldr	r2, [pc, #360]	; (80047cc <HAL_GPIO_DeInit+0x208>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <HAL_GPIO_DeInit+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a59      	ldr	r2, [pc, #356]	; (80047d0 <HAL_GPIO_DeInit+0x20c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_GPIO_DeInit+0xae>
 800466e:	2309      	movs	r3, #9
 8004670:	e012      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 8004672:	230a      	movs	r3, #10
 8004674:	e010      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 8004676:	2308      	movs	r3, #8
 8004678:	e00e      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 800467a:	2307      	movs	r3, #7
 800467c:	e00c      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 800467e:	2306      	movs	r3, #6
 8004680:	e00a      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 8004682:	2305      	movs	r3, #5
 8004684:	e008      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 8004686:	2304      	movs	r3, #4
 8004688:	e006      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 800468a:	2303      	movs	r3, #3
 800468c:	e004      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 800468e:	2302      	movs	r3, #2
 8004690:	e002      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_GPIO_DeInit+0xd4>
 8004696:	2300      	movs	r3, #0
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	f002 0203 	and.w	r2, r2, #3
 800469e:	0092      	lsls	r2, r2, #2
 80046a0:	4093      	lsls	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d132      	bne.n	800470e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80046b8:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_GPIO_DeInit+0x1e4>)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	3302      	adds	r3, #2
 80046c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	43da      	mvns	r2, r3
 80046c8:	4837      	ldr	r0, [pc, #220]	; (80047a8 <HAL_GPIO_DeInit+0x1e4>)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	400a      	ands	r2, r1
 80046d0:	3302      	adds	r3, #2
 80046d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	43db      	mvns	r3, r3
 80046de:	493d      	ldr	r1, [pc, #244]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	4939      	ldr	r1, [pc, #228]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046f2:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	4936      	ldr	r1, [pc, #216]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004700:	4b34      	ldr	r3, [pc, #208]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	43db      	mvns	r3, r3
 8004708:	4932      	ldr	r1, [pc, #200]	; (80047d4 <HAL_GPIO_DeInit+0x210>)
 800470a:	4013      	ands	r3, r2
 800470c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	2103      	movs	r1, #3
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	401a      	ands	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	08da      	lsrs	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3208      	adds	r2, #8
 800472c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	220f      	movs	r2, #15
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	08d2      	lsrs	r2, r2, #3
 8004744:	4019      	ands	r1, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3208      	adds	r2, #8
 800474a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2103      	movs	r1, #3
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	401a      	ands	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	2101      	movs	r1, #1
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	401a      	ands	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2103      	movs	r1, #3
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	3301      	adds	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	f67f af22 	bls.w	80045e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40021400 	.word	0x40021400
 80047c4:	40021800 	.word	0x40021800
 80047c8:	40021c00 	.word	0x40021c00
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40022400 	.word	0x40022400
 80047d4:	40013c00 	.word	0x40013c00

080047d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	887b      	ldrh	r3, [r7, #2]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	e001      	b.n	80047fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
 8004814:	4613      	mov	r3, r2
 8004816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004818:	787b      	ldrb	r3, [r7, #1]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004824:	e003      	b.n	800482e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004826:	887b      	ldrh	r3, [r7, #2]
 8004828:	041a      	lsls	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	619a      	str	r2, [r3, #24]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800483a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483c:	b08d      	sub	sp, #52	; 0x34
 800483e:	af0a      	add	r7, sp, #40	; 0x28
 8004840:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e048      	b.n	80048de <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f010 fb55 	bl	8014f10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f008 fd1b 	bl	800d2ae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	687e      	ldr	r6, [r7, #4]
 8004880:	466d      	mov	r5, sp
 8004882:	f106 0410 	add.w	r4, r6, #16
 8004886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800488a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800488e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004892:	e885 0003 	stmia.w	r5, {r0, r1}
 8004896:	1d33      	adds	r3, r6, #4
 8004898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800489a:	6838      	ldr	r0, [r7, #0]
 800489c:	f008 fc9e 	bl	800d1dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	4618      	mov	r0, r3
 80048a8:	f008 fd12 	bl	800d2d0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	687e      	ldr	r6, [r7, #4]
 80048b4:	466d      	mov	r5, sp
 80048b6:	f106 0410 	add.w	r4, r6, #16
 80048ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80048ca:	1d33      	adds	r3, r6, #4
 80048cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f008 fe24 	bl	800d51c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048e6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80048e6:	b590      	push	{r4, r7, lr}
 80048e8:	b089      	sub	sp, #36	; 0x24
 80048ea:	af04      	add	r7, sp, #16
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	4608      	mov	r0, r1
 80048f0:	4611      	mov	r1, r2
 80048f2:	461a      	mov	r2, r3
 80048f4:	4603      	mov	r3, r0
 80048f6:	70fb      	strb	r3, [r7, #3]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70bb      	strb	r3, [r7, #2]
 80048fc:	4613      	mov	r3, r2
 80048fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_HCD_HC_Init+0x28>
 800490a:	2302      	movs	r3, #2
 800490c:	e07f      	b.n	8004a0e <HAL_HCD_HC_Init+0x128>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	440b      	add	r3, r1
 8004924:	333d      	adds	r3, #61	; 0x3d
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	440b      	add	r3, r1
 8004938:	3338      	adds	r3, #56	; 0x38
 800493a:	787a      	ldrb	r2, [r7, #1]
 800493c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	440b      	add	r3, r1
 800494c:	3340      	adds	r3, #64	; 0x40
 800494e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004950:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	3339      	adds	r3, #57	; 0x39
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	333f      	adds	r3, #63	; 0x3f
 8004976:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800497a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	78bb      	ldrb	r3, [r7, #2]
 8004980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004984:	b2d8      	uxtb	r0, r3
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	333a      	adds	r3, #58	; 0x3a
 8004994:	4602      	mov	r2, r0
 8004996:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004998:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800499c:	2b00      	cmp	r3, #0
 800499e:	da0a      	bge.n	80049b6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	440b      	add	r3, r1
 80049ae:	333b      	adds	r3, #59	; 0x3b
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e009      	b.n	80049ca <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	333b      	adds	r3, #59	; 0x3b
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	333c      	adds	r3, #60	; 0x3c
 80049da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80049de:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	787c      	ldrb	r4, [r7, #1]
 80049e6:	78ba      	ldrb	r2, [r7, #2]
 80049e8:	78f9      	ldrb	r1, [r7, #3]
 80049ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049ec:	9302      	str	r3, [sp, #8]
 80049ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	4623      	mov	r3, r4
 80049fc:	f008 ff04 	bl	800d808 <USB_HC_Init>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd90      	pop	{r4, r7, pc}

08004a16 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_HCD_HC_Halt+0x1e>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e00f      	b.n	8004a54 <HAL_HCD_HC_Halt+0x3e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f009 f93e 	bl	800dcc6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	4608      	mov	r0, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	70fb      	strb	r3, [r7, #3]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	70bb      	strb	r3, [r7, #2]
 8004a72:	4613      	mov	r3, r2
 8004a74:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	440b      	add	r3, r1
 8004a84:	333b      	adds	r3, #59	; 0x3b
 8004a86:	78ba      	ldrb	r2, [r7, #2]
 8004a88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	440b      	add	r3, r1
 8004a98:	333f      	adds	r3, #63	; 0x3f
 8004a9a:	787a      	ldrb	r2, [r7, #1]
 8004a9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004a9e:	7c3b      	ldrb	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004aa4:	78fa      	ldrb	r2, [r7, #3]
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3342      	adds	r3, #66	; 0x42
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e009      	b.n	8004ace <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3342      	adds	r3, #66	; 0x42
 8004aca:	2202      	movs	r2, #2
 8004acc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004ace:	787b      	ldrb	r3, [r7, #1]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	f200 80d6 	bhi.w	8004c82 <HAL_HCD_HC_SubmitRequest+0x226>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_HCD_HC_SubmitRequest+0x80>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004c6d 	.word	0x08004c6d
 8004ae4:	08004b59 	.word	0x08004b59
 8004ae8:	08004be3 	.word	0x08004be3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004aec:	7c3b      	ldrb	r3, [r7, #16]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	f040 80c9 	bne.w	8004c86 <HAL_HCD_HC_SubmitRequest+0x22a>
 8004af4:	78bb      	ldrb	r3, [r7, #2]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 80c5 	bne.w	8004c86 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8004afc:	8b3b      	ldrh	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	3351      	adds	r3, #81	; 0x51
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	3351      	adds	r3, #81	; 0x51
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	440b      	add	r3, r1
 8004b3a:	3342      	adds	r3, #66	; 0x42
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b40:	e0a1      	b.n	8004c86 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	440b      	add	r3, r1
 8004b50:	3342      	adds	r3, #66	; 0x42
 8004b52:	2202      	movs	r2, #2
 8004b54:	701a      	strb	r2, [r3, #0]
      break;
 8004b56:	e096      	b.n	8004c86 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004b58:	78bb      	ldrb	r3, [r7, #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d120      	bne.n	8004ba0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3351      	adds	r3, #81	; 0x51
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	440b      	add	r3, r1
 8004b82:	3342      	adds	r3, #66	; 0x42
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004b88:	e07e      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	3342      	adds	r3, #66	; 0x42
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	701a      	strb	r2, [r3, #0]
      break;
 8004b9e:	e073      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	440b      	add	r3, r1
 8004bae:	3350      	adds	r3, #80	; 0x50
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3342      	adds	r3, #66	; 0x42
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e05d      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	440b      	add	r3, r1
 8004bda:	3342      	adds	r3, #66	; 0x42
 8004bdc:	2202      	movs	r2, #2
 8004bde:	701a      	strb	r2, [r3, #0]
      break;
 8004be0:	e052      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004be2:	78bb      	ldrb	r3, [r7, #2]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d120      	bne.n	8004c2a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3351      	adds	r3, #81	; 0x51
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3342      	adds	r3, #66	; 0x42
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c12:	e039      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	440b      	add	r3, r1
 8004c22:	3342      	adds	r3, #66	; 0x42
 8004c24:	2202      	movs	r2, #2
 8004c26:	701a      	strb	r2, [r3, #0]
      break;
 8004c28:	e02e      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	440b      	add	r3, r1
 8004c38:	3350      	adds	r3, #80	; 0x50
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3342      	adds	r3, #66	; 0x42
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
      break;
 8004c54:	e018      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	3342      	adds	r3, #66	; 0x42
 8004c66:	2202      	movs	r2, #2
 8004c68:	701a      	strb	r2, [r3, #0]
      break;
 8004c6a:	e00d      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	440b      	add	r3, r1
 8004c7a:	3342      	adds	r3, #66	; 0x42
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
      break;
 8004c80:	e002      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8004c86:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	440b      	add	r3, r1
 8004c96:	3344      	adds	r3, #68	; 0x44
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	8b39      	ldrh	r1, [r7, #24]
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4403      	add	r3, r0
 8004cac:	3348      	adds	r3, #72	; 0x48
 8004cae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	440b      	add	r3, r1
 8004cbe:	335c      	adds	r3, #92	; 0x5c
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	440b      	add	r3, r1
 8004cd2:	334c      	adds	r3, #76	; 0x4c
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3339      	adds	r3, #57	; 0x39
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	335d      	adds	r3, #93	; 0x5d
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	3338      	adds	r3, #56	; 0x38
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	18d1      	adds	r1, r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f008 fe7e 	bl	800da1c <USB_HC_StartXfer>
 8004d20:	4603      	mov	r3, r0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop

08004d2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f008 fba7 	bl	800d496 <USB_GetMode>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	f040 80f1 	bne.w	8004f32 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f008 fb8b 	bl	800d470 <USB_ReadInterrupts>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80e7 	beq.w	8004f30 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f008 fb82 	bl	800d470 <USB_ReadInterrupts>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d76:	d104      	bne.n	8004d82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f008 fb72 	bl	800d470 <USB_ReadInterrupts>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d104      	bne.n	8004da2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004da0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f008 fb62 	bl	800d470 <USB_ReadInterrupts>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004db6:	d104      	bne.n	8004dc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004dc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f008 fb52 	bl	800d470 <USB_ReadInterrupts>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d103      	bne.n	8004dde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f008 fb44 	bl	800d470 <USB_ReadInterrupts>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df2:	d117      	bne.n	8004e24 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e06:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f010 f8f3 	bl	8014ff4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f008 fc31 	bl	800d67c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f008 fb21 	bl	800d470 <USB_ReadInterrupts>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e38:	d102      	bne.n	8004e40 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 f8c8 	bl	8005fd0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f008 fb13 	bl	800d470 <USB_ReadInterrupts>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d106      	bne.n	8004e62 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f010 f8b1 	bl	8014fbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2208      	movs	r2, #8
 8004e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f008 fb02 	bl	800d470 <USB_ReadInterrupts>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e76:	d138      	bne.n	8004eea <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f008 ff11 	bl	800dca4 <USB_HC_ReadInterrupt>
 8004e82:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e025      	b.n	8004ed6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8cf 	bl	8005060 <HCD_HC_IN_IRQHandler>
 8004ec2:	e005      	b.n	8004ed0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fc5f 	bl	800578e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3d4      	bcc.n	8004e8a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f008 fabe 	bl	800d470 <USB_ReadInterrupts>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d101      	bne.n	8004f02 <HAL_HCD_IRQHandler+0x1d6>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_HCD_IRQHandler+0x1d8>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d014      	beq.n	8004f32 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0210 	bic.w	r2, r2, #16
 8004f16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ffad 	bl	8005e78 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0210 	orr.w	r2, r2, #16
 8004f2c:	619a      	str	r2, [r3, #24]
 8004f2e:	e000      	b.n	8004f32 <HAL_HCD_IRQHandler+0x206>
      return;
 8004f30:	bf00      	nop
    }
  }
}
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_HCD_Start+0x16>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e013      	b.n	8004f76 <HAL_HCD_Start+0x3e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f008 f996 	bl	800d28c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2101      	movs	r1, #1
 8004f66:	4618      	mov	r0, r3
 8004f68:	f008 fbec 	bl	800d744 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_HCD_Stop+0x16>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e00d      	b.n	8004fb0 <HAL_HCD_Stop+0x32>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f008 ffcb 	bl	800df3c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f008 fb93 	bl	800d6f0 <USB_ResetPort>
 8004fca:	4603      	mov	r3, r0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	440b      	add	r3, r1
 8004fee:	335c      	adds	r3, #92	; 0x5c
 8004ff0:	781b      	ldrb	r3, [r3, #0]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	440b      	add	r3, r1
 8005018:	334c      	adds	r3, #76	; 0x4c
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f008 fbd5 	bl	800d7e4 <USB_GetCurrentFrame>
 800503a:	4603      	mov	r3, r0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f008 fbb0 	bl	800d7b6 <USB_GetHostSpeed>
 8005056:	4603      	mov	r3, r0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d119      	bne.n	80050c4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	461a      	mov	r2, r3
 800509e:	2304      	movs	r3, #4
 80050a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	60d3      	str	r3, [r2, #12]
 80050c2:	e095      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d109      	bne.n	80050ee <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	2320      	movs	r3, #32
 80050ea:	6093      	str	r3, [r2, #8]
 80050ec:	e080      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b08      	cmp	r3, #8
 8005102:	d134      	bne.n	800516e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	440a      	add	r2, r1
 800511a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511e:	f043 0302 	orr.w	r3, r3, #2
 8005122:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	335d      	adds	r3, #93	; 0x5d
 8005134:	2205      	movs	r2, #5
 8005136:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005144:	461a      	mov	r2, r3
 8005146:	2310      	movs	r3, #16
 8005148:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005156:	461a      	mov	r2, r3
 8005158:	2308      	movs	r3, #8
 800515a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	4611      	mov	r1, r2
 8005166:	4618      	mov	r0, r3
 8005168:	f008 fdad 	bl	800dcc6 <USB_HC_Halt>
 800516c:	e040      	b.n	80051f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005184:	d134      	bne.n	80051f0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f008 fd88 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c2:	461a      	mov	r2, r3
 80051c4:	2310      	movs	r3, #16
 80051c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	335d      	adds	r3, #93	; 0x5d
 80051d8:	2208      	movs	r2, #8
 80051da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	461a      	mov	r2, r3
 80051ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005206:	d122      	bne.n	800524e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	440a      	add	r2, r1
 800521e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005222:	f043 0302 	orr.w	r3, r3, #2
 8005226:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f008 fd47 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005244:	461a      	mov	r2, r3
 8005246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800524a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800524c:	e29b      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	f040 80c1 	bne.w	80053e8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	440b      	add	r3, r1
 800527c:	3348      	adds	r3, #72	; 0x48
 800527e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	0159      	lsls	r1, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	440b      	add	r3, r1
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005292:	1ad1      	subs	r1, r2, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4403      	add	r3, r0
 80052a2:	334c      	adds	r3, #76	; 0x4c
 80052a4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	440b      	add	r3, r1
 80052b4:	335d      	adds	r3, #93	; 0x5d
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	440b      	add	r3, r1
 80052c8:	3358      	adds	r3, #88	; 0x58
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	461a      	mov	r2, r3
 80052dc:	2301      	movs	r3, #1
 80052de:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	440b      	add	r3, r1
 80052ee:	333f      	adds	r3, #63	; 0x3f
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	333f      	adds	r3, #63	; 0x3f
 8005306:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005308:	2b02      	cmp	r3, #2
 800530a:	d121      	bne.n	8005350 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	440a      	add	r2, r1
 8005322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f008 fcc5 	bl	800dcc6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	461a      	mov	r2, r3
 800534a:	2310      	movs	r3, #16
 800534c:	6093      	str	r3, [r2, #8]
 800534e:	e034      	b.n	80053ba <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	333f      	adds	r3, #63	; 0x3f
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d129      	bne.n	80053ba <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	440a      	add	r2, r1
 800537c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005380:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005384:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	335c      	adds	r3, #92	; 0x5c
 8005396:	2201      	movs	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	b2d8      	uxtb	r0, r3
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	440b      	add	r3, r1
 80053ac:	335c      	adds	r3, #92	; 0x5c
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	4601      	mov	r1, r0
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f00f fe2b 	bl	8015010 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	440b      	add	r3, r1
 80053c8:	3350      	adds	r3, #80	; 0x50
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f083 0301 	eor.w	r3, r3, #1
 80053d0:	b2d8      	uxtb	r0, r3
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	3350      	adds	r3, #80	; 0x50
 80053e2:	4602      	mov	r2, r0
 80053e4:	701a      	strb	r2, [r3, #0]
}
 80053e6:	e1ce      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	f040 80f1 	bne.w	80055e2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	440a      	add	r2, r1
 8005416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541a:	f023 0302 	bic.w	r3, r3, #2
 800541e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	335d      	adds	r3, #93	; 0x5d
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10a      	bne.n	800544c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	335c      	adds	r3, #92	; 0x5c
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	e0b0      	b.n	80055ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	335d      	adds	r3, #93	; 0x5d
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b05      	cmp	r3, #5
 8005460:	d10a      	bne.n	8005478 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	440b      	add	r3, r1
 8005470:	335c      	adds	r3, #92	; 0x5c
 8005472:	2205      	movs	r2, #5
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e09a      	b.n	80055ae <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	335d      	adds	r3, #93	; 0x5d
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b06      	cmp	r3, #6
 800548c:	d00a      	beq.n	80054a4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	440b      	add	r3, r1
 800549c:	335d      	adds	r3, #93	; 0x5d
 800549e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d156      	bne.n	8005552 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	440b      	add	r3, r1
 80054b2:	3358      	adds	r3, #88	; 0x58
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	1c59      	adds	r1, r3, #1
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4403      	add	r3, r0
 80054c6:	3358      	adds	r3, #88	; 0x58
 80054c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	3358      	adds	r3, #88	; 0x58
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d914      	bls.n	800550a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	3358      	adds	r3, #88	; 0x58
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	335c      	adds	r3, #92	; 0x5c
 8005504:	2204      	movs	r2, #4
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e009      	b.n	800551e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	440b      	add	r3, r1
 8005518:	335c      	adds	r3, #92	; 0x5c
 800551a:	2202      	movs	r2, #2
 800551c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005534:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800553c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	461a      	mov	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e02d      	b.n	80055ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	335d      	adds	r3, #93	; 0x5d
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d122      	bne.n	80055ae <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	440b      	add	r3, r1
 8005576:	335c      	adds	r3, #92	; 0x5c
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005592:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800559a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ba:	461a      	mov	r2, r3
 80055bc:	2302      	movs	r3, #2
 80055be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	b2d8      	uxtb	r0, r3
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	335c      	adds	r3, #92	; 0x5c
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	4601      	mov	r1, r0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f00f fd18 	bl	8015010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80055e0:	e0d1      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d13e      	bne.n	8005676 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	440a      	add	r2, r1
 800560e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	440b      	add	r3, r1
 8005626:	3358      	adds	r3, #88	; 0x58
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4403      	add	r3, r0
 800563a:	3358      	adds	r3, #88	; 0x58
 800563c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	440b      	add	r3, r1
 800564c:	335d      	adds	r3, #93	; 0x5d
 800564e:	2206      	movs	r2, #6
 8005650:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	4611      	mov	r1, r2
 800565c:	4618      	mov	r0, r3
 800565e:	f008 fb32 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566e:	461a      	mov	r2, r3
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	6093      	str	r3, [r2, #8]
}
 8005674:	e087      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b10      	cmp	r3, #16
 800568a:	d17c      	bne.n	8005786 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	440b      	add	r3, r1
 800569a:	333f      	adds	r3, #63	; 0x3f
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d122      	bne.n	80056e8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	440b      	add	r3, r1
 80056b0:	3358      	adds	r3, #88	; 0x58
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f008 faf0 	bl	800dcc6 <USB_HC_Halt>
 80056e6:	e045      	b.n	8005774 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	440b      	add	r3, r1
 80056f6:	333f      	adds	r3, #63	; 0x3f
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	440b      	add	r3, r1
 800570c:	333f      	adds	r3, #63	; 0x3f
 800570e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005710:	2b02      	cmp	r3, #2
 8005712:	d12f      	bne.n	8005774 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	3358      	adds	r3, #88	; 0x58
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d121      	bne.n	8005774 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	440b      	add	r3, r1
 800573e:	335d      	adds	r3, #93	; 0x5d
 8005740:	2203      	movs	r2, #3
 8005742:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	440a      	add	r2, r1
 800575a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f008 faa9 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	461a      	mov	r2, r3
 8005782:	2310      	movs	r3, #16
 8005784:	6093      	str	r3, [r2, #8]
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d119      	bne.n	80057f2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ca:	461a      	mov	r2, r3
 80057cc:	2304      	movs	r3, #4
 80057ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80057f0:	e33e      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b20      	cmp	r3, #32
 8005806:	d141      	bne.n	800588c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005814:	461a      	mov	r2, r3
 8005816:	2320      	movs	r3, #32
 8005818:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	440b      	add	r3, r1
 8005828:	333d      	adds	r3, #61	; 0x3d
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	f040 831f 	bne.w	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	440b      	add	r3, r1
 8005840:	333d      	adds	r3, #61	; 0x3d
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	335c      	adds	r3, #92	; 0x5c
 8005856:	2202      	movs	r2, #2
 8005858:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4413      	add	r3, r2
 8005862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	440a      	add	r2, r1
 8005870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f008 fa1e 	bl	800dcc6 <USB_HC_Halt>
}
 800588a:	e2f1      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d13f      	bne.n	8005922 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	440b      	add	r3, r1
 80058b0:	335d      	adds	r3, #93	; 0x5d
 80058b2:	2204      	movs	r2, #4
 80058b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	333d      	adds	r3, #61	; 0x3d
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	3358      	adds	r3, #88	; 0x58
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f8:	f043 0302 	orr.w	r3, r3, #2
 80058fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f008 f9dc 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591a:	461a      	mov	r2, r3
 800591c:	2340      	movs	r3, #64	; 0x40
 800591e:	6093      	str	r3, [r2, #8]
}
 8005920:	e2a6      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005938:	d122      	bne.n	8005980 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	440a      	add	r2, r1
 8005950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005954:	f043 0302 	orr.w	r3, r3, #2
 8005958:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f008 f9ae 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	461a      	mov	r2, r3
 8005978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800597c:	6093      	str	r3, [r2, #8]
}
 800597e:	e277      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d135      	bne.n	8005a02 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	440b      	add	r3, r1
 80059a4:	3358      	adds	r3, #88	; 0x58
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c4:	f043 0302 	orr.w	r3, r3, #2
 80059c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f008 f976 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e6:	461a      	mov	r2, r3
 80059e8:	2301      	movs	r3, #1
 80059ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	440b      	add	r3, r1
 80059fa:	335d      	adds	r3, #93	; 0x5d
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
}
 8005a00:	e236      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d12b      	bne.n	8005a70 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a24:	461a      	mov	r2, r3
 8005a26:	2308      	movs	r3, #8
 8005a28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f008 f936 	bl	800dcc6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	440b      	add	r3, r1
 8005a68:	335d      	adds	r3, #93	; 0x5d
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	701a      	strb	r2, [r3, #0]
}
 8005a6e:	e1ff      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d155      	bne.n	8005b32 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	3358      	adds	r3, #88	; 0x58
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	335d      	adds	r3, #93	; 0x5d
 8005aaa:	2203      	movs	r2, #3
 8005aac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	333d      	adds	r3, #61	; 0x3d
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d114      	bne.n	8005aee <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	440b      	add	r3, r1
 8005ad2:	333c      	adds	r3, #60	; 0x3c
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	440b      	add	r3, r1
 8005ae8:	333d      	adds	r3, #61	; 0x3d
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f008 f8d4 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	6093      	str	r3, [r2, #8]
}
 8005b30:	e19e      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b44:	2b80      	cmp	r3, #128	; 0x80
 8005b46:	d12b      	bne.n	8005ba0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b62:	f043 0302 	orr.w	r3, r3, #2
 8005b66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	4611      	mov	r1, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f008 f8a7 	bl	800dcc6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	440b      	add	r3, r1
 8005b86:	335d      	adds	r3, #93	; 0x5d
 8005b88:	2206      	movs	r2, #6
 8005b8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	6093      	str	r3, [r2, #8]
}
 8005b9e:	e167      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb6:	d135      	bne.n	8005c24 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd2:	f043 0302 	orr.w	r3, r3, #2
 8005bd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f008 f86f 	bl	800dcc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2310      	movs	r3, #16
 8005bf8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	461a      	mov	r2, r3
 8005c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	440b      	add	r3, r1
 8005c1c:	335d      	adds	r3, #93	; 0x5d
 8005c1e:	2208      	movs	r2, #8
 8005c20:	701a      	strb	r2, [r3, #0]
}
 8005c22:	e125      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	f040 811a 	bne.w	8005e70 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f023 0302 	bic.w	r3, r3, #2
 8005c5a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	440b      	add	r3, r1
 8005c6a:	335d      	adds	r3, #93	; 0x5d
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d137      	bne.n	8005ce2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	440b      	add	r3, r1
 8005c80:	335c      	adds	r3, #92	; 0x5c
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	440b      	add	r3, r1
 8005c94:	333f      	adds	r3, #63	; 0x3f
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d00b      	beq.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	440b      	add	r3, r1
 8005caa:	333f      	adds	r3, #63	; 0x3f
 8005cac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	f040 80c5 	bne.w	8005e3e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3351      	adds	r3, #81	; 0x51
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2d8      	uxtb	r0, r3
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	440b      	add	r3, r1
 8005cda:	3351      	adds	r3, #81	; 0x51
 8005cdc:	4602      	mov	r2, r0
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	e0ad      	b.n	8005e3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	335d      	adds	r3, #93	; 0x5d
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d10a      	bne.n	8005d0e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	440b      	add	r3, r1
 8005d06:	335c      	adds	r3, #92	; 0x5c
 8005d08:	2202      	movs	r2, #2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	e097      	b.n	8005e3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	440b      	add	r3, r1
 8005d1c:	335d      	adds	r3, #93	; 0x5d
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d10a      	bne.n	8005d3a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	440b      	add	r3, r1
 8005d32:	335c      	adds	r3, #92	; 0x5c
 8005d34:	2202      	movs	r2, #2
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e081      	b.n	8005e3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	335d      	adds	r3, #93	; 0x5d
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	d10a      	bne.n	8005d66 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	440b      	add	r3, r1
 8005d5e:	335c      	adds	r3, #92	; 0x5c
 8005d60:	2205      	movs	r2, #5
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	e06b      	b.n	8005e3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	440b      	add	r3, r1
 8005d74:	335d      	adds	r3, #93	; 0x5d
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b06      	cmp	r3, #6
 8005d7a:	d00a      	beq.n	8005d92 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	440b      	add	r3, r1
 8005d8a:	335d      	adds	r3, #93	; 0x5d
 8005d8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d155      	bne.n	8005e3e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	440b      	add	r3, r1
 8005da0:	3358      	adds	r3, #88	; 0x58
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	1c59      	adds	r1, r3, #1
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4403      	add	r3, r0
 8005db4:	3358      	adds	r3, #88	; 0x58
 8005db6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3358      	adds	r3, #88	; 0x58
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d914      	bls.n	8005df8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	440b      	add	r3, r1
 8005ddc:	3358      	adds	r3, #88	; 0x58
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	440b      	add	r3, r1
 8005df0:	335c      	adds	r3, #92	; 0x5c
 8005df2:	2204      	movs	r2, #4
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e009      	b.n	8005e0c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	440b      	add	r3, r1
 8005e06:	335c      	adds	r3, #92	; 0x5c
 8005e08:	2202      	movs	r2, #2
 8005e0a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e22:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e2a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	b2d8      	uxtb	r0, r3
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	440b      	add	r3, r1
 8005e62:	335c      	adds	r3, #92	; 0x5c
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	4601      	mov	r1, r0
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f00f f8d0 	bl	8015010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005e70:	bf00      	nop
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	0c5b      	lsrs	r3, r3, #17
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d003      	beq.n	8005ebc <HCD_RXQLVL_IRQHandler+0x44>
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	f000 8082 	beq.w	8005fbe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005eba:	e083      	b.n	8005fc4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d07f      	beq.n	8005fc2 <HCD_RXQLVL_IRQHandler+0x14a>
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	440b      	add	r3, r1
 8005ed0:	3344      	adds	r3, #68	; 0x44
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d074      	beq.n	8005fc2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	440b      	add	r3, r1
 8005eea:	3344      	adds	r3, #68	; 0x44
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	b292      	uxth	r2, r2
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f007 fa93 	bl	800d41e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	440b      	add	r3, r1
 8005f06:	3344      	adds	r3, #68	; 0x44
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	18d1      	adds	r1, r2, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4403      	add	r3, r0
 8005f1c:	3344      	adds	r3, #68	; 0x44
 8005f1e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	440b      	add	r3, r1
 8005f2e:	334c      	adds	r3, #76	; 0x4c
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	18d1      	adds	r1, r2, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4403      	add	r3, r0
 8005f44:	334c      	adds	r3, #76	; 0x4c
 8005f46:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <HCD_RXQLVL_IRQHandler+0x154>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d031      	beq.n	8005fc2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3350      	adds	r3, #80	; 0x50
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f083 0301 	eor.w	r3, r3, #1
 8005fa6:	b2d8      	uxtb	r0, r3
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3350      	adds	r3, #80	; 0x50
 8005fb8:	4602      	mov	r2, r0
 8005fba:	701a      	strb	r2, [r3, #0]
      break;
 8005fbc:	e001      	b.n	8005fc2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005fc2:	bf00      	nop
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3728      	adds	r7, #40	; 0x28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	1ff80000 	.word	0x1ff80000

08005fd0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ffc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d113      	bne.n	8006030 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b01      	cmp	r3, #1
 8006010:	d10a      	bne.n	8006028 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006020:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f00e ffd8 	bl	8014fd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f043 0302 	orr.w	r3, r3, #2
 800602e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b08      	cmp	r3, #8
 8006038:	d147      	bne.n	80060ca <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f043 0308 	orr.w	r3, r3, #8
 8006040:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b04      	cmp	r3, #4
 800604a:	d129      	bne.n	80060a0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d113      	bne.n	800607c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800605a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800605e:	d106      	bne.n	800606e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2102      	movs	r1, #2
 8006066:	4618      	mov	r0, r3
 8006068:	f007 fb08 	bl	800d67c <USB_InitFSLSPClkSel>
 800606c:	e011      	b.n	8006092 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2101      	movs	r1, #1
 8006074:	4618      	mov	r0, r3
 8006076:	f007 fb01 	bl	800d67c <USB_InitFSLSPClkSel>
 800607a:	e00a      	b.n	8006092 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d106      	bne.n	8006092 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608a:	461a      	mov	r2, r3
 800608c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006090:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f00e ffce 	bl	8015034 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f00e ff9d 	bl	8014fd8 <HAL_HCD_Connect_Callback>
 800609e:	e014      	b.n	80060ca <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f00e ffd5 	bl	8015050 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060b8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80060c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d103      	bne.n	80060dc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f043 0320 	orr.w	r3, r3, #32
 80060da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060e2:	461a      	mov	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6013      	str	r3, [r2, #0]
}
 80060e8:	bf00      	nop
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e07f      	b.n	8006202 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc fb6c 	bl	80027f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2224      	movs	r2, #36	; 0x24
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006140:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006150:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d107      	bne.n	800616a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	e006      	b.n	8006178 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006176:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d104      	bne.n	800618a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006188:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b1d      	ldr	r3, [pc, #116]	; (800620c <HAL_I2C_Init+0x11c>)
 8006196:	430b      	orrs	r3, r1
 8006198:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	ea42 0103 	orr.w	r1, r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	021a      	lsls	r2, r3, #8
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1a      	ldr	r2, [r3, #32]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	02008000 	.word	0x02008000

08006210 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e021      	b.n	8006266 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2224      	movs	r2, #36	; 0x24
 8006226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc fb52 	bl	80028e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4603      	mov	r3, r0
 8006280:	817b      	strh	r3, [r7, #10]
 8006282:	460b      	mov	r3, r1
 8006284:	813b      	strh	r3, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b20      	cmp	r3, #32
 8006294:	f040 80f9 	bne.w	800648a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_I2C_Mem_Write+0x34>
 800629e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0ed      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_I2C_Mem_Write+0x4e>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e0e6      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062c6:	f7fd f83f 	bl	8003348 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2319      	movs	r3, #25
 80062d2:	2201      	movs	r2, #1
 80062d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fad1 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0d1      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2221      	movs	r2, #33	; 0x21
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2240      	movs	r2, #64	; 0x40
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006310:	88f8      	ldrh	r0, [r7, #6]
 8006312:	893a      	ldrh	r2, [r7, #8]
 8006314:	8979      	ldrh	r1, [r7, #10]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	4603      	mov	r3, r0
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f9e1 	bl	80066e8 <I2C_RequestMemoryWrite>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0a9      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	2bff      	cmp	r3, #255	; 0xff
 8006340:	d90e      	bls.n	8006360 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634c:	b2da      	uxtb	r2, r3
 800634e:	8979      	ldrh	r1, [r7, #10]
 8006350:	2300      	movs	r3, #0
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fbb3 	bl	8006ac4 <I2C_TransferConfig>
 800635e:	e00f      	b.n	8006380 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	b2da      	uxtb	r2, r3
 8006370:	8979      	ldrh	r1, [r7, #10]
 8006372:	2300      	movs	r3, #0
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 fba2 	bl	8006ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fabb 	bl	8006900 <I2C_WaitOnTXISFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e07b      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	781a      	ldrb	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d034      	beq.n	8006438 <HAL_I2C_Mem_Write+0x1c8>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d130      	bne.n	8006438 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2200      	movs	r2, #0
 80063de:	2180      	movs	r1, #128	; 0x80
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fa4d 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e04d      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d90e      	bls.n	8006418 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006404:	b2da      	uxtb	r2, r3
 8006406:	8979      	ldrh	r1, [r7, #10]
 8006408:	2300      	movs	r3, #0
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fb57 	bl	8006ac4 <I2C_TransferConfig>
 8006416:	e00f      	b.n	8006438 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006426:	b2da      	uxtb	r2, r3
 8006428:	8979      	ldrh	r1, [r7, #10]
 800642a:	2300      	movs	r3, #0
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fb46 	bl	8006ac4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d19e      	bne.n	8006380 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fa9a 	bl	8006980 <I2C_WaitOnSTOPFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e01a      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2220      	movs	r2, #32
 800645c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6859      	ldr	r1, [r3, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <HAL_I2C_Mem_Write+0x224>)
 800646a:	400b      	ands	r3, r1
 800646c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e000      	b.n	800648c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800648a:	2302      	movs	r3, #2
  }
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	fe00e800 	.word	0xfe00e800

08006498 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	817b      	strh	r3, [r7, #10]
 80064aa:	460b      	mov	r3, r1
 80064ac:	813b      	strh	r3, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	f040 80fd 	bne.w	80066ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_I2C_Mem_Read+0x34>
 80064c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d105      	bne.n	80064d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0f1      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_I2C_Mem_Read+0x4e>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e0ea      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064ee:	f7fc ff2b 	bl	8003348 <HAL_GetTick>
 80064f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2319      	movs	r3, #25
 80064fa:	2201      	movs	r2, #1
 80064fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f9bd 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e0d5      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2222      	movs	r2, #34	; 0x22
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2240      	movs	r2, #64	; 0x40
 800651c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a3a      	ldr	r2, [r7, #32]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006530:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006538:	88f8      	ldrh	r0, [r7, #6]
 800653a:	893a      	ldrh	r2, [r7, #8]
 800653c:	8979      	ldrh	r1, [r7, #10]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	4603      	mov	r3, r0
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f921 	bl	8006790 <I2C_RequestMemoryRead>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0ad      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2bff      	cmp	r3, #255	; 0xff
 8006568:	d90e      	bls.n	8006588 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	22ff      	movs	r2, #255	; 0xff
 800656e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006574:	b2da      	uxtb	r2, r3
 8006576:	8979      	ldrh	r1, [r7, #10]
 8006578:	4b52      	ldr	r3, [pc, #328]	; (80066c4 <HAL_I2C_Mem_Read+0x22c>)
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fa9f 	bl	8006ac4 <I2C_TransferConfig>
 8006586:	e00f      	b.n	80065a8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006596:	b2da      	uxtb	r2, r3
 8006598:	8979      	ldrh	r1, [r7, #10]
 800659a:	4b4a      	ldr	r3, [pc, #296]	; (80066c4 <HAL_I2C_Mem_Read+0x22c>)
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fa8e 	bl	8006ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2200      	movs	r2, #0
 80065b0:	2104      	movs	r1, #4
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f964 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e07c      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d034      	beq.n	8006668 <HAL_I2C_Mem_Read+0x1d0>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	d130      	bne.n	8006668 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2200      	movs	r2, #0
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f935 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e04d      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	2bff      	cmp	r3, #255	; 0xff
 8006628:	d90e      	bls.n	8006648 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	22ff      	movs	r2, #255	; 0xff
 800662e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006634:	b2da      	uxtb	r2, r3
 8006636:	8979      	ldrh	r1, [r7, #10]
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fa3f 	bl	8006ac4 <I2C_TransferConfig>
 8006646:	e00f      	b.n	8006668 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006656:	b2da      	uxtb	r2, r3
 8006658:	8979      	ldrh	r1, [r7, #10]
 800665a:	2300      	movs	r3, #0
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa2e 	bl	8006ac4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d19a      	bne.n	80065a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f982 	bl	8006980 <I2C_WaitOnSTOPFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e01a      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2220      	movs	r2, #32
 800668c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <HAL_I2C_Mem_Read+0x230>)
 800669a:	400b      	ands	r3, r1
 800669c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e000      	b.n	80066bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80066ba:	2302      	movs	r3, #2
  }
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	80002400 	.word	0x80002400
 80066c8:	fe00e800 	.word	0xfe00e800

080066cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066da:	b2db      	uxtb	r3, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	817b      	strh	r3, [r7, #10]
 80066fa:	460b      	mov	r3, r1
 80066fc:	813b      	strh	r3, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	8979      	ldrh	r1, [r7, #10]
 8006708:	4b20      	ldr	r3, [pc, #128]	; (800678c <I2C_RequestMemoryWrite+0xa4>)
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f9d7 	bl	8006ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	69b9      	ldr	r1, [r7, #24]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f8f0 	bl	8006900 <I2C_WaitOnTXISFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e02c      	b.n	8006784 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d105      	bne.n	800673c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006730:	893b      	ldrh	r3, [r7, #8]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	629a      	str	r2, [r3, #40]	; 0x28
 800673a:	e015      	b.n	8006768 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800673c:	893b      	ldrh	r3, [r7, #8]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	b29b      	uxth	r3, r3
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	69b9      	ldr	r1, [r7, #24]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f8d6 	bl	8006900 <I2C_WaitOnTXISFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e012      	b.n	8006784 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800675e:	893b      	ldrh	r3, [r7, #8]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2200      	movs	r2, #0
 8006770:	2180      	movs	r1, #128	; 0x80
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f884 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	80002000 	.word	0x80002000

08006790 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	461a      	mov	r2, r3
 800679e:	4603      	mov	r3, r0
 80067a0:	817b      	strh	r3, [r7, #10]
 80067a2:	460b      	mov	r3, r1
 80067a4:	813b      	strh	r3, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	8979      	ldrh	r1, [r7, #10]
 80067b0:	4b20      	ldr	r3, [pc, #128]	; (8006834 <I2C_RequestMemoryRead+0xa4>)
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f984 	bl	8006ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	69b9      	ldr	r1, [r7, #24]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f89d 	bl	8006900 <I2C_WaitOnTXISFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e02c      	b.n	800682a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d105      	bne.n	80067e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067d6:	893b      	ldrh	r3, [r7, #8]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
 80067e0:	e015      	b.n	800680e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067e2:	893b      	ldrh	r3, [r7, #8]
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	69b9      	ldr	r1, [r7, #24]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f883 	bl	8006900 <I2C_WaitOnTXISFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e012      	b.n	800682a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006804:	893b      	ldrh	r3, [r7, #8]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2200      	movs	r2, #0
 8006816:	2140      	movs	r1, #64	; 0x40
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f831 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	80002000 	.word	0x80002000

08006838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b02      	cmp	r3, #2
 800684c:	d103      	bne.n	8006856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2200      	movs	r2, #0
 8006854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	d007      	beq.n	8006874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	619a      	str	r2, [r3, #24]
  }
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006890:	e022      	b.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d01e      	beq.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689a:	f7fc fd55 	bl	8003348 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d113      	bne.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e00f      	b.n	80068f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d0cd      	beq.n	8006892 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800690c:	e02c      	b.n	8006968 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f870 	bl	80069f8 <I2C_IsAcknowledgeFailed>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e02a      	b.n	8006978 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d01e      	beq.n	8006968 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fc fd0d 	bl	8003348 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d113      	bne.n	8006968 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e007      	b.n	8006978 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b02      	cmp	r3, #2
 8006974:	d1cb      	bne.n	800690e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800698c:	e028      	b.n	80069e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f830 	bl	80069f8 <I2C_IsAcknowledgeFailed>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e026      	b.n	80069f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a2:	f7fc fcd1 	bl	8003348 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d302      	bcc.n	80069b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d113      	bne.n	80069e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069bc:	f043 0220 	orr.w	r2, r3, #32
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e007      	b.n	80069f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d1cf      	bne.n	800698e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d151      	bne.n	8006ab6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a12:	e022      	b.n	8006a5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d01e      	beq.n	8006a5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1c:	f7fc fc94 	bl	8003348 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <I2C_IsAcknowledgeFailed+0x3a>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d113      	bne.n	8006a5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	f043 0220 	orr.w	r2, r3, #32
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e02e      	b.n	8006ab8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d1d5      	bne.n	8006a14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2210      	movs	r2, #16
 8006a6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2220      	movs	r2, #32
 8006a76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff fedd 	bl	8006838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <I2C_IsAcknowledgeFailed+0xc8>)
 8006a8a:	400b      	ands	r3, r1
 8006a8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	f043 0204 	orr.w	r2, r3, #4
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	fe00e800 	.word	0xfe00e800

08006ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	817b      	strh	r3, [r7, #10]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	0d5b      	lsrs	r3, r3, #21
 8006ae0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <I2C_TransferConfig+0x58>)
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	ea02 0103 	and.w	r1, r2, r3
 8006aee:	897b      	ldrh	r3, [r7, #10]
 8006af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006af4:	7a7b      	ldrb	r3, [r7, #9]
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	03ff63ff 	.word	0x03ff63ff

08006b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d138      	bne.n	8006ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e032      	b.n	8006baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2224      	movs	r2, #36	; 0x24
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6819      	ldr	r1, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e000      	b.n	8006baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ba8:	2302      	movs	r3, #2
  }
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d139      	bne.n	8006c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e033      	b.n	8006c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2224      	movs	r2, #36	; 0x24
 8006be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0201 	bic.w	r2, r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e0bf      	b.n	8006de2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f00c fdb4 	bl	80137e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6999      	ldr	r1, [r3, #24]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ca8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6899      	ldr	r1, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b4a      	ldr	r3, [pc, #296]	; (8006dec <HAL_LTDC_Init+0x19c>)
 8006cc4:	400b      	ands	r3, r1
 8006cc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	041b      	lsls	r3, r3, #16
 8006cce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6899      	ldr	r1, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68d9      	ldr	r1, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4b3e      	ldr	r3, [pc, #248]	; (8006dec <HAL_LTDC_Init+0x19c>)
 8006cf2:	400b      	ands	r3, r1
 8006cf4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68d9      	ldr	r1, [r3, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1a      	ldr	r2, [r3, #32]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6919      	ldr	r1, [r3, #16]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b33      	ldr	r3, [pc, #204]	; (8006dec <HAL_LTDC_Init+0x19c>)
 8006d20:	400b      	ands	r3, r1
 8006d22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6919      	ldr	r1, [r3, #16]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6959      	ldr	r1, [r3, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	4b27      	ldr	r3, [pc, #156]	; (8006dec <HAL_LTDC_Init+0x19c>)
 8006d4e:	400b      	ands	r3, r1
 8006d50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6959      	ldr	r1, [r3, #20]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0206 	orr.w	r2, r2, #6
 8006dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	f000f800 	.word	0xf000f800

08006df0 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f00c fdbb 	bl	8013974 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e36:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d023      	beq.n	8006e8a <HAL_LTDC_IRQHandler+0x6a>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01e      	beq.n	8006e8a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0204 	bic.w	r2, r2, #4
 8006e5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2204      	movs	r2, #4
 8006e62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e6a:	f043 0201 	orr.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2204      	movs	r2, #4
 8006e78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f86f 	bl	8006f68 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d023      	beq.n	8006edc <HAL_LTDC_IRQHandler+0xbc>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01e      	beq.n	8006edc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0202 	bic.w	r2, r2, #2
 8006eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ebc:	f043 0202 	orr.w	r2, r3, #2
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f846 	bl	8006f68 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01b      	beq.n	8006f1e <HAL_LTDC_IRQHandler+0xfe>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2201      	movs	r2, #1
 8006f06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f00d fd15 	bl	8014948 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01b      	beq.n	8006f60 <HAL_LTDC_IRQHandler+0x140>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 0308 	and.w	r3, r3, #8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0208 	bic.w	r2, r2, #8
 8006f40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2208      	movs	r2, #8
 8006f48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f80e 	bl	8006f7c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f90:	b5b0      	push	{r4, r5, r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_LTDC_ConfigLayer+0x1a>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e02c      	b.n	8007004 <HAL_LTDC_ConfigLayer+0x74>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2134      	movs	r1, #52	; 0x34
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4614      	mov	r4, r2
 8006fce:	461d      	mov	r5, r3
 8006fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fa1f 	bl	8007428 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bdb0      	pop	{r4, r5, r7, pc}

0800700c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <HAL_LTDC_ConfigColorKeying+0x1a>
 8007022:	2302      	movs	r3, #2
 8007024:	e030      	b.n	8007088 <HAL_LTDC_ConfigColorKeying+0x7c>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	01db      	lsls	r3, r3, #7
 8007040:	4413      	add	r3, r2
 8007042:	3384      	adds	r3, #132	; 0x84
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	4611      	mov	r1, r2
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	01d2      	lsls	r2, r2, #7
 8007050:	440a      	add	r2, r1
 8007052:	3284      	adds	r2, #132	; 0x84
 8007054:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007058:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	01db      	lsls	r3, r3, #7
 8007064:	4413      	add	r3, r2
 8007066:	3384      	adds	r3, #132	; 0x84
 8007068:	461a      	mov	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2201      	movs	r2, #1
 8007074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp;
  uint32_t counter;
  uint32_t *pcolorlut = pCLUT;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_LTDC_ConfigCLUT+0x20>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e057      	b.n	8007164 <HAL_LTDC_ConfigCLUT+0xd0>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for (counter = 0U; (counter < CLUTSize); counter++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	e03f      	b.n	800714a <HAL_LTDC_ConfigCLUT+0xb6>
  {
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2134      	movs	r1, #52	; 0x34
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	3348      	adds	r3, #72	; 0x48
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b06      	cmp	r3, #6
 80070dc:	d114      	bne.n	8007108 <HAL_LTDC_ConfigCLUT+0x74>
    {
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	4613      	mov	r3, r2
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	061a      	lsls	r2, r3, #24
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	431a      	orrs	r2, r3
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070f8:	431a      	orrs	r2, r3
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007102:	4313      	orrs	r3, r2
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	e010      	b.n	800712a <HAL_LTDC_ConfigCLUT+0x96>
    }
    else
    {
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	061a      	lsls	r2, r3, #24
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	431a      	orrs	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800711c:	431a      	orrs	r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007126:	4313      	orrs	r3, r2
 8007128:	61fb      	str	r3, [r7, #28]
    }

    pcolorlut++;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	3304      	adds	r3, #4
 800712e:	617b      	str	r3, [r7, #20]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	01db      	lsls	r3, r3, #7
 800713a:	4413      	add	r3, r2
 800713c:	3384      	adds	r3, #132	; 0x84
 800713e:	461a      	mov	r2, r3
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	6413      	str	r3, [r2, #64]	; 0x40
  for (counter = 0U; (counter < CLUTSize); counter++)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	3301      	adds	r3, #1
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	429a      	cmp	r2, r3
 8007150:	d3bb      	bcc.n	80070ca <HAL_LTDC_ConfigCLUT+0x36>
  }

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3724      	adds	r7, #36	; 0x24
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_LTDC_EnableColorKeying+0x18>
 8007184:	2302      	movs	r3, #2
 8007186:	e026      	b.n	80071d6 <HAL_LTDC_EnableColorKeying+0x66>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	01db      	lsls	r3, r3, #7
 80071a2:	4413      	add	r3, r2
 80071a4:	3384      	adds	r3, #132	; 0x84
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	4611      	mov	r1, r2
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	01d2      	lsls	r2, r2, #7
 80071b2:	440a      	add	r2, r1
 80071b4:	3284      	adds	r2, #132	; 0x84
 80071b6:	f043 0302 	orr.w	r3, r3, #2
 80071ba:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2201      	movs	r2, #1
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_LTDC_DisableColorKeying+0x18>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e026      	b.n	8007248 <HAL_LTDC_DisableColorKeying+0x66>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	01db      	lsls	r3, r3, #7
 8007214:	4413      	add	r3, r2
 8007216:	3384      	adds	r3, #132	; 0x84
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	4611      	mov	r1, r2
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	01d2      	lsls	r2, r2, #7
 8007224:	440a      	add	r2, r1
 8007226:	3284      	adds	r2, #132	; 0x84
 8007228:	f023 0302 	bic.w	r3, r3, #2
 800722c:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_LTDC_SetWindowPosition+0x1c>
 800726c:	2302      	movs	r3, #2
 800726e:	e033      	b.n	80072d8 <HAL_LTDC_SetWindowPosition+0x84>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2234      	movs	r2, #52	; 0x34
 8007284:	fb02 f303 	mul.w	r3, r2, r3
 8007288:	3338      	adds	r3, #56	; 0x38
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	441a      	add	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	441a      	add	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f8b5 	bl	8007428 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2201      	movs	r2, #1
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_LTDC_SetAlpha+0x1a>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e024      	b.n	8007344 <HAL_LTDC_SetAlpha+0x64>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2202      	movs	r2, #2
 8007306:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2234      	movs	r2, #52	; 0x34
 800730e:	fb02 f303 	mul.w	r3, r2, r3
 8007312:	3338      	adds	r3, #56	; 0x38
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6979      	ldr	r1, [r7, #20]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 f87f 	bl	8007428 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2201      	movs	r2, #1
 8007330:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_LTDC_SetAddress+0x1a>
 8007362:	2302      	movs	r3, #2
 8007364:	e024      	b.n	80073b0 <HAL_LTDC_SetAddress+0x64>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2234      	movs	r2, #52	; 0x34
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	3338      	adds	r3, #56	; 0x38
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6979      	ldr	r1, [r7, #20]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f849 	bl	8007428 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2201      	movs	r2, #1
 800739c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d101      	bne.n	80073d0 <HAL_LTDC_ProgramLineEvent+0x18>
 80073cc:	2302      	movs	r3, #2
 80073ce:	e023      	b.n	8007418 <HAL_LTDC_ProgramLineEvent+0x60>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0201 	bic.w	r2, r2, #1
 80073ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80073f0:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0201 	orr.w	r2, r2, #1
 8007404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40016800 	.word	0x40016800

08007428 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007428:	b480      	push	{r7}
 800742a:	b089      	sub	sp, #36	; 0x24
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007444:	4413      	add	r3, r2
 8007446:	041b      	lsls	r3, r3, #16
 8007448:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	01db      	lsls	r3, r3, #7
 8007454:	4413      	add	r3, r2
 8007456:	3384      	adds	r3, #132	; 0x84
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	4611      	mov	r1, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	01d2      	lsls	r2, r2, #7
 8007464:	440a      	add	r2, r1
 8007466:	3284      	adds	r2, #132	; 0x84
 8007468:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800746c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800747e:	4413      	add	r3, r2
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4619      	mov	r1, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	01db      	lsls	r3, r3, #7
 800748c:	440b      	add	r3, r1
 800748e:	3384      	adds	r3, #132	; 0x84
 8007490:	4619      	mov	r1, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4313      	orrs	r3, r2
 8007496:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a6:	4413      	add	r3, r2
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	01db      	lsls	r3, r3, #7
 80074b6:	4413      	add	r3, r2
 80074b8:	3384      	adds	r3, #132	; 0x84
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	4611      	mov	r1, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	01d2      	lsls	r2, r2, #7
 80074c6:	440a      	add	r2, r1
 80074c8:	3284      	adds	r2, #132	; 0x84
 80074ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074de:	4413      	add	r3, r2
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	01db      	lsls	r3, r3, #7
 80074ec:	440b      	add	r3, r1
 80074ee:	3384      	adds	r3, #132	; 0x84
 80074f0:	4619      	mov	r1, r3
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	01db      	lsls	r3, r3, #7
 8007502:	4413      	add	r3, r2
 8007504:	3384      	adds	r3, #132	; 0x84
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	6812      	ldr	r2, [r2, #0]
 800750c:	4611      	mov	r1, r2
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	01d2      	lsls	r2, r2, #7
 8007512:	440a      	add	r2, r1
 8007514:	3284      	adds	r2, #132	; 0x84
 8007516:	f023 0307 	bic.w	r3, r3, #7
 800751a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	01db      	lsls	r3, r3, #7
 8007526:	4413      	add	r3, r2
 8007528:	3384      	adds	r3, #132	; 0x84
 800752a:	461a      	mov	r2, r3
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007542:	041b      	lsls	r3, r3, #16
 8007544:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	061b      	lsls	r3, r3, #24
 800754c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	01db      	lsls	r3, r3, #7
 8007558:	4413      	add	r3, r2
 800755a:	3384      	adds	r3, #132	; 0x84
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	01db      	lsls	r3, r3, #7
 8007568:	4413      	add	r3, r2
 800756a:	3384      	adds	r3, #132	; 0x84
 800756c:	461a      	mov	r2, r3
 800756e:	2300      	movs	r3, #0
 8007570:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007578:	461a      	mov	r2, r3
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	431a      	orrs	r2, r3
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	431a      	orrs	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	01db      	lsls	r3, r3, #7
 800758c:	440b      	add	r3, r1
 800758e:	3384      	adds	r3, #132	; 0x84
 8007590:	4619      	mov	r1, r3
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	01db      	lsls	r3, r3, #7
 80075a2:	4413      	add	r3, r2
 80075a4:	3384      	adds	r3, #132	; 0x84
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	4611      	mov	r1, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	01d2      	lsls	r2, r2, #7
 80075b2:	440a      	add	r2, r1
 80075b4:	3284      	adds	r2, #132	; 0x84
 80075b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	01db      	lsls	r3, r3, #7
 80075c6:	4413      	add	r3, r2
 80075c8:	3384      	adds	r3, #132	; 0x84
 80075ca:	461a      	mov	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	01db      	lsls	r3, r3, #7
 80075dc:	4413      	add	r3, r2
 80075de:	3384      	adds	r3, #132	; 0x84
 80075e0:	69da      	ldr	r2, [r3, #28]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	440b      	add	r3, r1
 80075ee:	3384      	adds	r3, #132	; 0x84
 80075f0:	4619      	mov	r1, r3
 80075f2:	4b58      	ldr	r3, [pc, #352]	; (8007754 <LTDC_SetConfig+0x32c>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	68f9      	ldr	r1, [r7, #12]
 8007602:	6809      	ldr	r1, [r1, #0]
 8007604:	4608      	mov	r0, r1
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	01c9      	lsls	r1, r1, #7
 800760a:	4401      	add	r1, r0
 800760c:	3184      	adds	r1, #132	; 0x84
 800760e:	4313      	orrs	r3, r2
 8007610:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	01db      	lsls	r3, r3, #7
 800761c:	4413      	add	r3, r2
 800761e:	3384      	adds	r3, #132	; 0x84
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	01db      	lsls	r3, r3, #7
 800762c:	4413      	add	r3, r2
 800762e:	3384      	adds	r3, #132	; 0x84
 8007630:	461a      	mov	r2, r3
 8007632:	2300      	movs	r3, #0
 8007634:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	01db      	lsls	r3, r3, #7
 8007640:	4413      	add	r3, r2
 8007642:	3384      	adds	r3, #132	; 0x84
 8007644:	461a      	mov	r2, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007654:	2304      	movs	r3, #4
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e01b      	b.n	8007692 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d102      	bne.n	8007668 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007662:	2303      	movs	r3, #3
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	e014      	b.n	8007692 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b04      	cmp	r3, #4
 800766e:	d00b      	beq.n	8007688 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007674:	2b02      	cmp	r3, #2
 8007676:	d007      	beq.n	8007688 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800767c:	2b03      	cmp	r3, #3
 800767e:	d003      	beq.n	8007688 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007684:	2b07      	cmp	r3, #7
 8007686:	d102      	bne.n	800768e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007688:	2302      	movs	r3, #2
 800768a:	61fb      	str	r3, [r7, #28]
 800768c:	e001      	b.n	8007692 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800768e:	2301      	movs	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	01db      	lsls	r3, r3, #7
 800769c:	4413      	add	r3, r2
 800769e:	3384      	adds	r3, #132	; 0x84
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	6812      	ldr	r2, [r2, #0]
 80076a6:	4611      	mov	r1, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	01d2      	lsls	r2, r2, #7
 80076ac:	440a      	add	r2, r1
 80076ae:	3284      	adds	r2, #132	; 0x84
 80076b0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80076b4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	fb02 f303 	mul.w	r3, r2, r3
 80076c0:	041a      	lsls	r2, r3, #16
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6859      	ldr	r1, [r3, #4]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	1acb      	subs	r3, r1, r3
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	3303      	adds	r3, #3
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	6809      	ldr	r1, [r1, #0]
 80076d8:	4608      	mov	r0, r1
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	01c9      	lsls	r1, r1, #7
 80076de:	4401      	add	r1, r0
 80076e0:	3184      	adds	r1, #132	; 0x84
 80076e2:	4313      	orrs	r3, r2
 80076e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	01db      	lsls	r3, r3, #7
 80076f0:	4413      	add	r3, r2
 80076f2:	3384      	adds	r3, #132	; 0x84
 80076f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4619      	mov	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	01db      	lsls	r3, r3, #7
 8007700:	440b      	add	r3, r1
 8007702:	3384      	adds	r3, #132	; 0x84
 8007704:	4619      	mov	r1, r3
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <LTDC_SetConfig+0x330>)
 8007708:	4013      	ands	r3, r2
 800770a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	01db      	lsls	r3, r3, #7
 8007716:	4413      	add	r3, r2
 8007718:	3384      	adds	r3, #132	; 0x84
 800771a:	461a      	mov	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	01db      	lsls	r3, r3, #7
 800772c:	4413      	add	r3, r2
 800772e:	3384      	adds	r3, #132	; 0x84
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	4611      	mov	r1, r2
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	01d2      	lsls	r2, r2, #7
 800773c:	440a      	add	r2, r1
 800773e:	3284      	adds	r2, #132	; 0x84
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	6013      	str	r3, [r2, #0]
}
 8007746:	bf00      	nop
 8007748:	3724      	adds	r7, #36	; 0x24
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	fffff8f8 	.word	0xfffff8f8
 8007758:	fffff800 	.word	0xfffff800

0800775c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a04      	ldr	r2, [pc, #16]	; (8007778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40007000 	.word	0x40007000

0800777c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007786:	4b23      	ldr	r3, [pc, #140]	; (8007814 <HAL_PWREx_EnableOverDrive+0x98>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	4a22      	ldr	r2, [pc, #136]	; (8007814 <HAL_PWREx_EnableOverDrive+0x98>)
 800778c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007790:	6413      	str	r3, [r2, #64]	; 0x40
 8007792:	4b20      	ldr	r3, [pc, #128]	; (8007814 <HAL_PWREx_EnableOverDrive+0x98>)
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800779e:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1d      	ldr	r2, [pc, #116]	; (8007818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077aa:	f7fb fdcd 	bl	8003348 <HAL_GetTick>
 80077ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077b0:	e009      	b.n	80077c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077b2:	f7fb fdc9 	bl	8003348 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c0:	d901      	bls.n	80077c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e022      	b.n	800780c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077c6:	4b14      	ldr	r3, [pc, #80]	; (8007818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d2:	d1ee      	bne.n	80077b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077d4:	4b10      	ldr	r3, [pc, #64]	; (8007818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a0f      	ldr	r2, [pc, #60]	; (8007818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077e0:	f7fb fdb2 	bl	8003348 <HAL_GetTick>
 80077e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077e6:	e009      	b.n	80077fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077e8:	f7fb fdae 	bl	8003348 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077f6:	d901      	bls.n	80077fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e007      	b.n	800780c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007808:	d1ee      	bne.n	80077e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40023800 	.word	0x40023800
 8007818:	40007000 	.word	0x40007000

0800781c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af02      	add	r7, sp, #8
 8007822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007828:	f7fb fd8e 	bl	8003348 <HAL_GetTick>
 800782c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e073      	b.n	8007920 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_QSPI_Init+0x2c>
 8007844:	2302      	movs	r3, #2
 8007846:	e06b      	b.n	8007920 <HAL_QSPI_Init+0x104>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10b      	bne.n	8007874 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7fb f871 	bl	800294c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800786a:	f241 3188 	movw	r1, #5000	; 0x1388
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f85e 	bl	8007930 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	3b01      	subs	r3, #1
 8007884:	021a      	lsls	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2200      	movs	r2, #0
 8007898:	2120      	movs	r1, #32
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f856 	bl	800794c <QSPI_WaitFlagStateUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d135      	bne.n	8007916 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <HAL_QSPI_Init+0x10c>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6852      	ldr	r2, [r2, #4]
 80078b8:	0611      	lsls	r1, r2, #24
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68d2      	ldr	r2, [r2, #12]
 80078be:	4311      	orrs	r1, r2
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	69d2      	ldr	r2, [r2, #28]
 80078c4:	4311      	orrs	r1, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6a12      	ldr	r2, [r2, #32]
 80078ca:	4311      	orrs	r1, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	430b      	orrs	r3, r1
 80078d2:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	4b14      	ldr	r3, [pc, #80]	; (800792c <HAL_QSPI_Init+0x110>)
 80078dc:	4013      	ands	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6912      	ldr	r2, [r2, #16]
 80078e2:	0411      	lsls	r1, r2, #16
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6952      	ldr	r2, [r2, #20]
 80078e8:	4311      	orrs	r1, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6992      	ldr	r2, [r2, #24]
 80078ee:	4311      	orrs	r1, r2
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	430b      	orrs	r3, r1
 80078f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0201 	orr.w	r2, r2, #1
 8007906:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	00ffff2f 	.word	0x00ffff2f
 800792c:	ffe0f8fe 	.word	0xffe0f8fe

08007930 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	4613      	mov	r3, r2
 800795a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800795c:	e01a      	b.n	8007994 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d016      	beq.n	8007994 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800796c:	f7fb fcec 	bl	8003348 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	429a      	cmp	r2, r3
 800797a:	d20b      	bcs.n	8007994 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2204      	movs	r2, #4
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	f043 0201 	orr.w	r2, r3, #1
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e00e      	b.n	80079b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4013      	ands	r3, r2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bf14      	ite	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	2300      	moveq	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d1d6      	bne.n	800795e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e25c      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8087 	beq.w	8007aee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079e0:	4b96      	ldr	r3, [pc, #600]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 030c 	and.w	r3, r3, #12
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d00c      	beq.n	8007a06 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ec:	4b93      	ldr	r3, [pc, #588]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d112      	bne.n	8007a1e <HAL_RCC_OscConfig+0x62>
 80079f8:	4b90      	ldr	r3, [pc, #576]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a04:	d10b      	bne.n	8007a1e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a06:	4b8d      	ldr	r3, [pc, #564]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d06c      	beq.n	8007aec <HAL_RCC_OscConfig+0x130>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d168      	bne.n	8007aec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e236      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a26:	d106      	bne.n	8007a36 <HAL_RCC_OscConfig+0x7a>
 8007a28:	4b84      	ldr	r3, [pc, #528]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a83      	ldr	r2, [pc, #524]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	e02e      	b.n	8007a94 <HAL_RCC_OscConfig+0xd8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10c      	bne.n	8007a58 <HAL_RCC_OscConfig+0x9c>
 8007a3e:	4b7f      	ldr	r3, [pc, #508]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a7e      	ldr	r2, [pc, #504]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	4b7c      	ldr	r3, [pc, #496]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a7b      	ldr	r2, [pc, #492]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	e01d      	b.n	8007a94 <HAL_RCC_OscConfig+0xd8>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a60:	d10c      	bne.n	8007a7c <HAL_RCC_OscConfig+0xc0>
 8007a62:	4b76      	ldr	r3, [pc, #472]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a75      	ldr	r2, [pc, #468]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4b73      	ldr	r3, [pc, #460]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a72      	ldr	r2, [pc, #456]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e00b      	b.n	8007a94 <HAL_RCC_OscConfig+0xd8>
 8007a7c:	4b6f      	ldr	r3, [pc, #444]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a6e      	ldr	r2, [pc, #440]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4b6c      	ldr	r3, [pc, #432]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a6b      	ldr	r2, [pc, #428]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d013      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9c:	f7fb fc54 	bl	8003348 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aa4:	f7fb fc50 	bl	8003348 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b64      	cmp	r3, #100	; 0x64
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e1ea      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ab6:	4b61      	ldr	r3, [pc, #388]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCC_OscConfig+0xe8>
 8007ac2:	e014      	b.n	8007aee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac4:	f7fb fc40 	bl	8003348 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007acc:	f7fb fc3c 	bl	8003348 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b64      	cmp	r3, #100	; 0x64
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e1d6      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ade:	4b57      	ldr	r3, [pc, #348]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1f0      	bne.n	8007acc <HAL_RCC_OscConfig+0x110>
 8007aea:	e000      	b.n	8007aee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d069      	beq.n	8007bce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007afa:	4b50      	ldr	r3, [pc, #320]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 030c 	and.w	r3, r3, #12
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b06:	4b4d      	ldr	r3, [pc, #308]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d11c      	bne.n	8007b4c <HAL_RCC_OscConfig+0x190>
 8007b12:	4b4a      	ldr	r3, [pc, #296]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d116      	bne.n	8007b4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b1e:	4b47      	ldr	r3, [pc, #284]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <HAL_RCC_OscConfig+0x17a>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d001      	beq.n	8007b36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e1aa      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b36:	4b41      	ldr	r3, [pc, #260]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	493d      	ldr	r1, [pc, #244]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b4a:	e040      	b.n	8007bce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d023      	beq.n	8007b9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b54:	4b39      	ldr	r3, [pc, #228]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a38      	ldr	r2, [pc, #224]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b5a:	f043 0301 	orr.w	r3, r3, #1
 8007b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fb fbf2 	bl	8003348 <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b68:	f7fb fbee 	bl	8003348 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e188      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b7a:	4b30      	ldr	r3, [pc, #192]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b86:	4b2d      	ldr	r3, [pc, #180]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4929      	ldr	r1, [pc, #164]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	600b      	str	r3, [r1, #0]
 8007b9a:	e018      	b.n	8007bce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b9c:	4b27      	ldr	r3, [pc, #156]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a26      	ldr	r2, [pc, #152]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba8:	f7fb fbce 	bl	8003348 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bb0:	f7fb fbca 	bl	8003348 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e164      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bc2:	4b1e      	ldr	r3, [pc, #120]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f0      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d038      	beq.n	8007c4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d019      	beq.n	8007c16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be2:	4b16      	ldr	r3, [pc, #88]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be6:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bee:	f7fb fbab 	bl	8003348 <HAL_GetTick>
 8007bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bf4:	e008      	b.n	8007c08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bf6:	f7fb fba7 	bl	8003348 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e141      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x23a>
 8007c14:	e01a      	b.n	8007c4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1a:	4a08      	ldr	r2, [pc, #32]	; (8007c3c <HAL_RCC_OscConfig+0x280>)
 8007c1c:	f023 0301 	bic.w	r3, r3, #1
 8007c20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c22:	f7fb fb91 	bl	8003348 <HAL_GetTick>
 8007c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c28:	e00a      	b.n	8007c40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c2a:	f7fb fb8d 	bl	8003348 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d903      	bls.n	8007c40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e127      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
 8007c3c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c40:	4b94      	ldr	r3, [pc, #592]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1ee      	bne.n	8007c2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80a4 	beq.w	8007da2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c5a:	4b8e      	ldr	r3, [pc, #568]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10d      	bne.n	8007c82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c66:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	4a8a      	ldr	r2, [pc, #552]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c70:	6413      	str	r3, [r2, #64]	; 0x40
 8007c72:	4b88      	ldr	r3, [pc, #544]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c82:	4b85      	ldr	r3, [pc, #532]	; (8007e98 <HAL_RCC_OscConfig+0x4dc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d118      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c8e:	4b82      	ldr	r3, [pc, #520]	; (8007e98 <HAL_RCC_OscConfig+0x4dc>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a81      	ldr	r2, [pc, #516]	; (8007e98 <HAL_RCC_OscConfig+0x4dc>)
 8007c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c9a:	f7fb fb55 	bl	8003348 <HAL_GetTick>
 8007c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ca0:	e008      	b.n	8007cb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ca2:	f7fb fb51 	bl	8003348 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b64      	cmp	r3, #100	; 0x64
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e0eb      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cb4:	4b78      	ldr	r3, [pc, #480]	; (8007e98 <HAL_RCC_OscConfig+0x4dc>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0f0      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x31a>
 8007cc8:	4b72      	ldr	r3, [pc, #456]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ccc:	4a71      	ldr	r2, [pc, #452]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd4:	e02d      	b.n	8007d32 <HAL_RCC_OscConfig+0x376>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x33c>
 8007cde:	4b6d      	ldr	r3, [pc, #436]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	4a6c      	ldr	r2, [pc, #432]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cea:	4b6a      	ldr	r3, [pc, #424]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cee:	4a69      	ldr	r2, [pc, #420]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007cf0:	f023 0304 	bic.w	r3, r3, #4
 8007cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf6:	e01c      	b.n	8007d32 <HAL_RCC_OscConfig+0x376>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b05      	cmp	r3, #5
 8007cfe:	d10c      	bne.n	8007d1a <HAL_RCC_OscConfig+0x35e>
 8007d00:	4b64      	ldr	r3, [pc, #400]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d04:	4a63      	ldr	r2, [pc, #396]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d06:	f043 0304 	orr.w	r3, r3, #4
 8007d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d0c:	4b61      	ldr	r3, [pc, #388]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d10:	4a60      	ldr	r2, [pc, #384]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	6713      	str	r3, [r2, #112]	; 0x70
 8007d18:	e00b      	b.n	8007d32 <HAL_RCC_OscConfig+0x376>
 8007d1a:	4b5e      	ldr	r3, [pc, #376]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1e:	4a5d      	ldr	r2, [pc, #372]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d20:	f023 0301 	bic.w	r3, r3, #1
 8007d24:	6713      	str	r3, [r2, #112]	; 0x70
 8007d26:	4b5b      	ldr	r3, [pc, #364]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	4a5a      	ldr	r2, [pc, #360]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d2c:	f023 0304 	bic.w	r3, r3, #4
 8007d30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d015      	beq.n	8007d66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3a:	f7fb fb05 	bl	8003348 <HAL_GetTick>
 8007d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d40:	e00a      	b.n	8007d58 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d42:	f7fb fb01 	bl	8003348 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e099      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d58:	4b4e      	ldr	r3, [pc, #312]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0ee      	beq.n	8007d42 <HAL_RCC_OscConfig+0x386>
 8007d64:	e014      	b.n	8007d90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d66:	f7fb faef 	bl	8003348 <HAL_GetTick>
 8007d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d6c:	e00a      	b.n	8007d84 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d6e:	f7fb faeb 	bl	8003348 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e083      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d84:	4b43      	ldr	r3, [pc, #268]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1ee      	bne.n	8007d6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d105      	bne.n	8007da2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d96:	4b3f      	ldr	r3, [pc, #252]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	4a3e      	ldr	r2, [pc, #248]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d06f      	beq.n	8007e8a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007daa:	4b3a      	ldr	r3, [pc, #232]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d067      	beq.n	8007e86 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d149      	bne.n	8007e52 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dbe:	4b35      	ldr	r3, [pc, #212]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a34      	ldr	r2, [pc, #208]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dca:	f7fb fabd 	bl	8003348 <HAL_GetTick>
 8007dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dd2:	f7fb fab9 	bl	8003348 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e053      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de4:	4b2b      	ldr	r3, [pc, #172]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1f0      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	019b      	lsls	r3, r3, #6
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	041b      	lsls	r3, r3, #16
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	061b      	lsls	r3, r3, #24
 8007e14:	4313      	orrs	r3, r2
 8007e16:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007e18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e1c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e1e:	4b1d      	ldr	r3, [pc, #116]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1c      	ldr	r2, [pc, #112]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2a:	f7fb fa8d 	bl	8003348 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e32:	f7fb fa89 	bl	8003348 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e023      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e44:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0f0      	beq.n	8007e32 <HAL_RCC_OscConfig+0x476>
 8007e50:	e01b      	b.n	8007e8a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e52:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a0f      	ldr	r2, [pc, #60]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5e:	f7fb fa73 	bl	8003348 <HAL_GetTick>
 8007e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e64:	e008      	b.n	8007e78 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e66:	f7fb fa6f 	bl	8003348 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e009      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <HAL_RCC_OscConfig+0x4d8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f0      	bne.n	8007e66 <HAL_RCC_OscConfig+0x4aa>
 8007e84:	e001      	b.n	8007e8a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40023800 	.word	0x40023800
 8007e98:	40007000 	.word	0x40007000

08007e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0ce      	b.n	8008052 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007eb4:	4b69      	ldr	r3, [pc, #420]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d910      	bls.n	8007ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ec2:	4b66      	ldr	r3, [pc, #408]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f023 020f 	bic.w	r2, r3, #15
 8007eca:	4964      	ldr	r1, [pc, #400]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ed2:	4b62      	ldr	r3, [pc, #392]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d001      	beq.n	8007ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e0b6      	b.n	8008052 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d020      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007efc:	4b58      	ldr	r3, [pc, #352]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	4a57      	ldr	r2, [pc, #348]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0308 	and.w	r3, r3, #8
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f14:	4b52      	ldr	r3, [pc, #328]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	4a51      	ldr	r2, [pc, #324]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f20:	4b4f      	ldr	r3, [pc, #316]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	494c      	ldr	r1, [pc, #304]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d040      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d107      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f46:	4b46      	ldr	r3, [pc, #280]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d115      	bne.n	8007f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e07d      	b.n	8008052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d107      	bne.n	8007f6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f5e:	4b40      	ldr	r3, [pc, #256]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d109      	bne.n	8007f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e071      	b.n	8008052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f6e:	4b3c      	ldr	r3, [pc, #240]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e069      	b.n	8008052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f7e:	4b38      	ldr	r3, [pc, #224]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f023 0203 	bic.w	r2, r3, #3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4935      	ldr	r1, [pc, #212]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f90:	f7fb f9da 	bl	8003348 <HAL_GetTick>
 8007f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f96:	e00a      	b.n	8007fae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f98:	f7fb f9d6 	bl	8003348 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e051      	b.n	8008052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fae:	4b2c      	ldr	r3, [pc, #176]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f003 020c 	and.w	r2, r3, #12
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d1eb      	bne.n	8007f98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fc0:	4b26      	ldr	r3, [pc, #152]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d210      	bcs.n	8007ff0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fce:	4b23      	ldr	r3, [pc, #140]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f023 020f 	bic.w	r2, r3, #15
 8007fd6:	4921      	ldr	r1, [pc, #132]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fde:	4b1f      	ldr	r3, [pc, #124]	; (800805c <HAL_RCC_ClockConfig+0x1c0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e030      	b.n	8008052 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d008      	beq.n	800800e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ffc:	4b18      	ldr	r3, [pc, #96]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	4915      	ldr	r1, [pc, #84]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 800800a:	4313      	orrs	r3, r2
 800800c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800801a:	4b11      	ldr	r3, [pc, #68]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	490d      	ldr	r1, [pc, #52]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 800802a:	4313      	orrs	r3, r2
 800802c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800802e:	f000 f81d 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8008032:	4601      	mov	r1, r0
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <HAL_RCC_ClockConfig+0x1c4>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	091b      	lsrs	r3, r3, #4
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	4a09      	ldr	r2, [pc, #36]	; (8008064 <HAL_RCC_ClockConfig+0x1c8>)
 8008040:	5cd3      	ldrb	r3, [r2, r3]
 8008042:	fa21 f303 	lsr.w	r3, r1, r3
 8008046:	4a08      	ldr	r2, [pc, #32]	; (8008068 <HAL_RCC_ClockConfig+0x1cc>)
 8008048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800804a:	2000      	movs	r0, #0
 800804c:	f7fb f82c 	bl	80030a8 <HAL_InitTick>

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40023c00 	.word	0x40023c00
 8008060:	40023800 	.word	0x40023800
 8008064:	080236a8 	.word	0x080236a8
 8008068:	20000098 	.word	0x20000098

0800806c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800806c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	2300      	movs	r3, #0
 800807c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008082:	4b50      	ldr	r3, [pc, #320]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 030c 	and.w	r3, r3, #12
 800808a:	2b04      	cmp	r3, #4
 800808c:	d007      	beq.n	800809e <HAL_RCC_GetSysClockFreq+0x32>
 800808e:	2b08      	cmp	r3, #8
 8008090:	d008      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0x38>
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 808d 	bne.w	80081b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008098:	4b4b      	ldr	r3, [pc, #300]	; (80081c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800809a:	60bb      	str	r3, [r7, #8]
       break;
 800809c:	e08c      	b.n	80081b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800809e:	4b4b      	ldr	r3, [pc, #300]	; (80081cc <HAL_RCC_GetSysClockFreq+0x160>)
 80080a0:	60bb      	str	r3, [r7, #8]
      break;
 80080a2:	e089      	b.n	80081b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080a4:	4b47      	ldr	r3, [pc, #284]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80080ae:	4b45      	ldr	r3, [pc, #276]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d023      	beq.n	8008102 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ba:	4b42      	ldr	r3, [pc, #264]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	099b      	lsrs	r3, r3, #6
 80080c0:	f04f 0400 	mov.w	r4, #0
 80080c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80080c8:	f04f 0200 	mov.w	r2, #0
 80080cc:	ea03 0501 	and.w	r5, r3, r1
 80080d0:	ea04 0602 	and.w	r6, r4, r2
 80080d4:	4a3d      	ldr	r2, [pc, #244]	; (80081cc <HAL_RCC_GetSysClockFreq+0x160>)
 80080d6:	fb02 f106 	mul.w	r1, r2, r6
 80080da:	2200      	movs	r2, #0
 80080dc:	fb02 f205 	mul.w	r2, r2, r5
 80080e0:	440a      	add	r2, r1
 80080e2:	493a      	ldr	r1, [pc, #232]	; (80081cc <HAL_RCC_GetSysClockFreq+0x160>)
 80080e4:	fba5 0101 	umull	r0, r1, r5, r1
 80080e8:	1853      	adds	r3, r2, r1
 80080ea:	4619      	mov	r1, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f04f 0400 	mov.w	r4, #0
 80080f2:	461a      	mov	r2, r3
 80080f4:	4623      	mov	r3, r4
 80080f6:	f7f8 f88b 	bl	8000210 <__aeabi_uldivmod>
 80080fa:	4603      	mov	r3, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e049      	b.n	8008196 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008102:	4b30      	ldr	r3, [pc, #192]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	099b      	lsrs	r3, r3, #6
 8008108:	f04f 0400 	mov.w	r4, #0
 800810c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	ea03 0501 	and.w	r5, r3, r1
 8008118:	ea04 0602 	and.w	r6, r4, r2
 800811c:	4629      	mov	r1, r5
 800811e:	4632      	mov	r2, r6
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	f04f 0400 	mov.w	r4, #0
 8008128:	0154      	lsls	r4, r2, #5
 800812a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800812e:	014b      	lsls	r3, r1, #5
 8008130:	4619      	mov	r1, r3
 8008132:	4622      	mov	r2, r4
 8008134:	1b49      	subs	r1, r1, r5
 8008136:	eb62 0206 	sbc.w	r2, r2, r6
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	f04f 0400 	mov.w	r4, #0
 8008142:	0194      	lsls	r4, r2, #6
 8008144:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008148:	018b      	lsls	r3, r1, #6
 800814a:	1a5b      	subs	r3, r3, r1
 800814c:	eb64 0402 	sbc.w	r4, r4, r2
 8008150:	f04f 0100 	mov.w	r1, #0
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	00e2      	lsls	r2, r4, #3
 800815a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800815e:	00d9      	lsls	r1, r3, #3
 8008160:	460b      	mov	r3, r1
 8008162:	4614      	mov	r4, r2
 8008164:	195b      	adds	r3, r3, r5
 8008166:	eb44 0406 	adc.w	r4, r4, r6
 800816a:	f04f 0100 	mov.w	r1, #0
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	02a2      	lsls	r2, r4, #10
 8008174:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008178:	0299      	lsls	r1, r3, #10
 800817a:	460b      	mov	r3, r1
 800817c:	4614      	mov	r4, r2
 800817e:	4618      	mov	r0, r3
 8008180:	4621      	mov	r1, r4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f04f 0400 	mov.w	r4, #0
 8008188:	461a      	mov	r2, r3
 800818a:	4623      	mov	r3, r4
 800818c:	f7f8 f840 	bl	8000210 <__aeabi_uldivmod>
 8008190:	4603      	mov	r3, r0
 8008192:	460c      	mov	r4, r1
 8008194:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	0c1b      	lsrs	r3, r3, #16
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	3301      	adds	r3, #1
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	60bb      	str	r3, [r7, #8]
      break;
 80081b0:	e002      	b.n	80081b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80081b4:	60bb      	str	r3, [r7, #8]
      break;
 80081b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081b8:	68bb      	ldr	r3, [r7, #8]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40023800 	.word	0x40023800
 80081c8:	00f42400 	.word	0x00f42400
 80081cc:	017d7840 	.word	0x017d7840

080081d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081d4:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80081d6:	681b      	ldr	r3, [r3, #0]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000098 	.word	0x20000098

080081e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081ec:	f7ff fff0 	bl	80081d0 <HAL_RCC_GetHCLKFreq>
 80081f0:	4601      	mov	r1, r0
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	0a9b      	lsrs	r3, r3, #10
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	4a03      	ldr	r2, [pc, #12]	; (800820c <HAL_RCC_GetPCLK1Freq+0x24>)
 80081fe:	5cd3      	ldrb	r3, [r2, r3]
 8008200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008204:	4618      	mov	r0, r3
 8008206:	bd80      	pop	{r7, pc}
 8008208:	40023800 	.word	0x40023800
 800820c:	080236b8 	.word	0x080236b8

08008210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008214:	f7ff ffdc 	bl	80081d0 <HAL_RCC_GetHCLKFreq>
 8008218:	4601      	mov	r1, r0
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	0b5b      	lsrs	r3, r3, #13
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	4a03      	ldr	r2, [pc, #12]	; (8008234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008226:	5cd3      	ldrb	r3, [r2, r3]
 8008228:	fa21 f303 	lsr.w	r3, r1, r3
}
 800822c:	4618      	mov	r0, r3
 800822e:	bd80      	pop	{r7, pc}
 8008230:	40023800 	.word	0x40023800
 8008234:	080236b8 	.word	0x080236b8

08008238 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	220f      	movs	r2, #15
 8008246:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008248:	4b12      	ldr	r3, [pc, #72]	; (8008294 <HAL_RCC_GetClockConfig+0x5c>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f003 0203 	and.w	r2, r3, #3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <HAL_RCC_GetClockConfig+0x5c>)
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <HAL_RCC_GetClockConfig+0x5c>)
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <HAL_RCC_GetClockConfig+0x5c>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	08db      	lsrs	r3, r3, #3
 8008272:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800827a:	4b07      	ldr	r3, [pc, #28]	; (8008298 <HAL_RCC_GetClockConfig+0x60>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 020f 	and.w	r2, r3, #15
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	601a      	str	r2, [r3, #0]
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	40023800 	.word	0x40023800
 8008298:	40023c00 	.word	0x40023c00

0800829c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d012      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082c4:	4b69      	ldr	r3, [pc, #420]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4a68      	ldr	r2, [pc, #416]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082ce:	6093      	str	r3, [r2, #8]
 80082d0:	4b66      	ldr	r3, [pc, #408]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d8:	4964      	ldr	r1, [pc, #400]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d017      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082f6:	4b5d      	ldr	r3, [pc, #372]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008304:	4959      	ldr	r1, [pc, #356]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008314:	d101      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008316:	2301      	movs	r3, #1
 8008318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008322:	2301      	movs	r3, #1
 8008324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d017      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008332:	4b4e      	ldr	r3, [pc, #312]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	494a      	ldr	r1, [pc, #296]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008350:	d101      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800835e:	2301      	movs	r3, #1
 8008360:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800836e:	2301      	movs	r3, #1
 8008370:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 808b 	beq.w	8008496 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008380:	4b3a      	ldr	r3, [pc, #232]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	4a39      	ldr	r2, [pc, #228]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838a:	6413      	str	r3, [r2, #64]	; 0x40
 800838c:	4b37      	ldr	r3, [pc, #220]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008398:	4b35      	ldr	r3, [pc, #212]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a34      	ldr	r2, [pc, #208]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800839e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083a4:	f7fa ffd0 	bl	8003348 <HAL_GetTick>
 80083a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083aa:	e008      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ac:	f7fa ffcc 	bl	8003348 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b64      	cmp	r3, #100	; 0x64
 80083b8:	d901      	bls.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e355      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083be:	4b2c      	ldr	r3, [pc, #176]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0f0      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083ca:	4b28      	ldr	r3, [pc, #160]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d035      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d02e      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083e8:	4b20      	ldr	r3, [pc, #128]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083f2:	4b1e      	ldr	r3, [pc, #120]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f6:	4a1d      	ldr	r2, [pc, #116]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083fe:	4b1b      	ldr	r3, [pc, #108]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008402:	4a1a      	ldr	r2, [pc, #104]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800840a:	4a18      	ldr	r2, [pc, #96]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008410:	4b16      	ldr	r3, [pc, #88]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d114      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841c:	f7fa ff94 	bl	8003348 <HAL_GetTick>
 8008420:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008422:	e00a      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008424:	f7fa ff90 	bl	8003348 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008432:	4293      	cmp	r3, r2
 8008434:	d901      	bls.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e317      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800843a:	4b0c      	ldr	r3, [pc, #48]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ee      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008452:	d111      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008462:	400b      	ands	r3, r1
 8008464:	4901      	ldr	r1, [pc, #4]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008466:	4313      	orrs	r3, r2
 8008468:	608b      	str	r3, [r1, #8]
 800846a:	e00b      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800846c:	40023800 	.word	0x40023800
 8008470:	40007000 	.word	0x40007000
 8008474:	0ffffcff 	.word	0x0ffffcff
 8008478:	4bb0      	ldr	r3, [pc, #704]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	4aaf      	ldr	r2, [pc, #700]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800847e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008482:	6093      	str	r3, [r2, #8]
 8008484:	4bad      	ldr	r3, [pc, #692]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008490:	49aa      	ldr	r1, [pc, #680]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008492:	4313      	orrs	r3, r2
 8008494:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0310 	and.w	r3, r3, #16
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d010      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084a2:	4ba6      	ldr	r3, [pc, #664]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a8:	4aa4      	ldr	r2, [pc, #656]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80084b2:	4ba2      	ldr	r3, [pc, #648]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	499f      	ldr	r1, [pc, #636]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084d0:	4b9a      	ldr	r3, [pc, #616]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084de:	4997      	ldr	r1, [pc, #604]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084f2:	4b92      	ldr	r3, [pc, #584]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008500:	498e      	ldr	r1, [pc, #568]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00a      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008514:	4b89      	ldr	r3, [pc, #548]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008522:	4986      	ldr	r1, [pc, #536]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008524:	4313      	orrs	r3, r2
 8008526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008536:	4b81      	ldr	r3, [pc, #516]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008544:	497d      	ldr	r1, [pc, #500]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008546:	4313      	orrs	r3, r2
 8008548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00a      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008558:	4b78      	ldr	r3, [pc, #480]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800855a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855e:	f023 0203 	bic.w	r2, r3, #3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	4975      	ldr	r1, [pc, #468]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008568:	4313      	orrs	r3, r2
 800856a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800857a:	4b70      	ldr	r3, [pc, #448]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800857c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008580:	f023 020c 	bic.w	r2, r3, #12
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008588:	496c      	ldr	r1, [pc, #432]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800859c:	4b67      	ldr	r3, [pc, #412]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085aa:	4964      	ldr	r1, [pc, #400]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085be:	4b5f      	ldr	r3, [pc, #380]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	495b      	ldr	r1, [pc, #364]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085e0:	4b56      	ldr	r3, [pc, #344]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	4953      	ldr	r1, [pc, #332]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008602:	4b4e      	ldr	r3, [pc, #312]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008608:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008610:	494a      	ldr	r1, [pc, #296]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008624:	4b45      	ldr	r3, [pc, #276]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008632:	4942      	ldr	r1, [pc, #264]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008646:	4b3d      	ldr	r3, [pc, #244]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008654:	4939      	ldr	r1, [pc, #228]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00a      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008668:	4b34      	ldr	r3, [pc, #208]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008676:	4931      	ldr	r1, [pc, #196]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008678:	4313      	orrs	r3, r2
 800867a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d011      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800868a:	4b2c      	ldr	r3, [pc, #176]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800868c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008690:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008698:	4928      	ldr	r1, [pc, #160]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800869a:	4313      	orrs	r3, r2
 800869c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086a8:	d101      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086aa:	2301      	movs	r3, #1
 80086ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0308 	and.w	r3, r3, #8
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086ba:	2301      	movs	r3, #1
 80086bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ca:	4b1c      	ldr	r3, [pc, #112]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d8:	4918      	ldr	r1, [pc, #96]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00b      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086ec:	4b13      	ldr	r3, [pc, #76]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086fc:	490f      	ldr	r1, [pc, #60]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d005      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008712:	f040 80d8 	bne.w	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a08      	ldr	r2, [pc, #32]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800871c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008722:	f7fa fe11 	bl	8003348 <HAL_GetTick>
 8008726:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008728:	e00a      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800872a:	f7fa fe0d 	bl	8003348 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b64      	cmp	r3, #100	; 0x64
 8008736:	d903      	bls.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e196      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800873c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008740:	4b6c      	ldr	r3, [pc, #432]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1ee      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	d021      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	2b00      	cmp	r3, #0
 800875e:	d11d      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008760:	4b64      	ldr	r3, [pc, #400]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008766:	0c1b      	lsrs	r3, r3, #16
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800876e:	4b61      	ldr	r3, [pc, #388]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008774:	0e1b      	lsrs	r3, r3, #24
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	019a      	lsls	r2, r3, #6
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	431a      	orrs	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	061b      	lsls	r3, r3, #24
 800878c:	431a      	orrs	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	071b      	lsls	r3, r3, #28
 8008794:	4957      	ldr	r1, [pc, #348]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008796:	4313      	orrs	r3, r2
 8008798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b0:	d00a      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d02e      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087c6:	d129      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087c8:	4b4a      	ldr	r3, [pc, #296]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ce:	0c1b      	lsrs	r3, r3, #16
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087d6:	4b47      	ldr	r3, [pc, #284]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087dc:	0f1b      	lsrs	r3, r3, #28
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	019a      	lsls	r2, r3, #6
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	061b      	lsls	r3, r3, #24
 80087f6:	431a      	orrs	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	071b      	lsls	r3, r3, #28
 80087fc:	493d      	ldr	r1, [pc, #244]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008804:	4b3b      	ldr	r3, [pc, #236]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800880a:	f023 021f 	bic.w	r2, r3, #31
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	3b01      	subs	r3, #1
 8008814:	4937      	ldr	r1, [pc, #220]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01d      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008828:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800882a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882e:	0e1b      	lsrs	r3, r3, #24
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008836:	4b2f      	ldr	r3, [pc, #188]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800883c:	0f1b      	lsrs	r3, r3, #28
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	019a      	lsls	r2, r3, #6
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	431a      	orrs	r2, r3
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	431a      	orrs	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	071b      	lsls	r3, r3, #28
 800885c:	4925      	ldr	r1, [pc, #148]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800885e:	4313      	orrs	r3, r2
 8008860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d011      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	019a      	lsls	r2, r3, #6
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	431a      	orrs	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	061b      	lsls	r3, r3, #24
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	071b      	lsls	r3, r3, #28
 800888c:	4919      	ldr	r1, [pc, #100]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800888e:	4313      	orrs	r3, r2
 8008890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008894:	4b17      	ldr	r3, [pc, #92]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a16      	ldr	r2, [pc, #88]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800889a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800889e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088a0:	f7fa fd52 	bl	8003348 <HAL_GetTick>
 80088a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088a6:	e008      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088a8:	f7fa fd4e 	bl	8003348 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b64      	cmp	r3, #100	; 0x64
 80088b4:	d901      	bls.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e0d7      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f0      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	f040 80cd 	bne.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a08      	ldr	r2, [pc, #32]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088da:	f7fa fd35 	bl	8003348 <HAL_GetTick>
 80088de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088e0:	e00a      	b.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088e2:	f7fa fd31 	bl	8003348 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b64      	cmp	r3, #100	; 0x64
 80088ee:	d903      	bls.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e0ba      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80088f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088f8:	4b5e      	ldr	r3, [pc, #376]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008904:	d0ed      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008922:	2b00      	cmp	r3, #0
 8008924:	d02e      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d12a      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800892e:	4b51      	ldr	r3, [pc, #324]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008934:	0c1b      	lsrs	r3, r3, #16
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800893c:	4b4d      	ldr	r3, [pc, #308]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008942:	0f1b      	lsrs	r3, r3, #28
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	019a      	lsls	r2, r3, #6
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	061b      	lsls	r3, r3, #24
 800895c:	431a      	orrs	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	071b      	lsls	r3, r3, #28
 8008962:	4944      	ldr	r1, [pc, #272]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008964:	4313      	orrs	r3, r2
 8008966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800896a:	4b42      	ldr	r3, [pc, #264]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800896c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	3b01      	subs	r3, #1
 800897a:	021b      	lsls	r3, r3, #8
 800897c:	493d      	ldr	r1, [pc, #244]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800897e:	4313      	orrs	r3, r2
 8008980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d022      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008998:	d11d      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800899a:	4b36      	ldr	r3, [pc, #216]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800899c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a0:	0e1b      	lsrs	r3, r3, #24
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089a8:	4b32      	ldr	r3, [pc, #200]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ae:	0f1b      	lsrs	r3, r3, #28
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	019a      	lsls	r2, r3, #6
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	041b      	lsls	r3, r3, #16
 80089c2:	431a      	orrs	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	061b      	lsls	r3, r3, #24
 80089c8:	431a      	orrs	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	071b      	lsls	r3, r3, #28
 80089ce:	4929      	ldr	r1, [pc, #164]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d028      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089e2:	4b24      	ldr	r3, [pc, #144]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e8:	0e1b      	lsrs	r3, r3, #24
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089f0:	4b20      	ldr	r3, [pc, #128]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	019a      	lsls	r2, r3, #6
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	041b      	lsls	r3, r3, #16
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	061b      	lsls	r3, r3, #24
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	071b      	lsls	r3, r3, #28
 8008a16:	4917      	ldr	r1, [pc, #92]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a1e:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	4911      	ldr	r1, [pc, #68]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a0e      	ldr	r2, [pc, #56]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a40:	f7fa fc82 	bl	8003348 <HAL_GetTick>
 8008a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a46:	e008      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a48:	f7fa fc7e 	bl	8003348 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b64      	cmp	r3, #100	; 0x64
 8008a54:	d901      	bls.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e007      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a5a:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a66:	d1ef      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40023800 	.word	0x40023800

08008a78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a96:	f040 8086 	bne.w	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008a9a:	4b8d      	ldr	r3, [pc, #564]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aa0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008aa8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab0:	d03e      	beq.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8008ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab6:	d073      	beq.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d000      	beq.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008abc:	e074      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008abe:	4b84      	ldr	r3, [pc, #528]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d108      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008aca:	4b81      	ldr	r3, [pc, #516]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad2:	4a80      	ldr	r2, [pc, #512]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	e007      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008adc:	4b7c      	ldr	r3, [pc, #496]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ae4:	4a7c      	ldr	r2, [pc, #496]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008aec:	4b78      	ldr	r3, [pc, #480]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af2:	0e1b      	lsrs	r3, r3, #24
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008afa:	4b75      	ldr	r3, [pc, #468]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b00:	099b      	lsrs	r3, r3, #6
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	fb02 f203 	mul.w	r2, r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008b14:	4b6e      	ldr	r3, [pc, #440]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b1a:	0a1b      	lsrs	r3, r3, #8
 8008b1c:	f003 031f 	and.w	r3, r3, #31
 8008b20:	3301      	adds	r3, #1
 8008b22:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2c:	617b      	str	r3, [r7, #20]
        break;
 8008b2e:	e03b      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008b30:	4b67      	ldr	r3, [pc, #412]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d108      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008b3c:	4b64      	ldr	r3, [pc, #400]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b44:	4a63      	ldr	r2, [pc, #396]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	e007      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008b4e:	4b60      	ldr	r3, [pc, #384]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b56:	4a60      	ldr	r2, [pc, #384]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008b5e:	4b5c      	ldr	r3, [pc, #368]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b64:	0e1b      	lsrs	r3, r3, #24
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008b6c:	4b58      	ldr	r3, [pc, #352]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b72:	099b      	lsrs	r3, r3, #6
 8008b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	fb02 f203 	mul.w	r2, r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b84:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008b86:	4b52      	ldr	r3, [pc, #328]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b8c:	f003 031f 	and.w	r3, r3, #31
 8008b90:	3301      	adds	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9c:	617b      	str	r3, [r7, #20]
        break;
 8008b9e:	e003      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ba0:	4b4e      	ldr	r3, [pc, #312]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008ba2:	617b      	str	r3, [r7, #20]
        break;
 8008ba4:	e000      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008ba6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bae:	f040 8086 	bne.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008bb2:	4b47      	ldr	r3, [pc, #284]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008bc0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc8:	d03e      	beq.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bce:	d073      	beq.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d000      	beq.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008bd4:	e074      	b.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d108      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008be2:	4b3b      	ldr	r3, [pc, #236]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bea:	4a3a      	ldr	r2, [pc, #232]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	e007      	b.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008bf4:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bfc:	4a36      	ldr	r2, [pc, #216]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c02:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008c04:	4b32      	ldr	r3, [pc, #200]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0a:	0e1b      	lsrs	r3, r3, #24
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008c12:	4b2f      	ldr	r3, [pc, #188]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c18:	099b      	lsrs	r3, r3, #6
 8008c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	fb02 f203 	mul.w	r2, r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008c2c:	4b28      	ldr	r3, [pc, #160]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	f003 031f 	and.w	r3, r3, #31
 8008c38:	3301      	adds	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c44:	617b      	str	r3, [r7, #20]
        break;
 8008c46:	e03b      	b.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008c48:	4b21      	ldr	r3, [pc, #132]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d108      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c54:	4b1e      	ldr	r3, [pc, #120]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c5c:	4a1d      	ldr	r2, [pc, #116]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	e007      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008c66:	4b1a      	ldr	r3, [pc, #104]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c6e:	4a1a      	ldr	r2, [pc, #104]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c74:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008c76:	4b16      	ldr	r3, [pc, #88]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c7c:	0e1b      	lsrs	r3, r3, #24
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008c84:	4b12      	ldr	r3, [pc, #72]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c8a:	099b      	lsrs	r3, r3, #6
 8008c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	fb02 f203 	mul.w	r2, r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ca4:	f003 031f 	and.w	r3, r3, #31
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]
        break;
 8008cb6:	e003      	b.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cb8:	4b08      	ldr	r3, [pc, #32]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008cba:	617b      	str	r3, [r7, #20]
        break;
 8008cbc:	e000      	b.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8008cbe:	bf00      	nop

  return frequency;
 8008cc0:	697b      	ldr	r3, [r7, #20]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	00f42400 	.word	0x00f42400
 8008cd8:	017d7840 	.word	0x017d7840
 8008cdc:	00bb8000 	.word	0x00bb8000

08008ce0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e06b      	b.n	8008dca <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	7f5b      	ldrb	r3, [r3, #29]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d105      	bne.n	8008d08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7f9 feb2 	bl	8002a6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	22ca      	movs	r2, #202	; 0xca
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2253      	movs	r2, #83	; 0x53
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fb00 	bl	8009324 <RTC_EnterInitMode>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d008      	beq.n	8008d3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	22ff      	movs	r2, #255	; 0xff
 8008d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2204      	movs	r2, #4
 8008d36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e046      	b.n	8008dca <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6899      	ldr	r1, [r3, #8]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <HAL_RTC_Init+0xf4>)
 8008d48:	400b      	ands	r3, r1
 8008d4a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6899      	ldr	r1, [r3, #8]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	68d2      	ldr	r2, [r2, #12]
 8008d72:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6919      	ldr	r1, [r3, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	041a      	lsls	r2, r3, #16
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d96:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0208 	bic.w	r2, r2, #8
 8008da6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699a      	ldr	r2, [r3, #24]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	22ff      	movs	r2, #255	; 0xff
 8008dc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
  }
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	ff8fffbf 	.word	0xff8fffbf

08008dd8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008dd8:	b590      	push	{r4, r7, lr}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	7f1b      	ldrb	r3, [r3, #28]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_RTC_SetTime+0x1c>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e0a8      	b.n	8008f46 <HAL_RTC_SetTime+0x16e>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d126      	bne.n	8008e54 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2200      	movs	r2, #0
 8008e18:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 faac 	bl	800937c <RTC_ByteToBcd2>
 8008e24:	4603      	mov	r3, r0
 8008e26:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 faa5 	bl	800937c <RTC_ByteToBcd2>
 8008e32:	4603      	mov	r3, r0
 8008e34:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008e36:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	789b      	ldrb	r3, [r3, #2]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fa9d 	bl	800937c <RTC_ByteToBcd2>
 8008e42:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008e44:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	7b1b      	ldrb	r3, [r3, #12]
 8008e4c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	e018      	b.n	8008e86 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2200      	movs	r2, #0
 8008e66:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008e74:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008e7a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	7b1b      	ldrb	r3, [r3, #12]
 8008e80:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	22ca      	movs	r2, #202	; 0xca
 8008e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2253      	movs	r2, #83	; 0x53
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 fa44 	bl	8009324 <RTC_EnterInitMode>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	22ff      	movs	r2, #255	; 0xff
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2204      	movs	r2, #4
 8008eae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e045      	b.n	8008f46 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	6979      	ldr	r1, [r7, #20]
 8008ec0:	4b23      	ldr	r3, [pc, #140]	; (8008f50 <HAL_RTC_SetTime+0x178>)
 8008ec2:	400b      	ands	r3, r1
 8008ec4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ed4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6899      	ldr	r1, [r3, #8]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008efc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d111      	bne.n	8008f30 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 f9e1 	bl	80092d4 <HAL_RTC_WaitForSynchro>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00b      	beq.n	8008f30 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	22ff      	movs	r2, #255	; 0xff
 8008f1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2204      	movs	r2, #4
 8008f24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e00a      	b.n	8008f46 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	22ff      	movs	r2, #255	; 0xff
 8008f36:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008f44:	2300      	movs	r3, #0
  }
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd90      	pop	{r4, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	007f7f7f 	.word	0x007f7f7f

08008f54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f54:	b590      	push	{r4, r7, lr}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	7f1b      	ldrb	r3, [r3, #28]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_RTC_SetDate+0x1c>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e092      	b.n	8009096 <HAL_RTC_SetDate+0x142>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2201      	movs	r2, #1
 8008f74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10e      	bne.n	8008fa0 <HAL_RTC_SetDate+0x4c>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	f003 0310 	and.w	r3, r3, #16
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d008      	beq.n	8008fa0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	f023 0310 	bic.w	r3, r3, #16
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	330a      	adds	r3, #10
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d11c      	bne.n	8008fe0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	78db      	ldrb	r3, [r3, #3]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f9e6 	bl	800937c <RTC_ByteToBcd2>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 f9df 	bl	800937c <RTC_ByteToBcd2>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008fc2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	789b      	ldrb	r3, [r3, #2]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f9d7 	bl	800937c <RTC_ByteToBcd2>
 8008fce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008fd0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	e00e      	b.n	8008ffe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	78db      	ldrb	r3, [r3, #3]
 8008fe4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	785b      	ldrb	r3, [r3, #1]
 8008fea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008fec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008ff2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	22ca      	movs	r2, #202	; 0xca
 8009004:	625a      	str	r2, [r3, #36]	; 0x24
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2253      	movs	r2, #83	; 0x53
 800900c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f988 	bl	8009324 <RTC_EnterInitMode>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	22ff      	movs	r2, #255	; 0xff
 8009020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2204      	movs	r2, #4
 8009026:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e031      	b.n	8009096 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	6979      	ldr	r1, [r7, #20]
 8009038:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <HAL_RTC_SetDate+0x14c>)
 800903a:	400b      	ands	r3, r1
 800903c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800904c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b00      	cmp	r3, #0
 800905a:	d111      	bne.n	8009080 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f939 	bl	80092d4 <HAL_RTC_WaitForSynchro>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	22ff      	movs	r2, #255	; 0xff
 800906e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2204      	movs	r2, #4
 8009074:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e00a      	b.n	8009096 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	22ff      	movs	r2, #255	; 0xff
 8009086:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009094:	2300      	movs	r3, #0
  }
}
 8009096:	4618      	mov	r0, r3
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	bd90      	pop	{r4, r7, pc}
 800909e:	bf00      	nop
 80090a0:	00ffff3f 	.word	0x00ffff3f

080090a4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b089      	sub	sp, #36	; 0x24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	7f1b      	ldrb	r3, [r3, #28]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d101      	bne.n	80090c8 <HAL_RTC_SetAlarm+0x24>
 80090c4:	2302      	movs	r3, #2
 80090c6:	e101      	b.n	80092cc <HAL_RTC_SetAlarm+0x228>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2201      	movs	r2, #1
 80090cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2202      	movs	r2, #2
 80090d2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d137      	bne.n	800914a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2200      	movs	r2, #0
 80090ec:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f942 	bl	800937c <RTC_ByteToBcd2>
 80090f8:	4603      	mov	r3, r0
 80090fa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f93b 	bl	800937c <RTC_ByteToBcd2>
 8009106:	4603      	mov	r3, r0
 8009108:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800910a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	789b      	ldrb	r3, [r3, #2]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f933 	bl	800937c <RTC_ByteToBcd2>
 8009116:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009118:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	7b1b      	ldrb	r3, [r3, #12]
 8009120:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009122:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f925 	bl	800937c <RTC_ByteToBcd2>
 8009132:	4603      	mov	r3, r0
 8009134:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009136:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800913e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009144:	4313      	orrs	r3, r2
 8009146:	61fb      	str	r3, [r7, #28]
 8009148:	e023      	b.n	8009192 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	785b      	ldrb	r3, [r3, #1]
 8009168:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800916a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009170:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	7b1b      	ldrb	r3, [r3, #12]
 8009176:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009178:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009180:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009182:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009188:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800918e:	4313      	orrs	r3, r2
 8009190:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	22ca      	movs	r2, #202	; 0xca
 80091a4:	625a      	str	r2, [r3, #36]	; 0x24
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2253      	movs	r2, #83	; 0x53
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b6:	d13f      	bne.n	8009238 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689a      	ldr	r2, [r3, #8]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091c6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091d6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091d8:	f7fa f8b6 	bl	8003348 <HAL_GetTick>
 80091dc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80091de:	e013      	b.n	8009208 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091e0:	f7fa f8b2 	bl	8003348 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091ee:	d90b      	bls.n	8009208 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	22ff      	movs	r2, #255	; 0xff
 80091f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2203      	movs	r2, #3
 80091fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e061      	b.n	80092cc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0e4      	beq.n	80091e0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009234:	609a      	str	r2, [r3, #8]
 8009236:	e03e      	b.n	80092b6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009246:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689a      	ldr	r2, [r3, #8]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009256:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009258:	f7fa f876 	bl	8003348 <HAL_GetTick>
 800925c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800925e:	e013      	b.n	8009288 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009260:	f7fa f872 	bl	8003348 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800926e:	d90b      	bls.n	8009288 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2203      	movs	r2, #3
 800927c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e021      	b.n	80092cc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0e4      	beq.n	8009260 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	22ff      	movs	r2, #255	; 0xff
 80092bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3724      	adds	r7, #36	; 0x24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd90      	pop	{r4, r7, pc}

080092d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68da      	ldr	r2, [r3, #12]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80092ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092f0:	f7fa f82a 	bl	8003348 <HAL_GetTick>
 80092f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80092f6:	e009      	b.n	800930c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092f8:	f7fa f826 	bl	8003348 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009306:	d901      	bls.n	800930c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e007      	b.n	800931c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0ee      	beq.n	80092f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	d119      	bne.n	8009372 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009348:	f7f9 fffe 	bl	8003348 <HAL_GetTick>
 800934c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800934e:	e009      	b.n	8009364 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009350:	f7f9 fffa 	bl	8003348 <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800935e:	d901      	bls.n	8009364 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e007      	b.n	8009374 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0ee      	beq.n	8009350 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800938a:	e005      	b.n	8009398 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3301      	adds	r3, #1
 8009390:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	3b0a      	subs	r3, #10
 8009396:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	2b09      	cmp	r3, #9
 800939c:	d8f6      	bhi.n	800938c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	b2db      	uxtb	r3, r3
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	7f1b      	ldrb	r3, [r3, #28]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e03e      	b.n	8009452 <HAL_RTCEx_SetTimeStamp+0x9a>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2201      	movs	r2, #1
 80093d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2202      	movs	r2, #2
 80093de:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	4b1e      	ldr	r3, [pc, #120]	; (8009460 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80093e8:	4013      	ands	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	22ca      	movs	r2, #202	; 0xca
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2253      	movs	r2, #83	; 0x53
 8009402:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f022 0206 	bic.w	r2, r2, #6
 8009412:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	430a      	orrs	r2, r1
 8009422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800943a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	22ff      	movs	r2, #255	; 0xff
 8009442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	fffff7f7 	.word	0xfffff7f7

08009464 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e149      	b.n	8009716 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d106      	bne.n	800949c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7f9 fd9c 	bl	8002fd4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f94f 	bl	8009748 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d007      	beq.n	80094c2 <HAL_SAI_Init+0x5e>
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d302      	bcc.n	80094bc <HAL_SAI_Init+0x58>
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d006      	beq.n	80094c8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80094ba:	e008      	b.n	80094ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
      break;
 80094c0:	e005      	b.n	80094ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80094c2:	2310      	movs	r3, #16
 80094c4:	61fb      	str	r3, [r7, #28]
      break;
 80094c6:	e002      	b.n	80094ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80094c8:	2320      	movs	r3, #32
 80094ca:	61fb      	str	r3, [r7, #28]
      break;
 80094cc:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d81d      	bhi.n	8009512 <HAL_SAI_Init+0xae>
 80094d6:	a201      	add	r2, pc, #4	; (adr r2, 80094dc <HAL_SAI_Init+0x78>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	080094ed 	.word	0x080094ed
 80094e0:	080094f3 	.word	0x080094f3
 80094e4:	080094fb 	.word	0x080094fb
 80094e8:	08009503 	.word	0x08009503
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]
      }
      break;
 80094f0:	e010      	b.n	8009514 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80094f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094f6:	617b      	str	r3, [r7, #20]
      }
      break;
 80094f8:	e00c      	b.n	8009514 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80094fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094fe:	617b      	str	r3, [r7, #20]
      }
      break;
 8009500:	e008      	b.n	8009514 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8009502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009506:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	f043 0301 	orr.w	r3, r3, #1
 800950e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8009510:	e000      	b.n	8009514 <HAL_SAI_Init+0xb0>
  default:
    break;
 8009512:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a81      	ldr	r2, [pc, #516]	; (8009720 <HAL_SAI_Init+0x2bc>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d004      	beq.n	8009528 <HAL_SAI_Init+0xc4>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a80      	ldr	r2, [pc, #512]	; (8009724 <HAL_SAI_Init+0x2c0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d103      	bne.n	8009530 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8009528:	4a7f      	ldr	r2, [pc, #508]	; (8009728 <HAL_SAI_Init+0x2c4>)
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	e002      	b.n	8009536 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009530:	4a7e      	ldr	r2, [pc, #504]	; (800972c <HAL_SAI_Init+0x2c8>)
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d043      	beq.n	80095c6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a76      	ldr	r2, [pc, #472]	; (8009720 <HAL_SAI_Init+0x2bc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d004      	beq.n	8009556 <HAL_SAI_Init+0xf2>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a74      	ldr	r2, [pc, #464]	; (8009724 <HAL_SAI_Init+0x2c0>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d104      	bne.n	8009560 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009556:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800955a:	f7ff fa8d 	bl	8008a78 <HAL_RCCEx_GetPeriphCLKFreq>
 800955e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a72      	ldr	r2, [pc, #456]	; (8009730 <HAL_SAI_Init+0x2cc>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d004      	beq.n	8009574 <HAL_SAI_Init+0x110>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a71      	ldr	r2, [pc, #452]	; (8009734 <HAL_SAI_Init+0x2d0>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d104      	bne.n	800957e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009574:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009578:	f7ff fa7e 	bl	8008a78 <HAL_RCCEx_GetPeriphCLKFreq>
 800957c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	025b      	lsls	r3, r3, #9
 8009590:	fbb2 f3f3 	udiv	r3, r2, r3
 8009594:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4a67      	ldr	r2, [pc, #412]	; (8009738 <HAL_SAI_Init+0x2d4>)
 800959a:	fba2 2303 	umull	r2, r3, r2, r3
 800959e:	08da      	lsrs	r2, r3, #3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80095a4:	68f9      	ldr	r1, [r7, #12]
 80095a6:	4b64      	ldr	r3, [pc, #400]	; (8009738 <HAL_SAI_Init+0x2d4>)
 80095a8:	fba3 2301 	umull	r2, r3, r3, r1
 80095ac:	08da      	lsrs	r2, r3, #3
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	1aca      	subs	r2, r1, r3
 80095b8:	2a08      	cmp	r2, #8
 80095ba:	d904      	bls.n	80095c6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <HAL_SAI_Init+0x172>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d109      	bne.n	80095ea <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_SAI_Init+0x17e>
 80095de:	2300      	movs	r3, #0
 80095e0:	e001      	b.n	80095e6 <HAL_SAI_Init+0x182>
 80095e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095e6:	61bb      	str	r3, [r7, #24]
 80095e8:	e008      	b.n	80095fc <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d102      	bne.n	80095f8 <HAL_SAI_Init+0x194>
 80095f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095f6:	e000      	b.n	80095fa <HAL_SAI_Init+0x196>
 80095f8:	2300      	movs	r3, #0
 80095fa:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6819      	ldr	r1, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b4d      	ldr	r3, [pc, #308]	; (800973c <HAL_SAI_Init+0x2d8>)
 8009608:	400b      	ands	r3, r1
 800960a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6819      	ldr	r1, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009620:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	431a      	orrs	r2, r3
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8009634:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009640:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	051b      	lsls	r3, r3, #20
 8009648:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6859      	ldr	r1, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	4b38      	ldr	r3, [pc, #224]	; (8009740 <HAL_SAI_Init+0x2dc>)
 800965e:	400b      	ands	r3, r1
 8009660:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6859      	ldr	r1, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699a      	ldr	r2, [r3, #24]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6899      	ldr	r1, [r3, #8]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	4b2e      	ldr	r3, [pc, #184]	; (8009744 <HAL_SAI_Init+0x2e0>)
 800968c:	400b      	ands	r3, r1
 800968e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6899      	ldr	r1, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80096a0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80096a6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80096ac:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b2:	3b01      	subs	r3, #1
 80096b4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80096b6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68d9      	ldr	r1, [r3, #12]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	f24f 0320 	movw	r3, #61472	; 0xf020
 80096ce:	400b      	ands	r3, r1
 80096d0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68d9      	ldr	r1, [r3, #12]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	431a      	orrs	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ee:	3b01      	subs	r3, #1
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3720      	adds	r7, #32
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40015804 	.word	0x40015804
 8009724:	40015824 	.word	0x40015824
 8009728:	40015800 	.word	0x40015800
 800972c:	40015c00 	.word	0x40015c00
 8009730:	40015c04 	.word	0x40015c04
 8009734:	40015c24 	.word	0x40015c24
 8009738:	cccccccd 	.word	0xcccccccd
 800973c:	ff05c010 	.word	0xff05c010
 8009740:	ffff1ff0 	.word	0xffff1ff0
 8009744:	fff88000 	.word	0xfff88000

08009748 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009748:	b490      	push	{r4, r7}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8009750:	4b16      	ldr	r3, [pc, #88]	; (80097ac <SAI_Disable+0x64>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a16      	ldr	r2, [pc, #88]	; (80097b0 <SAI_Disable+0x68>)
 8009756:	fba2 2303 	umull	r2, r3, r2, r3
 800975a:	0b1b      	lsrs	r3, r3, #12
 800975c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009770:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009772:	4623      	mov	r3, r4
 8009774:	1e5c      	subs	r4, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10a      	bne.n	8009790 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009780:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	73fb      	strb	r3, [r7, #15]
      break;
 800978e:	e006      	b.n	800979e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e9      	bne.n	8009772 <SAI_Disable+0x2a>

  return status;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc90      	pop	{r4, r7}
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	20000098 	.word	0x20000098
 80097b0:	95cbec1b 	.word	0x95cbec1b

080097b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e01d      	b.n	8009802 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d105      	bne.n	80097de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7f9 f961 	bl	8002aa0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2203      	movs	r2, #3
 80097e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f80f 	bl	800980a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800980a:	b5b0      	push	{r4, r5, r7, lr}
 800980c:	b08e      	sub	sp, #56	; 0x38
 800980e:	af04      	add	r7, sp, #16
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009812:	2300      	movs	r3, #0
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800981a:	2300      	movs	r3, #0
 800981c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009822:	2300      	movs	r3, #0
 8009824:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009826:	2300      	movs	r3, #0
 8009828:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800982a:	2376      	movs	r3, #118	; 0x76
 800982c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681d      	ldr	r5, [r3, #0]
 8009832:	466c      	mov	r4, sp
 8009834:	f107 0318 	add.w	r3, r7, #24
 8009838:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800983c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009840:	f107 030c 	add.w	r3, r7, #12
 8009844:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009846:	4628      	mov	r0, r5
 8009848:	f002 ff76 	bl	800c738 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800985a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f002 ffa2 	bl	800c7aa <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009874:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8009876:	2002      	movs	r0, #2
 8009878:	f7f9 fd72 	bl	8003360 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fe24 	bl	800a4ca <SD_PowerON>
 8009882:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	431a      	orrs	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e013      	b.n	80098ca <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fd48 	bl	800a338 <SD_InitCard>
 80098a8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00b      	beq.n	80098c8 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	431a      	orrs	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e000      	b.n	80098ca <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3728      	adds	r7, #40	; 0x28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080098d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08c      	sub	sp, #48	; 0x30
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d107      	bne.n	80098fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e0b0      	b.n	8009a5e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b01      	cmp	r3, #1
 8009906:	f040 80a9 	bne.w	8009a5c <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	441a      	add	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800991a:	429a      	cmp	r2, r3
 800991c:	d907      	bls.n	800992e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e097      	b.n	8009a5e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2203      	movs	r2, #3
 8009932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2200      	movs	r2, #0
 800993c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800994c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009952:	4a45      	ldr	r2, [pc, #276]	; (8009a68 <HAL_SD_ReadBlocks_DMA+0x194>)
 8009954:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995a:	4a44      	ldr	r2, [pc, #272]	; (8009a6c <HAL_SD_ReadBlocks_DMA+0x198>)
 800995c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009962:	2200      	movs	r2, #0
 8009964:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3380      	adds	r3, #128	; 0x80
 8009970:	4619      	mov	r1, r3
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	025b      	lsls	r3, r3, #9
 8009978:	089b      	lsrs	r3, r3, #2
 800997a:	f7fa f9f3 	bl	8003d64 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0208 	orr.w	r2, r2, #8
 800998c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009992:	2b01      	cmp	r3, #1
 8009994:	d002      	beq.n	800999c <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	025b      	lsls	r3, r3, #9
 800999a:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	025b      	lsls	r3, r3, #9
 80099a6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80099a8:	2390      	movs	r3, #144	; 0x90
 80099aa:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099ac:	2302      	movs	r3, #2
 80099ae:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80099b4:	2301      	movs	r3, #1
 80099b6:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f107 0214 	add.w	r2, r7, #20
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 ff5a 	bl	800c87c <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099d0:	4618      	mov	r0, r3
 80099d2:	f002 ff7f 	bl	800c8d4 <SDMMC_CmdBlockLength>
 80099d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d010      	beq.n	8009a00 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	431a      	orrs	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e02e      	b.n	8009a5e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d90a      	bls.n	8009a1c <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2282      	movs	r2, #130	; 0x82
 8009a0a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f002 ffa6 	bl	800c964 <SDMMC_CmdReadMultiBlock>
 8009a18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a1a:	e009      	b.n	8009a30 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2281      	movs	r2, #129	; 0x81
 8009a20:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f002 ff77 	bl	800c91c <SDMMC_CmdReadSingleBlock>
 8009a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d010      	beq.n	8009a58 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a46:	431a      	orrs	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e002      	b.n	8009a5e <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e000      	b.n	8009a5e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009a5c:	2302      	movs	r3, #2
  }
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3730      	adds	r7, #48	; 0x30
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0800a235 	.word	0x0800a235
 8009a6c:	0800a2a3 	.word	0x0800a2a3

08009a70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08c      	sub	sp, #48	; 0x30
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d107      	bne.n	8009a98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e0b0      	b.n	8009bfa <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	f040 80a9 	bne.w	8009bf8 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	441a      	add	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d907      	bls.n	8009aca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e097      	b.n	8009bfa <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2203      	movs	r2, #3
 8009ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 021a 	orr.w	r2, r2, #26
 8009ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	4a45      	ldr	r2, [pc, #276]	; (8009c04 <HAL_SD_WriteBlocks_DMA+0x194>)
 8009af0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af6:	4a44      	ldr	r2, [pc, #272]	; (8009c08 <HAL_SD_WriteBlocks_DMA+0x198>)
 8009af8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	2200      	movs	r2, #0
 8009b00:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d002      	beq.n	8009b10 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	025b      	lsls	r3, r3, #9
 8009b0e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f002 fedb 	bl	800c8d4 <SDMMC_CmdBlockLength>
 8009b1e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d010      	beq.n	8009b48 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	431a      	orrs	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e058      	b.n	8009bfa <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d90a      	bls.n	8009b64 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	22a0      	movs	r2, #160	; 0xa0
 8009b52:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f002 ff4a 	bl	800c9f4 <SDMMC_CmdWriteMultiBlock>
 8009b60:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009b62:	e009      	b.n	8009b78 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2290      	movs	r2, #144	; 0x90
 8009b68:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f002 ff1b 	bl	800c9ac <SDMMC_CmdWriteSingleBlock>
 8009b76:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d010      	beq.n	8009ba0 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e02c      	b.n	8009bfa <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f042 0208 	orr.w	r2, r2, #8
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009bb4:	68b9      	ldr	r1, [r7, #8]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3380      	adds	r3, #128	; 0x80
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	025b      	lsls	r3, r3, #9
 8009bc2:	089b      	lsrs	r3, r3, #2
 8009bc4:	f7fa f8ce 	bl	8003d64 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bcc:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	025b      	lsls	r3, r3, #9
 8009bd2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009bd4:	2390      	movs	r3, #144	; 0x90
 8009bd6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f107 0214 	add.w	r2, r7, #20
 8009bec:	4611      	mov	r1, r2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f002 fe44 	bl	800c87c <SDMMC_ConfigData>
    
    return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e000      	b.n	8009bfa <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009bf8:	2302      	movs	r3, #2
  }
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3730      	adds	r7, #48	; 0x30
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	0800a20b 	.word	0x0800a20b
 8009c08:	0800a2a3 	.word	0x0800a2a3

08009c0c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c32:	0e1b      	lsrs	r3, r3, #24
 8009c34:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	099b      	lsrs	r3, r3, #6
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	089b      	lsrs	r3, r3, #2
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c68:	0c1b      	lsrs	r3, r3, #16
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c9c:	0e1b      	lsrs	r3, r3, #24
 8009c9e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	011b      	lsls	r3, r3, #4
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cb0:	0c1b      	lsrs	r3, r3, #16
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	88db      	ldrh	r3, [r3, #6]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	091b      	lsrs	r3, r3, #4
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 030f 	and.w	r3, r3, #15
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ce2:	0a1b      	lsrs	r3, r3, #8
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	09db      	lsrs	r3, r3, #7
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	099b      	lsrs	r3, r3, #6
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	091b      	lsrs	r3, r3, #4
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 8086 	bne.w	8009e44 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	029b      	lsls	r3, r3, #10
 8009d3c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	691a      	ldr	r2, [r3, #16]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	431a      	orrs	r2, r3
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5e:	0e1b      	lsrs	r3, r3, #24
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	099b      	lsrs	r3, r3, #6
 8009d6c:	f003 0303 	and.w	r3, r3, #3
 8009d70:	431a      	orrs	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	08db      	lsrs	r3, r3, #3
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	f003 0307 	and.w	r3, r3, #7
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	095b      	lsrs	r3, r3, #5
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0307 	and.w	r3, r3, #7
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	089b      	lsrs	r3, r3, #2
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f003 0306 	and.w	r3, r3, #6
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd4:	0a1b      	lsrs	r3, r3, #8
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	7e1b      	ldrb	r3, [r3, #24]
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	09db      	lsrs	r3, r3, #7
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	7e1b      	ldrb	r3, [r3, #24]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	3302      	adds	r3, #2
 8009e06:	2201      	movs	r2, #1
 8009e08:	409a      	lsls	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0e:	fb02 f203 	mul.w	r2, r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	7a1b      	ldrb	r3, [r3, #8]
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2301      	movs	r3, #1
 8009e20:	4093      	lsls	r3, r2
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009e30:	0a52      	lsrs	r2, r2, #9
 8009e32:	fb02 f203 	mul.w	r2, r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e40:	661a      	str	r2, [r3, #96]	; 0x60
 8009e42:	e04d      	b.n	8009ee0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d138      	bne.n	8009ebe <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e64:	0e1b      	lsrs	r3, r3, #24
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	691a      	ldr	r2, [r3, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	431a      	orrs	r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7c:	0c1b      	lsrs	r3, r3, #16
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	691a      	ldr	r2, [r3, #16]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e92:	0a1b      	lsrs	r3, r3, #8
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	029a      	lsls	r2, r3, #10
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	655a      	str	r2, [r3, #84]	; 0x54
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	661a      	str	r2, [r3, #96]	; 0x60
 8009ebc:	e010      	b.n	8009ee0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009ec6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e0c1      	b.n	800a064 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	099b      	lsrs	r3, r3, #6
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	7e9b      	ldrb	r3, [r3, #26]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	09db      	lsrs	r3, r3, #7
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f36:	0e1b      	lsrs	r3, r3, #24
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	09db      	lsrs	r3, r3, #7
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	095b      	lsrs	r3, r3, #5
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	089b      	lsrs	r3, r3, #2
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	f003 030c 	and.w	r3, r3, #12
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f82:	0c1b      	lsrs	r3, r3, #16
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	7fdb      	ldrb	r3, [r3, #31]
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	099b      	lsrs	r3, r3, #6
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd0:	0a1b      	lsrs	r3, r3, #8
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	09db      	lsrs	r3, r3, #7
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	099b      	lsrs	r3, r3, #6
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	095b      	lsrs	r3, r3, #5
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	b2da      	uxtb	r2, r3
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	091b      	lsrs	r3, r3, #4
 800a010:	b2db      	uxtb	r3, r3
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	b2da      	uxtb	r2, r3
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	089b      	lsrs	r3, r3, #2
 800a022:	b2db      	uxtb	r3, r3
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 0303 	and.w	r3, r3, #3
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a044:	b2db      	uxtb	r3, r3
 800a046:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a052:	b2da      	uxtb	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a0c8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ca:	b08e      	sub	sp, #56	; 0x38
 800a0cc:	af04      	add	r7, sp, #16
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2203      	movs	r2, #3
 800a0da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d02e      	beq.n	800a144 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ec:	d106      	bne.n	800a0fc <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38
 800a0fa:	e029      	b.n	800a150 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a102:	d10a      	bne.n	800a11a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fab2 	bl	800a66e <SD_WideBus_Enable>
 800a10a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	639a      	str	r2, [r3, #56]	; 0x38
 800a118:	e01a      	b.n	800a150 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 faf1 	bl	800a708 <SD_WideBus_Disable>
 800a126:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	431a      	orrs	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	639a      	str	r2, [r3, #56]	; 0x38
 800a134:	e00c      	b.n	800a150 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	639a      	str	r2, [r3, #56]	; 0x38
 800a142:	e005      	b.n	800a150 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a148:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00a      	beq.n	800a16e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a160:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e024      	b.n	800a1b8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681d      	ldr	r5, [r3, #0]
 800a194:	466c      	mov	r4, sp
 800a196:	f107 0318 	add.w	r3, r7, #24
 800a19a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a19e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f002 fac5 	bl	800c738 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3728      	adds	r7, #40	; 0x28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bdb0      	pop	{r4, r5, r7, pc}

0800a1c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800a1c8:	2304      	movs	r3, #4
 800a1ca:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800a1d4:	f107 030c 	add.w	r3, r7, #12
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 fa1d 	bl	800a61a <SD_SendStatus>
 800a1e0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	0a5b      	lsrs	r3, r3, #9
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	f003 030f 	and.w	r3, r3, #15
 800a1fe:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800a200:	7dfb      	ldrb	r3, [r7, #23]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a216:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a226:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a228:	bf00      	nop
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a242:	2300      	movs	r3, #0
 800a244:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	2b82      	cmp	r3, #130	; 0x82
 800a24c:	d111      	bne.n	800a272 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	f002 fbf2 	bl	800ca3c <SDMMC_CmdStopTransfer>
 800a258:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d008      	beq.n	800a272 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	431a      	orrs	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f7ff fccd 	bl	8009c0c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f022 0208 	bic.w	r2, r2, #8
 800a280:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a28a:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f003 ff61 	bl	800e15c <HAL_SD_RxCpltCallback>
#endif
}
 800a29a:	bf00      	nop
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7f9 fdb7 	bl	8003e24 <HAL_DMA_GetError>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d039      	beq.n	800a330 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d004      	beq.n	800a2d0 <SD_DMAError+0x2e>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d12c      	bne.n	800a32a <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a2d8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a2e8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff ff62 	bl	800a1c0 <HAL_SD_GetCardState>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	2b06      	cmp	r3, #6
 800a304:	d002      	beq.n	800a30c <SD_DMAError+0x6a>
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	2b05      	cmp	r3, #5
 800a30a:	d10a      	bne.n	800a322 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4618      	mov	r0, r3
 800a312:	f002 fb93 	bl	800ca3c <SDMMC_CmdStopTransfer>
 800a316:	4602      	mov	r2, r0
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31c:	431a      	orrs	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7ff fc6e 	bl	8009c0c <HAL_SD_ErrorCallback>
#endif
  }
}
 800a330:	bf00      	nop
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a338:	b5b0      	push	{r4, r5, r7, lr}
 800a33a:	b094      	sub	sp, #80	; 0x50
 800a33c:	af04      	add	r7, sp, #16
 800a33e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a340:	2300      	movs	r3, #0
 800a342:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800a344:	2301      	movs	r3, #1
 800a346:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f002 fa3a 	bl	800c7c6 <SDMMC_GetPowerState>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a358:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a35c:	e0b1      	b.n	800a4c2 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a362:	2b03      	cmp	r3, #3
 800a364:	d02f      	beq.n	800a3c6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f002 fc81 	bl	800cc72 <SDMMC_CmdSendCID>
 800a370:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <SD_InitCard+0x44>
    {
      return errorstate;
 800a378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37a:	e0a2      	b.n	800a4c2 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f002 fa65 	bl	800c852 <SDMMC_GetResponse>
 800a388:	4602      	mov	r2, r0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2104      	movs	r1, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f002 fa5c 	bl	800c852 <SDMMC_GetResponse>
 800a39a:	4602      	mov	r2, r0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2108      	movs	r1, #8
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f002 fa53 	bl	800c852 <SDMMC_GetResponse>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	210c      	movs	r1, #12
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f002 fa4a 	bl	800c852 <SDMMC_GetResponse>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d00d      	beq.n	800a3ea <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f107 020e 	add.w	r2, r7, #14
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f002 fc8b 	bl	800ccf4 <SDMMC_CmdSetRelAdd>
 800a3de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <SD_InitCard+0xb2>
    {
      return errorstate;
 800a3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e8:	e06b      	b.n	800a4c2 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d036      	beq.n	800a460 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a3f2:	89fb      	ldrh	r3, [r7, #14]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f002 fc53 	bl	800ccb2 <SDMMC_CmdSendCSD>
 800a40c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <SD_InitCard+0xe0>
    {
      return errorstate;
 800a414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a416:	e054      	b.n	800a4c2 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f002 fa17 	bl	800c852 <SDMMC_GetResponse>
 800a424:	4602      	mov	r2, r0
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2104      	movs	r1, #4
 800a430:	4618      	mov	r0, r3
 800a432:	f002 fa0e 	bl	800c852 <SDMMC_GetResponse>
 800a436:	4602      	mov	r2, r0
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2108      	movs	r1, #8
 800a442:	4618      	mov	r0, r3
 800a444:	f002 fa05 	bl	800c852 <SDMMC_GetResponse>
 800a448:	4602      	mov	r2, r0
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	210c      	movs	r1, #12
 800a454:	4618      	mov	r0, r3
 800a456:	f002 f9fc 	bl	800c852 <SDMMC_GetResponse>
 800a45a:	4602      	mov	r2, r0
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2104      	movs	r1, #4
 800a466:	4618      	mov	r0, r3
 800a468:	f002 f9f3 	bl	800c852 <SDMMC_GetResponse>
 800a46c:	4603      	mov	r3, r0
 800a46e:	0d1a      	lsrs	r2, r3, #20
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800a474:	f107 0310 	add.w	r3, r7, #16
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff fbd0 	bl	8009c20 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a488:	041b      	lsls	r3, r3, #16
 800a48a:	f04f 0400 	mov.w	r4, #0
 800a48e:	461a      	mov	r2, r3
 800a490:	4623      	mov	r3, r4
 800a492:	4608      	mov	r0, r1
 800a494:	f002 faf6 	bl	800ca84 <SDMMC_CmdSelDesel>
 800a498:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <SD_InitCard+0x16c>
  {
    return errorstate;
 800a4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a2:	e00e      	b.n	800a4c2 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681d      	ldr	r5, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	466c      	mov	r4, sp
 800a4ac:	f103 0210 	add.w	r2, r3, #16
 800a4b0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a4b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f002 f93c 	bl	800c738 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3740      	adds	r7, #64	; 0x40
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bdb0      	pop	{r4, r5, r7, pc}

0800a4ca <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b086      	sub	sp, #24
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f002 faf1 	bl	800cace <SDMMC_CmdGoIdleState>
 800a4ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <SD_PowerON+0x2e>
  {
    return errorstate;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	e08c      	b.n	800a612 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f002 fb06 	bl	800cb0e <SDMMC_CmdOperCond>
 800a502:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d03d      	beq.n	800a586 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800a510:	e032      	b.n	800a578 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	1c5a      	adds	r2, r3, #1
 800a516:	60ba      	str	r2, [r7, #8]
 800a518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d102      	bne.n	800a526 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a524:	e075      	b.n	800a612 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2100      	movs	r1, #0
 800a52c:	4618      	mov	r0, r3
 800a52e:	f002 fb0f 	bl	800cb50 <SDMMC_CmdAppCommand>
 800a532:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a53a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a53e:	e068      	b.n	800a612 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f002 fb26 	bl	800cb98 <SDMMC_CmdAppOperCommand>
 800a54c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a554:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a558:	e05b      	b.n	800a612 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2100      	movs	r1, #0
 800a560:	4618      	mov	r0, r3
 800a562:	f002 f976 	bl	800c852 <SDMMC_GetResponse>
 800a566:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	0fdb      	lsrs	r3, r3, #31
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	bf0c      	ite	eq
 800a570:	2301      	moveq	r3, #1
 800a572:	2300      	movne	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0c9      	beq.n	800a512 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	645a      	str	r2, [r3, #68]	; 0x44
 800a584:	e044      	b.n	800a610 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800a58c:	e031      	b.n	800a5f2 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	60ba      	str	r2, [r7, #8]
 800a594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a598:	4293      	cmp	r3, r2
 800a59a:	d102      	bne.n	800a5a2 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a59c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5a0:	e037      	b.n	800a612 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f002 fad1 	bl	800cb50 <SDMMC_CmdAppCommand>
 800a5ae:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <SD_PowerON+0xf0>
      {
        return errorstate;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	e02b      	b.n	800a612 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f002 fae8 	bl	800cb98 <SDMMC_CmdAppOperCommand>
 800a5c8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <SD_PowerON+0x10a>
      {
        return errorstate;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	e01e      	b.n	800a612 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2100      	movs	r1, #0
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f002 f939 	bl	800c852 <SDMMC_GetResponse>
 800a5e0:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	0fdb      	lsrs	r3, r3, #31
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	bf0c      	ite	eq
 800a5ea:	2301      	moveq	r3, #1
 800a5ec:	2300      	movne	r3, #0
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0ca      	beq.n	800a58e <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	645a      	str	r2, [r3, #68]	; 0x44
 800a608:	e002      	b.n	800a610 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a624:	2300      	movs	r3, #0
 800a626:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800a62e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a632:	e018      	b.n	800a666 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a63c:	041b      	lsls	r3, r3, #16
 800a63e:	4619      	mov	r1, r3
 800a640:	4610      	mov	r0, r2
 800a642:	f002 fb7a 	bl	800cd3a <SDMMC_CmdSendStatus>
 800a646:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <SD_SendStatus+0x38>
  {
    return errorstate;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	e009      	b.n	800a666 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2100      	movs	r1, #0
 800a658:	4618      	mov	r0, r3
 800a65a:	f002 f8fa 	bl	800c852 <SDMMC_GetResponse>
 800a65e:	4602      	mov	r2, r0
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b086      	sub	sp, #24
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]
 800a67a:	2300      	movs	r3, #0
 800a67c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a67e:	2300      	movs	r3, #0
 800a680:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2100      	movs	r1, #0
 800a688:	4618      	mov	r0, r3
 800a68a:	f002 f8e2 	bl	800c852 <SDMMC_GetResponse>
 800a68e:	4603      	mov	r3, r0
 800a690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a698:	d102      	bne.n	800a6a0 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a69a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a69e:	e02f      	b.n	800a700 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a6a0:	f107 030c 	add.w	r3, r7, #12
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f87b 	bl	800a7a2 <SD_FindSCR>
 800a6ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	e023      	b.n	800a700 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d01c      	beq.n	800a6fc <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ca:	041b      	lsls	r3, r3, #16
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	f002 fa3e 	bl	800cb50 <SDMMC_CmdAppCommand>
 800a6d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	e00f      	b.n	800a700 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2102      	movs	r1, #2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f002 fa7c 	bl	800cbe4 <SDMMC_CmdBusWidth>
 800a6ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	e003      	b.n	800a700 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e001      	b.n	800a700 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	2300      	movs	r3, #0
 800a716:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a718:	2300      	movs	r3, #0
 800a71a:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2100      	movs	r1, #0
 800a722:	4618      	mov	r0, r3
 800a724:	f002 f895 	bl	800c852 <SDMMC_GetResponse>
 800a728:	4603      	mov	r3, r0
 800a72a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a72e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a732:	d102      	bne.n	800a73a <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a738:	e02f      	b.n	800a79a <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a73a:	f107 030c 	add.w	r3, r7, #12
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f82e 	bl	800a7a2 <SD_FindSCR>
 800a746:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	e023      	b.n	800a79a <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01c      	beq.n	800a796 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a764:	041b      	lsls	r3, r3, #16
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f002 f9f1 	bl	800cb50 <SDMMC_CmdAppCommand>
 800a76e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	e00f      	b.n	800a79a <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2100      	movs	r1, #0
 800a780:	4618      	mov	r0, r3
 800a782:	f002 fa2f 	bl	800cbe4 <SDMMC_CmdBusWidth>
 800a786:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	e003      	b.n	800a79a <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800a792:	2300      	movs	r3, #0
 800a794:	e001      	b.n	800a79a <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a796:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a7a2:	b590      	push	{r4, r7, lr}
 800a7a4:	b08f      	sub	sp, #60	; 0x3c
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800a7b0:	f7f8 fdca 	bl	8003348 <HAL_GetTick>
 800a7b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2108      	movs	r1, #8
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f002 f883 	bl	800c8d4 <SDMMC_CmdBlockLength>
 800a7ce:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <SD_FindSCR+0x38>
  {
    return errorstate;
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	e0a8      	b.n	800a92c <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e2:	041b      	lsls	r3, r3, #16
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f002 f9b2 	bl	800cb50 <SDMMC_CmdAppCommand>
 800a7ec:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	e099      	b.n	800a92c <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fc:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 800a7fe:	2308      	movs	r3, #8
 800a800:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a802:	2330      	movs	r3, #48	; 0x30
 800a804:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a806:	2302      	movs	r3, #2
 800a808:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a80e:	2301      	movs	r3, #1
 800a810:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f107 0214 	add.w	r2, r7, #20
 800a81a:	4611      	mov	r1, r2
 800a81c:	4618      	mov	r0, r3
 800a81e:	f002 f82d 	bl	800c87c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4618      	mov	r0, r3
 800a828:	f002 fa00 	bl	800cc2c <SDMMC_CmdSendSCR>
 800a82c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	2b00      	cmp	r3, #0
 800a832:	d022      	beq.n	800a87a <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	e079      	b.n	800a92c <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00e      	beq.n	800a864 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6819      	ldr	r1, [r3, #0]
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	f107 020c 	add.w	r2, r7, #12
 800a852:	18d4      	adds	r4, r2, r3
 800a854:	4608      	mov	r0, r1
 800a856:	f001 ff9b 	bl	800c790 <SDMMC_ReadFIFO>
 800a85a:	4603      	mov	r3, r0
 800a85c:	6023      	str	r3, [r4, #0]
      index++;
 800a85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a860:	3301      	adds	r3, #1
 800a862:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a864:	f7f8 fd70 	bl	8003348 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d102      	bne.n	800a87a <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a878:	e058      	b.n	800a92c <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a880:	f240 432a 	movw	r3, #1066	; 0x42a
 800a884:	4013      	ands	r3, r2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0d6      	beq.n	800a838 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a890:	f003 0308 	and.w	r3, r3, #8
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2208      	movs	r2, #8
 800a89e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	e043      	b.n	800a92c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8aa:	f003 0302 	and.w	r3, r3, #2
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	e036      	b.n	800a92c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c4:	f003 0320 	and.w	r3, r3, #32
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800a8d4:	2320      	movs	r3, #32
 800a8d6:	e029      	b.n	800a92c <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a8e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	061a      	lsls	r2, r3, #24
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	021b      	lsls	r3, r3, #8
 800a8ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a8ee:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a8f8:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800a904:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a906:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	061a      	lsls	r2, r3, #24
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	021b      	lsls	r3, r3, #8
 800a910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a914:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	0a1b      	lsrs	r3, r3, #8
 800a91a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a91e:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	0e1b      	lsrs	r3, r3, #24
 800a924:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	373c      	adds	r7, #60	; 0x3c
 800a930:	46bd      	mov	sp, r7
 800a932:	bd90      	pop	{r4, r7, pc}

0800a934 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e025      	b.n	800a994 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f009 f8d5 	bl	8013b0c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2202      	movs	r2, #2
 800a966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3304      	adds	r3, #4
 800a972:	4619      	mov	r1, r3
 800a974:	4610      	mov	r0, r2
 800a976:	f001 fdb9 	bl	800c4ec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6818      	ldr	r0, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	461a      	mov	r2, r3
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	f001 fe23 	bl	800c5d0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d101      	bne.n	800a9b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	e018      	b.n	800a9ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	68b9      	ldr	r1, [r7, #8]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 fe81 	bl	800c6d0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d104      	bne.n	800a9e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2205      	movs	r2, #5
 800a9da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a9de:	e003      	b.n	800a9e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d101      	bne.n	800aa0c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e00e      	b.n	800aa2a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f001 fe79 	bl	800c712 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e04c      	b.n	800aae0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d106      	bne.n	800aa60 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7f8 f882 	bl	8002b64 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f022 0203 	bic.w	r2, r2, #3
 800aa76:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <HAL_SPDIFRX_Init+0xb4>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800aa90:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800aa96:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800aa9c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800aaa2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800aaa8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800aaae:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800aab4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800aaba:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800aac0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	fff88407 	.word	0xfff88407

0800aaec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e01d      	b.n	800ab3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7f8 f868 	bl	8002be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f000 fbba 	bl	800b2a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f042 0201 	orr.w	r2, r2, #1
 800ab5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	689a      	ldr	r2, [r3, #8]
 800ab62:	4b0c      	ldr	r3, [pc, #48]	; (800ab94 <HAL_TIM_Base_Start_IT+0x50>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b06      	cmp	r3, #6
 800ab6c:	d00b      	beq.n	800ab86 <HAL_TIM_Base_Start_IT+0x42>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab74:	d007      	beq.n	800ab86 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f042 0201 	orr.w	r2, r2, #1
 800ab84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	00010007 	.word	0x00010007

0800ab98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e01d      	b.n	800abe6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d106      	bne.n	800abc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f8 f8ac 	bl	8002d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3304      	adds	r3, #4
 800abd4:	4619      	mov	r1, r3
 800abd6:	4610      	mov	r0, r2
 800abd8:	f000 fb64 	bl	800b2a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	f003 0302 	and.w	r3, r3, #2
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d122      	bne.n	800ac4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d11b      	bne.n	800ac4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f06f 0202 	mvn.w	r2, #2
 800ac1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fb19 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800ac36:	e005      	b.n	800ac44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fb0b 	bl	800b254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fb1c 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	f003 0304 	and.w	r3, r3, #4
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d122      	bne.n	800ac9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f003 0304 	and.w	r3, r3, #4
 800ac62:	2b04      	cmp	r3, #4
 800ac64:	d11b      	bne.n	800ac9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f06f 0204 	mvn.w	r2, #4
 800ac6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 faef 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800ac8a:	e005      	b.n	800ac98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fae1 	bl	800b254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 faf2 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	f003 0308 	and.w	r3, r3, #8
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d122      	bne.n	800acf2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f003 0308 	and.w	r3, r3, #8
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	d11b      	bne.n	800acf2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f06f 0208 	mvn.w	r2, #8
 800acc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2204      	movs	r2, #4
 800acc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	f003 0303 	and.w	r3, r3, #3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d003      	beq.n	800ace0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fac5 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800acde:	e005      	b.n	800acec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fab7 	bl	800b254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fac8 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b10      	cmp	r3, #16
 800acfe:	d122      	bne.n	800ad46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f003 0310 	and.w	r3, r3, #16
 800ad0a:	2b10      	cmp	r3, #16
 800ad0c:	d11b      	bne.n	800ad46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f06f 0210 	mvn.w	r2, #16
 800ad16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fa9b 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800ad32:	e005      	b.n	800ad40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa8d 	bl	800b254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa9e 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d10e      	bne.n	800ad72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d107      	bne.n	800ad72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f06f 0201 	mvn.w	r2, #1
 800ad6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7f6 ffbb 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad7c:	2b80      	cmp	r3, #128	; 0x80
 800ad7e:	d10e      	bne.n	800ad9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad8a:	2b80      	cmp	r3, #128	; 0x80
 800ad8c:	d107      	bne.n	800ad9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 ff87 	bl	800bcac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adac:	d10e      	bne.n	800adcc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	d107      	bne.n	800adcc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 ff7a 	bl	800bcc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add6:	2b40      	cmp	r3, #64	; 0x40
 800add8:	d10e      	bne.n	800adf8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade4:	2b40      	cmp	r3, #64	; 0x40
 800ade6:	d107      	bne.n	800adf8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa4c 	bl	800b290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b20      	cmp	r3, #32
 800ae04:	d10e      	bne.n	800ae24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f003 0320 	and.w	r3, r3, #32
 800ae10:	2b20      	cmp	r3, #32
 800ae12:	d107      	bne.n	800ae24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f06f 0220 	mvn.w	r2, #32
 800ae1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 ff3a 	bl	800bc98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d101      	bne.n	800ae46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ae42:	2302      	movs	r3, #2
 800ae44:	e105      	b.n	800b052 <HAL_TIM_PWM_ConfigChannel+0x226>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2202      	movs	r2, #2
 800ae52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b14      	cmp	r3, #20
 800ae5a:	f200 80f0 	bhi.w	800b03e <HAL_TIM_PWM_ConfigChannel+0x212>
 800ae5e:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ae60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae64:	0800aeb9 	.word	0x0800aeb9
 800ae68:	0800b03f 	.word	0x0800b03f
 800ae6c:	0800b03f 	.word	0x0800b03f
 800ae70:	0800b03f 	.word	0x0800b03f
 800ae74:	0800aef9 	.word	0x0800aef9
 800ae78:	0800b03f 	.word	0x0800b03f
 800ae7c:	0800b03f 	.word	0x0800b03f
 800ae80:	0800b03f 	.word	0x0800b03f
 800ae84:	0800af3b 	.word	0x0800af3b
 800ae88:	0800b03f 	.word	0x0800b03f
 800ae8c:	0800b03f 	.word	0x0800b03f
 800ae90:	0800b03f 	.word	0x0800b03f
 800ae94:	0800af7b 	.word	0x0800af7b
 800ae98:	0800b03f 	.word	0x0800b03f
 800ae9c:	0800b03f 	.word	0x0800b03f
 800aea0:	0800b03f 	.word	0x0800b03f
 800aea4:	0800afbd 	.word	0x0800afbd
 800aea8:	0800b03f 	.word	0x0800b03f
 800aeac:	0800b03f 	.word	0x0800b03f
 800aeb0:	0800b03f 	.word	0x0800b03f
 800aeb4:	0800affd 	.word	0x0800affd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68b9      	ldr	r1, [r7, #8]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fa90 	bl	800b3e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699a      	ldr	r2, [r3, #24]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f042 0208 	orr.w	r2, r2, #8
 800aed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699a      	ldr	r2, [r3, #24]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0204 	bic.w	r2, r2, #4
 800aee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6999      	ldr	r1, [r3, #24]
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	691a      	ldr	r2, [r3, #16]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	430a      	orrs	r2, r1
 800aef4:	619a      	str	r2, [r3, #24]
      break;
 800aef6:	e0a3      	b.n	800b040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68b9      	ldr	r1, [r7, #8]
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 fae2 	bl	800b4c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	699a      	ldr	r2, [r3, #24]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6999      	ldr	r1, [r3, #24]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	021a      	lsls	r2, r3, #8
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	430a      	orrs	r2, r1
 800af36:	619a      	str	r2, [r3, #24]
      break;
 800af38:	e082      	b.n	800b040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68b9      	ldr	r1, [r7, #8]
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fb39 	bl	800b5b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	69da      	ldr	r2, [r3, #28]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f042 0208 	orr.w	r2, r2, #8
 800af54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	69da      	ldr	r2, [r3, #28]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0204 	bic.w	r2, r2, #4
 800af64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69d9      	ldr	r1, [r3, #28]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	691a      	ldr	r2, [r3, #16]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	61da      	str	r2, [r3, #28]
      break;
 800af78:	e062      	b.n	800b040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	4618      	mov	r0, r3
 800af82:	f000 fb8f 	bl	800b6a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69da      	ldr	r2, [r3, #28]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	69da      	ldr	r2, [r3, #28]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69d9      	ldr	r1, [r3, #28]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	021a      	lsls	r2, r3, #8
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	430a      	orrs	r2, r1
 800afb8:	61da      	str	r2, [r3, #28]
      break;
 800afba:	e041      	b.n	800b040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fbc6 	bl	800b754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f042 0208 	orr.w	r2, r2, #8
 800afd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f022 0204 	bic.w	r2, r2, #4
 800afe6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	691a      	ldr	r2, [r3, #16]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800affa:	e021      	b.n	800b040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 fbf8 	bl	800b7f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	021a      	lsls	r2, r3, #8
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b03c:	e000      	b.n	800b040 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800b03e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop

0800b05c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <HAL_TIM_ConfigClockSource+0x18>
 800b070:	2302      	movs	r3, #2
 800b072:	e0a6      	b.n	800b1c2 <HAL_TIM_ConfigClockSource+0x166>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4b4f      	ldr	r3, [pc, #316]	; (800b1cc <HAL_TIM_ConfigClockSource+0x170>)
 800b090:	4013      	ands	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b09a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b40      	cmp	r3, #64	; 0x40
 800b0aa:	d067      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0x120>
 800b0ac:	2b40      	cmp	r3, #64	; 0x40
 800b0ae:	d80b      	bhi.n	800b0c8 <HAL_TIM_ConfigClockSource+0x6c>
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d073      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
 800b0b4:	2b10      	cmp	r3, #16
 800b0b6:	d802      	bhi.n	800b0be <HAL_TIM_ConfigClockSource+0x62>
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d06f      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b0bc:	e078      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0be:	2b20      	cmp	r3, #32
 800b0c0:	d06c      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
 800b0c2:	2b30      	cmp	r3, #48	; 0x30
 800b0c4:	d06a      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b0c6:	e073      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0c8:	2b70      	cmp	r3, #112	; 0x70
 800b0ca:	d00d      	beq.n	800b0e8 <HAL_TIM_ConfigClockSource+0x8c>
 800b0cc:	2b70      	cmp	r3, #112	; 0x70
 800b0ce:	d804      	bhi.n	800b0da <HAL_TIM_ConfigClockSource+0x7e>
 800b0d0:	2b50      	cmp	r3, #80	; 0x50
 800b0d2:	d033      	beq.n	800b13c <HAL_TIM_ConfigClockSource+0xe0>
 800b0d4:	2b60      	cmp	r3, #96	; 0x60
 800b0d6:	d041      	beq.n	800b15c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b0d8:	e06a      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0de:	d066      	beq.n	800b1ae <HAL_TIM_ConfigClockSource+0x152>
 800b0e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0e4:	d017      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b0e6:	e063      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	6899      	ldr	r1, [r3, #8]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	f000 fcd4 	bl	800baa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b10a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	609a      	str	r2, [r3, #8]
      break;
 800b114:	e04c      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6899      	ldr	r1, [r3, #8]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f000 fcbd 	bl	800baa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b138:	609a      	str	r2, [r3, #8]
      break;
 800b13a:	e039      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	6859      	ldr	r1, [r3, #4]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	461a      	mov	r2, r3
 800b14a:	f000 fc31 	bl	800b9b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2150      	movs	r1, #80	; 0x50
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fc8a 	bl	800ba6e <TIM_ITRx_SetConfig>
      break;
 800b15a:	e029      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	6859      	ldr	r1, [r3, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	461a      	mov	r2, r3
 800b16a:	f000 fc50 	bl	800ba0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2160      	movs	r1, #96	; 0x60
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fc7a 	bl	800ba6e <TIM_ITRx_SetConfig>
      break;
 800b17a:	e019      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6818      	ldr	r0, [r3, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	6859      	ldr	r1, [r3, #4]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	461a      	mov	r2, r3
 800b18a:	f000 fc11 	bl	800b9b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2140      	movs	r1, #64	; 0x40
 800b194:	4618      	mov	r0, r3
 800b196:	f000 fc6a 	bl	800ba6e <TIM_ITRx_SetConfig>
      break;
 800b19a:	e009      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	f000 fc61 	bl	800ba6e <TIM_ITRx_SetConfig>
      break;
 800b1ac:	e000      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b1ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	fffeff88 	.word	0xfffeff88

0800b1d0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d101      	bne.n	800b1e8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	e031      	b.n	800b24c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fb50 	bl	800b8a0 <TIM_SlaveTimer_SetConfig>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d009      	beq.n	800b21a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
      htim->State = HAL_TIM_STATE_READY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e018      	b.n	800b24c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b228:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68da      	ldr	r2, [r3, #12]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b238:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a40      	ldr	r2, [pc, #256]	; (800b3b8 <TIM_Base_SetConfig+0x114>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d013      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c2:	d00f      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a3d      	ldr	r2, [pc, #244]	; (800b3bc <TIM_Base_SetConfig+0x118>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00b      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a3c      	ldr	r2, [pc, #240]	; (800b3c0 <TIM_Base_SetConfig+0x11c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d007      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a3b      	ldr	r2, [pc, #236]	; (800b3c4 <TIM_Base_SetConfig+0x120>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d003      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a3a      	ldr	r2, [pc, #232]	; (800b3c8 <TIM_Base_SetConfig+0x124>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d108      	bne.n	800b2f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a2f      	ldr	r2, [pc, #188]	; (800b3b8 <TIM_Base_SetConfig+0x114>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d02b      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b304:	d027      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a2c      	ldr	r2, [pc, #176]	; (800b3bc <TIM_Base_SetConfig+0x118>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d023      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a2b      	ldr	r2, [pc, #172]	; (800b3c0 <TIM_Base_SetConfig+0x11c>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d01f      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a2a      	ldr	r2, [pc, #168]	; (800b3c4 <TIM_Base_SetConfig+0x120>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d01b      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a29      	ldr	r2, [pc, #164]	; (800b3c8 <TIM_Base_SetConfig+0x124>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d017      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a28      	ldr	r2, [pc, #160]	; (800b3cc <TIM_Base_SetConfig+0x128>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d013      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a27      	ldr	r2, [pc, #156]	; (800b3d0 <TIM_Base_SetConfig+0x12c>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d00f      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a26      	ldr	r2, [pc, #152]	; (800b3d4 <TIM_Base_SetConfig+0x130>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d00b      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a25      	ldr	r2, [pc, #148]	; (800b3d8 <TIM_Base_SetConfig+0x134>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d007      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a24      	ldr	r2, [pc, #144]	; (800b3dc <TIM_Base_SetConfig+0x138>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d003      	beq.n	800b356 <TIM_Base_SetConfig+0xb2>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a23      	ldr	r2, [pc, #140]	; (800b3e0 <TIM_Base_SetConfig+0x13c>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d108      	bne.n	800b368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b35c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	4313      	orrs	r3, r2
 800b366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a0a      	ldr	r2, [pc, #40]	; (800b3b8 <TIM_Base_SetConfig+0x114>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d003      	beq.n	800b39c <TIM_Base_SetConfig+0xf8>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a0c      	ldr	r2, [pc, #48]	; (800b3c8 <TIM_Base_SetConfig+0x124>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d103      	bne.n	800b3a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	691a      	ldr	r2, [r3, #16]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	615a      	str	r2, [r3, #20]
}
 800b3aa:	bf00      	nop
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	40010000 	.word	0x40010000
 800b3bc:	40000400 	.word	0x40000400
 800b3c0:	40000800 	.word	0x40000800
 800b3c4:	40000c00 	.word	0x40000c00
 800b3c8:	40010400 	.word	0x40010400
 800b3cc:	40014000 	.word	0x40014000
 800b3d0:	40014400 	.word	0x40014400
 800b3d4:	40014800 	.word	0x40014800
 800b3d8:	40001800 	.word	0x40001800
 800b3dc:	40001c00 	.word	0x40001c00
 800b3e0:	40002000 	.word	0x40002000

0800b3e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	f023 0201 	bic.w	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	4b2b      	ldr	r3, [pc, #172]	; (800b4bc <TIM_OC1_SetConfig+0xd8>)
 800b410:	4013      	ands	r3, r2
 800b412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0303 	bic.w	r3, r3, #3
 800b41a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4313      	orrs	r3, r2
 800b424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f023 0302 	bic.w	r3, r3, #2
 800b42c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	4313      	orrs	r3, r2
 800b436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a21      	ldr	r2, [pc, #132]	; (800b4c0 <TIM_OC1_SetConfig+0xdc>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d003      	beq.n	800b448 <TIM_OC1_SetConfig+0x64>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a20      	ldr	r2, [pc, #128]	; (800b4c4 <TIM_OC1_SetConfig+0xe0>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d10c      	bne.n	800b462 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f023 0308 	bic.w	r3, r3, #8
 800b44e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	4313      	orrs	r3, r2
 800b458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f023 0304 	bic.w	r3, r3, #4
 800b460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a16      	ldr	r2, [pc, #88]	; (800b4c0 <TIM_OC1_SetConfig+0xdc>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d003      	beq.n	800b472 <TIM_OC1_SetConfig+0x8e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a15      	ldr	r2, [pc, #84]	; (800b4c4 <TIM_OC1_SetConfig+0xe0>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d111      	bne.n	800b496 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	4313      	orrs	r3, r2
 800b48a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	621a      	str	r2, [r3, #32]
}
 800b4b0:	bf00      	nop
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	fffeff8f 	.word	0xfffeff8f
 800b4c0:	40010000 	.word	0x40010000
 800b4c4:	40010400 	.word	0x40010400

0800b4c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	f023 0210 	bic.w	r2, r3, #16
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4b2e      	ldr	r3, [pc, #184]	; (800b5ac <TIM_OC2_SetConfig+0xe4>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f023 0320 	bic.w	r3, r3, #32
 800b512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	011b      	lsls	r3, r3, #4
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a23      	ldr	r2, [pc, #140]	; (800b5b0 <TIM_OC2_SetConfig+0xe8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d003      	beq.n	800b530 <TIM_OC2_SetConfig+0x68>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a22      	ldr	r2, [pc, #136]	; (800b5b4 <TIM_OC2_SetConfig+0xec>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d10d      	bne.n	800b54c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	4313      	orrs	r3, r2
 800b542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b54a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a18      	ldr	r2, [pc, #96]	; (800b5b0 <TIM_OC2_SetConfig+0xe8>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d003      	beq.n	800b55c <TIM_OC2_SetConfig+0x94>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a17      	ldr	r2, [pc, #92]	; (800b5b4 <TIM_OC2_SetConfig+0xec>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d113      	bne.n	800b584 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b56a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	4313      	orrs	r3, r2
 800b576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	4313      	orrs	r3, r2
 800b582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	621a      	str	r2, [r3, #32]
}
 800b59e:	bf00      	nop
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	feff8fff 	.word	0xfeff8fff
 800b5b0:	40010000 	.word	0x40010000
 800b5b4:	40010400 	.word	0x40010400

0800b5b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4b2d      	ldr	r3, [pc, #180]	; (800b698 <TIM_OC3_SetConfig+0xe0>)
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f023 0303 	bic.w	r3, r3, #3
 800b5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	021b      	lsls	r3, r3, #8
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a22      	ldr	r2, [pc, #136]	; (800b69c <TIM_OC3_SetConfig+0xe4>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d003      	beq.n	800b61e <TIM_OC3_SetConfig+0x66>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a21      	ldr	r2, [pc, #132]	; (800b6a0 <TIM_OC3_SetConfig+0xe8>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d10d      	bne.n	800b63a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	4313      	orrs	r3, r2
 800b630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a17      	ldr	r2, [pc, #92]	; (800b69c <TIM_OC3_SetConfig+0xe4>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d003      	beq.n	800b64a <TIM_OC3_SetConfig+0x92>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a16      	ldr	r2, [pc, #88]	; (800b6a0 <TIM_OC3_SetConfig+0xe8>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d113      	bne.n	800b672 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	011b      	lsls	r3, r3, #4
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	4313      	orrs	r3, r2
 800b670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	621a      	str	r2, [r3, #32]
}
 800b68c:	bf00      	nop
 800b68e:	371c      	adds	r7, #28
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	fffeff8f 	.word	0xfffeff8f
 800b69c:	40010000 	.word	0x40010000
 800b6a0:	40010400 	.word	0x40010400

0800b6a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	69db      	ldr	r3, [r3, #28]
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4b1e      	ldr	r3, [pc, #120]	; (800b748 <TIM_OC4_SetConfig+0xa4>)
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	021b      	lsls	r3, r3, #8
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	031b      	lsls	r3, r3, #12
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a13      	ldr	r2, [pc, #76]	; (800b74c <TIM_OC4_SetConfig+0xa8>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d003      	beq.n	800b70c <TIM_OC4_SetConfig+0x68>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a12      	ldr	r2, [pc, #72]	; (800b750 <TIM_OC4_SetConfig+0xac>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d109      	bne.n	800b720 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	019b      	lsls	r3, r3, #6
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	621a      	str	r2, [r3, #32]
}
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	feff8fff 	.word	0xfeff8fff
 800b74c:	40010000 	.word	0x40010000
 800b750:	40010400 	.word	0x40010400

0800b754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4b1b      	ldr	r3, [pc, #108]	; (800b7ec <TIM_OC5_SetConfig+0x98>)
 800b780:	4013      	ands	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b794:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	041b      	lsls	r3, r3, #16
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a12      	ldr	r2, [pc, #72]	; (800b7f0 <TIM_OC5_SetConfig+0x9c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d003      	beq.n	800b7b2 <TIM_OC5_SetConfig+0x5e>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a11      	ldr	r2, [pc, #68]	; (800b7f4 <TIM_OC5_SetConfig+0xa0>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d109      	bne.n	800b7c6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	621a      	str	r2, [r3, #32]
}
 800b7e0:	bf00      	nop
 800b7e2:	371c      	adds	r7, #28
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	fffeff8f 	.word	0xfffeff8f
 800b7f0:	40010000 	.word	0x40010000
 800b7f4:	40010400 	.word	0x40010400

0800b7f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	4b1c      	ldr	r3, [pc, #112]	; (800b894 <TIM_OC6_SetConfig+0x9c>)
 800b824:	4013      	ands	r3, r2
 800b826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b83a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	051b      	lsls	r3, r3, #20
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	4313      	orrs	r3, r2
 800b846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a13      	ldr	r2, [pc, #76]	; (800b898 <TIM_OC6_SetConfig+0xa0>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d003      	beq.n	800b858 <TIM_OC6_SetConfig+0x60>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a12      	ldr	r2, [pc, #72]	; (800b89c <TIM_OC6_SetConfig+0xa4>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d109      	bne.n	800b86c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b85e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	029b      	lsls	r3, r3, #10
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	4313      	orrs	r3, r2
 800b86a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	621a      	str	r2, [r3, #32]
}
 800b886:	bf00      	nop
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	feff8fff 	.word	0xfeff8fff
 800b898:	40010000 	.word	0x40010000
 800b89c:	40010400 	.word	0x40010400

0800b8a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8b8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	4b39      	ldr	r3, [pc, #228]	; (800b9ac <TIM_SlaveTimer_SetConfig+0x10c>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	2b30      	cmp	r3, #48	; 0x30
 800b8e4:	d05c      	beq.n	800b9a0 <TIM_SlaveTimer_SetConfig+0x100>
 800b8e6:	2b30      	cmp	r3, #48	; 0x30
 800b8e8:	d806      	bhi.n	800b8f8 <TIM_SlaveTimer_SetConfig+0x58>
 800b8ea:	2b10      	cmp	r3, #16
 800b8ec:	d058      	beq.n	800b9a0 <TIM_SlaveTimer_SetConfig+0x100>
 800b8ee:	2b20      	cmp	r3, #32
 800b8f0:	d056      	beq.n	800b9a0 <TIM_SlaveTimer_SetConfig+0x100>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d054      	beq.n	800b9a0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800b8f6:	e054      	b.n	800b9a2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b8f8:	2b50      	cmp	r3, #80	; 0x50
 800b8fa:	d03d      	beq.n	800b978 <TIM_SlaveTimer_SetConfig+0xd8>
 800b8fc:	2b50      	cmp	r3, #80	; 0x50
 800b8fe:	d802      	bhi.n	800b906 <TIM_SlaveTimer_SetConfig+0x66>
 800b900:	2b40      	cmp	r3, #64	; 0x40
 800b902:	d010      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800b904:	e04d      	b.n	800b9a2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b906:	2b60      	cmp	r3, #96	; 0x60
 800b908:	d040      	beq.n	800b98c <TIM_SlaveTimer_SetConfig+0xec>
 800b90a:	2b70      	cmp	r3, #112	; 0x70
 800b90c:	d000      	beq.n	800b910 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800b90e:	e048      	b.n	800b9a2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	68d9      	ldr	r1, [r3, #12]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	689a      	ldr	r2, [r3, #8]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	f000 f8c0 	bl	800baa4 <TIM_ETR_SetConfig>
      break;
 800b924:	e03d      	b.n	800b9a2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b05      	cmp	r3, #5
 800b92c:	d101      	bne.n	800b932 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e038      	b.n	800b9a4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6a1b      	ldr	r3, [r3, #32]
 800b938:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	6a1a      	ldr	r2, [r3, #32]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f022 0201 	bic.w	r2, r2, #1
 800b948:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b958:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	011b      	lsls	r3, r3, #4
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4313      	orrs	r3, r2
 800b964:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	621a      	str	r2, [r3, #32]
      break;
 800b976:	e014      	b.n	800b9a2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6818      	ldr	r0, [r3, #0]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	6899      	ldr	r1, [r3, #8]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	461a      	mov	r2, r3
 800b986:	f000 f813 	bl	800b9b0 <TIM_TI1_ConfigInputStage>
      break;
 800b98a:	e00a      	b.n	800b9a2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6899      	ldr	r1, [r3, #8]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	461a      	mov	r2, r3
 800b99a:	f000 f838 	bl	800ba0e <TIM_TI2_ConfigInputStage>
      break;
 800b99e:	e000      	b.n	800b9a2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800b9a0:	bf00      	nop
  }
  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	fffefff8 	.word	0xfffefff8

0800b9b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	f023 0201 	bic.w	r2, r3, #1
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f023 030a 	bic.w	r3, r3, #10
 800b9ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	621a      	str	r2, [r3, #32]
}
 800ba02:	bf00      	nop
 800ba04:	371c      	adds	r7, #28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b087      	sub	sp, #28
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	f023 0210 	bic.w	r2, r3, #16
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6a1b      	ldr	r3, [r3, #32]
 800ba30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	031b      	lsls	r3, r3, #12
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	011b      	lsls	r3, r3, #4
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	693a      	ldr	r2, [r7, #16]
 800ba60:	621a      	str	r2, [r3, #32]
}
 800ba62:	bf00      	nop
 800ba64:	371c      	adds	r7, #28
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f043 0307 	orr.w	r3, r3, #7
 800ba90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	609a      	str	r2, [r3, #8]
}
 800ba98:	bf00      	nop
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
 800bab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800babe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	021a      	lsls	r2, r3, #8
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	431a      	orrs	r2, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	4313      	orrs	r3, r2
 800bacc:	697a      	ldr	r2, [r7, #20]
 800bace:	4313      	orrs	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	609a      	str	r2, [r3, #8]
}
 800bad8:	bf00      	nop
 800bada:	371c      	adds	r7, #28
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d101      	bne.n	800bafc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800baf8:	2302      	movs	r3, #2
 800bafa:	e045      	b.n	800bb88 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2202      	movs	r2, #2
 800bb08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a1c      	ldr	r2, [pc, #112]	; (800bb94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d004      	beq.n	800bb30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a1b      	ldr	r2, [pc, #108]	; (800bb98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d108      	bne.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb5a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	40010000 	.word	0x40010000
 800bb98:	40010400 	.word	0x40010400

0800bb9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e065      	b.n	800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	041b      	lsls	r3, r3, #16
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a16      	ldr	r2, [pc, #88]	; (800bc90 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d004      	beq.n	800bc46 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a14      	ldr	r2, [pc, #80]	; (800bc94 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d115      	bne.n	800bc72 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	051b      	lsls	r3, r3, #20
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	69db      	ldr	r3, [r3, #28]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	40010000 	.word	0x40010000
 800bc94:	40010400 	.word	0x40010400

0800bc98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e040      	b.n	800bd68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d106      	bne.n	800bcfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7f7 f8d8 	bl	8002eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2224      	movs	r2, #36	; 0x24
 800bd00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f022 0201 	bic.w	r2, r2, #1
 800bd10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f82c 	bl	800bd70 <UART_SetConfig>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d101      	bne.n	800bd22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e022      	b.n	800bd68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fac4 	bl	800c2b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689a      	ldr	r2, [r3, #8]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd4e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f042 0201 	orr.w	r2, r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fb4b 	bl	800c3fc <UART_CheckIdleState>
 800bd66:	4603      	mov	r3, r0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689a      	ldr	r2, [r3, #8]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	69db      	ldr	r3, [r3, #28]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	4bb1      	ldr	r3, [pc, #708]	; (800c064 <UART_SetConfig+0x2f4>)
 800bda0:	4013      	ands	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	6812      	ldr	r2, [r2, #0]
 800bda6:	6939      	ldr	r1, [r7, #16]
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68da      	ldr	r2, [r3, #12]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a1b      	ldr	r3, [r3, #32]
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a9f      	ldr	r2, [pc, #636]	; (800c068 <UART_SetConfig+0x2f8>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d121      	bne.n	800be34 <UART_SetConfig+0xc4>
 800bdf0:	4b9e      	ldr	r3, [pc, #632]	; (800c06c <UART_SetConfig+0x2fc>)
 800bdf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf6:	f003 0303 	and.w	r3, r3, #3
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d816      	bhi.n	800be2c <UART_SetConfig+0xbc>
 800bdfe:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <UART_SetConfig+0x94>)
 800be00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be04:	0800be15 	.word	0x0800be15
 800be08:	0800be21 	.word	0x0800be21
 800be0c:	0800be1b 	.word	0x0800be1b
 800be10:	0800be27 	.word	0x0800be27
 800be14:	2301      	movs	r3, #1
 800be16:	77fb      	strb	r3, [r7, #31]
 800be18:	e151      	b.n	800c0be <UART_SetConfig+0x34e>
 800be1a:	2302      	movs	r3, #2
 800be1c:	77fb      	strb	r3, [r7, #31]
 800be1e:	e14e      	b.n	800c0be <UART_SetConfig+0x34e>
 800be20:	2304      	movs	r3, #4
 800be22:	77fb      	strb	r3, [r7, #31]
 800be24:	e14b      	b.n	800c0be <UART_SetConfig+0x34e>
 800be26:	2308      	movs	r3, #8
 800be28:	77fb      	strb	r3, [r7, #31]
 800be2a:	e148      	b.n	800c0be <UART_SetConfig+0x34e>
 800be2c:	2310      	movs	r3, #16
 800be2e:	77fb      	strb	r3, [r7, #31]
 800be30:	bf00      	nop
 800be32:	e144      	b.n	800c0be <UART_SetConfig+0x34e>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a8d      	ldr	r2, [pc, #564]	; (800c070 <UART_SetConfig+0x300>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d134      	bne.n	800bea8 <UART_SetConfig+0x138>
 800be3e:	4b8b      	ldr	r3, [pc, #556]	; (800c06c <UART_SetConfig+0x2fc>)
 800be40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be44:	f003 030c 	and.w	r3, r3, #12
 800be48:	2b0c      	cmp	r3, #12
 800be4a:	d829      	bhi.n	800bea0 <UART_SetConfig+0x130>
 800be4c:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <UART_SetConfig+0xe4>)
 800be4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be52:	bf00      	nop
 800be54:	0800be89 	.word	0x0800be89
 800be58:	0800bea1 	.word	0x0800bea1
 800be5c:	0800bea1 	.word	0x0800bea1
 800be60:	0800bea1 	.word	0x0800bea1
 800be64:	0800be95 	.word	0x0800be95
 800be68:	0800bea1 	.word	0x0800bea1
 800be6c:	0800bea1 	.word	0x0800bea1
 800be70:	0800bea1 	.word	0x0800bea1
 800be74:	0800be8f 	.word	0x0800be8f
 800be78:	0800bea1 	.word	0x0800bea1
 800be7c:	0800bea1 	.word	0x0800bea1
 800be80:	0800bea1 	.word	0x0800bea1
 800be84:	0800be9b 	.word	0x0800be9b
 800be88:	2300      	movs	r3, #0
 800be8a:	77fb      	strb	r3, [r7, #31]
 800be8c:	e117      	b.n	800c0be <UART_SetConfig+0x34e>
 800be8e:	2302      	movs	r3, #2
 800be90:	77fb      	strb	r3, [r7, #31]
 800be92:	e114      	b.n	800c0be <UART_SetConfig+0x34e>
 800be94:	2304      	movs	r3, #4
 800be96:	77fb      	strb	r3, [r7, #31]
 800be98:	e111      	b.n	800c0be <UART_SetConfig+0x34e>
 800be9a:	2308      	movs	r3, #8
 800be9c:	77fb      	strb	r3, [r7, #31]
 800be9e:	e10e      	b.n	800c0be <UART_SetConfig+0x34e>
 800bea0:	2310      	movs	r3, #16
 800bea2:	77fb      	strb	r3, [r7, #31]
 800bea4:	bf00      	nop
 800bea6:	e10a      	b.n	800c0be <UART_SetConfig+0x34e>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a71      	ldr	r2, [pc, #452]	; (800c074 <UART_SetConfig+0x304>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d120      	bne.n	800bef4 <UART_SetConfig+0x184>
 800beb2:	4b6e      	ldr	r3, [pc, #440]	; (800c06c <UART_SetConfig+0x2fc>)
 800beb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d00f      	beq.n	800bee0 <UART_SetConfig+0x170>
 800bec0:	2b10      	cmp	r3, #16
 800bec2:	d802      	bhi.n	800beca <UART_SetConfig+0x15a>
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d005      	beq.n	800bed4 <UART_SetConfig+0x164>
 800bec8:	e010      	b.n	800beec <UART_SetConfig+0x17c>
 800beca:	2b20      	cmp	r3, #32
 800becc:	d005      	beq.n	800beda <UART_SetConfig+0x16a>
 800bece:	2b30      	cmp	r3, #48	; 0x30
 800bed0:	d009      	beq.n	800bee6 <UART_SetConfig+0x176>
 800bed2:	e00b      	b.n	800beec <UART_SetConfig+0x17c>
 800bed4:	2300      	movs	r3, #0
 800bed6:	77fb      	strb	r3, [r7, #31]
 800bed8:	e0f1      	b.n	800c0be <UART_SetConfig+0x34e>
 800beda:	2302      	movs	r3, #2
 800bedc:	77fb      	strb	r3, [r7, #31]
 800bede:	e0ee      	b.n	800c0be <UART_SetConfig+0x34e>
 800bee0:	2304      	movs	r3, #4
 800bee2:	77fb      	strb	r3, [r7, #31]
 800bee4:	e0eb      	b.n	800c0be <UART_SetConfig+0x34e>
 800bee6:	2308      	movs	r3, #8
 800bee8:	77fb      	strb	r3, [r7, #31]
 800beea:	e0e8      	b.n	800c0be <UART_SetConfig+0x34e>
 800beec:	2310      	movs	r3, #16
 800beee:	77fb      	strb	r3, [r7, #31]
 800bef0:	bf00      	nop
 800bef2:	e0e4      	b.n	800c0be <UART_SetConfig+0x34e>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a5f      	ldr	r2, [pc, #380]	; (800c078 <UART_SetConfig+0x308>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d120      	bne.n	800bf40 <UART_SetConfig+0x1d0>
 800befe:	4b5b      	ldr	r3, [pc, #364]	; (800c06c <UART_SetConfig+0x2fc>)
 800bf00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf08:	2b40      	cmp	r3, #64	; 0x40
 800bf0a:	d00f      	beq.n	800bf2c <UART_SetConfig+0x1bc>
 800bf0c:	2b40      	cmp	r3, #64	; 0x40
 800bf0e:	d802      	bhi.n	800bf16 <UART_SetConfig+0x1a6>
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d005      	beq.n	800bf20 <UART_SetConfig+0x1b0>
 800bf14:	e010      	b.n	800bf38 <UART_SetConfig+0x1c8>
 800bf16:	2b80      	cmp	r3, #128	; 0x80
 800bf18:	d005      	beq.n	800bf26 <UART_SetConfig+0x1b6>
 800bf1a:	2bc0      	cmp	r3, #192	; 0xc0
 800bf1c:	d009      	beq.n	800bf32 <UART_SetConfig+0x1c2>
 800bf1e:	e00b      	b.n	800bf38 <UART_SetConfig+0x1c8>
 800bf20:	2300      	movs	r3, #0
 800bf22:	77fb      	strb	r3, [r7, #31]
 800bf24:	e0cb      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf26:	2302      	movs	r3, #2
 800bf28:	77fb      	strb	r3, [r7, #31]
 800bf2a:	e0c8      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf2c:	2304      	movs	r3, #4
 800bf2e:	77fb      	strb	r3, [r7, #31]
 800bf30:	e0c5      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf32:	2308      	movs	r3, #8
 800bf34:	77fb      	strb	r3, [r7, #31]
 800bf36:	e0c2      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf38:	2310      	movs	r3, #16
 800bf3a:	77fb      	strb	r3, [r7, #31]
 800bf3c:	bf00      	nop
 800bf3e:	e0be      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a4d      	ldr	r2, [pc, #308]	; (800c07c <UART_SetConfig+0x30c>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d124      	bne.n	800bf94 <UART_SetConfig+0x224>
 800bf4a:	4b48      	ldr	r3, [pc, #288]	; (800c06c <UART_SetConfig+0x2fc>)
 800bf4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf58:	d012      	beq.n	800bf80 <UART_SetConfig+0x210>
 800bf5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf5e:	d802      	bhi.n	800bf66 <UART_SetConfig+0x1f6>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d007      	beq.n	800bf74 <UART_SetConfig+0x204>
 800bf64:	e012      	b.n	800bf8c <UART_SetConfig+0x21c>
 800bf66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6a:	d006      	beq.n	800bf7a <UART_SetConfig+0x20a>
 800bf6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf70:	d009      	beq.n	800bf86 <UART_SetConfig+0x216>
 800bf72:	e00b      	b.n	800bf8c <UART_SetConfig+0x21c>
 800bf74:	2300      	movs	r3, #0
 800bf76:	77fb      	strb	r3, [r7, #31]
 800bf78:	e0a1      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	77fb      	strb	r3, [r7, #31]
 800bf7e:	e09e      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf80:	2304      	movs	r3, #4
 800bf82:	77fb      	strb	r3, [r7, #31]
 800bf84:	e09b      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf86:	2308      	movs	r3, #8
 800bf88:	77fb      	strb	r3, [r7, #31]
 800bf8a:	e098      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf8c:	2310      	movs	r3, #16
 800bf8e:	77fb      	strb	r3, [r7, #31]
 800bf90:	bf00      	nop
 800bf92:	e094      	b.n	800c0be <UART_SetConfig+0x34e>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a39      	ldr	r2, [pc, #228]	; (800c080 <UART_SetConfig+0x310>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d124      	bne.n	800bfe8 <UART_SetConfig+0x278>
 800bf9e:	4b33      	ldr	r3, [pc, #204]	; (800c06c <UART_SetConfig+0x2fc>)
 800bfa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bfa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfac:	d012      	beq.n	800bfd4 <UART_SetConfig+0x264>
 800bfae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfb2:	d802      	bhi.n	800bfba <UART_SetConfig+0x24a>
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d007      	beq.n	800bfc8 <UART_SetConfig+0x258>
 800bfb8:	e012      	b.n	800bfe0 <UART_SetConfig+0x270>
 800bfba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfbe:	d006      	beq.n	800bfce <UART_SetConfig+0x25e>
 800bfc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfc4:	d009      	beq.n	800bfda <UART_SetConfig+0x26a>
 800bfc6:	e00b      	b.n	800bfe0 <UART_SetConfig+0x270>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	77fb      	strb	r3, [r7, #31]
 800bfcc:	e077      	b.n	800c0be <UART_SetConfig+0x34e>
 800bfce:	2302      	movs	r3, #2
 800bfd0:	77fb      	strb	r3, [r7, #31]
 800bfd2:	e074      	b.n	800c0be <UART_SetConfig+0x34e>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	77fb      	strb	r3, [r7, #31]
 800bfd8:	e071      	b.n	800c0be <UART_SetConfig+0x34e>
 800bfda:	2308      	movs	r3, #8
 800bfdc:	77fb      	strb	r3, [r7, #31]
 800bfde:	e06e      	b.n	800c0be <UART_SetConfig+0x34e>
 800bfe0:	2310      	movs	r3, #16
 800bfe2:	77fb      	strb	r3, [r7, #31]
 800bfe4:	bf00      	nop
 800bfe6:	e06a      	b.n	800c0be <UART_SetConfig+0x34e>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a25      	ldr	r2, [pc, #148]	; (800c084 <UART_SetConfig+0x314>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d124      	bne.n	800c03c <UART_SetConfig+0x2cc>
 800bff2:	4b1e      	ldr	r3, [pc, #120]	; (800c06c <UART_SetConfig+0x2fc>)
 800bff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c000:	d012      	beq.n	800c028 <UART_SetConfig+0x2b8>
 800c002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c006:	d802      	bhi.n	800c00e <UART_SetConfig+0x29e>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d007      	beq.n	800c01c <UART_SetConfig+0x2ac>
 800c00c:	e012      	b.n	800c034 <UART_SetConfig+0x2c4>
 800c00e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c012:	d006      	beq.n	800c022 <UART_SetConfig+0x2b2>
 800c014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c018:	d009      	beq.n	800c02e <UART_SetConfig+0x2be>
 800c01a:	e00b      	b.n	800c034 <UART_SetConfig+0x2c4>
 800c01c:	2300      	movs	r3, #0
 800c01e:	77fb      	strb	r3, [r7, #31]
 800c020:	e04d      	b.n	800c0be <UART_SetConfig+0x34e>
 800c022:	2302      	movs	r3, #2
 800c024:	77fb      	strb	r3, [r7, #31]
 800c026:	e04a      	b.n	800c0be <UART_SetConfig+0x34e>
 800c028:	2304      	movs	r3, #4
 800c02a:	77fb      	strb	r3, [r7, #31]
 800c02c:	e047      	b.n	800c0be <UART_SetConfig+0x34e>
 800c02e:	2308      	movs	r3, #8
 800c030:	77fb      	strb	r3, [r7, #31]
 800c032:	e044      	b.n	800c0be <UART_SetConfig+0x34e>
 800c034:	2310      	movs	r3, #16
 800c036:	77fb      	strb	r3, [r7, #31]
 800c038:	bf00      	nop
 800c03a:	e040      	b.n	800c0be <UART_SetConfig+0x34e>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a11      	ldr	r2, [pc, #68]	; (800c088 <UART_SetConfig+0x318>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d139      	bne.n	800c0ba <UART_SetConfig+0x34a>
 800c046:	4b09      	ldr	r3, [pc, #36]	; (800c06c <UART_SetConfig+0x2fc>)
 800c048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c04c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c054:	d027      	beq.n	800c0a6 <UART_SetConfig+0x336>
 800c056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c05a:	d817      	bhi.n	800c08c <UART_SetConfig+0x31c>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d01c      	beq.n	800c09a <UART_SetConfig+0x32a>
 800c060:	e027      	b.n	800c0b2 <UART_SetConfig+0x342>
 800c062:	bf00      	nop
 800c064:	efff69f3 	.word	0xefff69f3
 800c068:	40011000 	.word	0x40011000
 800c06c:	40023800 	.word	0x40023800
 800c070:	40004400 	.word	0x40004400
 800c074:	40004800 	.word	0x40004800
 800c078:	40004c00 	.word	0x40004c00
 800c07c:	40005000 	.word	0x40005000
 800c080:	40011400 	.word	0x40011400
 800c084:	40007800 	.word	0x40007800
 800c088:	40007c00 	.word	0x40007c00
 800c08c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c090:	d006      	beq.n	800c0a0 <UART_SetConfig+0x330>
 800c092:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c096:	d009      	beq.n	800c0ac <UART_SetConfig+0x33c>
 800c098:	e00b      	b.n	800c0b2 <UART_SetConfig+0x342>
 800c09a:	2300      	movs	r3, #0
 800c09c:	77fb      	strb	r3, [r7, #31]
 800c09e:	e00e      	b.n	800c0be <UART_SetConfig+0x34e>
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	e00b      	b.n	800c0be <UART_SetConfig+0x34e>
 800c0a6:	2304      	movs	r3, #4
 800c0a8:	77fb      	strb	r3, [r7, #31]
 800c0aa:	e008      	b.n	800c0be <UART_SetConfig+0x34e>
 800c0ac:	2308      	movs	r3, #8
 800c0ae:	77fb      	strb	r3, [r7, #31]
 800c0b0:	e005      	b.n	800c0be <UART_SetConfig+0x34e>
 800c0b2:	2310      	movs	r3, #16
 800c0b4:	77fb      	strb	r3, [r7, #31]
 800c0b6:	bf00      	nop
 800c0b8:	e001      	b.n	800c0be <UART_SetConfig+0x34e>
 800c0ba:	2310      	movs	r3, #16
 800c0bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0c6:	d17c      	bne.n	800c1c2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800c0c8:	7ffb      	ldrb	r3, [r7, #31]
 800c0ca:	2b08      	cmp	r3, #8
 800c0cc:	d859      	bhi.n	800c182 <UART_SetConfig+0x412>
 800c0ce:	a201      	add	r2, pc, #4	; (adr r2, 800c0d4 <UART_SetConfig+0x364>)
 800c0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d4:	0800c0f9 	.word	0x0800c0f9
 800c0d8:	0800c117 	.word	0x0800c117
 800c0dc:	0800c135 	.word	0x0800c135
 800c0e0:	0800c183 	.word	0x0800c183
 800c0e4:	0800c14d 	.word	0x0800c14d
 800c0e8:	0800c183 	.word	0x0800c183
 800c0ec:	0800c183 	.word	0x0800c183
 800c0f0:	0800c183 	.word	0x0800c183
 800c0f4:	0800c16b 	.word	0x0800c16b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c0f8:	f7fc f876 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	005a      	lsls	r2, r3, #1
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	085b      	lsrs	r3, r3, #1
 800c106:	441a      	add	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c110:	b29b      	uxth	r3, r3
 800c112:	61bb      	str	r3, [r7, #24]
        break;
 800c114:	e038      	b.n	800c188 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c116:	f7fc f87b 	bl	8008210 <HAL_RCC_GetPCLK2Freq>
 800c11a:	4603      	mov	r3, r0
 800c11c:	005a      	lsls	r2, r3, #1
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	085b      	lsrs	r3, r3, #1
 800c124:	441a      	add	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c12e:	b29b      	uxth	r3, r3
 800c130:	61bb      	str	r3, [r7, #24]
        break;
 800c132:	e029      	b.n	800c188 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	085a      	lsrs	r2, r3, #1
 800c13a:	4b5d      	ldr	r3, [pc, #372]	; (800c2b0 <UART_SetConfig+0x540>)
 800c13c:	4413      	add	r3, r2
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	6852      	ldr	r2, [r2, #4]
 800c142:	fbb3 f3f2 	udiv	r3, r3, r2
 800c146:	b29b      	uxth	r3, r3
 800c148:	61bb      	str	r3, [r7, #24]
        break;
 800c14a:	e01d      	b.n	800c188 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c14c:	f7fb ff8e 	bl	800806c <HAL_RCC_GetSysClockFreq>
 800c150:	4603      	mov	r3, r0
 800c152:	005a      	lsls	r2, r3, #1
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	085b      	lsrs	r3, r3, #1
 800c15a:	441a      	add	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	fbb2 f3f3 	udiv	r3, r2, r3
 800c164:	b29b      	uxth	r3, r3
 800c166:	61bb      	str	r3, [r7, #24]
        break;
 800c168:	e00e      	b.n	800c188 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	085b      	lsrs	r3, r3, #1
 800c170:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	fbb2 f3f3 	udiv	r3, r2, r3
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	61bb      	str	r3, [r7, #24]
        break;
 800c180:	e002      	b.n	800c188 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	75fb      	strb	r3, [r7, #23]
        break;
 800c186:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	2b0f      	cmp	r3, #15
 800c18c:	d916      	bls.n	800c1bc <UART_SetConfig+0x44c>
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c194:	d212      	bcs.n	800c1bc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	f023 030f 	bic.w	r3, r3, #15
 800c19e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	f003 0307 	and.w	r3, r3, #7
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	89fb      	ldrh	r3, [r7, #14]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	89fa      	ldrh	r2, [r7, #14]
 800c1b8:	60da      	str	r2, [r3, #12]
 800c1ba:	e06e      	b.n	800c29a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	75fb      	strb	r3, [r7, #23]
 800c1c0:	e06b      	b.n	800c29a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800c1c2:	7ffb      	ldrb	r3, [r7, #31]
 800c1c4:	2b08      	cmp	r3, #8
 800c1c6:	d857      	bhi.n	800c278 <UART_SetConfig+0x508>
 800c1c8:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <UART_SetConfig+0x460>)
 800c1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ce:	bf00      	nop
 800c1d0:	0800c1f5 	.word	0x0800c1f5
 800c1d4:	0800c211 	.word	0x0800c211
 800c1d8:	0800c22d 	.word	0x0800c22d
 800c1dc:	0800c279 	.word	0x0800c279
 800c1e0:	0800c245 	.word	0x0800c245
 800c1e4:	0800c279 	.word	0x0800c279
 800c1e8:	0800c279 	.word	0x0800c279
 800c1ec:	0800c279 	.word	0x0800c279
 800c1f0:	0800c261 	.word	0x0800c261
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c1f4:	f7fb fff8 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	085b      	lsrs	r3, r3, #1
 800c200:	441a      	add	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	fbb2 f3f3 	udiv	r3, r2, r3
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	61bb      	str	r3, [r7, #24]
        break;
 800c20e:	e036      	b.n	800c27e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c210:	f7fb fffe 	bl	8008210 <HAL_RCC_GetPCLK2Freq>
 800c214:	4602      	mov	r2, r0
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	085b      	lsrs	r3, r3, #1
 800c21c:	441a      	add	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	fbb2 f3f3 	udiv	r3, r2, r3
 800c226:	b29b      	uxth	r3, r3
 800c228:	61bb      	str	r3, [r7, #24]
        break;
 800c22a:	e028      	b.n	800c27e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	085a      	lsrs	r2, r3, #1
 800c232:	4b20      	ldr	r3, [pc, #128]	; (800c2b4 <UART_SetConfig+0x544>)
 800c234:	4413      	add	r3, r2
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	6852      	ldr	r2, [r2, #4]
 800c23a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c23e:	b29b      	uxth	r3, r3
 800c240:	61bb      	str	r3, [r7, #24]
        break;
 800c242:	e01c      	b.n	800c27e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c244:	f7fb ff12 	bl	800806c <HAL_RCC_GetSysClockFreq>
 800c248:	4602      	mov	r2, r0
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	085b      	lsrs	r3, r3, #1
 800c250:	441a      	add	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	fbb2 f3f3 	udiv	r3, r2, r3
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	61bb      	str	r3, [r7, #24]
        break;
 800c25e:	e00e      	b.n	800c27e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	085b      	lsrs	r3, r3, #1
 800c266:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c272:	b29b      	uxth	r3, r3
 800c274:	61bb      	str	r3, [r7, #24]
        break;
 800c276:	e002      	b.n	800c27e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	75fb      	strb	r3, [r7, #23]
        break;
 800c27c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	2b0f      	cmp	r3, #15
 800c282:	d908      	bls.n	800c296 <UART_SetConfig+0x526>
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c28a:	d204      	bcs.n	800c296 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	69ba      	ldr	r2, [r7, #24]
 800c292:	60da      	str	r2, [r3, #12]
 800c294:	e001      	b.n	800c29a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3720      	adds	r7, #32
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	01e84800 	.word	0x01e84800
 800c2b4:	00f42400 	.word	0x00f42400

0800c2b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00a      	beq.n	800c2e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e6:	f003 0302 	and.w	r3, r3, #2
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00a      	beq.n	800c304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	430a      	orrs	r2, r1
 800c302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	f003 0304 	and.w	r3, r3, #4
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00a      	beq.n	800c326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	430a      	orrs	r2, r1
 800c324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32a:	f003 0308 	and.w	r3, r3, #8
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00a      	beq.n	800c348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	430a      	orrs	r2, r1
 800c346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34c:	f003 0310 	and.w	r3, r3, #16
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00a      	beq.n	800c36a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	430a      	orrs	r2, r1
 800c368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36e:	f003 0320 	and.w	r3, r3, #32
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00a      	beq.n	800c38c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c394:	2b00      	cmp	r3, #0
 800c396:	d01a      	beq.n	800c3ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3b6:	d10a      	bne.n	800c3ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	605a      	str	r2, [r3, #4]
  }
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af02      	add	r7, sp, #8
 800c402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c40a:	f7f6 ff9d 	bl	8003348 <HAL_GetTick>
 800c40e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0308 	and.w	r3, r3, #8
 800c41a:	2b08      	cmp	r3, #8
 800c41c:	d10e      	bne.n	800c43c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c41e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2200      	movs	r2, #0
 800c428:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f814 	bl	800c45a <UART_WaitOnFlagUntilTimeout>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c438:	2303      	movs	r3, #3
 800c43a:	e00a      	b.n	800c452 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2220      	movs	r2, #32
 800c440:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2220      	movs	r2, #32
 800c446:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b084      	sub	sp, #16
 800c45e:	af00      	add	r7, sp, #0
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	60b9      	str	r1, [r7, #8]
 800c464:	603b      	str	r3, [r7, #0]
 800c466:	4613      	mov	r3, r2
 800c468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c46a:	e02a      	b.n	800c4c2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c472:	d026      	beq.n	800c4c2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c474:	f7f6 ff68 	bl	8003348 <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	429a      	cmp	r2, r3
 800c482:	d302      	bcc.n	800c48a <UART_WaitOnFlagUntilTimeout+0x30>
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d11b      	bne.n	800c4c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c498:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	689a      	ldr	r2, [r3, #8]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f022 0201 	bic.w	r2, r2, #1
 800c4a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2220      	movs	r2, #32
 800c4ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2220      	movs	r2, #32
 800c4b4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e00f      	b.n	800c4e2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	69da      	ldr	r2, [r3, #28]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	bf0c      	ite	eq
 800c4d2:	2301      	moveq	r3, #1
 800c4d4:	2300      	movne	r3, #0
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	79fb      	ldrb	r3, [r7, #7]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d0c5      	beq.n	800c46c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d027      	beq.n	800c556 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	4b2f      	ldr	r3, [pc, #188]	; (800c5cc <FMC_SDRAM_Init+0xe0>)
 800c510:	4013      	ands	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c51c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c522:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c528:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c52e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c534:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c53a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c540:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c546:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	e032      	b.n	800c5bc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c562:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c56c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c572:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	4b12      	ldr	r3, [pc, #72]	; (800c5cc <FMC_SDRAM_Init+0xe0>)
 800c584:	4013      	ands	r3, r2
 800c586:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c590:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c596:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c59c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c5a2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c5a8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	ffff8000 	.word	0xffff8000

0800c5d0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b087      	sub	sp, #28
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d02e      	beq.n	800c648 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c5f6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	3b01      	subs	r3, #1
 800c604:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c606:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c610:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	3b01      	subs	r3, #1
 800c618:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c61a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	3b01      	subs	r3, #1
 800c622:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c624:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c62e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	3b01      	subs	r3, #1
 800c636:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c638:	4313      	orrs	r3, r2
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	4313      	orrs	r3, r2
 800c63e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	697a      	ldr	r2, [r7, #20]
 800c644:	609a      	str	r2, [r3, #8]
 800c646:	e039      	b.n	800c6bc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	4b1e      	ldr	r3, [pc, #120]	; (800c6cc <FMC_SDRAM_Timing_Init+0xfc>)
 800c652:	4013      	ands	r3, r2
 800c654:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	3b01      	subs	r3, #1
 800c664:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c666:	4313      	orrs	r3, r2
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c67a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	3b01      	subs	r3, #1
 800c688:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c68a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	3b01      	subs	r3, #1
 800c692:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c694:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c69e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	697a      	ldr	r2, [r7, #20]
 800c6b4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	ff0f0fff 	.word	0xff0f0fff

0800c6d0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c6e8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800c6f2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	695a      	ldr	r2, [r3, #20]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c738:	b084      	sub	sp, #16
 800c73a:	b480      	push	{r7}
 800c73c:	b085      	sub	sp, #20
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	f107 001c 	add.w	r0, r7, #28
 800c746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c74e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c750:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c752:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c756:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c758:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c75a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c75e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c762:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	4313      	orrs	r3, r2
 800c768:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	4b07      	ldr	r3, [pc, #28]	; (800c78c <SDMMC_Init+0x54>)
 800c770:	4013      	ands	r3, r2
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	b004      	add	sp, #16
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	ffff8100 	.word	0xffff8100

0800c790 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c7aa:	b480      	push	{r7}
 800c7ac:	b083      	sub	sp, #12
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2203      	movs	r2, #3
 800c7b6:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0303 	and.w	r3, r3, #3
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
	...

0800c7e4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c802:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c808:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c80e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	4313      	orrs	r3, r2
 800c814:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68da      	ldr	r2, [r3, #12]
 800c81a:	4b06      	ldr	r3, [pc, #24]	; (800c834 <SDMMC_SendCommand+0x50>)
 800c81c:	4013      	ands	r3, r2
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	431a      	orrs	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3714      	adds	r7, #20
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	fffff000 	.word	0xfffff000

0800c838 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	b2db      	uxtb	r3, r3
}
 800c846:	4618      	mov	r0, r3
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3314      	adds	r3, #20
 800c864:	461a      	mov	r2, r3
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	4413      	add	r3, r2
 800c86a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
}  
 800c870:	4618      	mov	r0, r3
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c8a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c8ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	431a      	orrs	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0

}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c8e6:	2310      	movs	r3, #16
 800c8e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8ea:	2340      	movs	r3, #64	; 0x40
 800c8ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8f6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8f8:	f107 0308 	add.w	r3, r7, #8
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff ff70 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c904:	f241 3288 	movw	r2, #5000	; 0x1388
 800c908:	2110      	movs	r1, #16
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fa64 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800c910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c912:	69fb      	ldr	r3, [r7, #28]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3720      	adds	r7, #32
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c926:	2300      	movs	r3, #0
 800c928:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c92e:	2311      	movs	r3, #17
 800c930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c932:	2340      	movs	r3, #64	; 0x40
 800c934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c936:	2300      	movs	r3, #0
 800c938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c93e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c940:	f107 0308 	add.w	r3, r7, #8
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff ff4c 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c950:	2111      	movs	r1, #17
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fa40 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800c958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c95a:	69fb      	ldr	r3, [r7, #28]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3720      	adds	r7, #32
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c96e:	2300      	movs	r3, #0
 800c970:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c976:	2312      	movs	r3, #18
 800c978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c97a:	2340      	movs	r3, #64	; 0x40
 800c97c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c97e:	2300      	movs	r3, #0
 800c980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c986:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c988:	f107 0308 	add.w	r3, r7, #8
 800c98c:	4619      	mov	r1, r3
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7ff ff28 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c994:	f241 3288 	movw	r2, #5000	; 0x1388
 800c998:	2112      	movs	r1, #18
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fa1c 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800c9a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3720      	adds	r7, #32
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c9be:	2318      	movs	r3, #24
 800c9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9c2:	2340      	movs	r3, #64	; 0x40
 800c9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9d0:	f107 0308 	add.w	r3, r7, #8
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff ff04 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e0:	2118      	movs	r1, #24
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f9f8 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800c9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ea:	69fb      	ldr	r3, [r7, #28]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ca06:	2319      	movs	r3, #25
 800ca08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca0a:	2340      	movs	r3, #64	; 0x40
 800ca0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca16:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca18:	f107 0308 	add.w	r3, r7, #8
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f7ff fee0 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ca24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca28:	2119      	movs	r1, #25
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f9d4 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800ca30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca32:	69fb      	ldr	r3, [r7, #28]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3720      	adds	r7, #32
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b088      	sub	sp, #32
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ca44:	2300      	movs	r3, #0
 800ca46:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ca4c:	230c      	movs	r3, #12
 800ca4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca50:	2340      	movs	r3, #64	; 0x40
 800ca52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca54:	2300      	movs	r3, #0
 800ca56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca5c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca5e:	f107 0308 	add.w	r3, r7, #8
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff febd 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800ca6a:	4a05      	ldr	r2, [pc, #20]	; (800ca80 <SDMMC_CmdStopTransfer+0x44>)
 800ca6c:	210c      	movs	r1, #12
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f9b2 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800ca74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca76:	69fb      	ldr	r3, [r7, #28]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3720      	adds	r7, #32
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	05f5e100 	.word	0x05f5e100

0800ca84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08a      	sub	sp, #40	; 0x28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ca90:	2300      	movs	r3, #0
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ca98:	2307      	movs	r3, #7
 800ca9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca9c:	2340      	movs	r3, #64	; 0x40
 800ca9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caa0:	2300      	movs	r3, #0
 800caa2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caa8:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caaa:	f107 0310 	add.w	r3, r7, #16
 800caae:	4619      	mov	r1, r3
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f7ff fe97 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cab6:	f241 3288 	movw	r2, #5000	; 0x1388
 800caba:	2107      	movs	r1, #7
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f98b 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800cac2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3728      	adds	r7, #40	; 0x28
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b088      	sub	sp, #32
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cad6:	2300      	movs	r3, #0
 800cad8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cade:	2300      	movs	r3, #0
 800cae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cae2:	2300      	movs	r3, #0
 800cae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cae6:	2300      	movs	r3, #0
 800cae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caee:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caf0:	f107 0308 	add.w	r3, r7, #8
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff fe74 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f941 	bl	800cd84 <SDMMC_GetCmdError>
 800cb02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb04:	69fb      	ldr	r3, [r7, #28]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3720      	adds	r7, #32
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b088      	sub	sp, #32
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cb16:	2300      	movs	r3, #0
 800cb18:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cb1a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cb1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cb20:	2308      	movs	r3, #8
 800cb22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb30:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb32:	f107 0308 	add.w	r3, r7, #8
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7ff fe53 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fb12 	bl	800d168 <SDMMC_GetCmdResp7>
 800cb44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb46:	69fb      	ldr	r3, [r7, #28]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cb62:	2337      	movs	r3, #55	; 0x37
 800cb64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb66:	2340      	movs	r3, #64	; 0x40
 800cb68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb72:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb74:	f107 0308 	add.w	r3, r7, #8
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff fe32 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cb80:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb84:	2137      	movs	r1, #55	; 0x37
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f926 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800cb8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3720      	adds	r7, #32
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b088      	sub	sp, #32
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cba2:	2300      	movs	r3, #0
 800cba4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	4b0d      	ldr	r3, [pc, #52]	; (800cbe0 <SDMMC_CmdAppOperCommand+0x48>)
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cbae:	2329      	movs	r3, #41	; 0x29
 800cbb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbb2:	2340      	movs	r3, #64	; 0x40
 800cbb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbbe:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbc0:	f107 0308 	add.w	r3, r7, #8
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff fe0c 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fa29 	bl	800d024 <SDMMC_GetCmdResp3>
 800cbd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbd4:	69fb      	ldr	r3, [r7, #28]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3720      	adds	r7, #32
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	80100000 	.word	0x80100000

0800cbe4 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cbf6:	2306      	movs	r3, #6
 800cbf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbfa:	2340      	movs	r3, #64	; 0x40
 800cbfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc06:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc08:	f107 0308 	add.w	r3, r7, #8
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff fde8 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cc14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc18:	2106      	movs	r1, #6
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f8dc 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800cc20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc22:	69fb      	ldr	r3, [r7, #28]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3720      	adds	r7, #32
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cc34:	2300      	movs	r3, #0
 800cc36:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cc3c:	2333      	movs	r3, #51	; 0x33
 800cc3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc40:	2340      	movs	r3, #64	; 0x40
 800cc42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc44:	2300      	movs	r3, #0
 800cc46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc4c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc4e:	f107 0308 	add.w	r3, r7, #8
 800cc52:	4619      	mov	r1, r3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7ff fdc5 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cc5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc5e:	2133      	movs	r1, #51	; 0x33
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f8b9 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800cc66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc68:	69fb      	ldr	r3, [r7, #28]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3720      	adds	r7, #32
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b088      	sub	sp, #32
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cc82:	2302      	movs	r3, #2
 800cc84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cc86:	23c0      	movs	r3, #192	; 0xc0
 800cc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc92:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc94:	f107 0308 	add.w	r3, r7, #8
 800cc98:	4619      	mov	r1, r3
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7ff fda2 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f97f 	bl	800cfa4 <SDMMC_GetCmdResp2>
 800cca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cca8:	69fb      	ldr	r3, [r7, #28]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3720      	adds	r7, #32
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b088      	sub	sp, #32
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ccc4:	2309      	movs	r3, #9
 800ccc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ccc8:	23c0      	movs	r3, #192	; 0xc0
 800ccca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cccc:	2300      	movs	r3, #0
 800ccce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccd6:	f107 0308 	add.w	r3, r7, #8
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff fd81 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f95e 	bl	800cfa4 <SDMMC_GetCmdResp2>
 800cce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccea:	69fb      	ldr	r3, [r7, #28]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3720      	adds	r7, #32
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cd06:	2303      	movs	r3, #3
 800cd08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd0a:	2340      	movs	r3, #64	; 0x40
 800cd0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd16:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd18:	f107 0308 	add.w	r3, r7, #8
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fd60 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	2103      	movs	r1, #3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 f9af 	bl	800d08c <SDMMC_GetCmdResp6>
 800cd2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd30:	69fb      	ldr	r3, [r7, #28]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3720      	adds	r7, #32
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b088      	sub	sp, #32
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cd44:	2300      	movs	r3, #0
 800cd46:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cd4c:	230d      	movs	r3, #13
 800cd4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd50:	2340      	movs	r3, #64	; 0x40
 800cd52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd54:	2300      	movs	r3, #0
 800cd56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd5c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd5e:	f107 0308 	add.w	r3, r7, #8
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff fd3d 	bl	800c7e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cd6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd6e:	210d      	movs	r1, #13
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f831 	bl	800cdd8 <SDMMC_GetCmdResp1>
 800cd76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd78:	69fb      	ldr	r3, [r7, #28]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3720      	adds	r7, #32
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cd84:	b490      	push	{r4, r7}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cd8c:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <SDMMC_GetCmdError+0x4c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a10      	ldr	r2, [pc, #64]	; (800cdd4 <SDMMC_GetCmdError+0x50>)
 800cd92:	fba2 2303 	umull	r2, r3, r2, r3
 800cd96:	0a5b      	lsrs	r3, r3, #9
 800cd98:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800cda0:	4623      	mov	r3, r4
 800cda2:	1e5c      	subs	r4, r3, #1
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cda8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdac:	e00a      	b.n	800cdc4 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d0f2      	beq.n	800cda0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800cdc0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bc90      	pop	{r4, r7}
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	20000098 	.word	0x20000098
 800cdd4:	10624dd3 	.word	0x10624dd3

0800cdd8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cdd8:	b590      	push	{r4, r7, lr}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	460b      	mov	r3, r1
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800cde6:	4b6c      	ldr	r3, [pc, #432]	; (800cf98 <SDMMC_GetCmdResp1+0x1c0>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a6c      	ldr	r2, [pc, #432]	; (800cf9c <SDMMC_GetCmdResp1+0x1c4>)
 800cdec:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf0:	0a5b      	lsrs	r3, r3, #9
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800cdf8:	4623      	mov	r3, r4
 800cdfa:	1e5c      	subs	r4, r3, #1
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d102      	bne.n	800ce06 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce04:	e0c3      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d0f2      	beq.n	800cdf8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce16:	f003 0304 	and.w	r3, r3, #4
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d004      	beq.n	800ce28 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2204      	movs	r2, #4
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce24:	2304      	movs	r3, #4
 800ce26:	e0b2      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce2c:	f003 0301 	and.w	r3, r3, #1
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d004      	beq.n	800ce3e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2201      	movs	r2, #1
 800ce38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e0a7      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7ff fcfa 	bl	800c838 <SDMMC_GetCommandResponse>
 800ce44:	4603      	mov	r3, r0
 800ce46:	461a      	mov	r2, r3
 800ce48:	7afb      	ldrb	r3, [r7, #11]
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d001      	beq.n	800ce52 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e09d      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ce58:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f7ff fcf8 	bl	800c852 <SDMMC_GetResponse>
 800ce62:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce64:	697a      	ldr	r2, [r7, #20]
 800ce66:	4b4e      	ldr	r3, [pc, #312]	; (800cfa0 <SDMMC_GetCmdResp1+0x1c8>)
 800ce68:	4013      	ands	r3, r2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e08d      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da02      	bge.n	800ce7e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ce78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce7c:	e087      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ce88:	2340      	movs	r3, #64	; 0x40
 800ce8a:	e080      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ce96:	2380      	movs	r3, #128	; 0x80
 800ce98:	e079      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cea8:	e071      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ceb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ceb8:	e069      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cec8:	e061      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ced4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ced8:	e059      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cee8:	e051      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cef8:	e049      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cf04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf08:	e041      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d002      	beq.n	800cf1a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800cf14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf18:	e039      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cf24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf28:	e031      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cf34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cf38:	e029      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cf44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf48:	e021      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cf54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cf58:	e019      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cf64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cf68:	e011      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cf74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cf78:	e009      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f003 0308 	and.w	r3, r3, #8
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cf84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cf88:	e001      	b.n	800cf8e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cf8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	371c      	adds	r7, #28
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd90      	pop	{r4, r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20000098 	.word	0x20000098
 800cf9c:	10624dd3 	.word	0x10624dd3
 800cfa0:	fdffe008 	.word	0xfdffe008

0800cfa4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cfa4:	b490      	push	{r4, r7}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cfac:	4b1b      	ldr	r3, [pc, #108]	; (800d01c <SDMMC_GetCmdResp2+0x78>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a1b      	ldr	r2, [pc, #108]	; (800d020 <SDMMC_GetCmdResp2+0x7c>)
 800cfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfb6:	0a5b      	lsrs	r3, r3, #9
 800cfb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfbc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800cfc0:	4623      	mov	r3, r4
 800cfc2:	1e5c      	subs	r4, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d102      	bne.n	800cfce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfcc:	e020      	b.n	800d010 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0f2      	beq.n	800cfc0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfde:	f003 0304 	and.w	r3, r3, #4
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d004      	beq.n	800cff0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2204      	movs	r2, #4
 800cfea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfec:	2304      	movs	r3, #4
 800cfee:	e00f      	b.n	800d010 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d004      	beq.n	800d006 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d002:	2301      	movs	r3, #1
 800d004:	e004      	b.n	800d010 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bc90      	pop	{r4, r7}
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	20000098 	.word	0x20000098
 800d020:	10624dd3 	.word	0x10624dd3

0800d024 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d024:	b490      	push	{r4, r7}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800d02c:	4b15      	ldr	r3, [pc, #84]	; (800d084 <SDMMC_GetCmdResp3+0x60>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a15      	ldr	r2, [pc, #84]	; (800d088 <SDMMC_GetCmdResp3+0x64>)
 800d032:	fba2 2303 	umull	r2, r3, r2, r3
 800d036:	0a5b      	lsrs	r3, r3, #9
 800d038:	f241 3288 	movw	r2, #5000	; 0x1388
 800d03c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800d040:	4623      	mov	r3, r4
 800d042:	1e5c      	subs	r4, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d102      	bne.n	800d04e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d04c:	e015      	b.n	800d07a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d052:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0f2      	beq.n	800d040 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05e:	f003 0304 	and.w	r3, r3, #4
 800d062:	2b00      	cmp	r3, #0
 800d064:	d004      	beq.n	800d070 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2204      	movs	r2, #4
 800d06a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d06c:	2304      	movs	r3, #4
 800d06e:	e004      	b.n	800d07a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d076:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bc90      	pop	{r4, r7}
 800d082:	4770      	bx	lr
 800d084:	20000098 	.word	0x20000098
 800d088:	10624dd3 	.word	0x10624dd3

0800d08c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	460b      	mov	r3, r1
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800d09a:	4b31      	ldr	r3, [pc, #196]	; (800d160 <SDMMC_GetCmdResp6+0xd4>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a31      	ldr	r2, [pc, #196]	; (800d164 <SDMMC_GetCmdResp6+0xd8>)
 800d0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a4:	0a5b      	lsrs	r3, r3, #9
 800d0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800d0ae:	4623      	mov	r3, r4
 800d0b0:	1e5c      	subs	r4, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d102      	bne.n	800d0bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0ba:	e04c      	b.n	800d156 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d0f2      	beq.n	800d0ae <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0cc:	f003 0304 	and.w	r3, r3, #4
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2204      	movs	r2, #4
 800d0d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0da:	2304      	movs	r3, #4
 800d0dc:	e03b      	b.n	800d156 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d004      	beq.n	800d0f4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e030      	b.n	800d156 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7ff fb9f 	bl	800c838 <SDMMC_GetCommandResponse>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	7afb      	ldrb	r3, [r7, #11]
 800d100:	4293      	cmp	r3, r2
 800d102:	d001      	beq.n	800d108 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d104:	2301      	movs	r3, #1
 800d106:	e026      	b.n	800d156 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d10e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d110:	2100      	movs	r1, #0
 800d112:	68f8      	ldr	r0, [r7, #12]
 800d114:	f7ff fb9d 	bl	800c852 <SDMMC_GetResponse>
 800d118:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	0c1b      	lsrs	r3, r3, #16
 800d128:	b29a      	uxth	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d12e:	2300      	movs	r3, #0
 800d130:	e011      	b.n	800d156 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d13c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d140:	e009      	b.n	800d156 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d150:	e001      	b.n	800d156 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d156:	4618      	mov	r0, r3
 800d158:	371c      	adds	r7, #28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd90      	pop	{r4, r7, pc}
 800d15e:	bf00      	nop
 800d160:	20000098 	.word	0x20000098
 800d164:	10624dd3 	.word	0x10624dd3

0800d168 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d168:	b490      	push	{r4, r7}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800d170:	4b18      	ldr	r3, [pc, #96]	; (800d1d4 <SDMMC_GetCmdResp7+0x6c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a18      	ldr	r2, [pc, #96]	; (800d1d8 <SDMMC_GetCmdResp7+0x70>)
 800d176:	fba2 2303 	umull	r2, r3, r2, r3
 800d17a:	0a5b      	lsrs	r3, r3, #9
 800d17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d180:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800d184:	4623      	mov	r3, r4
 800d186:	1e5c      	subs	r4, r3, #1
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d102      	bne.n	800d192 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d18c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d190:	e01a      	b.n	800d1c8 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d196:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0f2      	beq.n	800d184 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a2:	f003 0304 	and.w	r3, r3, #4
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d004      	beq.n	800d1b4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2240      	movs	r2, #64	; 0x40
 800d1ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1b0:	2304      	movs	r3, #4
 800d1b2:	e009      	b.n	800d1c8 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2240      	movs	r2, #64	; 0x40
 800d1c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d1c6:	2300      	movs	r3, #0
  
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bc90      	pop	{r4, r7}
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	20000098 	.word	0x20000098
 800d1d8:	10624dd3 	.word	0x10624dd3

0800d1dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d1dc:	b084      	sub	sp, #16
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	f107 001c 	add.w	r0, r7, #28
 800d1ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d120      	bne.n	800d236 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68da      	ldr	r2, [r3, #12]
 800d204:	4b20      	ldr	r3, [pc, #128]	; (800d288 <USB_CoreInit+0xac>)
 800d206:	4013      	ands	r3, r2
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d105      	bne.n	800d22a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f942 	bl	800d4b4 <USB_CoreReset>
 800d230:	4603      	mov	r3, r0
 800d232:	73fb      	strb	r3, [r7, #15]
 800d234:	e010      	b.n	800d258 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f936 	bl	800d4b4 <USB_CoreReset>
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d10b      	bne.n	800d276 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	f043 0206 	orr.w	r2, r3, #6
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f043 0220 	orr.w	r2, r3, #32
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d276:	7bfb      	ldrb	r3, [r7, #15]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d282:	b004      	add	sp, #16
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	ffbdffbf 	.word	0xffbdffbf

0800d28c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f043 0201 	orr.w	r2, r3, #1
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b083      	sub	sp, #12
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f023 0201 	bic.w	r2, r3, #1
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d2e8:	78fb      	ldrb	r3, [r7, #3]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d106      	bne.n	800d2fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	60da      	str	r2, [r3, #12]
 800d2fa:	e00b      	b.n	800d314 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d2fc:	78fb      	ldrb	r3, [r7, #3]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d106      	bne.n	800d310 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	60da      	str	r2, [r3, #12]
 800d30e:	e001      	b.n	800d314 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e003      	b.n	800d31c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d314:	2032      	movs	r0, #50	; 0x32
 800d316:	f7f6 f823 	bl	8003360 <HAL_Delay>

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d32e:	2300      	movs	r3, #0
 800d330:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	019b      	lsls	r3, r3, #6
 800d336:	f043 0220 	orr.w	r2, r3, #32
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3301      	adds	r3, #1
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	4a09      	ldr	r2, [pc, #36]	; (800d36c <USB_FlushTxFifo+0x48>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d901      	bls.n	800d350 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d34c:	2303      	movs	r3, #3
 800d34e:	e006      	b.n	800d35e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	f003 0320 	and.w	r3, r3, #32
 800d358:	2b20      	cmp	r3, #32
 800d35a:	d0f0      	beq.n	800d33e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	00030d40 	.word	0x00030d40

0800d370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d378:	2300      	movs	r3, #0
 800d37a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2210      	movs	r2, #16
 800d380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3301      	adds	r3, #1
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	4a09      	ldr	r2, [pc, #36]	; (800d3b0 <USB_FlushRxFifo+0x40>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d901      	bls.n	800d394 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d390:	2303      	movs	r3, #3
 800d392:	e006      	b.n	800d3a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	f003 0310 	and.w	r3, r3, #16
 800d39c:	2b10      	cmp	r3, #16
 800d39e:	d0f0      	beq.n	800d382 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	00030d40 	.word	0x00030d40

0800d3b4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b089      	sub	sp, #36	; 0x24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	4611      	mov	r1, r2
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	71fb      	strb	r3, [r7, #7]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d3d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d11a      	bne.n	800d410 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d3da:	88bb      	ldrh	r3, [r7, #4]
 800d3dc:	3303      	adds	r3, #3
 800d3de:	089b      	lsrs	r3, r3, #2
 800d3e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	61bb      	str	r3, [r7, #24]
 800d3e6:	e00f      	b.n	800d408 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800d3e8:	79fb      	ldrb	r3, [r7, #7]
 800d3ea:	031a      	lsls	r2, r3, #12
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	3304      	adds	r3, #4
 800d400:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	3301      	adds	r3, #1
 800d406:	61bb      	str	r3, [r7, #24]
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d3eb      	bcc.n	800d3e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3724      	adds	r7, #36	; 0x24
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d41e:	b480      	push	{r7}
 800d420:	b089      	sub	sp, #36	; 0x24
 800d422:	af00      	add	r7, sp, #0
 800d424:	60f8      	str	r0, [r7, #12]
 800d426:	60b9      	str	r1, [r7, #8]
 800d428:	4613      	mov	r3, r2
 800d42a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d434:	88fb      	ldrh	r3, [r7, #6]
 800d436:	3303      	adds	r3, #3
 800d438:	089b      	lsrs	r3, r3, #2
 800d43a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d43c:	2300      	movs	r3, #0
 800d43e:	61bb      	str	r3, [r7, #24]
 800d440:	e00b      	b.n	800d45a <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	601a      	str	r2, [r3, #0]
    pDest++;
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	3304      	adds	r3, #4
 800d452:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	3301      	adds	r3, #1
 800d458:	61bb      	str	r3, [r7, #24]
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d3ef      	bcc.n	800d442 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d462:	69fb      	ldr	r3, [r7, #28]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3724      	adds	r7, #36	; 0x24
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	4013      	ands	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d488:	68fb      	ldr	r3, [r7, #12]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d496:	b480      	push	{r7}
 800d498:	b083      	sub	sp, #12
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	f003 0301 	and.w	r3, r3, #1
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
	...

0800d4b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	60fb      	str	r3, [r7, #12]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	4a13      	ldr	r2, [pc, #76]	; (800d518 <USB_CoreReset+0x64>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d901      	bls.n	800d4d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e01b      	b.n	800d50a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	daf2      	bge.n	800d4c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	f043 0201 	orr.w	r2, r3, #1
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	60fb      	str	r3, [r7, #12]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4a09      	ldr	r2, [pc, #36]	; (800d518 <USB_CoreReset+0x64>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d901      	bls.n	800d4fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	e006      	b.n	800d50a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b01      	cmp	r3, #1
 800d506:	d0f0      	beq.n	800d4ea <USB_CoreReset+0x36>

  return HAL_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	00030d40 	.word	0x00030d40

0800d51c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d51c:	b084      	sub	sp, #16
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	f107 001c 	add.w	r0, r7, #28
 800d52a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d538:	461a      	mov	r2, r3
 800d53a:	2300      	movs	r3, #0
 800d53c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d542:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d552:	2b00      	cmp	r3, #0
 800d554:	d018      	beq.n	800d588 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d10a      	bne.n	800d572 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d56a:	f043 0304 	orr.w	r3, r3, #4
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	e014      	b.n	800d59c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d580:	f023 0304 	bic.w	r3, r3, #4
 800d584:	6013      	str	r3, [r2, #0]
 800d586:	e009      	b.n	800d59c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d596:	f023 0304 	bic.w	r3, r3, #4
 800d59a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d59c:	2110      	movs	r1, #16
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7ff fec0 	bl	800d324 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7ff fee3 	bl	800d370 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e015      	b.n	800d5dc <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	015a      	lsls	r2, r3, #5
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	4413      	add	r3, r2
 800d5b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5bc:	461a      	mov	r2, r3
 800d5be:	f04f 33ff 	mov.w	r3, #4294967295
 800d5c2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	015a      	lsls	r2, r3, #5
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d3e5      	bcc.n	800d5b0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f8ac 	bl	800d744 <USB_DriveVbus>

  HAL_Delay(200U);
 800d5ec:	20c8      	movs	r0, #200	; 0xc8
 800d5ee:	f7f5 feb7 	bl	8003360 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fe:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00b      	beq.n	800d624 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d612:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a14      	ldr	r2, [pc, #80]	; (800d668 <USB_HostInit+0x14c>)
 800d618:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a13      	ldr	r2, [pc, #76]	; (800d66c <USB_HostInit+0x150>)
 800d61e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d622:	e009      	b.n	800d638 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2280      	movs	r2, #128	; 0x80
 800d628:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4a10      	ldr	r2, [pc, #64]	; (800d670 <USB_HostInit+0x154>)
 800d62e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a10      	ldr	r2, [pc, #64]	; (800d674 <USB_HostInit+0x158>)
 800d634:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d105      	bne.n	800d64a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	699b      	ldr	r3, [r3, #24]
 800d642:	f043 0210 	orr.w	r2, r3, #16
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	699a      	ldr	r2, [r3, #24]
 800d64e:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <USB_HostInit+0x15c>)
 800d650:	4313      	orrs	r3, r2
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d662:	b004      	add	sp, #16
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	01000200 	.word	0x01000200
 800d66c:	00e00300 	.word	0x00e00300
 800d670:	00600080 	.word	0x00600080
 800d674:	004000e0 	.word	0x004000e0
 800d678:	a3200008 	.word	0xa3200008

0800d67c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d69a:	f023 0303 	bic.w	r3, r3, #3
 800d69e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	78fb      	ldrb	r3, [r7, #3]
 800d6aa:	f003 0303 	and.w	r3, r3, #3
 800d6ae:	68f9      	ldr	r1, [r7, #12]
 800d6b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d6b8:	78fb      	ldrb	r3, [r7, #3]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d107      	bne.n	800d6ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d6ca:	6053      	str	r3, [r2, #4]
 800d6cc:	e009      	b.n	800d6e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d6ce:	78fb      	ldrb	r3, [r7, #3]
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d106      	bne.n	800d6e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6da:	461a      	mov	r2, r3
 800d6dc:	f241 7370 	movw	r3, #6000	; 0x1770
 800d6e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d710:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d71e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d720:	2064      	movs	r0, #100	; 0x64
 800d722:	f7f5 fe1d 	bl	8003360 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d72e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d732:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d734:	200a      	movs	r0, #10
 800d736:	f7f5 fe13 	bl	8003360 <HAL_Delay>

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3710      	adds	r7, #16
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d754:	2300      	movs	r3, #0
 800d756:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d768:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d770:	2b00      	cmp	r3, #0
 800d772:	d109      	bne.n	800d788 <USB_DriveVbus+0x44>
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	2b01      	cmp	r3, #1
 800d778:	d106      	bne.n	800d788 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d782:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d786:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d78e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d792:	d109      	bne.n	800d7a8 <USB_DriveVbus+0x64>
 800d794:	78fb      	ldrb	r3, [r7, #3]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3714      	adds	r7, #20
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b085      	sub	sp, #20
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	0c5b      	lsrs	r3, r3, #17
 800d7d4:	f003 0303 	and.w	r3, r3, #3
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	b29b      	uxth	r3, r3
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
	...

0800d808 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800d808:	b480      	push	{r7}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	4608      	mov	r0, r1
 800d812:	4611      	mov	r1, r2
 800d814:	461a      	mov	r2, r3
 800d816:	4603      	mov	r3, r0
 800d818:	70fb      	strb	r3, [r7, #3]
 800d81a:	460b      	mov	r3, r1
 800d81c:	70bb      	strb	r3, [r7, #2]
 800d81e:	4613      	mov	r3, r2
 800d820:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	4413      	add	r3, r2
 800d832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d836:	461a      	mov	r2, r3
 800d838:	f04f 33ff 	mov.w	r3, #4294967295
 800d83c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d83e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d842:	2b03      	cmp	r3, #3
 800d844:	d87e      	bhi.n	800d944 <USB_HC_Init+0x13c>
 800d846:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <USB_HC_Init+0x44>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d85d 	.word	0x0800d85d
 800d850:	0800d907 	.word	0x0800d907
 800d854:	0800d85d 	.word	0x0800d85d
 800d858:	0800d8c9 	.word	0x0800d8c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d85c:	78fb      	ldrb	r3, [r7, #3]
 800d85e:	015a      	lsls	r2, r3, #5
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	4413      	add	r3, r2
 800d864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d868:	461a      	mov	r2, r3
 800d86a:	f240 439d 	movw	r3, #1181	; 0x49d
 800d86e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d870:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d874:	2b00      	cmp	r3, #0
 800d876:	da10      	bge.n	800d89a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d878:	78fb      	ldrb	r3, [r7, #3]
 800d87a:	015a      	lsls	r2, r3, #5
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	4413      	add	r3, r2
 800d880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	78fa      	ldrb	r2, [r7, #3]
 800d888:	0151      	lsls	r1, r2, #5
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	440a      	add	r2, r1
 800d88e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d896:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800d898:	e057      	b.n	800d94a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d051      	beq.n	800d94a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d8a6:	78fb      	ldrb	r3, [r7, #3]
 800d8a8:	015a      	lsls	r2, r3, #5
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	78fa      	ldrb	r2, [r7, #3]
 800d8b6:	0151      	lsls	r1, r2, #5
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	440a      	add	r2, r1
 800d8bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d8c4:	60d3      	str	r3, [r2, #12]
      break;
 800d8c6:	e040      	b.n	800d94a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d8c8:	78fb      	ldrb	r3, [r7, #3]
 800d8ca:	015a      	lsls	r2, r3, #5
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	f240 639d 	movw	r3, #1693	; 0x69d
 800d8da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d8dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	da34      	bge.n	800d94e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	015a      	lsls	r2, r3, #5
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	78fa      	ldrb	r2, [r7, #3]
 800d8f4:	0151      	lsls	r1, r2, #5
 800d8f6:	68ba      	ldr	r2, [r7, #8]
 800d8f8:	440a      	add	r2, r1
 800d8fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d902:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d904:	e023      	b.n	800d94e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d906:	78fb      	ldrb	r3, [r7, #3]
 800d908:	015a      	lsls	r2, r3, #5
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	4413      	add	r3, r2
 800d90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d912:	461a      	mov	r2, r3
 800d914:	f240 2325 	movw	r3, #549	; 0x225
 800d918:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d91a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	da17      	bge.n	800d952 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d922:	78fb      	ldrb	r3, [r7, #3]
 800d924:	015a      	lsls	r2, r3, #5
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	4413      	add	r3, r2
 800d92a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	78fa      	ldrb	r2, [r7, #3]
 800d932:	0151      	lsls	r1, r2, #5
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	440a      	add	r2, r1
 800d938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d93c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d940:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d942:	e006      	b.n	800d952 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d944:	2301      	movs	r3, #1
 800d946:	75fb      	strb	r3, [r7, #23]
      break;
 800d948:	e004      	b.n	800d954 <USB_HC_Init+0x14c>
      break;
 800d94a:	bf00      	nop
 800d94c:	e002      	b.n	800d954 <USB_HC_Init+0x14c>
      break;
 800d94e:	bf00      	nop
 800d950:	e000      	b.n	800d954 <USB_HC_Init+0x14c>
      break;
 800d952:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d95a:	699a      	ldr	r2, [r3, #24]
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	f003 030f 	and.w	r3, r3, #15
 800d962:	2101      	movs	r1, #1
 800d964:	fa01 f303 	lsl.w	r3, r1, r3
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d96e:	4313      	orrs	r3, r2
 800d970:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d97e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d982:	2b00      	cmp	r3, #0
 800d984:	da03      	bge.n	800d98e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d98a:	613b      	str	r3, [r7, #16]
 800d98c:	e001      	b.n	800d992 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800d992:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d996:	2b02      	cmp	r3, #2
 800d998:	d103      	bne.n	800d9a2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d99a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d99e:	60fb      	str	r3, [r7, #12]
 800d9a0:	e001      	b.n	800d9a6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d9a6:	787b      	ldrb	r3, [r7, #1]
 800d9a8:	059b      	lsls	r3, r3, #22
 800d9aa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d9ae:	78bb      	ldrb	r3, [r7, #2]
 800d9b0:	02db      	lsls	r3, r3, #11
 800d9b2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d9b6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d9b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9bc:	049b      	lsls	r3, r3, #18
 800d9be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d9c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d9c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d9c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d9ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d9d0:	78fb      	ldrb	r3, [r7, #3]
 800d9d2:	0159      	lsls	r1, r3, #5
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	440b      	add	r3, r1
 800d9d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9dc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d9e2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d9e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d10f      	bne.n	800da0c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d9ec:	78fb      	ldrb	r3, [r7, #3]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	78fa      	ldrb	r2, [r7, #3]
 800d9fc:	0151      	lsls	r1, r2, #5
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	440a      	add	r2, r1
 800da02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da0a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	371c      	adds	r7, #28
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop

0800da1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08c      	sub	sp, #48	; 0x30
 800da20:	af02      	add	r7, sp, #8
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	4613      	mov	r3, r2
 800da28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	785b      	ldrb	r3, [r3, #1]
 800da32:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800da34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da42:	2b00      	cmp	r3, #0
 800da44:	d028      	beq.n	800da98 <USB_HC_StartXfer+0x7c>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	791b      	ldrb	r3, [r3, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d124      	bne.n	800da98 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800da4e:	79fb      	ldrb	r3, [r7, #7]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10b      	bne.n	800da6c <USB_HC_StartXfer+0x50>
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	795b      	ldrb	r3, [r3, #5]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d107      	bne.n	800da6c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	4619      	mov	r1, r3
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 fa2e 	bl	800dec4 <USB_DoPing>
      return HAL_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	e112      	b.n	800dc92 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800da6c:	79fb      	ldrb	r3, [r7, #7]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d112      	bne.n	800da98 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	015a      	lsls	r2, r3, #5
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	4413      	add	r3, r2
 800da7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	69fa      	ldr	r2, [r7, #28]
 800da82:	0151      	lsls	r1, r2, #5
 800da84:	6a3a      	ldr	r2, [r7, #32]
 800da86:	440a      	add	r2, r1
 800da88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da8c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800da90:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	2200      	movs	r2, #0
 800da96:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d018      	beq.n	800dad2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	8912      	ldrh	r2, [r2, #8]
 800daa8:	4413      	add	r3, r2
 800daaa:	3b01      	subs	r3, #1
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	8912      	ldrh	r2, [r2, #8]
 800dab0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dab4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800dab6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dab8:	8b7b      	ldrh	r3, [r7, #26]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d90b      	bls.n	800dad6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800dabe:	8b7b      	ldrh	r3, [r7, #26]
 800dac0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800dac2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	8912      	ldrh	r2, [r2, #8]
 800dac8:	fb02 f203 	mul.w	r2, r2, r3
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	611a      	str	r2, [r3, #16]
 800dad0:	e001      	b.n	800dad6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800dad2:	2301      	movs	r3, #1
 800dad4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	78db      	ldrb	r3, [r3, #3]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d006      	beq.n	800daec <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800dade:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	8912      	ldrh	r2, [r2, #8]
 800dae4:	fb02 f203 	mul.w	r2, r2, r3
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800daf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800daf6:	04d9      	lsls	r1, r3, #19
 800daf8:	4b68      	ldr	r3, [pc, #416]	; (800dc9c <USB_HC_StartXfer+0x280>)
 800dafa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dafc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	7a9b      	ldrb	r3, [r3, #10]
 800db02:	075b      	lsls	r3, r3, #29
 800db04:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800db08:	69f9      	ldr	r1, [r7, #28]
 800db0a:	0148      	lsls	r0, r1, #5
 800db0c:	6a39      	ldr	r1, [r7, #32]
 800db0e:	4401      	add	r1, r0
 800db10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800db14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800db16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800db18:	79fb      	ldrb	r3, [r7, #7]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d009      	beq.n	800db32 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	68d9      	ldr	r1, [r3, #12]
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	015a      	lsls	r2, r3, #5
 800db26:	6a3b      	ldr	r3, [r7, #32]
 800db28:	4413      	add	r3, r2
 800db2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db2e:	460a      	mov	r2, r1
 800db30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	2b00      	cmp	r3, #0
 800db40:	bf0c      	ite	eq
 800db42:	2301      	moveq	r3, #1
 800db44:	2300      	movne	r3, #0
 800db46:	b2db      	uxtb	r3, r3
 800db48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	015a      	lsls	r2, r3, #5
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	4413      	add	r3, r2
 800db52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	69fa      	ldr	r2, [r7, #28]
 800db5a:	0151      	lsls	r1, r2, #5
 800db5c:	6a3a      	ldr	r2, [r7, #32]
 800db5e:	440a      	add	r2, r1
 800db60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	015a      	lsls	r2, r3, #5
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	4413      	add	r3, r2
 800db72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	7e7b      	ldrb	r3, [r7, #25]
 800db7a:	075b      	lsls	r3, r3, #29
 800db7c:	69f9      	ldr	r1, [r7, #28]
 800db7e:	0148      	lsls	r0, r1, #5
 800db80:	6a39      	ldr	r1, [r7, #32]
 800db82:	4401      	add	r1, r0
 800db84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800db88:	4313      	orrs	r3, r2
 800db8a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	015a      	lsls	r2, r3, #5
 800db90:	6a3b      	ldr	r3, [r7, #32]
 800db92:	4413      	add	r3, r2
 800db94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a41      	ldr	r2, [pc, #260]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800db9c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800db9e:	4b40      	ldr	r3, [pc, #256]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dba6:	4a3e      	ldr	r2, [pc, #248]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dba8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	78db      	ldrb	r3, [r3, #3]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d006      	beq.n	800dbc0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dbb2:	4b3b      	ldr	r3, [pc, #236]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbba:	4a39      	ldr	r2, [pc, #228]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dbbc:	6013      	str	r3, [r2, #0]
 800dbbe:	e005      	b.n	800dbcc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dbc0:	4b37      	ldr	r3, [pc, #220]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dbc8:	4a35      	ldr	r2, [pc, #212]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dbca:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dbcc:	4b34      	ldr	r3, [pc, #208]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dbd4:	4a32      	ldr	r2, [pc, #200]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dbd6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	015a      	lsls	r2, r3, #5
 800dbdc:	6a3b      	ldr	r3, [r7, #32]
 800dbde:	4413      	add	r3, r2
 800dbe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	4b2e      	ldr	r3, [pc, #184]	; (800dca0 <USB_HC_StartXfer+0x284>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d14e      	bne.n	800dc90 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	78db      	ldrb	r3, [r3, #3]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d14a      	bne.n	800dc90 <USB_HC_StartXfer+0x274>
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	691b      	ldr	r3, [r3, #16]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d046      	beq.n	800dc90 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	79db      	ldrb	r3, [r3, #7]
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	d830      	bhi.n	800dc6c <USB_HC_StartXfer+0x250>
 800dc0a:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <USB_HC_StartXfer+0x1f4>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc21 	.word	0x0800dc21
 800dc14:	0800dc45 	.word	0x0800dc45
 800dc18:	0800dc21 	.word	0x0800dc21
 800dc1c:	0800dc45 	.word	0x0800dc45
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	691b      	ldr	r3, [r3, #16]
 800dc24:	3303      	adds	r3, #3
 800dc26:	089b      	lsrs	r3, r3, #2
 800dc28:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dc2a:	8afa      	ldrh	r2, [r7, #22]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d91c      	bls.n	800dc70 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	f043 0220 	orr.w	r2, r3, #32
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	619a      	str	r2, [r3, #24]
          }
          break;
 800dc42:	e015      	b.n	800dc70 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	3303      	adds	r3, #3
 800dc4a:	089b      	lsrs	r3, r3, #2
 800dc4c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dc4e:	8afa      	ldrh	r2, [r7, #22]
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d90a      	bls.n	800dc74 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	699b      	ldr	r3, [r3, #24]
 800dc62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	619a      	str	r2, [r3, #24]
          }
          break;
 800dc6a:	e003      	b.n	800dc74 <USB_HC_StartXfer+0x258>

        default:
          break;
 800dc6c:	bf00      	nop
 800dc6e:	e002      	b.n	800dc76 <USB_HC_StartXfer+0x25a>
          break;
 800dc70:	bf00      	nop
 800dc72:	e000      	b.n	800dc76 <USB_HC_StartXfer+0x25a>
          break;
 800dc74:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	68d9      	ldr	r1, [r3, #12]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	785a      	ldrb	r2, [r3, #1]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	b298      	uxth	r0, r3
 800dc84:	2300      	movs	r3, #0
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	4603      	mov	r3, r0
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f7ff fb92 	bl	800d3b4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3728      	adds	r7, #40	; 0x28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	1ff80000 	.word	0x1ff80000
 800dca0:	20001960 	.word	0x20001960

0800dca4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	b29b      	uxth	r3, r3
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3714      	adds	r7, #20
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr

0800dcc6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dcc6:	b480      	push	{r7}
 800dcc8:	b087      	sub	sp, #28
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800dcd6:	78fb      	ldrb	r3, [r7, #3]
 800dcd8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	015a      	lsls	r2, r3, #5
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	4413      	add	r3, r2
 800dce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	0c9b      	lsrs	r3, r3, #18
 800dcee:	f003 0303 	and.w	r3, r3, #3
 800dcf2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <USB_HC_Halt+0x3a>
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b02      	cmp	r3, #2
 800dcfe:	d16c      	bne.n	800ddda <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	015a      	lsls	r2, r3, #5
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	4413      	add	r3, r2
 800dd08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	0151      	lsls	r1, r2, #5
 800dd12:	693a      	ldr	r2, [r7, #16]
 800dd14:	440a      	add	r2, r1
 800dd16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd1e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d143      	bne.n	800ddb4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	0151      	lsls	r1, r2, #5
 800dd3e:	693a      	ldr	r2, [r7, #16]
 800dd40:	440a      	add	r2, r1
 800dd42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	015a      	lsls	r2, r3, #5
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	4413      	add	r3, r2
 800dd54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	0151      	lsls	r1, r2, #5
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	440a      	add	r2, r1
 800dd62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	015a      	lsls	r2, r3, #5
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	4413      	add	r3, r2
 800dd74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	0151      	lsls	r1, r2, #5
 800dd7e:	693a      	ldr	r2, [r7, #16]
 800dd80:	440a      	add	r2, r1
 800dd82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd8a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	617b      	str	r3, [r7, #20]
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd98:	d81d      	bhi.n	800ddd6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	015a      	lsls	r2, r3, #5
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	4413      	add	r3, r2
 800dda2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddb0:	d0ec      	beq.n	800dd8c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ddb2:	e080      	b.n	800deb6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	015a      	lsls	r2, r3, #5
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	4413      	add	r3, r2
 800ddbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	0151      	lsls	r1, r2, #5
 800ddc6:	693a      	ldr	r2, [r7, #16]
 800ddc8:	440a      	add	r2, r1
 800ddca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddd2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ddd4:	e06f      	b.n	800deb6 <USB_HC_Halt+0x1f0>
          break;
 800ddd6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ddd8:	e06d      	b.n	800deb6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	0151      	lsls	r1, r2, #5
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	440a      	add	r2, r1
 800ddf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddf8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de06:	2b00      	cmp	r3, #0
 800de08:	d143      	bne.n	800de92 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	015a      	lsls	r2, r3, #5
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	4413      	add	r3, r2
 800de12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	0151      	lsls	r1, r2, #5
 800de1c:	693a      	ldr	r2, [r7, #16]
 800de1e:	440a      	add	r2, r1
 800de20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de28:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	4413      	add	r3, r2
 800de32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	0151      	lsls	r1, r2, #5
 800de3c:	693a      	ldr	r2, [r7, #16]
 800de3e:	440a      	add	r2, r1
 800de40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	015a      	lsls	r2, r3, #5
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	4413      	add	r3, r2
 800de52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	0151      	lsls	r1, r2, #5
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	440a      	add	r2, r1
 800de60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de68:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	3301      	adds	r3, #1
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de76:	d81d      	bhi.n	800deb4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	015a      	lsls	r2, r3, #5
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de8e:	d0ec      	beq.n	800de6a <USB_HC_Halt+0x1a4>
 800de90:	e011      	b.n	800deb6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	015a      	lsls	r2, r3, #5
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	4413      	add	r3, r2
 800de9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	0151      	lsls	r1, r2, #5
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	440a      	add	r2, r1
 800dea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800deac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800deb0:	6013      	str	r3, [r2, #0]
 800deb2:	e000      	b.n	800deb6 <USB_HC_Halt+0x1f0>
          break;
 800deb4:	bf00      	nop
    }
  }

  return HAL_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	371c      	adds	r7, #28
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b087      	sub	sp, #28
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ded4:	78fb      	ldrb	r3, [r7, #3]
 800ded6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ded8:	2301      	movs	r3, #1
 800deda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	04da      	lsls	r2, r3, #19
 800dee0:	4b15      	ldr	r3, [pc, #84]	; (800df38 <USB_DoPing+0x74>)
 800dee2:	4013      	ands	r3, r2
 800dee4:	693a      	ldr	r2, [r7, #16]
 800dee6:	0151      	lsls	r1, r2, #5
 800dee8:	697a      	ldr	r2, [r7, #20]
 800deea:	440a      	add	r2, r1
 800deec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800def0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800def4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	015a      	lsls	r2, r3, #5
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	4413      	add	r3, r2
 800defe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800df0c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df14:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	015a      	lsls	r2, r3, #5
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	4413      	add	r3, r2
 800df1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df22:	461a      	mov	r2, r3
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	371c      	adds	r7, #28
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	1ff80000 	.word	0x1ff80000

0800df3c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800df48:	2300      	movs	r3, #0
 800df4a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7ff f9ae 	bl	800d2ae <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800df52:	2110      	movs	r1, #16
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff f9e5 	bl	800d324 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff fa08 	bl	800d370 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800df60:	2300      	movs	r3, #0
 800df62:	613b      	str	r3, [r7, #16]
 800df64:	e01f      	b.n	800dfa6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df84:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800df8c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	015a      	lsls	r2, r3, #5
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	4413      	add	r3, r2
 800df96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df9a:	461a      	mov	r2, r3
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	613b      	str	r3, [r7, #16]
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	2b0f      	cmp	r3, #15
 800dfaa:	d9dc      	bls.n	800df66 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800dfac:	2300      	movs	r3, #0
 800dfae:	613b      	str	r3, [r7, #16]
 800dfb0:	e034      	b.n	800e01c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	015a      	lsls	r2, r3, #5
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	4413      	add	r3, r2
 800dfba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dfc8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfd0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dfd8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	015a      	lsls	r2, r3, #5
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	3301      	adds	r3, #1
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dff8:	d80c      	bhi.n	800e014 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	015a      	lsls	r2, r3, #5
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	4413      	add	r3, r2
 800e002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e010:	d0ec      	beq.n	800dfec <USB_StopHost+0xb0>
 800e012:	e000      	b.n	800e016 <USB_StopHost+0xda>
        break;
 800e014:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	3301      	adds	r3, #1
 800e01a:	613b      	str	r3, [r7, #16]
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2b0f      	cmp	r3, #15
 800e020:	d9c7      	bls.n	800dfb2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e028:	461a      	mov	r2, r3
 800e02a:	f04f 33ff 	mov.w	r3, #4294967295
 800e02e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f04f 32ff 	mov.w	r2, #4294967295
 800e036:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7ff f927 	bl	800d28c <USB_EnableGlobalInt>

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3718      	adds	r7, #24
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e04c:	4904      	ldr	r1, [pc, #16]	; (800e060 <MX_FATFS_Init+0x18>)
 800e04e:	4805      	ldr	r0, [pc, #20]	; (800e064 <MX_FATFS_Init+0x1c>)
 800e050:	f002 fb4e 	bl	80106f0 <FATFS_LinkDriver>
 800e054:	4603      	mov	r3, r0
 800e056:	461a      	mov	r2, r3
 800e058:	4b03      	ldr	r3, [pc, #12]	; (800e068 <MX_FATFS_Init+0x20>)
 800e05a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e05c:	bf00      	nop
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	2002176c 	.word	0x2002176c
 800e064:	080236c0 	.word	0x080236c0
 800e068:	20021768 	.word	0x20021768

0800e06c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e072:	2300      	movs	r3, #0
 800e074:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e076:	f000 f87b 	bl	800e170 <BSP_SD_IsDetected>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d001      	beq.n	800e084 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e080:	2302      	movs	r3, #2
 800e082:	e012      	b.n	800e0aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e084:	480b      	ldr	r0, [pc, #44]	; (800e0b4 <BSP_SD_Init+0x48>)
 800e086:	f7fb fb95 	bl	80097b4 <HAL_SD_Init>
 800e08a:	4603      	mov	r3, r0
 800e08c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e08e:	79fb      	ldrb	r3, [r7, #7]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d109      	bne.n	800e0a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e098:	4806      	ldr	r0, [pc, #24]	; (800e0b4 <BSP_SD_Init+0x48>)
 800e09a:	f7fc f815 	bl	800a0c8 <HAL_SD_ConfigWideBusOperation>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d001      	beq.n	800e0a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20021358 	.word	0x20021358

0800e0b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	68f9      	ldr	r1, [r7, #12]
 800e0ce:	4806      	ldr	r0, [pc, #24]	; (800e0e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e0d0:	f7fb fc00 	bl	80098d4 <HAL_SD_ReadBlocks_DMA>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3718      	adds	r7, #24
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	20021358 	.word	0x20021358

0800e0ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	68f9      	ldr	r1, [r7, #12]
 800e102:	4806      	ldr	r0, [pc, #24]	; (800e11c <BSP_SD_WriteBlocks_DMA+0x30>)
 800e104:	f7fb fcb4 	bl	8009a70 <HAL_SD_WriteBlocks_DMA>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e112:	7dfb      	ldrb	r3, [r7, #23]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3718      	adds	r7, #24
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	20021358 	.word	0x20021358

0800e120 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e124:	4805      	ldr	r0, [pc, #20]	; (800e13c <BSP_SD_GetCardState+0x1c>)
 800e126:	f7fc f84b 	bl	800a1c0 <HAL_SD_GetCardState>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	bf14      	ite	ne
 800e130:	2301      	movne	r3, #1
 800e132:	2300      	moveq	r3, #0
 800e134:	b2db      	uxtb	r3, r3
}
 800e136:	4618      	mov	r0, r3
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	20021358 	.word	0x20021358

0800e140 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	4803      	ldr	r0, [pc, #12]	; (800e158 <BSP_SD_GetCardInfo+0x18>)
 800e14c:	f7fb ff90 	bl	800a070 <HAL_SD_GetCardInfo>
}
 800e150:	bf00      	nop
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	20021358 	.word	0x20021358

0800e15c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e164:	f000 fa32 	bl	800e5cc <BSP_SD_ReadCpltCallback>
}
 800e168:	bf00      	nop
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e176:	2301      	movs	r3, #1
 800e178:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800e17a:	f000 f80b 	bl	800e194 <BSP_PlatformIsDetected>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e184:	2300      	movs	r3, #0
 800e186:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	b2db      	uxtb	r3, r3
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e19a:	2301      	movs	r3, #1
 800e19c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e19e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e1a2:	4806      	ldr	r0, [pc, #24]	; (800e1bc <BSP_PlatformIsDetected+0x28>)
 800e1a4:	f7f6 fb18 	bl	80047d8 <HAL_GPIO_ReadPin>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d001      	beq.n	800e1b2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800e1b2:	79fb      	ldrb	r3, [r7, #7]
}  
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	40020800 	.word	0x40020800

0800e1c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 800e1c8:	f002 fade 	bl	8010788 <osKernelSysTick>
 800e1cc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800e1ce:	e006      	b.n	800e1de <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e1d0:	f7ff ffa6 	bl	800e120 <BSP_SD_GetCardState>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d101      	bne.n	800e1de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e009      	b.n	800e1f2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e1de:	f002 fad3 	bl	8010788 <osKernelSysTick>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d8f0      	bhi.n	800e1d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e1ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
	...

0800e1fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	4603      	mov	r3, r0
 800e204:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e206:	4b0b      	ldr	r3, [pc, #44]	; (800e234 <SD_CheckStatus+0x38>)
 800e208:	2201      	movs	r2, #1
 800e20a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e20c:	f7ff ff88 	bl	800e120 <BSP_SD_GetCardState>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d107      	bne.n	800e226 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e216:	4b07      	ldr	r3, [pc, #28]	; (800e234 <SD_CheckStatus+0x38>)
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	f023 0301 	bic.w	r3, r3, #1
 800e220:	b2da      	uxtb	r2, r3
 800e222:	4b04      	ldr	r3, [pc, #16]	; (800e234 <SD_CheckStatus+0x38>)
 800e224:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e226:	4b03      	ldr	r3, [pc, #12]	; (800e234 <SD_CheckStatus+0x38>)
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	b2db      	uxtb	r3, r3
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	2000009d 	.word	0x2000009d

0800e238 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e238:	b590      	push	{r4, r7, lr}
 800e23a:	b087      	sub	sp, #28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	4603      	mov	r3, r0
 800e240:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800e242:	4b1a      	ldr	r3, [pc, #104]	; (800e2ac <SD_initialize+0x74>)
 800e244:	2201      	movs	r2, #1
 800e246:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800e248:	f002 fa92 	bl	8010770 <osKernelRunning>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d024      	beq.n	800e29c <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e252:	f7ff ff0b 	bl	800e06c <BSP_SD_Init>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d107      	bne.n	800e26c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e25c:	79fb      	ldrb	r3, [r7, #7]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff ffcc 	bl	800e1fc <SD_CheckStatus>
 800e264:	4603      	mov	r3, r0
 800e266:	461a      	mov	r2, r3
 800e268:	4b10      	ldr	r3, [pc, #64]	; (800e2ac <SD_initialize+0x74>)
 800e26a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800e26c:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <SD_initialize+0x74>)
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	b2db      	uxtb	r3, r3
 800e272:	2b01      	cmp	r3, #1
 800e274:	d012      	beq.n	800e29c <SD_initialize+0x64>
 800e276:	4b0e      	ldr	r3, [pc, #56]	; (800e2b0 <SD_initialize+0x78>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10e      	bne.n	800e29c <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e27e:	4b0d      	ldr	r3, [pc, #52]	; (800e2b4 <SD_initialize+0x7c>)
 800e280:	f107 0408 	add.w	r4, r7, #8
 800e284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e28a:	f107 0308 	add.w	r3, r7, #8
 800e28e:	2100      	movs	r1, #0
 800e290:	4618      	mov	r0, r3
 800e292:	f002 fbc0 	bl	8010a16 <osMessageCreate>
 800e296:	4602      	mov	r2, r0
 800e298:	4b05      	ldr	r3, [pc, #20]	; (800e2b0 <SD_initialize+0x78>)
 800e29a:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 800e29c:	4b03      	ldr	r3, [pc, #12]	; (800e2ac <SD_initialize+0x74>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	b2db      	uxtb	r3, r3
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	371c      	adds	r7, #28
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd90      	pop	{r4, r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	2000009d 	.word	0x2000009d
 800e2b0:	20001b64 	.word	0x20001b64
 800e2b4:	0801ed8c 	.word	0x0801ed8c

0800e2b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff ff99 	bl	800e1fc <SD_CheckStatus>
 800e2ca:	4603      	mov	r3, r0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08e      	sub	sp, #56	; 0x38
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	61b9      	str	r1, [r7, #24]
 800e2dc:	617a      	str	r2, [r7, #20]
 800e2de:	613b      	str	r3, [r7, #16]
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e2ea:	f247 5030 	movw	r0, #30000	; 0x7530
 800e2ee:	f7ff ff67 	bl	800e1c0 <SD_CheckStatusWithTimeout>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da02      	bge.n	800e2fe <SD_read+0x2a>
  {
    return res;
 800e2f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2fc:	e06c      	b.n	800e3d8 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	f003 0303 	and.w	r3, r3, #3
 800e304:	2b00      	cmp	r3, #0
 800e306:	d11e      	bne.n	800e346 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	6979      	ldr	r1, [r7, #20]
 800e30c:	69b8      	ldr	r0, [r7, #24]
 800e30e:	f7ff fed3 	bl	800e0b8 <BSP_SD_ReadBlocks_DMA>
 800e312:	4603      	mov	r3, r0
 800e314:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 800e318:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d159      	bne.n	800e3d4 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e320:	4b2f      	ldr	r3, [pc, #188]	; (800e3e0 <SD_read+0x10c>)
 800e322:	6819      	ldr	r1, [r3, #0]
 800e324:	f107 0320 	add.w	r3, r7, #32
 800e328:	f247 5230 	movw	r2, #30000	; 0x7530
 800e32c:	4618      	mov	r0, r3
 800e32e:	f002 fbdb 	bl	8010ae8 <osMessageGet>
      if (event.status == osEventMessage) {
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	2b10      	cmp	r3, #16
 800e336:	d14d      	bne.n	800e3d4 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d14a      	bne.n	800e3d4 <SD_read+0x100>
          res = RES_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e344:	e046      	b.n	800e3d4 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 800e346:	2300      	movs	r3, #0
 800e348:	633b      	str	r3, [r7, #48]	; 0x30
 800e34a:	e032      	b.n	800e3b2 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	1c5a      	adds	r2, r3, #1
 800e350:	617a      	str	r2, [r7, #20]
 800e352:	2201      	movs	r2, #1
 800e354:	4619      	mov	r1, r3
 800e356:	4823      	ldr	r0, [pc, #140]	; (800e3e4 <SD_read+0x110>)
 800e358:	f7ff feae 	bl	800e0b8 <BSP_SD_ReadBlocks_DMA>
 800e35c:	4603      	mov	r3, r0
 800e35e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 800e362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e366:	2b00      	cmp	r3, #0
 800e368:	d128      	bne.n	800e3bc <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e36a:	4b1d      	ldr	r3, [pc, #116]	; (800e3e0 <SD_read+0x10c>)
 800e36c:	6819      	ldr	r1, [r3, #0]
 800e36e:	463b      	mov	r3, r7
 800e370:	f247 5230 	movw	r2, #30000	; 0x7530
 800e374:	4618      	mov	r0, r3
 800e376:	f002 fbb7 	bl	8010ae8 <osMessageGet>
 800e37a:	f107 0320 	add.w	r3, r7, #32
 800e37e:	463a      	mov	r2, r7
 800e380:	ca07      	ldmia	r2, {r0, r1, r2}
 800e382:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	2b10      	cmp	r3, #16
 800e38a:	d10f      	bne.n	800e3ac <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d10c      	bne.n	800e3ac <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	4a13      	ldr	r2, [pc, #76]	; (800e3e4 <SD_read+0x110>)
 800e396:	4618      	mov	r0, r3
 800e398:	4611      	mov	r1, r2
 800e39a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e39e:	461a      	mov	r2, r3
 800e3a0:	f010 fbed 	bl	801eb7e <memcpy>
            buff += BLOCKSIZE;
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e3aa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	633b      	str	r3, [r7, #48]	; 0x30
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d8c8      	bhi.n	800e34c <SD_read+0x78>
 800e3ba:	e000      	b.n	800e3be <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 800e3bc:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d106      	bne.n	800e3d4 <SD_read+0x100>
 800e3c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d102      	bne.n	800e3d4 <SD_read+0x100>
      res = RES_OK;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 800e3d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3738      	adds	r7, #56	; 0x38
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20001b64 	.word	0x20001b64
 800e3e4:	20001964 	.word	0x20001964

0800e3e8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b090      	sub	sp, #64	; 0x40
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	61b9      	str	r1, [r7, #24]
 800e3f0:	617a      	str	r2, [r7, #20]
 800e3f2:	613b      	str	r3, [r7, #16]
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e3fe:	f247 5030 	movw	r0, #30000	; 0x7530
 800e402:	f7ff fedd 	bl	800e1c0 <SD_CheckStatusWithTimeout>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	da02      	bge.n	800e412 <SD_write+0x2a>
  {
    return res;
 800e40c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e410:	e07c      	b.n	800e50c <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	f003 0303 	and.w	r3, r3, #3
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d12e      	bne.n	800e47a <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	6979      	ldr	r1, [r7, #20]
 800e420:	69b8      	ldr	r0, [r7, #24]
 800e422:	f7ff fe63 	bl	800e0ec <BSP_SD_WriteBlocks_DMA>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d16d      	bne.n	800e508 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e42c:	4b39      	ldr	r3, [pc, #228]	; (800e514 <SD_write+0x12c>)
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e434:	f247 5230 	movw	r2, #30000	; 0x7530
 800e438:	4618      	mov	r0, r3
 800e43a:	f002 fb55 	bl	8010ae8 <osMessageGet>

      if (event.status == osEventMessage)
 800e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e440:	2b10      	cmp	r3, #16
 800e442:	d161      	bne.n	800e508 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 800e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e446:	2b02      	cmp	r3, #2
 800e448:	d15e      	bne.n	800e508 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 800e44a:	f002 f99d 	bl	8010788 <osKernelSysTick>
 800e44e:	4602      	mov	r2, r0
 800e450:	f247 5330 	movw	r3, #30000	; 0x7530
 800e454:	4413      	add	r3, r2
 800e456:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 800e458:	e008      	b.n	800e46c <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e45a:	f7ff fe61 	bl	800e120 <BSP_SD_GetCardState>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d103      	bne.n	800e46c <SD_write+0x84>
            {
              res = RES_OK;
 800e464:	2300      	movs	r3, #0
 800e466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800e46a:	e04d      	b.n	800e508 <SD_write+0x120>
          while(timer > osKernelSysTick())
 800e46c:	f002 f98c 	bl	8010788 <osKernelSysTick>
 800e470:	4602      	mov	r2, r0
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	4293      	cmp	r3, r2
 800e476:	d8f0      	bhi.n	800e45a <SD_write+0x72>
 800e478:	e046      	b.n	800e508 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 800e47a:	2300      	movs	r3, #0
 800e47c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e47e:	e032      	b.n	800e4e6 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	617a      	str	r2, [r7, #20]
 800e486:	2201      	movs	r2, #1
 800e488:	4619      	mov	r1, r3
 800e48a:	4823      	ldr	r0, [pc, #140]	; (800e518 <SD_write+0x130>)
 800e48c:	f7ff fe2e 	bl	800e0ec <BSP_SD_WriteBlocks_DMA>
 800e490:	4603      	mov	r3, r0
 800e492:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 800e496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d128      	bne.n	800e4f0 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e49e:	4b1d      	ldr	r3, [pc, #116]	; (800e514 <SD_write+0x12c>)
 800e4a0:	6819      	ldr	r1, [r3, #0]
 800e4a2:	463b      	mov	r3, r7
 800e4a4:	f247 5230 	movw	r2, #30000	; 0x7530
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f002 fb1d 	bl	8010ae8 <osMessageGet>
 800e4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4b2:	463a      	mov	r2, r7
 800e4b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800e4b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	2b10      	cmp	r3, #16
 800e4be:	d10f      	bne.n	800e4e0 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 800e4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	d10c      	bne.n	800e4e0 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	4a13      	ldr	r2, [pc, #76]	; (800e518 <SD_write+0x130>)
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	f010 fb53 	bl	801eb7e <memcpy>
            buff += BLOCKSIZE;
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e4de:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	693a      	ldr	r2, [r7, #16]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d8c8      	bhi.n	800e480 <SD_write+0x98>
 800e4ee:	e000      	b.n	800e4f2 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 800e4f0:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800e4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d106      	bne.n	800e508 <SD_write+0x120>
 800e4fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d102      	bne.n	800e508 <SD_write+0x120>
      res = RES_OK;
 800e502:	2300      	movs	r3, #0
 800e504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 800e508:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800e50c:	4618      	mov	r0, r3
 800e50e:	3740      	adds	r7, #64	; 0x40
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20001b64 	.word	0x20001b64
 800e518:	20001964 	.word	0x20001964

0800e51c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b08c      	sub	sp, #48	; 0x30
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	603a      	str	r2, [r7, #0]
 800e526:	71fb      	strb	r3, [r7, #7]
 800e528:	460b      	mov	r3, r1
 800e52a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e52c:	2301      	movs	r3, #1
 800e52e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e532:	4b25      	ldr	r3, [pc, #148]	; (800e5c8 <SD_ioctl+0xac>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	b2db      	uxtb	r3, r3
 800e538:	f003 0301 	and.w	r3, r3, #1
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <SD_ioctl+0x28>
 800e540:	2303      	movs	r3, #3
 800e542:	e03c      	b.n	800e5be <SD_ioctl+0xa2>

  switch (cmd)
 800e544:	79bb      	ldrb	r3, [r7, #6]
 800e546:	2b03      	cmp	r3, #3
 800e548:	d834      	bhi.n	800e5b4 <SD_ioctl+0x98>
 800e54a:	a201      	add	r2, pc, #4	; (adr r2, 800e550 <SD_ioctl+0x34>)
 800e54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e550:	0800e561 	.word	0x0800e561
 800e554:	0800e569 	.word	0x0800e569
 800e558:	0800e581 	.word	0x0800e581
 800e55c:	0800e59b 	.word	0x0800e59b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e560:	2300      	movs	r3, #0
 800e562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e566:	e028      	b.n	800e5ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e568:	f107 030c 	add.w	r3, r7, #12
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7ff fde7 	bl	800e140 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e578:	2300      	movs	r3, #0
 800e57a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e57e:	e01c      	b.n	800e5ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e580:	f107 030c 	add.w	r3, r7, #12
 800e584:	4618      	mov	r0, r3
 800e586:	f7ff fddb 	bl	800e140 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e598:	e00f      	b.n	800e5ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e59a:	f107 030c 	add.w	r3, r7, #12
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7ff fdce 	bl	800e140 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	0a5a      	lsrs	r2, r3, #9
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5b2:	e002      	b.n	800e5ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e5b4:	2304      	movs	r3, #4
 800e5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e5ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3730      	adds	r7, #48	; 0x30
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	2000009d 	.word	0x2000009d

0800e5cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 800e5d0:	4b04      	ldr	r3, [pc, #16]	; (800e5e4 <BSP_SD_ReadCpltCallback+0x18>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d8:	2101      	movs	r1, #1
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f002 fa44 	bl	8010a68 <osMessagePut>
}
 800e5e0:	bf00      	nop
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	20001b64 	.word	0x20001b64

0800e5e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800e5e8:	b590      	push	{r4, r7, lr}
 800e5ea:	b089      	sub	sp, #36	; 0x24
 800e5ec:	af04      	add	r7, sp, #16
 800e5ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	2102      	movs	r1, #2
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fc8c 	bl	800ef18 <USBH_FindInterface>
 800e600:	4603      	mov	r3, r0
 800e602:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800e604:	7bbb      	ldrb	r3, [r7, #14]
 800e606:	2bff      	cmp	r3, #255	; 0xff
 800e608:	f000 812a 	beq.w	800e860 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800e60c:	7bbb      	ldrb	r3, [r7, #14]
 800e60e:	4619      	mov	r1, r3
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 fc65 	bl	800eee0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800e61c:	2050      	movs	r0, #80	; 0x50
 800e61e:	f010 fa8f 	bl	801eb40 <malloc>
 800e622:	4603      	mov	r3, r0
 800e624:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e62c:	69db      	ldr	r3, [r3, #28]
 800e62e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e630:	7bbb      	ldrb	r3, [r7, #14]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	211a      	movs	r1, #26
 800e636:	fb01 f303 	mul.w	r3, r1, r3
 800e63a:	4413      	add	r3, r2
 800e63c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	b25b      	sxtb	r3, r3
 800e644:	2b00      	cmp	r3, #0
 800e646:	da15      	bge.n	800e674 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e648:	7bbb      	ldrb	r3, [r7, #14]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	211a      	movs	r1, #26
 800e64e:	fb01 f303 	mul.w	r3, r1, r3
 800e652:	4413      	add	r3, r2
 800e654:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e658:	781a      	ldrb	r2, [r3, #0]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e65e:	7bbb      	ldrb	r3, [r7, #14]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	211a      	movs	r1, #26
 800e664:	fb01 f303 	mul.w	r3, r1, r3
 800e668:	4413      	add	r3, r2
 800e66a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800e66e:	881a      	ldrh	r2, [r3, #0]
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	785b      	ldrb	r3, [r3, #1]
 800e678:	4619      	mov	r1, r3
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f001 ff2f 	bl	80104de <USBH_AllocPipe>
 800e680:	4603      	mov	r3, r0
 800e682:	461a      	mov	r2, r3
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	7819      	ldrb	r1, [r3, #0]
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	7858      	ldrb	r0, [r3, #1]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e69c:	68ba      	ldr	r2, [r7, #8]
 800e69e:	8952      	ldrh	r2, [r2, #10]
 800e6a0:	9202      	str	r2, [sp, #8]
 800e6a2:	2203      	movs	r2, #3
 800e6a4:	9201      	str	r2, [sp, #4]
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	4623      	mov	r3, r4
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f001 fee7 	bl	8010480 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f006 fe44 	bl	8015348 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	210a      	movs	r1, #10
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 fc26 	bl	800ef18 <USBH_FindInterface>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800e6d0:	7bbb      	ldrb	r3, [r7, #14]
 800e6d2:	2bff      	cmp	r3, #255	; 0xff
 800e6d4:	f000 80c4 	beq.w	800e860 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e6d8:	7bbb      	ldrb	r3, [r7, #14]
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	211a      	movs	r1, #26
 800e6de:	fb01 f303 	mul.w	r3, r1, r3
 800e6e2:	4413      	add	r3, r2
 800e6e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	b25b      	sxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	da16      	bge.n	800e71e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e6f0:	7bbb      	ldrb	r3, [r7, #14]
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	211a      	movs	r1, #26
 800e6f6:	fb01 f303 	mul.w	r3, r1, r3
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e700:	781a      	ldrb	r2, [r3, #0]
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e706:	7bbb      	ldrb	r3, [r7, #14]
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	211a      	movs	r1, #26
 800e70c:	fb01 f303 	mul.w	r3, r1, r3
 800e710:	4413      	add	r3, r2
 800e712:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800e716:	881a      	ldrh	r2, [r3, #0]
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	835a      	strh	r2, [r3, #26]
 800e71c:	e015      	b.n	800e74a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e71e:	7bbb      	ldrb	r3, [r7, #14]
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	211a      	movs	r1, #26
 800e724:	fb01 f303 	mul.w	r3, r1, r3
 800e728:	4413      	add	r3, r2
 800e72a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e72e:	781a      	ldrb	r2, [r3, #0]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e734:	7bbb      	ldrb	r3, [r7, #14]
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	211a      	movs	r1, #26
 800e73a:	fb01 f303 	mul.w	r3, r1, r3
 800e73e:	4413      	add	r3, r2
 800e740:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800e744:	881a      	ldrh	r2, [r3, #0]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e74a:	7bbb      	ldrb	r3, [r7, #14]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	211a      	movs	r1, #26
 800e750:	fb01 f303 	mul.w	r3, r1, r3
 800e754:	4413      	add	r3, r2
 800e756:	f203 3352 	addw	r3, r3, #850	; 0x352
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	b25b      	sxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	da16      	bge.n	800e790 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e762:	7bbb      	ldrb	r3, [r7, #14]
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	211a      	movs	r1, #26
 800e768:	fb01 f303 	mul.w	r3, r1, r3
 800e76c:	4413      	add	r3, r2
 800e76e:	f203 3352 	addw	r3, r3, #850	; 0x352
 800e772:	781a      	ldrb	r2, [r3, #0]
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	211a      	movs	r1, #26
 800e77e:	fb01 f303 	mul.w	r3, r1, r3
 800e782:	4413      	add	r3, r2
 800e784:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800e788:	881a      	ldrh	r2, [r3, #0]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	835a      	strh	r2, [r3, #26]
 800e78e:	e015      	b.n	800e7bc <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e790:	7bbb      	ldrb	r3, [r7, #14]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	211a      	movs	r1, #26
 800e796:	fb01 f303 	mul.w	r3, r1, r3
 800e79a:	4413      	add	r3, r2
 800e79c:	f203 3352 	addw	r3, r3, #850	; 0x352
 800e7a0:	781a      	ldrb	r2, [r3, #0]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e7a6:	7bbb      	ldrb	r3, [r7, #14]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	211a      	movs	r1, #26
 800e7ac:	fb01 f303 	mul.w	r3, r1, r3
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800e7b6:	881a      	ldrh	r2, [r3, #0]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	7b9b      	ldrb	r3, [r3, #14]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f001 fe8b 	bl	80104de <USBH_AllocPipe>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	7bdb      	ldrb	r3, [r3, #15]
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f001 fe81 	bl	80104de <USBH_AllocPipe>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	461a      	mov	r2, r3
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	7b59      	ldrb	r1, [r3, #13]
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	7b98      	ldrb	r0, [r3, #14]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	8b12      	ldrh	r2, [r2, #24]
 800e7fc:	9202      	str	r2, [sp, #8]
 800e7fe:	2202      	movs	r2, #2
 800e800:	9201      	str	r2, [sp, #4]
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	4623      	mov	r3, r4
 800e806:	4602      	mov	r2, r0
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f001 fe39 	bl	8010480 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	7b19      	ldrb	r1, [r3, #12]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	7bd8      	ldrb	r0, [r3, #15]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	8b52      	ldrh	r2, [r2, #26]
 800e826:	9202      	str	r2, [sp, #8]
 800e828:	2202      	movs	r2, #2
 800e82a:	9201      	str	r2, [sp, #4]
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	4623      	mov	r3, r4
 800e830:	4602      	mov	r2, r0
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f001 fe24 	bl	8010480 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	7b5b      	ldrb	r3, [r3, #13]
 800e844:	2200      	movs	r2, #0
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f006 fd7d 	bl	8015348 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	7b1b      	ldrb	r3, [r3, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f006 fd76 	bl	8015348 <USBH_LL_SetToggle>
      status = USBH_OK;
 800e85c:	2300      	movs	r3, #0
 800e85e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800e860:	7bfb      	ldrb	r3, [r7, #15]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3714      	adds	r7, #20
 800e866:	46bd      	mov	sp, r7
 800e868:	bd90      	pop	{r4, r7, pc}

0800e86a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b084      	sub	sp, #16
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e878:	69db      	ldr	r3, [r3, #28]
 800e87a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00e      	beq.n	800e8a2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	4619      	mov	r1, r3
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f001 fe17 	bl	80104be <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	4619      	mov	r1, r3
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f001 fe3f 	bl	801051a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	7b1b      	ldrb	r3, [r3, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00e      	beq.n	800e8c8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	7b1b      	ldrb	r3, [r3, #12]
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f001 fe04 	bl	80104be <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	7b1b      	ldrb	r3, [r3, #12]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f001 fe2c 	bl	801051a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	7b5b      	ldrb	r3, [r3, #13]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00e      	beq.n	800e8ee <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	7b5b      	ldrb	r3, [r3, #13]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f001 fdf1 	bl	80104be <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	7b5b      	ldrb	r3, [r3, #13]
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f001 fe19 	bl	801051a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e8f4:	69db      	ldr	r3, [r3, #28]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00b      	beq.n	800e912 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e900:	69db      	ldr	r3, [r3, #28]
 800e902:	4618      	mov	r0, r3
 800e904:	f010 f924 	bl	801eb50 <free>
    phost->pActiveClass->pData = 0U;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e90e:	2200      	movs	r2, #0
 800e910:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800e924:	2302      	movs	r3, #2
 800e926:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e92e:	69db      	ldr	r3, [r3, #28]
 800e930:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	3340      	adds	r3, #64	; 0x40
 800e936:	4619      	mov	r1, r3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f8b2 	bl	800eaa2 <GetLineCoding>
 800e93e:	4603      	mov	r3, r0
 800e940:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800e942:	7bfb      	ldrb	r3, [r7, #15]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d105      	bne.n	800e954 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e94e:	2102      	movs	r1, #2
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	4798      	blx	r3
  }
  return status;
 800e954:	7bfb      	ldrb	r3, [r7, #15]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
	...

0800e960 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e968:	2301      	movs	r3, #1
 800e96a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e976:	69db      	ldr	r3, [r3, #28]
 800e978:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e980:	2b04      	cmp	r3, #4
 800e982:	d877      	bhi.n	800ea74 <USBH_CDC_Process+0x114>
 800e984:	a201      	add	r2, pc, #4	; (adr r2, 800e98c <USBH_CDC_Process+0x2c>)
 800e986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98a:	bf00      	nop
 800e98c:	0800e9a1 	.word	0x0800e9a1
 800e990:	0800e9a7 	.word	0x0800e9a7
 800e994:	0800e9d7 	.word	0x0800e9d7
 800e998:	0800ea4b 	.word	0x0800ea4b
 800e99c:	0800ea59 	.word	0x0800ea59
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9a4:	e06d      	b.n	800ea82 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 f897 	bl	800eae0 <SetLineCoding>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800e9b6:	7bbb      	ldrb	r3, [r7, #14]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d104      	bne.n	800e9c6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800e9c4:	e058      	b.n	800ea78 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800e9c6:	7bbb      	ldrb	r3, [r7, #14]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d055      	beq.n	800ea78 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	2204      	movs	r2, #4
 800e9d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800e9d4:	e050      	b.n	800ea78 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	3340      	adds	r3, #64	; 0x40
 800e9da:	4619      	mov	r1, r3
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 f860 	bl	800eaa2 <GetLineCoding>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800e9e6:	7bbb      	ldrb	r3, [r7, #14]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d126      	bne.n	800ea3a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9fe:	791b      	ldrb	r3, [r3, #4]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d13b      	bne.n	800ea7c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea0e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d133      	bne.n	800ea7c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea1e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d12b      	bne.n	800ea7c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea2c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d124      	bne.n	800ea7c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f984 	bl	800ed40 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800ea38:	e020      	b.n	800ea7c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800ea3a:	7bbb      	ldrb	r3, [r7, #14]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d01d      	beq.n	800ea7c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2204      	movs	r2, #4
 800ea44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800ea48:	e018      	b.n	800ea7c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f867 	bl	800eb1e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f8f8 	bl	800ec46 <CDC_ProcessReception>
    break;
 800ea56:	e014      	b.n	800ea82 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800ea58:	2100      	movs	r1, #0
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fffa 	bl	800fa54 <USBH_ClrFeature>
 800ea60:	4603      	mov	r3, r0
 800ea62:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800ea64:	7bbb      	ldrb	r3, [r7, #14]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10a      	bne.n	800ea80 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800ea72:	e005      	b.n	800ea80 <USBH_CDC_Process+0x120>

  default:
    break;
 800ea74:	bf00      	nop
 800ea76:	e004      	b.n	800ea82 <USBH_CDC_Process+0x122>
    break;
 800ea78:	bf00      	nop
 800ea7a:	e002      	b.n	800ea82 <USBH_CDC_Process+0x122>
    break;
 800ea7c:	bf00      	nop
 800ea7e:	e000      	b.n	800ea82 <USBH_CDC_Process+0x122>
    break;
 800ea80:	bf00      	nop

  }

  return status;
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b082      	sub	sp, #8
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	22a1      	movs	r2, #161	; 0xa1
 800eab0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2221      	movs	r2, #33	; 0x21
 800eab6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2207      	movs	r2, #7
 800eac8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	2207      	movs	r2, #7
 800eace:	4619      	mov	r1, r3
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f001 f99f 	bl	800fe14 <USBH_CtlReq>
 800ead6:	4603      	mov	r3, r0
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2221      	movs	r2, #33	; 0x21
 800eaee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2220      	movs	r2, #32
 800eaf4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2207      	movs	r2, #7
 800eb06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2207      	movs	r2, #7
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f001 f980 	bl	800fe14 <USBH_CtlReq>
 800eb14:	4603      	mov	r3, r0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b086      	sub	sp, #24
 800eb22:	af02      	add	r7, sp, #8
 800eb24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800eb2c:	69db      	ldr	r3, [r3, #28]
 800eb2e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eb30:	2300      	movs	r3, #0
 800eb32:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d002      	beq.n	800eb44 <CDC_ProcessTransmission+0x26>
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	d025      	beq.n	800eb8e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800eb42:	e07c      	b.n	800ec3e <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	8b12      	ldrh	r2, [r2, #24]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d90c      	bls.n	800eb6a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	69d9      	ldr	r1, [r3, #28]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	8b1a      	ldrh	r2, [r3, #24]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	7b58      	ldrb	r0, [r3, #13]
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	4603      	mov	r3, r0
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f001 fc49 	bl	80103fa <USBH_BulkSendData>
 800eb68:	e00c      	b.n	800eb84 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	7b58      	ldrb	r0, [r3, #13]
 800eb78:	2301      	movs	r3, #1
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f001 fc3b 	bl	80103fa <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2202      	movs	r2, #2
 800eb88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800eb8c:	e057      	b.n	800ec3e <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	7b5b      	ldrb	r3, [r3, #13]
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f006 fbad 	bl	80152f4 <USBH_LL_GetURBState>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800eb9e:	7afb      	ldrb	r3, [r7, #11]
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d136      	bne.n	800ec12 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	8b12      	ldrh	r2, [r2, #24]
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d90e      	bls.n	800ebce <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb4:	68fa      	ldr	r2, [r7, #12]
 800ebb6:	8b12      	ldrh	r2, [r2, #24]
 800ebb8:	1a9a      	subs	r2, r3, r2
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	69db      	ldr	r3, [r3, #28]
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	8b12      	ldrh	r2, [r2, #24]
 800ebc6:	441a      	add	r2, r3
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	61da      	str	r2, [r3, #28]
 800ebcc:	e002      	b.n	800ebd4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d004      	beq.n	800ebe6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ebe4:	e006      	b.n	800ebf4 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f892 	bl	800ed18 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2204      	movs	r2, #4
 800ebf8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	f001 ff2c 	bl	8010a68 <osMessagePut>
    break;
 800ec10:	e014      	b.n	800ec3c <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800ec12:	7afb      	ldrb	r3, [r7, #11]
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d111      	bne.n	800ec3c <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2204      	movs	r2, #4
 800ec24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec34:	2200      	movs	r2, #0
 800ec36:	4619      	mov	r1, r3
 800ec38:	f001 ff16 	bl	8010a68 <osMessagePut>
    break;
 800ec3c:	bf00      	nop
  }
}
 800ec3e:	bf00      	nop
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b086      	sub	sp, #24
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ec54:	69db      	ldr	r3, [r3, #28]
 800ec56:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ec62:	2b03      	cmp	r3, #3
 800ec64:	d002      	beq.n	800ec6c <CDC_ProcessReception+0x26>
 800ec66:	2b04      	cmp	r3, #4
 800ec68:	d00e      	beq.n	800ec88 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800ec6a:	e051      	b.n	800ed10 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	6a19      	ldr	r1, [r3, #32]
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	8b5a      	ldrh	r2, [r3, #26]
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	7b1b      	ldrb	r3, [r3, #12]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 fbe3 	bl	8010444 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	2204      	movs	r2, #4
 800ec82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800ec86:	e043      	b.n	800ed10 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	7b1b      	ldrb	r3, [r3, #12]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f006 fb30 	bl	80152f4 <USBH_LL_GetURBState>
 800ec94:	4603      	mov	r3, r0
 800ec96:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800ec98:	7cfb      	ldrb	r3, [r7, #19]
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d137      	bne.n	800ed0e <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	7b1b      	ldrb	r3, [r3, #12]
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f006 fa93 	bl	80151d0 <USBH_LL_GetLastXferSize>
 800ecaa:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d016      	beq.n	800ece4 <CDC_ProcessReception+0x9e>
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	8b5b      	ldrh	r3, [r3, #26]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d910      	bls.n	800ece4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	1ad2      	subs	r2, r2, r3
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	6a1a      	ldr	r2, [r3, #32]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	441a      	add	r2, r3
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2203      	movs	r2, #3
 800ecde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ece2:	e006      	b.n	800ecf2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f81d 	bl	800ed2c <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed06:	2200      	movs	r2, #0
 800ed08:	4619      	mov	r1, r3
 800ed0a:	f001 fead 	bl	8010a68 <osMessagePut>
    break;
 800ed0e:	bf00      	nop
  }
}
 800ed10:	bf00      	nop
 800ed12:	3718      	adds	r7, #24
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]

}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]

}
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]

}
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800ed54:	b5b0      	push	{r4, r5, r7, lr}
 800ed56:	b090      	sub	sp, #64	; 0x40
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ed68:	2302      	movs	r3, #2
 800ed6a:	e03d      	b.n	800ede8 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	79fa      	ldrb	r2, [r7, #7]
 800ed70:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f000 f837 	bl	800edf8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d003      	beq.n	800ed98 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ed98:	4b15      	ldr	r3, [pc, #84]	; (800edf0 <USBH_Init+0x9c>)
 800ed9a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ed9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eda0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800eda4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eda8:	2100      	movs	r1, #0
 800edaa:	4618      	mov	r0, r3
 800edac:	f001 fe33 	bl	8010a16 <osMessageCreate>
 800edb0:	4602      	mov	r2, r0
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800edb8:	4b0e      	ldr	r3, [pc, #56]	; (800edf4 <USBH_Init+0xa0>)
 800edba:	f107 0414 	add.w	r4, r7, #20
 800edbe:	461d      	mov	r5, r3
 800edc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800edc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800edcc:	f107 0314 	add.w	r3, r7, #20
 800edd0:	68f9      	ldr	r1, [r7, #12]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f001 fce8 	bl	80107a8 <osThreadCreate>
 800edd8:	4602      	mov	r2, r0
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f006 f943 	bl	801506c <USBH_LL_Init>

  return USBH_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3740      	adds	r7, #64	; 0x40
 800edec:	46bd      	mov	sp, r7
 800edee:	bdb0      	pop	{r4, r5, r7, pc}
 800edf0:	0801eda0 	.word	0x0801eda0
 800edf4:	0801edbc 	.word	0x0801edbc

0800edf8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ee00:	2300      	movs	r3, #0
 800ee02:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ee04:	e008      	b.n	800ee18 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	32e0      	adds	r2, #224	; 0xe0
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	3301      	adds	r3, #1
 800ee16:	60fb      	str	r3, [r7, #12]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2b0e      	cmp	r3, #14
 800ee1c:	d9f3      	bls.n	800ee06 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60fb      	str	r3, [r7, #12]
 800ee22:	e009      	b.n	800ee38 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ee2e:	2200      	movs	r2, #0
 800ee30:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	3301      	adds	r3, #1
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee3e:	d3f1      	bcc.n	800ee24 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2240      	movs	r2, #64	; 0x40
 800ee64:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2201      	movs	r2, #1
 800ee78:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ee8a:	b480      	push	{r7}
 800ee8c:	b085      	sub	sp, #20
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800ee94:	2300      	movs	r3, #0
 800ee96:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d017      	beq.n	800eece <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d10f      	bne.n	800eec8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eeae:	1c59      	adds	r1, r3, #1
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	33dc      	adds	r3, #220	; 0xdc
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	4413      	add	r3, r2
 800eebe:	683a      	ldr	r2, [r7, #0]
 800eec0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	73fb      	strb	r3, [r7, #15]
 800eec6:	e004      	b.n	800eed2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800eec8:	2302      	movs	r3, #2
 800eeca:	73fb      	strb	r3, [r7, #15]
 800eecc:	e001      	b.n	800eed2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800eece:	2302      	movs	r3, #2
 800eed0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800eef6:	78fa      	ldrb	r2, [r7, #3]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d204      	bcs.n	800ef06 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	78fa      	ldrb	r2, [r7, #3]
 800ef00:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800ef04:	e001      	b.n	800ef0a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ef06:	2302      	movs	r3, #2
 800ef08:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3714      	adds	r7, #20
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	4608      	mov	r0, r1
 800ef22:	4611      	mov	r1, r2
 800ef24:	461a      	mov	r2, r3
 800ef26:	4603      	mov	r3, r0
 800ef28:	70fb      	strb	r3, [r7, #3]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	70bb      	strb	r3, [r7, #2]
 800ef2e:	4613      	mov	r3, r2
 800ef30:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800ef32:	2300      	movs	r3, #0
 800ef34:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800ef40:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ef42:	e025      	b.n	800ef90 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ef44:	7dfb      	ldrb	r3, [r7, #23]
 800ef46:	221a      	movs	r2, #26
 800ef48:	fb02 f303 	mul.w	r3, r2, r3
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	4413      	add	r3, r2
 800ef52:	3302      	adds	r3, #2
 800ef54:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	795b      	ldrb	r3, [r3, #5]
 800ef5a:	78fa      	ldrb	r2, [r7, #3]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d002      	beq.n	800ef66 <USBH_FindInterface+0x4e>
 800ef60:	78fb      	ldrb	r3, [r7, #3]
 800ef62:	2bff      	cmp	r3, #255	; 0xff
 800ef64:	d111      	bne.n	800ef8a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800ef6a:	78ba      	ldrb	r2, [r7, #2]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d002      	beq.n	800ef76 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800ef70:	78bb      	ldrb	r3, [r7, #2]
 800ef72:	2bff      	cmp	r3, #255	; 0xff
 800ef74:	d109      	bne.n	800ef8a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800ef7a:	787a      	ldrb	r2, [r7, #1]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d002      	beq.n	800ef86 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ef80:	787b      	ldrb	r3, [r7, #1]
 800ef82:	2bff      	cmp	r3, #255	; 0xff
 800ef84:	d101      	bne.n	800ef8a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ef86:	7dfb      	ldrb	r3, [r7, #23]
 800ef88:	e006      	b.n	800ef98 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ef8a:	7dfb      	ldrb	r3, [r7, #23]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ef90:	7dfb      	ldrb	r3, [r7, #23]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d9d6      	bls.n	800ef44 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ef96:	23ff      	movs	r3, #255	; 0xff
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	371c      	adds	r7, #28
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f006 f899 	bl	80150e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800efb2:	2101      	movs	r1, #1
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f006 f9b0 	bl	801531a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af04      	add	r7, sp, #16
 800efca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800efcc:	2302      	movs	r3, #2
 800efce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800efd0:	2300      	movs	r3, #0
 800efd2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 fb7e 	bl	800f6d6 <USBH_IsPortEnabled>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10c      	bne.n	800effa <USBH_Process+0x36>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d007      	beq.n	800effa <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	2b03      	cmp	r3, #3
 800eff2:	d002      	beq.n	800effa <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2203      	movs	r2, #3
 800eff8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	b2db      	uxtb	r3, r3
 800f000:	2b0b      	cmp	r3, #11
 800f002:	f200 81ab 	bhi.w	800f35c <USBH_Process+0x398>
 800f006:	a201      	add	r2, pc, #4	; (adr r2, 800f00c <USBH_Process+0x48>)
 800f008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f00c:	0800f03d 	.word	0x0800f03d
 800f010:	0800f07b 	.word	0x0800f07b
 800f014:	0800f08f 	.word	0x0800f08f
 800f018:	0800f337 	.word	0x0800f337
 800f01c:	0800f35d 	.word	0x0800f35d
 800f020:	0800f139 	.word	0x0800f139
 800f024:	0800f2d1 	.word	0x0800f2d1
 800f028:	0800f169 	.word	0x0800f169
 800f02c:	0800f1a5 	.word	0x0800f1a5
 800f030:	0800f1df 	.word	0x0800f1df
 800f034:	0800f227 	.word	0x0800f227
 800f038:	0800f31f 	.word	0x0800f31f
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f042:	b2db      	uxtb	r3, r3
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 818b 	beq.w	800f360 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2201      	movs	r2, #1
 800f04e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800f050:	20c8      	movs	r0, #200	; 0xc8
 800f052:	f006 f9ac 	bl	80153ae <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f006 f89f 	bl	801519a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f070:	2200      	movs	r2, #0
 800f072:	4619      	mov	r1, r3
 800f074:	f001 fcf8 	bl	8010a68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800f078:	e172      	b.n	800f360 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f080:	2b01      	cmp	r3, #1
 800f082:	f040 816f 	bne.w	800f364 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2202      	movs	r2, #2
 800f08a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f08c:	e16a      	b.n	800f364 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800f08e:	2064      	movs	r0, #100	; 0x64
 800f090:	f006 f98d 	bl	80153ae <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f006 f85b 	bl	8015150 <USBH_LL_GetSpeed>
 800f09a:	4603      	mov	r3, r0
 800f09c:	461a      	mov	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2205      	movs	r2, #5
 800f0a8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f001 fa16 	bl	80104de <USBH_AllocPipe>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800f0ba:	2180      	movs	r1, #128	; 0x80
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f001 fa0e 	bl	80104de <USBH_AllocPipe>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	7919      	ldrb	r1, [r3, #4]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800f0de:	b292      	uxth	r2, r2
 800f0e0:	9202      	str	r2, [sp, #8]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	9201      	str	r2, [sp, #4]
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2280      	movs	r2, #128	; 0x80
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f001 f9c7 	bl	8010480 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	7959      	ldrb	r1, [r3, #5]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800f106:	b292      	uxth	r2, r2
 800f108:	9202      	str	r2, [sp, #8]
 800f10a:	2200      	movs	r2, #0
 800f10c:	9201      	str	r2, [sp, #4]
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	4603      	mov	r3, r0
 800f112:	2200      	movs	r2, #0
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f001 f9b3 	bl	8010480 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2201      	movs	r2, #1
 800f11e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f12e:	2200      	movs	r2, #0
 800f130:	4619      	mov	r1, r3
 800f132:	f001 fc99 	bl	8010a68 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800f136:	e120      	b.n	800f37a <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f923 	bl	800f384 <USBH_HandleEnum>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	f040 8111 	bne.w	800f368 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2200      	movs	r2, #0
 800f14a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800f154:	2b01      	cmp	r3, #1
 800f156:	d103      	bne.n	800f160 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2208      	movs	r2, #8
 800f15c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800f15e:	e103      	b.n	800f368 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2207      	movs	r2, #7
 800f164:	701a      	strb	r2, [r3, #0]
    break;
 800f166:	e0ff      	b.n	800f368 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f000 80fc 	beq.w	800f36c <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f17a:	2101      	movs	r1, #1
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2208      	movs	r2, #8
 800f184:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2205      	movs	r2, #5
 800f18a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f19a:	2200      	movs	r2, #0
 800f19c:	4619      	mov	r1, r3
 800f19e:	f001 fc63 	bl	8010a68 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800f1a2:	e0e3      	b.n	800f36c <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fc09 	bl	800f9c6 <USBH_SetCfg>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d102      	bne.n	800f1c0 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2209      	movs	r2, #9
 800f1be:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	f001 fc46 	bl	8010a68 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800f1dc:	e0cd      	b.n	800f37a <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800f1e4:	f003 0320 	and.w	r3, r3, #32
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00a      	beq.n	800f202 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 fc0c 	bl	800fa0c <USBH_SetFeature>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d106      	bne.n	800f208 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	220a      	movs	r2, #10
 800f1fe:	701a      	strb	r2, [r3, #0]
 800f200:	e002      	b.n	800f208 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	220a      	movs	r2, #10
 800f206:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f21c:	2200      	movs	r2, #0
 800f21e:	4619      	mov	r1, r3
 800f220:	f001 fc22 	bl	8010a68 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800f224:	e0a9      	b.n	800f37a <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d040      	beq.n	800f2b2 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f238:	2300      	movs	r3, #0
 800f23a:	73fb      	strb	r3, [r7, #15]
 800f23c:	e017      	b.n	800f26e <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f23e:	7bfb      	ldrb	r3, [r7, #15]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	33dc      	adds	r3, #220	; 0xdc
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4413      	add	r3, r2
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	791a      	ldrb	r2, [r3, #4]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800f252:	429a      	cmp	r2, r3
 800f254:	d108      	bne.n	800f268 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	33dc      	adds	r3, #220	; 0xdc
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	4413      	add	r3, r2
 800f260:	685a      	ldr	r2, [r3, #4]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f268:	7bfb      	ldrb	r3, [r7, #15]
 800f26a:	3301      	adds	r3, #1
 800f26c:	73fb      	strb	r3, [r7, #15]
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d0e4      	beq.n	800f23e <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d016      	beq.n	800f2ac <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	4798      	blx	r3
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d109      	bne.n	800f2a4 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2206      	movs	r2, #6
 800f294:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f29c:	2103      	movs	r1, #3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	4798      	blx	r3
 800f2a2:	e006      	b.n	800f2b2 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	220d      	movs	r2, #13
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	e002      	b.n	800f2b2 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	220d      	movs	r2, #13
 800f2b0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2205      	movs	r2, #5
 800f2b6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f001 fbcd 	bl	8010a68 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800f2ce:	e054      	b.n	800f37a <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00f      	beq.n	800f2fa <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	4798      	blx	r3
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800f2ea:	7bbb      	ldrb	r3, [r7, #14]
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d13e      	bne.n	800f370 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	220b      	movs	r2, #11
 800f2f6:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800f2f8:	e03a      	b.n	800f370 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	220d      	movs	r2, #13
 800f2fe:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2205      	movs	r2, #5
 800f304:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f314:	2200      	movs	r2, #0
 800f316:	4619      	mov	r1, r3
 800f318:	f001 fba6 	bl	8010a68 <osMessagePut>
    break;
 800f31c:	e028      	b.n	800f370 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f324:	2b00      	cmp	r3, #0
 800f326:	d025      	beq.n	800f374 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f32e:	695b      	ldr	r3, [r3, #20]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	4798      	blx	r3
    }
    break;
 800f334:	e01e      	b.n	800f374 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7ff fd5e 	bl	800edf8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f342:	2b00      	cmp	r3, #0
 800f344:	d018      	beq.n	800f378 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2200      	movs	r2, #0
 800f356:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800f35a:	e00d      	b.n	800f378 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800f35c:	bf00      	nop
 800f35e:	e00c      	b.n	800f37a <USBH_Process+0x3b6>
    break;
 800f360:	bf00      	nop
 800f362:	e00a      	b.n	800f37a <USBH_Process+0x3b6>
    break;
 800f364:	bf00      	nop
 800f366:	e008      	b.n	800f37a <USBH_Process+0x3b6>
    break;
 800f368:	bf00      	nop
 800f36a:	e006      	b.n	800f37a <USBH_Process+0x3b6>
    break;
 800f36c:	bf00      	nop
 800f36e:	e004      	b.n	800f37a <USBH_Process+0x3b6>
    break;
 800f370:	bf00      	nop
 800f372:	e002      	b.n	800f37a <USBH_Process+0x3b6>
    break;
 800f374:	bf00      	nop
 800f376:	e000      	b.n	800f37a <USBH_Process+0x3b6>
    break;
 800f378:	bf00      	nop
  }
 return USBH_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b088      	sub	sp, #32
 800f388:	af04      	add	r7, sp, #16
 800f38a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f38c:	2301      	movs	r3, #1
 800f38e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	785b      	ldrb	r3, [r3, #1]
 800f394:	2b07      	cmp	r3, #7
 800f396:	f200 8132 	bhi.w	800f5fe <USBH_HandleEnum+0x27a>
 800f39a:	a201      	add	r2, pc, #4	; (adr r2, 800f3a0 <USBH_HandleEnum+0x1c>)
 800f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a0:	0800f3c1 	.word	0x0800f3c1
 800f3a4:	0800f433 	.word	0x0800f433
 800f3a8:	0800f44b 	.word	0x0800f44b
 800f3ac:	0800f4c1 	.word	0x0800f4c1
 800f3b0:	0800f4d9 	.word	0x0800f4d9
 800f3b4:	0800f4f7 	.word	0x0800f4f7
 800f3b8:	0800f563 	.word	0x0800f563
 800f3bc:	0800f5b3 	.word	0x0800f5b3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800f3c0:	2108      	movs	r1, #8
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 fa2f 	bl	800f826 <USBH_Get_DevDesc>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f040 8119 	bne.w	800f602 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	7919      	ldrb	r1, [r3, #4]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f3f4:	b292      	uxth	r2, r2
 800f3f6:	9202      	str	r2, [sp, #8]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	9201      	str	r2, [sp, #4]
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	4603      	mov	r3, r0
 800f400:	2280      	movs	r2, #128	; 0x80
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f001 f83c 	bl	8010480 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	7959      	ldrb	r1, [r3, #5]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f41c:	b292      	uxth	r2, r2
 800f41e:	9202      	str	r2, [sp, #8]
 800f420:	2200      	movs	r2, #0
 800f422:	9201      	str	r2, [sp, #4]
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	4603      	mov	r3, r0
 800f428:	2200      	movs	r2, #0
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f001 f828 	bl	8010480 <USBH_OpenPipe>

    }
    break;
 800f430:	e0e7      	b.n	800f602 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800f432:	2112      	movs	r1, #18
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f9f6 	bl	800f826 <USBH_Get_DevDesc>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 80e2 	bne.w	800f606 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2202      	movs	r2, #2
 800f446:	705a      	strb	r2, [r3, #1]

    }
    break;
 800f448:	e0dd      	b.n	800f606 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800f44a:	2101      	movs	r1, #1
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 fa96 	bl	800f97e <USBH_SetAddress>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 80d8 	bne.w	800f60a <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800f45a:	2002      	movs	r0, #2
 800f45c:	f005 ffa7 	bl	80153ae <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2201      	movs	r2, #1
 800f464:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2203      	movs	r2, #3
 800f46c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	7919      	ldrb	r1, [r3, #4]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f482:	b292      	uxth	r2, r2
 800f484:	9202      	str	r2, [sp, #8]
 800f486:	2200      	movs	r2, #0
 800f488:	9201      	str	r2, [sp, #4]
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	4603      	mov	r3, r0
 800f48e:	2280      	movs	r2, #128	; 0x80
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fff5 	bl	8010480 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	7959      	ldrb	r1, [r3, #5]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f4aa:	b292      	uxth	r2, r2
 800f4ac:	9202      	str	r2, [sp, #8]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	9201      	str	r2, [sp, #4]
 800f4b2:	9300      	str	r3, [sp, #0]
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 ffe1 	bl	8010480 <USBH_OpenPipe>
    }
    break;
 800f4be:	e0a4      	b.n	800f60a <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800f4c0:	2109      	movs	r1, #9
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 f9d7 	bl	800f876 <USBH_Get_CfgDesc>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f040 809f 	bne.w	800f60e <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2204      	movs	r2, #4
 800f4d4:	705a      	strb	r2, [r3, #1]
    }
    break;
 800f4d6:	e09a      	b.n	800f60e <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 f9c8 	bl	800f876 <USBH_Get_CfgDesc>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f040 8092 	bne.w	800f612 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2205      	movs	r2, #5
 800f4f2:	705a      	strb	r2, [r3, #1]
    }
    break;
 800f4f4:	e08d      	b.n	800f612 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d01e      	beq.n	800f53e <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800f50c:	23ff      	movs	r3, #255	; 0xff
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f9d5 	bl	800f8be <USBH_Get_StringDesc>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d17d      	bne.n	800f616 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2206      	movs	r2, #6
 800f51e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2205      	movs	r2, #5
 800f524:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f534:	2200      	movs	r2, #0
 800f536:	4619      	mov	r1, r3
 800f538:	f001 fa96 	bl	8010a68 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800f53c:	e06b      	b.n	800f616 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2206      	movs	r2, #6
 800f542:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2205      	movs	r2, #5
 800f548:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f558:	2200      	movs	r2, #0
 800f55a:	4619      	mov	r1, r3
 800f55c:	f001 fa84 	bl	8010a68 <osMessagePut>
    break;
 800f560:	e059      	b.n	800f616 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d010      	beq.n	800f58e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800f578:	23ff      	movs	r3, #255	; 0xff
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 f99f 	bl	800f8be <USBH_Get_StringDesc>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d149      	bne.n	800f61a <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2207      	movs	r2, #7
 800f58a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800f58c:	e045      	b.n	800f61a <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2207      	movs	r2, #7
 800f592:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2205      	movs	r2, #5
 800f598:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	f001 fa5c 	bl	8010a68 <osMessagePut>
    break;
 800f5b0:	e033      	b.n	800f61a <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00f      	beq.n	800f5dc <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800f5c8:	23ff      	movs	r3, #255	; 0xff
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 f977 	bl	800f8be <USBH_Get_StringDesc>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d123      	bne.n	800f61e <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800f5da:	e020      	b.n	800f61e <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2205      	movs	r2, #5
 800f5e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	f001 fa36 	bl	8010a68 <osMessagePut>
    break;
 800f5fc:	e00f      	b.n	800f61e <USBH_HandleEnum+0x29a>

  default:
    break;
 800f5fe:	bf00      	nop
 800f600:	e00e      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f602:	bf00      	nop
 800f604:	e00c      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f606:	bf00      	nop
 800f608:	e00a      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f60a:	bf00      	nop
 800f60c:	e008      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f60e:	bf00      	nop
 800f610:	e006      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f612:	bf00      	nop
 800f614:	e004      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f616:	bf00      	nop
 800f618:	e002      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f61a:	bf00      	nop
 800f61c:	e000      	b.n	800f620 <USBH_HandleEnum+0x29c>
    break;
 800f61e:	bf00      	nop
  }
  return Status;
 800f620:	7bfb      	ldrb	r3, [r7, #15]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop

0800f62c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800f63e:	bf00      	nop
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b082      	sub	sp, #8
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800f658:	1c5a      	adds	r2, r3, #1
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 f804 	bl	800f66e <USBH_HandleSof>
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b082      	sub	sp, #8
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	2b0b      	cmp	r3, #11
 800f67e:	d10a      	bne.n	800f696 <USBH_HandleSof+0x28>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f686:	2b00      	cmp	r3, #0
 800f688:	d005      	beq.n	800f696 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	4798      	blx	r3
  }
}
 800f696:	bf00      	nop
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800f69e:	b480      	push	{r7}
 800f6a0:	b083      	sub	sp, #12
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800f6ae:	bf00      	nop
}
 800f6b0:	370c      	adds	r7, #12
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr

0800f6ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800f6ba:	b480      	push	{r7}
 800f6bc:	b083      	sub	sp, #12
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800f6ca:	bf00      	nop
}
 800f6cc:	370c      	adds	r7, #12
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	b083      	sub	sp, #12
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10f      	bne.n	800f722 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00e      	beq.n	800f732 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f71a:	2104      	movs	r1, #4
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	4798      	blx	r3
 800f720:	e007      	b.n	800f732 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d102      	bne.n	800f732 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2202      	movs	r2, #2
 800f730:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2201      	movs	r2, #1
 800f736:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f746:	2200      	movs	r2, #0
 800f748:	4619      	mov	r1, r3
 800f74a:	f001 f98d 	bl	8010a68 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f005 fcda 	bl	801511a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	791b      	ldrb	r3, [r3, #4]
 800f76a:	4619      	mov	r1, r3
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fed4 	bl	801051a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	795b      	ldrb	r3, [r3, #5]
 800f776:	4619      	mov	r1, r3
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fece 	bl	801051a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2200      	movs	r2, #0
 800f782:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d005      	beq.n	800f79c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f796:	2105      	movs	r1, #5
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f005 fca1 	bl	80150e4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2203      	movs	r2, #3
 800f7a6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f7bc:	2200      	movs	r2, #0
 800f7be:	4619      	mov	r1, r3
 800f7c0:	f001 f952 	bl	8010a68 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b086      	sub	sp, #24
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800f7dc:	f107 030c 	add.w	r3, r7, #12
 800f7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f001 f97f 	bl	8010ae8 <osMessageGet>
    if(event.status == osEventMessage)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b10      	cmp	r3, #16
 800f7ee:	d1f2      	bne.n	800f7d6 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7ff fbe7 	bl	800efc4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f7f6:	e7ee      	b.n	800f7d6 <USBH_Process_OS+0x8>

0800f7f8 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2201      	movs	r2, #1
 800f804:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f814:	2200      	movs	r2, #0
 800f816:	4619      	mov	r1, r3
 800f818:	f001 f926 	bl	8010a68 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800f81c:	2300      	movs	r3, #0
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b086      	sub	sp, #24
 800f82a:	af02      	add	r7, sp, #8
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f838:	78fb      	ldrb	r3, [r7, #3]
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	4613      	mov	r3, r2
 800f840:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f844:	2100      	movs	r1, #0
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f864 	bl	800f914 <USBH_GetDescriptor>
 800f84c:	4603      	mov	r3, r0
 800f84e:	73fb      	strb	r3, [r7, #15]
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d10a      	bne.n	800f86c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f203 3022 	addw	r0, r3, #802	; 0x322
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f862:	78fa      	ldrb	r2, [r7, #3]
 800f864:	b292      	uxth	r2, r2
 800f866:	4619      	mov	r1, r3
 800f868:	f000 f918 	bl	800fa9c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800f876:	b580      	push	{r7, lr}
 800f878:	b086      	sub	sp, #24
 800f87a:	af02      	add	r7, sp, #8
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	460b      	mov	r3, r1
 800f880:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	331c      	adds	r3, #28
 800f886:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800f888:	887b      	ldrh	r3, [r7, #2]
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f892:	2100      	movs	r1, #0
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 f83d 	bl	800f914 <USBH_GetDescriptor>
 800f89a:	4603      	mov	r3, r0
 800f89c:	72fb      	strb	r3, [r7, #11]
 800f89e:	7afb      	ldrb	r3, [r7, #11]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d107      	bne.n	800f8b4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800f8aa:	887a      	ldrh	r2, [r7, #2]
 800f8ac:	68f9      	ldr	r1, [r7, #12]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f000 f964 	bl	800fb7c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800f8b4:	7afb      	ldrb	r3, [r7, #11]
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b088      	sub	sp, #32
 800f8c2:	af02      	add	r7, sp, #8
 800f8c4:	60f8      	str	r0, [r7, #12]
 800f8c6:	607a      	str	r2, [r7, #4]
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	72fb      	strb	r3, [r7, #11]
 800f8ce:	4613      	mov	r3, r2
 800f8d0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800f8d2:	7afb      	ldrb	r3, [r7, #11]
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f8da:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f8e2:	893b      	ldrh	r3, [r7, #8]
 800f8e4:	9300      	str	r3, [sp, #0]
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f000 f812 	bl	800f914 <USBH_GetDescriptor>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	75fb      	strb	r3, [r7, #23]
 800f8f4:	7dfb      	ldrb	r3, [r7, #23]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d107      	bne.n	800f90a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f900:	893a      	ldrh	r2, [r7, #8]
 800f902:	6879      	ldr	r1, [r7, #4]
 800f904:	4618      	mov	r0, r3
 800f906:	f000 fa37 	bl	800fd78 <USBH_ParseStringDesc>
  }
  return status;
 800f90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3718      	adds	r7, #24
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	607b      	str	r3, [r7, #4]
 800f91e:	460b      	mov	r3, r1
 800f920:	72fb      	strb	r3, [r7, #11]
 800f922:	4613      	mov	r3, r2
 800f924:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	789b      	ldrb	r3, [r3, #2]
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d11c      	bne.n	800f968 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f92e:	7afb      	ldrb	r3, [r7, #11]
 800f930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f934:	b2da      	uxtb	r2, r3
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2206      	movs	r2, #6
 800f93e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	893a      	ldrh	r2, [r7, #8]
 800f944:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f946:	893b      	ldrh	r3, [r7, #8]
 800f948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f94c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f950:	d104      	bne.n	800f95c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f240 4209 	movw	r2, #1033	; 0x409
 800f958:	829a      	strh	r2, [r3, #20]
 800f95a:	e002      	b.n	800f962 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2200      	movs	r2, #0
 800f960:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	8b3a      	ldrh	r2, [r7, #24]
 800f966:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800f968:	8b3b      	ldrh	r3, [r7, #24]
 800f96a:	461a      	mov	r2, r3
 800f96c:	6879      	ldr	r1, [r7, #4]
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f000 fa50 	bl	800fe14 <USBH_CtlReq>
 800f974:	4603      	mov	r3, r0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b082      	sub	sp, #8
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	460b      	mov	r3, r1
 800f988:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	789b      	ldrb	r3, [r3, #2]
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d10f      	bne.n	800f9b2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2205      	movs	r2, #5
 800f99c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f99e:	78fb      	ldrb	r3, [r7, #3]
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fa2c 	bl	800fe14 <USBH_CtlReq>
 800f9bc:	4603      	mov	r3, r0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b082      	sub	sp, #8
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	789b      	ldrb	r3, [r3, #2]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d10e      	bne.n	800f9f8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2209      	movs	r2, #9
 800f9e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	887a      	ldrh	r2, [r7, #2]
 800f9ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 fa09 	bl	800fe14 <USBH_CtlReq>
 800fa02:	4603      	mov	r3, r0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	460b      	mov	r3, r1
 800fa16:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	789b      	ldrb	r3, [r3, #2]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d10f      	bne.n	800fa40 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2203      	movs	r2, #3
 800fa2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fa2c:	78fb      	ldrb	r3, [r7, #3]
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fa40:	2200      	movs	r2, #0
 800fa42:	2100      	movs	r1, #0
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f9e5 	bl	800fe14 <USBH_CtlReq>
 800fa4a:	4603      	mov	r3, r0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	789b      	ldrb	r3, [r3, #2]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d10f      	bne.n	800fa88 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2202      	movs	r2, #2
 800fa6c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2201      	movs	r2, #1
 800fa72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fa7a:	78fb      	ldrb	r3, [r7, #3]
 800fa7c:	b29a      	uxth	r2, r3
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 f9c1 	bl	800fe14 <USBH_CtlReq>
 800fa92:	4603      	mov	r3, r0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	4613      	mov	r3, r2
 800faa8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	781a      	ldrb	r2, [r3, #0]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	785a      	ldrb	r2, [r3, #1]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	3302      	adds	r3, #2
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	3303      	adds	r3, #3
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	b29b      	uxth	r3, r3
 800faca:	021b      	lsls	r3, r3, #8
 800facc:	b29b      	uxth	r3, r3
 800face:	4313      	orrs	r3, r2
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	791a      	ldrb	r2, [r3, #4]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	795a      	ldrb	r2, [r3, #5]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	799a      	ldrb	r2, [r3, #6]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	79da      	ldrb	r2, [r3, #7]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800faf6:	88fb      	ldrh	r3, [r7, #6]
 800faf8:	2b08      	cmp	r3, #8
 800fafa:	d939      	bls.n	800fb70 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	3308      	adds	r3, #8
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	3309      	adds	r3, #9
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	021b      	lsls	r3, r3, #8
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	4313      	orrs	r3, r2
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	330a      	adds	r3, #10
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	330b      	adds	r3, #11
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	021b      	lsls	r3, r3, #8
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	330c      	adds	r3, #12
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	330d      	adds	r3, #13
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	021b      	lsls	r3, r3, #8
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	7b9a      	ldrb	r2, [r3, #14]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	7bda      	ldrb	r2, [r3, #15]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	7c1a      	ldrb	r2, [r3, #16]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	7c5a      	ldrb	r2, [r3, #17]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	745a      	strb	r2, [r3, #17]
  }
}
 800fb70:	bf00      	nop
 800fb72:	3714      	adds	r7, #20
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b08a      	sub	sp, #40	; 0x28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	4613      	mov	r3, r2
 800fb88:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fb94:	2300      	movs	r3, #0
 800fb96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	781a      	ldrb	r2, [r3, #0]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	785a      	ldrb	r2, [r3, #1]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	3302      	adds	r3, #2
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	3303      	adds	r3, #3
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	021b      	lsls	r3, r3, #8
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	b29a      	uxth	r2, r3
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	791a      	ldrb	r2, [r3, #4]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	795a      	ldrb	r2, [r3, #5]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	799a      	ldrb	r2, [r3, #6]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	79da      	ldrb	r2, [r3, #7]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	7a1a      	ldrb	r2, [r3, #8]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fbf2:	88fb      	ldrh	r3, [r7, #6]
 800fbf4:	2b09      	cmp	r3, #9
 800fbf6:	d95f      	bls.n	800fcb8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fbf8:	2309      	movs	r3, #9
 800fbfa:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fc00:	e051      	b.n	800fca6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fc02:	f107 0316 	add.w	r3, r7, #22
 800fc06:	4619      	mov	r1, r3
 800fc08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc0a:	f000 f8e8 	bl	800fdde <USBH_GetNextDesc>
 800fc0e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	785b      	ldrb	r3, [r3, #1]
 800fc14:	2b04      	cmp	r3, #4
 800fc16:	d146      	bne.n	800fca6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fc18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc1c:	221a      	movs	r2, #26
 800fc1e:	fb02 f303 	mul.w	r3, r2, r3
 800fc22:	3308      	adds	r3, #8
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	4413      	add	r3, r2
 800fc28:	3302      	adds	r3, #2
 800fc2a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800fc2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc2e:	69f8      	ldr	r0, [r7, #28]
 800fc30:	f000 f846 	bl	800fcc0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fc34:	2300      	movs	r3, #0
 800fc36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fc3e:	e022      	b.n	800fc86 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800fc40:	f107 0316 	add.w	r3, r7, #22
 800fc44:	4619      	mov	r1, r3
 800fc46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc48:	f000 f8c9 	bl	800fdde <USBH_GetNextDesc>
 800fc4c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	785b      	ldrb	r3, [r3, #1]
 800fc52:	2b05      	cmp	r3, #5
 800fc54:	d117      	bne.n	800fc86 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fc56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc5a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fc5e:	3201      	adds	r2, #1
 800fc60:	00d2      	lsls	r2, r2, #3
 800fc62:	211a      	movs	r1, #26
 800fc64:	fb01 f303 	mul.w	r3, r1, r3
 800fc68:	4413      	add	r3, r2
 800fc6a:	3308      	adds	r3, #8
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4413      	add	r3, r2
 800fc70:	3304      	adds	r3, #4
 800fc72:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800fc74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc76:	69b8      	ldr	r0, [r7, #24]
 800fc78:	f000 f851 	bl	800fd1e <USBH_ParseEPDesc>
            ep_ix++;
 800fc7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fc80:	3301      	adds	r3, #1
 800fc82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	791b      	ldrb	r3, [r3, #4]
 800fc8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d204      	bcs.n	800fc9c <USBH_ParseCfgDesc+0x120>
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	885a      	ldrh	r2, [r3, #2]
 800fc96:	8afb      	ldrh	r3, [r7, #22]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d8d1      	bhi.n	800fc40 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fc9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fca0:	3301      	adds	r3, #1
 800fca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d804      	bhi.n	800fcb8 <USBH_ParseCfgDesc+0x13c>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	885a      	ldrh	r2, [r3, #2]
 800fcb2:	8afb      	ldrh	r3, [r7, #22]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d8a4      	bhi.n	800fc02 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fcb8:	bf00      	nop
 800fcba:	3728      	adds	r7, #40	; 0x28
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	781a      	ldrb	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	785a      	ldrb	r2, [r3, #1]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	789a      	ldrb	r2, [r3, #2]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	78da      	ldrb	r2, [r3, #3]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	791a      	ldrb	r2, [r3, #4]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	795a      	ldrb	r2, [r3, #5]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	799a      	ldrb	r2, [r3, #6]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	79da      	ldrb	r2, [r3, #7]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	7a1a      	ldrb	r2, [r3, #8]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	721a      	strb	r2, [r3, #8]
}
 800fd12:	bf00      	nop
 800fd14:	370c      	adds	r7, #12
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr

0800fd1e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800fd1e:	b480      	push	{r7}
 800fd20:	b083      	sub	sp, #12
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
 800fd26:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	781a      	ldrb	r2, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	785a      	ldrb	r2, [r3, #1]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	789a      	ldrb	r2, [r3, #2]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	78da      	ldrb	r2, [r3, #3]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	3305      	adds	r3, #5
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	021b      	lsls	r3, r3, #8
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	799a      	ldrb	r2, [r3, #6]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	719a      	strb	r2, [r3, #6]
}
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b087      	sub	sp, #28
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	4613      	mov	r3, r2
 800fd84:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	3301      	adds	r3, #1
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	2b03      	cmp	r3, #3
 800fd8e:	d120      	bne.n	800fdd2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	1e9a      	subs	r2, r3, #2
 800fd96:	88fb      	ldrh	r3, [r7, #6]
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	bf28      	it	cs
 800fd9c:	4613      	movcs	r3, r2
 800fd9e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	3302      	adds	r3, #2
 800fda4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fda6:	2300      	movs	r3, #0
 800fda8:	82fb      	strh	r3, [r7, #22]
 800fdaa:	e00b      	b.n	800fdc4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fdac:	8afb      	ldrh	r3, [r7, #22]
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	781a      	ldrb	r2, [r3, #0]
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fdbe:	8afb      	ldrh	r3, [r7, #22]
 800fdc0:	3302      	adds	r3, #2
 800fdc2:	82fb      	strh	r3, [r7, #22]
 800fdc4:	8afa      	ldrh	r2, [r7, #22]
 800fdc6:	8abb      	ldrh	r3, [r7, #20]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d3ef      	bcc.n	800fdac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	701a      	strb	r2, [r3, #0]
  }
}
 800fdd2:	bf00      	nop
 800fdd4:	371c      	adds	r7, #28
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr

0800fdde <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800fdde:	b480      	push	{r7}
 800fde0:	b085      	sub	sp, #20
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
 800fde6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	881a      	ldrh	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	4413      	add	r3, r2
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	4413      	add	r3, r2
 800fe04:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800fe06:	68fb      	ldr	r3, [r7, #12]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3714      	adds	r7, #20
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr

0800fe14 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b086      	sub	sp, #24
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	4613      	mov	r3, r2
 800fe20:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fe22:	2301      	movs	r3, #1
 800fe24:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	789b      	ldrb	r3, [r3, #2]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d002      	beq.n	800fe34 <USBH_CtlReq+0x20>
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	d01d      	beq.n	800fe6e <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800fe32:	e042      	b.n	800feba <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	68ba      	ldr	r2, [r7, #8]
 800fe38:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	88fa      	ldrh	r2, [r7, #6]
 800fe3e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2201      	movs	r2, #1
 800fe44:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2202      	movs	r2, #2
 800fe4a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2203      	movs	r2, #3
 800fe54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe64:	2200      	movs	r2, #0
 800fe66:	4619      	mov	r1, r3
 800fe68:	f000 fdfe 	bl	8010a68 <osMessagePut>
    break;
 800fe6c:	e025      	b.n	800feba <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f000 f828 	bl	800fec4 <USBH_HandleControl>
 800fe74:	4603      	mov	r3, r0
 800fe76:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800fe78:	7dfb      	ldrb	r3, [r7, #23]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d108      	bne.n	800fe90 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2201      	movs	r2, #1
 800fe82:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2200      	movs	r2, #0
 800fe88:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	75fb      	strb	r3, [r7, #23]
    break;
 800fe8e:	e013      	b.n	800feb8 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d108      	bne.n	800fea8 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2201      	movs	r2, #1
 800fe9a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800fea2:	2303      	movs	r3, #3
 800fea4:	75fb      	strb	r3, [r7, #23]
    break;
 800fea6:	e007      	b.n	800feb8 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800fea8:	7dfb      	ldrb	r3, [r7, #23]
 800feaa:	2b02      	cmp	r3, #2
 800feac:	d104      	bne.n	800feb8 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2201      	movs	r2, #1
 800feb2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800feb4:	2302      	movs	r3, #2
 800feb6:	75fb      	strb	r3, [r7, #23]
    break;
 800feb8:	bf00      	nop
  }
  return status;
 800feba:	7dfb      	ldrb	r3, [r7, #23]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af02      	add	r7, sp, #8
 800feca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fecc:	2301      	movs	r3, #1
 800fece:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fed0:	2300      	movs	r3, #0
 800fed2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	7e1b      	ldrb	r3, [r3, #24]
 800fed8:	3b01      	subs	r3, #1
 800feda:	2b0a      	cmp	r3, #10
 800fedc:	f200 821f 	bhi.w	801031e <USBH_HandleControl+0x45a>
 800fee0:	a201      	add	r2, pc, #4	; (adr r2, 800fee8 <USBH_HandleControl+0x24>)
 800fee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee6:	bf00      	nop
 800fee8:	0800ff15 	.word	0x0800ff15
 800feec:	0800ff2f 	.word	0x0800ff2f
 800fef0:	0800ffd1 	.word	0x0800ffd1
 800fef4:	0800fff7 	.word	0x0800fff7
 800fef8:	08010083 	.word	0x08010083
 800fefc:	080100af 	.word	0x080100af
 800ff00:	08010171 	.word	0x08010171
 800ff04:	08010193 	.word	0x08010193
 800ff08:	08010225 	.word	0x08010225
 800ff0c:	0801024d 	.word	0x0801024d
 800ff10:	080102df 	.word	0x080102df
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f103 0110 	add.w	r1, r3, #16
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	795b      	ldrb	r3, [r3, #5]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fa0d 	bl	8010340 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2202      	movs	r2, #2
 800ff2a:	761a      	strb	r2, [r3, #24]
    break;
 800ff2c:	e202      	b.n	8010334 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	795b      	ldrb	r3, [r3, #5]
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f005 f9dd 	bl	80152f4 <USBH_LL_GetURBState>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800ff3e:	7bbb      	ldrb	r3, [r7, #14]
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d12c      	bne.n	800ff9e <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	7c1b      	ldrb	r3, [r3, #16]
 800ff48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ff4c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	8adb      	ldrh	r3, [r3, #22]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00a      	beq.n	800ff6c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800ff56:	7b7b      	ldrb	r3, [r7, #13]
 800ff58:	2b80      	cmp	r3, #128	; 0x80
 800ff5a:	d103      	bne.n	800ff64 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2203      	movs	r2, #3
 800ff60:	761a      	strb	r2, [r3, #24]
 800ff62:	e00d      	b.n	800ff80 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2205      	movs	r2, #5
 800ff68:	761a      	strb	r2, [r3, #24]
 800ff6a:	e009      	b.n	800ff80 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800ff6c:	7b7b      	ldrb	r3, [r7, #13]
 800ff6e:	2b80      	cmp	r3, #128	; 0x80
 800ff70:	d103      	bne.n	800ff7a <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2209      	movs	r2, #9
 800ff76:	761a      	strb	r2, [r3, #24]
 800ff78:	e002      	b.n	800ff80 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2207      	movs	r2, #7
 800ff7e:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2203      	movs	r2, #3
 800ff84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff94:	2200      	movs	r2, #0
 800ff96:	4619      	mov	r1, r3
 800ff98:	f000 fd66 	bl	8010a68 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ff9c:	e1c1      	b.n	8010322 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ff9e:	7bbb      	ldrb	r3, [r7, #14]
 800ffa0:	2b04      	cmp	r3, #4
 800ffa2:	d003      	beq.n	800ffac <USBH_HandleControl+0xe8>
 800ffa4:	7bbb      	ldrb	r3, [r7, #14]
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	f040 81bb 	bne.w	8010322 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	220b      	movs	r2, #11
 800ffb0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2203      	movs	r2, #3
 800ffb6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	4619      	mov	r1, r3
 800ffca:	f000 fd4d 	bl	8010a68 <osMessagePut>
    break;
 800ffce:	e1a8      	b.n	8010322 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6899      	ldr	r1, [r3, #8]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	899a      	ldrh	r2, [r3, #12]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	791b      	ldrb	r3, [r3, #4]
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 f9e8 	bl	80103be <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2204      	movs	r2, #4
 800fff2:	761a      	strb	r2, [r3, #24]
    break;
 800fff4:	e19e      	b.n	8010334 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	791b      	ldrb	r3, [r3, #4]
 800fffa:	4619      	mov	r1, r3
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f005 f979 	bl	80152f4 <USBH_LL_GetURBState>
 8010002:	4603      	mov	r3, r0
 8010004:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8010006:	7bbb      	ldrb	r3, [r7, #14]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d110      	bne.n	801002e <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2209      	movs	r2, #9
 8010010:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2203      	movs	r2, #3
 8010016:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010026:	2200      	movs	r2, #0
 8010028:	4619      	mov	r1, r3
 801002a:	f000 fd1d 	bl	8010a68 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 801002e:	7bbb      	ldrb	r3, [r7, #14]
 8010030:	2b05      	cmp	r3, #5
 8010032:	d110      	bne.n	8010056 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8010034:	2303      	movs	r3, #3
 8010036:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2203      	movs	r2, #3
 801003c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801004c:	2200      	movs	r2, #0
 801004e:	4619      	mov	r1, r3
 8010050:	f000 fd0a 	bl	8010a68 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8010054:	e167      	b.n	8010326 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8010056:	7bbb      	ldrb	r3, [r7, #14]
 8010058:	2b04      	cmp	r3, #4
 801005a:	f040 8164 	bne.w	8010326 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	220b      	movs	r2, #11
 8010062:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2203      	movs	r2, #3
 8010068:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010078:	2200      	movs	r2, #0
 801007a:	4619      	mov	r1, r3
 801007c:	f000 fcf4 	bl	8010a68 <osMessagePut>
    break;
 8010080:	e151      	b.n	8010326 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6899      	ldr	r1, [r3, #8]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	899a      	ldrh	r2, [r3, #12]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	7958      	ldrb	r0, [r3, #5]
 801008e:	2301      	movs	r3, #1
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	4603      	mov	r3, r0
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f96d 	bl	8010374 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2206      	movs	r2, #6
 80100aa:	761a      	strb	r2, [r3, #24]
    break;
 80100ac:	e142      	b.n	8010334 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	795b      	ldrb	r3, [r3, #5]
 80100b2:	4619      	mov	r1, r3
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f005 f91d 	bl	80152f4 <USBH_LL_GetURBState>
 80100ba:	4603      	mov	r3, r0
 80100bc:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80100be:	7bbb      	ldrb	r3, [r7, #14]
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d111      	bne.n	80100e8 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2207      	movs	r2, #7
 80100c8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2203      	movs	r2, #3
 80100ce:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80100de:	2200      	movs	r2, #0
 80100e0:	4619      	mov	r1, r3
 80100e2:	f000 fcc1 	bl	8010a68 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80100e6:	e120      	b.n	801032a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
 80100ea:	2b05      	cmp	r3, #5
 80100ec:	d113      	bne.n	8010116 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	220c      	movs	r2, #12
 80100f2:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80100f4:	2303      	movs	r3, #3
 80100f6:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2203      	movs	r2, #3
 80100fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801010c:	2200      	movs	r2, #0
 801010e:	4619      	mov	r1, r3
 8010110:	f000 fcaa 	bl	8010a68 <osMessagePut>
    break;
 8010114:	e109      	b.n	801032a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8010116:	7bbb      	ldrb	r3, [r7, #14]
 8010118:	2b02      	cmp	r3, #2
 801011a:	d111      	bne.n	8010140 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2205      	movs	r2, #5
 8010120:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2203      	movs	r2, #3
 8010126:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010136:	2200      	movs	r2, #0
 8010138:	4619      	mov	r1, r3
 801013a:	f000 fc95 	bl	8010a68 <osMessagePut>
    break;
 801013e:	e0f4      	b.n	801032a <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8010140:	7bbb      	ldrb	r3, [r7, #14]
 8010142:	2b04      	cmp	r3, #4
 8010144:	f040 80f1 	bne.w	801032a <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	220b      	movs	r2, #11
 801014c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 801014e:	2302      	movs	r3, #2
 8010150:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2203      	movs	r2, #3
 8010156:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010166:	2200      	movs	r2, #0
 8010168:	4619      	mov	r1, r3
 801016a:	f000 fc7d 	bl	8010a68 <osMessagePut>
    break;
 801016e:	e0dc      	b.n	801032a <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	791b      	ldrb	r3, [r3, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	2100      	movs	r1, #0
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f920 	bl	80103be <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8010184:	b29a      	uxth	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2208      	movs	r2, #8
 801018e:	761a      	strb	r2, [r3, #24]

    break;
 8010190:	e0d0      	b.n	8010334 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	791b      	ldrb	r3, [r3, #4]
 8010196:	4619      	mov	r1, r3
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f005 f8ab 	bl	80152f4 <USBH_LL_GetURBState>
 801019e:	4603      	mov	r3, r0
 80101a0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80101a2:	7bbb      	ldrb	r3, [r7, #14]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d113      	bne.n	80101d0 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	220d      	movs	r2, #13
 80101ac:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80101ae:	2300      	movs	r3, #0
 80101b0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2203      	movs	r2, #3
 80101b6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80101c6:	2200      	movs	r2, #0
 80101c8:	4619      	mov	r1, r3
 80101ca:	f000 fc4d 	bl	8010a68 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80101ce:	e0ae      	b.n	801032e <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 80101d0:	7bbb      	ldrb	r3, [r7, #14]
 80101d2:	2b04      	cmp	r3, #4
 80101d4:	d111      	bne.n	80101fa <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	220b      	movs	r2, #11
 80101da:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2203      	movs	r2, #3
 80101e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80101f0:	2200      	movs	r2, #0
 80101f2:	4619      	mov	r1, r3
 80101f4:	f000 fc38 	bl	8010a68 <osMessagePut>
    break;
 80101f8:	e099      	b.n	801032e <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 80101fa:	7bbb      	ldrb	r3, [r7, #14]
 80101fc:	2b05      	cmp	r3, #5
 80101fe:	f040 8096 	bne.w	801032e <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8010202:	2303      	movs	r3, #3
 8010204:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2203      	movs	r2, #3
 801020a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801021a:	2200      	movs	r2, #0
 801021c:	4619      	mov	r1, r3
 801021e:	f000 fc23 	bl	8010a68 <osMessagePut>
    break;
 8010222:	e084      	b.n	801032e <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	795a      	ldrb	r2, [r3, #5]
 8010228:	2301      	movs	r3, #1
 801022a:	9300      	str	r3, [sp, #0]
 801022c:	4613      	mov	r3, r2
 801022e:	2200      	movs	r2, #0
 8010230:	2100      	movs	r1, #0
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f89e 	bl	8010374 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 801023e:	b29a      	uxth	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	220a      	movs	r2, #10
 8010248:	761a      	strb	r2, [r3, #24]
    break;
 801024a:	e073      	b.n	8010334 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	795b      	ldrb	r3, [r3, #5]
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f005 f84e 	bl	80152f4 <USBH_LL_GetURBState>
 8010258:	4603      	mov	r3, r0
 801025a:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 801025c:	7bbb      	ldrb	r3, [r7, #14]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d113      	bne.n	801028a <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8010262:	2300      	movs	r3, #0
 8010264:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	220d      	movs	r2, #13
 801026a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2203      	movs	r2, #3
 8010270:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010280:	2200      	movs	r2, #0
 8010282:	4619      	mov	r1, r3
 8010284:	f000 fbf0 	bl	8010a68 <osMessagePut>
#endif
#endif
      }

    }
    break;
 8010288:	e053      	b.n	8010332 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 801028a:	7bbb      	ldrb	r3, [r7, #14]
 801028c:	2b02      	cmp	r3, #2
 801028e:	d111      	bne.n	80102b4 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2209      	movs	r2, #9
 8010294:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2203      	movs	r2, #3
 801029a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80102aa:	2200      	movs	r2, #0
 80102ac:	4619      	mov	r1, r3
 80102ae:	f000 fbdb 	bl	8010a68 <osMessagePut>
    break;
 80102b2:	e03e      	b.n	8010332 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 80102b4:	7bbb      	ldrb	r3, [r7, #14]
 80102b6:	2b04      	cmp	r3, #4
 80102b8:	d13b      	bne.n	8010332 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	220b      	movs	r2, #11
 80102be:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2203      	movs	r2, #3
 80102c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80102d4:	2200      	movs	r2, #0
 80102d6:	4619      	mov	r1, r3
 80102d8:	f000 fbc6 	bl	8010a68 <osMessagePut>
    break;
 80102dc:	e029      	b.n	8010332 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	7e5b      	ldrb	r3, [r3, #25]
 80102e2:	3301      	adds	r3, #1
 80102e4:	b2da      	uxtb	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	765a      	strb	r2, [r3, #25]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	7e5b      	ldrb	r3, [r3, #25]
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	d809      	bhi.n	8010306 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f004 ff11 	bl	801511a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2201      	movs	r2, #1
 8010302:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8010304:	e016      	b.n	8010334 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801030c:	2106      	movs	r1, #6
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8010318:	2302      	movs	r3, #2
 801031a:	73fb      	strb	r3, [r7, #15]
    break;
 801031c:	e00a      	b.n	8010334 <USBH_HandleControl+0x470>

  default:
    break;
 801031e:	bf00      	nop
 8010320:	e008      	b.n	8010334 <USBH_HandleControl+0x470>
    break;
 8010322:	bf00      	nop
 8010324:	e006      	b.n	8010334 <USBH_HandleControl+0x470>
    break;
 8010326:	bf00      	nop
 8010328:	e004      	b.n	8010334 <USBH_HandleControl+0x470>
    break;
 801032a:	bf00      	nop
 801032c:	e002      	b.n	8010334 <USBH_HandleControl+0x470>
    break;
 801032e:	bf00      	nop
 8010330:	e000      	b.n	8010334 <USBH_HandleControl+0x470>
    break;
 8010332:	bf00      	nop
  }
  return status;
 8010334:	7bfb      	ldrb	r3, [r7, #15]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop

08010340 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b088      	sub	sp, #32
 8010344:	af04      	add	r7, sp, #16
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	4613      	mov	r3, r2
 801034c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801034e:	79f9      	ldrb	r1, [r7, #7]
 8010350:	2300      	movs	r3, #0
 8010352:	9303      	str	r3, [sp, #12]
 8010354:	2308      	movs	r3, #8
 8010356:	9302      	str	r3, [sp, #8]
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	9301      	str	r3, [sp, #4]
 801035c:	2300      	movs	r3, #0
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	2300      	movs	r3, #0
 8010362:	2200      	movs	r2, #0
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f004 ff94 	bl	8015292 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b088      	sub	sp, #32
 8010378:	af04      	add	r7, sp, #16
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	4611      	mov	r1, r2
 8010380:	461a      	mov	r2, r3
 8010382:	460b      	mov	r3, r1
 8010384:	80fb      	strh	r3, [r7, #6]
 8010386:	4613      	mov	r3, r2
 8010388:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010390:	2b00      	cmp	r3, #0
 8010392:	d001      	beq.n	8010398 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010394:	2300      	movs	r3, #0
 8010396:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010398:	7979      	ldrb	r1, [r7, #5]
 801039a:	7e3b      	ldrb	r3, [r7, #24]
 801039c:	9303      	str	r3, [sp, #12]
 801039e:	88fb      	ldrh	r3, [r7, #6]
 80103a0:	9302      	str	r3, [sp, #8]
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	9301      	str	r3, [sp, #4]
 80103a6:	2301      	movs	r3, #1
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	2300      	movs	r3, #0
 80103ac:	2200      	movs	r2, #0
 80103ae:	68f8      	ldr	r0, [r7, #12]
 80103b0:	f004 ff6f 	bl	8015292 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80103b4:	2300      	movs	r3, #0
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b088      	sub	sp, #32
 80103c2:	af04      	add	r7, sp, #16
 80103c4:	60f8      	str	r0, [r7, #12]
 80103c6:	60b9      	str	r1, [r7, #8]
 80103c8:	4611      	mov	r1, r2
 80103ca:	461a      	mov	r2, r3
 80103cc:	460b      	mov	r3, r1
 80103ce:	80fb      	strh	r3, [r7, #6]
 80103d0:	4613      	mov	r3, r2
 80103d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80103d4:	7979      	ldrb	r1, [r7, #5]
 80103d6:	2300      	movs	r3, #0
 80103d8:	9303      	str	r3, [sp, #12]
 80103da:	88fb      	ldrh	r3, [r7, #6]
 80103dc:	9302      	str	r3, [sp, #8]
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	9301      	str	r3, [sp, #4]
 80103e2:	2301      	movs	r3, #1
 80103e4:	9300      	str	r3, [sp, #0]
 80103e6:	2300      	movs	r3, #0
 80103e8:	2201      	movs	r2, #1
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f004 ff51 	bl	8015292 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80103f0:	2300      	movs	r3, #0

}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b088      	sub	sp, #32
 80103fe:	af04      	add	r7, sp, #16
 8010400:	60f8      	str	r0, [r7, #12]
 8010402:	60b9      	str	r1, [r7, #8]
 8010404:	4611      	mov	r1, r2
 8010406:	461a      	mov	r2, r3
 8010408:	460b      	mov	r3, r1
 801040a:	80fb      	strh	r3, [r7, #6]
 801040c:	4613      	mov	r3, r2
 801040e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801041a:	2300      	movs	r3, #0
 801041c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801041e:	7979      	ldrb	r1, [r7, #5]
 8010420:	7e3b      	ldrb	r3, [r7, #24]
 8010422:	9303      	str	r3, [sp, #12]
 8010424:	88fb      	ldrh	r3, [r7, #6]
 8010426:	9302      	str	r3, [sp, #8]
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	2301      	movs	r3, #1
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	2302      	movs	r3, #2
 8010432:	2200      	movs	r2, #0
 8010434:	68f8      	ldr	r0, [r7, #12]
 8010436:	f004 ff2c 	bl	8015292 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801043a:	2300      	movs	r3, #0
}
 801043c:	4618      	mov	r0, r3
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af04      	add	r7, sp, #16
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	4611      	mov	r1, r2
 8010450:	461a      	mov	r2, r3
 8010452:	460b      	mov	r3, r1
 8010454:	80fb      	strh	r3, [r7, #6]
 8010456:	4613      	mov	r3, r2
 8010458:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801045a:	7979      	ldrb	r1, [r7, #5]
 801045c:	2300      	movs	r3, #0
 801045e:	9303      	str	r3, [sp, #12]
 8010460:	88fb      	ldrh	r3, [r7, #6]
 8010462:	9302      	str	r3, [sp, #8]
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	2301      	movs	r3, #1
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	2302      	movs	r3, #2
 801046e:	2201      	movs	r2, #1
 8010470:	68f8      	ldr	r0, [r7, #12]
 8010472:	f004 ff0e 	bl	8015292 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af04      	add	r7, sp, #16
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	4608      	mov	r0, r1
 801048a:	4611      	mov	r1, r2
 801048c:	461a      	mov	r2, r3
 801048e:	4603      	mov	r3, r0
 8010490:	70fb      	strb	r3, [r7, #3]
 8010492:	460b      	mov	r3, r1
 8010494:	70bb      	strb	r3, [r7, #2]
 8010496:	4613      	mov	r3, r2
 8010498:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 801049a:	7878      	ldrb	r0, [r7, #1]
 801049c:	78ba      	ldrb	r2, [r7, #2]
 801049e:	78f9      	ldrb	r1, [r7, #3]
 80104a0:	8b3b      	ldrh	r3, [r7, #24]
 80104a2:	9302      	str	r3, [sp, #8]
 80104a4:	7d3b      	ldrb	r3, [r7, #20]
 80104a6:	9301      	str	r3, [sp, #4]
 80104a8:	7c3b      	ldrb	r3, [r7, #16]
 80104aa:	9300      	str	r3, [sp, #0]
 80104ac:	4603      	mov	r3, r0
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f004 fea1 	bl	80151f6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80104b4:	2300      	movs	r3, #0

}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b082      	sub	sp, #8
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	460b      	mov	r3, r1
 80104c8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80104ca:	78fb      	ldrb	r3, [r7, #3]
 80104cc:	4619      	mov	r1, r3
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f004 fec0 	bl	8015254 <USBH_LL_ClosePipe>

  return USBH_OK;
 80104d4:	2300      	movs	r3, #0

}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3708      	adds	r7, #8
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}

080104de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80104de:	b580      	push	{r7, lr}
 80104e0:	b084      	sub	sp, #16
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	6078      	str	r0, [r7, #4]
 80104e6:	460b      	mov	r3, r1
 80104e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f000 f831 	bl	8010552 <USBH_GetFreePipe>
 80104f0:	4603      	mov	r3, r0
 80104f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80104f4:	89fb      	ldrh	r3, [r7, #14]
 80104f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d007      	beq.n	801050e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80104fe:	78fb      	ldrb	r3, [r7, #3]
 8010500:	89fa      	ldrh	r2, [r7, #14]
 8010502:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	32e0      	adds	r2, #224	; 0xe0
 801050a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 801050e:	89fb      	ldrh	r3, [r7, #14]
 8010510:	b2db      	uxtb	r3, r3
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 801051a:	b480      	push	{r7}
 801051c:	b083      	sub	sp, #12
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	460b      	mov	r3, r1
 8010524:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8010526:	78fb      	ldrb	r3, [r7, #3]
 8010528:	2b0a      	cmp	r3, #10
 801052a:	d80b      	bhi.n	8010544 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 801052c:	78fa      	ldrb	r2, [r7, #3]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	32e0      	adds	r2, #224	; 0xe0
 8010532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010536:	78fa      	ldrb	r2, [r7, #3]
 8010538:	f3c3 010e 	ubfx	r1, r3, #0, #15
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	32e0      	adds	r2, #224	; 0xe0
 8010540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8010552:	b480      	push	{r7}
 8010554:	b085      	sub	sp, #20
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801055a:	2300      	movs	r3, #0
 801055c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801055e:	2300      	movs	r3, #0
 8010560:	73fb      	strb	r3, [r7, #15]
 8010562:	e00e      	b.n	8010582 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010564:	7bfa      	ldrb	r2, [r7, #15]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	32e0      	adds	r2, #224	; 0xe0
 801056a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801056e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010572:	2b00      	cmp	r3, #0
 8010574:	d102      	bne.n	801057c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8010576:	7bfb      	ldrb	r3, [r7, #15]
 8010578:	b29b      	uxth	r3, r3
 801057a:	e007      	b.n	801058c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	3301      	adds	r3, #1
 8010580:	73fb      	strb	r3, [r7, #15]
 8010582:	7bfb      	ldrb	r3, [r7, #15]
 8010584:	2b0a      	cmp	r3, #10
 8010586:	d9ed      	bls.n	8010564 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8010588:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801058c:	4618      	mov	r0, r3
 801058e:	3714      	adds	r7, #20
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	af00      	add	r7, sp, #0
  return ((int) osKernelSysTick());
 801059c:	f000 f8f4 	bl	8010788 <osKernelSysTick>
 80105a0:	4603      	mov	r3, r0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b082      	sub	sp, #8
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
  osDelay( ms );
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f000 f94c 	bl	801084e <osDelay>
}
 80105b6:	bf00      	nop
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <GUI_X_Init>:
* GUI_X_Init() is called from GUI_Init is a possibility to init
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
 80105be:	b480      	push	{r7}
 80105c0:	af00      	add	r7, sp, #0
}
 80105c2:	bf00      	nop
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 80105d2:	2300      	movs	r3, #0
 80105d4:	60bb      	str	r3, [r7, #8]
 80105d6:	2300      	movs	r3, #0
 80105d8:	60fb      	str	r3, [r7, #12]
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 80105da:	f107 0308 	add.w	r3, r7, #8
 80105de:	4618      	mov	r0, r3
 80105e0:	f000 f949 	bl	8010876 <osMutexCreate>
 80105e4:	4602      	mov	r2, r0
 80105e6:	4b09      	ldr	r3, [pc, #36]	; (801060c <GUI_X_InitOS+0x40>)
 80105e8:	601a      	str	r2, [r3, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 80105ea:	2300      	movs	r3, #0
 80105ec:	603b      	str	r3, [r7, #0]
 80105ee:	2300      	movs	r3, #0
 80105f0:	607b      	str	r3, [r7, #4]
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 80105f2:	463b      	mov	r3, r7
 80105f4:	2101      	movs	r1, #1
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f9da 	bl	80109b0 <osSemaphoreCreate>
 80105fc:	4602      	mov	r2, r0
 80105fe:	4b04      	ldr	r3, [pc, #16]	; (8010610 <GUI_X_InitOS+0x44>)
 8010600:	601a      	str	r2, [r3, #0]
}
 8010602:	bf00      	nop
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	20001b68 	.word	0x20001b68
 8010610:	20001b6c 	.word	0x20001b6c

08010614 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 8010614:	b580      	push	{r7, lr}
 8010616:	af00      	add	r7, sp, #0
  osMutexRelease(osMutex);
 8010618:	4b03      	ldr	r3, [pc, #12]	; (8010628 <GUI_X_Unlock+0x14>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4618      	mov	r0, r3
 801061e:	f000 f991 	bl	8010944 <osMutexRelease>
}
 8010622:	bf00      	nop
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	20001b68 	.word	0x20001b68

0801062c <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	af00      	add	r7, sp, #0
  osMutexWait(osMutex , osWaitForever) ;
 8010630:	4b04      	ldr	r3, [pc, #16]	; (8010644 <GUI_X_Lock+0x18>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f04f 31ff 	mov.w	r1, #4294967295
 8010638:	4618      	mov	r0, r3
 801063a:	f000 f935 	bl	80108a8 <osMutexWait>
}
 801063e:	bf00      	nop
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	20001b68 	.word	0x20001b68

08010648 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 8010648:	b580      	push	{r7, lr}
 801064a:	af00      	add	r7, sp, #0
  return ((U32) osThreadGetId());
 801064c:	f000 f8f8 	bl	8010840 <osThreadGetId>
 8010650:	4603      	mov	r3, r0
}
 8010652:	4618      	mov	r0, r3
 8010654:	bd80      	pop	{r7, pc}
	...

08010658 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010658:	b480      	push	{r7}
 801065a:	b087      	sub	sp, #28
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	4613      	mov	r3, r2
 8010664:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010666:	2301      	movs	r3, #1
 8010668:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801066a:	2300      	movs	r3, #0
 801066c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801066e:	4b1f      	ldr	r3, [pc, #124]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 8010670:	7a5b      	ldrb	r3, [r3, #9]
 8010672:	b2db      	uxtb	r3, r3
 8010674:	2b00      	cmp	r3, #0
 8010676:	d131      	bne.n	80106dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010678:	4b1c      	ldr	r3, [pc, #112]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 801067a:	7a5b      	ldrb	r3, [r3, #9]
 801067c:	b2db      	uxtb	r3, r3
 801067e:	461a      	mov	r2, r3
 8010680:	4b1a      	ldr	r3, [pc, #104]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 8010682:	2100      	movs	r1, #0
 8010684:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010686:	4b19      	ldr	r3, [pc, #100]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 8010688:	7a5b      	ldrb	r3, [r3, #9]
 801068a:	b2db      	uxtb	r3, r3
 801068c:	4a17      	ldr	r2, [pc, #92]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	68fa      	ldr	r2, [r7, #12]
 8010694:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010696:	4b15      	ldr	r3, [pc, #84]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 8010698:	7a5b      	ldrb	r3, [r3, #9]
 801069a:	b2db      	uxtb	r3, r3
 801069c:	461a      	mov	r2, r3
 801069e:	4b13      	ldr	r3, [pc, #76]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 80106a0:	4413      	add	r3, r2
 80106a2:	79fa      	ldrb	r2, [r7, #7]
 80106a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80106a6:	4b11      	ldr	r3, [pc, #68]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 80106a8:	7a5b      	ldrb	r3, [r3, #9]
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	1c5a      	adds	r2, r3, #1
 80106ae:	b2d1      	uxtb	r1, r2
 80106b0:	4a0e      	ldr	r2, [pc, #56]	; (80106ec <FATFS_LinkDriverEx+0x94>)
 80106b2:	7251      	strb	r1, [r2, #9]
 80106b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80106b6:	7dbb      	ldrb	r3, [r7, #22]
 80106b8:	3330      	adds	r3, #48	; 0x30
 80106ba:	b2da      	uxtb	r2, r3
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	3301      	adds	r3, #1
 80106c4:	223a      	movs	r2, #58	; 0x3a
 80106c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	3302      	adds	r3, #2
 80106cc:	222f      	movs	r2, #47	; 0x2f
 80106ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	3303      	adds	r3, #3
 80106d4:	2200      	movs	r2, #0
 80106d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80106d8:	2300      	movs	r3, #0
 80106da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80106dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	371c      	adds	r7, #28
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr
 80106ea:	bf00      	nop
 80106ec:	20001b70 	.word	0x20001b70

080106f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80106fa:	2200      	movs	r2, #0
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7ff ffaa 	bl	8010658 <FATFS_LinkDriverEx>
 8010704:	4603      	mov	r3, r0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801070e:	b480      	push	{r7}
 8010710:	b085      	sub	sp, #20
 8010712:	af00      	add	r7, sp, #0
 8010714:	4603      	mov	r3, r0
 8010716:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010718:	2300      	movs	r3, #0
 801071a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801071c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010720:	2b84      	cmp	r3, #132	; 0x84
 8010722:	d005      	beq.n	8010730 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010724:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	4413      	add	r3, r2
 801072c:	3303      	adds	r3, #3
 801072e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010730:	68fb      	ldr	r3, [r7, #12]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3714      	adds	r7, #20
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801073e:	b480      	push	{r7}
 8010740:	b083      	sub	sp, #12
 8010742:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010744:	f3ef 8305 	mrs	r3, IPSR
 8010748:	607b      	str	r3, [r7, #4]
  return(result);
 801074a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801074c:	2b00      	cmp	r3, #0
 801074e:	bf14      	ite	ne
 8010750:	2301      	movne	r3, #1
 8010752:	2300      	moveq	r3, #0
 8010754:	b2db      	uxtb	r3, r3
}
 8010756:	4618      	mov	r0, r3
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010766:	f001 fc0b 	bl	8011f80 <vTaskStartScheduler>
  
  return osOK;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	bd80      	pop	{r7, pc}

08010770 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010774:	f002 f848 	bl	8012808 <xTaskGetSchedulerState>
 8010778:	4603      	mov	r3, r0
 801077a:	2b01      	cmp	r3, #1
 801077c:	d101      	bne.n	8010782 <osKernelRunning+0x12>
    return 0;
 801077e:	2300      	movs	r3, #0
 8010780:	e000      	b.n	8010784 <osKernelRunning+0x14>
  else
    return 1;
 8010782:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010784:	4618      	mov	r0, r3
 8010786:	bd80      	pop	{r7, pc}

08010788 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801078c:	f7ff ffd7 	bl	801073e <inHandlerMode>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d003      	beq.n	801079e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010796:	f001 fd11 	bl	80121bc <xTaskGetTickCountFromISR>
 801079a:	4603      	mov	r3, r0
 801079c:	e002      	b.n	80107a4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801079e:	f001 fcfd 	bl	801219c <xTaskGetTickCount>
 80107a2:	4603      	mov	r3, r0
  }
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80107a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107aa:	b089      	sub	sp, #36	; 0x24
 80107ac:	af04      	add	r7, sp, #16
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	695b      	ldr	r3, [r3, #20]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d020      	beq.n	80107fc <osThreadCreate+0x54>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d01c      	beq.n	80107fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	685c      	ldr	r4, [r3, #4]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681d      	ldr	r5, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	691e      	ldr	r6, [r3, #16]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7ff ff9a 	bl	801070e <makeFreeRtosPriority>
 80107da:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	695b      	ldr	r3, [r3, #20]
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80107e4:	9202      	str	r2, [sp, #8]
 80107e6:	9301      	str	r3, [sp, #4]
 80107e8:	9100      	str	r1, [sp, #0]
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	4632      	mov	r2, r6
 80107ee:	4629      	mov	r1, r5
 80107f0:	4620      	mov	r0, r4
 80107f2:	f001 fa00 	bl	8011bf6 <xTaskCreateStatic>
 80107f6:	4603      	mov	r3, r0
 80107f8:	60fb      	str	r3, [r7, #12]
 80107fa:	e01c      	b.n	8010836 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	685c      	ldr	r4, [r3, #4]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010808:	b29e      	uxth	r6, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff ff7c 	bl	801070e <makeFreeRtosPriority>
 8010816:	4602      	mov	r2, r0
 8010818:	f107 030c 	add.w	r3, r7, #12
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	9200      	str	r2, [sp, #0]
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	4632      	mov	r2, r6
 8010824:	4629      	mov	r1, r5
 8010826:	4620      	mov	r0, r4
 8010828:	f001 fa44 	bl	8011cb4 <xTaskCreate>
 801082c:	4603      	mov	r3, r0
 801082e:	2b01      	cmp	r3, #1
 8010830:	d001      	beq.n	8010836 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010832:	2300      	movs	r3, #0
 8010834:	e000      	b.n	8010838 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010836:	68fb      	ldr	r3, [r7, #12]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3714      	adds	r7, #20
 801083c:	46bd      	mov	sp, r7
 801083e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010840 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8010844:	f001 ffd0 	bl	80127e8 <xTaskGetCurrentTaskHandle>
 8010848:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 801084a:	4618      	mov	r0, r3
 801084c:	bd80      	pop	{r7, pc}

0801084e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801084e:	b580      	push	{r7, lr}
 8010850:	b084      	sub	sp, #16
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <osDelay+0x16>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	e000      	b.n	8010866 <osDelay+0x18>
 8010864:	2301      	movs	r3, #1
 8010866:	4618      	mov	r0, r3
 8010868:	f001 fb54 	bl	8011f14 <vTaskDelay>
  
  return osOK;
 801086c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d007      	beq.n	8010896 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	4619      	mov	r1, r3
 801088c:	2001      	movs	r0, #1
 801088e:	f000 fbc9 	bl	8011024 <xQueueCreateMutexStatic>
 8010892:	4603      	mov	r3, r0
 8010894:	e003      	b.n	801089e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8010896:	2001      	movs	r0, #1
 8010898:	f000 fbac 	bl	8010ff4 <xQueueCreateMutex>
 801089c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
	...

080108a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80108b2:	2300      	movs	r3, #0
 80108b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d101      	bne.n	80108c0 <osMutexWait+0x18>
    return osErrorParameter;
 80108bc:	2380      	movs	r3, #128	; 0x80
 80108be:	e03a      	b.n	8010936 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ca:	d103      	bne.n	80108d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80108cc:	f04f 33ff 	mov.w	r3, #4294967295
 80108d0:	60fb      	str	r3, [r7, #12]
 80108d2:	e009      	b.n	80108e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d006      	beq.n	80108e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <osMutexWait+0x40>
      ticks = 1;
 80108e4:	2301      	movs	r3, #1
 80108e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80108e8:	f7ff ff29 	bl	801073e <inHandlerMode>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d017      	beq.n	8010922 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80108f2:	f107 0308 	add.w	r3, r7, #8
 80108f6:	461a      	mov	r2, r3
 80108f8:	2100      	movs	r1, #0
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 ffd0 	bl	80118a0 <xQueueReceiveFromISR>
 8010900:	4603      	mov	r3, r0
 8010902:	2b01      	cmp	r3, #1
 8010904:	d001      	beq.n	801090a <osMutexWait+0x62>
      return osErrorOS;
 8010906:	23ff      	movs	r3, #255	; 0xff
 8010908:	e015      	b.n	8010936 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d011      	beq.n	8010934 <osMutexWait+0x8c>
 8010910:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <osMutexWait+0x98>)
 8010912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010916:	601a      	str	r2, [r3, #0]
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	f3bf 8f6f 	isb	sy
 8010920:	e008      	b.n	8010934 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8010922:	68f9      	ldr	r1, [r7, #12]
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 feab 	bl	8011680 <xQueueSemaphoreTake>
 801092a:	4603      	mov	r3, r0
 801092c:	2b01      	cmp	r3, #1
 801092e:	d001      	beq.n	8010934 <osMutexWait+0x8c>
    return osErrorOS;
 8010930:	23ff      	movs	r3, #255	; 0xff
 8010932:	e000      	b.n	8010936 <osMutexWait+0x8e>
  }
  
  return osOK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	e000ed04 	.word	0xe000ed04

08010944 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801094c:	2300      	movs	r3, #0
 801094e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010950:	2300      	movs	r3, #0
 8010952:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8010954:	f7ff fef3 	bl	801073e <inHandlerMode>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d016      	beq.n	801098c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801095e:	f107 0308 	add.w	r3, r7, #8
 8010962:	4619      	mov	r1, r3
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 fd17 	bl	8011398 <xQueueGiveFromISR>
 801096a:	4603      	mov	r3, r0
 801096c:	2b01      	cmp	r3, #1
 801096e:	d001      	beq.n	8010974 <osMutexRelease+0x30>
      return osErrorOS;
 8010970:	23ff      	movs	r3, #255	; 0xff
 8010972:	e017      	b.n	80109a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d013      	beq.n	80109a2 <osMutexRelease+0x5e>
 801097a:	4b0c      	ldr	r3, [pc, #48]	; (80109ac <osMutexRelease+0x68>)
 801097c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010980:	601a      	str	r2, [r3, #0]
 8010982:	f3bf 8f4f 	dsb	sy
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	e00a      	b.n	80109a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801098c:	2300      	movs	r3, #0
 801098e:	2200      	movs	r2, #0
 8010990:	2100      	movs	r1, #0
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fb62 	bl	801105c <xQueueGenericSend>
 8010998:	4603      	mov	r3, r0
 801099a:	2b01      	cmp	r3, #1
 801099c:	d001      	beq.n	80109a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801099e:	23ff      	movs	r3, #255	; 0xff
 80109a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80109a2:	68fb      	ldr	r3, [r7, #12]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	e000ed04 	.word	0xe000ed04

080109b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b086      	sub	sp, #24
 80109b4:	af02      	add	r7, sp, #8
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d010      	beq.n	80109e4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d10b      	bne.n	80109e0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	685a      	ldr	r2, [r3, #4]
 80109cc:	2303      	movs	r3, #3
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	4613      	mov	r3, r2
 80109d2:	2200      	movs	r2, #0
 80109d4:	2100      	movs	r1, #0
 80109d6:	2001      	movs	r0, #1
 80109d8:	f000 fa18 	bl	8010e0c <xQueueGenericCreateStatic>
 80109dc:	4603      	mov	r3, r0
 80109de:	e016      	b.n	8010a0e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80109e0:	2300      	movs	r3, #0
 80109e2:	e014      	b.n	8010a0e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d110      	bne.n	8010a0c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80109ea:	2203      	movs	r2, #3
 80109ec:	2100      	movs	r1, #0
 80109ee:	2001      	movs	r0, #1
 80109f0:	f000 fa88 	bl	8010f04 <xQueueGenericCreate>
 80109f4:	60f8      	str	r0, [r7, #12]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d005      	beq.n	8010a08 <osSemaphoreCreate+0x58>
 80109fc:	2300      	movs	r3, #0
 80109fe:	2200      	movs	r2, #0
 8010a00:	2100      	movs	r1, #0
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	f000 fb2a 	bl	801105c <xQueueGenericSend>
      return sema;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	e000      	b.n	8010a0e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010a0c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010a16:	b590      	push	{r4, r7, lr}
 8010a18:	b085      	sub	sp, #20
 8010a1a:	af02      	add	r7, sp, #8
 8010a1c:	6078      	str	r0, [r7, #4]
 8010a1e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d012      	beq.n	8010a4e <osMessageCreate+0x38>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	68db      	ldr	r3, [r3, #12]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00e      	beq.n	8010a4e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6818      	ldr	r0, [r3, #0]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6859      	ldr	r1, [r3, #4]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	689a      	ldr	r2, [r3, #8]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	68dc      	ldr	r4, [r3, #12]
 8010a40:	2300      	movs	r3, #0
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	4623      	mov	r3, r4
 8010a46:	f000 f9e1 	bl	8010e0c <xQueueGenericCreateStatic>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	e008      	b.n	8010a60 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	4619      	mov	r1, r3
 8010a5a:	f000 fa53 	bl	8010f04 <xQueueGenericCreate>
 8010a5e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd90      	pop	{r4, r7, pc}

08010a68 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010a74:	2300      	movs	r3, #0
 8010a76:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d101      	bne.n	8010a86 <osMessagePut+0x1e>
    ticks = 1;
 8010a82:	2301      	movs	r3, #1
 8010a84:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010a86:	f7ff fe5a 	bl	801073e <inHandlerMode>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d018      	beq.n	8010ac2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010a90:	f107 0210 	add.w	r2, r7, #16
 8010a94:	f107 0108 	add.w	r1, r7, #8
 8010a98:	2300      	movs	r3, #0
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f000 fbe0 	bl	8011260 <xQueueGenericSendFromISR>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d001      	beq.n	8010aaa <osMessagePut+0x42>
      return osErrorOS;
 8010aa6:	23ff      	movs	r3, #255	; 0xff
 8010aa8:	e018      	b.n	8010adc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d014      	beq.n	8010ada <osMessagePut+0x72>
 8010ab0:	4b0c      	ldr	r3, [pc, #48]	; (8010ae4 <osMessagePut+0x7c>)
 8010ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ab6:	601a      	str	r2, [r3, #0]
 8010ab8:	f3bf 8f4f 	dsb	sy
 8010abc:	f3bf 8f6f 	isb	sy
 8010ac0:	e00b      	b.n	8010ada <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010ac2:	f107 0108 	add.w	r1, r7, #8
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	697a      	ldr	r2, [r7, #20]
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	f000 fac6 	bl	801105c <xQueueGenericSend>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d001      	beq.n	8010ada <osMessagePut+0x72>
      return osErrorOS;
 8010ad6:	23ff      	movs	r3, #255	; 0xff
 8010ad8:	e000      	b.n	8010adc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	e000ed04 	.word	0xe000ed04

08010ae8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010ae8:	b590      	push	{r4, r7, lr}
 8010aea:	b08b      	sub	sp, #44	; 0x2c
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010af8:	2300      	movs	r3, #0
 8010afa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d10a      	bne.n	8010b18 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010b02:	2380      	movs	r3, #128	; 0x80
 8010b04:	617b      	str	r3, [r7, #20]
    return event;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	461c      	mov	r4, r3
 8010b0a:	f107 0314 	add.w	r3, r7, #20
 8010b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010b16:	e054      	b.n	8010bc2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b26:	d103      	bne.n	8010b30 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010b28:	f04f 33ff 	mov.w	r3, #4294967295
 8010b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8010b2e:	e009      	b.n	8010b44 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d006      	beq.n	8010b44 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d101      	bne.n	8010b44 <osMessageGet+0x5c>
      ticks = 1;
 8010b40:	2301      	movs	r3, #1
 8010b42:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010b44:	f7ff fdfb 	bl	801073e <inHandlerMode>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d01c      	beq.n	8010b88 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010b4e:	f107 0220 	add.w	r2, r7, #32
 8010b52:	f107 0314 	add.w	r3, r7, #20
 8010b56:	3304      	adds	r3, #4
 8010b58:	4619      	mov	r1, r3
 8010b5a:	68b8      	ldr	r0, [r7, #8]
 8010b5c:	f000 fea0 	bl	80118a0 <xQueueReceiveFromISR>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d102      	bne.n	8010b6c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010b66:	2310      	movs	r3, #16
 8010b68:	617b      	str	r3, [r7, #20]
 8010b6a:	e001      	b.n	8010b70 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010b70:	6a3b      	ldr	r3, [r7, #32]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d01d      	beq.n	8010bb2 <osMessageGet+0xca>
 8010b76:	4b15      	ldr	r3, [pc, #84]	; (8010bcc <osMessageGet+0xe4>)
 8010b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b7c:	601a      	str	r2, [r3, #0]
 8010b7e:	f3bf 8f4f 	dsb	sy
 8010b82:	f3bf 8f6f 	isb	sy
 8010b86:	e014      	b.n	8010bb2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010b88:	f107 0314 	add.w	r3, r7, #20
 8010b8c:	3304      	adds	r3, #4
 8010b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b90:	4619      	mov	r1, r3
 8010b92:	68b8      	ldr	r0, [r7, #8]
 8010b94:	f000 fc92 	bl	80114bc <xQueueReceive>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d102      	bne.n	8010ba4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010b9e:	2310      	movs	r3, #16
 8010ba0:	617b      	str	r3, [r7, #20]
 8010ba2:	e006      	b.n	8010bb2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d101      	bne.n	8010bae <osMessageGet+0xc6>
 8010baa:	2300      	movs	r3, #0
 8010bac:	e000      	b.n	8010bb0 <osMessageGet+0xc8>
 8010bae:	2340      	movs	r3, #64	; 0x40
 8010bb0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	461c      	mov	r4, r3
 8010bb6:	f107 0314 	add.w	r3, r7, #20
 8010bba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	372c      	adds	r7, #44	; 0x2c
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd90      	pop	{r4, r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	e000ed04 	.word	0xe000ed04

08010bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f103 0208 	add.w	r2, r3, #8
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f04f 32ff 	mov.w	r2, #4294967295
 8010be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f103 0208 	add.w	r2, r3, #8
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f103 0208 	add.w	r2, r3, #8
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2200      	movs	r2, #0
 8010c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010c04:	bf00      	nop
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr

08010c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010c1e:	bf00      	nop
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	b085      	sub	sp, #20
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	689a      	ldr	r2, [r3, #8]
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	1c5a      	adds	r2, r3, #1
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	601a      	str	r2, [r3, #0]
}
 8010c66:	bf00      	nop
 8010c68:	3714      	adds	r7, #20
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr

08010c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c72:	b480      	push	{r7}
 8010c74:	b085      	sub	sp, #20
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]
 8010c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c88:	d103      	bne.n	8010c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	60fb      	str	r3, [r7, #12]
 8010c90:	e00c      	b.n	8010cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	3308      	adds	r3, #8
 8010c96:	60fb      	str	r3, [r7, #12]
 8010c98:	e002      	b.n	8010ca0 <vListInsert+0x2e>
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	60fb      	str	r3, [r7, #12]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	68ba      	ldr	r2, [r7, #8]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d2f6      	bcs.n	8010c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	685a      	ldr	r2, [r3, #4]
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	683a      	ldr	r2, [r7, #0]
 8010cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	683a      	ldr	r2, [r7, #0]
 8010cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	1c5a      	adds	r2, r3, #1
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	601a      	str	r2, [r3, #0]
}
 8010cd8:	bf00      	nop
 8010cda:	3714      	adds	r7, #20
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	6892      	ldr	r2, [r2, #8]
 8010cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	689b      	ldr	r3, [r3, #8]
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	6852      	ldr	r2, [r2, #4]
 8010d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	687a      	ldr	r2, [r7, #4]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d103      	bne.n	8010d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	689a      	ldr	r2, [r3, #8]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	1e5a      	subs	r2, r3, #1
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3714      	adds	r7, #20
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr

08010d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10b      	bne.n	8010d64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	b672      	cpsid	i
 8010d52:	f383 8811 	msr	BASEPRI, r3
 8010d56:	f3bf 8f6f 	isb	sy
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	b662      	cpsie	i
 8010d60:	60bb      	str	r3, [r7, #8]
 8010d62:	e7fe      	b.n	8010d62 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010d64:	f002 f8a0 	bl	8012ea8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d70:	68f9      	ldr	r1, [r7, #12]
 8010d72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d74:	fb01 f303 	mul.w	r3, r1, r3
 8010d78:	441a      	add	r2, r3
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2200      	movs	r2, #0
 8010d82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d94:	3b01      	subs	r3, #1
 8010d96:	68f9      	ldr	r1, [r7, #12]
 8010d98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d9a:	fb01 f303 	mul.w	r3, r1, r3
 8010d9e:	441a      	add	r2, r3
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	22ff      	movs	r2, #255	; 0xff
 8010da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	22ff      	movs	r2, #255	; 0xff
 8010db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d114      	bne.n	8010de4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d01a      	beq.n	8010df8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	3310      	adds	r3, #16
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f001 fb4a 	bl	8012460 <xTaskRemoveFromEventList>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d012      	beq.n	8010df8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010dd2:	4b0d      	ldr	r3, [pc, #52]	; (8010e08 <xQueueGenericReset+0xd0>)
 8010dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dd8:	601a      	str	r2, [r3, #0]
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	e009      	b.n	8010df8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	3310      	adds	r3, #16
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7ff fef1 	bl	8010bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3324      	adds	r3, #36	; 0x24
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff feec 	bl	8010bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010df8:	f002 f888 	bl	8012f0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010dfc:	2301      	movs	r3, #1
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3710      	adds	r7, #16
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	e000ed04 	.word	0xe000ed04

08010e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b08e      	sub	sp, #56	; 0x38
 8010e10:	af02      	add	r7, sp, #8
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
 8010e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10b      	bne.n	8010e38 <xQueueGenericCreateStatic+0x2c>
 8010e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e24:	b672      	cpsid	i
 8010e26:	f383 8811 	msr	BASEPRI, r3
 8010e2a:	f3bf 8f6f 	isb	sy
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	b662      	cpsie	i
 8010e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e36:	e7fe      	b.n	8010e36 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d10b      	bne.n	8010e56 <xQueueGenericCreateStatic+0x4a>
 8010e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e42:	b672      	cpsid	i
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	b662      	cpsie	i
 8010e52:	627b      	str	r3, [r7, #36]	; 0x24
 8010e54:	e7fe      	b.n	8010e54 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d002      	beq.n	8010e62 <xQueueGenericCreateStatic+0x56>
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <xQueueGenericCreateStatic+0x5a>
 8010e62:	2301      	movs	r3, #1
 8010e64:	e000      	b.n	8010e68 <xQueueGenericCreateStatic+0x5c>
 8010e66:	2300      	movs	r3, #0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d10b      	bne.n	8010e84 <xQueueGenericCreateStatic+0x78>
 8010e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e70:	b672      	cpsid	i
 8010e72:	f383 8811 	msr	BASEPRI, r3
 8010e76:	f3bf 8f6f 	isb	sy
 8010e7a:	f3bf 8f4f 	dsb	sy
 8010e7e:	b662      	cpsie	i
 8010e80:	623b      	str	r3, [r7, #32]
 8010e82:	e7fe      	b.n	8010e82 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d102      	bne.n	8010e90 <xQueueGenericCreateStatic+0x84>
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d101      	bne.n	8010e94 <xQueueGenericCreateStatic+0x88>
 8010e90:	2301      	movs	r3, #1
 8010e92:	e000      	b.n	8010e96 <xQueueGenericCreateStatic+0x8a>
 8010e94:	2300      	movs	r3, #0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d10b      	bne.n	8010eb2 <xQueueGenericCreateStatic+0xa6>
 8010e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9e:	b672      	cpsid	i
 8010ea0:	f383 8811 	msr	BASEPRI, r3
 8010ea4:	f3bf 8f6f 	isb	sy
 8010ea8:	f3bf 8f4f 	dsb	sy
 8010eac:	b662      	cpsie	i
 8010eae:	61fb      	str	r3, [r7, #28]
 8010eb0:	e7fe      	b.n	8010eb0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010eb2:	2348      	movs	r3, #72	; 0x48
 8010eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	2b48      	cmp	r3, #72	; 0x48
 8010eba:	d00b      	beq.n	8010ed4 <xQueueGenericCreateStatic+0xc8>
 8010ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec0:	b672      	cpsid	i
 8010ec2:	f383 8811 	msr	BASEPRI, r3
 8010ec6:	f3bf 8f6f 	isb	sy
 8010eca:	f3bf 8f4f 	dsb	sy
 8010ece:	b662      	cpsie	i
 8010ed0:	61bb      	str	r3, [r7, #24]
 8010ed2:	e7fe      	b.n	8010ed2 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d00d      	beq.n	8010efa <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ee6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eec:	9300      	str	r3, [sp, #0]
 8010eee:	4613      	mov	r3, r2
 8010ef0:	687a      	ldr	r2, [r7, #4]
 8010ef2:	68b9      	ldr	r1, [r7, #8]
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f000 f844 	bl	8010f82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3730      	adds	r7, #48	; 0x30
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b08a      	sub	sp, #40	; 0x28
 8010f08:	af02      	add	r7, sp, #8
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	4613      	mov	r3, r2
 8010f10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d10b      	bne.n	8010f30 <xQueueGenericCreate+0x2c>
 8010f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f1c:	b672      	cpsid	i
 8010f1e:	f383 8811 	msr	BASEPRI, r3
 8010f22:	f3bf 8f6f 	isb	sy
 8010f26:	f3bf 8f4f 	dsb	sy
 8010f2a:	b662      	cpsie	i
 8010f2c:	613b      	str	r3, [r7, #16]
 8010f2e:	e7fe      	b.n	8010f2e <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d102      	bne.n	8010f3c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	61fb      	str	r3, [r7, #28]
 8010f3a:	e004      	b.n	8010f46 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	fb02 f303 	mul.w	r3, r2, r3
 8010f44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	3348      	adds	r3, #72	; 0x48
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f002 f8ce 	bl	80130ec <pvPortMalloc>
 8010f50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00f      	beq.n	8010f78 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	3348      	adds	r3, #72	; 0x48
 8010f5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	2200      	movs	r2, #0
 8010f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f66:	79fa      	ldrb	r2, [r7, #7]
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	697a      	ldr	r2, [r7, #20]
 8010f70:	68b9      	ldr	r1, [r7, #8]
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f000 f805 	bl	8010f82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010f78:	69bb      	ldr	r3, [r7, #24]
	}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3720      	adds	r7, #32
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b084      	sub	sp, #16
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	60f8      	str	r0, [r7, #12]
 8010f8a:	60b9      	str	r1, [r7, #8]
 8010f8c:	607a      	str	r2, [r7, #4]
 8010f8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d103      	bne.n	8010f9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	69ba      	ldr	r2, [r7, #24]
 8010f9a:	601a      	str	r2, [r3, #0]
 8010f9c:	e002      	b.n	8010fa4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010f9e:	69bb      	ldr	r3, [r7, #24]
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010fa4:	69bb      	ldr	r3, [r7, #24]
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010fb0:	2101      	movs	r1, #1
 8010fb2:	69b8      	ldr	r0, [r7, #24]
 8010fb4:	f7ff fec0 	bl	8010d38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010fb8:	bf00      	nop
 8010fba:	3710      	adds	r7, #16
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00e      	beq.n	8010fec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 f838 	bl	801105c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010fec:	bf00      	nop
 8010fee:	3708      	adds	r7, #8
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b086      	sub	sp, #24
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010ffe:	2301      	movs	r3, #1
 8011000:	617b      	str	r3, [r7, #20]
 8011002:	2300      	movs	r3, #0
 8011004:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011006:	79fb      	ldrb	r3, [r7, #7]
 8011008:	461a      	mov	r2, r3
 801100a:	6939      	ldr	r1, [r7, #16]
 801100c:	6978      	ldr	r0, [r7, #20]
 801100e:	f7ff ff79 	bl	8010f04 <xQueueGenericCreate>
 8011012:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f7ff ffd3 	bl	8010fc0 <prvInitialiseMutex>

		return pxNewQueue;
 801101a:	68fb      	ldr	r3, [r7, #12]
	}
 801101c:	4618      	mov	r0, r3
 801101e:	3718      	adds	r7, #24
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011024:	b580      	push	{r7, lr}
 8011026:	b088      	sub	sp, #32
 8011028:	af02      	add	r7, sp, #8
 801102a:	4603      	mov	r3, r0
 801102c:	6039      	str	r1, [r7, #0]
 801102e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011030:	2301      	movs	r3, #1
 8011032:	617b      	str	r3, [r7, #20]
 8011034:	2300      	movs	r3, #0
 8011036:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011038:	79fb      	ldrb	r3, [r7, #7]
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	2200      	movs	r2, #0
 8011040:	6939      	ldr	r1, [r7, #16]
 8011042:	6978      	ldr	r0, [r7, #20]
 8011044:	f7ff fee2 	bl	8010e0c <xQueueGenericCreateStatic>
 8011048:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 801104a:	68f8      	ldr	r0, [r7, #12]
 801104c:	f7ff ffb8 	bl	8010fc0 <prvInitialiseMutex>

		return pxNewQueue;
 8011050:	68fb      	ldr	r3, [r7, #12]
	}
 8011052:	4618      	mov	r0, r3
 8011054:	3718      	adds	r7, #24
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
	...

0801105c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b08e      	sub	sp, #56	; 0x38
 8011060:	af00      	add	r7, sp, #0
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
 8011068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801106a:	2300      	movs	r3, #0
 801106c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10b      	bne.n	8011090 <xQueueGenericSend+0x34>
 8011078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107c:	b672      	cpsid	i
 801107e:	f383 8811 	msr	BASEPRI, r3
 8011082:	f3bf 8f6f 	isb	sy
 8011086:	f3bf 8f4f 	dsb	sy
 801108a:	b662      	cpsie	i
 801108c:	62bb      	str	r3, [r7, #40]	; 0x28
 801108e:	e7fe      	b.n	801108e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d103      	bne.n	801109e <xQueueGenericSend+0x42>
 8011096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801109a:	2b00      	cmp	r3, #0
 801109c:	d101      	bne.n	80110a2 <xQueueGenericSend+0x46>
 801109e:	2301      	movs	r3, #1
 80110a0:	e000      	b.n	80110a4 <xQueueGenericSend+0x48>
 80110a2:	2300      	movs	r3, #0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d10b      	bne.n	80110c0 <xQueueGenericSend+0x64>
 80110a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ac:	b672      	cpsid	i
 80110ae:	f383 8811 	msr	BASEPRI, r3
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	f3bf 8f4f 	dsb	sy
 80110ba:	b662      	cpsie	i
 80110bc:	627b      	str	r3, [r7, #36]	; 0x24
 80110be:	e7fe      	b.n	80110be <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d103      	bne.n	80110ce <xQueueGenericSend+0x72>
 80110c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d101      	bne.n	80110d2 <xQueueGenericSend+0x76>
 80110ce:	2301      	movs	r3, #1
 80110d0:	e000      	b.n	80110d4 <xQueueGenericSend+0x78>
 80110d2:	2300      	movs	r3, #0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d10b      	bne.n	80110f0 <xQueueGenericSend+0x94>
 80110d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110dc:	b672      	cpsid	i
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	b662      	cpsie	i
 80110ec:	623b      	str	r3, [r7, #32]
 80110ee:	e7fe      	b.n	80110ee <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110f0:	f001 fb8a 	bl	8012808 <xTaskGetSchedulerState>
 80110f4:	4603      	mov	r3, r0
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d102      	bne.n	8011100 <xQueueGenericSend+0xa4>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d101      	bne.n	8011104 <xQueueGenericSend+0xa8>
 8011100:	2301      	movs	r3, #1
 8011102:	e000      	b.n	8011106 <xQueueGenericSend+0xaa>
 8011104:	2300      	movs	r3, #0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10b      	bne.n	8011122 <xQueueGenericSend+0xc6>
 801110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110e:	b672      	cpsid	i
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	b662      	cpsie	i
 801111e:	61fb      	str	r3, [r7, #28]
 8011120:	e7fe      	b.n	8011120 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011122:	f001 fec1 	bl	8012ea8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801112e:	429a      	cmp	r2, r3
 8011130:	d302      	bcc.n	8011138 <xQueueGenericSend+0xdc>
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	2b02      	cmp	r3, #2
 8011136:	d129      	bne.n	801118c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011138:	683a      	ldr	r2, [r7, #0]
 801113a:	68b9      	ldr	r1, [r7, #8]
 801113c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801113e:	f000 fc4a 	bl	80119d6 <prvCopyDataToQueue>
 8011142:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011148:	2b00      	cmp	r3, #0
 801114a:	d010      	beq.n	801116e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114e:	3324      	adds	r3, #36	; 0x24
 8011150:	4618      	mov	r0, r3
 8011152:	f001 f985 	bl	8012460 <xTaskRemoveFromEventList>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d013      	beq.n	8011184 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801115c:	4b3f      	ldr	r3, [pc, #252]	; (801125c <xQueueGenericSend+0x200>)
 801115e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	f3bf 8f4f 	dsb	sy
 8011168:	f3bf 8f6f 	isb	sy
 801116c:	e00a      	b.n	8011184 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	2b00      	cmp	r3, #0
 8011172:	d007      	beq.n	8011184 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011174:	4b39      	ldr	r3, [pc, #228]	; (801125c <xQueueGenericSend+0x200>)
 8011176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801117a:	601a      	str	r2, [r3, #0]
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011184:	f001 fec2 	bl	8012f0c <vPortExitCritical>
				return pdPASS;
 8011188:	2301      	movs	r3, #1
 801118a:	e063      	b.n	8011254 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d103      	bne.n	801119a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011192:	f001 febb 	bl	8012f0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011196:	2300      	movs	r3, #0
 8011198:	e05c      	b.n	8011254 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801119c:	2b00      	cmp	r3, #0
 801119e:	d106      	bne.n	80111ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80111a0:	f107 0314 	add.w	r3, r7, #20
 80111a4:	4618      	mov	r0, r3
 80111a6:	f001 f9bf 	bl	8012528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80111aa:	2301      	movs	r3, #1
 80111ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111ae:	f001 fead 	bl	8012f0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111b2:	f000 ff47 	bl	8012044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111b6:	f001 fe77 	bl	8012ea8 <vPortEnterCritical>
 80111ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111c0:	b25b      	sxtb	r3, r3
 80111c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c6:	d103      	bne.n	80111d0 <xQueueGenericSend+0x174>
 80111c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ca:	2200      	movs	r2, #0
 80111cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111d6:	b25b      	sxtb	r3, r3
 80111d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111dc:	d103      	bne.n	80111e6 <xQueueGenericSend+0x18a>
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	2200      	movs	r2, #0
 80111e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111e6:	f001 fe91 	bl	8012f0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111ea:	1d3a      	adds	r2, r7, #4
 80111ec:	f107 0314 	add.w	r3, r7, #20
 80111f0:	4611      	mov	r1, r2
 80111f2:	4618      	mov	r0, r3
 80111f4:	f001 f9ae 	bl	8012554 <xTaskCheckForTimeOut>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d124      	bne.n	8011248 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80111fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011200:	f000 fce1 	bl	8011bc6 <prvIsQueueFull>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d018      	beq.n	801123c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120c:	3310      	adds	r3, #16
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	4611      	mov	r1, r2
 8011212:	4618      	mov	r0, r3
 8011214:	f001 f8fe 	bl	8012414 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801121a:	f000 fc6c 	bl	8011af6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801121e:	f000 ff1f 	bl	8012060 <xTaskResumeAll>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	f47f af7c 	bne.w	8011122 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801122a:	4b0c      	ldr	r3, [pc, #48]	; (801125c <xQueueGenericSend+0x200>)
 801122c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011230:	601a      	str	r2, [r3, #0]
 8011232:	f3bf 8f4f 	dsb	sy
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	e772      	b.n	8011122 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801123c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801123e:	f000 fc5a 	bl	8011af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011242:	f000 ff0d 	bl	8012060 <xTaskResumeAll>
 8011246:	e76c      	b.n	8011122 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801124a:	f000 fc54 	bl	8011af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801124e:	f000 ff07 	bl	8012060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011252:	2300      	movs	r3, #0
		}
	}
}
 8011254:	4618      	mov	r0, r3
 8011256:	3738      	adds	r7, #56	; 0x38
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	e000ed04 	.word	0xe000ed04

08011260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b08e      	sub	sp, #56	; 0x38
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	607a      	str	r2, [r7, #4]
 801126c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	2b00      	cmp	r3, #0
 8011276:	d10b      	bne.n	8011290 <xQueueGenericSendFromISR+0x30>
 8011278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127c:	b672      	cpsid	i
 801127e:	f383 8811 	msr	BASEPRI, r3
 8011282:	f3bf 8f6f 	isb	sy
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	b662      	cpsie	i
 801128c:	627b      	str	r3, [r7, #36]	; 0x24
 801128e:	e7fe      	b.n	801128e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d103      	bne.n	801129e <xQueueGenericSendFromISR+0x3e>
 8011296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801129a:	2b00      	cmp	r3, #0
 801129c:	d101      	bne.n	80112a2 <xQueueGenericSendFromISR+0x42>
 801129e:	2301      	movs	r3, #1
 80112a0:	e000      	b.n	80112a4 <xQueueGenericSendFromISR+0x44>
 80112a2:	2300      	movs	r3, #0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d10b      	bne.n	80112c0 <xQueueGenericSendFromISR+0x60>
 80112a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ac:	b672      	cpsid	i
 80112ae:	f383 8811 	msr	BASEPRI, r3
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	f3bf 8f4f 	dsb	sy
 80112ba:	b662      	cpsie	i
 80112bc:	623b      	str	r3, [r7, #32]
 80112be:	e7fe      	b.n	80112be <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	2b02      	cmp	r3, #2
 80112c4:	d103      	bne.n	80112ce <xQueueGenericSendFromISR+0x6e>
 80112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	d101      	bne.n	80112d2 <xQueueGenericSendFromISR+0x72>
 80112ce:	2301      	movs	r3, #1
 80112d0:	e000      	b.n	80112d4 <xQueueGenericSendFromISR+0x74>
 80112d2:	2300      	movs	r3, #0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d10b      	bne.n	80112f0 <xQueueGenericSendFromISR+0x90>
 80112d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112dc:	b672      	cpsid	i
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	b662      	cpsie	i
 80112ec:	61fb      	str	r3, [r7, #28]
 80112ee:	e7fe      	b.n	80112ee <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112f0:	f001 feba 	bl	8013068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80112f4:	f3ef 8211 	mrs	r2, BASEPRI
 80112f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fc:	b672      	cpsid	i
 80112fe:	f383 8811 	msr	BASEPRI, r3
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	b662      	cpsie	i
 801130c:	61ba      	str	r2, [r7, #24]
 801130e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011310:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011312:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801131c:	429a      	cmp	r2, r3
 801131e:	d302      	bcc.n	8011326 <xQueueGenericSendFromISR+0xc6>
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	2b02      	cmp	r3, #2
 8011324:	d12c      	bne.n	8011380 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801132c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011330:	683a      	ldr	r2, [r7, #0]
 8011332:	68b9      	ldr	r1, [r7, #8]
 8011334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011336:	f000 fb4e 	bl	80119d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801133a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011342:	d112      	bne.n	801136a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011348:	2b00      	cmp	r3, #0
 801134a:	d016      	beq.n	801137a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134e:	3324      	adds	r3, #36	; 0x24
 8011350:	4618      	mov	r0, r3
 8011352:	f001 f885 	bl	8012460 <xTaskRemoveFromEventList>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d00e      	beq.n	801137a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00b      	beq.n	801137a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2201      	movs	r2, #1
 8011366:	601a      	str	r2, [r3, #0]
 8011368:	e007      	b.n	801137a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801136a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801136e:	3301      	adds	r3, #1
 8011370:	b2db      	uxtb	r3, r3
 8011372:	b25a      	sxtb	r2, r3
 8011374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801137a:	2301      	movs	r3, #1
 801137c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801137e:	e001      	b.n	8011384 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011380:	2300      	movs	r3, #0
 8011382:	637b      	str	r3, [r7, #52]	; 0x34
 8011384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011386:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011390:	4618      	mov	r0, r3
 8011392:	3738      	adds	r7, #56	; 0x38
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b08e      	sub	sp, #56	; 0x38
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80113a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d10b      	bne.n	80113c4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80113ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b0:	b672      	cpsid	i
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	b662      	cpsie	i
 80113c0:	623b      	str	r3, [r7, #32]
 80113c2:	e7fe      	b.n	80113c2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80113c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d00b      	beq.n	80113e4 <xQueueGiveFromISR+0x4c>
 80113cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d0:	b672      	cpsid	i
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	b662      	cpsie	i
 80113e0:	61fb      	str	r3, [r7, #28]
 80113e2:	e7fe      	b.n	80113e2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80113e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d103      	bne.n	80113f4 <xQueueGiveFromISR+0x5c>
 80113ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d101      	bne.n	80113f8 <xQueueGiveFromISR+0x60>
 80113f4:	2301      	movs	r3, #1
 80113f6:	e000      	b.n	80113fa <xQueueGiveFromISR+0x62>
 80113f8:	2300      	movs	r3, #0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d10b      	bne.n	8011416 <xQueueGiveFromISR+0x7e>
 80113fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011402:	b672      	cpsid	i
 8011404:	f383 8811 	msr	BASEPRI, r3
 8011408:	f3bf 8f6f 	isb	sy
 801140c:	f3bf 8f4f 	dsb	sy
 8011410:	b662      	cpsie	i
 8011412:	61bb      	str	r3, [r7, #24]
 8011414:	e7fe      	b.n	8011414 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011416:	f001 fe27 	bl	8013068 <vPortValidateInterruptPriority>
	__asm volatile
 801141a:	f3ef 8211 	mrs	r2, BASEPRI
 801141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011422:	b672      	cpsid	i
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	f3bf 8f4f 	dsb	sy
 8011430:	b662      	cpsie	i
 8011432:	617a      	str	r2, [r7, #20]
 8011434:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011436:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011438:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801143e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011446:	429a      	cmp	r2, r3
 8011448:	d22b      	bcs.n	80114a2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011456:	1c5a      	adds	r2, r3, #1
 8011458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801145c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011464:	d112      	bne.n	801148c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801146a:	2b00      	cmp	r3, #0
 801146c:	d016      	beq.n	801149c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011470:	3324      	adds	r3, #36	; 0x24
 8011472:	4618      	mov	r0, r3
 8011474:	f000 fff4 	bl	8012460 <xTaskRemoveFromEventList>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00e      	beq.n	801149c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00b      	beq.n	801149c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	2201      	movs	r2, #1
 8011488:	601a      	str	r2, [r3, #0]
 801148a:	e007      	b.n	801149c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801148c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011490:	3301      	adds	r3, #1
 8011492:	b2db      	uxtb	r3, r3
 8011494:	b25a      	sxtb	r2, r3
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801149c:	2301      	movs	r3, #1
 801149e:	637b      	str	r3, [r7, #52]	; 0x34
 80114a0:	e001      	b.n	80114a6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80114a2:	2300      	movs	r3, #0
 80114a4:	637b      	str	r3, [r7, #52]	; 0x34
 80114a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80114b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3738      	adds	r7, #56	; 0x38
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
	...

080114bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b08c      	sub	sp, #48	; 0x30
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80114c8:	2300      	movs	r3, #0
 80114ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d10b      	bne.n	80114ee <xQueueReceive+0x32>
	__asm volatile
 80114d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114da:	b672      	cpsid	i
 80114dc:	f383 8811 	msr	BASEPRI, r3
 80114e0:	f3bf 8f6f 	isb	sy
 80114e4:	f3bf 8f4f 	dsb	sy
 80114e8:	b662      	cpsie	i
 80114ea:	623b      	str	r3, [r7, #32]
 80114ec:	e7fe      	b.n	80114ec <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d103      	bne.n	80114fc <xQueueReceive+0x40>
 80114f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d101      	bne.n	8011500 <xQueueReceive+0x44>
 80114fc:	2301      	movs	r3, #1
 80114fe:	e000      	b.n	8011502 <xQueueReceive+0x46>
 8011500:	2300      	movs	r3, #0
 8011502:	2b00      	cmp	r3, #0
 8011504:	d10b      	bne.n	801151e <xQueueReceive+0x62>
 8011506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150a:	b672      	cpsid	i
 801150c:	f383 8811 	msr	BASEPRI, r3
 8011510:	f3bf 8f6f 	isb	sy
 8011514:	f3bf 8f4f 	dsb	sy
 8011518:	b662      	cpsie	i
 801151a:	61fb      	str	r3, [r7, #28]
 801151c:	e7fe      	b.n	801151c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801151e:	f001 f973 	bl	8012808 <xTaskGetSchedulerState>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d102      	bne.n	801152e <xQueueReceive+0x72>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d101      	bne.n	8011532 <xQueueReceive+0x76>
 801152e:	2301      	movs	r3, #1
 8011530:	e000      	b.n	8011534 <xQueueReceive+0x78>
 8011532:	2300      	movs	r3, #0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d10b      	bne.n	8011550 <xQueueReceive+0x94>
 8011538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153c:	b672      	cpsid	i
 801153e:	f383 8811 	msr	BASEPRI, r3
 8011542:	f3bf 8f6f 	isb	sy
 8011546:	f3bf 8f4f 	dsb	sy
 801154a:	b662      	cpsie	i
 801154c:	61bb      	str	r3, [r7, #24]
 801154e:	e7fe      	b.n	801154e <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011550:	f001 fcaa 	bl	8012ea8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011558:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	2b00      	cmp	r3, #0
 801155e:	d01f      	beq.n	80115a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011560:	68b9      	ldr	r1, [r7, #8]
 8011562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011564:	f000 faa1 	bl	8011aaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156a:	1e5a      	subs	r2, r3, #1
 801156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	691b      	ldr	r3, [r3, #16]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d00f      	beq.n	8011598 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157a:	3310      	adds	r3, #16
 801157c:	4618      	mov	r0, r3
 801157e:	f000 ff6f 	bl	8012460 <xTaskRemoveFromEventList>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d007      	beq.n	8011598 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011588:	4b3c      	ldr	r3, [pc, #240]	; (801167c <xQueueReceive+0x1c0>)
 801158a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801158e:	601a      	str	r2, [r3, #0]
 8011590:	f3bf 8f4f 	dsb	sy
 8011594:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011598:	f001 fcb8 	bl	8012f0c <vPortExitCritical>
				return pdPASS;
 801159c:	2301      	movs	r3, #1
 801159e:	e069      	b.n	8011674 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d103      	bne.n	80115ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80115a6:	f001 fcb1 	bl	8012f0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80115aa:	2300      	movs	r3, #0
 80115ac:	e062      	b.n	8011674 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80115ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d106      	bne.n	80115c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115b4:	f107 0310 	add.w	r3, r7, #16
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 ffb5 	bl	8012528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80115be:	2301      	movs	r3, #1
 80115c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80115c2:	f001 fca3 	bl	8012f0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80115c6:	f000 fd3d 	bl	8012044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115ca:	f001 fc6d 	bl	8012ea8 <vPortEnterCritical>
 80115ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115d4:	b25b      	sxtb	r3, r3
 80115d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115da:	d103      	bne.n	80115e4 <xQueueReceive+0x128>
 80115dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115de:	2200      	movs	r2, #0
 80115e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115ea:	b25b      	sxtb	r3, r3
 80115ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f0:	d103      	bne.n	80115fa <xQueueReceive+0x13e>
 80115f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115fa:	f001 fc87 	bl	8012f0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115fe:	1d3a      	adds	r2, r7, #4
 8011600:	f107 0310 	add.w	r3, r7, #16
 8011604:	4611      	mov	r1, r2
 8011606:	4618      	mov	r0, r3
 8011608:	f000 ffa4 	bl	8012554 <xTaskCheckForTimeOut>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	d123      	bne.n	801165a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011614:	f000 fac1 	bl	8011b9a <prvIsQueueEmpty>
 8011618:	4603      	mov	r3, r0
 801161a:	2b00      	cmp	r3, #0
 801161c:	d017      	beq.n	801164e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011620:	3324      	adds	r3, #36	; 0x24
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	4611      	mov	r1, r2
 8011626:	4618      	mov	r0, r3
 8011628:	f000 fef4 	bl	8012414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801162c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801162e:	f000 fa62 	bl	8011af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011632:	f000 fd15 	bl	8012060 <xTaskResumeAll>
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d189      	bne.n	8011550 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801163c:	4b0f      	ldr	r3, [pc, #60]	; (801167c <xQueueReceive+0x1c0>)
 801163e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011642:	601a      	str	r2, [r3, #0]
 8011644:	f3bf 8f4f 	dsb	sy
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	e780      	b.n	8011550 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801164e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011650:	f000 fa51 	bl	8011af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011654:	f000 fd04 	bl	8012060 <xTaskResumeAll>
 8011658:	e77a      	b.n	8011550 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801165a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801165c:	f000 fa4b 	bl	8011af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011660:	f000 fcfe 	bl	8012060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011666:	f000 fa98 	bl	8011b9a <prvIsQueueEmpty>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	f43f af6f 	beq.w	8011550 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011672:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011674:	4618      	mov	r0, r3
 8011676:	3730      	adds	r7, #48	; 0x30
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}
 801167c:	e000ed04 	.word	0xe000ed04

08011680 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b08e      	sub	sp, #56	; 0x38
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801168a:	2300      	movs	r3, #0
 801168c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011692:	2300      	movs	r3, #0
 8011694:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011698:	2b00      	cmp	r3, #0
 801169a:	d10b      	bne.n	80116b4 <xQueueSemaphoreTake+0x34>
 801169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a0:	b672      	cpsid	i
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	b662      	cpsie	i
 80116b0:	623b      	str	r3, [r7, #32]
 80116b2:	e7fe      	b.n	80116b2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80116b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00b      	beq.n	80116d4 <xQueueSemaphoreTake+0x54>
 80116bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c0:	b672      	cpsid	i
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	b662      	cpsie	i
 80116d0:	61fb      	str	r3, [r7, #28]
 80116d2:	e7fe      	b.n	80116d2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80116d4:	f001 f898 	bl	8012808 <xTaskGetSchedulerState>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d102      	bne.n	80116e4 <xQueueSemaphoreTake+0x64>
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d101      	bne.n	80116e8 <xQueueSemaphoreTake+0x68>
 80116e4:	2301      	movs	r3, #1
 80116e6:	e000      	b.n	80116ea <xQueueSemaphoreTake+0x6a>
 80116e8:	2300      	movs	r3, #0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d10b      	bne.n	8011706 <xQueueSemaphoreTake+0x86>
 80116ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f2:	b672      	cpsid	i
 80116f4:	f383 8811 	msr	BASEPRI, r3
 80116f8:	f3bf 8f6f 	isb	sy
 80116fc:	f3bf 8f4f 	dsb	sy
 8011700:	b662      	cpsie	i
 8011702:	61bb      	str	r3, [r7, #24]
 8011704:	e7fe      	b.n	8011704 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011706:	f001 fbcf 	bl	8012ea8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801170e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011712:	2b00      	cmp	r3, #0
 8011714:	d024      	beq.n	8011760 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011718:	1e5a      	subs	r2, r3, #1
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d104      	bne.n	8011730 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011726:	f001 fa3d 	bl	8012ba4 <pvTaskIncrementMutexHeldCount>
 801172a:	4602      	mov	r2, r0
 801172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011732:	691b      	ldr	r3, [r3, #16]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d00f      	beq.n	8011758 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173a:	3310      	adds	r3, #16
 801173c:	4618      	mov	r0, r3
 801173e:	f000 fe8f 	bl	8012460 <xTaskRemoveFromEventList>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	d007      	beq.n	8011758 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011748:	4b54      	ldr	r3, [pc, #336]	; (801189c <xQueueSemaphoreTake+0x21c>)
 801174a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	f3bf 8f4f 	dsb	sy
 8011754:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011758:	f001 fbd8 	bl	8012f0c <vPortExitCritical>
				return pdPASS;
 801175c:	2301      	movs	r3, #1
 801175e:	e098      	b.n	8011892 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d112      	bne.n	801178c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011768:	2b00      	cmp	r3, #0
 801176a:	d00b      	beq.n	8011784 <xQueueSemaphoreTake+0x104>
 801176c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011770:	b672      	cpsid	i
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	b662      	cpsie	i
 8011780:	617b      	str	r3, [r7, #20]
 8011782:	e7fe      	b.n	8011782 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011784:	f001 fbc2 	bl	8012f0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011788:	2300      	movs	r3, #0
 801178a:	e082      	b.n	8011892 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801178e:	2b00      	cmp	r3, #0
 8011790:	d106      	bne.n	80117a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011792:	f107 030c 	add.w	r3, r7, #12
 8011796:	4618      	mov	r0, r3
 8011798:	f000 fec6 	bl	8012528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801179c:	2301      	movs	r3, #1
 801179e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80117a0:	f001 fbb4 	bl	8012f0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80117a4:	f000 fc4e 	bl	8012044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80117a8:	f001 fb7e 	bl	8012ea8 <vPortEnterCritical>
 80117ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117b2:	b25b      	sxtb	r3, r3
 80117b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b8:	d103      	bne.n	80117c2 <xQueueSemaphoreTake+0x142>
 80117ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117bc:	2200      	movs	r2, #0
 80117be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117c8:	b25b      	sxtb	r3, r3
 80117ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ce:	d103      	bne.n	80117d8 <xQueueSemaphoreTake+0x158>
 80117d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d2:	2200      	movs	r2, #0
 80117d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80117d8:	f001 fb98 	bl	8012f0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80117dc:	463a      	mov	r2, r7
 80117de:	f107 030c 	add.w	r3, r7, #12
 80117e2:	4611      	mov	r1, r2
 80117e4:	4618      	mov	r0, r3
 80117e6:	f000 feb5 	bl	8012554 <xTaskCheckForTimeOut>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d132      	bne.n	8011856 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117f2:	f000 f9d2 	bl	8011b9a <prvIsQueueEmpty>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d026      	beq.n	801184a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d109      	bne.n	8011818 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011804:	f001 fb50 	bl	8012ea8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	4618      	mov	r0, r3
 801180e:	f001 f819 	bl	8012844 <xTaskPriorityInherit>
 8011812:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011814:	f001 fb7a 	bl	8012f0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181a:	3324      	adds	r3, #36	; 0x24
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	4611      	mov	r1, r2
 8011820:	4618      	mov	r0, r3
 8011822:	f000 fdf7 	bl	8012414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011828:	f000 f965 	bl	8011af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801182c:	f000 fc18 	bl	8012060 <xTaskResumeAll>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	f47f af67 	bne.w	8011706 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011838:	4b18      	ldr	r3, [pc, #96]	; (801189c <xQueueSemaphoreTake+0x21c>)
 801183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801183e:	601a      	str	r2, [r3, #0]
 8011840:	f3bf 8f4f 	dsb	sy
 8011844:	f3bf 8f6f 	isb	sy
 8011848:	e75d      	b.n	8011706 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801184a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801184c:	f000 f953 	bl	8011af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011850:	f000 fc06 	bl	8012060 <xTaskResumeAll>
 8011854:	e757      	b.n	8011706 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011858:	f000 f94d 	bl	8011af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801185c:	f000 fc00 	bl	8012060 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011862:	f000 f99a 	bl	8011b9a <prvIsQueueEmpty>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	f43f af4c 	beq.w	8011706 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011870:	2b00      	cmp	r3, #0
 8011872:	d00d      	beq.n	8011890 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011874:	f001 fb18 	bl	8012ea8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801187a:	f000 f894 	bl	80119a6 <prvGetDisinheritPriorityAfterTimeout>
 801187e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011886:	4618      	mov	r0, r3
 8011888:	f001 f8ea 	bl	8012a60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801188c:	f001 fb3e 	bl	8012f0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011892:	4618      	mov	r0, r3
 8011894:	3738      	adds	r7, #56	; 0x38
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	e000ed04 	.word	0xe000ed04

080118a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b08e      	sub	sp, #56	; 0x38
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80118b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d10b      	bne.n	80118ce <xQueueReceiveFromISR+0x2e>
 80118b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ba:	b672      	cpsid	i
 80118bc:	f383 8811 	msr	BASEPRI, r3
 80118c0:	f3bf 8f6f 	isb	sy
 80118c4:	f3bf 8f4f 	dsb	sy
 80118c8:	b662      	cpsie	i
 80118ca:	623b      	str	r3, [r7, #32]
 80118cc:	e7fe      	b.n	80118cc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d103      	bne.n	80118dc <xQueueReceiveFromISR+0x3c>
 80118d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d101      	bne.n	80118e0 <xQueueReceiveFromISR+0x40>
 80118dc:	2301      	movs	r3, #1
 80118de:	e000      	b.n	80118e2 <xQueueReceiveFromISR+0x42>
 80118e0:	2300      	movs	r3, #0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10b      	bne.n	80118fe <xQueueReceiveFromISR+0x5e>
 80118e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ea:	b672      	cpsid	i
 80118ec:	f383 8811 	msr	BASEPRI, r3
 80118f0:	f3bf 8f6f 	isb	sy
 80118f4:	f3bf 8f4f 	dsb	sy
 80118f8:	b662      	cpsie	i
 80118fa:	61fb      	str	r3, [r7, #28]
 80118fc:	e7fe      	b.n	80118fc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118fe:	f001 fbb3 	bl	8013068 <vPortValidateInterruptPriority>
	__asm volatile
 8011902:	f3ef 8211 	mrs	r2, BASEPRI
 8011906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190a:	b672      	cpsid	i
 801190c:	f383 8811 	msr	BASEPRI, r3
 8011910:	f3bf 8f6f 	isb	sy
 8011914:	f3bf 8f4f 	dsb	sy
 8011918:	b662      	cpsie	i
 801191a:	61ba      	str	r2, [r7, #24]
 801191c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801191e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011920:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011926:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192a:	2b00      	cmp	r3, #0
 801192c:	d02f      	beq.n	801198e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011938:	68b9      	ldr	r1, [r7, #8]
 801193a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801193c:	f000 f8b5 	bl	8011aaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011942:	1e5a      	subs	r2, r3, #1
 8011944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011946:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011950:	d112      	bne.n	8011978 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d016      	beq.n	8011988 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195c:	3310      	adds	r3, #16
 801195e:	4618      	mov	r0, r3
 8011960:	f000 fd7e 	bl	8012460 <xTaskRemoveFromEventList>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00e      	beq.n	8011988 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00b      	beq.n	8011988 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2201      	movs	r2, #1
 8011974:	601a      	str	r2, [r3, #0]
 8011976:	e007      	b.n	8011988 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801197c:	3301      	adds	r3, #1
 801197e:	b2db      	uxtb	r3, r3
 8011980:	b25a      	sxtb	r2, r3
 8011982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011988:	2301      	movs	r3, #1
 801198a:	637b      	str	r3, [r7, #52]	; 0x34
 801198c:	e001      	b.n	8011992 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 801198e:	2300      	movs	r3, #0
 8011990:	637b      	str	r3, [r7, #52]	; 0x34
 8011992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011994:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3738      	adds	r7, #56	; 0x38
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80119a6:	b480      	push	{r7}
 80119a8:	b085      	sub	sp, #20
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d006      	beq.n	80119c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f1c3 0307 	rsb	r3, r3, #7
 80119c0:	60fb      	str	r3, [r7, #12]
 80119c2:	e001      	b.n	80119c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80119c4:	2300      	movs	r3, #0
 80119c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80119c8:	68fb      	ldr	r3, [r7, #12]
	}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3714      	adds	r7, #20
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr

080119d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b086      	sub	sp, #24
 80119da:	af00      	add	r7, sp, #0
 80119dc:	60f8      	str	r0, [r7, #12]
 80119de:	60b9      	str	r1, [r7, #8]
 80119e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80119e2:	2300      	movs	r3, #0
 80119e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d10d      	bne.n	8011a10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d14d      	bne.n	8011a98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 ffa5 	bl	8012950 <xTaskPriorityDisinherit>
 8011a06:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	605a      	str	r2, [r3, #4]
 8011a0e:	e043      	b.n	8011a98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d119      	bne.n	8011a4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6898      	ldr	r0, [r3, #8]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a1e:	461a      	mov	r2, r3
 8011a20:	68b9      	ldr	r1, [r7, #8]
 8011a22:	f00d f8ac 	bl	801eb7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	689a      	ldr	r2, [r3, #8]
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a2e:	441a      	add	r2, r3
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	689a      	ldr	r2, [r3, #8]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d32b      	bcc.n	8011a98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	609a      	str	r2, [r3, #8]
 8011a48:	e026      	b.n	8011a98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	68d8      	ldr	r0, [r3, #12]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a52:	461a      	mov	r2, r3
 8011a54:	68b9      	ldr	r1, [r7, #8]
 8011a56:	f00d f892 	bl	801eb7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	68da      	ldr	r2, [r3, #12]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a62:	425b      	negs	r3, r3
 8011a64:	441a      	add	r2, r3
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	68da      	ldr	r2, [r3, #12]
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d207      	bcs.n	8011a86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	685a      	ldr	r2, [r3, #4]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7e:	425b      	negs	r3, r3
 8011a80:	441a      	add	r2, r3
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d105      	bne.n	8011a98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d002      	beq.n	8011a98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	3b01      	subs	r3, #1
 8011a96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	1c5a      	adds	r2, r3, #1
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011aa0:	697b      	ldr	r3, [r7, #20]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b082      	sub	sp, #8
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
 8011ab2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d018      	beq.n	8011aee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	68da      	ldr	r2, [r3, #12]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ac4:	441a      	add	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	68da      	ldr	r2, [r3, #12]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d303      	bcc.n	8011ade <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	68d9      	ldr	r1, [r3, #12]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	6838      	ldr	r0, [r7, #0]
 8011aea:	f00d f848 	bl	801eb7e <memcpy>
	}
}
 8011aee:	bf00      	nop
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b084      	sub	sp, #16
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011afe:	f001 f9d3 	bl	8012ea8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b0a:	e011      	b.n	8011b30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d012      	beq.n	8011b3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	3324      	adds	r3, #36	; 0x24
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f000 fca1 	bl	8012460 <xTaskRemoveFromEventList>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011b24:	f000 fd7a 	bl	801261c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011b28:	7bfb      	ldrb	r3, [r7, #15]
 8011b2a:	3b01      	subs	r3, #1
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	dce9      	bgt.n	8011b0c <prvUnlockQueue+0x16>
 8011b38:	e000      	b.n	8011b3c <prvUnlockQueue+0x46>
					break;
 8011b3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	22ff      	movs	r2, #255	; 0xff
 8011b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011b44:	f001 f9e2 	bl	8012f0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011b48:	f001 f9ae 	bl	8012ea8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b54:	e011      	b.n	8011b7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d012      	beq.n	8011b84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	3310      	adds	r3, #16
 8011b62:	4618      	mov	r0, r3
 8011b64:	f000 fc7c 	bl	8012460 <xTaskRemoveFromEventList>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d001      	beq.n	8011b72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011b6e:	f000 fd55 	bl	801261c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011b72:	7bbb      	ldrb	r3, [r7, #14]
 8011b74:	3b01      	subs	r3, #1
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	dce9      	bgt.n	8011b56 <prvUnlockQueue+0x60>
 8011b82:	e000      	b.n	8011b86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011b84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	22ff      	movs	r2, #255	; 0xff
 8011b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011b8e:	f001 f9bd 	bl	8012f0c <vPortExitCritical>
}
 8011b92:	bf00      	nop
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}

08011b9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011b9a:	b580      	push	{r7, lr}
 8011b9c:	b084      	sub	sp, #16
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ba2:	f001 f981 	bl	8012ea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d102      	bne.n	8011bb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	60fb      	str	r3, [r7, #12]
 8011bb2:	e001      	b.n	8011bb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011bb8:	f001 f9a8 	bl	8012f0c <vPortExitCritical>

	return xReturn;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011bce:	f001 f96b 	bl	8012ea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d102      	bne.n	8011be4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011bde:	2301      	movs	r3, #1
 8011be0:	60fb      	str	r3, [r7, #12]
 8011be2:	e001      	b.n	8011be8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011be4:	2300      	movs	r3, #0
 8011be6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011be8:	f001 f990 	bl	8012f0c <vPortExitCritical>

	return xReturn;
 8011bec:	68fb      	ldr	r3, [r7, #12]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}

08011bf6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011bf6:	b580      	push	{r7, lr}
 8011bf8:	b08e      	sub	sp, #56	; 0x38
 8011bfa:	af04      	add	r7, sp, #16
 8011bfc:	60f8      	str	r0, [r7, #12]
 8011bfe:	60b9      	str	r1, [r7, #8]
 8011c00:	607a      	str	r2, [r7, #4]
 8011c02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d10b      	bne.n	8011c22 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0e:	b672      	cpsid	i
 8011c10:	f383 8811 	msr	BASEPRI, r3
 8011c14:	f3bf 8f6f 	isb	sy
 8011c18:	f3bf 8f4f 	dsb	sy
 8011c1c:	b662      	cpsie	i
 8011c1e:	623b      	str	r3, [r7, #32]
 8011c20:	e7fe      	b.n	8011c20 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d10b      	bne.n	8011c40 <xTaskCreateStatic+0x4a>
 8011c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2c:	b672      	cpsid	i
 8011c2e:	f383 8811 	msr	BASEPRI, r3
 8011c32:	f3bf 8f6f 	isb	sy
 8011c36:	f3bf 8f4f 	dsb	sy
 8011c3a:	b662      	cpsie	i
 8011c3c:	61fb      	str	r3, [r7, #28]
 8011c3e:	e7fe      	b.n	8011c3e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011c40:	2354      	movs	r3, #84	; 0x54
 8011c42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	2b54      	cmp	r3, #84	; 0x54
 8011c48:	d00b      	beq.n	8011c62 <xTaskCreateStatic+0x6c>
 8011c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4e:	b672      	cpsid	i
 8011c50:	f383 8811 	msr	BASEPRI, r3
 8011c54:	f3bf 8f6f 	isb	sy
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	b662      	cpsie	i
 8011c5e:	61bb      	str	r3, [r7, #24]
 8011c60:	e7fe      	b.n	8011c60 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d01e      	beq.n	8011ca6 <xTaskCreateStatic+0xb0>
 8011c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d01b      	beq.n	8011ca6 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c70:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7a:	2202      	movs	r2, #2
 8011c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011c80:	2300      	movs	r3, #0
 8011c82:	9303      	str	r3, [sp, #12]
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	9302      	str	r3, [sp, #8]
 8011c88:	f107 0314 	add.w	r3, r7, #20
 8011c8c:	9301      	str	r3, [sp, #4]
 8011c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c90:	9300      	str	r3, [sp, #0]
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	68b9      	ldr	r1, [r7, #8]
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f000 f850 	bl	8011d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ca0:	f000 f8ce 	bl	8011e40 <prvAddNewTaskToReadyList>
 8011ca4:	e001      	b.n	8011caa <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011caa:	697b      	ldr	r3, [r7, #20]
	}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3728      	adds	r7, #40	; 0x28
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b08c      	sub	sp, #48	; 0x30
 8011cb8:	af04      	add	r7, sp, #16
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	603b      	str	r3, [r7, #0]
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cc4:	88fb      	ldrh	r3, [r7, #6]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f001 fa0f 	bl	80130ec <pvPortMalloc>
 8011cce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00e      	beq.n	8011cf4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011cd6:	2054      	movs	r0, #84	; 0x54
 8011cd8:	f001 fa08 	bl	80130ec <pvPortMalloc>
 8011cdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d003      	beq.n	8011cec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8011cea:	e005      	b.n	8011cf8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011cec:	6978      	ldr	r0, [r7, #20]
 8011cee:	f001 fac5 	bl	801327c <vPortFree>
 8011cf2:	e001      	b.n	8011cf8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d017      	beq.n	8011d2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	2200      	movs	r2, #0
 8011d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011d06:	88fa      	ldrh	r2, [r7, #6]
 8011d08:	2300      	movs	r3, #0
 8011d0a:	9303      	str	r3, [sp, #12]
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	9302      	str	r3, [sp, #8]
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	9301      	str	r3, [sp, #4]
 8011d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	68b9      	ldr	r1, [r7, #8]
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f000 f80e 	bl	8011d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d22:	69f8      	ldr	r0, [r7, #28]
 8011d24:	f000 f88c 	bl	8011e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011d28:	2301      	movs	r3, #1
 8011d2a:	61bb      	str	r3, [r7, #24]
 8011d2c:	e002      	b.n	8011d34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011d34:	69bb      	ldr	r3, [r7, #24]
	}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3720      	adds	r7, #32
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}

08011d3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b088      	sub	sp, #32
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	60f8      	str	r0, [r7, #12]
 8011d46:	60b9      	str	r1, [r7, #8]
 8011d48:	607a      	str	r2, [r7, #4]
 8011d4a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d50:	6879      	ldr	r1, [r7, #4]
 8011d52:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011d56:	440b      	add	r3, r1
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	4413      	add	r3, r2
 8011d5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	f023 0307 	bic.w	r3, r3, #7
 8011d64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	f003 0307 	and.w	r3, r3, #7
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00b      	beq.n	8011d88 <prvInitialiseNewTask+0x4a>
 8011d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d74:	b672      	cpsid	i
 8011d76:	f383 8811 	msr	BASEPRI, r3
 8011d7a:	f3bf 8f6f 	isb	sy
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	b662      	cpsie	i
 8011d84:	617b      	str	r3, [r7, #20]
 8011d86:	e7fe      	b.n	8011d86 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d88:	2300      	movs	r3, #0
 8011d8a:	61fb      	str	r3, [r7, #28]
 8011d8c:	e012      	b.n	8011db4 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	4413      	add	r3, r2
 8011d94:	7819      	ldrb	r1, [r3, #0]
 8011d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	4413      	add	r3, r2
 8011d9c:	3334      	adds	r3, #52	; 0x34
 8011d9e:	460a      	mov	r2, r1
 8011da0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011da2:	68ba      	ldr	r2, [r7, #8]
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	4413      	add	r3, r2
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d006      	beq.n	8011dbc <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	3301      	adds	r3, #1
 8011db2:	61fb      	str	r3, [r7, #28]
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	2b0f      	cmp	r3, #15
 8011db8:	d9e9      	bls.n	8011d8e <prvInitialiseNewTask+0x50>
 8011dba:	e000      	b.n	8011dbe <prvInitialiseNewTask+0x80>
		{
			break;
 8011dbc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc8:	2b06      	cmp	r3, #6
 8011dca:	d901      	bls.n	8011dd0 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011dcc:	2306      	movs	r3, #6
 8011dce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dde:	2200      	movs	r2, #0
 8011de0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de4:	3304      	adds	r3, #4
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fe ff12 	bl	8010c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dee:	3318      	adds	r3, #24
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7fe ff0d 	bl	8010c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfe:	f1c3 0207 	rsb	r2, r3, #7
 8011e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0e:	2200      	movs	r2, #0
 8011e10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e14:	2200      	movs	r2, #0
 8011e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011e1a:	683a      	ldr	r2, [r7, #0]
 8011e1c:	68f9      	ldr	r1, [r7, #12]
 8011e1e:	69b8      	ldr	r0, [r7, #24]
 8011e20:	f000 ff3a 	bl	8012c98 <pxPortInitialiseStack>
 8011e24:	4602      	mov	r2, r0
 8011e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e28:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d002      	beq.n	8011e36 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e36:	bf00      	nop
 8011e38:	3720      	adds	r7, #32
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
	...

08011e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011e48:	f001 f82e 	bl	8012ea8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011e4c:	4b2a      	ldr	r3, [pc, #168]	; (8011ef8 <prvAddNewTaskToReadyList+0xb8>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	3301      	adds	r3, #1
 8011e52:	4a29      	ldr	r2, [pc, #164]	; (8011ef8 <prvAddNewTaskToReadyList+0xb8>)
 8011e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011e56:	4b29      	ldr	r3, [pc, #164]	; (8011efc <prvAddNewTaskToReadyList+0xbc>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d109      	bne.n	8011e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011e5e:	4a27      	ldr	r2, [pc, #156]	; (8011efc <prvAddNewTaskToReadyList+0xbc>)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011e64:	4b24      	ldr	r3, [pc, #144]	; (8011ef8 <prvAddNewTaskToReadyList+0xb8>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	d110      	bne.n	8011e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011e6c:	f000 fbfa 	bl	8012664 <prvInitialiseTaskLists>
 8011e70:	e00d      	b.n	8011e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011e72:	4b23      	ldr	r3, [pc, #140]	; (8011f00 <prvAddNewTaskToReadyList+0xc0>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d109      	bne.n	8011e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011e7a:	4b20      	ldr	r3, [pc, #128]	; (8011efc <prvAddNewTaskToReadyList+0xbc>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d802      	bhi.n	8011e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011e88:	4a1c      	ldr	r2, [pc, #112]	; (8011efc <prvAddNewTaskToReadyList+0xbc>)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011e8e:	4b1d      	ldr	r3, [pc, #116]	; (8011f04 <prvAddNewTaskToReadyList+0xc4>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	3301      	adds	r3, #1
 8011e94:	4a1b      	ldr	r2, [pc, #108]	; (8011f04 <prvAddNewTaskToReadyList+0xc4>)
 8011e96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	409a      	lsls	r2, r3
 8011ea0:	4b19      	ldr	r3, [pc, #100]	; (8011f08 <prvAddNewTaskToReadyList+0xc8>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	4a18      	ldr	r2, [pc, #96]	; (8011f08 <prvAddNewTaskToReadyList+0xc8>)
 8011ea8:	6013      	str	r3, [r2, #0]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eae:	4613      	mov	r3, r2
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	4413      	add	r3, r2
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	4a15      	ldr	r2, [pc, #84]	; (8011f0c <prvAddNewTaskToReadyList+0xcc>)
 8011eb8:	441a      	add	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	4610      	mov	r0, r2
 8011ec2:	f7fe feb2 	bl	8010c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011ec6:	f001 f821 	bl	8012f0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011eca:	4b0d      	ldr	r3, [pc, #52]	; (8011f00 <prvAddNewTaskToReadyList+0xc0>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00e      	beq.n	8011ef0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011ed2:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <prvAddNewTaskToReadyList+0xbc>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d207      	bcs.n	8011ef0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011ee0:	4b0b      	ldr	r3, [pc, #44]	; (8011f10 <prvAddNewTaskToReadyList+0xd0>)
 8011ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ee6:	601a      	str	r2, [r3, #0]
 8011ee8:	f3bf 8f4f 	dsb	sy
 8011eec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ef0:	bf00      	nop
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	20001c7c 	.word	0x20001c7c
 8011efc:	20001b7c 	.word	0x20001b7c
 8011f00:	20001c88 	.word	0x20001c88
 8011f04:	20001c98 	.word	0x20001c98
 8011f08:	20001c84 	.word	0x20001c84
 8011f0c:	20001b80 	.word	0x20001b80
 8011f10:	e000ed04 	.word	0xe000ed04

08011f14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d018      	beq.n	8011f58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011f26:	4b14      	ldr	r3, [pc, #80]	; (8011f78 <vTaskDelay+0x64>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d00b      	beq.n	8011f46 <vTaskDelay+0x32>
 8011f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f32:	b672      	cpsid	i
 8011f34:	f383 8811 	msr	BASEPRI, r3
 8011f38:	f3bf 8f6f 	isb	sy
 8011f3c:	f3bf 8f4f 	dsb	sy
 8011f40:	b662      	cpsie	i
 8011f42:	60bb      	str	r3, [r7, #8]
 8011f44:	e7fe      	b.n	8011f44 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011f46:	f000 f87d 	bl	8012044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 fe3d 	bl	8012bcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011f52:	f000 f885 	bl	8012060 <xTaskResumeAll>
 8011f56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d107      	bne.n	8011f6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011f5e:	4b07      	ldr	r3, [pc, #28]	; (8011f7c <vTaskDelay+0x68>)
 8011f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f64:	601a      	str	r2, [r3, #0]
 8011f66:	f3bf 8f4f 	dsb	sy
 8011f6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011f6e:	bf00      	nop
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	20001ca4 	.word	0x20001ca4
 8011f7c:	e000ed04 	.word	0xe000ed04

08011f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b08a      	sub	sp, #40	; 0x28
 8011f84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011f86:	2300      	movs	r3, #0
 8011f88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011f8e:	463a      	mov	r2, r7
 8011f90:	1d39      	adds	r1, r7, #4
 8011f92:	f107 0308 	add.w	r3, r7, #8
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7ee faba 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011f9c:	6839      	ldr	r1, [r7, #0]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	9202      	str	r2, [sp, #8]
 8011fa4:	9301      	str	r3, [sp, #4]
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	2300      	movs	r3, #0
 8011fac:	460a      	mov	r2, r1
 8011fae:	491f      	ldr	r1, [pc, #124]	; (801202c <vTaskStartScheduler+0xac>)
 8011fb0:	481f      	ldr	r0, [pc, #124]	; (8012030 <vTaskStartScheduler+0xb0>)
 8011fb2:	f7ff fe20 	bl	8011bf6 <xTaskCreateStatic>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	4b1e      	ldr	r3, [pc, #120]	; (8012034 <vTaskStartScheduler+0xb4>)
 8011fba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011fbc:	4b1d      	ldr	r3, [pc, #116]	; (8012034 <vTaskStartScheduler+0xb4>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d002      	beq.n	8011fca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	617b      	str	r3, [r7, #20]
 8011fc8:	e001      	b.n	8011fce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d117      	bne.n	8012004 <vTaskStartScheduler+0x84>
 8011fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd8:	b672      	cpsid	i
 8011fda:	f383 8811 	msr	BASEPRI, r3
 8011fde:	f3bf 8f6f 	isb	sy
 8011fe2:	f3bf 8f4f 	dsb	sy
 8011fe6:	b662      	cpsie	i
 8011fe8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011fea:	4b13      	ldr	r3, [pc, #76]	; (8012038 <vTaskStartScheduler+0xb8>)
 8011fec:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011ff2:	4b12      	ldr	r3, [pc, #72]	; (801203c <vTaskStartScheduler+0xbc>)
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011ff8:	4b11      	ldr	r3, [pc, #68]	; (8012040 <vTaskStartScheduler+0xc0>)
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011ffe:	f000 fed7 	bl	8012db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012002:	e00f      	b.n	8012024 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801200a:	d10b      	bne.n	8012024 <vTaskStartScheduler+0xa4>
 801200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012010:	b672      	cpsid	i
 8012012:	f383 8811 	msr	BASEPRI, r3
 8012016:	f3bf 8f6f 	isb	sy
 801201a:	f3bf 8f4f 	dsb	sy
 801201e:	b662      	cpsie	i
 8012020:	60fb      	str	r3, [r7, #12]
 8012022:	e7fe      	b.n	8012022 <vTaskStartScheduler+0xa2>
}
 8012024:	bf00      	nop
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	0801edd8 	.word	0x0801edd8
 8012030:	08012635 	.word	0x08012635
 8012034:	20001ca0 	.word	0x20001ca0
 8012038:	20001c9c 	.word	0x20001c9c
 801203c:	20001c88 	.word	0x20001c88
 8012040:	20001c80 	.word	0x20001c80

08012044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012044:	b480      	push	{r7}
 8012046:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012048:	4b04      	ldr	r3, [pc, #16]	; (801205c <vTaskSuspendAll+0x18>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	3301      	adds	r3, #1
 801204e:	4a03      	ldr	r2, [pc, #12]	; (801205c <vTaskSuspendAll+0x18>)
 8012050:	6013      	str	r3, [r2, #0]
}
 8012052:	bf00      	nop
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	20001ca4 	.word	0x20001ca4

08012060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012066:	2300      	movs	r3, #0
 8012068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801206a:	2300      	movs	r3, #0
 801206c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801206e:	4b42      	ldr	r3, [pc, #264]	; (8012178 <xTaskResumeAll+0x118>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d10b      	bne.n	801208e <xTaskResumeAll+0x2e>
 8012076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801207a:	b672      	cpsid	i
 801207c:	f383 8811 	msr	BASEPRI, r3
 8012080:	f3bf 8f6f 	isb	sy
 8012084:	f3bf 8f4f 	dsb	sy
 8012088:	b662      	cpsie	i
 801208a:	603b      	str	r3, [r7, #0]
 801208c:	e7fe      	b.n	801208c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801208e:	f000 ff0b 	bl	8012ea8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012092:	4b39      	ldr	r3, [pc, #228]	; (8012178 <xTaskResumeAll+0x118>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	3b01      	subs	r3, #1
 8012098:	4a37      	ldr	r2, [pc, #220]	; (8012178 <xTaskResumeAll+0x118>)
 801209a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801209c:	4b36      	ldr	r3, [pc, #216]	; (8012178 <xTaskResumeAll+0x118>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d161      	bne.n	8012168 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80120a4:	4b35      	ldr	r3, [pc, #212]	; (801217c <xTaskResumeAll+0x11c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d05d      	beq.n	8012168 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80120ac:	e02e      	b.n	801210c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80120ae:	4b34      	ldr	r3, [pc, #208]	; (8012180 <xTaskResumeAll+0x120>)
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	3318      	adds	r3, #24
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fe fe12 	bl	8010ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	3304      	adds	r3, #4
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fe fe0d 	bl	8010ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ce:	2201      	movs	r2, #1
 80120d0:	409a      	lsls	r2, r3
 80120d2:	4b2c      	ldr	r3, [pc, #176]	; (8012184 <xTaskResumeAll+0x124>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	4313      	orrs	r3, r2
 80120d8:	4a2a      	ldr	r2, [pc, #168]	; (8012184 <xTaskResumeAll+0x124>)
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e0:	4613      	mov	r3, r2
 80120e2:	009b      	lsls	r3, r3, #2
 80120e4:	4413      	add	r3, r2
 80120e6:	009b      	lsls	r3, r3, #2
 80120e8:	4a27      	ldr	r2, [pc, #156]	; (8012188 <xTaskResumeAll+0x128>)
 80120ea:	441a      	add	r2, r3
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	3304      	adds	r3, #4
 80120f0:	4619      	mov	r1, r3
 80120f2:	4610      	mov	r0, r2
 80120f4:	f7fe fd99 	bl	8010c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120fc:	4b23      	ldr	r3, [pc, #140]	; (801218c <xTaskResumeAll+0x12c>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012102:	429a      	cmp	r2, r3
 8012104:	d302      	bcc.n	801210c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012106:	4b22      	ldr	r3, [pc, #136]	; (8012190 <xTaskResumeAll+0x130>)
 8012108:	2201      	movs	r2, #1
 801210a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801210c:	4b1c      	ldr	r3, [pc, #112]	; (8012180 <xTaskResumeAll+0x120>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d1cc      	bne.n	80120ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d001      	beq.n	801211e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801211a:	f000 fb3f 	bl	801279c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801211e:	4b1d      	ldr	r3, [pc, #116]	; (8012194 <xTaskResumeAll+0x134>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d010      	beq.n	801214c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801212a:	f000 f859 	bl	80121e0 <xTaskIncrementTick>
 801212e:	4603      	mov	r3, r0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d002      	beq.n	801213a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012134:	4b16      	ldr	r3, [pc, #88]	; (8012190 <xTaskResumeAll+0x130>)
 8012136:	2201      	movs	r2, #1
 8012138:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	3b01      	subs	r3, #1
 801213e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d1f1      	bne.n	801212a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8012146:	4b13      	ldr	r3, [pc, #76]	; (8012194 <xTaskResumeAll+0x134>)
 8012148:	2200      	movs	r2, #0
 801214a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801214c:	4b10      	ldr	r3, [pc, #64]	; (8012190 <xTaskResumeAll+0x130>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d009      	beq.n	8012168 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012154:	2301      	movs	r3, #1
 8012156:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012158:	4b0f      	ldr	r3, [pc, #60]	; (8012198 <xTaskResumeAll+0x138>)
 801215a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	f3bf 8f4f 	dsb	sy
 8012164:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012168:	f000 fed0 	bl	8012f0c <vPortExitCritical>

	return xAlreadyYielded;
 801216c:	68bb      	ldr	r3, [r7, #8]
}
 801216e:	4618      	mov	r0, r3
 8012170:	3710      	adds	r7, #16
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	20001ca4 	.word	0x20001ca4
 801217c:	20001c7c 	.word	0x20001c7c
 8012180:	20001c3c 	.word	0x20001c3c
 8012184:	20001c84 	.word	0x20001c84
 8012188:	20001b80 	.word	0x20001b80
 801218c:	20001b7c 	.word	0x20001b7c
 8012190:	20001c90 	.word	0x20001c90
 8012194:	20001c8c 	.word	0x20001c8c
 8012198:	e000ed04 	.word	0xe000ed04

0801219c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80121a2:	4b05      	ldr	r3, [pc, #20]	; (80121b8 <xTaskGetTickCount+0x1c>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80121a8:	687b      	ldr	r3, [r7, #4]
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	370c      	adds	r7, #12
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	20001c80 	.word	0x20001c80

080121bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121c2:	f000 ff51 	bl	8013068 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80121c6:	2300      	movs	r3, #0
 80121c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80121ca:	4b04      	ldr	r3, [pc, #16]	; (80121dc <xTaskGetTickCountFromISR+0x20>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80121d0:	683b      	ldr	r3, [r7, #0]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3708      	adds	r7, #8
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	20001c80 	.word	0x20001c80

080121e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80121e6:	2300      	movs	r3, #0
 80121e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80121ea:	4b51      	ldr	r3, [pc, #324]	; (8012330 <xTaskIncrementTick+0x150>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	f040 808e 	bne.w	8012310 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80121f4:	4b4f      	ldr	r3, [pc, #316]	; (8012334 <xTaskIncrementTick+0x154>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3301      	adds	r3, #1
 80121fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80121fc:	4a4d      	ldr	r2, [pc, #308]	; (8012334 <xTaskIncrementTick+0x154>)
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d121      	bne.n	801224c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012208:	4b4b      	ldr	r3, [pc, #300]	; (8012338 <xTaskIncrementTick+0x158>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d00b      	beq.n	801222a <xTaskIncrementTick+0x4a>
 8012212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012216:	b672      	cpsid	i
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	b662      	cpsie	i
 8012226:	603b      	str	r3, [r7, #0]
 8012228:	e7fe      	b.n	8012228 <xTaskIncrementTick+0x48>
 801222a:	4b43      	ldr	r3, [pc, #268]	; (8012338 <xTaskIncrementTick+0x158>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	60fb      	str	r3, [r7, #12]
 8012230:	4b42      	ldr	r3, [pc, #264]	; (801233c <xTaskIncrementTick+0x15c>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	4a40      	ldr	r2, [pc, #256]	; (8012338 <xTaskIncrementTick+0x158>)
 8012236:	6013      	str	r3, [r2, #0]
 8012238:	4a40      	ldr	r2, [pc, #256]	; (801233c <xTaskIncrementTick+0x15c>)
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	6013      	str	r3, [r2, #0]
 801223e:	4b40      	ldr	r3, [pc, #256]	; (8012340 <xTaskIncrementTick+0x160>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	3301      	adds	r3, #1
 8012244:	4a3e      	ldr	r2, [pc, #248]	; (8012340 <xTaskIncrementTick+0x160>)
 8012246:	6013      	str	r3, [r2, #0]
 8012248:	f000 faa8 	bl	801279c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801224c:	4b3d      	ldr	r3, [pc, #244]	; (8012344 <xTaskIncrementTick+0x164>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	693a      	ldr	r2, [r7, #16]
 8012252:	429a      	cmp	r2, r3
 8012254:	d34d      	bcc.n	80122f2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012256:	4b38      	ldr	r3, [pc, #224]	; (8012338 <xTaskIncrementTick+0x158>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d101      	bne.n	8012264 <xTaskIncrementTick+0x84>
 8012260:	2301      	movs	r3, #1
 8012262:	e000      	b.n	8012266 <xTaskIncrementTick+0x86>
 8012264:	2300      	movs	r3, #0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d004      	beq.n	8012274 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801226a:	4b36      	ldr	r3, [pc, #216]	; (8012344 <xTaskIncrementTick+0x164>)
 801226c:	f04f 32ff 	mov.w	r2, #4294967295
 8012270:	601a      	str	r2, [r3, #0]
					break;
 8012272:	e03e      	b.n	80122f2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012274:	4b30      	ldr	r3, [pc, #192]	; (8012338 <xTaskIncrementTick+0x158>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012284:	693a      	ldr	r2, [r7, #16]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	429a      	cmp	r2, r3
 801228a:	d203      	bcs.n	8012294 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801228c:	4a2d      	ldr	r2, [pc, #180]	; (8012344 <xTaskIncrementTick+0x164>)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6013      	str	r3, [r2, #0]
						break;
 8012292:	e02e      	b.n	80122f2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	3304      	adds	r3, #4
 8012298:	4618      	mov	r0, r3
 801229a:	f7fe fd23 	bl	8010ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d004      	beq.n	80122b0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	3318      	adds	r3, #24
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fe fd1a 	bl	8010ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b4:	2201      	movs	r2, #1
 80122b6:	409a      	lsls	r2, r3
 80122b8:	4b23      	ldr	r3, [pc, #140]	; (8012348 <xTaskIncrementTick+0x168>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	4313      	orrs	r3, r2
 80122be:	4a22      	ldr	r2, [pc, #136]	; (8012348 <xTaskIncrementTick+0x168>)
 80122c0:	6013      	str	r3, [r2, #0]
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122c6:	4613      	mov	r3, r2
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	4413      	add	r3, r2
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4a1f      	ldr	r2, [pc, #124]	; (801234c <xTaskIncrementTick+0x16c>)
 80122d0:	441a      	add	r2, r3
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	3304      	adds	r3, #4
 80122d6:	4619      	mov	r1, r3
 80122d8:	4610      	mov	r0, r2
 80122da:	f7fe fca6 	bl	8010c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122e2:	4b1b      	ldr	r3, [pc, #108]	; (8012350 <xTaskIncrementTick+0x170>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d3b4      	bcc.n	8012256 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80122ec:	2301      	movs	r3, #1
 80122ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80122f0:	e7b1      	b.n	8012256 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80122f2:	4b17      	ldr	r3, [pc, #92]	; (8012350 <xTaskIncrementTick+0x170>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122f8:	4914      	ldr	r1, [pc, #80]	; (801234c <xTaskIncrementTick+0x16c>)
 80122fa:	4613      	mov	r3, r2
 80122fc:	009b      	lsls	r3, r3, #2
 80122fe:	4413      	add	r3, r2
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	440b      	add	r3, r1
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	2b01      	cmp	r3, #1
 8012308:	d907      	bls.n	801231a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801230a:	2301      	movs	r3, #1
 801230c:	617b      	str	r3, [r7, #20]
 801230e:	e004      	b.n	801231a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012310:	4b10      	ldr	r3, [pc, #64]	; (8012354 <xTaskIncrementTick+0x174>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	4a0f      	ldr	r2, [pc, #60]	; (8012354 <xTaskIncrementTick+0x174>)
 8012318:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801231a:	4b0f      	ldr	r3, [pc, #60]	; (8012358 <xTaskIncrementTick+0x178>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8012322:	2301      	movs	r3, #1
 8012324:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012326:	697b      	ldr	r3, [r7, #20]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3718      	adds	r7, #24
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	20001ca4 	.word	0x20001ca4
 8012334:	20001c80 	.word	0x20001c80
 8012338:	20001c34 	.word	0x20001c34
 801233c:	20001c38 	.word	0x20001c38
 8012340:	20001c94 	.word	0x20001c94
 8012344:	20001c9c 	.word	0x20001c9c
 8012348:	20001c84 	.word	0x20001c84
 801234c:	20001b80 	.word	0x20001b80
 8012350:	20001b7c 	.word	0x20001b7c
 8012354:	20001c8c 	.word	0x20001c8c
 8012358:	20001c90 	.word	0x20001c90

0801235c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801235c:	b480      	push	{r7}
 801235e:	b087      	sub	sp, #28
 8012360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012362:	4b27      	ldr	r3, [pc, #156]	; (8012400 <vTaskSwitchContext+0xa4>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d003      	beq.n	8012372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801236a:	4b26      	ldr	r3, [pc, #152]	; (8012404 <vTaskSwitchContext+0xa8>)
 801236c:	2201      	movs	r2, #1
 801236e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012370:	e040      	b.n	80123f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012372:	4b24      	ldr	r3, [pc, #144]	; (8012404 <vTaskSwitchContext+0xa8>)
 8012374:	2200      	movs	r2, #0
 8012376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012378:	4b23      	ldr	r3, [pc, #140]	; (8012408 <vTaskSwitchContext+0xac>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	fab3 f383 	clz	r3, r3
 8012384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012386:	7afb      	ldrb	r3, [r7, #11]
 8012388:	f1c3 031f 	rsb	r3, r3, #31
 801238c:	617b      	str	r3, [r7, #20]
 801238e:	491f      	ldr	r1, [pc, #124]	; (801240c <vTaskSwitchContext+0xb0>)
 8012390:	697a      	ldr	r2, [r7, #20]
 8012392:	4613      	mov	r3, r2
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	4413      	add	r3, r2
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	440b      	add	r3, r1
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d10b      	bne.n	80123ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80123a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a6:	b672      	cpsid	i
 80123a8:	f383 8811 	msr	BASEPRI, r3
 80123ac:	f3bf 8f6f 	isb	sy
 80123b0:	f3bf 8f4f 	dsb	sy
 80123b4:	b662      	cpsie	i
 80123b6:	607b      	str	r3, [r7, #4]
 80123b8:	e7fe      	b.n	80123b8 <vTaskSwitchContext+0x5c>
 80123ba:	697a      	ldr	r2, [r7, #20]
 80123bc:	4613      	mov	r3, r2
 80123be:	009b      	lsls	r3, r3, #2
 80123c0:	4413      	add	r3, r2
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	4a11      	ldr	r2, [pc, #68]	; (801240c <vTaskSwitchContext+0xb0>)
 80123c6:	4413      	add	r3, r2
 80123c8:	613b      	str	r3, [r7, #16]
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	685a      	ldr	r2, [r3, #4]
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	605a      	str	r2, [r3, #4]
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	685a      	ldr	r2, [r3, #4]
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	3308      	adds	r3, #8
 80123dc:	429a      	cmp	r2, r3
 80123de:	d104      	bne.n	80123ea <vTaskSwitchContext+0x8e>
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	685a      	ldr	r2, [r3, #4]
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	605a      	str	r2, [r3, #4]
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	4a07      	ldr	r2, [pc, #28]	; (8012410 <vTaskSwitchContext+0xb4>)
 80123f2:	6013      	str	r3, [r2, #0]
}
 80123f4:	bf00      	nop
 80123f6:	371c      	adds	r7, #28
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr
 8012400:	20001ca4 	.word	0x20001ca4
 8012404:	20001c90 	.word	0x20001c90
 8012408:	20001c84 	.word	0x20001c84
 801240c:	20001b80 	.word	0x20001b80
 8012410:	20001b7c 	.word	0x20001b7c

08012414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d10b      	bne.n	801243c <vTaskPlaceOnEventList+0x28>
 8012424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012428:	b672      	cpsid	i
 801242a:	f383 8811 	msr	BASEPRI, r3
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	b662      	cpsie	i
 8012438:	60fb      	str	r3, [r7, #12]
 801243a:	e7fe      	b.n	801243a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801243c:	4b07      	ldr	r3, [pc, #28]	; (801245c <vTaskPlaceOnEventList+0x48>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	3318      	adds	r3, #24
 8012442:	4619      	mov	r1, r3
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7fe fc14 	bl	8010c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801244a:	2101      	movs	r1, #1
 801244c:	6838      	ldr	r0, [r7, #0]
 801244e:	f000 fbbd 	bl	8012bcc <prvAddCurrentTaskToDelayedList>
}
 8012452:	bf00      	nop
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	20001b7c 	.word	0x20001b7c

08012460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b086      	sub	sp, #24
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d10b      	bne.n	801248e <xTaskRemoveFromEventList+0x2e>
 8012476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801247a:	b672      	cpsid	i
 801247c:	f383 8811 	msr	BASEPRI, r3
 8012480:	f3bf 8f6f 	isb	sy
 8012484:	f3bf 8f4f 	dsb	sy
 8012488:	b662      	cpsie	i
 801248a:	60fb      	str	r3, [r7, #12]
 801248c:	e7fe      	b.n	801248c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	3318      	adds	r3, #24
 8012492:	4618      	mov	r0, r3
 8012494:	f7fe fc26 	bl	8010ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012498:	4b1d      	ldr	r3, [pc, #116]	; (8012510 <xTaskRemoveFromEventList+0xb0>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d11c      	bne.n	80124da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	3304      	adds	r3, #4
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fe fc1d 	bl	8010ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ae:	2201      	movs	r2, #1
 80124b0:	409a      	lsls	r2, r3
 80124b2:	4b18      	ldr	r3, [pc, #96]	; (8012514 <xTaskRemoveFromEventList+0xb4>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	4313      	orrs	r3, r2
 80124b8:	4a16      	ldr	r2, [pc, #88]	; (8012514 <xTaskRemoveFromEventList+0xb4>)
 80124ba:	6013      	str	r3, [r2, #0]
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124c0:	4613      	mov	r3, r2
 80124c2:	009b      	lsls	r3, r3, #2
 80124c4:	4413      	add	r3, r2
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	4a13      	ldr	r2, [pc, #76]	; (8012518 <xTaskRemoveFromEventList+0xb8>)
 80124ca:	441a      	add	r2, r3
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	3304      	adds	r3, #4
 80124d0:	4619      	mov	r1, r3
 80124d2:	4610      	mov	r0, r2
 80124d4:	f7fe fba9 	bl	8010c2a <vListInsertEnd>
 80124d8:	e005      	b.n	80124e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	3318      	adds	r3, #24
 80124de:	4619      	mov	r1, r3
 80124e0:	480e      	ldr	r0, [pc, #56]	; (801251c <xTaskRemoveFromEventList+0xbc>)
 80124e2:	f7fe fba2 	bl	8010c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ea:	4b0d      	ldr	r3, [pc, #52]	; (8012520 <xTaskRemoveFromEventList+0xc0>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d905      	bls.n	8012500 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80124f4:	2301      	movs	r3, #1
 80124f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80124f8:	4b0a      	ldr	r3, [pc, #40]	; (8012524 <xTaskRemoveFromEventList+0xc4>)
 80124fa:	2201      	movs	r2, #1
 80124fc:	601a      	str	r2, [r3, #0]
 80124fe:	e001      	b.n	8012504 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012500:	2300      	movs	r3, #0
 8012502:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012504:	697b      	ldr	r3, [r7, #20]
}
 8012506:	4618      	mov	r0, r3
 8012508:	3718      	adds	r7, #24
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	20001ca4 	.word	0x20001ca4
 8012514:	20001c84 	.word	0x20001c84
 8012518:	20001b80 	.word	0x20001b80
 801251c:	20001c3c 	.word	0x20001c3c
 8012520:	20001b7c 	.word	0x20001b7c
 8012524:	20001c90 	.word	0x20001c90

08012528 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012530:	4b06      	ldr	r3, [pc, #24]	; (801254c <vTaskInternalSetTimeOutState+0x24>)
 8012532:	681a      	ldr	r2, [r3, #0]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012538:	4b05      	ldr	r3, [pc, #20]	; (8012550 <vTaskInternalSetTimeOutState+0x28>)
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	605a      	str	r2, [r3, #4]
}
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr
 801254c:	20001c94 	.word	0x20001c94
 8012550:	20001c80 	.word	0x20001c80

08012554 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b088      	sub	sp, #32
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d10b      	bne.n	801257c <xTaskCheckForTimeOut+0x28>
 8012564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012568:	b672      	cpsid	i
 801256a:	f383 8811 	msr	BASEPRI, r3
 801256e:	f3bf 8f6f 	isb	sy
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	b662      	cpsie	i
 8012578:	613b      	str	r3, [r7, #16]
 801257a:	e7fe      	b.n	801257a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10b      	bne.n	801259a <xTaskCheckForTimeOut+0x46>
 8012582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012586:	b672      	cpsid	i
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	b662      	cpsie	i
 8012596:	60fb      	str	r3, [r7, #12]
 8012598:	e7fe      	b.n	8012598 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801259a:	f000 fc85 	bl	8012ea8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801259e:	4b1d      	ldr	r3, [pc, #116]	; (8012614 <xTaskCheckForTimeOut+0xc0>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	69ba      	ldr	r2, [r7, #24]
 80125aa:	1ad3      	subs	r3, r2, r3
 80125ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b6:	d102      	bne.n	80125be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80125b8:	2300      	movs	r3, #0
 80125ba:	61fb      	str	r3, [r7, #28]
 80125bc:	e023      	b.n	8012606 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681a      	ldr	r2, [r3, #0]
 80125c2:	4b15      	ldr	r3, [pc, #84]	; (8012618 <xTaskCheckForTimeOut+0xc4>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d007      	beq.n	80125da <xTaskCheckForTimeOut+0x86>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	69ba      	ldr	r2, [r7, #24]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d302      	bcc.n	80125da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80125d4:	2301      	movs	r3, #1
 80125d6:	61fb      	str	r3, [r7, #28]
 80125d8:	e015      	b.n	8012606 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d20b      	bcs.n	80125fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	1ad2      	subs	r2, r2, r3
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f7ff ff99 	bl	8012528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80125f6:	2300      	movs	r3, #0
 80125f8:	61fb      	str	r3, [r7, #28]
 80125fa:	e004      	b.n	8012606 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	2200      	movs	r2, #0
 8012600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012602:	2301      	movs	r3, #1
 8012604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012606:	f000 fc81 	bl	8012f0c <vPortExitCritical>

	return xReturn;
 801260a:	69fb      	ldr	r3, [r7, #28]
}
 801260c:	4618      	mov	r0, r3
 801260e:	3720      	adds	r7, #32
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	20001c80 	.word	0x20001c80
 8012618:	20001c94 	.word	0x20001c94

0801261c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801261c:	b480      	push	{r7}
 801261e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012620:	4b03      	ldr	r3, [pc, #12]	; (8012630 <vTaskMissedYield+0x14>)
 8012622:	2201      	movs	r2, #1
 8012624:	601a      	str	r2, [r3, #0]
}
 8012626:	bf00      	nop
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr
 8012630:	20001c90 	.word	0x20001c90

08012634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801263c:	f000 f852 	bl	80126e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012640:	4b06      	ldr	r3, [pc, #24]	; (801265c <prvIdleTask+0x28>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d9f9      	bls.n	801263c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012648:	4b05      	ldr	r3, [pc, #20]	; (8012660 <prvIdleTask+0x2c>)
 801264a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012658:	e7f0      	b.n	801263c <prvIdleTask+0x8>
 801265a:	bf00      	nop
 801265c:	20001b80 	.word	0x20001b80
 8012660:	e000ed04 	.word	0xe000ed04

08012664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801266a:	2300      	movs	r3, #0
 801266c:	607b      	str	r3, [r7, #4]
 801266e:	e00c      	b.n	801268a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	4613      	mov	r3, r2
 8012674:	009b      	lsls	r3, r3, #2
 8012676:	4413      	add	r3, r2
 8012678:	009b      	lsls	r3, r3, #2
 801267a:	4a12      	ldr	r2, [pc, #72]	; (80126c4 <prvInitialiseTaskLists+0x60>)
 801267c:	4413      	add	r3, r2
 801267e:	4618      	mov	r0, r3
 8012680:	f7fe faa6 	bl	8010bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	3301      	adds	r3, #1
 8012688:	607b      	str	r3, [r7, #4]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2b06      	cmp	r3, #6
 801268e:	d9ef      	bls.n	8012670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012690:	480d      	ldr	r0, [pc, #52]	; (80126c8 <prvInitialiseTaskLists+0x64>)
 8012692:	f7fe fa9d 	bl	8010bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012696:	480d      	ldr	r0, [pc, #52]	; (80126cc <prvInitialiseTaskLists+0x68>)
 8012698:	f7fe fa9a 	bl	8010bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801269c:	480c      	ldr	r0, [pc, #48]	; (80126d0 <prvInitialiseTaskLists+0x6c>)
 801269e:	f7fe fa97 	bl	8010bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80126a2:	480c      	ldr	r0, [pc, #48]	; (80126d4 <prvInitialiseTaskLists+0x70>)
 80126a4:	f7fe fa94 	bl	8010bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80126a8:	480b      	ldr	r0, [pc, #44]	; (80126d8 <prvInitialiseTaskLists+0x74>)
 80126aa:	f7fe fa91 	bl	8010bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80126ae:	4b0b      	ldr	r3, [pc, #44]	; (80126dc <prvInitialiseTaskLists+0x78>)
 80126b0:	4a05      	ldr	r2, [pc, #20]	; (80126c8 <prvInitialiseTaskLists+0x64>)
 80126b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80126b4:	4b0a      	ldr	r3, [pc, #40]	; (80126e0 <prvInitialiseTaskLists+0x7c>)
 80126b6:	4a05      	ldr	r2, [pc, #20]	; (80126cc <prvInitialiseTaskLists+0x68>)
 80126b8:	601a      	str	r2, [r3, #0]
}
 80126ba:	bf00      	nop
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	20001b80 	.word	0x20001b80
 80126c8:	20001c0c 	.word	0x20001c0c
 80126cc:	20001c20 	.word	0x20001c20
 80126d0:	20001c3c 	.word	0x20001c3c
 80126d4:	20001c50 	.word	0x20001c50
 80126d8:	20001c68 	.word	0x20001c68
 80126dc:	20001c34 	.word	0x20001c34
 80126e0:	20001c38 	.word	0x20001c38

080126e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126ea:	e019      	b.n	8012720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80126ec:	f000 fbdc 	bl	8012ea8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80126f0:	4b0f      	ldr	r3, [pc, #60]	; (8012730 <prvCheckTasksWaitingTermination+0x4c>)
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3304      	adds	r3, #4
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7fe faf1 	bl	8010ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012702:	4b0c      	ldr	r3, [pc, #48]	; (8012734 <prvCheckTasksWaitingTermination+0x50>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	3b01      	subs	r3, #1
 8012708:	4a0a      	ldr	r2, [pc, #40]	; (8012734 <prvCheckTasksWaitingTermination+0x50>)
 801270a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801270c:	4b0a      	ldr	r3, [pc, #40]	; (8012738 <prvCheckTasksWaitingTermination+0x54>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	3b01      	subs	r3, #1
 8012712:	4a09      	ldr	r2, [pc, #36]	; (8012738 <prvCheckTasksWaitingTermination+0x54>)
 8012714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012716:	f000 fbf9 	bl	8012f0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 f80e 	bl	801273c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012720:	4b05      	ldr	r3, [pc, #20]	; (8012738 <prvCheckTasksWaitingTermination+0x54>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1e1      	bne.n	80126ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012728:	bf00      	nop
 801272a:	3708      	adds	r7, #8
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	20001c50 	.word	0x20001c50
 8012734:	20001c7c 	.word	0x20001c7c
 8012738:	20001c64 	.word	0x20001c64

0801273c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801274a:	2b00      	cmp	r3, #0
 801274c:	d108      	bne.n	8012760 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012752:	4618      	mov	r0, r3
 8012754:	f000 fd92 	bl	801327c <vPortFree>
				vPortFree( pxTCB );
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 fd8f 	bl	801327c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801275e:	e019      	b.n	8012794 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012766:	2b01      	cmp	r3, #1
 8012768:	d103      	bne.n	8012772 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 fd86 	bl	801327c <vPortFree>
	}
 8012770:	e010      	b.n	8012794 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012778:	2b02      	cmp	r3, #2
 801277a:	d00b      	beq.n	8012794 <prvDeleteTCB+0x58>
 801277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012780:	b672      	cpsid	i
 8012782:	f383 8811 	msr	BASEPRI, r3
 8012786:	f3bf 8f6f 	isb	sy
 801278a:	f3bf 8f4f 	dsb	sy
 801278e:	b662      	cpsie	i
 8012790:	60fb      	str	r3, [r7, #12]
 8012792:	e7fe      	b.n	8012792 <prvDeleteTCB+0x56>
	}
 8012794:	bf00      	nop
 8012796:	3710      	adds	r7, #16
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80127a2:	4b0f      	ldr	r3, [pc, #60]	; (80127e0 <prvResetNextTaskUnblockTime+0x44>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d101      	bne.n	80127b0 <prvResetNextTaskUnblockTime+0x14>
 80127ac:	2301      	movs	r3, #1
 80127ae:	e000      	b.n	80127b2 <prvResetNextTaskUnblockTime+0x16>
 80127b0:	2300      	movs	r3, #0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d004      	beq.n	80127c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80127b6:	4b0b      	ldr	r3, [pc, #44]	; (80127e4 <prvResetNextTaskUnblockTime+0x48>)
 80127b8:	f04f 32ff 	mov.w	r2, #4294967295
 80127bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80127be:	e008      	b.n	80127d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80127c0:	4b07      	ldr	r3, [pc, #28]	; (80127e0 <prvResetNextTaskUnblockTime+0x44>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	685b      	ldr	r3, [r3, #4]
 80127ce:	4a05      	ldr	r2, [pc, #20]	; (80127e4 <prvResetNextTaskUnblockTime+0x48>)
 80127d0:	6013      	str	r3, [r2, #0]
}
 80127d2:	bf00      	nop
 80127d4:	370c      	adds	r7, #12
 80127d6:	46bd      	mov	sp, r7
 80127d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop
 80127e0:	20001c34 	.word	0x20001c34
 80127e4:	20001c9c 	.word	0x20001c9c

080127e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80127ee:	4b05      	ldr	r3, [pc, #20]	; (8012804 <xTaskGetCurrentTaskHandle+0x1c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80127f4:	687b      	ldr	r3, [r7, #4]
	}
 80127f6:	4618      	mov	r0, r3
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	20001b7c 	.word	0x20001b7c

08012808 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801280e:	4b0b      	ldr	r3, [pc, #44]	; (801283c <xTaskGetSchedulerState+0x34>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d102      	bne.n	801281c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012816:	2301      	movs	r3, #1
 8012818:	607b      	str	r3, [r7, #4]
 801281a:	e008      	b.n	801282e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801281c:	4b08      	ldr	r3, [pc, #32]	; (8012840 <xTaskGetSchedulerState+0x38>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d102      	bne.n	801282a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012824:	2302      	movs	r3, #2
 8012826:	607b      	str	r3, [r7, #4]
 8012828:	e001      	b.n	801282e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801282a:	2300      	movs	r3, #0
 801282c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801282e:	687b      	ldr	r3, [r7, #4]
	}
 8012830:	4618      	mov	r0, r3
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr
 801283c:	20001c88 	.word	0x20001c88
 8012840:	20001ca4 	.word	0x20001ca4

08012844 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012850:	2300      	movs	r3, #0
 8012852:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d06e      	beq.n	8012938 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801285e:	4b39      	ldr	r3, [pc, #228]	; (8012944 <xTaskPriorityInherit+0x100>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012864:	429a      	cmp	r2, r3
 8012866:	d25e      	bcs.n	8012926 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	699b      	ldr	r3, [r3, #24]
 801286c:	2b00      	cmp	r3, #0
 801286e:	db06      	blt.n	801287e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012870:	4b34      	ldr	r3, [pc, #208]	; (8012944 <xTaskPriorityInherit+0x100>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012876:	f1c3 0207 	rsb	r2, r3, #7
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	6959      	ldr	r1, [r3, #20]
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012886:	4613      	mov	r3, r2
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	4413      	add	r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	4a2e      	ldr	r2, [pc, #184]	; (8012948 <xTaskPriorityInherit+0x104>)
 8012890:	4413      	add	r3, r2
 8012892:	4299      	cmp	r1, r3
 8012894:	d101      	bne.n	801289a <xTaskPriorityInherit+0x56>
 8012896:	2301      	movs	r3, #1
 8012898:	e000      	b.n	801289c <xTaskPriorityInherit+0x58>
 801289a:	2300      	movs	r3, #0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d03a      	beq.n	8012916 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	3304      	adds	r3, #4
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fe fa1d 	bl	8010ce4 <uxListRemove>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d115      	bne.n	80128dc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128b4:	4924      	ldr	r1, [pc, #144]	; (8012948 <xTaskPriorityInherit+0x104>)
 80128b6:	4613      	mov	r3, r2
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	4413      	add	r3, r2
 80128bc:	009b      	lsls	r3, r3, #2
 80128be:	440b      	add	r3, r1
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d10a      	bne.n	80128dc <xTaskPriorityInherit+0x98>
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ca:	2201      	movs	r2, #1
 80128cc:	fa02 f303 	lsl.w	r3, r2, r3
 80128d0:	43da      	mvns	r2, r3
 80128d2:	4b1e      	ldr	r3, [pc, #120]	; (801294c <xTaskPriorityInherit+0x108>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	4013      	ands	r3, r2
 80128d8:	4a1c      	ldr	r2, [pc, #112]	; (801294c <xTaskPriorityInherit+0x108>)
 80128da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80128dc:	4b19      	ldr	r3, [pc, #100]	; (8012944 <xTaskPriorityInherit+0x100>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ea:	2201      	movs	r2, #1
 80128ec:	409a      	lsls	r2, r3
 80128ee:	4b17      	ldr	r3, [pc, #92]	; (801294c <xTaskPriorityInherit+0x108>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	4313      	orrs	r3, r2
 80128f4:	4a15      	ldr	r2, [pc, #84]	; (801294c <xTaskPriorityInherit+0x108>)
 80128f6:	6013      	str	r3, [r2, #0]
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128fc:	4613      	mov	r3, r2
 80128fe:	009b      	lsls	r3, r3, #2
 8012900:	4413      	add	r3, r2
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	4a10      	ldr	r2, [pc, #64]	; (8012948 <xTaskPriorityInherit+0x104>)
 8012906:	441a      	add	r2, r3
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	3304      	adds	r3, #4
 801290c:	4619      	mov	r1, r3
 801290e:	4610      	mov	r0, r2
 8012910:	f7fe f98b 	bl	8010c2a <vListInsertEnd>
 8012914:	e004      	b.n	8012920 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012916:	4b0b      	ldr	r3, [pc, #44]	; (8012944 <xTaskPriorityInherit+0x100>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012920:	2301      	movs	r3, #1
 8012922:	60fb      	str	r3, [r7, #12]
 8012924:	e008      	b.n	8012938 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801292a:	4b06      	ldr	r3, [pc, #24]	; (8012944 <xTaskPriorityInherit+0x100>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012930:	429a      	cmp	r2, r3
 8012932:	d201      	bcs.n	8012938 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012934:	2301      	movs	r3, #1
 8012936:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012938:	68fb      	ldr	r3, [r7, #12]
	}
 801293a:	4618      	mov	r0, r3
 801293c:	3710      	adds	r7, #16
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	20001b7c 	.word	0x20001b7c
 8012948:	20001b80 	.word	0x20001b80
 801294c:	20001c84 	.word	0x20001c84

08012950 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801295c:	2300      	movs	r3, #0
 801295e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d070      	beq.n	8012a48 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012966:	4b3b      	ldr	r3, [pc, #236]	; (8012a54 <xTaskPriorityDisinherit+0x104>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	693a      	ldr	r2, [r7, #16]
 801296c:	429a      	cmp	r2, r3
 801296e:	d00b      	beq.n	8012988 <xTaskPriorityDisinherit+0x38>
 8012970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012974:	b672      	cpsid	i
 8012976:	f383 8811 	msr	BASEPRI, r3
 801297a:	f3bf 8f6f 	isb	sy
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	b662      	cpsie	i
 8012984:	60fb      	str	r3, [r7, #12]
 8012986:	e7fe      	b.n	8012986 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801298c:	2b00      	cmp	r3, #0
 801298e:	d10b      	bne.n	80129a8 <xTaskPriorityDisinherit+0x58>
 8012990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012994:	b672      	cpsid	i
 8012996:	f383 8811 	msr	BASEPRI, r3
 801299a:	f3bf 8f6f 	isb	sy
 801299e:	f3bf 8f4f 	dsb	sy
 80129a2:	b662      	cpsie	i
 80129a4:	60bb      	str	r3, [r7, #8]
 80129a6:	e7fe      	b.n	80129a6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129ac:	1e5a      	subs	r2, r3, #1
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d044      	beq.n	8012a48 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d140      	bne.n	8012a48 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	3304      	adds	r3, #4
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fe f98a 	bl	8010ce4 <uxListRemove>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d115      	bne.n	8012a02 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129da:	491f      	ldr	r1, [pc, #124]	; (8012a58 <xTaskPriorityDisinherit+0x108>)
 80129dc:	4613      	mov	r3, r2
 80129de:	009b      	lsls	r3, r3, #2
 80129e0:	4413      	add	r3, r2
 80129e2:	009b      	lsls	r3, r3, #2
 80129e4:	440b      	add	r3, r1
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d10a      	bne.n	8012a02 <xTaskPriorityDisinherit+0xb2>
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f0:	2201      	movs	r2, #1
 80129f2:	fa02 f303 	lsl.w	r3, r2, r3
 80129f6:	43da      	mvns	r2, r3
 80129f8:	4b18      	ldr	r3, [pc, #96]	; (8012a5c <xTaskPriorityDisinherit+0x10c>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	4013      	ands	r3, r2
 80129fe:	4a17      	ldr	r2, [pc, #92]	; (8012a5c <xTaskPriorityDisinherit+0x10c>)
 8012a00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a0e:	f1c3 0207 	rsb	r2, r3, #7
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	409a      	lsls	r2, r3
 8012a1e:	4b0f      	ldr	r3, [pc, #60]	; (8012a5c <xTaskPriorityDisinherit+0x10c>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4313      	orrs	r3, r2
 8012a24:	4a0d      	ldr	r2, [pc, #52]	; (8012a5c <xTaskPriorityDisinherit+0x10c>)
 8012a26:	6013      	str	r3, [r2, #0]
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a2c:	4613      	mov	r3, r2
 8012a2e:	009b      	lsls	r3, r3, #2
 8012a30:	4413      	add	r3, r2
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	4a08      	ldr	r2, [pc, #32]	; (8012a58 <xTaskPriorityDisinherit+0x108>)
 8012a36:	441a      	add	r2, r3
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	3304      	adds	r3, #4
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4610      	mov	r0, r2
 8012a40:	f7fe f8f3 	bl	8010c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012a44:	2301      	movs	r3, #1
 8012a46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a48:	697b      	ldr	r3, [r7, #20]
	}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3718      	adds	r7, #24
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	20001b7c 	.word	0x20001b7c
 8012a58:	20001b80 	.word	0x20001b80
 8012a5c:	20001c84 	.word	0x20001c84

08012a60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b088      	sub	sp, #32
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	f000 808a 	beq.w	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d10b      	bne.n	8012a9a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8012a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a86:	b672      	cpsid	i
 8012a88:	f383 8811 	msr	BASEPRI, r3
 8012a8c:	f3bf 8f6f 	isb	sy
 8012a90:	f3bf 8f4f 	dsb	sy
 8012a94:	b662      	cpsie	i
 8012a96:	60fb      	str	r3, [r7, #12]
 8012a98:	e7fe      	b.n	8012a98 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a9e:	683a      	ldr	r2, [r7, #0]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d902      	bls.n	8012aaa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	61fb      	str	r3, [r7, #28]
 8012aa8:	e002      	b.n	8012ab0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012aaa:	69bb      	ldr	r3, [r7, #24]
 8012aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012ab0:	69bb      	ldr	r3, [r7, #24]
 8012ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab4:	69fa      	ldr	r2, [r7, #28]
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d069      	beq.n	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012aba:	69bb      	ldr	r3, [r7, #24]
 8012abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012abe:	697a      	ldr	r2, [r7, #20]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d164      	bne.n	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012ac4:	4b34      	ldr	r3, [pc, #208]	; (8012b98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	69ba      	ldr	r2, [r7, #24]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d10b      	bne.n	8012ae6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8012ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad2:	b672      	cpsid	i
 8012ad4:	f383 8811 	msr	BASEPRI, r3
 8012ad8:	f3bf 8f6f 	isb	sy
 8012adc:	f3bf 8f4f 	dsb	sy
 8012ae0:	b662      	cpsie	i
 8012ae2:	60bb      	str	r3, [r7, #8]
 8012ae4:	e7fe      	b.n	8012ae4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012ae6:	69bb      	ldr	r3, [r7, #24]
 8012ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	69fa      	ldr	r2, [r7, #28]
 8012af0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	699b      	ldr	r3, [r3, #24]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	db04      	blt.n	8012b04 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	f1c3 0207 	rsb	r2, r3, #7
 8012b00:	69bb      	ldr	r3, [r7, #24]
 8012b02:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	6959      	ldr	r1, [r3, #20]
 8012b08:	693a      	ldr	r2, [r7, #16]
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	009b      	lsls	r3, r3, #2
 8012b0e:	4413      	add	r3, r2
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	4a22      	ldr	r2, [pc, #136]	; (8012b9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012b14:	4413      	add	r3, r2
 8012b16:	4299      	cmp	r1, r3
 8012b18:	d101      	bne.n	8012b1e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e000      	b.n	8012b20 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d034      	beq.n	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	3304      	adds	r3, #4
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fe f8db 	bl	8010ce4 <uxListRemove>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d115      	bne.n	8012b60 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b38:	4918      	ldr	r1, [pc, #96]	; (8012b9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012b3a:	4613      	mov	r3, r2
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	4413      	add	r3, r2
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	440b      	add	r3, r1
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d10a      	bne.n	8012b60 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4e:	2201      	movs	r2, #1
 8012b50:	fa02 f303 	lsl.w	r3, r2, r3
 8012b54:	43da      	mvns	r2, r3
 8012b56:	4b12      	ldr	r3, [pc, #72]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	4a10      	ldr	r2, [pc, #64]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012b5e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b64:	2201      	movs	r2, #1
 8012b66:	409a      	lsls	r2, r3
 8012b68:	4b0d      	ldr	r3, [pc, #52]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	4a0c      	ldr	r2, [pc, #48]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012b70:	6013      	str	r3, [r2, #0]
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b76:	4613      	mov	r3, r2
 8012b78:	009b      	lsls	r3, r3, #2
 8012b7a:	4413      	add	r3, r2
 8012b7c:	009b      	lsls	r3, r3, #2
 8012b7e:	4a07      	ldr	r2, [pc, #28]	; (8012b9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012b80:	441a      	add	r2, r3
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	3304      	adds	r3, #4
 8012b86:	4619      	mov	r1, r3
 8012b88:	4610      	mov	r0, r2
 8012b8a:	f7fe f84e 	bl	8010c2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b8e:	bf00      	nop
 8012b90:	3720      	adds	r7, #32
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	20001b7c 	.word	0x20001b7c
 8012b9c:	20001b80 	.word	0x20001b80
 8012ba0:	20001c84 	.word	0x20001c84

08012ba4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012ba4:	b480      	push	{r7}
 8012ba6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012ba8:	4b07      	ldr	r3, [pc, #28]	; (8012bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d004      	beq.n	8012bba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012bb0:	4b05      	ldr	r3, [pc, #20]	; (8012bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012bb6:	3201      	adds	r2, #1
 8012bb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012bba:	4b03      	ldr	r3, [pc, #12]	; (8012bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
	}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr
 8012bc8:	20001b7c 	.word	0x20001b7c

08012bcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012bd6:	4b29      	ldr	r3, [pc, #164]	; (8012c7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bdc:	4b28      	ldr	r3, [pc, #160]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	3304      	adds	r3, #4
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fe f87e 	bl	8010ce4 <uxListRemove>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d10b      	bne.n	8012c06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8012bee:	4b24      	ldr	r3, [pc, #144]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8012bfa:	43da      	mvns	r2, r3
 8012bfc:	4b21      	ldr	r3, [pc, #132]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4013      	ands	r3, r2
 8012c02:	4a20      	ldr	r2, [pc, #128]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012c04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0c:	d10a      	bne.n	8012c24 <prvAddCurrentTaskToDelayedList+0x58>
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d007      	beq.n	8012c24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c14:	4b1a      	ldr	r3, [pc, #104]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	3304      	adds	r3, #4
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	481a      	ldr	r0, [pc, #104]	; (8012c88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012c1e:	f7fe f804 	bl	8010c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c22:	e026      	b.n	8012c72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c24:	68fa      	ldr	r2, [r7, #12]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	4413      	add	r3, r2
 8012c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c2c:	4b14      	ldr	r3, [pc, #80]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	68ba      	ldr	r2, [r7, #8]
 8012c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d209      	bcs.n	8012c50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c3c:	4b13      	ldr	r3, [pc, #76]	; (8012c8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	4b0f      	ldr	r3, [pc, #60]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	3304      	adds	r3, #4
 8012c46:	4619      	mov	r1, r3
 8012c48:	4610      	mov	r0, r2
 8012c4a:	f7fe f812 	bl	8010c72 <vListInsert>
}
 8012c4e:	e010      	b.n	8012c72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c50:	4b0f      	ldr	r3, [pc, #60]	; (8012c90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	4b0a      	ldr	r3, [pc, #40]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	3304      	adds	r3, #4
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	f7fe f808 	bl	8010c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c62:	4b0c      	ldr	r3, [pc, #48]	; (8012c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	68ba      	ldr	r2, [r7, #8]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d202      	bcs.n	8012c72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012c6c:	4a09      	ldr	r2, [pc, #36]	; (8012c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	6013      	str	r3, [r2, #0]
}
 8012c72:	bf00      	nop
 8012c74:	3710      	adds	r7, #16
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	20001c80 	.word	0x20001c80
 8012c80:	20001b7c 	.word	0x20001b7c
 8012c84:	20001c84 	.word	0x20001c84
 8012c88:	20001c68 	.word	0x20001c68
 8012c8c:	20001c38 	.word	0x20001c38
 8012c90:	20001c34 	.word	0x20001c34
 8012c94:	20001c9c 	.word	0x20001c9c

08012c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b085      	sub	sp, #20
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	60b9      	str	r1, [r7, #8]
 8012ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	3b04      	subs	r3, #4
 8012ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	3b04      	subs	r3, #4
 8012cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	f023 0201 	bic.w	r2, r3, #1
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	3b04      	subs	r3, #4
 8012cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012cc8:	4a0c      	ldr	r2, [pc, #48]	; (8012cfc <pxPortInitialiseStack+0x64>)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	3b14      	subs	r3, #20
 8012cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	3b04      	subs	r3, #4
 8012cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f06f 0202 	mvn.w	r2, #2
 8012ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	3b20      	subs	r3, #32
 8012cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012cee:	68fb      	ldr	r3, [r7, #12]
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3714      	adds	r7, #20
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr
 8012cfc:	08012d01 	.word	0x08012d01

08012d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012d00:	b480      	push	{r7}
 8012d02:	b085      	sub	sp, #20
 8012d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012d06:	2300      	movs	r3, #0
 8012d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012d0a:	4b13      	ldr	r3, [pc, #76]	; (8012d58 <prvTaskExitError+0x58>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d12:	d00b      	beq.n	8012d2c <prvTaskExitError+0x2c>
 8012d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d18:	b672      	cpsid	i
 8012d1a:	f383 8811 	msr	BASEPRI, r3
 8012d1e:	f3bf 8f6f 	isb	sy
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	b662      	cpsie	i
 8012d28:	60fb      	str	r3, [r7, #12]
 8012d2a:	e7fe      	b.n	8012d2a <prvTaskExitError+0x2a>
 8012d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d30:	b672      	cpsid	i
 8012d32:	f383 8811 	msr	BASEPRI, r3
 8012d36:	f3bf 8f6f 	isb	sy
 8012d3a:	f3bf 8f4f 	dsb	sy
 8012d3e:	b662      	cpsie	i
 8012d40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012d42:	bf00      	nop
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d0fc      	beq.n	8012d44 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012d4a:	bf00      	nop
 8012d4c:	3714      	adds	r7, #20
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop
 8012d58:	200000c0 	.word	0x200000c0
 8012d5c:	00000000 	.word	0x00000000

08012d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012d60:	4b07      	ldr	r3, [pc, #28]	; (8012d80 <pxCurrentTCBConst2>)
 8012d62:	6819      	ldr	r1, [r3, #0]
 8012d64:	6808      	ldr	r0, [r1, #0]
 8012d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6a:	f380 8809 	msr	PSP, r0
 8012d6e:	f3bf 8f6f 	isb	sy
 8012d72:	f04f 0000 	mov.w	r0, #0
 8012d76:	f380 8811 	msr	BASEPRI, r0
 8012d7a:	4770      	bx	lr
 8012d7c:	f3af 8000 	nop.w

08012d80 <pxCurrentTCBConst2>:
 8012d80:	20001b7c 	.word	0x20001b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d84:	bf00      	nop
 8012d86:	bf00      	nop

08012d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d88:	4808      	ldr	r0, [pc, #32]	; (8012dac <prvPortStartFirstTask+0x24>)
 8012d8a:	6800      	ldr	r0, [r0, #0]
 8012d8c:	6800      	ldr	r0, [r0, #0]
 8012d8e:	f380 8808 	msr	MSP, r0
 8012d92:	f04f 0000 	mov.w	r0, #0
 8012d96:	f380 8814 	msr	CONTROL, r0
 8012d9a:	b662      	cpsie	i
 8012d9c:	b661      	cpsie	f
 8012d9e:	f3bf 8f4f 	dsb	sy
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	df00      	svc	0
 8012da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012daa:	bf00      	nop
 8012dac:	e000ed08 	.word	0xe000ed08

08012db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012db6:	4b36      	ldr	r3, [pc, #216]	; (8012e90 <xPortStartScheduler+0xe0>)
 8012db8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	22ff      	movs	r2, #255	; 0xff
 8012dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012dd0:	78fb      	ldrb	r3, [r7, #3]
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012dd8:	b2da      	uxtb	r2, r3
 8012dda:	4b2e      	ldr	r3, [pc, #184]	; (8012e94 <xPortStartScheduler+0xe4>)
 8012ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012dde:	4b2e      	ldr	r3, [pc, #184]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012de0:	2207      	movs	r2, #7
 8012de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012de4:	e009      	b.n	8012dfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012de6:	4b2c      	ldr	r3, [pc, #176]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	3b01      	subs	r3, #1
 8012dec:	4a2a      	ldr	r2, [pc, #168]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012df0:	78fb      	ldrb	r3, [r7, #3]
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	005b      	lsls	r3, r3, #1
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012dfa:	78fb      	ldrb	r3, [r7, #3]
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e02:	2b80      	cmp	r3, #128	; 0x80
 8012e04:	d0ef      	beq.n	8012de6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012e06:	4b24      	ldr	r3, [pc, #144]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	f1c3 0307 	rsb	r3, r3, #7
 8012e0e:	2b04      	cmp	r3, #4
 8012e10:	d00b      	beq.n	8012e2a <xPortStartScheduler+0x7a>
 8012e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e16:	b672      	cpsid	i
 8012e18:	f383 8811 	msr	BASEPRI, r3
 8012e1c:	f3bf 8f6f 	isb	sy
 8012e20:	f3bf 8f4f 	dsb	sy
 8012e24:	b662      	cpsie	i
 8012e26:	60bb      	str	r3, [r7, #8]
 8012e28:	e7fe      	b.n	8012e28 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012e2a:	4b1b      	ldr	r3, [pc, #108]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	021b      	lsls	r3, r3, #8
 8012e30:	4a19      	ldr	r2, [pc, #100]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012e32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012e34:	4b18      	ldr	r3, [pc, #96]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012e3c:	4a16      	ldr	r2, [pc, #88]	; (8012e98 <xPortStartScheduler+0xe8>)
 8012e3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	b2da      	uxtb	r2, r3
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e48:	4b14      	ldr	r3, [pc, #80]	; (8012e9c <xPortStartScheduler+0xec>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a13      	ldr	r2, [pc, #76]	; (8012e9c <xPortStartScheduler+0xec>)
 8012e4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012e52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012e54:	4b11      	ldr	r3, [pc, #68]	; (8012e9c <xPortStartScheduler+0xec>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4a10      	ldr	r2, [pc, #64]	; (8012e9c <xPortStartScheduler+0xec>)
 8012e5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012e5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012e60:	f000 f8d4 	bl	801300c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e64:	4b0e      	ldr	r3, [pc, #56]	; (8012ea0 <xPortStartScheduler+0xf0>)
 8012e66:	2200      	movs	r2, #0
 8012e68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e6a:	f000 f8f3 	bl	8013054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e6e:	4b0d      	ldr	r3, [pc, #52]	; (8012ea4 <xPortStartScheduler+0xf4>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	4a0c      	ldr	r2, [pc, #48]	; (8012ea4 <xPortStartScheduler+0xf4>)
 8012e74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e7a:	f7ff ff85 	bl	8012d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e7e:	f7ff fa6d 	bl	801235c <vTaskSwitchContext>
	prvTaskExitError();
 8012e82:	f7ff ff3d 	bl	8012d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e86:	2300      	movs	r3, #0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3710      	adds	r7, #16
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	e000e400 	.word	0xe000e400
 8012e94:	20001ca8 	.word	0x20001ca8
 8012e98:	20001cac 	.word	0x20001cac
 8012e9c:	e000ed20 	.word	0xe000ed20
 8012ea0:	200000c0 	.word	0x200000c0
 8012ea4:	e000ef34 	.word	0xe000ef34

08012ea8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b083      	sub	sp, #12
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb2:	b672      	cpsid	i
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	b662      	cpsie	i
 8012ec2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ec4:	4b0f      	ldr	r3, [pc, #60]	; (8012f04 <vPortEnterCritical+0x5c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	4a0e      	ldr	r2, [pc, #56]	; (8012f04 <vPortEnterCritical+0x5c>)
 8012ecc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ece:	4b0d      	ldr	r3, [pc, #52]	; (8012f04 <vPortEnterCritical+0x5c>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	d110      	bne.n	8012ef8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012ed6:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <vPortEnterCritical+0x60>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d00b      	beq.n	8012ef8 <vPortEnterCritical+0x50>
 8012ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee4:	b672      	cpsid	i
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	b662      	cpsie	i
 8012ef4:	603b      	str	r3, [r7, #0]
 8012ef6:	e7fe      	b.n	8012ef6 <vPortEnterCritical+0x4e>
	}
}
 8012ef8:	bf00      	nop
 8012efa:	370c      	adds	r7, #12
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr
 8012f04:	200000c0 	.word	0x200000c0
 8012f08:	e000ed04 	.word	0xe000ed04

08012f0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b083      	sub	sp, #12
 8012f10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012f12:	4b12      	ldr	r3, [pc, #72]	; (8012f5c <vPortExitCritical+0x50>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d10b      	bne.n	8012f32 <vPortExitCritical+0x26>
 8012f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f1e:	b672      	cpsid	i
 8012f20:	f383 8811 	msr	BASEPRI, r3
 8012f24:	f3bf 8f6f 	isb	sy
 8012f28:	f3bf 8f4f 	dsb	sy
 8012f2c:	b662      	cpsie	i
 8012f2e:	607b      	str	r3, [r7, #4]
 8012f30:	e7fe      	b.n	8012f30 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012f32:	4b0a      	ldr	r3, [pc, #40]	; (8012f5c <vPortExitCritical+0x50>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	3b01      	subs	r3, #1
 8012f38:	4a08      	ldr	r2, [pc, #32]	; (8012f5c <vPortExitCritical+0x50>)
 8012f3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012f3c:	4b07      	ldr	r3, [pc, #28]	; (8012f5c <vPortExitCritical+0x50>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d104      	bne.n	8012f4e <vPortExitCritical+0x42>
 8012f44:	2300      	movs	r3, #0
 8012f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012f4e:	bf00      	nop
 8012f50:	370c      	adds	r7, #12
 8012f52:	46bd      	mov	sp, r7
 8012f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f58:	4770      	bx	lr
 8012f5a:	bf00      	nop
 8012f5c:	200000c0 	.word	0x200000c0

08012f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f60:	f3ef 8009 	mrs	r0, PSP
 8012f64:	f3bf 8f6f 	isb	sy
 8012f68:	4b15      	ldr	r3, [pc, #84]	; (8012fc0 <pxCurrentTCBConst>)
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	f01e 0f10 	tst.w	lr, #16
 8012f70:	bf08      	it	eq
 8012f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7a:	6010      	str	r0, [r2, #0]
 8012f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f84:	b672      	cpsid	i
 8012f86:	f380 8811 	msr	BASEPRI, r0
 8012f8a:	f3bf 8f4f 	dsb	sy
 8012f8e:	f3bf 8f6f 	isb	sy
 8012f92:	b662      	cpsie	i
 8012f94:	f7ff f9e2 	bl	801235c <vTaskSwitchContext>
 8012f98:	f04f 0000 	mov.w	r0, #0
 8012f9c:	f380 8811 	msr	BASEPRI, r0
 8012fa0:	bc09      	pop	{r0, r3}
 8012fa2:	6819      	ldr	r1, [r3, #0]
 8012fa4:	6808      	ldr	r0, [r1, #0]
 8012fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012faa:	f01e 0f10 	tst.w	lr, #16
 8012fae:	bf08      	it	eq
 8012fb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012fb4:	f380 8809 	msr	PSP, r0
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	4770      	bx	lr
 8012fbe:	bf00      	nop

08012fc0 <pxCurrentTCBConst>:
 8012fc0:	20001b7c 	.word	0x20001b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012fc4:	bf00      	nop
 8012fc6:	bf00      	nop

08012fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b082      	sub	sp, #8
 8012fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8012fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd2:	b672      	cpsid	i
 8012fd4:	f383 8811 	msr	BASEPRI, r3
 8012fd8:	f3bf 8f6f 	isb	sy
 8012fdc:	f3bf 8f4f 	dsb	sy
 8012fe0:	b662      	cpsie	i
 8012fe2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012fe4:	f7ff f8fc 	bl	80121e0 <xTaskIncrementTick>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d003      	beq.n	8012ff6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012fee:	4b06      	ldr	r3, [pc, #24]	; (8013008 <SysTick_Handler+0x40>)
 8012ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ff4:	601a      	str	r2, [r3, #0]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013000:	bf00      	nop
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	e000ed04 	.word	0xe000ed04

0801300c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801300c:	b480      	push	{r7}
 801300e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013010:	4b0b      	ldr	r3, [pc, #44]	; (8013040 <vPortSetupTimerInterrupt+0x34>)
 8013012:	2200      	movs	r2, #0
 8013014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013016:	4b0b      	ldr	r3, [pc, #44]	; (8013044 <vPortSetupTimerInterrupt+0x38>)
 8013018:	2200      	movs	r2, #0
 801301a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801301c:	4b0a      	ldr	r3, [pc, #40]	; (8013048 <vPortSetupTimerInterrupt+0x3c>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	4a0a      	ldr	r2, [pc, #40]	; (801304c <vPortSetupTimerInterrupt+0x40>)
 8013022:	fba2 2303 	umull	r2, r3, r2, r3
 8013026:	099b      	lsrs	r3, r3, #6
 8013028:	4a09      	ldr	r2, [pc, #36]	; (8013050 <vPortSetupTimerInterrupt+0x44>)
 801302a:	3b01      	subs	r3, #1
 801302c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801302e:	4b04      	ldr	r3, [pc, #16]	; (8013040 <vPortSetupTimerInterrupt+0x34>)
 8013030:	2207      	movs	r2, #7
 8013032:	601a      	str	r2, [r3, #0]
}
 8013034:	bf00      	nop
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop
 8013040:	e000e010 	.word	0xe000e010
 8013044:	e000e018 	.word	0xe000e018
 8013048:	20000098 	.word	0x20000098
 801304c:	10624dd3 	.word	0x10624dd3
 8013050:	e000e014 	.word	0xe000e014

08013054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013064 <vPortEnableVFP+0x10>
 8013058:	6801      	ldr	r1, [r0, #0]
 801305a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801305e:	6001      	str	r1, [r0, #0]
 8013060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013062:	bf00      	nop
 8013064:	e000ed88 	.word	0xe000ed88

08013068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013068:	b480      	push	{r7}
 801306a:	b085      	sub	sp, #20
 801306c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801306e:	f3ef 8305 	mrs	r3, IPSR
 8013072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2b0f      	cmp	r3, #15
 8013078:	d915      	bls.n	80130a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801307a:	4a18      	ldr	r2, [pc, #96]	; (80130dc <vPortValidateInterruptPriority+0x74>)
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	4413      	add	r3, r2
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013084:	4b16      	ldr	r3, [pc, #88]	; (80130e0 <vPortValidateInterruptPriority+0x78>)
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	7afa      	ldrb	r2, [r7, #11]
 801308a:	429a      	cmp	r2, r3
 801308c:	d20b      	bcs.n	80130a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013092:	b672      	cpsid	i
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	b662      	cpsie	i
 80130a2:	607b      	str	r3, [r7, #4]
 80130a4:	e7fe      	b.n	80130a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80130a6:	4b0f      	ldr	r3, [pc, #60]	; (80130e4 <vPortValidateInterruptPriority+0x7c>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80130ae:	4b0e      	ldr	r3, [pc, #56]	; (80130e8 <vPortValidateInterruptPriority+0x80>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d90b      	bls.n	80130ce <vPortValidateInterruptPriority+0x66>
 80130b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ba:	b672      	cpsid	i
 80130bc:	f383 8811 	msr	BASEPRI, r3
 80130c0:	f3bf 8f6f 	isb	sy
 80130c4:	f3bf 8f4f 	dsb	sy
 80130c8:	b662      	cpsie	i
 80130ca:	603b      	str	r3, [r7, #0]
 80130cc:	e7fe      	b.n	80130cc <vPortValidateInterruptPriority+0x64>
	}
 80130ce:	bf00      	nop
 80130d0:	3714      	adds	r7, #20
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr
 80130da:	bf00      	nop
 80130dc:	e000e3f0 	.word	0xe000e3f0
 80130e0:	20001ca8 	.word	0x20001ca8
 80130e4:	e000ed0c 	.word	0xe000ed0c
 80130e8:	20001cac 	.word	0x20001cac

080130ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b08a      	sub	sp, #40	; 0x28
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80130f4:	2300      	movs	r3, #0
 80130f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80130f8:	f7fe ffa4 	bl	8012044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80130fc:	4b5a      	ldr	r3, [pc, #360]	; (8013268 <pvPortMalloc+0x17c>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d101      	bne.n	8013108 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013104:	f000 f916 	bl	8013334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013108:	4b58      	ldr	r3, [pc, #352]	; (801326c <pvPortMalloc+0x180>)
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	4013      	ands	r3, r2
 8013110:	2b00      	cmp	r3, #0
 8013112:	f040 8090 	bne.w	8013236 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d01e      	beq.n	801315a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801311c:	2208      	movs	r2, #8
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4413      	add	r3, r2
 8013122:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f003 0307 	and.w	r3, r3, #7
 801312a:	2b00      	cmp	r3, #0
 801312c:	d015      	beq.n	801315a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f023 0307 	bic.w	r3, r3, #7
 8013134:	3308      	adds	r3, #8
 8013136:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f003 0307 	and.w	r3, r3, #7
 801313e:	2b00      	cmp	r3, #0
 8013140:	d00b      	beq.n	801315a <pvPortMalloc+0x6e>
 8013142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013146:	b672      	cpsid	i
 8013148:	f383 8811 	msr	BASEPRI, r3
 801314c:	f3bf 8f6f 	isb	sy
 8013150:	f3bf 8f4f 	dsb	sy
 8013154:	b662      	cpsie	i
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	e7fe      	b.n	8013158 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d06a      	beq.n	8013236 <pvPortMalloc+0x14a>
 8013160:	4b43      	ldr	r3, [pc, #268]	; (8013270 <pvPortMalloc+0x184>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	429a      	cmp	r2, r3
 8013168:	d865      	bhi.n	8013236 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801316a:	4b42      	ldr	r3, [pc, #264]	; (8013274 <pvPortMalloc+0x188>)
 801316c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801316e:	4b41      	ldr	r3, [pc, #260]	; (8013274 <pvPortMalloc+0x188>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013174:	e004      	b.n	8013180 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	429a      	cmp	r2, r3
 8013188:	d903      	bls.n	8013192 <pvPortMalloc+0xa6>
 801318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d1f1      	bne.n	8013176 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013192:	4b35      	ldr	r3, [pc, #212]	; (8013268 <pvPortMalloc+0x17c>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013198:	429a      	cmp	r2, r3
 801319a:	d04c      	beq.n	8013236 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801319c:	6a3b      	ldr	r3, [r7, #32]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2208      	movs	r2, #8
 80131a2:	4413      	add	r3, r2
 80131a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80131a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	6a3b      	ldr	r3, [r7, #32]
 80131ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80131ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b0:	685a      	ldr	r2, [r3, #4]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	1ad2      	subs	r2, r2, r3
 80131b6:	2308      	movs	r3, #8
 80131b8:	005b      	lsls	r3, r3, #1
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d920      	bls.n	8013200 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80131be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	4413      	add	r3, r2
 80131c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	f003 0307 	and.w	r3, r3, #7
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d00b      	beq.n	80131e8 <pvPortMalloc+0xfc>
 80131d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d4:	b672      	cpsid	i
 80131d6:	f383 8811 	msr	BASEPRI, r3
 80131da:	f3bf 8f6f 	isb	sy
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	b662      	cpsie	i
 80131e4:	613b      	str	r3, [r7, #16]
 80131e6:	e7fe      	b.n	80131e6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80131e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ea:	685a      	ldr	r2, [r3, #4]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	1ad2      	subs	r2, r2, r3
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80131f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80131fa:	69b8      	ldr	r0, [r7, #24]
 80131fc:	f000 f8fc 	bl	80133f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013200:	4b1b      	ldr	r3, [pc, #108]	; (8013270 <pvPortMalloc+0x184>)
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	1ad3      	subs	r3, r2, r3
 801320a:	4a19      	ldr	r2, [pc, #100]	; (8013270 <pvPortMalloc+0x184>)
 801320c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801320e:	4b18      	ldr	r3, [pc, #96]	; (8013270 <pvPortMalloc+0x184>)
 8013210:	681a      	ldr	r2, [r3, #0]
 8013212:	4b19      	ldr	r3, [pc, #100]	; (8013278 <pvPortMalloc+0x18c>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	429a      	cmp	r2, r3
 8013218:	d203      	bcs.n	8013222 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801321a:	4b15      	ldr	r3, [pc, #84]	; (8013270 <pvPortMalloc+0x184>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	4a16      	ldr	r2, [pc, #88]	; (8013278 <pvPortMalloc+0x18c>)
 8013220:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013224:	685a      	ldr	r2, [r3, #4]
 8013226:	4b11      	ldr	r3, [pc, #68]	; (801326c <pvPortMalloc+0x180>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	431a      	orrs	r2, r3
 801322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013236:	f7fe ff13 	bl	8012060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801323a:	69fb      	ldr	r3, [r7, #28]
 801323c:	f003 0307 	and.w	r3, r3, #7
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00b      	beq.n	801325c <pvPortMalloc+0x170>
 8013244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013248:	b672      	cpsid	i
 801324a:	f383 8811 	msr	BASEPRI, r3
 801324e:	f3bf 8f6f 	isb	sy
 8013252:	f3bf 8f4f 	dsb	sy
 8013256:	b662      	cpsie	i
 8013258:	60fb      	str	r3, [r7, #12]
 801325a:	e7fe      	b.n	801325a <pvPortMalloc+0x16e>
	return pvReturn;
 801325c:	69fb      	ldr	r3, [r7, #28]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3728      	adds	r7, #40	; 0x28
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	200058b8 	.word	0x200058b8
 801326c:	200058c4 	.word	0x200058c4
 8013270:	200058bc 	.word	0x200058bc
 8013274:	200058b0 	.word	0x200058b0
 8013278:	200058c0 	.word	0x200058c0

0801327c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b086      	sub	sp, #24
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d04a      	beq.n	8013324 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801328e:	2308      	movs	r3, #8
 8013290:	425b      	negs	r3, r3
 8013292:	697a      	ldr	r2, [r7, #20]
 8013294:	4413      	add	r3, r2
 8013296:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	685a      	ldr	r2, [r3, #4]
 80132a0:	4b22      	ldr	r3, [pc, #136]	; (801332c <vPortFree+0xb0>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4013      	ands	r3, r2
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d10b      	bne.n	80132c2 <vPortFree+0x46>
 80132aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ae:	b672      	cpsid	i
 80132b0:	f383 8811 	msr	BASEPRI, r3
 80132b4:	f3bf 8f6f 	isb	sy
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	b662      	cpsie	i
 80132be:	60fb      	str	r3, [r7, #12]
 80132c0:	e7fe      	b.n	80132c0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d00b      	beq.n	80132e2 <vPortFree+0x66>
 80132ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ce:	b672      	cpsid	i
 80132d0:	f383 8811 	msr	BASEPRI, r3
 80132d4:	f3bf 8f6f 	isb	sy
 80132d8:	f3bf 8f4f 	dsb	sy
 80132dc:	b662      	cpsie	i
 80132de:	60bb      	str	r3, [r7, #8]
 80132e0:	e7fe      	b.n	80132e0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	685a      	ldr	r2, [r3, #4]
 80132e6:	4b11      	ldr	r3, [pc, #68]	; (801332c <vPortFree+0xb0>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	4013      	ands	r3, r2
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d019      	beq.n	8013324 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d115      	bne.n	8013324 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	685a      	ldr	r2, [r3, #4]
 80132fc:	4b0b      	ldr	r3, [pc, #44]	; (801332c <vPortFree+0xb0>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	43db      	mvns	r3, r3
 8013302:	401a      	ands	r2, r3
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013308:	f7fe fe9c 	bl	8012044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	685a      	ldr	r2, [r3, #4]
 8013310:	4b07      	ldr	r3, [pc, #28]	; (8013330 <vPortFree+0xb4>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4413      	add	r3, r2
 8013316:	4a06      	ldr	r2, [pc, #24]	; (8013330 <vPortFree+0xb4>)
 8013318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801331a:	6938      	ldr	r0, [r7, #16]
 801331c:	f000 f86c 	bl	80133f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013320:	f7fe fe9e 	bl	8012060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013324:	bf00      	nop
 8013326:	3718      	adds	r7, #24
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	200058c4 	.word	0x200058c4
 8013330:	200058bc 	.word	0x200058bc

08013334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013334:	b480      	push	{r7}
 8013336:	b085      	sub	sp, #20
 8013338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801333a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801333e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013340:	4b27      	ldr	r3, [pc, #156]	; (80133e0 <prvHeapInit+0xac>)
 8013342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f003 0307 	and.w	r3, r3, #7
 801334a:	2b00      	cmp	r3, #0
 801334c:	d00c      	beq.n	8013368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	3307      	adds	r3, #7
 8013352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	f023 0307 	bic.w	r3, r3, #7
 801335a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801335c:	68ba      	ldr	r2, [r7, #8]
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	4a1f      	ldr	r2, [pc, #124]	; (80133e0 <prvHeapInit+0xac>)
 8013364:	4413      	add	r3, r2
 8013366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801336c:	4a1d      	ldr	r2, [pc, #116]	; (80133e4 <prvHeapInit+0xb0>)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013372:	4b1c      	ldr	r3, [pc, #112]	; (80133e4 <prvHeapInit+0xb0>)
 8013374:	2200      	movs	r2, #0
 8013376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	68ba      	ldr	r2, [r7, #8]
 801337c:	4413      	add	r3, r2
 801337e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013380:	2208      	movs	r2, #8
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	1a9b      	subs	r3, r3, r2
 8013386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f023 0307 	bic.w	r3, r3, #7
 801338e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	4a15      	ldr	r2, [pc, #84]	; (80133e8 <prvHeapInit+0xb4>)
 8013394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013396:	4b14      	ldr	r3, [pc, #80]	; (80133e8 <prvHeapInit+0xb4>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	2200      	movs	r2, #0
 801339c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801339e:	4b12      	ldr	r3, [pc, #72]	; (80133e8 <prvHeapInit+0xb4>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	2200      	movs	r2, #0
 80133a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	68fa      	ldr	r2, [r7, #12]
 80133ae:	1ad2      	subs	r2, r2, r3
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80133b4:	4b0c      	ldr	r3, [pc, #48]	; (80133e8 <prvHeapInit+0xb4>)
 80133b6:	681a      	ldr	r2, [r3, #0]
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	4a0a      	ldr	r2, [pc, #40]	; (80133ec <prvHeapInit+0xb8>)
 80133c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	685b      	ldr	r3, [r3, #4]
 80133c8:	4a09      	ldr	r2, [pc, #36]	; (80133f0 <prvHeapInit+0xbc>)
 80133ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133cc:	4b09      	ldr	r3, [pc, #36]	; (80133f4 <prvHeapInit+0xc0>)
 80133ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80133d2:	601a      	str	r2, [r3, #0]
}
 80133d4:	bf00      	nop
 80133d6:	3714      	adds	r7, #20
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr
 80133e0:	20001cb0 	.word	0x20001cb0
 80133e4:	200058b0 	.word	0x200058b0
 80133e8:	200058b8 	.word	0x200058b8
 80133ec:	200058c0 	.word	0x200058c0
 80133f0:	200058bc 	.word	0x200058bc
 80133f4:	200058c4 	.word	0x200058c4

080133f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80133f8:	b480      	push	{r7}
 80133fa:	b085      	sub	sp, #20
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013400:	4b28      	ldr	r3, [pc, #160]	; (80134a4 <prvInsertBlockIntoFreeList+0xac>)
 8013402:	60fb      	str	r3, [r7, #12]
 8013404:	e002      	b.n	801340c <prvInsertBlockIntoFreeList+0x14>
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	60fb      	str	r3, [r7, #12]
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	429a      	cmp	r2, r3
 8013414:	d8f7      	bhi.n	8013406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	68ba      	ldr	r2, [r7, #8]
 8013420:	4413      	add	r3, r2
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	429a      	cmp	r2, r3
 8013426:	d108      	bne.n	801343a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	441a      	add	r2, r3
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	68ba      	ldr	r2, [r7, #8]
 8013444:	441a      	add	r2, r3
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	429a      	cmp	r2, r3
 801344c:	d118      	bne.n	8013480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	4b15      	ldr	r3, [pc, #84]	; (80134a8 <prvInsertBlockIntoFreeList+0xb0>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	429a      	cmp	r2, r3
 8013458:	d00d      	beq.n	8013476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	685a      	ldr	r2, [r3, #4]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	441a      	add	r2, r3
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	601a      	str	r2, [r3, #0]
 8013474:	e008      	b.n	8013488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013476:	4b0c      	ldr	r3, [pc, #48]	; (80134a8 <prvInsertBlockIntoFreeList+0xb0>)
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	601a      	str	r2, [r3, #0]
 801347e:	e003      	b.n	8013488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013488:	68fa      	ldr	r2, [r7, #12]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	429a      	cmp	r2, r3
 801348e:	d002      	beq.n	8013496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013496:	bf00      	nop
 8013498:	3714      	adds	r7, #20
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr
 80134a2:	bf00      	nop
 80134a4:	200058b0 	.word	0x200058b0
 80134a8:	200058b8 	.word	0x200058b8

080134ac <GRAPHICS_MainTask>:

#include "DIALOG.h"
extern  WM_HWIN CreateWindow(void);  
  

void GRAPHICS_MainTask(void) {
 80134ac:	b598      	push	{r3, r4, r7, lr}
 80134ae:	af00      	add	r7, sp, #0
 // CreateWindow();
 
/* USER CODE BEGIN GRAPHICS_MainTask */
 /* User can implement his graphic application here */
  /* Hello Word example */
    GUI_Clear();
 80134b0:	f003 fac6 	bl	8016a40 <GUI_Clear>
    GUI_SetColor(GUI_WHITE);
 80134b4:	f04f 30ff 	mov.w	r0, #4294967295
 80134b8:	f003 f990 	bl	80167dc <GUI_SetColor>
    GUI_SetFont(&GUI_Font32_1);
 80134bc:	480e      	ldr	r0, [pc, #56]	; (80134f8 <GRAPHICS_MainTask+0x4c>)
 80134be:	f003 f9a5 	bl	801680c <GUI_SetFont>
    GUI_DispStringAt("Hello World !", (LCD_GetXSize()-150)/2, (LCD_GetYSize()-20)/2);
 80134c2:	f004 ff41 	bl	8018348 <LCD_GetXSize>
 80134c6:	4603      	mov	r3, r0
 80134c8:	3b96      	subs	r3, #150	; 0x96
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	da00      	bge.n	80134d0 <GRAPHICS_MainTask+0x24>
 80134ce:	3301      	adds	r3, #1
 80134d0:	105b      	asrs	r3, r3, #1
 80134d2:	461c      	mov	r4, r3
 80134d4:	f004 ff40 	bl	8018358 <LCD_GetYSize>
 80134d8:	4603      	mov	r3, r0
 80134da:	3b14      	subs	r3, #20
 80134dc:	2b00      	cmp	r3, #0
 80134de:	da00      	bge.n	80134e2 <GRAPHICS_MainTask+0x36>
 80134e0:	3301      	adds	r3, #1
 80134e2:	105b      	asrs	r3, r3, #1
 80134e4:	461a      	mov	r2, r3
 80134e6:	4621      	mov	r1, r4
 80134e8:	4804      	ldr	r0, [pc, #16]	; (80134fc <GRAPHICS_MainTask+0x50>)
 80134ea:	f003 fd31 	bl	8016f50 <GUI_DispStringAt>
   
/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
 80134ee:	2064      	movs	r0, #100	; 0x64
 80134f0:	f003 ff5c 	bl	80173ac <GUI_Delay>
 80134f4:	e7fb      	b.n	80134ee <GRAPHICS_MainTask+0x42>
 80134f6:	bf00      	nop
 80134f8:	0801f330 	.word	0x0801f330
 80134fc:	0801ede0 	.word	0x0801ede0

08013500 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	af00      	add	r7, sp, #0

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 8013504:	f44f 31dc 	mov.w	r1, #112640	; 0x1b800
 8013508:	4802      	ldr	r0, [pc, #8]	; (8013514 <GUI_X_Config+0x14>)
 801350a:	f002 fe0b 	bl	8016124 <GUI_ALLOC_AssignMemory>

}
 801350e:	bf00      	nop
 8013510:	bd80      	pop	{r7, pc}
 8013512:	bf00      	nop
 8013514:	200058c8 	.word	0x200058c8

08013518 <MX_LCD_Init>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8013518:	b580      	push	{r7, lr}
 801351a:	b08e      	sub	sp, #56	; 0x38
 801351c:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 801351e:	483e      	ldr	r0, [pc, #248]	; (8013618 <MX_LCD_Init+0x100>)
 8013520:	f7f3 fc66 	bl	8006df0 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8013524:	4b3c      	ldr	r3, [pc, #240]	; (8013618 <MX_LCD_Init+0x100>)
 8013526:	4a3d      	ldr	r2, [pc, #244]	; (801361c <MX_LCD_Init+0x104>)
 8013528:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801352a:	4b3b      	ldr	r3, [pc, #236]	; (8013618 <MX_LCD_Init+0x100>)
 801352c:	2200      	movs	r2, #0
 801352e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8013530:	4b39      	ldr	r3, [pc, #228]	; (8013618 <MX_LCD_Init+0x100>)
 8013532:	2200      	movs	r2, #0
 8013534:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8013536:	4b38      	ldr	r3, [pc, #224]	; (8013618 <MX_LCD_Init+0x100>)
 8013538:	2200      	movs	r2, #0
 801353a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801353c:	4b36      	ldr	r3, [pc, #216]	; (8013618 <MX_LCD_Init+0x100>)
 801353e:	2200      	movs	r2, #0
 8013540:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8013542:	4b35      	ldr	r3, [pc, #212]	; (8013618 <MX_LCD_Init+0x100>)
 8013544:	2228      	movs	r2, #40	; 0x28
 8013546:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8013548:	4b33      	ldr	r3, [pc, #204]	; (8013618 <MX_LCD_Init+0x100>)
 801354a:	2209      	movs	r2, #9
 801354c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 801354e:	4b32      	ldr	r3, [pc, #200]	; (8013618 <MX_LCD_Init+0x100>)
 8013550:	2235      	movs	r2, #53	; 0x35
 8013552:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8013554:	4b30      	ldr	r3, [pc, #192]	; (8013618 <MX_LCD_Init+0x100>)
 8013556:	220b      	movs	r2, #11
 8013558:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 801355a:	4b2f      	ldr	r3, [pc, #188]	; (8013618 <MX_LCD_Init+0x100>)
 801355c:	f240 2215 	movw	r2, #533	; 0x215
 8013560:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8013562:	4b2d      	ldr	r3, [pc, #180]	; (8013618 <MX_LCD_Init+0x100>)
 8013564:	f240 121b 	movw	r2, #283	; 0x11b
 8013568:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 801356a:	4b2b      	ldr	r3, [pc, #172]	; (8013618 <MX_LCD_Init+0x100>)
 801356c:	f240 2235 	movw	r2, #565	; 0x235
 8013570:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8013572:	4b29      	ldr	r3, [pc, #164]	; (8013618 <MX_LCD_Init+0x100>)
 8013574:	f240 121d 	movw	r2, #285	; 0x11d
 8013578:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801357a:	4b27      	ldr	r3, [pc, #156]	; (8013618 <MX_LCD_Init+0x100>)
 801357c:	2200      	movs	r2, #0
 801357e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8013582:	4b25      	ldr	r3, [pc, #148]	; (8013618 <MX_LCD_Init+0x100>)
 8013584:	2200      	movs	r2, #0
 8013586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801358a:	4b23      	ldr	r3, [pc, #140]	; (8013618 <MX_LCD_Init+0x100>)
 801358c:	2200      	movs	r2, #0
 801358e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8013592:	4821      	ldr	r0, [pc, #132]	; (8013618 <MX_LCD_Init+0x100>)
 8013594:	f7f3 fb5c 	bl	8006c50 <HAL_LTDC_Init>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d001      	beq.n	80135a2 <MX_LCD_Init+0x8a>
  {
    Error_Handler( );
 801359e:	f7ee fbbd 	bl	8001d1c <Error_Handler>
  }
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 80135a2:	2100      	movs	r1, #0
 80135a4:	481c      	ldr	r0, [pc, #112]	; (8013618 <MX_LCD_Init+0x100>)
 80135a6:	f7f3 ff07 	bl	80073b8 <HAL_LTDC_ProgramLineEvent>
  pLayerCfg.WindowX0 = 0;
 80135aa:	2300      	movs	r3, #0
 80135ac:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80135ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80135b2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80135b4:	2300      	movs	r3, #0
 80135b6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80135b8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80135bc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80135be:	2300      	movs	r3, #0
 80135c0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80135c2:	23ff      	movs	r3, #255	; 0xff
 80135c4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80135c6:	2300      	movs	r3, #0
 80135c8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80135ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80135ce:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80135d0:	2307      	movs	r3, #7
 80135d2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80135d4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80135d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80135da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80135de:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80135e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80135e4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80135e6:	2300      	movs	r3, #0
 80135e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80135ec:	2300      	movs	r3, #0
 80135ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80135f8:	1d3b      	adds	r3, r7, #4
 80135fa:	2200      	movs	r2, #0
 80135fc:	4619      	mov	r1, r3
 80135fe:	4806      	ldr	r0, [pc, #24]	; (8013618 <MX_LCD_Init+0x100>)
 8013600:	f7f3 fcc6 	bl	8006f90 <HAL_LTDC_ConfigLayer>
 8013604:	4603      	mov	r3, r0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d001      	beq.n	801360e <MX_LCD_Init+0xf6>
  {
    Error_Handler( );
 801360a:	f7ee fb87 	bl	8001d1c <Error_Handler>
  }

}
 801360e:	bf00      	nop
 8013610:	3738      	adds	r7, #56	; 0x38
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	20021bd4 	.word	0x20021bd4
 801361c:	40016800 	.word	0x40016800

08013620 <MX_FMC_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8013620:	b580      	push	{r7, lr}
 8013622:	b088      	sub	sp, #32
 8013624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8013626:	1d3b      	adds	r3, r7, #4
 8013628:	2200      	movs	r2, #0
 801362a:	601a      	str	r2, [r3, #0]
 801362c:	605a      	str	r2, [r3, #4]
 801362e:	609a      	str	r2, [r3, #8]
 8013630:	60da      	str	r2, [r3, #12]
 8013632:	611a      	str	r2, [r3, #16]
 8013634:	615a      	str	r2, [r3, #20]
 8013636:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8013638:	4b1f      	ldr	r3, [pc, #124]	; (80136b8 <MX_FMC_Init+0x98>)
 801363a:	4a20      	ldr	r2, [pc, #128]	; (80136bc <MX_FMC_Init+0x9c>)
 801363c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801363e:	4b1e      	ldr	r3, [pc, #120]	; (80136b8 <MX_FMC_Init+0x98>)
 8013640:	2200      	movs	r2, #0
 8013642:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8013644:	4b1c      	ldr	r3, [pc, #112]	; (80136b8 <MX_FMC_Init+0x98>)
 8013646:	2200      	movs	r2, #0
 8013648:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801364a:	4b1b      	ldr	r3, [pc, #108]	; (80136b8 <MX_FMC_Init+0x98>)
 801364c:	2204      	movs	r2, #4
 801364e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8013650:	4b19      	ldr	r3, [pc, #100]	; (80136b8 <MX_FMC_Init+0x98>)
 8013652:	2210      	movs	r2, #16
 8013654:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8013656:	4b18      	ldr	r3, [pc, #96]	; (80136b8 <MX_FMC_Init+0x98>)
 8013658:	2240      	movs	r2, #64	; 0x40
 801365a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 801365c:	4b16      	ldr	r3, [pc, #88]	; (80136b8 <MX_FMC_Init+0x98>)
 801365e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8013662:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8013664:	4b14      	ldr	r3, [pc, #80]	; (80136b8 <MX_FMC_Init+0x98>)
 8013666:	2200      	movs	r2, #0
 8013668:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801366a:	4b13      	ldr	r3, [pc, #76]	; (80136b8 <MX_FMC_Init+0x98>)
 801366c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013670:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8013672:	4b11      	ldr	r3, [pc, #68]	; (80136b8 <MX_FMC_Init+0x98>)
 8013674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013678:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801367a:	4b0f      	ldr	r3, [pc, #60]	; (80136b8 <MX_FMC_Init+0x98>)
 801367c:	2200      	movs	r2, #0
 801367e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8013680:	2302      	movs	r3, #2
 8013682:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8013684:	2307      	movs	r3, #7
 8013686:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8013688:	2304      	movs	r3, #4
 801368a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 801368c:	2307      	movs	r3, #7
 801368e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8013690:	2303      	movs	r3, #3
 8013692:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8013694:	2302      	movs	r3, #2
 8013696:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8013698:	2302      	movs	r3, #2
 801369a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801369c:	1d3b      	adds	r3, r7, #4
 801369e:	4619      	mov	r1, r3
 80136a0:	4805      	ldr	r0, [pc, #20]	; (80136b8 <MX_FMC_Init+0x98>)
 80136a2:	f7f7 f947 	bl	800a934 <HAL_SDRAM_Init>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d001      	beq.n	80136b0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80136ac:	f7ee fb36 	bl	8001d1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80136b0:	bf00      	nop
 80136b2:	3720      	adds	r7, #32
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	20021cbc 	.word	0x20021cbc
 80136bc:	a0000140 	.word	0xa0000140

080136c0 <MX_SDRAM_InitEx>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 80136c6:	2300      	movs	r3, #0
 80136c8:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80136ca:	4b2b      	ldr	r3, [pc, #172]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 80136cc:	2201      	movs	r2, #1
 80136ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80136d0:	4b29      	ldr	r3, [pc, #164]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 80136d2:	2210      	movs	r2, #16
 80136d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80136d6:	4b28      	ldr	r3, [pc, #160]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 80136d8:	2201      	movs	r2, #1
 80136da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80136dc:	4b26      	ldr	r3, [pc, #152]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 80136de:	2200      	movs	r2, #0
 80136e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80136e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136e6:	4924      	ldr	r1, [pc, #144]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 80136e8:	4824      	ldr	r0, [pc, #144]	; (801377c <MX_SDRAM_InitEx+0xbc>)
 80136ea:	f7f7 f957 	bl	800a99c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80136ee:	2001      	movs	r0, #1
 80136f0:	f7ef fe36 	bl	8003360 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80136f4:	4b20      	ldr	r3, [pc, #128]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 80136f6:	2202      	movs	r2, #2
 80136f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80136fa:	4b1f      	ldr	r3, [pc, #124]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 80136fc:	2210      	movs	r2, #16
 80136fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8013700:	4b1d      	ldr	r3, [pc, #116]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013702:	2201      	movs	r2, #1
 8013704:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8013706:	4b1c      	ldr	r3, [pc, #112]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013708:	2200      	movs	r2, #0
 801370a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 801370c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013710:	4919      	ldr	r1, [pc, #100]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013712:	481a      	ldr	r0, [pc, #104]	; (801377c <MX_SDRAM_InitEx+0xbc>)
 8013714:	f7f7 f942 	bl	800a99c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8013718:	4b17      	ldr	r3, [pc, #92]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 801371a:	2203      	movs	r2, #3
 801371c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801371e:	4b16      	ldr	r3, [pc, #88]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013720:	2210      	movs	r2, #16
 8013722:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8013724:	4b14      	ldr	r3, [pc, #80]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013726:	2208      	movs	r2, #8
 8013728:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801372a:	4b13      	ldr	r3, [pc, #76]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 801372c:	2200      	movs	r2, #0
 801372e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013734:	4910      	ldr	r1, [pc, #64]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013736:	4811      	ldr	r0, [pc, #68]	; (801377c <MX_SDRAM_InitEx+0xbc>)
 8013738:	f7f7 f930 	bl	800a99c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 801373c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8013740:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8013742:	4b0d      	ldr	r3, [pc, #52]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013744:	2204      	movs	r2, #4
 8013746:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8013748:	4b0b      	ldr	r3, [pc, #44]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 801374a:	2210      	movs	r2, #16
 801374c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801374e:	4b0a      	ldr	r3, [pc, #40]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013750:	2201      	movs	r2, #1
 8013752:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	4a08      	ldr	r2, [pc, #32]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013758:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801375a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801375e:	4906      	ldr	r1, [pc, #24]	; (8013778 <MX_SDRAM_InitEx+0xb8>)
 8013760:	4806      	ldr	r0, [pc, #24]	; (801377c <MX_SDRAM_InitEx+0xbc>)
 8013762:	f7f7 f91b 	bl	800a99c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8013766:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 801376a:	4804      	ldr	r0, [pc, #16]	; (801377c <MX_SDRAM_InitEx+0xbc>)
 801376c:	f7f7 f941 	bl	800a9f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8013770:	bf00      	nop
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	200210c8 	.word	0x200210c8
 801377c:	20021cbc 	.word	0x20021cbc

08013780 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) 
{
 8013780:	b580      	push	{r7, lr}
 8013782:	af00      	add	r7, sp, #0
/* Configure the DMA2D default mode */ 

  hdma2d.Instance = DMA2D;
 8013784:	4b15      	ldr	r3, [pc, #84]	; (80137dc <MX_DMA2D_Init+0x5c>)
 8013786:	4a16      	ldr	r2, [pc, #88]	; (80137e0 <MX_DMA2D_Init+0x60>)
 8013788:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 801378a:	4b14      	ldr	r3, [pc, #80]	; (80137dc <MX_DMA2D_Init+0x5c>)
 801378c:	2200      	movs	r2, #0
 801378e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8013790:	4b12      	ldr	r3, [pc, #72]	; (80137dc <MX_DMA2D_Init+0x5c>)
 8013792:	2200      	movs	r2, #0
 8013794:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8013796:	4b11      	ldr	r3, [pc, #68]	; (80137dc <MX_DMA2D_Init+0x5c>)
 8013798:	2200      	movs	r2, #0
 801379a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 801379c:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <MX_DMA2D_Init+0x5c>)
 801379e:	2200      	movs	r2, #0
 80137a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80137a2:	4b0e      	ldr	r3, [pc, #56]	; (80137dc <MX_DMA2D_Init+0x5c>)
 80137a4:	2200      	movs	r2, #0
 80137a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80137a8:	4b0c      	ldr	r3, [pc, #48]	; (80137dc <MX_DMA2D_Init+0x5c>)
 80137aa:	2200      	movs	r2, #0
 80137ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80137ae:	4b0b      	ldr	r3, [pc, #44]	; (80137dc <MX_DMA2D_Init+0x5c>)
 80137b0:	2200      	movs	r2, #0
 80137b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80137b4:	4809      	ldr	r0, [pc, #36]	; (80137dc <MX_DMA2D_Init+0x5c>)
 80137b6:	f7f0 fb6f 	bl	8003e98 <HAL_DMA2D_Init>
 80137ba:	4603      	mov	r3, r0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d001      	beq.n	80137c4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler( );
 80137c0:	f7ee faac 	bl	8001d1c <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80137c4:	2101      	movs	r1, #1
 80137c6:	4805      	ldr	r0, [pc, #20]	; (80137dc <MX_DMA2D_Init+0x5c>)
 80137c8:	f7f0 fcc0 	bl	800414c <HAL_DMA2D_ConfigLayer>
 80137cc:	4603      	mov	r3, r0
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d001      	beq.n	80137d6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler( );
 80137d2:	f7ee faa3 	bl	8001d1c <Error_Handler>
  }

}
 80137d6:	bf00      	nop
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop
 80137dc:	20021c7c 	.word	0x20021c7c
 80137e0:	4002b000 	.word	0x4002b000

080137e4 <HAL_LTDC_MspInit>:

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b08e      	sub	sp, #56	; 0x38
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80137ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137f0:	2200      	movs	r2, #0
 80137f2:	601a      	str	r2, [r3, #0]
 80137f4:	605a      	str	r2, [r3, #4]
 80137f6:	609a      	str	r2, [r3, #8]
 80137f8:	60da      	str	r2, [r3, #12]
 80137fa:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4a55      	ldr	r2, [pc, #340]	; (8013958 <HAL_LTDC_MspInit+0x174>)
 8013802:	4293      	cmp	r3, r2
 8013804:	f040 80a3 	bne.w	801394e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8013808:	4b54      	ldr	r3, [pc, #336]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801380c:	4a53      	ldr	r2, [pc, #332]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801380e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013812:	6453      	str	r3, [r2, #68]	; 0x44
 8013814:	4b51      	ldr	r3, [pc, #324]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801381c:	623b      	str	r3, [r7, #32]
 801381e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8013820:	4b4e      	ldr	r3, [pc, #312]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013824:	4a4d      	ldr	r2, [pc, #308]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013826:	f043 0310 	orr.w	r3, r3, #16
 801382a:	6313      	str	r3, [r2, #48]	; 0x30
 801382c:	4b4b      	ldr	r3, [pc, #300]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013830:	f003 0310 	and.w	r3, r3, #16
 8013834:	61fb      	str	r3, [r7, #28]
 8013836:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8013838:	4b48      	ldr	r3, [pc, #288]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801383c:	4a47      	ldr	r2, [pc, #284]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801383e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013842:	6313      	str	r3, [r2, #48]	; 0x30
 8013844:	4b45      	ldr	r3, [pc, #276]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801384c:	61bb      	str	r3, [r7, #24]
 801384e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8013850:	4b42      	ldr	r3, [pc, #264]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013854:	4a41      	ldr	r2, [pc, #260]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801385a:	6313      	str	r3, [r2, #48]	; 0x30
 801385c:	4b3f      	ldr	r3, [pc, #252]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013864:	617b      	str	r3, [r7, #20]
 8013866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013868:	4b3c      	ldr	r3, [pc, #240]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386c:	4a3b      	ldr	r2, [pc, #236]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801386e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013872:	6313      	str	r3, [r2, #48]	; 0x30
 8013874:	4b39      	ldr	r3, [pc, #228]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801387c:	613b      	str	r3, [r7, #16]
 801387e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8013880:	4b36      	ldr	r3, [pc, #216]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013884:	4a35      	ldr	r2, [pc, #212]	; (801395c <HAL_LTDC_MspInit+0x178>)
 8013886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801388a:	6313      	str	r3, [r2, #48]	; 0x30
 801388c:	4b33      	ldr	r3, [pc, #204]	; (801395c <HAL_LTDC_MspInit+0x178>)
 801388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013894:	60fb      	str	r3, [r7, #12]
 8013896:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8013898:	2310      	movs	r3, #16
 801389a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801389c:	2302      	movs	r3, #2
 801389e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138a0:	2300      	movs	r3, #0
 80138a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138a4:	2303      	movs	r3, #3
 80138a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80138a8:	230e      	movs	r3, #14
 80138aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80138ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138b0:	4619      	mov	r1, r3
 80138b2:	482b      	ldr	r0, [pc, #172]	; (8013960 <HAL_LTDC_MspInit+0x17c>)
 80138b4:	f7f0 fcdc 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80138b8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80138bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138be:	2302      	movs	r3, #2
 80138c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138c2:	2300      	movs	r3, #0
 80138c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138c6:	2303      	movs	r3, #3
 80138c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80138ca:	230e      	movs	r3, #14
 80138cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80138ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138d2:	4619      	mov	r1, r3
 80138d4:	4823      	ldr	r0, [pc, #140]	; (8013964 <HAL_LTDC_MspInit+0x180>)
 80138d6:	f7f0 fccb 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80138da:	23f7      	movs	r3, #247	; 0xf7
 80138dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138de:	2302      	movs	r3, #2
 80138e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138e2:	2300      	movs	r3, #0
 80138e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138e6:	2303      	movs	r3, #3
 80138e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80138ea:	230e      	movs	r3, #14
 80138ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80138ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138f2:	4619      	mov	r1, r3
 80138f4:	481c      	ldr	r0, [pc, #112]	; (8013968 <HAL_LTDC_MspInit+0x184>)
 80138f6:	f7f0 fcbb 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80138fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013900:	2302      	movs	r3, #2
 8013902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013904:	2300      	movs	r3, #0
 8013906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013908:	2303      	movs	r3, #3
 801390a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801390c:	2309      	movs	r3, #9
 801390e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8013910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013914:	4619      	mov	r1, r3
 8013916:	4815      	ldr	r0, [pc, #84]	; (801396c <HAL_LTDC_MspInit+0x188>)
 8013918:	f7f0 fcaa 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 801391c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8013920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013922:	2302      	movs	r3, #2
 8013924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013926:	2300      	movs	r3, #0
 8013928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801392a:	2303      	movs	r3, #3
 801392c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801392e:	230e      	movs	r3, #14
 8013930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013936:	4619      	mov	r1, r3
 8013938:	480d      	ldr	r0, [pc, #52]	; (8013970 <HAL_LTDC_MspInit+0x18c>)
 801393a:	f7f0 fc99 	bl	8004270 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801393e:	2200      	movs	r2, #0
 8013940:	2105      	movs	r1, #5
 8013942:	2058      	movs	r0, #88	; 0x58
 8013944:	f7f0 f87a 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8013948:	2058      	movs	r0, #88	; 0x58
 801394a:	f7f0 f893 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801394e:	bf00      	nop
 8013950:	3738      	adds	r7, #56	; 0x38
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	40016800 	.word	0x40016800
 801395c:	40023800 	.word	0x40023800
 8013960:	40021000 	.word	0x40021000
 8013964:	40022400 	.word	0x40022400
 8013968:	40022800 	.word	0x40022800
 801396c:	40021800 	.word	0x40021800
 8013970:	40022000 	.word	0x40022000

08013974 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4a13      	ldr	r2, [pc, #76]	; (80139d0 <HAL_LTDC_MspDeInit+0x5c>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d11f      	bne.n	80139c6 <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8013986:	4b13      	ldr	r3, [pc, #76]	; (80139d4 <HAL_LTDC_MspDeInit+0x60>)
 8013988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801398a:	4a12      	ldr	r2, [pc, #72]	; (80139d4 <HAL_LTDC_MspDeInit+0x60>)
 801398c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013990:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8013992:	2110      	movs	r1, #16
 8013994:	4810      	ldr	r0, [pc, #64]	; (80139d8 <HAL_LTDC_MspDeInit+0x64>)
 8013996:	f7f0 fe15 	bl	80045c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 801399a:	f64e 71ff 	movw	r1, #61439	; 0xefff
 801399e:	480f      	ldr	r0, [pc, #60]	; (80139dc <HAL_LTDC_MspDeInit+0x68>)
 80139a0:	f7f0 fe10 	bl	80045c4 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80139a4:	21f7      	movs	r1, #247	; 0xf7
 80139a6:	480e      	ldr	r0, [pc, #56]	; (80139e0 <HAL_LTDC_MspDeInit+0x6c>)
 80139a8:	f7f0 fe0c 	bl	80045c4 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 80139ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80139b0:	480c      	ldr	r0, [pc, #48]	; (80139e4 <HAL_LTDC_MspDeInit+0x70>)
 80139b2:	f7f0 fe07 	bl	80045c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 80139b6:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 80139ba:	480b      	ldr	r0, [pc, #44]	; (80139e8 <HAL_LTDC_MspDeInit+0x74>)
 80139bc:	f7f0 fe02 	bl	80045c4 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 80139c0:	2058      	movs	r0, #88	; 0x58
 80139c2:	f7f0 f865 	bl	8003a90 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 80139c6:	bf00      	nop
 80139c8:	3708      	adds	r7, #8
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	40016800 	.word	0x40016800
 80139d4:	40023800 	.word	0x40023800
 80139d8:	40021000 	.word	0x40021000
 80139dc:	40022400 	.word	0x40022400
 80139e0:	40022800 	.word	0x40022800
 80139e4:	40021800 	.word	0x40021800
 80139e8:	40022000 	.word	0x40022000

080139ec <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b086      	sub	sp, #24
 80139f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80139f2:	1d3b      	adds	r3, r7, #4
 80139f4:	2200      	movs	r2, #0
 80139f6:	601a      	str	r2, [r3, #0]
 80139f8:	605a      	str	r2, [r3, #4]
 80139fa:	609a      	str	r2, [r3, #8]
 80139fc:	60da      	str	r2, [r3, #12]
 80139fe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8013a00:	4b3a      	ldr	r3, [pc, #232]	; (8013aec <HAL_FMC_MspInit+0x100>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d16d      	bne.n	8013ae4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8013a08:	4b38      	ldr	r3, [pc, #224]	; (8013aec <HAL_FMC_MspInit+0x100>)
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8013a0e:	4b38      	ldr	r3, [pc, #224]	; (8013af0 <HAL_FMC_MspInit+0x104>)
 8013a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a12:	4a37      	ldr	r2, [pc, #220]	; (8013af0 <HAL_FMC_MspInit+0x104>)
 8013a14:	f043 0301 	orr.w	r3, r3, #1
 8013a18:	6393      	str	r3, [r2, #56]	; 0x38
 8013a1a:	4b35      	ldr	r3, [pc, #212]	; (8013af0 <HAL_FMC_MspInit+0x104>)
 8013a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a1e:	f003 0301 	and.w	r3, r3, #1
 8013a22:	603b      	str	r3, [r7, #0]
 8013a24:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8013a26:	f64f 7383 	movw	r3, #65411	; 0xff83
 8013a2a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a2c:	2302      	movs	r3, #2
 8013a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a30:	2300      	movs	r3, #0
 8013a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a34:	2303      	movs	r3, #3
 8013a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013a38:	230c      	movs	r3, #12
 8013a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013a3c:	1d3b      	adds	r3, r7, #4
 8013a3e:	4619      	mov	r1, r3
 8013a40:	482c      	ldr	r0, [pc, #176]	; (8013af4 <HAL_FMC_MspInit+0x108>)
 8013a42:	f7f0 fc15 	bl	8004270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8013a46:	f248 1333 	movw	r3, #33075	; 0x8133
 8013a4a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a50:	2300      	movs	r3, #0
 8013a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a54:	2303      	movs	r3, #3
 8013a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013a58:	230c      	movs	r3, #12
 8013a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013a5c:	1d3b      	adds	r3, r7, #4
 8013a5e:	4619      	mov	r1, r3
 8013a60:	4825      	ldr	r0, [pc, #148]	; (8013af8 <HAL_FMC_MspInit+0x10c>)
 8013a62:	f7f0 fc05 	bl	8004270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8013a66:	f24c 7303 	movw	r3, #50947	; 0xc703
 8013a6a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a6c:	2302      	movs	r3, #2
 8013a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a70:	2300      	movs	r3, #0
 8013a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a74:	2303      	movs	r3, #3
 8013a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013a78:	230c      	movs	r3, #12
 8013a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013a7c:	1d3b      	adds	r3, r7, #4
 8013a7e:	4619      	mov	r1, r3
 8013a80:	481e      	ldr	r0, [pc, #120]	; (8013afc <HAL_FMC_MspInit+0x110>)
 8013a82:	f7f0 fbf5 	bl	8004270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8013a86:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8013a8a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a90:	2300      	movs	r3, #0
 8013a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a94:	2303      	movs	r3, #3
 8013a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013a98:	230c      	movs	r3, #12
 8013a9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013a9c:	1d3b      	adds	r3, r7, #4
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	4817      	ldr	r0, [pc, #92]	; (8013b00 <HAL_FMC_MspInit+0x114>)
 8013aa2:	f7f0 fbe5 	bl	8004270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8013aa6:	2328      	movs	r3, #40	; 0x28
 8013aa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013aaa:	2302      	movs	r3, #2
 8013aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ab2:	2303      	movs	r3, #3
 8013ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013ab6:	230c      	movs	r3, #12
 8013ab8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013aba:	1d3b      	adds	r3, r7, #4
 8013abc:	4619      	mov	r1, r3
 8013abe:	4811      	ldr	r0, [pc, #68]	; (8013b04 <HAL_FMC_MspInit+0x118>)
 8013ac0:	f7f0 fbd6 	bl	8004270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8013ac4:	2308      	movs	r3, #8
 8013ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ac8:	2302      	movs	r3, #2
 8013aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013acc:	2300      	movs	r3, #0
 8013ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ad0:	2303      	movs	r3, #3
 8013ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013ad4:	230c      	movs	r3, #12
 8013ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8013ad8:	1d3b      	adds	r3, r7, #4
 8013ada:	4619      	mov	r1, r3
 8013adc:	480a      	ldr	r0, [pc, #40]	; (8013b08 <HAL_FMC_MspInit+0x11c>)
 8013ade:	f7f0 fbc7 	bl	8004270 <HAL_GPIO_Init>
 8013ae2:	e000      	b.n	8013ae6 <HAL_FMC_MspInit+0xfa>
    return;
 8013ae4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8013ae6:	3718      	adds	r7, #24
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	200210d8 	.word	0x200210d8
 8013af0:	40023800 	.word	0x40023800
 8013af4:	40021000 	.word	0x40021000
 8013af8:	40021800 	.word	0x40021800
 8013afc:	40020c00 	.word	0x40020c00
 8013b00:	40021400 	.word	0x40021400
 8013b04:	40021c00 	.word	0x40021c00
 8013b08:	40020800 	.word	0x40020800

08013b0c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8013b14:	f7ff ff6a 	bl	80139ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8013b18:	bf00      	nop
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}

08013b20 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4a0d      	ldr	r2, [pc, #52]	; (8013b64 <HAL_DMA2D_MspInit+0x44>)
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d113      	bne.n	8013b5a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013b32:	4b0d      	ldr	r3, [pc, #52]	; (8013b68 <HAL_DMA2D_MspInit+0x48>)
 8013b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b36:	4a0c      	ldr	r2, [pc, #48]	; (8013b68 <HAL_DMA2D_MspInit+0x48>)
 8013b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8013b3e:	4b0a      	ldr	r3, [pc, #40]	; (8013b68 <HAL_DMA2D_MspInit+0x48>)
 8013b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013b46:	60fb      	str	r3, [r7, #12]
 8013b48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	2105      	movs	r1, #5
 8013b4e:	205a      	movs	r0, #90	; 0x5a
 8013b50:	f7ef ff74 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8013b54:	205a      	movs	r0, #90	; 0x5a
 8013b56:	f7ef ff8d 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8013b5a:	bf00      	nop
 8013b5c:	3710      	adds	r7, #16
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	4002b000 	.word	0x4002b000
 8013b68:	40023800 	.word	0x40023800

08013b6c <_Color2IndexBulk_M8888I_DMA2D>:
}                                                                                                              \
static void _Index2ColorBulk_##PFIX##_DMA2D(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex) { \
  _DMA_Index2ColorBulk(pIndex, pColor, NumItems, SizeOfIndex, PIXELFORMAT);                                    \
}

DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b086      	sub	sp, #24
 8013b70:	af02      	add	r7, sp, #8
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
 8013b78:	70fb      	strb	r3, [r7, #3]
 8013b7a:	78fa      	ldrb	r2, [r7, #3]
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	9300      	str	r3, [sp, #0]
 8013b80:	4613      	mov	r3, r2
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	68b9      	ldr	r1, [r7, #8]
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f000 fae5 	bl	8014156 <_DMA_Color2IndexBulk>
 8013b8c:	bf00      	nop
 8013b8e:	3710      	adds	r7, #16
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <_Index2ColorBulk_M8888I_DMA2D>:
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af02      	add	r7, sp, #8
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
 8013ba0:	70fb      	strb	r3, [r7, #3]
 8013ba2:	78fa      	ldrb	r2, [r7, #3]
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	9300      	str	r3, [sp, #0]
 8013ba8:	4613      	mov	r3, r2
 8013baa:	687a      	ldr	r2, [r7, #4]
 8013bac:	68b9      	ldr	r1, [r7, #8]
 8013bae:	68f8      	ldr	r0, [r7, #12]
 8013bb0:	f000 fabe 	bl	8014130 <_DMA_Index2ColorBulk>
 8013bb4:	bf00      	nop
 8013bb6:	3710      	adds	r7, #16
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b086      	sub	sp, #24
 8013bc0:	af02      	add	r7, sp, #8
 8013bc2:	60f8      	str	r0, [r7, #12]
 8013bc4:	60b9      	str	r1, [r7, #8]
 8013bc6:	607a      	str	r2, [r7, #4]
 8013bc8:	70fb      	strb	r3, [r7, #3]
 8013bca:	78fa      	ldrb	r2, [r7, #3]
 8013bcc:	2300      	movs	r3, #0
 8013bce:	9300      	str	r3, [sp, #0]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	687a      	ldr	r2, [r7, #4]
 8013bd4:	68b9      	ldr	r1, [r7, #8]
 8013bd6:	68f8      	ldr	r0, [r7, #12]
 8013bd8:	f000 fabd 	bl	8014156 <_DMA_Color2IndexBulk>
 8013bdc:	bf00      	nop
 8013bde:	3710      	adds	r7, #16
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <_Index2ColorBulk_M888_DMA2D>:
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af02      	add	r7, sp, #8
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	607a      	str	r2, [r7, #4]
 8013bf0:	70fb      	strb	r3, [r7, #3]
 8013bf2:	78fa      	ldrb	r2, [r7, #3]
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	9300      	str	r3, [sp, #0]
 8013bf8:	4613      	mov	r3, r2
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	68b9      	ldr	r1, [r7, #8]
 8013bfe:	68f8      	ldr	r0, [r7, #12]
 8013c00:	f000 fa96 	bl	8014130 <_DMA_Index2ColorBulk>
 8013c04:	bf00      	nop
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af02      	add	r7, sp, #8
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
 8013c18:	70fb      	strb	r3, [r7, #3]
 8013c1a:	78fa      	ldrb	r2, [r7, #3]
 8013c1c:	2302      	movs	r3, #2
 8013c1e:	9300      	str	r3, [sp, #0]
 8013c20:	4613      	mov	r3, r2
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	68b9      	ldr	r1, [r7, #8]
 8013c26:	68f8      	ldr	r0, [r7, #12]
 8013c28:	f000 fa95 	bl	8014156 <_DMA_Color2IndexBulk>
 8013c2c:	bf00      	nop
 8013c2e:	3710      	adds	r7, #16
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <_Index2ColorBulk_M565_DMA2D>:
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b086      	sub	sp, #24
 8013c38:	af02      	add	r7, sp, #8
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	607a      	str	r2, [r7, #4]
 8013c40:	70fb      	strb	r3, [r7, #3]
 8013c42:	78fa      	ldrb	r2, [r7, #3]
 8013c44:	2302      	movs	r3, #2
 8013c46:	9300      	str	r3, [sp, #0]
 8013c48:	4613      	mov	r3, r2
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	68b9      	ldr	r1, [r7, #8]
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	f000 fa6e 	bl	8014130 <_DMA_Index2ColorBulk>
 8013c54:	bf00      	nop
 8013c56:	3710      	adds	r7, #16
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b086      	sub	sp, #24
 8013c60:	af02      	add	r7, sp, #8
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	607a      	str	r2, [r7, #4]
 8013c68:	70fb      	strb	r3, [r7, #3]
 8013c6a:	78fa      	ldrb	r2, [r7, #3]
 8013c6c:	2303      	movs	r3, #3
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	4613      	mov	r3, r2
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	68b9      	ldr	r1, [r7, #8]
 8013c76:	68f8      	ldr	r0, [r7, #12]
 8013c78:	f000 fa6d 	bl	8014156 <_DMA_Color2IndexBulk>
 8013c7c:	bf00      	nop
 8013c7e:	3710      	adds	r7, #16
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <_Index2ColorBulk_M1555I_DMA2D>:
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af02      	add	r7, sp, #8
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	607a      	str	r2, [r7, #4]
 8013c90:	70fb      	strb	r3, [r7, #3]
 8013c92:	78fa      	ldrb	r2, [r7, #3]
 8013c94:	2303      	movs	r3, #3
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	4613      	mov	r3, r2
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	68b9      	ldr	r1, [r7, #8]
 8013c9e:	68f8      	ldr	r0, [r7, #12]
 8013ca0:	f000 fa46 	bl	8014130 <_DMA_Index2ColorBulk>
 8013ca4:	bf00      	nop
 8013ca6:	3710      	adds	r7, #16
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b086      	sub	sp, #24
 8013cb0:	af02      	add	r7, sp, #8
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
 8013cb8:	70fb      	strb	r3, [r7, #3]
 8013cba:	78fa      	ldrb	r2, [r7, #3]
 8013cbc:	2304      	movs	r3, #4
 8013cbe:	9300      	str	r3, [sp, #0]
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	68b9      	ldr	r1, [r7, #8]
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	f000 fa45 	bl	8014156 <_DMA_Color2IndexBulk>
 8013ccc:	bf00      	nop
 8013cce:	3710      	adds	r7, #16
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <_Index2ColorBulk_M4444I_DMA2D>:
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b086      	sub	sp, #24
 8013cd8:	af02      	add	r7, sp, #8
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	60b9      	str	r1, [r7, #8]
 8013cde:	607a      	str	r2, [r7, #4]
 8013ce0:	70fb      	strb	r3, [r7, #3]
 8013ce2:	78fa      	ldrb	r2, [r7, #3]
 8013ce4:	2304      	movs	r3, #4
 8013ce6:	9300      	str	r3, [sp, #0]
 8013ce8:	4613      	mov	r3, r2
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	68b9      	ldr	r1, [r7, #8]
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	f000 fa1e 	bl	8014130 <_DMA_Index2ColorBulk>
 8013cf4:	bf00      	nop
 8013cf6:	3710      	adds	r7, #16
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <_DMA_ExecOperation>:

/*********************************************************************
*
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {
 8013cfc:	b480      	push	{r7}
 8013cfe:	af00      	add	r7, sp, #0

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 8013d00:	4b08      	ldr	r3, [pc, #32]	; (8013d24 <_DMA_ExecOperation+0x28>)
 8013d02:	781b      	ldrb	r3, [r3, #0]
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d006      	beq.n	8013d18 <_DMA_ExecOperation+0x1c>
    return;
  
  while(TransferInProgress) {
 8013d0a:	bf00      	nop
 8013d0c:	4b05      	ldr	r3, [pc, #20]	; (8013d24 <_DMA_ExecOperation+0x28>)
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	b2db      	uxtb	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d1fa      	bne.n	8013d0c <_DMA_ExecOperation+0x10>
 8013d16:	e000      	b.n	8013d1a <_DMA_ExecOperation+0x1e>
    return;
 8013d18:	bf00      	nop
  }
}
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	200210f8 	.word	0x200210f8

08013d28 <GetPixelformat>:
/**
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static U32 GetPixelformat(U32 LayerIndex) {
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  

  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <GetPixelformat+0x12>
    return 0;
 8013d36:	2300      	movs	r3, #0
 8013d38:	e0af      	b.n	8013e9a <GetPixelformat+0x172>
  }

  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 8013d3a:	4a5b      	ldr	r2, [pc, #364]	; (8013ea8 <GetPixelformat+0x180>)
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d42:	4a5a      	ldr	r2, [pc, #360]	; (8013eac <GetPixelformat+0x184>)
 8013d44:	4293      	cmp	r3, r2
 8013d46:	bf0c      	ite	eq
 8013d48:	2301      	moveq	r3, #1
 8013d4a:	2300      	movne	r3, #0
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	4956      	ldr	r1, [pc, #344]	; (8013ea8 <GetPixelformat+0x180>)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013d56:	4956      	ldr	r1, [pc, #344]	; (8013eb0 <GetPixelformat+0x188>)
 8013d58:	428b      	cmp	r3, r1
 8013d5a:	bf0c      	ite	eq
 8013d5c:	2301      	moveq	r3, #1
 8013d5e:	2300      	movne	r3, #0
 8013d60:	b2db      	uxtb	r3, r3
 8013d62:	4313      	orrs	r3, r2
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	4619      	mov	r1, r3
 8013d68:	4a4f      	ldr	r2, [pc, #316]	; (8013ea8 <GetPixelformat+0x180>)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d70:	4a50      	ldr	r2, [pc, #320]	; (8013eb4 <GetPixelformat+0x18c>)
 8013d72:	4293      	cmp	r3, r2
 8013d74:	bf0c      	ite	eq
 8013d76:	2301      	moveq	r3, #1
 8013d78:	2300      	movne	r3, #0
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	430b      	orrs	r3, r1
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d001      	beq.n	8013d86 <GetPixelformat+0x5e>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8013d82:	2300      	movs	r3, #0
 8013d84:	e089      	b.n	8013e9a <GetPixelformat+0x172>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 8013d86:	4a48      	ldr	r2, [pc, #288]	; (8013ea8 <GetPixelformat+0x180>)
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d8e:	4a4a      	ldr	r2, [pc, #296]	; (8013eb8 <GetPixelformat+0x190>)
 8013d90:	4293      	cmp	r3, r2
 8013d92:	bf0c      	ite	eq
 8013d94:	2301      	moveq	r3, #1
 8013d96:	2300      	movne	r3, #0
 8013d98:	b2da      	uxtb	r2, r3
 8013d9a:	4943      	ldr	r1, [pc, #268]	; (8013ea8 <GetPixelformat+0x180>)
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013da2:	4946      	ldr	r1, [pc, #280]	; (8013ebc <GetPixelformat+0x194>)
 8013da4:	428b      	cmp	r3, r1
 8013da6:	bf0c      	ite	eq
 8013da8:	2301      	moveq	r3, #1
 8013daa:	2300      	movne	r3, #0
 8013dac:	b2db      	uxtb	r3, r3
 8013dae:	4313      	orrs	r3, r2
 8013db0:	b2db      	uxtb	r3, r3
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d001      	beq.n	8013dba <GetPixelformat+0x92>
    return LTDC_PIXEL_FORMAT_RGB888;
 8013db6:	2301      	movs	r3, #1
 8013db8:	e06f      	b.n	8013e9a <GetPixelformat+0x172>
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 8013dba:	4a3b      	ldr	r2, [pc, #236]	; (8013ea8 <GetPixelformat+0x180>)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dc2:	4a3f      	ldr	r2, [pc, #252]	; (8013ec0 <GetPixelformat+0x198>)
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	bf0c      	ite	eq
 8013dc8:	2301      	moveq	r3, #1
 8013dca:	2300      	movne	r3, #0
 8013dcc:	b2da      	uxtb	r2, r3
 8013dce:	4936      	ldr	r1, [pc, #216]	; (8013ea8 <GetPixelformat+0x180>)
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013dd6:	493b      	ldr	r1, [pc, #236]	; (8013ec4 <GetPixelformat+0x19c>)
 8013dd8:	428b      	cmp	r3, r1
 8013dda:	bf0c      	ite	eq
 8013ddc:	2301      	moveq	r3, #1
 8013dde:	2300      	movne	r3, #0
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	4313      	orrs	r3, r2
 8013de4:	b2db      	uxtb	r3, r3
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d001      	beq.n	8013dee <GetPixelformat+0xc6>
    return LTDC_PIXEL_FORMAT_RGB565;
 8013dea:	2302      	movs	r3, #2
 8013dec:	e055      	b.n	8013e9a <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 8013dee:	4a2e      	ldr	r2, [pc, #184]	; (8013ea8 <GetPixelformat+0x180>)
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013df6:	4a34      	ldr	r2, [pc, #208]	; (8013ec8 <GetPixelformat+0x1a0>)
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d101      	bne.n	8013e00 <GetPixelformat+0xd8>
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8013dfc:	2303      	movs	r3, #3
 8013dfe:	e04c      	b.n	8013e9a <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 8013e00:	4a29      	ldr	r2, [pc, #164]	; (8013ea8 <GetPixelformat+0x180>)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e08:	4a30      	ldr	r2, [pc, #192]	; (8013ecc <GetPixelformat+0x1a4>)
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d101      	bne.n	8013e12 <GetPixelformat+0xea>
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8013e0e:	2304      	movs	r3, #4
 8013e10:	e043      	b.n	8013e9a <GetPixelformat+0x172>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 8013e12:	4a25      	ldr	r2, [pc, #148]	; (8013ea8 <GetPixelformat+0x180>)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e1a:	4a2d      	ldr	r2, [pc, #180]	; (8013ed0 <GetPixelformat+0x1a8>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	bf0c      	ite	eq
 8013e20:	2301      	moveq	r3, #1
 8013e22:	2300      	movne	r3, #0
 8013e24:	b2da      	uxtb	r2, r3
 8013e26:	4920      	ldr	r1, [pc, #128]	; (8013ea8 <GetPixelformat+0x180>)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013e2e:	4929      	ldr	r1, [pc, #164]	; (8013ed4 <GetPixelformat+0x1ac>)
 8013e30:	428b      	cmp	r3, r1
 8013e32:	bf0c      	ite	eq
 8013e34:	2301      	moveq	r3, #1
 8013e36:	2300      	movne	r3, #0
 8013e38:	b2db      	uxtb	r3, r3
 8013e3a:	4313      	orrs	r3, r2
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	4619      	mov	r1, r3
 8013e40:	4a19      	ldr	r2, [pc, #100]	; (8013ea8 <GetPixelformat+0x180>)
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e48:	4a23      	ldr	r2, [pc, #140]	; (8013ed8 <GetPixelformat+0x1b0>)
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	bf0c      	ite	eq
 8013e4e:	2301      	moveq	r3, #1
 8013e50:	2300      	movne	r3, #0
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	430b      	orrs	r3, r1
 8013e56:	4914      	ldr	r1, [pc, #80]	; (8013ea8 <GetPixelformat+0x180>)
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013e5e:	491f      	ldr	r1, [pc, #124]	; (8013edc <GetPixelformat+0x1b4>)
 8013e60:	428a      	cmp	r2, r1
 8013e62:	bf0c      	ite	eq
 8013e64:	2201      	moveq	r2, #1
 8013e66:	2200      	movne	r2, #0
 8013e68:	b2d2      	uxtb	r2, r2
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d001      	beq.n	8013e74 <GetPixelformat+0x14c>
    return LTDC_PIXEL_FORMAT_L8;
 8013e70:	2305      	movs	r3, #5
 8013e72:	e012      	b.n	8013e9a <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 8013e74:	4a0c      	ldr	r2, [pc, #48]	; (8013ea8 <GetPixelformat+0x180>)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e7c:	4a18      	ldr	r2, [pc, #96]	; (8013ee0 <GetPixelformat+0x1b8>)
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	d101      	bne.n	8013e86 <GetPixelformat+0x15e>
    return LTDC_PIXEL_FORMAT_AL44;
 8013e82:	2306      	movs	r3, #6
 8013e84:	e009      	b.n	8013e9a <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 8013e86:	4a08      	ldr	r2, [pc, #32]	; (8013ea8 <GetPixelformat+0x180>)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e8e:	4a15      	ldr	r2, [pc, #84]	; (8013ee4 <GetPixelformat+0x1bc>)
 8013e90:	4293      	cmp	r3, r2
 8013e92:	d101      	bne.n	8013e98 <GetPixelformat+0x170>
    return LTDC_PIXEL_FORMAT_AL88;
 8013e94:	2307      	movs	r3, #7
 8013e96:	e000      	b.n	8013e9a <GetPixelformat+0x172>
  }
  while (1); // Error
 8013e98:	e7fe      	b.n	8013e98 <GetPixelformat+0x170>
} 
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	370c      	adds	r7, #12
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea4:	4770      	bx	lr
 8013ea6:	bf00      	nop
 8013ea8:	200000c4 	.word	0x200000c4
 8013eac:	0801eeb0 	.word	0x0801eeb0
 8013eb0:	0801ef40 	.word	0x0801ef40
 8013eb4:	0801eef8 	.word	0x0801eef8
 8013eb8:	0801ef28 	.word	0x0801ef28
 8013ebc:	0801eee0 	.word	0x0801eee0
 8013ec0:	0801eec8 	.word	0x0801eec8
 8013ec4:	0801ef10 	.word	0x0801ef10
 8013ec8:	0801ee80 	.word	0x0801ee80
 8013ecc:	0801ee98 	.word	0x0801ee98
 8013ed0:	0801ee08 	.word	0x0801ee08
 8013ed4:	0801ee20 	.word	0x0801ee20
 8013ed8:	0801ee38 	.word	0x0801ee38
 8013edc:	0801ee50 	.word	0x0801ee50
 8013ee0:	0801edf0 	.word	0x0801edf0
 8013ee4:	0801ee68 	.word	0x0801ee68

08013ee8 <TransferComplete>:
  * @note   This example shows a simple way to report end of DMA2D transfer, and
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b083      	sub	sp, #12
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
  TransferInProgress = 0; 
 8013ef0:	4b04      	ldr	r3, [pc, #16]	; (8013f04 <TransferComplete+0x1c>)
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	701a      	strb	r2, [r3, #0]
}
 8013ef6:	bf00      	nop
 8013ef8:	370c      	adds	r7, #12
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop
 8013f04:	200210f8 	.word	0x200210f8

08013f08 <DMA2D_Init>:
  * @brief  Initialize the DMA2D.
  * @param  None
  * @retval None
  */
void DMA2D_Init(void) 
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	af00      	add	r7, sp, #0
   /* Configure the DMA2D transfer complete callback mode */ 
	hdma2d.XferCpltCallback  = TransferComplete;	
 8013f0c:	4b0a      	ldr	r3, [pc, #40]	; (8013f38 <DMA2D_Init+0x30>)
 8013f0e:	4a0b      	ldr	r2, [pc, #44]	; (8013f3c <DMA2D_Init+0x34>)
 8013f10:	611a      	str	r2, [r3, #16]
	
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8013f12:	4809      	ldr	r0, [pc, #36]	; (8013f38 <DMA2D_Init+0x30>)
 8013f14:	f7ef ffc0 	bl	8003e98 <HAL_DMA2D_Init>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d001      	beq.n	8013f22 <DMA2D_Init+0x1a>
  {
    Error_Handler( );
 8013f1e:	f7ed fefd 	bl	8001d1c <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8013f22:	2101      	movs	r1, #1
 8013f24:	4804      	ldr	r0, [pc, #16]	; (8013f38 <DMA2D_Init+0x30>)
 8013f26:	f7f0 f911 	bl	800414c <HAL_DMA2D_ConfigLayer>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d001      	beq.n	8013f34 <DMA2D_Init+0x2c>
  {
    Error_Handler( );
 8013f30:	f7ed fef4 	bl	8001d1c <Error_Handler>
  }

}
 8013f34:	bf00      	nop
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	20021c7c 	.word	0x20021c7c
 8013f3c:	08013ee9 	.word	0x08013ee9

08013f40 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
 8013f4c:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  _DMA_ExecOperation();
 8013f4e:	f7ff fed5 	bl	8013cfc <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 8013f52:	4b17      	ldr	r3, [pc, #92]	; (8013fb0 <DMA2D_CopyBuffer+0x70>)
 8013f54:	2201      	movs	r2, #1
 8013f56:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	f7ff fee5 	bl	8013d28 <GetPixelformat>
 8013f5e:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8013f60:	4b14      	ldr	r3, [pc, #80]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f66:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8013f68:	4a12      	ldr	r2, [pc, #72]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8013f6e:	4a11      	ldr	r2, [pc, #68]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8013f74:	4a0f      	ldr	r2, [pc, #60]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f78:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 8013f7a:	4a0e      	ldr	r2, [pc, #56]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 8013f80:	4a0c      	ldr	r2, [pc, #48]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	041b      	lsls	r3, r3, #16
 8013f8a:	6a3a      	ldr	r2, [r7, #32]
 8013f8c:	b292      	uxth	r2, r2
 8013f8e:	4611      	mov	r1, r2
 8013f90:	4a08      	ldr	r2, [pc, #32]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f92:	430b      	orrs	r3, r1
 8013f94:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8013f96:	4b07      	ldr	r3, [pc, #28]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	4a06      	ldr	r2, [pc, #24]	; (8013fb4 <DMA2D_CopyBuffer+0x74>)
 8013f9c:	f043 0301 	orr.w	r3, r3, #1
 8013fa0:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 8013fa2:	f7ff feab 	bl	8013cfc <_DMA_ExecOperation>

}
 8013fa6:	bf00      	nop
 8013fa8:	3718      	adds	r7, #24
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	200210f8 	.word	0x200210f8
 8013fb4:	4002b000 	.word	0x4002b000

08013fb8 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b086      	sub	sp, #24
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
 8013fc4:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 8013fc6:	f7ff fe99 	bl	8013cfc <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 8013fca:	4b1c      	ldr	r3, [pc, #112]	; (801403c <DMA2D_CopyBufferWithAlpha+0x84>)
 8013fcc:	2201      	movs	r2, #1
 8013fce:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 8013fd0:	68f8      	ldr	r0, [r7, #12]
 8013fd2:	f7ff fea9 	bl	8013d28 <GetPixelformat>
 8013fd6:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 8013fd8:	4b19      	ldr	r3, [pc, #100]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8013fda:	4a1a      	ldr	r2, [pc, #104]	; (8014044 <DMA2D_CopyBufferWithAlpha+0x8c>)
 8013fdc:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8013fde:	4a18      	ldr	r2, [pc, #96]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8013fe4:	4a16      	ldr	r2, [pc, #88]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 8013fea:	4a15      	ldr	r2, [pc, #84]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6153      	str	r3, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 8013ff0:	4a13      	ldr	r2, [pc, #76]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8013ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff4:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 8013ff6:	4a12      	ldr	r2, [pc, #72]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8013ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ffa:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 8013ffc:	4a10      	ldr	r2, [pc, #64]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8013ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014000:	6193      	str	r3, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 8014002:	4b0f      	ldr	r3, [pc, #60]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8014004:	2200      	movs	r2, #0
 8014006:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = PixelFormat;
 8014008:	4a0d      	ldr	r2, [pc, #52]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 801400e:	4a0c      	ldr	r2, [pc, #48]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	041b      	lsls	r3, r3, #16
 8014018:	6a3a      	ldr	r2, [r7, #32]
 801401a:	b292      	uxth	r2, r2
 801401c:	4611      	mov	r1, r2
 801401e:	4a08      	ldr	r2, [pc, #32]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8014020:	430b      	orrs	r3, r1
 8014022:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8014024:	4b06      	ldr	r3, [pc, #24]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4a05      	ldr	r2, [pc, #20]	; (8014040 <DMA2D_CopyBufferWithAlpha+0x88>)
 801402a:	f043 0301 	orr.w	r3, r3, #1
 801402e:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 8014030:	f7ff fe64 	bl	8013cfc <_DMA_ExecOperation>
}
 8014034:	bf00      	nop
 8014036:	3718      	adds	r7, #24
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	200210f8 	.word	0x200210f8
 8014040:	4002b000 	.word	0x4002b000
 8014044:	00020200 	.word	0x00020200

08014048 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b086      	sub	sp, #24
 801404c:	af00      	add	r7, sp, #0
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	60b9      	str	r1, [r7, #8]
 8014052:	607a      	str	r2, [r7, #4]
 8014054:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  _DMA_ExecOperation();
 8014056:	f7ff fe51 	bl	8013cfc <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 801405a:	4b15      	ldr	r3, [pc, #84]	; (80140b0 <DMA2D_FillBuffer+0x68>)
 801405c:	2201      	movs	r2, #1
 801405e:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 8014060:	68f8      	ldr	r0, [r7, #12]
 8014062:	f7ff fe61 	bl	8013d28 <GetPixelformat>
 8014066:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8014068:	4b12      	ldr	r3, [pc, #72]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 801406a:	4a13      	ldr	r2, [pc, #76]	; (80140b8 <DMA2D_FillBuffer+0x70>)
 801406c:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 801406e:	4a11      	ldr	r2, [pc, #68]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 8014070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014072:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 8014074:	4a0f      	ldr	r2, [pc, #60]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 801407a:	4a0e      	ldr	r2, [pc, #56]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 801407c:	6a3b      	ldr	r3, [r7, #32]
 801407e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 8014080:	4a0c      	ldr	r2, [pc, #48]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	041b      	lsls	r3, r3, #16
 801408a:	683a      	ldr	r2, [r7, #0]
 801408c:	b292      	uxth	r2, r2
 801408e:	4611      	mov	r1, r2
 8014090:	4a08      	ldr	r2, [pc, #32]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 8014092:	430b      	orrs	r3, r1
 8014094:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 8014096:	4b07      	ldr	r3, [pc, #28]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 8014098:	681a      	ldr	r2, [r3, #0]
 801409a:	4906      	ldr	r1, [pc, #24]	; (80140b4 <DMA2D_FillBuffer+0x6c>)
 801409c:	f240 2301 	movw	r3, #513	; 0x201
 80140a0:	4313      	orrs	r3, r2
 80140a2:	600b      	str	r3, [r1, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 80140a4:	f7ff fe2a 	bl	8013cfc <_DMA_ExecOperation>
}
 80140a8:	bf00      	nop
 80140aa:	3718      	adds	r7, #24
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	200210f8 	.word	0x200210f8
 80140b4:	4002b000 	.word	0x4002b000
 80140b8:	00030200 	.word	0x00030200

080140bc <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 80140bc:	b580      	push	{r7, lr}
 80140be:	b084      	sub	sp, #16
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	603b      	str	r3, [r7, #0]

  /* Set up mode */
  _DMA_ExecOperation();
 80140ca:	f7ff fe17 	bl	8013cfc <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 80140ce:	4b16      	ldr	r3, [pc, #88]	; (8014128 <_DMA_ConvertColor+0x6c>)
 80140d0:	2201      	movs	r2, #1
 80140d2:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 80140d4:	4b15      	ldr	r3, [pc, #84]	; (801412c <_DMA_ConvertColor+0x70>)
 80140d6:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 80140da:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 80140dc:	4a13      	ldr	r2, [pc, #76]	; (801412c <_DMA_ConvertColor+0x70>)
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 80140e2:	4a12      	ldr	r2, [pc, #72]	; (801412c <_DMA_ConvertColor+0x70>)
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 80140e8:	4b10      	ldr	r3, [pc, #64]	; (801412c <_DMA_ConvertColor+0x70>)
 80140ea:	2200      	movs	r2, #0
 80140ec:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 80140ee:	4b0f      	ldr	r3, [pc, #60]	; (801412c <_DMA_ConvertColor+0x70>)
 80140f0:	2200      	movs	r2, #0
 80140f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 80140f4:	4a0d      	ldr	r2, [pc, #52]	; (801412c <_DMA_ConvertColor+0x70>)
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 80140fa:	4a0c      	ldr	r2, [pc, #48]	; (801412c <_DMA_ConvertColor+0x70>)
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	041b      	lsls	r3, r3, #16
 8014104:	4a09      	ldr	r2, [pc, #36]	; (801412c <_DMA_ConvertColor+0x70>)
 8014106:	f043 0301 	orr.w	r3, r3, #1
 801410a:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 801410c:	4b07      	ldr	r3, [pc, #28]	; (801412c <_DMA_ConvertColor+0x70>)
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	4906      	ldr	r1, [pc, #24]	; (801412c <_DMA_ConvertColor+0x70>)
 8014112:	f240 2301 	movw	r3, #513	; 0x201
 8014116:	4313      	orrs	r3, r2
 8014118:	600b      	str	r3, [r1, #0]
  
  _DMA_ExecOperation();
 801411a:	f7ff fdef 	bl	8013cfc <_DMA_ExecOperation>
}
 801411e:	bf00      	nop
 8014120:	3710      	adds	r7, #16
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	200210f8 	.word	0x200210f8
 801412c:	4002b000 	.word	0x4002b000

08014130 <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8014130:	b580      	push	{r7, lr}
 8014132:	b086      	sub	sp, #24
 8014134:	af02      	add	r7, sp, #8
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
 801413c:	70fb      	strb	r3, [r7, #3]
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	9300      	str	r3, [sp, #0]
 8014142:	2300      	movs	r3, #0
 8014144:	69ba      	ldr	r2, [r7, #24]
 8014146:	68b9      	ldr	r1, [r7, #8]
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f7ff ffb7 	bl	80140bc <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 801414e:	bf00      	nop
 8014150:	3710      	adds	r7, #16
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8014156:	b580      	push	{r7, lr}
 8014158:	b086      	sub	sp, #24
 801415a:	af02      	add	r7, sp, #8
 801415c:	60f8      	str	r0, [r7, #12]
 801415e:	60b9      	str	r1, [r7, #8]
 8014160:	607a      	str	r2, [r7, #4]
 8014162:	70fb      	strb	r3, [r7, #3]
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	9300      	str	r3, [sp, #0]
 8014168:	69bb      	ldr	r3, [r7, #24]
 801416a:	2200      	movs	r2, #0
 801416c:	68b9      	ldr	r1, [r7, #8]
 801416e:	68f8      	ldr	r0, [r7, #12]
 8014170:	f7ff ffa4 	bl	80140bc <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 8014174:	bf00      	nop
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 801417c:	b480      	push	{r7}
 801417e:	b083      	sub	sp, #12
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 8014184:	4912      	ldr	r1, [pc, #72]	; (80141d0 <GetBufferSize+0x54>)
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	4613      	mov	r3, r2
 801418a:	00db      	lsls	r3, r3, #3
 801418c:	1a9b      	subs	r3, r3, r2
 801418e:	009b      	lsls	r3, r3, #2
 8014190:	440b      	add	r3, r1
 8014192:	330c      	adds	r3, #12
 8014194:	6819      	ldr	r1, [r3, #0]
 8014196:	480e      	ldr	r0, [pc, #56]	; (80141d0 <GetBufferSize+0x54>)
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	4613      	mov	r3, r2
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	1a9b      	subs	r3, r3, r2
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	4403      	add	r3, r0
 80141a4:	3310      	adds	r3, #16
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	fb03 f101 	mul.w	r1, r3, r1
 80141ac:	4808      	ldr	r0, [pc, #32]	; (80141d0 <GetBufferSize+0x54>)
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	4613      	mov	r3, r2
 80141b2:	00db      	lsls	r3, r3, #3
 80141b4:	1a9b      	subs	r3, r3, r2
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	4403      	add	r3, r0
 80141ba:	3314      	adds	r3, #20
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	fb03 f301 	mul.w	r3, r3, r1
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	370c      	adds	r7, #12
 80141c6:	46bd      	mov	sp, r7
 80141c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141cc:	4770      	bx	lr
 80141ce:	bf00      	nop
 80141d0:	200210dc 	.word	0x200210dc

080141d4 <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 80141d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141d6:	b08d      	sub	sp, #52	; 0x34
 80141d8:	af04      	add	r7, sp, #16
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7ff ffca 	bl	801417c <GetBufferSize>
 80141e8:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 80141ea:	4926      	ldr	r1, [pc, #152]	; (8014284 <LCD_LL_CopyBuffer+0xb0>)
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	4613      	mov	r3, r2
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	1a9b      	subs	r3, r3, r2
 80141f4:	009b      	lsls	r3, r3, #2
 80141f6:	440b      	add	r3, r1
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	4619      	mov	r1, r3
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	69fa      	ldr	r2, [r7, #28]
 8014200:	fb02 f303 	mul.w	r3, r2, r3
 8014204:	440b      	add	r3, r1
 8014206:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 8014208:	491e      	ldr	r1, [pc, #120]	; (8014284 <LCD_LL_CopyBuffer+0xb0>)
 801420a:	68fa      	ldr	r2, [r7, #12]
 801420c:	4613      	mov	r3, r2
 801420e:	00db      	lsls	r3, r3, #3
 8014210:	1a9b      	subs	r3, r3, r2
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	440b      	add	r3, r1
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	4619      	mov	r1, r3
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	69fa      	ldr	r2, [r7, #28]
 801421e:	fb02 f303 	mul.w	r3, r2, r3
 8014222:	440b      	add	r3, r1
 8014224:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8014226:	68f8      	ldr	r0, [r7, #12]
 8014228:	69bc      	ldr	r4, [r7, #24]
 801422a:	697d      	ldr	r5, [r7, #20]
 801422c:	4915      	ldr	r1, [pc, #84]	; (8014284 <LCD_LL_CopyBuffer+0xb0>)
 801422e:	68fa      	ldr	r2, [r7, #12]
 8014230:	4613      	mov	r3, r2
 8014232:	00db      	lsls	r3, r3, #3
 8014234:	1a9b      	subs	r3, r3, r2
 8014236:	009b      	lsls	r3, r3, #2
 8014238:	440b      	add	r3, r1
 801423a:	330c      	adds	r3, #12
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	461e      	mov	r6, r3
 8014240:	4910      	ldr	r1, [pc, #64]	; (8014284 <LCD_LL_CopyBuffer+0xb0>)
 8014242:	68fa      	ldr	r2, [r7, #12]
 8014244:	4613      	mov	r3, r2
 8014246:	00db      	lsls	r3, r3, #3
 8014248:	1a9b      	subs	r3, r3, r2
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	440b      	add	r3, r1
 801424e:	3310      	adds	r3, #16
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	461a      	mov	r2, r3
 8014254:	2300      	movs	r3, #0
 8014256:	9302      	str	r3, [sp, #8]
 8014258:	2300      	movs	r3, #0
 801425a:	9301      	str	r3, [sp, #4]
 801425c:	9200      	str	r2, [sp, #0]
 801425e:	4633      	mov	r3, r6
 8014260:	462a      	mov	r2, r5
 8014262:	4621      	mov	r1, r4
 8014264:	f7ff fe6c 	bl	8013f40 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8014268:	4906      	ldr	r1, [pc, #24]	; (8014284 <LCD_LL_CopyBuffer+0xb0>)
 801426a:	68fa      	ldr	r2, [r7, #12]
 801426c:	4613      	mov	r3, r2
 801426e:	00db      	lsls	r3, r3, #3
 8014270:	1a9b      	subs	r3, r3, r2
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	440b      	add	r3, r1
 8014276:	3308      	adds	r3, #8
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	601a      	str	r2, [r3, #0]
}
 801427c:	bf00      	nop
 801427e:	3724      	adds	r7, #36	; 0x24
 8014280:	46bd      	mov	sp, r7
 8014282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014284:	200210dc 	.word	0x200210dc

08014288 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 8014288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801428a:	b08f      	sub	sp, #60	; 0x3c
 801428c:	af04      	add	r7, sp, #16
 801428e:	6178      	str	r0, [r7, #20]
 8014290:	6139      	str	r1, [r7, #16]
 8014292:	60fa      	str	r2, [r7, #12]
 8014294:	60bb      	str	r3, [r7, #8]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	4618      	mov	r0, r3
 801429a:	f7ff ff6f 	bl	801417c <GetBufferSize>
 801429e:	6278      	str	r0, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80142a0:	4942      	ldr	r1, [pc, #264]	; (80143ac <LCD_LL_CopyRect+0x124>)
 80142a2:	697a      	ldr	r2, [r7, #20]
 80142a4:	4613      	mov	r3, r2
 80142a6:	00db      	lsls	r3, r3, #3
 80142a8:	1a9b      	subs	r3, r3, r2
 80142aa:	009b      	lsls	r3, r3, #2
 80142ac:	440b      	add	r3, r1
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	461c      	mov	r4, r3
 80142b2:	493e      	ldr	r1, [pc, #248]	; (80143ac <LCD_LL_CopyRect+0x124>)
 80142b4:	697a      	ldr	r2, [r7, #20]
 80142b6:	4613      	mov	r3, r2
 80142b8:	00db      	lsls	r3, r3, #3
 80142ba:	1a9b      	subs	r3, r3, r2
 80142bc:	009b      	lsls	r3, r3, #2
 80142be:	440b      	add	r3, r1
 80142c0:	330c      	adds	r3, #12
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	68fa      	ldr	r2, [r7, #12]
 80142c6:	fb02 f203 	mul.w	r2, r2, r3
 80142ca:	693b      	ldr	r3, [r7, #16]
 80142cc:	18d1      	adds	r1, r2, r3
 80142ce:	4837      	ldr	r0, [pc, #220]	; (80143ac <LCD_LL_CopyRect+0x124>)
 80142d0:	697a      	ldr	r2, [r7, #20]
 80142d2:	4613      	mov	r3, r2
 80142d4:	00db      	lsls	r3, r3, #3
 80142d6:	1a9b      	subs	r3, r3, r2
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	4403      	add	r3, r0
 80142dc:	3314      	adds	r3, #20
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	fb03 f301 	mul.w	r3, r3, r1
 80142e4:	4618      	mov	r0, r3
 80142e6:	4931      	ldr	r1, [pc, #196]	; (80143ac <LCD_LL_CopyRect+0x124>)
 80142e8:	697a      	ldr	r2, [r7, #20]
 80142ea:	4613      	mov	r3, r2
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	1a9b      	subs	r3, r3, r2
 80142f0:	009b      	lsls	r3, r3, #2
 80142f2:	440b      	add	r3, r1
 80142f4:	3304      	adds	r3, #4
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	461a      	mov	r2, r3
 80142fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fc:	fb03 f302 	mul.w	r3, r3, r2
 8014300:	4403      	add	r3, r0
 8014302:	4423      	add	r3, r4
 8014304:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8014306:	4929      	ldr	r1, [pc, #164]	; (80143ac <LCD_LL_CopyRect+0x124>)
 8014308:	697a      	ldr	r2, [r7, #20]
 801430a:	4613      	mov	r3, r2
 801430c:	00db      	lsls	r3, r3, #3
 801430e:	1a9b      	subs	r3, r3, r2
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	440b      	add	r3, r1
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	461c      	mov	r4, r3
 8014318:	4924      	ldr	r1, [pc, #144]	; (80143ac <LCD_LL_CopyRect+0x124>)
 801431a:	697a      	ldr	r2, [r7, #20]
 801431c:	4613      	mov	r3, r2
 801431e:	00db      	lsls	r3, r3, #3
 8014320:	1a9b      	subs	r3, r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	440b      	add	r3, r1
 8014326:	330c      	adds	r3, #12
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801432c:	fb02 f203 	mul.w	r2, r2, r3
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	18d1      	adds	r1, r2, r3
 8014334:	481d      	ldr	r0, [pc, #116]	; (80143ac <LCD_LL_CopyRect+0x124>)
 8014336:	697a      	ldr	r2, [r7, #20]
 8014338:	4613      	mov	r3, r2
 801433a:	00db      	lsls	r3, r3, #3
 801433c:	1a9b      	subs	r3, r3, r2
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	4403      	add	r3, r0
 8014342:	3314      	adds	r3, #20
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	fb03 f301 	mul.w	r3, r3, r1
 801434a:	4618      	mov	r0, r3
 801434c:	4917      	ldr	r1, [pc, #92]	; (80143ac <LCD_LL_CopyRect+0x124>)
 801434e:	697a      	ldr	r2, [r7, #20]
 8014350:	4613      	mov	r3, r2
 8014352:	00db      	lsls	r3, r3, #3
 8014354:	1a9b      	subs	r3, r3, r2
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	440b      	add	r3, r1
 801435a:	3304      	adds	r3, #4
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	461a      	mov	r2, r3
 8014360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014362:	fb03 f302 	mul.w	r3, r3, r2
 8014366:	4403      	add	r3, r0
 8014368:	4423      	add	r3, r4
 801436a:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 801436c:	697c      	ldr	r4, [r7, #20]
 801436e:	6a3d      	ldr	r5, [r7, #32]
 8014370:	69fe      	ldr	r6, [r7, #28]
 8014372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014374:	607b      	str	r3, [r7, #4]
 8014376:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014378:	480c      	ldr	r0, [pc, #48]	; (80143ac <LCD_LL_CopyRect+0x124>)
 801437a:	697a      	ldr	r2, [r7, #20]
 801437c:	4613      	mov	r3, r2
 801437e:	00db      	lsls	r3, r3, #3
 8014380:	1a9b      	subs	r3, r3, r2
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	4403      	add	r3, r0
 8014386:	330c      	adds	r3, #12
 8014388:	681a      	ldr	r2, [r3, #0]
 801438a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801438c:	1ad3      	subs	r3, r2, r3
 801438e:	461a      	mov	r2, r3
 8014390:	2300      	movs	r3, #0
 8014392:	9302      	str	r3, [sp, #8]
 8014394:	9201      	str	r2, [sp, #4]
 8014396:	9100      	str	r1, [sp, #0]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	4632      	mov	r2, r6
 801439c:	4629      	mov	r1, r5
 801439e:	4620      	mov	r0, r4
 80143a0:	f7ff fdce 	bl	8013f40 <DMA2D_CopyBuffer>
}
 80143a4:	bf00      	nop
 80143a6:	372c      	adds	r7, #44	; 0x2c
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ac:	200210dc 	.word	0x200210dc

080143b0 <LCD_LL_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void LCD_LL_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 80143b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143b2:	b08b      	sub	sp, #44	; 0x2c
 80143b4:	af02      	add	r7, sp, #8
 80143b6:	60f8      	str	r0, [r7, #12]
 80143b8:	60b9      	str	r1, [r7, #8]
 80143ba:	607a      	str	r2, [r7, #4]
 80143bc:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 80143be:	f002 f8c1 	bl	8016544 <GUI_GetDrawMode>
 80143c2:	4603      	mov	r3, r0
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d110      	bne.n	80143ea <LCD_LL_FillRect+0x3a>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80143c8:	2200      	movs	r2, #0
 80143ca:	2119      	movs	r1, #25
 80143cc:	68f8      	ldr	r0, [r7, #12]
 80143ce:	f004 f9bc 	bl	801874a <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80143d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d4:	683a      	ldr	r2, [r7, #0]
 80143d6:	6879      	ldr	r1, [r7, #4]
 80143d8:	68b8      	ldr	r0, [r7, #8]
 80143da:	f003 fbd7 	bl	8017b8c <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 80143de:	4a32      	ldr	r2, [pc, #200]	; (80144a8 <LCD_LL_FillRect+0xf8>)
 80143e0:	2119      	movs	r1, #25
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	f004 f9b1 	bl	801874a <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }	
}
 80143e8:	e059      	b.n	801449e <LCD_LL_FillRect+0xee>
    xSize = x1 - x0 + 1;
 80143ea:	683a      	ldr	r2, [r7, #0]
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	1ad3      	subs	r3, r2, r3
 80143f0:	3301      	adds	r3, #1
 80143f2:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 80143f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	1ad3      	subs	r3, r2, r3
 80143fa:	3301      	adds	r3, #1
 80143fc:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	4618      	mov	r0, r3
 8014402:	f7ff febb 	bl	801417c <GetBufferSize>
 8014406:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8014408:	4928      	ldr	r1, [pc, #160]	; (80144ac <LCD_LL_FillRect+0xfc>)
 801440a:	68fa      	ldr	r2, [r7, #12]
 801440c:	4613      	mov	r3, r2
 801440e:	00db      	lsls	r3, r3, #3
 8014410:	1a9b      	subs	r3, r3, r2
 8014412:	009b      	lsls	r3, r3, #2
 8014414:	440b      	add	r3, r1
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	461c      	mov	r4, r3
 801441a:	4924      	ldr	r1, [pc, #144]	; (80144ac <LCD_LL_FillRect+0xfc>)
 801441c:	68fa      	ldr	r2, [r7, #12]
 801441e:	4613      	mov	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	1a9b      	subs	r3, r3, r2
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	440b      	add	r3, r1
 8014428:	330c      	adds	r3, #12
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	687a      	ldr	r2, [r7, #4]
 801442e:	fb02 f203 	mul.w	r2, r2, r3
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	18d1      	adds	r1, r2, r3
 8014436:	481d      	ldr	r0, [pc, #116]	; (80144ac <LCD_LL_FillRect+0xfc>)
 8014438:	68fa      	ldr	r2, [r7, #12]
 801443a:	4613      	mov	r3, r2
 801443c:	00db      	lsls	r3, r3, #3
 801443e:	1a9b      	subs	r3, r3, r2
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	4403      	add	r3, r0
 8014444:	3314      	adds	r3, #20
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	fb03 f301 	mul.w	r3, r3, r1
 801444c:	4618      	mov	r0, r3
 801444e:	4917      	ldr	r1, [pc, #92]	; (80144ac <LCD_LL_FillRect+0xfc>)
 8014450:	68fa      	ldr	r2, [r7, #12]
 8014452:	4613      	mov	r3, r2
 8014454:	00db      	lsls	r3, r3, #3
 8014456:	1a9b      	subs	r3, r3, r2
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	440b      	add	r3, r1
 801445c:	3308      	adds	r3, #8
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	461a      	mov	r2, r3
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	fb03 f302 	mul.w	r3, r3, r2
 8014468:	4403      	add	r3, r0
 801446a:	4423      	add	r3, r4
 801446c:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 801446e:	68f8      	ldr	r0, [r7, #12]
 8014470:	693c      	ldr	r4, [r7, #16]
 8014472:	69fd      	ldr	r5, [r7, #28]
 8014474:	69be      	ldr	r6, [r7, #24]
 8014476:	490d      	ldr	r1, [pc, #52]	; (80144ac <LCD_LL_FillRect+0xfc>)
 8014478:	68fa      	ldr	r2, [r7, #12]
 801447a:	4613      	mov	r3, r2
 801447c:	00db      	lsls	r3, r3, #3
 801447e:	1a9b      	subs	r3, r3, r2
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	440b      	add	r3, r1
 8014484:	330c      	adds	r3, #12
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	1ad3      	subs	r3, r2, r3
 801448c:	461a      	mov	r2, r3
 801448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014490:	9301      	str	r3, [sp, #4]
 8014492:	9200      	str	r2, [sp, #0]
 8014494:	4633      	mov	r3, r6
 8014496:	462a      	mov	r2, r5
 8014498:	4621      	mov	r1, r4
 801449a:	f7ff fdd5 	bl	8014048 <DMA2D_FillBuffer>
}
 801449e:	bf00      	nop
 80144a0:	3724      	adds	r7, #36	; 0x24
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a6:	bf00      	nop
 80144a8:	080143b1 	.word	0x080143b1
 80144ac:	200210dc 	.word	0x200210dc

080144b0 <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	607a      	str	r2, [r7, #4]
 80144bc:	603b      	str	r3, [r7, #0]
	
  _DMA_ExecOperation();
 80144be:	f7ff fc1d 	bl	8013cfc <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 80144c2:	4b15      	ldr	r3, [pc, #84]	; (8014518 <DMA2D_DrawBitmapL8+0x68>)
 80144c4:	2201      	movs	r2, #1
 80144c6:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 80144c8:	4b14      	ldr	r3, [pc, #80]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144ca:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 80144ce:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 80144d0:	4a12      	ldr	r2, [pc, #72]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 80144d6:	4a11      	ldr	r2, [pc, #68]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 80144dc:	4a0f      	ldr	r2, [pc, #60]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 80144e2:	4a0e      	ldr	r2, [pc, #56]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 80144e8:	4b0c      	ldr	r3, [pc, #48]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144ea:	2205      	movs	r2, #5
 80144ec:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 80144ee:	4a0b      	ldr	r2, [pc, #44]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	041a      	lsls	r2, r3, #16
 80144f8:	4908      	ldr	r1, [pc, #32]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	4313      	orrs	r3, r2
 80144fe:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 8014500:	4b06      	ldr	r3, [pc, #24]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	4a05      	ldr	r2, [pc, #20]	; (801451c <DMA2D_DrawBitmapL8+0x6c>)
 8014506:	f043 0301 	orr.w	r3, r3, #1
 801450a:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 801450c:	f7ff fbf6 	bl	8013cfc <_DMA_ExecOperation>
}
 8014510:	bf00      	nop
 8014512:	3710      	adds	r7, #16
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	200210f8 	.word	0x200210f8
 801451c:	4002b000 	.word	0x4002b000

08014520 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	607a      	str	r2, [r7, #4]
 801452c:	603b      	str	r3, [r7, #0]

  _DMA_ExecOperation();
 801452e:	f7ff fbe5 	bl	8013cfc <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 8014532:	4b1b      	ldr	r3, [pc, #108]	; (80145a0 <_DMA_DrawAlphaBitmap+0x80>)
 8014534:	2201      	movs	r2, #1
 8014536:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8014538:	4b1a      	ldr	r3, [pc, #104]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 801453a:	4a1b      	ldr	r2, [pc, #108]	; (80145a8 <_DMA_DrawAlphaBitmap+0x88>)
 801453c:	601a      	str	r2, [r3, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 801453e:	4a19      	ldr	r2, [pc, #100]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 8014544:	4a17      	ldr	r2, [pc, #92]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 801454a:	4a16      	ldr	r2, [pc, #88]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 8014550:	4a14      	ldr	r2, [pc, #80]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014552:	69bb      	ldr	r3, [r7, #24]
 8014554:	6113      	str	r3, [r2, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 8014556:	4a13      	ldr	r2, [pc, #76]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	6193      	str	r3, [r2, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 801455c:	4a11      	ldr	r2, [pc, #68]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 8014562:	4b10      	ldr	r3, [pc, #64]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014564:	2200      	movs	r2, #0
 8014566:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 8014568:	4a0e      	ldr	r2, [pc, #56]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 801456a:	6a3b      	ldr	r3, [r7, #32]
 801456c:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 801456e:	4a0d      	ldr	r2, [pc, #52]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014570:	6a3b      	ldr	r3, [r7, #32]
 8014572:	6353      	str	r3, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	041b      	lsls	r3, r3, #16
 8014578:	4619      	mov	r1, r3
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	b29b      	uxth	r3, r3
 801457e:	4a09      	ldr	r2, [pc, #36]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014580:	430b      	orrs	r3, r1
 8014582:	6453      	str	r3, [r2, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8014584:	4b07      	ldr	r3, [pc, #28]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	4906      	ldr	r1, [pc, #24]	; (80145a4 <_DMA_DrawAlphaBitmap+0x84>)
 801458a:	f240 2301 	movw	r3, #513	; 0x201
 801458e:	4313      	orrs	r3, r2
 8014590:	600b      	str	r3, [r1, #0]

_DMA_ExecOperation();  
 8014592:	f7ff fbb3 	bl	8013cfc <_DMA_ExecOperation>
}
 8014596:	bf00      	nop
 8014598:	3710      	adds	r7, #16
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	200210f8 	.word	0x200210f8
 80145a4:	4002b000 	.word	0x4002b000
 80145a8:	00020200 	.word	0x00020200

080145ac <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 80145ac:	b590      	push	{r4, r7, lr}
 80145ae:	b08f      	sub	sp, #60	; 0x3c
 80145b0:	af04      	add	r7, sp, #16
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	60b9      	str	r1, [r7, #8]
 80145b6:	607a      	str	r2, [r7, #4]
 80145b8:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	4618      	mov	r0, r3
 80145be:	f7ff fbb3 	bl	8013d28 <GetPixelformat>
 80145c2:	6278      	str	r0, [r7, #36]	; 0x24
  BufferSize = GetBufferSize(LayerIndex);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7ff fdd8 	bl	801417c <GetBufferSize>
 80145cc:	6238      	str	r0, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80145ce:	492c      	ldr	r1, [pc, #176]	; (8014680 <_LCD_DrawBitmapAlpha+0xd4>)
 80145d0:	68fa      	ldr	r2, [r7, #12]
 80145d2:	4613      	mov	r3, r2
 80145d4:	00db      	lsls	r3, r3, #3
 80145d6:	1a9b      	subs	r3, r3, r2
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	440b      	add	r3, r1
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	461c      	mov	r4, r3
 80145e0:	4927      	ldr	r1, [pc, #156]	; (8014680 <_LCD_DrawBitmapAlpha+0xd4>)
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	4613      	mov	r3, r2
 80145e6:	00db      	lsls	r3, r3, #3
 80145e8:	1a9b      	subs	r3, r3, r2
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	440b      	add	r3, r1
 80145ee:	330c      	adds	r3, #12
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	687a      	ldr	r2, [r7, #4]
 80145f4:	fb02 f203 	mul.w	r2, r2, r3
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	18d1      	adds	r1, r2, r3
 80145fc:	4820      	ldr	r0, [pc, #128]	; (8014680 <_LCD_DrawBitmapAlpha+0xd4>)
 80145fe:	68fa      	ldr	r2, [r7, #12]
 8014600:	4613      	mov	r3, r2
 8014602:	00db      	lsls	r3, r3, #3
 8014604:	1a9b      	subs	r3, r3, r2
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4403      	add	r3, r0
 801460a:	3314      	adds	r3, #20
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	fb03 f301 	mul.w	r3, r3, r1
 8014612:	4618      	mov	r0, r3
 8014614:	491a      	ldr	r1, [pc, #104]	; (8014680 <_LCD_DrawBitmapAlpha+0xd4>)
 8014616:	68fa      	ldr	r2, [r7, #12]
 8014618:	4613      	mov	r3, r2
 801461a:	00db      	lsls	r3, r3, #3
 801461c:	1a9b      	subs	r3, r3, r2
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	440b      	add	r3, r1
 8014622:	3308      	adds	r3, #8
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	461a      	mov	r2, r3
 8014628:	6a3b      	ldr	r3, [r7, #32]
 801462a:	fb03 f302 	mul.w	r3, r3, r2
 801462e:	4403      	add	r3, r0
 8014630:	4423      	add	r3, r4
 8014632:	61fb      	str	r3, [r7, #28]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8014634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014636:	2b00      	cmp	r3, #0
 8014638:	da00      	bge.n	801463c <_LCD_DrawBitmapAlpha+0x90>
 801463a:	3303      	adds	r3, #3
 801463c:	109b      	asrs	r3, r3, #2
 801463e:	461a      	mov	r2, r3
 8014640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	61bb      	str	r3, [r7, #24]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8014646:	490e      	ldr	r1, [pc, #56]	; (8014680 <_LCD_DrawBitmapAlpha+0xd4>)
 8014648:	68fa      	ldr	r2, [r7, #12]
 801464a:	4613      	mov	r3, r2
 801464c:	00db      	lsls	r3, r3, #3
 801464e:	1a9b      	subs	r3, r3, r2
 8014650:	009b      	lsls	r3, r3, #2
 8014652:	440b      	add	r3, r1
 8014654:	330c      	adds	r3, #12
 8014656:	681a      	ldr	r2, [r3, #0]
 8014658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801465a:	1ad3      	subs	r3, r2, r3
 801465c:	617b      	str	r3, [r7, #20]
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 801465e:	69f8      	ldr	r0, [r7, #28]
 8014660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014662:	9302      	str	r3, [sp, #8]
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	9301      	str	r3, [sp, #4]
 8014668:	69bb      	ldr	r3, [r7, #24]
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801466e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	f7ff ff55 	bl	8014520 <_DMA_DrawAlphaBitmap>
}
 8014676:	bf00      	nop
 8014678:	372c      	adds	r7, #44	; 0x2c
 801467a:	46bd      	mov	sp, r7
 801467c:	bd90      	pop	{r4, r7, pc}
 801467e:	bf00      	nop
 8014680:	200210dc 	.word	0x200210dc

08014684 <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 8014684:	b580      	push	{r7, lr}
 8014686:	b08a      	sub	sp, #40	; 0x28
 8014688:	af04      	add	r7, sp, #16
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	60b9      	str	r1, [r7, #8]
 801468e:	607a      	str	r2, [r7, #4]
 8014690:	603b      	str	r3, [r7, #0]
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8014692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014694:	2b00      	cmp	r3, #0
 8014696:	da00      	bge.n	801469a <_LCD_DrawMemdevAlpha+0x16>
 8014698:	3303      	adds	r3, #3
 801469a:	109b      	asrs	r3, r3, #2
 801469c:	461a      	mov	r2, r3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	1ad3      	subs	r3, r2, r3
 80146a2:	617b      	str	r3, [r7, #20]
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 80146a4:	6a3b      	ldr	r3, [r7, #32]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	da00      	bge.n	80146ac <_LCD_DrawMemdevAlpha+0x28>
 80146aa:	3303      	adds	r3, #3
 80146ac:	109b      	asrs	r3, r3, #2
 80146ae:	461a      	mov	r2, r3
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	613b      	str	r3, [r7, #16]
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 80146b6:	2300      	movs	r3, #0
 80146b8:	9302      	str	r3, [sp, #8]
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	9301      	str	r3, [sp, #4]
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	9300      	str	r3, [sp, #0]
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	68b9      	ldr	r1, [r7, #8]
 80146c8:	68f8      	ldr	r0, [r7, #12]
 80146ca:	f7ff ff29 	bl	8014520 <_DMA_DrawAlphaBitmap>
}
 80146ce:	bf00      	nop
 80146d0:	3718      	adds	r7, #24
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
	...

080146d8 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 80146d8:	b5b0      	push	{r4, r5, r7, lr}
 80146da:	b08c      	sub	sp, #48	; 0x30
 80146dc:	af04      	add	r7, sp, #16
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
 80146e4:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7ff fd47 	bl	801417c <GetBufferSize>
 80146ee:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80146f0:	492c      	ldr	r1, [pc, #176]	; (80147a4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 80146f2:	68fa      	ldr	r2, [r7, #12]
 80146f4:	4613      	mov	r3, r2
 80146f6:	00db      	lsls	r3, r3, #3
 80146f8:	1a9b      	subs	r3, r3, r2
 80146fa:	009b      	lsls	r3, r3, #2
 80146fc:	440b      	add	r3, r1
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	461c      	mov	r4, r3
 8014702:	4928      	ldr	r1, [pc, #160]	; (80147a4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8014704:	68fa      	ldr	r2, [r7, #12]
 8014706:	4613      	mov	r3, r2
 8014708:	00db      	lsls	r3, r3, #3
 801470a:	1a9b      	subs	r3, r3, r2
 801470c:	009b      	lsls	r3, r3, #2
 801470e:	440b      	add	r3, r1
 8014710:	330c      	adds	r3, #12
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	687a      	ldr	r2, [r7, #4]
 8014716:	fb02 f203 	mul.w	r2, r2, r3
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	18d1      	adds	r1, r2, r3
 801471e:	4821      	ldr	r0, [pc, #132]	; (80147a4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8014720:	68fa      	ldr	r2, [r7, #12]
 8014722:	4613      	mov	r3, r2
 8014724:	00db      	lsls	r3, r3, #3
 8014726:	1a9b      	subs	r3, r3, r2
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	4403      	add	r3, r0
 801472c:	3314      	adds	r3, #20
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	fb03 f301 	mul.w	r3, r3, r1
 8014734:	4618      	mov	r0, r3
 8014736:	491b      	ldr	r1, [pc, #108]	; (80147a4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8014738:	68fa      	ldr	r2, [r7, #12]
 801473a:	4613      	mov	r3, r2
 801473c:	00db      	lsls	r3, r3, #3
 801473e:	1a9b      	subs	r3, r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	440b      	add	r3, r1
 8014744:	3308      	adds	r3, #8
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	461a      	mov	r2, r3
 801474a:	69fb      	ldr	r3, [r7, #28]
 801474c:	fb03 f302 	mul.w	r3, r3, r2
 8014750:	4403      	add	r3, r0
 8014752:	4423      	add	r3, r4
 8014754:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8014756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014758:	2b00      	cmp	r3, #0
 801475a:	da00      	bge.n	801475e <LCD_LL_DrawBitmap16bpp+0x86>
 801475c:	3301      	adds	r3, #1
 801475e:	105b      	asrs	r3, r3, #1
 8014760:	461a      	mov	r2, r3
 8014762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014764:	1ad3      	subs	r3, r2, r3
 8014766:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8014768:	490e      	ldr	r1, [pc, #56]	; (80147a4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 801476a:	68fa      	ldr	r2, [r7, #12]
 801476c:	4613      	mov	r3, r2
 801476e:	00db      	lsls	r3, r3, #3
 8014770:	1a9b      	subs	r3, r3, r2
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	440b      	add	r3, r1
 8014776:	330c      	adds	r3, #12
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801477c:	1ad3      	subs	r3, r2, r3
 801477e:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	69bc      	ldr	r4, [r7, #24]
 8014784:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8014786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014788:	697a      	ldr	r2, [r7, #20]
 801478a:	6939      	ldr	r1, [r7, #16]
 801478c:	9102      	str	r1, [sp, #8]
 801478e:	9201      	str	r2, [sp, #4]
 8014790:	9300      	str	r3, [sp, #0]
 8014792:	462b      	mov	r3, r5
 8014794:	4622      	mov	r2, r4
 8014796:	6839      	ldr	r1, [r7, #0]
 8014798:	f7ff fbd2 	bl	8013f40 <DMA2D_CopyBuffer>
}
 801479c:	bf00      	nop
 801479e:	3720      	adds	r7, #32
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bdb0      	pop	{r4, r5, r7, pc}
 80147a4:	200210dc 	.word	0x200210dc

080147a8 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 80147a8:	b5b0      	push	{r4, r5, r7, lr}
 80147aa:	b08c      	sub	sp, #48	; 0x30
 80147ac:	af04      	add	r7, sp, #16
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
 80147b4:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7ff fcdf 	bl	801417c <GetBufferSize>
 80147be:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80147c0:	492c      	ldr	r1, [pc, #176]	; (8014874 <LCD_LL_DrawBitmap32bpp+0xcc>)
 80147c2:	68fa      	ldr	r2, [r7, #12]
 80147c4:	4613      	mov	r3, r2
 80147c6:	00db      	lsls	r3, r3, #3
 80147c8:	1a9b      	subs	r3, r3, r2
 80147ca:	009b      	lsls	r3, r3, #2
 80147cc:	440b      	add	r3, r1
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	461c      	mov	r4, r3
 80147d2:	4928      	ldr	r1, [pc, #160]	; (8014874 <LCD_LL_DrawBitmap32bpp+0xcc>)
 80147d4:	68fa      	ldr	r2, [r7, #12]
 80147d6:	4613      	mov	r3, r2
 80147d8:	00db      	lsls	r3, r3, #3
 80147da:	1a9b      	subs	r3, r3, r2
 80147dc:	009b      	lsls	r3, r3, #2
 80147de:	440b      	add	r3, r1
 80147e0:	330c      	adds	r3, #12
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	687a      	ldr	r2, [r7, #4]
 80147e6:	fb02 f203 	mul.w	r2, r2, r3
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	18d1      	adds	r1, r2, r3
 80147ee:	4821      	ldr	r0, [pc, #132]	; (8014874 <LCD_LL_DrawBitmap32bpp+0xcc>)
 80147f0:	68fa      	ldr	r2, [r7, #12]
 80147f2:	4613      	mov	r3, r2
 80147f4:	00db      	lsls	r3, r3, #3
 80147f6:	1a9b      	subs	r3, r3, r2
 80147f8:	009b      	lsls	r3, r3, #2
 80147fa:	4403      	add	r3, r0
 80147fc:	3314      	adds	r3, #20
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	fb03 f301 	mul.w	r3, r3, r1
 8014804:	4618      	mov	r0, r3
 8014806:	491b      	ldr	r1, [pc, #108]	; (8014874 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8014808:	68fa      	ldr	r2, [r7, #12]
 801480a:	4613      	mov	r3, r2
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	1a9b      	subs	r3, r3, r2
 8014810:	009b      	lsls	r3, r3, #2
 8014812:	440b      	add	r3, r1
 8014814:	3308      	adds	r3, #8
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	461a      	mov	r2, r3
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	fb03 f302 	mul.w	r3, r3, r2
 8014820:	4403      	add	r3, r0
 8014822:	4423      	add	r3, r4
 8014824:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8014826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014828:	2b00      	cmp	r3, #0
 801482a:	da00      	bge.n	801482e <LCD_LL_DrawBitmap32bpp+0x86>
 801482c:	3303      	adds	r3, #3
 801482e:	109b      	asrs	r3, r3, #2
 8014830:	461a      	mov	r2, r3
 8014832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014834:	1ad3      	subs	r3, r2, r3
 8014836:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8014838:	490e      	ldr	r1, [pc, #56]	; (8014874 <LCD_LL_DrawBitmap32bpp+0xcc>)
 801483a:	68fa      	ldr	r2, [r7, #12]
 801483c:	4613      	mov	r3, r2
 801483e:	00db      	lsls	r3, r3, #3
 8014840:	1a9b      	subs	r3, r3, r2
 8014842:	009b      	lsls	r3, r3, #2
 8014844:	440b      	add	r3, r1
 8014846:	330c      	adds	r3, #12
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484c:	1ad3      	subs	r3, r2, r3
 801484e:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	69bc      	ldr	r4, [r7, #24]
 8014854:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8014856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014858:	697a      	ldr	r2, [r7, #20]
 801485a:	6939      	ldr	r1, [r7, #16]
 801485c:	9102      	str	r1, [sp, #8]
 801485e:	9201      	str	r2, [sp, #4]
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	462b      	mov	r3, r5
 8014864:	4622      	mov	r2, r4
 8014866:	6839      	ldr	r1, [r7, #0]
 8014868:	f7ff fba6 	bl	8013fb8 <DMA2D_CopyBufferWithAlpha>
}
 801486c:	bf00      	nop
 801486e:	3720      	adds	r7, #32
 8014870:	46bd      	mov	sp, r7
 8014872:	bdb0      	pop	{r4, r5, r7, pc}
 8014874:	200210dc 	.word	0x200210dc

08014878 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8014878:	b590      	push	{r4, r7, lr}
 801487a:	b08f      	sub	sp, #60	; 0x3c
 801487c:	af04      	add	r7, sp, #16
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
 8014884:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	4618      	mov	r0, r3
 801488a:	f7ff fc77 	bl	801417c <GetBufferSize>
 801488e:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8014890:	492c      	ldr	r1, [pc, #176]	; (8014944 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8014892:	68fa      	ldr	r2, [r7, #12]
 8014894:	4613      	mov	r3, r2
 8014896:	00db      	lsls	r3, r3, #3
 8014898:	1a9b      	subs	r3, r3, r2
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	440b      	add	r3, r1
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	461c      	mov	r4, r3
 80148a2:	4928      	ldr	r1, [pc, #160]	; (8014944 <LCD_LL_DrawBitmap8bpp+0xcc>)
 80148a4:	68fa      	ldr	r2, [r7, #12]
 80148a6:	4613      	mov	r3, r2
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	1a9b      	subs	r3, r3, r2
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	440b      	add	r3, r1
 80148b0:	330c      	adds	r3, #12
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	fb02 f203 	mul.w	r2, r2, r3
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	18d1      	adds	r1, r2, r3
 80148be:	4821      	ldr	r0, [pc, #132]	; (8014944 <LCD_LL_DrawBitmap8bpp+0xcc>)
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	4613      	mov	r3, r2
 80148c4:	00db      	lsls	r3, r3, #3
 80148c6:	1a9b      	subs	r3, r3, r2
 80148c8:	009b      	lsls	r3, r3, #2
 80148ca:	4403      	add	r3, r0
 80148cc:	3314      	adds	r3, #20
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	fb03 f301 	mul.w	r3, r3, r1
 80148d4:	4618      	mov	r0, r3
 80148d6:	491b      	ldr	r1, [pc, #108]	; (8014944 <LCD_LL_DrawBitmap8bpp+0xcc>)
 80148d8:	68fa      	ldr	r2, [r7, #12]
 80148da:	4613      	mov	r3, r2
 80148dc:	00db      	lsls	r3, r3, #3
 80148de:	1a9b      	subs	r3, r3, r2
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	440b      	add	r3, r1
 80148e4:	3308      	adds	r3, #8
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	461a      	mov	r2, r3
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ec:	fb03 f302 	mul.w	r3, r3, r2
 80148f0:	4403      	add	r3, r0
 80148f2:	4423      	add	r3, r4
 80148f4:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 80148f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80148f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fa:	1ad3      	subs	r3, r2, r3
 80148fc:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 80148fe:	4911      	ldr	r1, [pc, #68]	; (8014944 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8014900:	68fa      	ldr	r2, [r7, #12]
 8014902:	4613      	mov	r3, r2
 8014904:	00db      	lsls	r3, r3, #3
 8014906:	1a9b      	subs	r3, r3, r2
 8014908:	009b      	lsls	r3, r3, #2
 801490a:	440b      	add	r3, r1
 801490c:	330c      	adds	r3, #12
 801490e:	681a      	ldr	r2, [r3, #0]
 8014910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	61bb      	str	r3, [r7, #24]
  PixelFormat = GetPixelformat(LayerIndex);
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	4618      	mov	r0, r3
 801491a:	f7ff fa05 	bl	8013d28 <GetPixelformat>
 801491e:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8014920:	6a39      	ldr	r1, [r7, #32]
 8014922:	69f8      	ldr	r0, [r7, #28]
 8014924:	69bc      	ldr	r4, [r7, #24]
 8014926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801492a:	9202      	str	r2, [sp, #8]
 801492c:	9301      	str	r3, [sp, #4]
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	9300      	str	r3, [sp, #0]
 8014932:	4623      	mov	r3, r4
 8014934:	4602      	mov	r2, r0
 8014936:	6838      	ldr	r0, [r7, #0]
 8014938:	f7ff fdba 	bl	80144b0 <DMA2D_DrawBitmapL8>
}
 801493c:	bf00      	nop
 801493e:	372c      	adds	r7, #44	; 0x2c
 8014940:	46bd      	mov	sp, r7
 8014942:	bd90      	pop	{r4, r7, pc}
 8014944:	200210dc 	.word	0x200210dc

08014948 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) 
{
 8014948:	b590      	push	{r4, r7, lr}
 801494a:	b085      	sub	sp, #20
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8014950:	2300      	movs	r3, #0
 8014952:	60fb      	str	r3, [r7, #12]
 8014954:	e06b      	b.n	8014a2e <HAL_LTDC_LineEventCallback+0xe6>
  {
    if (layer_prop[layer].pending_buffer >= 0) 
 8014956:	493b      	ldr	r1, [pc, #236]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 8014958:	68fa      	ldr	r2, [r7, #12]
 801495a:	4613      	mov	r3, r2
 801495c:	00db      	lsls	r3, r3, #3
 801495e:	1a9b      	subs	r3, r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	440b      	add	r3, r1
 8014964:	3304      	adds	r3, #4
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2b00      	cmp	r3, #0
 801496a:	db5d      	blt.n	8014a28 <HAL_LTDC_LineEventCallback+0xe0>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + \
 801496c:	4935      	ldr	r1, [pc, #212]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 801496e:	68fa      	ldr	r2, [r7, #12]
 8014970:	4613      	mov	r3, r2
 8014972:	00db      	lsls	r3, r3, #3
 8014974:	1a9b      	subs	r3, r3, r2
 8014976:	009b      	lsls	r3, r3, #2
 8014978:	440b      	add	r3, r1
 801497a:	6819      	ldr	r1, [r3, #0]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 801497c:	4831      	ldr	r0, [pc, #196]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 801497e:	68fa      	ldr	r2, [r7, #12]
 8014980:	4613      	mov	r3, r2
 8014982:	00db      	lsls	r3, r3, #3
 8014984:	1a9b      	subs	r3, r3, r2
 8014986:	009b      	lsls	r3, r3, #2
 8014988:	4403      	add	r3, r0
 801498a:	330c      	adds	r3, #12
 801498c:	6818      	ldr	r0, [r3, #0]
 801498e:	4c2d      	ldr	r4, [pc, #180]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 8014990:	68fa      	ldr	r2, [r7, #12]
 8014992:	4613      	mov	r3, r2
 8014994:	00db      	lsls	r3, r3, #3
 8014996:	1a9b      	subs	r3, r3, r2
 8014998:	009b      	lsls	r3, r3, #2
 801499a:	4423      	add	r3, r4
 801499c:	3310      	adds	r3, #16
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	fb03 f000 	mul.w	r0, r3, r0
 80149a4:	4c27      	ldr	r4, [pc, #156]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 80149a6:	68fa      	ldr	r2, [r7, #12]
 80149a8:	4613      	mov	r3, r2
 80149aa:	00db      	lsls	r3, r3, #3
 80149ac:	1a9b      	subs	r3, r3, r2
 80149ae:	009b      	lsls	r3, r3, #2
 80149b0:	4423      	add	r3, r4
 80149b2:	3304      	adds	r3, #4
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	fb03 f000 	mul.w	r0, r3, r0
 80149ba:	4c22      	ldr	r4, [pc, #136]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 80149bc:	68fa      	ldr	r2, [r7, #12]
 80149be:	4613      	mov	r3, r2
 80149c0:	00db      	lsls	r3, r3, #3
 80149c2:	1a9b      	subs	r3, r3, r2
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	4423      	add	r3, r4
 80149c8:	3314      	adds	r3, #20
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	fb03 f300 	mul.w	r3, r3, r0
      Addr = layer_prop[layer].address + \
 80149d0:	440b      	add	r3, r1
 80149d2:	60bb      	str	r3, [r7, #8]
      
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	461a      	mov	r2, r3
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	01db      	lsls	r3, r3, #7
 80149de:	4413      	add	r3, r2
 80149e0:	3384      	adds	r3, #132	; 0x84
 80149e2:	461a      	mov	r2, r3
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	6293      	str	r3, [r2, #40]	; 0x28
     
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	f042 0201 	orr.w	r2, r2, #1
 80149f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 80149f8:	68f8      	ldr	r0, [r7, #12]
 80149fa:	4912      	ldr	r1, [pc, #72]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 80149fc:	68fa      	ldr	r2, [r7, #12]
 80149fe:	4613      	mov	r3, r2
 8014a00:	00db      	lsls	r3, r3, #3
 8014a02:	1a9b      	subs	r3, r3, r2
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	440b      	add	r3, r1
 8014a08:	3304      	adds	r3, #4
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	f002 fb39 	bl	8017084 <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8014a12:	490c      	ldr	r1, [pc, #48]	; (8014a44 <HAL_LTDC_LineEventCallback+0xfc>)
 8014a14:	68fa      	ldr	r2, [r7, #12]
 8014a16:	4613      	mov	r3, r2
 8014a18:	00db      	lsls	r3, r3, #3
 8014a1a:	1a9b      	subs	r3, r3, r2
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	440b      	add	r3, r1
 8014a20:	3304      	adds	r3, #4
 8014a22:	f04f 32ff 	mov.w	r2, #4294967295
 8014a26:	601a      	str	r2, [r3, #0]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	60fb      	str	r3, [r7, #12]
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d090      	beq.n	8014956 <HAL_LTDC_LineEventCallback+0xe>
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8014a34:	2100      	movs	r1, #0
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7f2 fcbe 	bl	80073b8 <HAL_LTDC_ProgramLineEvent>
}
 8014a3c:	bf00      	nop
 8014a3e:	3714      	adds	r7, #20
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd90      	pop	{r4, r7, pc}
 8014a44:	200210dc 	.word	0x200210dc

08014a48 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
  U32 i;

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8014a4e:	2300      	movs	r3, #0
 8014a50:	607b      	str	r3, [r7, #4]
 8014a52:	e007      	b.n	8014a64 <LCD_X_Config+0x1c>
  {
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2103      	movs	r1, #3
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f002 fb27 	bl	80170ac <GUI_MULTIBUF_ConfigEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	3301      	adds	r3, #1
 8014a62:	607b      	str	r3, [r7, #4]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d0f4      	beq.n	8014a54 <LCD_X_Config+0xc>
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	4953      	ldr	r1, [pc, #332]	; (8014bbc <LCD_X_Config+0x174>)
 8014a70:	4853      	ldr	r0, [pc, #332]	; (8014bc0 <LCD_X_Config+0x178>)
 8014a72:	f002 f9bf 	bl	8016df4 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8014a76:	2000      	movs	r0, #0
 8014a78:	f003 fc62 	bl	8018340 <LCD_GetSwapXYEx>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d00e      	beq.n	8014aa0 <LCD_X_Config+0x58>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8014a82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014a86:	f44f 7188 	mov.w	r1, #272	; 0x110
 8014a8a:	2000      	movs	r0, #0
 8014a8c:	f003 fea5 	bl	80187da <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8014a90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014a94:	f44f 7188 	mov.w	r1, #272	; 0x110
 8014a98:	2000      	movs	r0, #0
 8014a9a:	f003 fecc 	bl	8018836 <LCD_SetVSizeEx>
 8014a9e:	e00d      	b.n	8014abc <LCD_X_Config+0x74>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8014aa0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014aa4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	f003 fe96 	bl	80187da <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8014aae:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014ab2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8014ab6:	2000      	movs	r0, #0
 8014ab8:	f003 febd 	bl	8018836 <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8014abc:	4b41      	ldr	r3, [pc, #260]	; (8014bc4 <LCD_X_Config+0x17c>)
 8014abe:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8014ac2:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	607b      	str	r3, [r7, #4]
 8014ac8:	e059      	b.n	8014b7e <LCD_X_Config+0x136>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8014aca:	4a3f      	ldr	r2, [pc, #252]	; (8014bc8 <LCD_X_Config+0x180>)
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014ad2:	483c      	ldr	r0, [pc, #240]	; (8014bc4 <LCD_X_Config+0x17c>)
 8014ad4:	687a      	ldr	r2, [r7, #4]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	00db      	lsls	r3, r3, #3
 8014ada:	1a9b      	subs	r3, r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	4403      	add	r3, r0
 8014ae0:	3318      	adds	r3, #24
 8014ae2:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 8014ae4:	4937      	ldr	r1, [pc, #220]	; (8014bc4 <LCD_X_Config+0x17c>)
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	4613      	mov	r3, r2
 8014aea:	00db      	lsls	r3, r3, #3
 8014aec:	1a9b      	subs	r3, r3, r2
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	440b      	add	r3, r1
 8014af2:	3304      	adds	r3, #4
 8014af4:	f04f 32ff 	mov.w	r2, #4294967295
 8014af8:	601a      	str	r2, [r3, #0]

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f003 fc13 	bl	8018328 <LCD_GetBitsPerPixelEx>
 8014b02:	4603      	mov	r3, r0
 8014b04:	10d9      	asrs	r1, r3, #3
 8014b06:	482f      	ldr	r0, [pc, #188]	; (8014bc4 <LCD_X_Config+0x17c>)
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	4613      	mov	r3, r2
 8014b0c:	00db      	lsls	r3, r3, #3
 8014b0e:	1a9b      	subs	r3, r3, r2
 8014b10:	009b      	lsls	r3, r3, #2
 8014b12:	4403      	add	r3, r0
 8014b14:	3314      	adds	r3, #20
 8014b16:	6019      	str	r1, [r3, #0]
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	4a2c      	ldr	r2, [pc, #176]	; (8014bcc <LCD_X_Config+0x184>)
 8014b1c:	2121      	movs	r1, #33	; 0x21
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f003 fe13 	bl	801874a <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	4a2a      	ldr	r2, [pc, #168]	; (8014bd0 <LCD_X_Config+0x188>)
 8014b28:	2123      	movs	r1, #35	; 0x23
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f003 fe0d 	bl	801874a <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	4a28      	ldr	r2, [pc, #160]	; (8014bd4 <LCD_X_Config+0x18c>)
 8014b34:	2119      	movs	r1, #25
 8014b36:	4618      	mov	r0, r3
 8014b38:	f003 fe07 	bl	801874a <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	4a26      	ldr	r2, [pc, #152]	; (8014bd8 <LCD_X_Config+0x190>)
 8014b40:	2125      	movs	r1, #37	; 0x25
 8014b42:	4618      	mov	r0, r3
 8014b44:	f003 fe01 	bl	801874a <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4a24      	ldr	r2, [pc, #144]	; (8014bdc <LCD_X_Config+0x194>)
 8014b4c:	2124      	movs	r1, #36	; 0x24
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f003 fdfb 	bl	801874a <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	4a22      	ldr	r2, [pc, #136]	; (8014be0 <LCD_X_Config+0x198>)
 8014b58:	2128      	movs	r1, #40	; 0x28
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f003 fdf5 	bl	801874a <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	4918      	ldr	r1, [pc, #96]	; (8014bc4 <LCD_X_Config+0x17c>)
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	4613      	mov	r3, r2
 8014b68:	00db      	lsls	r3, r3, #3
 8014b6a:	1a9b      	subs	r3, r3, r2
 8014b6c:	009b      	lsls	r3, r3, #2
 8014b6e:	440b      	add	r3, r1
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	4619      	mov	r1, r3
 8014b74:	f003 fe49 	bl	801880a <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	607b      	str	r3, [r7, #4]
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d0a2      	beq.n	8014aca <LCD_X_Config+0x82>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 8014b84:	4917      	ldr	r1, [pc, #92]	; (8014be4 <LCD_X_Config+0x19c>)
 8014b86:	4818      	ldr	r0, [pc, #96]	; (8014be8 <LCD_X_Config+0x1a0>)
 8014b88:	f000 ff12 	bl	80159b0 <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 8014b8c:	4917      	ldr	r1, [pc, #92]	; (8014bec <LCD_X_Config+0x1a4>)
 8014b8e:	4818      	ldr	r0, [pc, #96]	; (8014bf0 <LCD_X_Config+0x1a8>)
 8014b90:	f001 f96c 	bl	8015e6c <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 8014b94:	4917      	ldr	r1, [pc, #92]	; (8014bf4 <LCD_X_Config+0x1ac>)
 8014b96:	4818      	ldr	r0, [pc, #96]	; (8014bf8 <LCD_X_Config+0x1b0>)
 8014b98:	f000 ffb4 	bl	8015b04 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 8014b9c:	4917      	ldr	r1, [pc, #92]	; (8014bfc <LCD_X_Config+0x1b4>)
 8014b9e:	4818      	ldr	r0, [pc, #96]	; (8014c00 <LCD_X_Config+0x1b8>)
 8014ba0:	f001 f984 	bl	8015eac <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 8014ba4:	4917      	ldr	r1, [pc, #92]	; (8014c04 <LCD_X_Config+0x1bc>)
 8014ba6:	4818      	ldr	r0, [pc, #96]	; (8014c08 <LCD_X_Config+0x1c0>)
 8014ba8:	f000 ffc6 	bl	8015b38 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8014bac:	4917      	ldr	r1, [pc, #92]	; (8014c0c <LCD_X_Config+0x1c4>)
 8014bae:	4818      	ldr	r0, [pc, #96]	; (8014c10 <LCD_X_Config+0x1c8>)
 8014bb0:	f002 fe32 	bl	8017818 <GUI_SetFuncDrawAlpha>
}
 8014bb4:	bf00      	nop
 8014bb6:	3708      	adds	r7, #8
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	0801eeb0 	.word	0x0801eeb0
 8014bc0:	0801f2fc 	.word	0x0801f2fc
 8014bc4:	200210dc 	.word	0x200210dc
 8014bc8:	200000c4 	.word	0x200000c4
 8014bcc:	080141d5 	.word	0x080141d5
 8014bd0:	08014289 	.word	0x08014289
 8014bd4:	080143b1 	.word	0x080143b1
 8014bd8:	08014879 	.word	0x08014879
 8014bdc:	080146d9 	.word	0x080146d9
 8014be0:	080147a9 	.word	0x080147a9
 8014be4:	08013c85 	.word	0x08013c85
 8014be8:	08013c5d 	.word	0x08013c5d
 8014bec:	08013c35 	.word	0x08013c35
 8014bf0:	08013c0d 	.word	0x08013c0d
 8014bf4:	08013cd5 	.word	0x08013cd5
 8014bf8:	08013cad 	.word	0x08013cad
 8014bfc:	08013be5 	.word	0x08013be5
 8014c00:	08013bbd 	.word	0x08013bbd
 8014c04:	08013b95 	.word	0x08013b95
 8014c08:	08013b6d 	.word	0x08013b6d
 8014c0c:	080145ad 	.word	0x080145ad
 8014c10:	08014685 	.word	0x08014685

08014c14 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8014c14:	b590      	push	{r4, r7, lr}
 8014c16:	b08b      	sub	sp, #44	; 0x2c
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	60b9      	str	r1, [r7, #8]
 8014c1e:	607a      	str	r2, [r7, #4]
 int r = 0;
 8014c20:	2300      	movs	r3, #0
 8014c22:	627b      	str	r3, [r7, #36]	; 0x24
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	3b03      	subs	r3, #3
 8014c28:	2b0b      	cmp	r3, #11
 8014c2a:	f200 80f8 	bhi.w	8014e1e <LCD_X_DisplayDriver+0x20a>
 8014c2e:	a201      	add	r2, pc, #4	; (adr r2, 8014c34 <LCD_X_DisplayDriver+0x20>)
 8014c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c34:	08014c65 	.word	0x08014c65
 8014c38:	08014ccd 	.word	0x08014ccd
 8014c3c:	08014cdb 	.word	0x08014cdb
 8014c40:	08014ced 	.word	0x08014ced
 8014c44:	08014d79 	.word	0x08014d79
 8014c48:	08014d63 	.word	0x08014d63
 8014c4c:	08014cff 	.word	0x08014cff
 8014c50:	08014dc7 	.word	0x08014dc7
 8014c54:	08014e1f 	.word	0x08014e1f
 8014c58:	08014dd7 	.word	0x08014dd7
 8014c5c:	08014df3 	.word	0x08014df3
 8014c60:	08014cb5 	.word	0x08014cb5
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8014c64:	4972      	ldr	r1, [pc, #456]	; (8014e30 <LCD_X_DisplayDriver+0x21c>)
 8014c66:	68fa      	ldr	r2, [r7, #12]
 8014c68:	4613      	mov	r3, r2
 8014c6a:	00db      	lsls	r3, r3, #3
 8014c6c:	1a9b      	subs	r3, r3, r2
 8014c6e:	009b      	lsls	r3, r3, #2
 8014c70:	440b      	add	r3, r1
 8014c72:	6819      	ldr	r1, [r3, #0]
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6858      	ldr	r0, [r3, #4]
 8014c78:	4c6d      	ldr	r4, [pc, #436]	; (8014e30 <LCD_X_DisplayDriver+0x21c>)
 8014c7a:	68fa      	ldr	r2, [r7, #12]
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	00db      	lsls	r3, r3, #3
 8014c80:	1a9b      	subs	r3, r3, r2
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	4423      	add	r3, r4
 8014c86:	330c      	adds	r3, #12
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	fb03 f000 	mul.w	r0, r3, r0
 8014c8e:	4c68      	ldr	r4, [pc, #416]	; (8014e30 <LCD_X_DisplayDriver+0x21c>)
 8014c90:	68fa      	ldr	r2, [r7, #12]
 8014c92:	4613      	mov	r3, r2
 8014c94:	00db      	lsls	r3, r3, #3
 8014c96:	1a9b      	subs	r3, r3, r2
 8014c98:	009b      	lsls	r3, r3, #2
 8014c9a:	4423      	add	r3, r4
 8014c9c:	3314      	adds	r3, #20
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	fb03 f300 	mul.w	r3, r3, r0
 8014ca4:	440b      	add	r3, r1
 8014ca6:	61fb      	str	r3, [r7, #28]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8014ca8:	68fa      	ldr	r2, [r7, #12]
 8014caa:	69f9      	ldr	r1, [r7, #28]
 8014cac:	4861      	ldr	r0, [pc, #388]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014cae:	f7f2 fb4d 	bl	800734c <HAL_LTDC_SetAddress>
    break;
 8014cb2:	e0b7      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_SHOWBUFFER: 
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6819      	ldr	r1, [r3, #0]
 8014cb8:	485d      	ldr	r0, [pc, #372]	; (8014e30 <LCD_X_DisplayDriver+0x21c>)
 8014cba:	68fa      	ldr	r2, [r7, #12]
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	00db      	lsls	r3, r3, #3
 8014cc0:	1a9b      	subs	r3, r3, r2
 8014cc2:	009b      	lsls	r3, r3, #2
 8014cc4:	4403      	add	r3, r0
 8014cc6:	3304      	adds	r3, #4
 8014cc8:	6019      	str	r1, [r3, #0]
    break;
 8014cca:	e0ab      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_SETLUTENTRY: 
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8014ccc:	6879      	ldr	r1, [r7, #4]
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	4858      	ldr	r0, [pc, #352]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014cd4:	f7f2 f9de 	bl	8007094 <HAL_LTDC_ConfigCLUT>
    break;
 8014cd8:	e0a4      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_ON: 
    __HAL_LTDC_ENABLE(&hltdc);
 8014cda:	4b56      	ldr	r3, [pc, #344]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	699a      	ldr	r2, [r3, #24]
 8014ce0:	4b54      	ldr	r3, [pc, #336]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	f042 0201 	orr.w	r2, r2, #1
 8014ce8:	619a      	str	r2, [r3, #24]
    break;
 8014cea:	e09b      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_OFF: 
    __HAL_LTDC_DISABLE(&hltdc);
 8014cec:	4b51      	ldr	r3, [pc, #324]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	699a      	ldr	r2, [r3, #24]
 8014cf2:	4b50      	ldr	r3, [pc, #320]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	f022 0201 	bic.w	r2, r2, #1
 8014cfa:	619a      	str	r2, [r3, #24]
    break;
 8014cfc:	e092      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>
    
  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b01      	cmp	r3, #1
 8014d04:	d112      	bne.n	8014d2c <LCD_X_DisplayDriver+0x118>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8014d06:	4b4b      	ldr	r3, [pc, #300]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	01db      	lsls	r3, r3, #7
 8014d10:	4413      	add	r3, r2
 8014d12:	3384      	adds	r3, #132	; 0x84
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	4a47      	ldr	r2, [pc, #284]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014d18:	6812      	ldr	r2, [r2, #0]
 8014d1a:	4611      	mov	r1, r2
 8014d1c:	68fa      	ldr	r2, [r7, #12]
 8014d1e:	01d2      	lsls	r2, r2, #7
 8014d20:	440a      	add	r2, r1
 8014d22:	3284      	adds	r2, #132	; 0x84
 8014d24:	f043 0301 	orr.w	r3, r3, #1
 8014d28:	6013      	str	r3, [r2, #0]
 8014d2a:	e011      	b.n	8014d50 <LCD_X_DisplayDriver+0x13c>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8014d2c:	4b41      	ldr	r3, [pc, #260]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	461a      	mov	r2, r3
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	01db      	lsls	r3, r3, #7
 8014d36:	4413      	add	r3, r2
 8014d38:	3384      	adds	r3, #132	; 0x84
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	4a3d      	ldr	r2, [pc, #244]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014d3e:	6812      	ldr	r2, [r2, #0]
 8014d40:	4611      	mov	r1, r2
 8014d42:	68fa      	ldr	r2, [r7, #12]
 8014d44:	01d2      	lsls	r2, r2, #7
 8014d46:	440a      	add	r2, r1
 8014d48:	3284      	adds	r2, #132	; 0x84
 8014d4a:	f023 0301 	bic.w	r3, r3, #1
 8014d4e:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8014d50:	4b38      	ldr	r3, [pc, #224]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d56:	4b37      	ldr	r3, [pc, #220]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	f042 0201 	orr.w	r2, r2, #1
 8014d5e:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8014d60:	e060      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>
    
  case LCD_X_SETPOS: 
    HAL_LTDC_SetWindowPosition(&hltdc, 
                               ((LCD_X_SETPOS_INFO *)pData)->xPos, 
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8014d66:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos, 
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	4830      	ldr	r0, [pc, #192]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014d72:	f7f2 fa6f 	bl	8007254 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 8014d76:	e055      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8014d78:	f107 0214 	add.w	r2, r7, #20
 8014d7c:	f107 0318 	add.w	r3, r7, #24
 8014d80:	4619      	mov	r1, r3
 8014d82:	68f8      	ldr	r0, [r7, #12]
 8014d84:	f002 f9de 	bl	8017144 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6819      	ldr	r1, [r3, #0]
 8014d8c:	4828      	ldr	r0, [pc, #160]	; (8014e30 <LCD_X_DisplayDriver+0x21c>)
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	4613      	mov	r3, r2
 8014d92:	00db      	lsls	r3, r3, #3
 8014d94:	1a9b      	subs	r3, r3, r2
 8014d96:	009b      	lsls	r3, r3, #2
 8014d98:	4403      	add	r3, r0
 8014d9a:	330c      	adds	r3, #12
 8014d9c:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6859      	ldr	r1, [r3, #4]
 8014da2:	4823      	ldr	r0, [pc, #140]	; (8014e30 <LCD_X_DisplayDriver+0x21c>)
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	4613      	mov	r3, r2
 8014da8:	00db      	lsls	r3, r3, #3
 8014daa:	1a9b      	subs	r3, r3, r2
 8014dac:	009b      	lsls	r3, r3, #2
 8014dae:	4403      	add	r3, r0
 8014db0:	3310      	adds	r3, #16
 8014db2:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8014db4:	69bb      	ldr	r3, [r7, #24]
 8014db6:	4619      	mov	r1, r3
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	461a      	mov	r2, r3
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	481d      	ldr	r0, [pc, #116]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014dc0:	f7f2 fa48 	bl	8007254 <HAL_LTDC_SetWindowPosition>
    break;
 8014dc4:	e02e      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	68fa      	ldr	r2, [r7, #12]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	4819      	ldr	r0, [pc, #100]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014dd0:	f7f2 fa86 	bl	80072e0 <HAL_LTDC_SetAlpha>
    break;
 8014dd4:	e026      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d004      	beq.n	8014de8 <LCD_X_DisplayDriver+0x1d4>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8014dde:	68f9      	ldr	r1, [r7, #12]
 8014de0:	4814      	ldr	r0, [pc, #80]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014de2:	f7f2 f9c5 	bl	8007170 <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
    }
    break;
 8014de6:	e01d      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8014de8:	68f9      	ldr	r1, [r7, #12]
 8014dea:	4812      	ldr	r0, [pc, #72]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014dec:	f7f2 f9f9 	bl	80071e2 <HAL_LTDC_DisableColorKeying>
    break;
 8014df0:	e018      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	0c1b      	lsrs	r3, r3, #16
 8014df8:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8014e02:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	041b      	lsls	r3, r3, #16
 8014e0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8014e0e:	4313      	orrs	r3, r2
 8014e10:	623b      	str	r3, [r7, #32]
    
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8014e12:	68fa      	ldr	r2, [r7, #12]
 8014e14:	6a39      	ldr	r1, [r7, #32]
 8014e16:	4807      	ldr	r0, [pc, #28]	; (8014e34 <LCD_X_DisplayDriver+0x220>)
 8014e18:	f7f2 f8f8 	bl	800700c <HAL_LTDC_ConfigColorKeying>
    break;
 8014e1c:	e002      	b.n	8014e24 <LCD_X_DisplayDriver+0x210>

  default:
    r = -1;
 8014e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r; 
 8014e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	372c      	adds	r7, #44	; 0x2c
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd90      	pop	{r4, r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	200210dc 	.word	0x200210dc
 8014e34:	20021bd4 	.word	0x20021bd4

08014e38 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	af00      	add	r7, sp, #0
  MX_FMC_Init(); 
 8014e3c:	f7fe fbf0 	bl	8013620 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 8014e40:	f7fe fc3e 	bl	80136c0 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 8014e44:	f7fe fb68 	bl	8013518 <MX_LCD_Init>
  MX_DMA2D_Init();
 8014e48:	f7fe fc9a 	bl	8013780 <MX_DMA2D_Init>
  DMA2D_Init();
 8014e4c:	f7ff f85c 	bl	8013f08 <DMA2D_Init>
 
}
 8014e50:	bf00      	nop
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	af00      	add	r7, sp, #0
  /* Initialize the GUI */
  GUI_Init();
 8014e58:	f001 fe4e 	bl	8016af8 <GUI_Init>

   WM_MULTIBUF_Enable(1);
 8014e5c:	2001      	movs	r0, #1
 8014e5e:	f006 fda7 	bl	801b9b0 <WM_MULTIBUF_Enable>

  /* Activate the use of memory device feature */
     /* USER CODE BEGIN WM_SetCreateFlags */
      //WM_SetCreateFlags(WM_CF_MEMDEV);
    /* USER CODE END WM_SetCreateFlags */
}
 8014e62:	bf00      	nop
 8014e64:	bd80      	pop	{r7, pc}
	...

08014e68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	490e      	ldr	r1, [pc, #56]	; (8014ea8 <MX_USB_HOST_Init+0x40>)
 8014e70:	480e      	ldr	r0, [pc, #56]	; (8014eac <MX_USB_HOST_Init+0x44>)
 8014e72:	f7f9 ff6f 	bl	800ed54 <USBH_Init>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d001      	beq.n	8014e80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014e7c:	f7ec ff4e 	bl	8001d1c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014e80:	490b      	ldr	r1, [pc, #44]	; (8014eb0 <MX_USB_HOST_Init+0x48>)
 8014e82:	480a      	ldr	r0, [pc, #40]	; (8014eac <MX_USB_HOST_Init+0x44>)
 8014e84:	f7fa f801 	bl	800ee8a <USBH_RegisterClass>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d001      	beq.n	8014e92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8014e8e:	f7ec ff45 	bl	8001d1c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014e92:	4806      	ldr	r0, [pc, #24]	; (8014eac <MX_USB_HOST_Init+0x44>)
 8014e94:	f7fa f886 	bl	800efa4 <USBH_Start>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d001      	beq.n	8014ea2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8014e9e:	f7ec ff3d 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014ea2:	bf00      	nop
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	08014eb5 	.word	0x08014eb5
 8014eac:	20021cf0 	.word	0x20021cf0
 8014eb0:	200000a0 	.word	0x200000a0

08014eb4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	460b      	mov	r3, r1
 8014ebe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014ec0:	78fb      	ldrb	r3, [r7, #3]
 8014ec2:	3b01      	subs	r3, #1
 8014ec4:	2b04      	cmp	r3, #4
 8014ec6:	d819      	bhi.n	8014efc <USBH_UserProcess+0x48>
 8014ec8:	a201      	add	r2, pc, #4	; (adr r2, 8014ed0 <USBH_UserProcess+0x1c>)
 8014eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ece:	bf00      	nop
 8014ed0:	08014efd 	.word	0x08014efd
 8014ed4:	08014eed 	.word	0x08014eed
 8014ed8:	08014efd 	.word	0x08014efd
 8014edc:	08014ef5 	.word	0x08014ef5
 8014ee0:	08014ee5 	.word	0x08014ee5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014ee4:	4b09      	ldr	r3, [pc, #36]	; (8014f0c <USBH_UserProcess+0x58>)
 8014ee6:	2203      	movs	r2, #3
 8014ee8:	701a      	strb	r2, [r3, #0]
  break;
 8014eea:	e008      	b.n	8014efe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014eec:	4b07      	ldr	r3, [pc, #28]	; (8014f0c <USBH_UserProcess+0x58>)
 8014eee:	2202      	movs	r2, #2
 8014ef0:	701a      	strb	r2, [r3, #0]
  break;
 8014ef2:	e004      	b.n	8014efe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014ef4:	4b05      	ldr	r3, [pc, #20]	; (8014f0c <USBH_UserProcess+0x58>)
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	701a      	strb	r2, [r3, #0]
  break;
 8014efa:	e000      	b.n	8014efe <USBH_UserProcess+0x4a>

  default:
  break;
 8014efc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014efe:	bf00      	nop
 8014f00:	370c      	adds	r7, #12
 8014f02:	46bd      	mov	sp, r7
 8014f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f08:	4770      	bx	lr
 8014f0a:	bf00      	nop
 8014f0c:	200210f9 	.word	0x200210f9

08014f10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b08a      	sub	sp, #40	; 0x28
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f18:	f107 0314 	add.w	r3, r7, #20
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	601a      	str	r2, [r3, #0]
 8014f20:	605a      	str	r2, [r3, #4]
 8014f22:	609a      	str	r2, [r3, #8]
 8014f24:	60da      	str	r2, [r3, #12]
 8014f26:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014f30:	d13c      	bne.n	8014fac <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f32:	4b20      	ldr	r3, [pc, #128]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f36:	4a1f      	ldr	r2, [pc, #124]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f38:	f043 0301 	orr.w	r3, r3, #1
 8014f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8014f3e:	4b1d      	ldr	r3, [pc, #116]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f42:	f003 0301 	and.w	r3, r3, #1
 8014f46:	613b      	str	r3, [r7, #16]
 8014f48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8014f4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f50:	2302      	movs	r3, #2
 8014f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f54:	2300      	movs	r3, #0
 8014f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f58:	2303      	movs	r3, #3
 8014f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014f5c:	230a      	movs	r3, #10
 8014f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f60:	f107 0314 	add.w	r3, r7, #20
 8014f64:	4619      	mov	r1, r3
 8014f66:	4814      	ldr	r0, [pc, #80]	; (8014fb8 <HAL_HCD_MspInit+0xa8>)
 8014f68:	f7ef f982 	bl	8004270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014f6c:	4b11      	ldr	r3, [pc, #68]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f70:	4a10      	ldr	r2, [pc, #64]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f76:	6353      	str	r3, [r2, #52]	; 0x34
 8014f78:	4b0e      	ldr	r3, [pc, #56]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f80:	60fb      	str	r3, [r7, #12]
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	4b0b      	ldr	r3, [pc, #44]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f88:	4a0a      	ldr	r2, [pc, #40]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8014f90:	4b08      	ldr	r3, [pc, #32]	; (8014fb4 <HAL_HCD_MspInit+0xa4>)
 8014f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014f98:	60bb      	str	r3, [r7, #8]
 8014f9a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	2105      	movs	r1, #5
 8014fa0:	2043      	movs	r0, #67	; 0x43
 8014fa2:	f7ee fd4b 	bl	8003a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014fa6:	2043      	movs	r0, #67	; 0x43
 8014fa8:	f7ee fd64 	bl	8003a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014fac:	bf00      	nop
 8014fae:	3728      	adds	r7, #40	; 0x28
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	40023800 	.word	0x40023800
 8014fb8:	40020000 	.word	0x40020000

08014fbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7fa fb3d 	bl	800f64a <USBH_LL_IncTimer>
}
 8014fd0:	bf00      	nop
 8014fd2:	3708      	adds	r7, #8
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7fa fb82 	bl	800f6f0 <USBH_LL_Connect>
}
 8014fec:	bf00      	nop
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b082      	sub	sp, #8
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015002:	4618      	mov	r0, r3
 8015004:	f7fa fba8 	bl	800f758 <USBH_LL_Disconnect>
}
 8015008:	bf00      	nop
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	460b      	mov	r3, r1
 801501a:	70fb      	strb	r3, [r7, #3]
 801501c:	4613      	mov	r3, r2
 801501e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015026:	4618      	mov	r0, r3
 8015028:	f7fa fbe6 	bl	800f7f8 <USBH_LL_NotifyURBChange>
#endif
}
 801502c:	bf00      	nop
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015042:	4618      	mov	r0, r3
 8015044:	f7fa fb2b 	bl	800f69e <USBH_LL_PortEnabled>
} 
 8015048:	bf00      	nop
 801504a:	3708      	adds	r7, #8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801505e:	4618      	mov	r0, r3
 8015060:	f7fa fb2b 	bl	800f6ba <USBH_LL_PortDisabled>
} 
 8015064:	bf00      	nop
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801507a:	2b01      	cmp	r3, #1
 801507c:	d12a      	bne.n	80150d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801507e:	4a18      	ldr	r2, [pc, #96]	; (80150e0 <USBH_LL_Init+0x74>)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4a15      	ldr	r2, [pc, #84]	; (80150e0 <USBH_LL_Init+0x74>)
 801508a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801508e:	4b14      	ldr	r3, [pc, #80]	; (80150e0 <USBH_LL_Init+0x74>)
 8015090:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015094:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015096:	4b12      	ldr	r3, [pc, #72]	; (80150e0 <USBH_LL_Init+0x74>)
 8015098:	2208      	movs	r2, #8
 801509a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801509c:	4b10      	ldr	r3, [pc, #64]	; (80150e0 <USBH_LL_Init+0x74>)
 801509e:	2203      	movs	r2, #3
 80150a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80150a2:	4b0f      	ldr	r3, [pc, #60]	; (80150e0 <USBH_LL_Init+0x74>)
 80150a4:	2200      	movs	r2, #0
 80150a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80150a8:	4b0d      	ldr	r3, [pc, #52]	; (80150e0 <USBH_LL_Init+0x74>)
 80150aa:	2202      	movs	r2, #2
 80150ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80150ae:	4b0c      	ldr	r3, [pc, #48]	; (80150e0 <USBH_LL_Init+0x74>)
 80150b0:	2200      	movs	r2, #0
 80150b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80150b4:	480a      	ldr	r0, [pc, #40]	; (80150e0 <USBH_LL_Init+0x74>)
 80150b6:	f7ef fbc0 	bl	800483a <HAL_HCD_Init>
 80150ba:	4603      	mov	r3, r0
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d001      	beq.n	80150c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80150c0:	f7ec fe2c 	bl	8001d1c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80150c4:	4806      	ldr	r0, [pc, #24]	; (80150e0 <USBH_LL_Init+0x74>)
 80150c6:	f7ef ffaf 	bl	8005028 <HAL_HCD_GetCurrentFrame>
 80150ca:	4603      	mov	r3, r0
 80150cc:	4619      	mov	r1, r3
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f7fa faac 	bl	800f62c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80150d4:	2300      	movs	r3, #0
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3708      	adds	r7, #8
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	bf00      	nop
 80150e0:	200220c8 	.word	0x200220c8

080150e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150ec:	2300      	movs	r3, #0
 80150ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80150f0:	2300      	movs	r3, #0
 80150f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7ef ff1c 	bl	8004f38 <HAL_HCD_Start>
 8015100:	4603      	mov	r3, r0
 8015102:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015104:	7bfb      	ldrb	r3, [r7, #15]
 8015106:	4618      	mov	r0, r3
 8015108:	f000 f95c 	bl	80153c4 <USBH_Get_USB_Status>
 801510c:	4603      	mov	r3, r0
 801510e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015110:	7bbb      	ldrb	r3, [r7, #14]
}
 8015112:	4618      	mov	r0, r3
 8015114:	3710      	adds	r7, #16
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}

0801511a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801511a:	b580      	push	{r7, lr}
 801511c:	b084      	sub	sp, #16
 801511e:	af00      	add	r7, sp, #0
 8015120:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015122:	2300      	movs	r3, #0
 8015124:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015126:	2300      	movs	r3, #0
 8015128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015130:	4618      	mov	r0, r3
 8015132:	f7ef ff24 	bl	8004f7e <HAL_HCD_Stop>
 8015136:	4603      	mov	r3, r0
 8015138:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801513a:	7bfb      	ldrb	r3, [r7, #15]
 801513c:	4618      	mov	r0, r3
 801513e:	f000 f941 	bl	80153c4 <USBH_Get_USB_Status>
 8015142:	4603      	mov	r3, r0
 8015144:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8015146:	7bbb      	ldrb	r3, [r7, #14]
}
 8015148:	4618      	mov	r0, r3
 801514a:	3710      	adds	r7, #16
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b084      	sub	sp, #16
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015158:	2301      	movs	r3, #1
 801515a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015162:	4618      	mov	r0, r3
 8015164:	f7ef ff6e 	bl	8005044 <HAL_HCD_GetCurrentSpeed>
 8015168:	4603      	mov	r3, r0
 801516a:	2b01      	cmp	r3, #1
 801516c:	d007      	beq.n	801517e <USBH_LL_GetSpeed+0x2e>
 801516e:	2b01      	cmp	r3, #1
 8015170:	d302      	bcc.n	8015178 <USBH_LL_GetSpeed+0x28>
 8015172:	2b02      	cmp	r3, #2
 8015174:	d006      	beq.n	8015184 <USBH_LL_GetSpeed+0x34>
 8015176:	e008      	b.n	801518a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015178:	2300      	movs	r3, #0
 801517a:	73fb      	strb	r3, [r7, #15]
    break;
 801517c:	e008      	b.n	8015190 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801517e:	2301      	movs	r3, #1
 8015180:	73fb      	strb	r3, [r7, #15]
    break;
 8015182:	e005      	b.n	8015190 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015184:	2302      	movs	r3, #2
 8015186:	73fb      	strb	r3, [r7, #15]
    break;
 8015188:	e002      	b.n	8015190 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801518a:	2301      	movs	r3, #1
 801518c:	73fb      	strb	r3, [r7, #15]
    break;
 801518e:	bf00      	nop
  }
  return  speed;
 8015190:	7bfb      	ldrb	r3, [r7, #15]
}
 8015192:	4618      	mov	r0, r3
 8015194:	3710      	adds	r7, #16
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}

0801519a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801519a:	b580      	push	{r7, lr}
 801519c:	b084      	sub	sp, #16
 801519e:	af00      	add	r7, sp, #0
 80151a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151a2:	2300      	movs	r3, #0
 80151a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80151a6:	2300      	movs	r3, #0
 80151a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7ef ff01 	bl	8004fb8 <HAL_HCD_ResetPort>
 80151b6:	4603      	mov	r3, r0
 80151b8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80151ba:	7bfb      	ldrb	r3, [r7, #15]
 80151bc:	4618      	mov	r0, r3
 80151be:	f000 f901 	bl	80153c4 <USBH_Get_USB_Status>
 80151c2:	4603      	mov	r3, r0
 80151c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80151c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3710      	adds	r7, #16
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	460b      	mov	r3, r1
 80151da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80151e2:	78fa      	ldrb	r2, [r7, #3]
 80151e4:	4611      	mov	r1, r2
 80151e6:	4618      	mov	r0, r3
 80151e8:	f7ef ff09 	bl	8004ffe <HAL_HCD_HC_GetXferCount>
 80151ec:	4603      	mov	r3, r0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3708      	adds	r7, #8
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80151f6:	b590      	push	{r4, r7, lr}
 80151f8:	b089      	sub	sp, #36	; 0x24
 80151fa:	af04      	add	r7, sp, #16
 80151fc:	6078      	str	r0, [r7, #4]
 80151fe:	4608      	mov	r0, r1
 8015200:	4611      	mov	r1, r2
 8015202:	461a      	mov	r2, r3
 8015204:	4603      	mov	r3, r0
 8015206:	70fb      	strb	r3, [r7, #3]
 8015208:	460b      	mov	r3, r1
 801520a:	70bb      	strb	r3, [r7, #2]
 801520c:	4613      	mov	r3, r2
 801520e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015210:	2300      	movs	r3, #0
 8015212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015214:	2300      	movs	r3, #0
 8015216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801521e:	787c      	ldrb	r4, [r7, #1]
 8015220:	78ba      	ldrb	r2, [r7, #2]
 8015222:	78f9      	ldrb	r1, [r7, #3]
 8015224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015226:	9302      	str	r3, [sp, #8]
 8015228:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801522c:	9301      	str	r3, [sp, #4]
 801522e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015232:	9300      	str	r3, [sp, #0]
 8015234:	4623      	mov	r3, r4
 8015236:	f7ef fb56 	bl	80048e6 <HAL_HCD_HC_Init>
 801523a:	4603      	mov	r3, r0
 801523c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801523e:	7bfb      	ldrb	r3, [r7, #15]
 8015240:	4618      	mov	r0, r3
 8015242:	f000 f8bf 	bl	80153c4 <USBH_Get_USB_Status>
 8015246:	4603      	mov	r3, r0
 8015248:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801524a:	7bbb      	ldrb	r3, [r7, #14]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3714      	adds	r7, #20
 8015250:	46bd      	mov	sp, r7
 8015252:	bd90      	pop	{r4, r7, pc}

08015254 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b084      	sub	sp, #16
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	460b      	mov	r3, r1
 801525e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015260:	2300      	movs	r3, #0
 8015262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015264:	2300      	movs	r3, #0
 8015266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801526e:	78fa      	ldrb	r2, [r7, #3]
 8015270:	4611      	mov	r1, r2
 8015272:	4618      	mov	r0, r3
 8015274:	f7ef fbcf 	bl	8004a16 <HAL_HCD_HC_Halt>
 8015278:	4603      	mov	r3, r0
 801527a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801527c:	7bfb      	ldrb	r3, [r7, #15]
 801527e:	4618      	mov	r0, r3
 8015280:	f000 f8a0 	bl	80153c4 <USBH_Get_USB_Status>
 8015284:	4603      	mov	r3, r0
 8015286:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015288:	7bbb      	ldrb	r3, [r7, #14]
}
 801528a:	4618      	mov	r0, r3
 801528c:	3710      	adds	r7, #16
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}

08015292 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015292:	b590      	push	{r4, r7, lr}
 8015294:	b089      	sub	sp, #36	; 0x24
 8015296:	af04      	add	r7, sp, #16
 8015298:	6078      	str	r0, [r7, #4]
 801529a:	4608      	mov	r0, r1
 801529c:	4611      	mov	r1, r2
 801529e:	461a      	mov	r2, r3
 80152a0:	4603      	mov	r3, r0
 80152a2:	70fb      	strb	r3, [r7, #3]
 80152a4:	460b      	mov	r3, r1
 80152a6:	70bb      	strb	r3, [r7, #2]
 80152a8:	4613      	mov	r3, r2
 80152aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152ac:	2300      	movs	r3, #0
 80152ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80152b0:	2300      	movs	r3, #0
 80152b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80152ba:	787c      	ldrb	r4, [r7, #1]
 80152bc:	78ba      	ldrb	r2, [r7, #2]
 80152be:	78f9      	ldrb	r1, [r7, #3]
 80152c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80152c4:	9303      	str	r3, [sp, #12]
 80152c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80152c8:	9302      	str	r3, [sp, #8]
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	9301      	str	r3, [sp, #4]
 80152ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80152d2:	9300      	str	r3, [sp, #0]
 80152d4:	4623      	mov	r3, r4
 80152d6:	f7ef fbc1 	bl	8004a5c <HAL_HCD_HC_SubmitRequest>
 80152da:	4603      	mov	r3, r0
 80152dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80152de:	7bfb      	ldrb	r3, [r7, #15]
 80152e0:	4618      	mov	r0, r3
 80152e2:	f000 f86f 	bl	80153c4 <USBH_Get_USB_Status>
 80152e6:	4603      	mov	r3, r0
 80152e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80152ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3714      	adds	r7, #20
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd90      	pop	{r4, r7, pc}

080152f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	460b      	mov	r3, r1
 80152fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015306:	78fa      	ldrb	r2, [r7, #3]
 8015308:	4611      	mov	r1, r2
 801530a:	4618      	mov	r0, r3
 801530c:	f7ef fe62 	bl	8004fd4 <HAL_HCD_HC_GetURBState>
 8015310:	4603      	mov	r3, r0
}
 8015312:	4618      	mov	r0, r3
 8015314:	3708      	adds	r7, #8
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}

0801531a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801531a:	b580      	push	{r7, lr}
 801531c:	b082      	sub	sp, #8
 801531e:	af00      	add	r7, sp, #0
 8015320:	6078      	str	r0, [r7, #4]
 8015322:	460b      	mov	r3, r1
 8015324:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801532c:	2b01      	cmp	r3, #1
 801532e:	d103      	bne.n	8015338 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015330:	78fb      	ldrb	r3, [r7, #3]
 8015332:	4618      	mov	r0, r3
 8015334:	f000 f872 	bl	801541c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015338:	20c8      	movs	r0, #200	; 0xc8
 801533a:	f7ee f811 	bl	8003360 <HAL_Delay>
  return USBH_OK;
 801533e:	2300      	movs	r3, #0
}
 8015340:	4618      	mov	r0, r3
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015348:	b480      	push	{r7}
 801534a:	b085      	sub	sp, #20
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	460b      	mov	r3, r1
 8015352:	70fb      	strb	r3, [r7, #3]
 8015354:	4613      	mov	r3, r2
 8015356:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801535e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015360:	78fa      	ldrb	r2, [r7, #3]
 8015362:	68f9      	ldr	r1, [r7, #12]
 8015364:	4613      	mov	r3, r2
 8015366:	009b      	lsls	r3, r3, #2
 8015368:	4413      	add	r3, r2
 801536a:	00db      	lsls	r3, r3, #3
 801536c:	440b      	add	r3, r1
 801536e:	333b      	adds	r3, #59	; 0x3b
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00a      	beq.n	801538c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015376:	78fa      	ldrb	r2, [r7, #3]
 8015378:	68f9      	ldr	r1, [r7, #12]
 801537a:	4613      	mov	r3, r2
 801537c:	009b      	lsls	r3, r3, #2
 801537e:	4413      	add	r3, r2
 8015380:	00db      	lsls	r3, r3, #3
 8015382:	440b      	add	r3, r1
 8015384:	3350      	adds	r3, #80	; 0x50
 8015386:	78ba      	ldrb	r2, [r7, #2]
 8015388:	701a      	strb	r2, [r3, #0]
 801538a:	e009      	b.n	80153a0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801538c:	78fa      	ldrb	r2, [r7, #3]
 801538e:	68f9      	ldr	r1, [r7, #12]
 8015390:	4613      	mov	r3, r2
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4413      	add	r3, r2
 8015396:	00db      	lsls	r3, r3, #3
 8015398:	440b      	add	r3, r1
 801539a:	3351      	adds	r3, #81	; 0x51
 801539c:	78ba      	ldrb	r2, [r7, #2]
 801539e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80153a0:	2300      	movs	r3, #0
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3714      	adds	r7, #20
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr

080153ae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b082      	sub	sp, #8
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f7ed ffd2 	bl	8003360 <HAL_Delay>
}
 80153bc:	bf00      	nop
 80153be:	3708      	adds	r7, #8
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}

080153c4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b085      	sub	sp, #20
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	4603      	mov	r3, r0
 80153cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80153ce:	2300      	movs	r3, #0
 80153d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80153d2:	79fb      	ldrb	r3, [r7, #7]
 80153d4:	2b03      	cmp	r3, #3
 80153d6:	d817      	bhi.n	8015408 <USBH_Get_USB_Status+0x44>
 80153d8:	a201      	add	r2, pc, #4	; (adr r2, 80153e0 <USBH_Get_USB_Status+0x1c>)
 80153da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153de:	bf00      	nop
 80153e0:	080153f1 	.word	0x080153f1
 80153e4:	080153f7 	.word	0x080153f7
 80153e8:	080153fd 	.word	0x080153fd
 80153ec:	08015403 	.word	0x08015403
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80153f0:	2300      	movs	r3, #0
 80153f2:	73fb      	strb	r3, [r7, #15]
    break;
 80153f4:	e00b      	b.n	801540e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80153f6:	2302      	movs	r3, #2
 80153f8:	73fb      	strb	r3, [r7, #15]
    break;
 80153fa:	e008      	b.n	801540e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80153fc:	2301      	movs	r3, #1
 80153fe:	73fb      	strb	r3, [r7, #15]
    break;
 8015400:	e005      	b.n	801540e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015402:	2302      	movs	r3, #2
 8015404:	73fb      	strb	r3, [r7, #15]
    break;
 8015406:	e002      	b.n	801540e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015408:	2302      	movs	r3, #2
 801540a:	73fb      	strb	r3, [r7, #15]
    break;
 801540c:	bf00      	nop
  }
  return usb_status;
 801540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3714      	adds	r7, #20
 8015414:	46bd      	mov	sp, r7
 8015416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541a:	4770      	bx	lr

0801541c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	4603      	mov	r3, r0
 8015424:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8015426:	79fb      	ldrb	r3, [r7, #7]
 8015428:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801542a:	79fb      	ldrb	r3, [r7, #7]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d102      	bne.n	8015436 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8015430:	2301      	movs	r3, #1
 8015432:	73fb      	strb	r3, [r7, #15]
 8015434:	e001      	b.n	801543a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8015436:	2300      	movs	r3, #0
 8015438:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801543a:	7bfb      	ldrb	r3, [r7, #15]
 801543c:	461a      	mov	r2, r3
 801543e:	2120      	movs	r1, #32
 8015440:	4803      	ldr	r0, [pc, #12]	; (8015450 <MX_DriverVbusFS+0x34>)
 8015442:	f7ef f9e1 	bl	8004808 <HAL_GPIO_WritePin>
}
 8015446:	bf00      	nop
 8015448:	3710      	adds	r7, #16
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}
 801544e:	bf00      	nop
 8015450:	40020c00 	.word	0x40020c00

08015454 <_Color2Index_1616I>:
 8015454:	4b06      	ldr	r3, [pc, #24]	; (8015470 <_Color2Index_1616I+0x1c>)
 8015456:	b510      	push	{r4, lr}
 8015458:	4604      	mov	r4, r0
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8015460:	4798      	blx	r3
 8015462:	4b04      	ldr	r3, [pc, #16]	; (8015474 <_Color2Index_1616I+0x20>)
 8015464:	0e24      	lsrs	r4, r4, #24
 8015466:	5d1b      	ldrb	r3, [r3, r4]
 8015468:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 801546c:	bd10      	pop	{r4, pc}
 801546e:	bf00      	nop
 8015470:	08023560 	.word	0x08023560
 8015474:	0801f180 	.word	0x0801f180

08015478 <_Index2Color_1616I>:
 8015478:	4b05      	ldr	r3, [pc, #20]	; (8015490 <_Index2Color_1616I+0x18>)
 801547a:	b510      	push	{r4, lr}
 801547c:	4604      	mov	r4, r0
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	b2c0      	uxtb	r0, r0
 8015482:	4798      	blx	r3
 8015484:	4b03      	ldr	r3, [pc, #12]	; (8015494 <_Index2Color_1616I+0x1c>)
 8015486:	0924      	lsrs	r4, r4, #4
 8015488:	5d1b      	ldrb	r3, [r3, r4]
 801548a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801548e:	bd10      	pop	{r4, pc}
 8015490:	08023560 	.word	0x08023560
 8015494:	0801f2e0 	.word	0x0801f2e0

08015498 <_GetIndexMask_1616I>:
 8015498:	20ff      	movs	r0, #255	; 0xff
 801549a:	4770      	bx	lr

0801549c <_Color2IndexBulk_1616I>:
 801549c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80154a0:	4699      	mov	r9, r3
 80154a2:	4b0c      	ldr	r3, [pc, #48]	; (80154d4 <_Color2IndexBulk_1616I+0x38>)
 80154a4:	4680      	mov	r8, r0
 80154a6:	460f      	mov	r7, r1
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4615      	mov	r5, r2
 80154ac:	4e0a      	ldr	r6, [pc, #40]	; (80154d8 <_Color2IndexBulk_1616I+0x3c>)
 80154ae:	9301      	str	r3, [sp, #4]
 80154b0:	f858 4b04 	ldr.w	r4, [r8], #4
 80154b4:	9b01      	ldr	r3, [sp, #4]
 80154b6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 80154ba:	0e24      	lsrs	r4, r4, #24
 80154bc:	4798      	blx	r3
 80154be:	3d01      	subs	r5, #1
 80154c0:	5d32      	ldrb	r2, [r6, r4]
 80154c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80154c6:	7038      	strb	r0, [r7, #0]
 80154c8:	444f      	add	r7, r9
 80154ca:	d1f1      	bne.n	80154b0 <_Color2IndexBulk_1616I+0x14>
 80154cc:	b003      	add	sp, #12
 80154ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154d2:	bf00      	nop
 80154d4:	08023560 	.word	0x08023560
 80154d8:	0801f180 	.word	0x0801f180

080154dc <_Index2ColorBulk_1616I>:
 80154dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80154e0:	1e56      	subs	r6, r2, #1
 80154e2:	4699      	mov	r9, r3
 80154e4:	4615      	mov	r5, r2
 80154e6:	4f0f      	ldr	r7, [pc, #60]	; (8015524 <_Index2ColorBulk_1616I+0x48>)
 80154e8:	fb03 0606 	mla	r6, r3, r6, r0
 80154ec:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 80154f0:	4b0d      	ldr	r3, [pc, #52]	; (8015528 <_Index2ColorBulk_1616I+0x4c>)
 80154f2:	3801      	subs	r0, #1
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 80154fa:	9301      	str	r3, [sp, #4]
 80154fc:	f896 8000 	ldrb.w	r8, [r6]
 8015500:	ebc9 0606 	rsb	r6, r9, r6
 8015504:	9b01      	ldr	r3, [sp, #4]
 8015506:	4640      	mov	r0, r8
 8015508:	ea4f 1818 	mov.w	r8, r8, lsr #4
 801550c:	4798      	blx	r3
 801550e:	3d01      	subs	r5, #1
 8015510:	f817 2008 	ldrb.w	r2, [r7, r8]
 8015514:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8015518:	f844 0904 	str.w	r0, [r4], #-4
 801551c:	d1ee      	bne.n	80154fc <_Index2ColorBulk_1616I+0x20>
 801551e:	b003      	add	sp, #12
 8015520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015524:	0801f2e0 	.word	0x0801f2e0
 8015528:	08023560 	.word	0x08023560

0801552c <_Color2Index_822216>:
 801552c:	0e02      	lsrs	r2, r0, #24
 801552e:	2311      	movs	r3, #17
 8015530:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8015534:	b530      	push	{r4, r5, lr}
 8015536:	fbb2 f3f3 	udiv	r3, r2, r3
 801553a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801553e:	b2c5      	uxtb	r5, r0
 8015540:	011b      	lsls	r3, r3, #4
 8015542:	428c      	cmp	r4, r1
 8015544:	d104      	bne.n	8015550 <_Color2Index_822216+0x24>
 8015546:	42a5      	cmp	r5, r4
 8015548:	d102      	bne.n	8015550 <_Color2Index_822216+0x24>
 801554a:	ea43 1055 	orr.w	r0, r3, r5, lsr #5
 801554e:	bd30      	pop	{r4, r5, pc}
 8015550:	09e8      	lsrs	r0, r5, #7
 8015552:	09c9      	lsrs	r1, r1, #7
 8015554:	09e4      	lsrs	r4, r4, #7
 8015556:	ea41 0080 	orr.w	r0, r1, r0, lsl #2
 801555a:	f040 0008 	orr.w	r0, r0, #8
 801555e:	4318      	orrs	r0, r3
 8015560:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
 8015564:	bd30      	pop	{r4, r5, pc}

08015566 <_Index2Color_822216>:
 8015566:	f010 0f08 	tst.w	r0, #8
 801556a:	d110      	bne.n	801558e <_Index2Color_822216+0x28>
 801556c:	f000 0207 	and.w	r2, r0, #7
 8015570:	2124      	movs	r1, #36	; 0x24
 8015572:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8015576:	0853      	lsrs	r3, r2, #1
 8015578:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801557c:	fb01 3302 	mla	r3, r1, r2, r3
 8015580:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 8015584:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015588:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 801558c:	4770      	bx	lr
 801558e:	f010 0f01 	tst.w	r0, #1
 8015592:	bf14      	ite	ne
 8015594:	23ff      	movne	r3, #255	; 0xff
 8015596:	2300      	moveq	r3, #0
 8015598:	f010 0f02 	tst.w	r0, #2
 801559c:	bf14      	ite	ne
 801559e:	f44f 417f 	movne.w	r1, #65280	; 0xff00
 80155a2:	2100      	moveq	r1, #0
 80155a4:	f010 0f04 	tst.w	r0, #4
 80155a8:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 80155ac:	bf14      	ite	ne
 80155ae:	f44f 027f 	movne.w	r2, #16711680	; 0xff0000
 80155b2:	2200      	moveq	r2, #0
 80155b4:	4308      	orrs	r0, r1
 80155b6:	4310      	orrs	r0, r2
 80155b8:	4770      	bx	lr

080155ba <_GetIndexMask_822216>:
 80155ba:	20ff      	movs	r0, #255	; 0xff
 80155bc:	4770      	bx	lr

080155be <_Color2Index_84444>:
 80155be:	4603      	mov	r3, r0
 80155c0:	0f80      	lsrs	r0, r0, #30
 80155c2:	d017      	beq.n	80155f4 <_Color2Index_84444+0x36>
 80155c4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80155ce:	4299      	cmp	r1, r3
 80155d0:	d105      	bne.n	80155de <_Color2Index_84444+0x20>
 80155d2:	428a      	cmp	r2, r1
 80155d4:	d103      	bne.n	80155de <_Color2Index_84444+0x20>
 80155d6:	0912      	lsrs	r2, r2, #4
 80155d8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80155dc:	4770      	bx	lr
 80155de:	0992      	lsrs	r2, r2, #6
 80155e0:	099b      	lsrs	r3, r3, #6
 80155e2:	0989      	lsrs	r1, r1, #6
 80155e4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80155e8:	0180      	lsls	r0, r0, #6
 80155ea:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80155ee:	f400 507f 	and.w	r0, r0, #16320	; 0x3fc0
 80155f2:	4318      	orrs	r0, r3
 80155f4:	4770      	bx	lr

080155f6 <_GetIndexMask_84444>:
 80155f6:	20ff      	movs	r0, #255	; 0xff
 80155f8:	4770      	bx	lr
	...

080155fc <_Index2Color_84444>:
 80155fc:	283f      	cmp	r0, #63	; 0x3f
 80155fe:	d80d      	bhi.n	801561c <_Index2Color_84444+0x20>
 8015600:	280f      	cmp	r0, #15
 8015602:	d92d      	bls.n	8015660 <_Index2Color_84444+0x64>
 8015604:	0903      	lsrs	r3, r0, #4
 8015606:	f000 000f 	and.w	r0, r0, #15
 801560a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801560e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8015612:	4b15      	ldr	r3, [pc, #84]	; (8015668 <_Index2Color_84444+0x6c>)
 8015614:	4358      	muls	r0, r3
 8015616:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 801561a:	4770      	bx	lr
 801561c:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8015620:	f3c0 1301 	ubfx	r3, r0, #4, #2
 8015624:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015628:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801562c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015630:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015634:	b2d2      	uxtb	r2, r2
 8015636:	b2db      	uxtb	r3, r3
 8015638:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801563c:	f000 0303 	and.w	r3, r0, #3
 8015640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015644:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015648:	b2d9      	uxtb	r1, r3
 801564a:	0983      	lsrs	r3, r0, #6
 801564c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015650:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015654:	061b      	lsls	r3, r3, #24
 8015656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801565a:	ea42 0003 	orr.w	r0, r2, r3
 801565e:	4770      	bx	lr
 8015660:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8015664:	4770      	bx	lr
 8015666:	bf00      	nop
 8015668:	00111111 	.word	0x00111111

0801566c <LCD_Color2Index_8666>:
 801566c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015670:	b2c2      	uxtb	r2, r0
 8015672:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8015676:	4283      	cmp	r3, r0
 8015678:	b510      	push	{r4, lr}
 801567a:	d107      	bne.n	801568c <LCD_Color2Index_8666+0x20>
 801567c:	429a      	cmp	r2, r3
 801567e:	d105      	bne.n	801568c <LCD_Color2Index_8666+0x20>
 8015680:	3208      	adds	r2, #8
 8015682:	2011      	movs	r0, #17
 8015684:	fbb2 f0f0 	udiv	r0, r2, r0
 8015688:	3078      	adds	r0, #120	; 0x78
 801568a:	bd10      	pop	{r4, pc}
 801568c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015690:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015694:	f100 047f 	add.w	r4, r0, #127	; 0x7f
 8015698:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801569c:	20ff      	movs	r0, #255	; 0xff
 801569e:	327f      	adds	r2, #127	; 0x7f
 80156a0:	337f      	adds	r3, #127	; 0x7f
 80156a2:	fbb2 f1f0 	udiv	r1, r2, r0
 80156a6:	fbb4 f2f0 	udiv	r2, r4, r0
 80156aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80156ae:	2424      	movs	r4, #36	; 0x24
 80156b0:	2006      	movs	r0, #6
 80156b2:	fb04 2201 	mla	r2, r4, r1, r2
 80156b6:	fb00 2003 	mla	r0, r0, r3, r2
 80156ba:	286b      	cmp	r0, #107	; 0x6b
 80156bc:	bf88      	it	hi
 80156be:	3028      	addhi	r0, #40	; 0x28
 80156c0:	bd10      	pop	{r4, pc}

080156c2 <_GetIndexMask_8666>:
 80156c2:	20ff      	movs	r0, #255	; 0xff
 80156c4:	4770      	bx	lr
	...

080156c8 <LCD_Index2Color_8666>:
 80156c8:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80156cc:	2b0f      	cmp	r3, #15
 80156ce:	b530      	push	{r4, r5, lr}
 80156d0:	d805      	bhi.n	80156de <LCD_Index2Color_8666+0x16>
 80156d2:	4b12      	ldr	r3, [pc, #72]	; (801571c <LCD_Index2Color_8666+0x54>)
 80156d4:	4358      	muls	r0, r3
 80156d6:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 80156da:	3008      	adds	r0, #8
 80156dc:	e019      	b.n	8015712 <LCD_Index2Color_8666+0x4a>
 80156de:	286b      	cmp	r0, #107	; 0x6b
 80156e0:	d902      	bls.n	80156e8 <LCD_Index2Color_8666+0x20>
 80156e2:	2893      	cmp	r0, #147	; 0x93
 80156e4:	d918      	bls.n	8015718 <LCD_Index2Color_8666+0x50>
 80156e6:	3828      	subs	r0, #40	; 0x28
 80156e8:	2106      	movs	r1, #6
 80156ea:	2233      	movs	r2, #51	; 0x33
 80156ec:	fbb0 f4f1 	udiv	r4, r0, r1
 80156f0:	fb01 0314 	mls	r3, r1, r4, r0
 80156f4:	fb02 f503 	mul.w	r5, r2, r3
 80156f8:	2324      	movs	r3, #36	; 0x24
 80156fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80156fe:	fbb4 f0f1 	udiv	r0, r4, r1
 8015702:	4353      	muls	r3, r2
 8015704:	fb01 4010 	mls	r0, r1, r0, r4
 8015708:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 801570c:	4350      	muls	r0, r2
 801570e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8015712:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8015716:	bd30      	pop	{r4, r5, pc}
 8015718:	2000      	movs	r0, #0
 801571a:	bd30      	pop	{r4, r5, pc}
 801571c:	00111111 	.word	0x00111111

08015720 <_GetIndexMask_8666_1>:
 8015720:	20ff      	movs	r0, #255	; 0xff
 8015722:	4770      	bx	lr

08015724 <_Color2Index_8666_1>:
 8015724:	b510      	push	{r4, lr}
 8015726:	b350      	cbz	r0, 801577e <_Color2Index_8666_1+0x5a>
 8015728:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801572c:	b2c2      	uxtb	r2, r0
 801572e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8015732:	4281      	cmp	r1, r0
 8015734:	d107      	bne.n	8015746 <_Color2Index_8666_1+0x22>
 8015736:	428a      	cmp	r2, r1
 8015738:	d105      	bne.n	8015746 <_Color2Index_8666_1+0x22>
 801573a:	3208      	adds	r2, #8
 801573c:	2011      	movs	r0, #17
 801573e:	fbb2 f0f0 	udiv	r0, r2, r0
 8015742:	3078      	adds	r0, #120	; 0x78
 8015744:	bd10      	pop	{r4, pc}
 8015746:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801574a:	2424      	movs	r4, #36	; 0x24
 801574c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015750:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 8015754:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8015758:	20ff      	movs	r0, #255	; 0xff
 801575a:	327f      	adds	r2, #127	; 0x7f
 801575c:	317f      	adds	r1, #127	; 0x7f
 801575e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015762:	fbb2 f2f0 	udiv	r2, r2, r0
 8015766:	fbb1 f0f0 	udiv	r0, r1, r0
 801576a:	fb04 3202 	mla	r2, r4, r2, r3
 801576e:	2306      	movs	r3, #6
 8015770:	fb03 2000 	mla	r0, r3, r0, r2
 8015774:	286b      	cmp	r0, #107	; 0x6b
 8015776:	d801      	bhi.n	801577c <_Color2Index_8666_1+0x58>
 8015778:	300c      	adds	r0, #12
 801577a:	bd10      	pop	{r4, pc}
 801577c:	301c      	adds	r0, #28
 801577e:	bd10      	pop	{r4, pc}

08015780 <_Index2Color_8666_1>:
 8015780:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8015784:	2b0f      	cmp	r3, #15
 8015786:	b530      	push	{r4, r5, lr}
 8015788:	d805      	bhi.n	8015796 <_Index2Color_8666_1+0x16>
 801578a:	4b14      	ldr	r3, [pc, #80]	; (80157dc <_Index2Color_8666_1+0x5c>)
 801578c:	4358      	muls	r0, r3
 801578e:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8015792:	3008      	adds	r0, #8
 8015794:	bd30      	pop	{r4, r5, pc}
 8015796:	f1a0 030c 	sub.w	r3, r0, #12
 801579a:	2be7      	cmp	r3, #231	; 0xe7
 801579c:	d81b      	bhi.n	80157d6 <_Index2Color_8666_1+0x56>
 801579e:	2877      	cmp	r0, #119	; 0x77
 80157a0:	f04f 0106 	mov.w	r1, #6
 80157a4:	f04f 0524 	mov.w	r5, #36	; 0x24
 80157a8:	f04f 0233 	mov.w	r2, #51	; 0x33
 80157ac:	bf88      	it	hi
 80157ae:	f1a0 031c 	subhi.w	r3, r0, #28
 80157b2:	fbb3 f4f1 	udiv	r4, r3, r1
 80157b6:	fb01 3014 	mls	r0, r1, r4, r3
 80157ba:	fbb3 f3f5 	udiv	r3, r3, r5
 80157be:	4350      	muls	r0, r2
 80157c0:	4353      	muls	r3, r2
 80157c2:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 80157c6:	fbb4 f0f1 	udiv	r0, r4, r1
 80157ca:	fb01 4010 	mls	r0, r1, r0, r4
 80157ce:	4350      	muls	r0, r2
 80157d0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80157d4:	bd30      	pop	{r4, r5, pc}
 80157d6:	2000      	movs	r0, #0
 80157d8:	bd30      	pop	{r4, r5, pc}
 80157da:	bf00      	nop
 80157dc:	00111111 	.word	0x00111111

080157e0 <_Color2Index_88666I>:
 80157e0:	b510      	push	{r4, lr}
 80157e2:	4604      	mov	r4, r0
 80157e4:	4b04      	ldr	r3, [pc, #16]	; (80157f8 <_Color2Index_88666I+0x18>)
 80157e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80157ea:	0c24      	lsrs	r4, r4, #16
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	4798      	blx	r3
 80157f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80157f4:	4320      	orrs	r0, r4
 80157f6:	bd10      	pop	{r4, pc}
 80157f8:	0801ee38 	.word	0x0801ee38

080157fc <_Index2Color_88666I>:
 80157fc:	b510      	push	{r4, lr}
 80157fe:	4604      	mov	r4, r0
 8015800:	4b04      	ldr	r3, [pc, #16]	; (8015814 <_Index2Color_88666I+0x18>)
 8015802:	b2c0      	uxtb	r0, r0
 8015804:	0424      	lsls	r4, r4, #16
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	4798      	blx	r3
 801580a:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 801580e:	4320      	orrs	r0, r4
 8015810:	bd10      	pop	{r4, pc}
 8015812:	bf00      	nop
 8015814:	0801ee38 	.word	0x0801ee38

08015818 <_GetIndexMask_88666I>:
 8015818:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801581c:	4770      	bx	lr
	...

08015820 <_Color2IndexBulk_88666I>:
 8015820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015824:	4699      	mov	r9, r3
 8015826:	4b0a      	ldr	r3, [pc, #40]	; (8015850 <_Color2IndexBulk_88666I+0x30>)
 8015828:	4680      	mov	r8, r0
 801582a:	460f      	mov	r7, r1
 801582c:	4616      	mov	r6, r2
 801582e:	681d      	ldr	r5, [r3, #0]
 8015830:	f858 4b04 	ldr.w	r4, [r8], #4
 8015834:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 8015838:	0c24      	lsrs	r4, r4, #16
 801583a:	47a8      	blx	r5
 801583c:	3e01      	subs	r6, #1
 801583e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015842:	ea40 0004 	orr.w	r0, r0, r4
 8015846:	8038      	strh	r0, [r7, #0]
 8015848:	444f      	add	r7, r9
 801584a:	d1f1      	bne.n	8015830 <_Color2IndexBulk_88666I+0x10>
 801584c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015850:	0801ee38 	.word	0x0801ee38

08015854 <_Index2ColorBulk_88666I>:
 8015854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015858:	f102 38ff 	add.w	r8, r2, #4294967295
 801585c:	4699      	mov	r9, r3
 801585e:	4617      	mov	r7, r2
 8015860:	fb03 0808 	mla	r8, r3, r8, r0
 8015864:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 8015868:	4b0a      	ldr	r3, [pc, #40]	; (8015894 <_Index2ColorBulk_88666I+0x40>)
 801586a:	3801      	subs	r0, #1
 801586c:	685d      	ldr	r5, [r3, #4]
 801586e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8015872:	f8b8 4000 	ldrh.w	r4, [r8]
 8015876:	ebc9 0808 	rsb	r8, r9, r8
 801587a:	b2e0      	uxtb	r0, r4
 801587c:	0424      	lsls	r4, r4, #16
 801587e:	47a8      	blx	r5
 8015880:	3f01      	subs	r7, #1
 8015882:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8015886:	ea40 0004 	orr.w	r0, r0, r4
 801588a:	f846 0904 	str.w	r0, [r6], #-4
 801588e:	d1f0      	bne.n	8015872 <_Index2ColorBulk_88666I+0x1e>
 8015890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015894:	0801ee38 	.word	0x0801ee38

08015898 <_Color2Index_M1555I>:
 8015898:	4a08      	ldr	r2, [pc, #32]	; (80158bc <_Color2Index_M1555I+0x24>)
 801589a:	b2c3      	uxtb	r3, r0
 801589c:	0fc1      	lsrs	r1, r0, #31
 801589e:	5cd3      	ldrb	r3, [r2, r3]
 80158a0:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 80158a4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80158a8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80158ac:	5c51      	ldrb	r1, [r2, r1]
 80158ae:	5c10      	ldrb	r0, [r2, r0]
 80158b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80158b4:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 80158b8:	4770      	bx	lr
 80158ba:	bf00      	nop
 80158bc:	0801f080 	.word	0x0801f080

080158c0 <_Index2Color_M1555I>:
 80158c0:	4a09      	ldr	r2, [pc, #36]	; (80158e8 <_Index2Color_M1555I+0x28>)
 80158c2:	f000 031f 	and.w	r3, r0, #31
 80158c6:	f340 31c0 	sbfx	r1, r0, #15, #1
 80158ca:	5cd3      	ldrb	r3, [r2, r3]
 80158cc:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 80158d0:	f3c0 1144 	ubfx	r1, r0, #5, #5
 80158d4:	f3c0 2084 	ubfx	r0, r0, #10, #5
 80158d8:	5c51      	ldrb	r1, [r2, r1]
 80158da:	5c10      	ldrb	r0, [r2, r0]
 80158dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80158e0:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop
 80158e8:	0801f2c0 	.word	0x0801f2c0

080158ec <_GetIndexMask_M1555I>:
 80158ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158f0:	4770      	bx	lr
	...

080158f4 <_Color2IndexBulk_M1555I>:
 80158f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158f6:	f8df e050 	ldr.w	lr, [pc, #80]	; 8015948 <_Color2IndexBulk_M1555I+0x54>
 80158fa:	4606      	mov	r6, r0
 80158fc:	460d      	mov	r5, r1
 80158fe:	4614      	mov	r4, r2
 8015900:	f8de e000 	ldr.w	lr, [lr]
 8015904:	461f      	mov	r7, r3
 8015906:	f1be 0f00 	cmp.w	lr, #0
 801590a:	d003      	beq.n	8015914 <_Color2IndexBulk_M1555I+0x20>
 801590c:	46f4      	mov	ip, lr
 801590e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015912:	4760      	bx	ip
 8015914:	490b      	ldr	r1, [pc, #44]	; (8015944 <_Color2IndexBulk_M1555I+0x50>)
 8015916:	f856 2b04 	ldr.w	r2, [r6], #4
 801591a:	3c01      	subs	r4, #1
 801591c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8015920:	b2d0      	uxtb	r0, r2
 8015922:	5ccb      	ldrb	r3, [r1, r3]
 8015924:	5c08      	ldrb	r0, [r1, r0]
 8015926:	eb03 2380 	add.w	r3, r3, r0, lsl #10
 801592a:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801592e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015932:	eb03 33c0 	add.w	r3, r3, r0, lsl #15
 8015936:	5c8a      	ldrb	r2, [r1, r2]
 8015938:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801593c:	802b      	strh	r3, [r5, #0]
 801593e:	443d      	add	r5, r7
 8015940:	d1e9      	bne.n	8015916 <_Color2IndexBulk_M1555I+0x22>
 8015942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015944:	0801f080 	.word	0x0801f080
 8015948:	20000148 	.word	0x20000148

0801594c <_Index2ColorBulk_M1555I>:
 801594c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801594e:	4e16      	ldr	r6, [pc, #88]	; (80159a8 <_Index2ColorBulk_M1555I+0x5c>)
 8015950:	4686      	mov	lr, r0
 8015952:	460f      	mov	r7, r1
 8015954:	4614      	mov	r4, r2
 8015956:	6876      	ldr	r6, [r6, #4]
 8015958:	461d      	mov	r5, r3
 801595a:	b11e      	cbz	r6, 8015964 <_Index2ColorBulk_M1555I+0x18>
 801595c:	46b4      	mov	ip, r6
 801595e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015962:	4760      	bx	ip
 8015964:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8015968:	1e50      	subs	r0, r2, #1
 801596a:	4e10      	ldr	r6, [pc, #64]	; (80159ac <_Index2ColorBulk_M1555I+0x60>)
 801596c:	3901      	subs	r1, #1
 801596e:	fb03 e000 	mla	r0, r3, r0, lr
 8015972:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8015976:	8802      	ldrh	r2, [r0, #0]
 8015978:	3c01      	subs	r4, #1
 801597a:	eba0 0005 	sub.w	r0, r0, r5
 801597e:	f002 031f 	and.w	r3, r2, #31
 8015982:	f342 37c0 	sbfx	r7, r2, #15, #1
 8015986:	5cf3      	ldrb	r3, [r6, r3]
 8015988:	eb03 6307 	add.w	r3, r3, r7, lsl #24
 801598c:	f3c2 1744 	ubfx	r7, r2, #5, #5
 8015990:	f3c2 2284 	ubfx	r2, r2, #10, #5
 8015994:	5df7      	ldrb	r7, [r6, r7]
 8015996:	5cb2      	ldrb	r2, [r6, r2]
 8015998:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 801599c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80159a0:	f841 3904 	str.w	r3, [r1], #-4
 80159a4:	d1e7      	bne.n	8015976 <_Index2ColorBulk_M1555I+0x2a>
 80159a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159a8:	20000148 	.word	0x20000148
 80159ac:	0801f2c0 	.word	0x0801f2c0

080159b0 <GUICC_M1555I_SetCustColorConv>:
 80159b0:	4b01      	ldr	r3, [pc, #4]	; (80159b8 <GUICC_M1555I_SetCustColorConv+0x8>)
 80159b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80159b6:	4770      	bx	lr
 80159b8:	20000148 	.word	0x20000148

080159bc <_Color2Index_M4444I>:
 80159bc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80159c0:	0e03      	lsrs	r3, r0, #24
 80159c2:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80159c6:	3308      	adds	r3, #8
 80159c8:	3108      	adds	r1, #8
 80159ca:	b510      	push	{r4, lr}
 80159cc:	f102 0408 	add.w	r4, r2, #8
 80159d0:	b2c2      	uxtb	r2, r0
 80159d2:	2011      	movs	r0, #17
 80159d4:	3208      	adds	r2, #8
 80159d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80159da:	fbb2 f2f0 	udiv	r2, r2, r0
 80159de:	eb02 3303 	add.w	r3, r2, r3, lsl #12
 80159e2:	fbb4 f2f0 	udiv	r2, r4, r0
 80159e6:	fbb1 f0f0 	udiv	r0, r1, r0
 80159ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80159ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80159f2:	bd10      	pop	{r4, pc}

080159f4 <_Index2Color_M4444I>:
 80159f4:	4a09      	ldr	r2, [pc, #36]	; (8015a1c <_Index2Color_M4444I+0x28>)
 80159f6:	f3c0 3303 	ubfx	r3, r0, #12, #4
 80159fa:	5cd1      	ldrb	r1, [r2, r3]
 80159fc:	f3c0 2303 	ubfx	r3, r0, #8, #4
 8015a00:	5cd3      	ldrb	r3, [r2, r3]
 8015a02:	041b      	lsls	r3, r3, #16
 8015a04:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 8015a08:	f000 010f 	and.w	r1, r0, #15
 8015a0c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8015a10:	5c51      	ldrb	r1, [r2, r1]
 8015a12:	5c10      	ldrb	r0, [r2, r0]
 8015a14:	440b      	add	r3, r1
 8015a16:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8015a1a:	4770      	bx	lr
 8015a1c:	0801f2e0 	.word	0x0801f2e0

08015a20 <_GetIndexMask_M4444I>:
 8015a20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015a24:	4770      	bx	lr
	...

08015a28 <_Color2IndexBulk_M4444I>:
 8015a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	f8df e068 	ldr.w	lr, [pc, #104]	; 8015a98 <_Color2IndexBulk_M4444I+0x70>
 8015a30:	4606      	mov	r6, r0
 8015a32:	460d      	mov	r5, r1
 8015a34:	4614      	mov	r4, r2
 8015a36:	f8de e000 	ldr.w	lr, [lr]
 8015a3a:	461f      	mov	r7, r3
 8015a3c:	f1be 0f00 	cmp.w	lr, #0
 8015a40:	d003      	beq.n	8015a4a <_Color2IndexBulk_M4444I+0x22>
 8015a42:	46f4      	mov	ip, lr
 8015a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a48:	4760      	bx	ip
 8015a4a:	f04f 0e11 	mov.w	lr, #17
 8015a4e:	f856 0b04 	ldr.w	r0, [r6], #4
 8015a52:	3c01      	subs	r4, #1
 8015a54:	b2c1      	uxtb	r1, r0
 8015a56:	f3c0 4807 	ubfx	r8, r0, #16, #8
 8015a5a:	ea4f 6210 	mov.w	r2, r0, lsr #24
 8015a5e:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8015a62:	f101 0108 	add.w	r1, r1, #8
 8015a66:	f108 0808 	add.w	r8, r8, #8
 8015a6a:	f102 0208 	add.w	r2, r2, #8
 8015a6e:	f10c 0c08 	add.w	ip, ip, #8
 8015a72:	fbb2 f2fe 	udiv	r2, r2, lr
 8015a76:	fbb1 f1fe 	udiv	r1, r1, lr
 8015a7a:	fbb8 f3fe 	udiv	r3, r8, lr
 8015a7e:	eb01 3102 	add.w	r1, r1, r2, lsl #12
 8015a82:	eb01 2203 	add.w	r2, r1, r3, lsl #8
 8015a86:	fbbc f3fe 	udiv	r3, ip, lr
 8015a8a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8015a8e:	802b      	strh	r3, [r5, #0]
 8015a90:	443d      	add	r5, r7
 8015a92:	d1dc      	bne.n	8015a4e <_Color2IndexBulk_M4444I+0x26>
 8015a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a98:	20000150 	.word	0x20000150

08015a9c <_Index2ColorBulk_M4444I>:
 8015a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a9e:	4e17      	ldr	r6, [pc, #92]	; (8015afc <_Index2ColorBulk_M4444I+0x60>)
 8015aa0:	4686      	mov	lr, r0
 8015aa2:	460f      	mov	r7, r1
 8015aa4:	4614      	mov	r4, r2
 8015aa6:	6876      	ldr	r6, [r6, #4]
 8015aa8:	461d      	mov	r5, r3
 8015aaa:	b11e      	cbz	r6, 8015ab4 <_Index2ColorBulk_M4444I+0x18>
 8015aac:	46b4      	mov	ip, r6
 8015aae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015ab2:	4760      	bx	ip
 8015ab4:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8015ab8:	1e50      	subs	r0, r2, #1
 8015aba:	4e11      	ldr	r6, [pc, #68]	; (8015b00 <_Index2ColorBulk_M4444I+0x64>)
 8015abc:	3901      	subs	r1, #1
 8015abe:	fb03 e000 	mla	r0, r3, r0, lr
 8015ac2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8015ac6:	8802      	ldrh	r2, [r0, #0]
 8015ac8:	3c01      	subs	r4, #1
 8015aca:	eba0 0005 	sub.w	r0, r0, r5
 8015ace:	ea4f 3312 	mov.w	r3, r2, lsr #12
 8015ad2:	5cf7      	ldrb	r7, [r6, r3]
 8015ad4:	f002 030f 	and.w	r3, r2, #15
 8015ad8:	5cf3      	ldrb	r3, [r6, r3]
 8015ada:	eb03 6307 	add.w	r3, r3, r7, lsl #24
 8015ade:	f3c2 2703 	ubfx	r7, r2, #8, #4
 8015ae2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8015ae6:	5df7      	ldrb	r7, [r6, r7]
 8015ae8:	5cb2      	ldrb	r2, [r6, r2]
 8015aea:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8015aee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015af2:	f841 3904 	str.w	r3, [r1], #-4
 8015af6:	d1e6      	bne.n	8015ac6 <_Index2ColorBulk_M4444I+0x2a>
 8015af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015afa:	bf00      	nop
 8015afc:	20000150 	.word	0x20000150
 8015b00:	0801f2e0 	.word	0x0801f2e0

08015b04 <GUICC_M4444I_SetCustColorConv>:
 8015b04:	4b01      	ldr	r3, [pc, #4]	; (8015b0c <GUICC_M4444I_SetCustColorConv+0x8>)
 8015b06:	e883 0003 	stmia.w	r3, {r0, r1}
 8015b0a:	4770      	bx	lr
 8015b0c:	20000150 	.word	0x20000150

08015b10 <_Color2Index_M8888I>:
 8015b10:	4770      	bx	lr

08015b12 <_GetIndexMask_M8888I>:
 8015b12:	f04f 30ff 	mov.w	r0, #4294967295
 8015b16:	4770      	bx	lr

08015b18 <_Color2IndexBulk_M8888I>:
 8015b18:	b510      	push	{r4, lr}
 8015b1a:	f850 4b04 	ldr.w	r4, [r0], #4
 8015b1e:	3a01      	subs	r2, #1
 8015b20:	600c      	str	r4, [r1, #0]
 8015b22:	4419      	add	r1, r3
 8015b24:	d1f9      	bne.n	8015b1a <_Color2IndexBulk_M8888I+0x2>
 8015b26:	bd10      	pop	{r4, pc}

08015b28 <_Index2ColorBulk_M8888I>:
 8015b28:	b510      	push	{r4, lr}
 8015b2a:	6804      	ldr	r4, [r0, #0]
 8015b2c:	3a01      	subs	r2, #1
 8015b2e:	4418      	add	r0, r3
 8015b30:	f841 4b04 	str.w	r4, [r1], #4
 8015b34:	d1f9      	bne.n	8015b2a <_Index2ColorBulk_M8888I+0x2>
 8015b36:	bd10      	pop	{r4, pc}

08015b38 <GUICC_M8888I_SetCustColorConv>:
 8015b38:	4770      	bx	lr
	...

08015b3c <LCD_Index2Color_565>:
 8015b3c:	f000 011f 	and.w	r1, r0, #31
 8015b40:	4a07      	ldr	r2, [pc, #28]	; (8015b60 <LCD_Index2Color_565+0x24>)
 8015b42:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8015b46:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8015b4a:	5cd3      	ldrb	r3, [r2, r3]
 8015b4c:	5c52      	ldrb	r2, [r2, r1]
 8015b4e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8015b52:	4a04      	ldr	r2, [pc, #16]	; (8015b64 <LCD_Index2Color_565+0x28>)
 8015b54:	5c10      	ldrb	r0, [r2, r0]
 8015b56:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8015b5a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8015b5e:	4770      	bx	lr
 8015b60:	0801f2c0 	.word	0x0801f2c0
 8015b64:	0801f280 	.word	0x0801f280

08015b68 <_Color2Index_565>:
 8015b68:	b2c1      	uxtb	r1, r0
 8015b6a:	4a07      	ldr	r2, [pc, #28]	; (8015b88 <_Color2Index_565+0x20>)
 8015b6c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015b70:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015b74:	5cd3      	ldrb	r3, [r2, r3]
 8015b76:	5c52      	ldrb	r2, [r2, r1]
 8015b78:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8015b7c:	4a03      	ldr	r2, [pc, #12]	; (8015b8c <_Color2Index_565+0x24>)
 8015b7e:	5c10      	ldrb	r0, [r2, r0]
 8015b80:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8015b84:	4770      	bx	lr
 8015b86:	bf00      	nop
 8015b88:	0801f080 	.word	0x0801f080
 8015b8c:	0801ef80 	.word	0x0801ef80

08015b90 <_GetIndexMask_565>:
 8015b90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015b94:	4770      	bx	lr
	...

08015b98 <_Color2IndexBulk>:
 8015b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b9a:	4e0b      	ldr	r6, [pc, #44]	; (8015bc8 <_Color2IndexBulk+0x30>)
 8015b9c:	4f0b      	ldr	r7, [pc, #44]	; (8015bcc <_Color2IndexBulk+0x34>)
 8015b9e:	f850 5b04 	ldr.w	r5, [r0], #4
 8015ba2:	3a01      	subs	r2, #1
 8015ba4:	f3c5 4407 	ubfx	r4, r5, #16, #8
 8015ba8:	fa5f fe85 	uxtb.w	lr, r5
 8015bac:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8015bb0:	5d34      	ldrb	r4, [r6, r4]
 8015bb2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8015bb6:	5d7d      	ldrb	r5, [r7, r5]
 8015bb8:	eb04 24ce 	add.w	r4, r4, lr, lsl #11
 8015bbc:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8015bc0:	800c      	strh	r4, [r1, #0]
 8015bc2:	4419      	add	r1, r3
 8015bc4:	d1eb      	bne.n	8015b9e <_Color2IndexBulk+0x6>
 8015bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bc8:	0801f080 	.word	0x0801f080
 8015bcc:	0801ef80 	.word	0x0801ef80

08015bd0 <_Index2ColorBulk>:
 8015bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bd2:	1e54      	subs	r4, r2, #1
 8015bd4:	4e10      	ldr	r6, [pc, #64]	; (8015c18 <_Index2ColorBulk+0x48>)
 8015bd6:	4f11      	ldr	r7, [pc, #68]	; (8015c1c <_Index2ColorBulk+0x4c>)
 8015bd8:	fb03 0004 	mla	r0, r3, r4, r0
 8015bdc:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 8015be0:	3c01      	subs	r4, #1
 8015be2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015be6:	8805      	ldrh	r5, [r0, #0]
 8015be8:	3a01      	subs	r2, #1
 8015bea:	eba0 0003 	sub.w	r0, r0, r3
 8015bee:	f005 041f 	and.w	r4, r5, #31
 8015bf2:	f816 e004 	ldrb.w	lr, [r6, r4]
 8015bf6:	ea4f 24d5 	mov.w	r4, r5, lsr #11
 8015bfa:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8015bfe:	5d34      	ldrb	r4, [r6, r4]
 8015c00:	5d7d      	ldrb	r5, [r7, r5]
 8015c02:	eb04 440e 	add.w	r4, r4, lr, lsl #16
 8015c06:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8015c0a:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8015c0e:	f841 4904 	str.w	r4, [r1], #-4
 8015c12:	d1e8      	bne.n	8015be6 <_Index2ColorBulk+0x16>
 8015c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c16:	bf00      	nop
 8015c18:	0801f2c0 	.word	0x0801f2c0
 8015c1c:	0801f280 	.word	0x0801f280

08015c20 <_Color2Index_888>:
 8015c20:	0403      	lsls	r3, r0, #16
 8015c22:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015c26:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015c2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015c2e:	4313      	orrs	r3, r2
 8015c30:	4318      	orrs	r0, r3
 8015c32:	4770      	bx	lr

08015c34 <_GetIndexMask_888>:
 8015c34:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015c38:	4770      	bx	lr

08015c3a <_Color2IndexBulk>:
 8015c3a:	b570      	push	{r4, r5, r6, lr}
 8015c3c:	f850 4b04 	ldr.w	r4, [r0], #4
 8015c40:	3a01      	subs	r2, #1
 8015c42:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8015c46:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015c4a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015c4e:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8015c52:	ea45 0506 	orr.w	r5, r5, r6
 8015c56:	ea44 0405 	orr.w	r4, r4, r5
 8015c5a:	600c      	str	r4, [r1, #0]
 8015c5c:	4419      	add	r1, r3
 8015c5e:	d1ed      	bne.n	8015c3c <_Color2IndexBulk+0x2>
 8015c60:	bd70      	pop	{r4, r5, r6, pc}

08015c62 <_Index2ColorBulk>:
 8015c62:	b570      	push	{r4, r5, r6, lr}
 8015c64:	6804      	ldr	r4, [r0, #0]
 8015c66:	3a01      	subs	r2, #1
 8015c68:	4418      	add	r0, r3
 8015c6a:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8015c6e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015c72:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015c76:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8015c7a:	ea45 0506 	orr.w	r5, r5, r6
 8015c7e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8015c82:	ea44 0405 	orr.w	r4, r4, r5
 8015c86:	f841 4b04 	str.w	r4, [r1], #4
 8015c8a:	d1eb      	bne.n	8015c64 <_Index2ColorBulk+0x2>
 8015c8c:	bd70      	pop	{r4, r5, r6, pc}

08015c8e <_Color2Index_8888>:
 8015c8e:	43c3      	mvns	r3, r0
 8015c90:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015c94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015c98:	431a      	orrs	r2, r3
 8015c9a:	0403      	lsls	r3, r0, #16
 8015c9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015ca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015ca4:	4313      	orrs	r3, r2
 8015ca6:	4318      	orrs	r0, r3
 8015ca8:	4770      	bx	lr

08015caa <_GetIndexMask_8888>:
 8015caa:	f04f 30ff 	mov.w	r0, #4294967295
 8015cae:	4770      	bx	lr

08015cb0 <_Color2IndexBulk>:
 8015cb0:	b570      	push	{r4, r5, r6, lr}
 8015cb2:	f850 4b04 	ldr.w	r4, [r0], #4
 8015cb6:	3a01      	subs	r2, #1
 8015cb8:	ea6f 0504 	mvn.w	r5, r4
 8015cbc:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015cc0:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8015cc4:	ea46 0605 	orr.w	r6, r6, r5
 8015cc8:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8015ccc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015cd0:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8015cd4:	ea45 0506 	orr.w	r5, r5, r6
 8015cd8:	ea44 0405 	orr.w	r4, r4, r5
 8015cdc:	600c      	str	r4, [r1, #0]
 8015cde:	4419      	add	r1, r3
 8015ce0:	d1e7      	bne.n	8015cb2 <_Color2IndexBulk+0x2>
 8015ce2:	bd70      	pop	{r4, r5, r6, pc}

08015ce4 <_Index2ColorBulk>:
 8015ce4:	b570      	push	{r4, r5, r6, lr}
 8015ce6:	6804      	ldr	r4, [r0, #0]
 8015ce8:	3a01      	subs	r2, #1
 8015cea:	4418      	add	r0, r3
 8015cec:	ea6f 0504 	mvn.w	r5, r4
 8015cf0:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015cf4:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8015cf8:	ea46 0605 	orr.w	r6, r6, r5
 8015cfc:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8015d00:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015d04:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8015d08:	ea45 0506 	orr.w	r5, r5, r6
 8015d0c:	ea44 0405 	orr.w	r4, r4, r5
 8015d10:	f841 4b04 	str.w	r4, [r1], #4
 8015d14:	d1e7      	bne.n	8015ce6 <_Index2ColorBulk+0x2>
 8015d16:	bd70      	pop	{r4, r5, r6, pc}

08015d18 <LCD_Index2Color_8888>:
 8015d18:	43c3      	mvns	r3, r0
 8015d1a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015d1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015d22:	431a      	orrs	r2, r3
 8015d24:	0403      	lsls	r3, r0, #16
 8015d26:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015d2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015d2e:	4313      	orrs	r3, r2
 8015d30:	4318      	orrs	r0, r3
 8015d32:	4770      	bx	lr

08015d34 <LCD_Index2Color_888>:
 8015d34:	0403      	lsls	r3, r0, #16
 8015d36:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015d3a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015d42:	4313      	orrs	r3, r2
 8015d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015d48:	4318      	orrs	r0, r3
 8015d4a:	4770      	bx	lr

08015d4c <LCD_Index2Color_M565>:
 8015d4c:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8015d50:	4a07      	ldr	r2, [pc, #28]	; (8015d70 <LCD_Index2Color_M565+0x24>)
 8015d52:	5cd1      	ldrb	r1, [r2, r3]
 8015d54:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8015d58:	4a06      	ldr	r2, [pc, #24]	; (8015d74 <LCD_Index2Color_M565+0x28>)
 8015d5a:	f000 001f 	and.w	r0, r0, #31
 8015d5e:	5cd3      	ldrb	r3, [r2, r3]
 8015d60:	5c10      	ldrb	r0, [r2, r0]
 8015d62:	041b      	lsls	r3, r3, #16
 8015d64:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015d68:	4418      	add	r0, r3
 8015d6a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8015d6e:	4770      	bx	lr
 8015d70:	0801f280 	.word	0x0801f280
 8015d74:	0801f2c0 	.word	0x0801f2c0

08015d78 <_Color2Index_M565>:
 8015d78:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015d7c:	4a06      	ldr	r2, [pc, #24]	; (8015d98 <_Color2Index_M565+0x20>)
 8015d7e:	5cd1      	ldrb	r1, [r2, r3]
 8015d80:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015d84:	4a05      	ldr	r2, [pc, #20]	; (8015d9c <_Color2Index_M565+0x24>)
 8015d86:	b2c0      	uxtb	r0, r0
 8015d88:	5cd3      	ldrb	r3, [r2, r3]
 8015d8a:	5c10      	ldrb	r0, [r2, r0]
 8015d8c:	02db      	lsls	r3, r3, #11
 8015d8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015d92:	4418      	add	r0, r3
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop
 8015d98:	0801ef80 	.word	0x0801ef80
 8015d9c:	0801f080 	.word	0x0801f080

08015da0 <_GetIndexMask_M565>:
 8015da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015da4:	4770      	bx	lr
	...

08015da8 <_Color2IndexBulk>:
 8015da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015daa:	f8df e050 	ldr.w	lr, [pc, #80]	; 8015dfc <_Color2IndexBulk+0x54>
 8015dae:	4606      	mov	r6, r0
 8015db0:	460d      	mov	r5, r1
 8015db2:	4614      	mov	r4, r2
 8015db4:	f8de e000 	ldr.w	lr, [lr]
 8015db8:	461f      	mov	r7, r3
 8015dba:	f1be 0f00 	cmp.w	lr, #0
 8015dbe:	d003      	beq.n	8015dc8 <_Color2IndexBulk+0x20>
 8015dc0:	46f4      	mov	ip, lr
 8015dc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015dc6:	4760      	bx	ip
 8015dc8:	f8df e034 	ldr.w	lr, [pc, #52]	; 8015e00 <_Color2IndexBulk+0x58>
 8015dcc:	490a      	ldr	r1, [pc, #40]	; (8015df8 <_Color2IndexBulk+0x50>)
 8015dce:	f856 2b04 	ldr.w	r2, [r6], #4
 8015dd2:	3c01      	subs	r4, #1
 8015dd4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8015dd8:	f81e 0003 	ldrb.w	r0, [lr, r3]
 8015ddc:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8015de0:	b2d2      	uxtb	r2, r2
 8015de2:	5ccb      	ldrb	r3, [r1, r3]
 8015de4:	5c8a      	ldrb	r2, [r1, r2]
 8015de6:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8015dea:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8015dee:	4413      	add	r3, r2
 8015df0:	802b      	strh	r3, [r5, #0]
 8015df2:	443d      	add	r5, r7
 8015df4:	d1eb      	bne.n	8015dce <_Color2IndexBulk+0x26>
 8015df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015df8:	0801f080 	.word	0x0801f080
 8015dfc:	20000158 	.word	0x20000158
 8015e00:	0801ef80 	.word	0x0801ef80

08015e04 <_Index2ColorBulk>:
 8015e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e06:	4e16      	ldr	r6, [pc, #88]	; (8015e60 <_Index2ColorBulk+0x5c>)
 8015e08:	4686      	mov	lr, r0
 8015e0a:	460f      	mov	r7, r1
 8015e0c:	4614      	mov	r4, r2
 8015e0e:	6876      	ldr	r6, [r6, #4]
 8015e10:	461d      	mov	r5, r3
 8015e12:	b11e      	cbz	r6, 8015e1c <_Index2ColorBulk+0x18>
 8015e14:	46b4      	mov	ip, r6
 8015e16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015e1a:	4760      	bx	ip
 8015e1c:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8015e20:	1e50      	subs	r0, r2, #1
 8015e22:	4e10      	ldr	r6, [pc, #64]	; (8015e64 <_Index2ColorBulk+0x60>)
 8015e24:	3901      	subs	r1, #1
 8015e26:	fb03 e000 	mla	r0, r3, r0, lr
 8015e2a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8015e2e:	4f0e      	ldr	r7, [pc, #56]	; (8015e68 <_Index2ColorBulk+0x64>)
 8015e30:	8802      	ldrh	r2, [r0, #0]
 8015e32:	3c01      	subs	r4, #1
 8015e34:	eba0 0005 	sub.w	r0, r0, r5
 8015e38:	ea4f 23d2 	mov.w	r3, r2, lsr #11
 8015e3c:	f816 e003 	ldrb.w	lr, [r6, r3]
 8015e40:	f002 031f 	and.w	r3, r2, #31
 8015e44:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8015e48:	5cf3      	ldrb	r3, [r6, r3]
 8015e4a:	5cba      	ldrb	r2, [r7, r2]
 8015e4c:	eb03 430e 	add.w	r3, r3, lr, lsl #16
 8015e50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015e58:	f841 3904 	str.w	r3, [r1], #-4
 8015e5c:	d1e8      	bne.n	8015e30 <_Index2ColorBulk+0x2c>
 8015e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e60:	20000158 	.word	0x20000158
 8015e64:	0801f2c0 	.word	0x0801f2c0
 8015e68:	0801f280 	.word	0x0801f280

08015e6c <GUICC_M565_SetCustColorConv>:
 8015e6c:	4b01      	ldr	r3, [pc, #4]	; (8015e74 <GUICC_M565_SetCustColorConv+0x8>)
 8015e6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e72:	4770      	bx	lr
 8015e74:	20000158 	.word	0x20000158

08015e78 <_Color2Index_M888>:
 8015e78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8015e7c:	4770      	bx	lr

08015e7e <_GetIndexMask_M888>:
 8015e7e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015e82:	4770      	bx	lr

08015e84 <_Color2IndexBulk>:
 8015e84:	b510      	push	{r4, lr}
 8015e86:	f850 4b04 	ldr.w	r4, [r0], #4
 8015e8a:	3a01      	subs	r2, #1
 8015e8c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8015e90:	600c      	str	r4, [r1, #0]
 8015e92:	4419      	add	r1, r3
 8015e94:	d1f7      	bne.n	8015e86 <_Color2IndexBulk+0x2>
 8015e96:	bd10      	pop	{r4, pc}

08015e98 <_Index2ColorBulk>:
 8015e98:	b510      	push	{r4, lr}
 8015e9a:	6804      	ldr	r4, [r0, #0]
 8015e9c:	3a01      	subs	r2, #1
 8015e9e:	4418      	add	r0, r3
 8015ea0:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8015ea4:	f841 4b04 	str.w	r4, [r1], #4
 8015ea8:	d1f7      	bne.n	8015e9a <_Index2ColorBulk+0x2>
 8015eaa:	bd10      	pop	{r4, pc}

08015eac <GUICC_M888_SetCustColorConv>:
 8015eac:	4770      	bx	lr

08015eae <_Color2Index_M8888>:
 8015eae:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8015eb2:	4770      	bx	lr

08015eb4 <_GetIndexMask_M8888>:
 8015eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb8:	4770      	bx	lr

08015eba <_Color2IndexBulk>:
 8015eba:	b510      	push	{r4, lr}
 8015ebc:	f850 4b04 	ldr.w	r4, [r0], #4
 8015ec0:	3a01      	subs	r2, #1
 8015ec2:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8015ec6:	600c      	str	r4, [r1, #0]
 8015ec8:	4419      	add	r1, r3
 8015eca:	d1f7      	bne.n	8015ebc <_Color2IndexBulk+0x2>
 8015ecc:	bd10      	pop	{r4, pc}

08015ece <_Index2ColorBulk>:
 8015ece:	b510      	push	{r4, lr}
 8015ed0:	6804      	ldr	r4, [r0, #0]
 8015ed2:	3a01      	subs	r2, #1
 8015ed4:	4418      	add	r0, r3
 8015ed6:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8015eda:	f841 4b04 	str.w	r4, [r1], #4
 8015ede:	d1f7      	bne.n	8015ed0 <_Index2ColorBulk+0x2>
 8015ee0:	bd10      	pop	{r4, pc}

08015ee2 <_Index2Color_M8888>:
 8015ee2:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8015ee6:	4770      	bx	lr

08015ee8 <LCD_Index2Color_M8888I>:
 8015ee8:	4770      	bx	lr

08015eea <LCD_Index2Color_M888>:
 8015eea:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8015eee:	4770      	bx	lr

08015ef0 <_PushFreeBlock>:
 8015ef0:	4b07      	ldr	r3, [pc, #28]	; (8015f10 <_PushFreeBlock+0x20>)
 8015ef2:	685a      	ldr	r2, [r3, #4]
 8015ef4:	3201      	adds	r2, #1
 8015ef6:	b510      	push	{r4, lr}
 8015ef8:	605a      	str	r2, [r3, #4]
 8015efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015efc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015efe:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8015f02:	604c      	str	r4, [r1, #4]
 8015f04:	2100      	movs	r1, #0
 8015f06:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8015f0a:	6258      	str	r0, [r3, #36]	; 0x24
 8015f0c:	bd10      	pop	{r4, pc}
 8015f0e:	bf00      	nop
 8015f10:	2002238c 	.word	0x2002238c

08015f14 <_RemoveFreeBlock>:
 8015f14:	b510      	push	{r4, lr}
 8015f16:	230f      	movs	r3, #15
 8015f18:	6844      	ldr	r4, [r0, #4]
 8015f1a:	490d      	ldr	r1, [pc, #52]	; (8015f50 <_RemoveFreeBlock+0x3c>)
 8015f1c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8015f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8015f22:	4294      	cmp	r4, r2
 8015f24:	4a0a      	ldr	r2, [pc, #40]	; (8015f50 <_RemoveFreeBlock+0x3c>)
 8015f26:	d203      	bcs.n	8015f30 <_RemoveFreeBlock+0x1c>
 8015f28:	f113 33ff 	adds.w	r3, r3, #4294967295
 8015f2c:	d2f6      	bcs.n	8015f1c <_RemoveFreeBlock+0x8>
 8015f2e:	bd10      	pop	{r4, pc}
 8015f30:	2b0f      	cmp	r3, #15
 8015f32:	d80c      	bhi.n	8015f4e <_RemoveFreeBlock+0x3a>
 8015f34:	6811      	ldr	r1, [r2, #0]
 8015f36:	1b09      	subs	r1, r1, r4
 8015f38:	6011      	str	r1, [r2, #0]
 8015f3a:	6881      	ldr	r1, [r0, #8]
 8015f3c:	68c0      	ldr	r0, [r0, #12]
 8015f3e:	b101      	cbz	r1, 8015f42 <_RemoveFreeBlock+0x2e>
 8015f40:	6048      	str	r0, [r1, #4]
 8015f42:	b108      	cbz	r0, 8015f48 <_RemoveFreeBlock+0x34>
 8015f44:	6001      	str	r1, [r0, #0]
 8015f46:	bd10      	pop	{r4, pc}
 8015f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015f4c:	6459      	str	r1, [r3, #68]	; 0x44
 8015f4e:	bd10      	pop	{r4, pc}
 8015f50:	2002238c 	.word	0x2002238c

08015f54 <_AddFreeMemory>:
 8015f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f56:	4e27      	ldr	r6, [pc, #156]	; (8015ff4 <_AddFreeMemory+0xa0>)
 8015f58:	4605      	mov	r5, r0
 8015f5a:	1808      	adds	r0, r1, r0
 8015f5c:	460c      	mov	r4, r1
 8015f5e:	68f3      	ldr	r3, [r6, #12]
 8015f60:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8015f62:	3b01      	subs	r3, #1
 8015f64:	4413      	add	r3, r2
 8015f66:	4283      	cmp	r3, r0
 8015f68:	d305      	bcc.n	8015f76 <_AddFreeMemory+0x22>
 8015f6a:	594b      	ldr	r3, [r1, r5]
 8015f6c:	b91b      	cbnz	r3, 8015f76 <_AddFreeMemory+0x22>
 8015f6e:	6843      	ldr	r3, [r0, #4]
 8015f70:	441d      	add	r5, r3
 8015f72:	f7ff ffcf 	bl	8015f14 <_RemoveFreeBlock>
 8015f76:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8015f78:	429c      	cmp	r4, r3
 8015f7a:	d90a      	bls.n	8015f92 <_AddFreeMemory+0x3e>
 8015f7c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8015f80:	1be7      	subs	r7, r4, r7
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	b92b      	cbnz	r3, 8015f92 <_AddFreeMemory+0x3e>
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	463c      	mov	r4, r7
 8015f8a:	4638      	mov	r0, r7
 8015f8c:	441d      	add	r5, r3
 8015f8e:	f7ff ffc1 	bl	8015f14 <_RemoveFreeBlock>
 8015f92:	230f      	movs	r3, #15
 8015f94:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8015f98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8015f9a:	4295      	cmp	r5, r2
 8015f9c:	d203      	bcs.n	8015fa6 <_AddFreeMemory+0x52>
 8015f9e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8015fa2:	d2f7      	bcs.n	8015f94 <_AddFreeMemory+0x40>
 8015fa4:	e023      	b.n	8015fee <_AddFreeMemory+0x9a>
 8015fa6:	2b0f      	cmp	r3, #15
 8015fa8:	d821      	bhi.n	8015fee <_AddFreeMemory+0x9a>
 8015faa:	3308      	adds	r3, #8
 8015fac:	1960      	adds	r0, r4, r5
 8015fae:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8015fb2:	6851      	ldr	r1, [r2, #4]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	6124      	str	r4, [r4, #16]
 8015fb8:	60a1      	str	r1, [r4, #8]
 8015fba:	e884 0024 	stmia.w	r4, {r2, r5}
 8015fbe:	f840 5c04 	str.w	r5, [r0, #-4]
 8015fc2:	f104 0008 	add.w	r0, r4, #8
 8015fc6:	b101      	cbz	r1, 8015fca <_AddFreeMemory+0x76>
 8015fc8:	6048      	str	r0, [r1, #4]
 8015fca:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8015fce:	60a1      	str	r1, [r4, #8]
 8015fd0:	60e2      	str	r2, [r4, #12]
 8015fd2:	6058      	str	r0, [r3, #4]
 8015fd4:	6833      	ldr	r3, [r6, #0]
 8015fd6:	4907      	ldr	r1, [pc, #28]	; (8015ff4 <_AddFreeMemory+0xa0>)
 8015fd8:	18ea      	adds	r2, r5, r3
 8015fda:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8015fde:	6032      	str	r2, [r6, #0]
 8015fe0:	b92b      	cbnz	r3, 8015fee <_AddFreeMemory+0x9a>
 8015fe2:	68cb      	ldr	r3, [r1, #12]
 8015fe4:	1a9b      	subs	r3, r3, r2
 8015fe6:	688a      	ldr	r2, [r1, #8]
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	bf88      	it	hi
 8015fec:	608b      	strhi	r3, [r1, #8]
 8015fee:	4628      	mov	r0, r5
 8015ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	2002238c 	.word	0x2002238c

08015ff8 <_RemoveHoles>:
 8015ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ffc:	4f23      	ldr	r7, [pc, #140]	; (801608c <_RemoveHoles+0x94>)
 8015ffe:	4683      	mov	fp, r0
 8016000:	68fe      	ldr	r6, [r7, #12]
 8016002:	46b8      	mov	r8, r7
 8016004:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8016006:	3e01      	subs	r6, #1
 8016008:	4426      	add	r6, r4
 801600a:	e894 0028 	ldmia.w	r4, {r3, r5}
 801600e:	bb9b      	cbnz	r3, 8016078 <_RemoveHoles+0x80>
 8016010:	1961      	adds	r1, r4, r5
 8016012:	428e      	cmp	r6, r1
 8016014:	d930      	bls.n	8016078 <_RemoveHoles+0x80>
 8016016:	f854 a005 	ldr.w	sl, [r4, r5]
 801601a:	f1ba 0f00 	cmp.w	sl, #0
 801601e:	d02b      	beq.n	8016078 <_RemoveHoles+0x80>
 8016020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016022:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 8016026:	2b01      	cmp	r3, #1
 8016028:	d126      	bne.n	8016078 <_RemoveHoles+0x80>
 801602a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 801602e:	4620      	mov	r0, r4
 8016030:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	9101      	str	r1, [sp, #4]
 8016038:	f7ff ff6c 	bl	8015f14 <_RemoveFreeBlock>
 801603c:	9901      	ldr	r1, [sp, #4]
 801603e:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8016042:	6808      	ldr	r0, [r1, #0]
 8016044:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016048:	4620      	mov	r0, r4
 801604a:	6054      	str	r4, [r2, #4]
 801604c:	464a      	mov	r2, r9
 801604e:	f008 fda1 	bl	801eb94 <memmove>
 8016052:	9b00      	ldr	r3, [sp, #0]
 8016054:	eb04 0109 	add.w	r1, r4, r9
 8016058:	4628      	mov	r0, r5
 801605a:	459a      	cmp	sl, r3
 801605c:	bf02      	ittt	eq
 801605e:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 8016062:	1b5b      	subeq	r3, r3, r5
 8016064:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 8016068:	f7ff ff74 	bl	8015f54 <_AddFreeMemory>
 801606c:	f1bb 0f00 	cmp.w	fp, #0
 8016070:	d001      	beq.n	8016076 <_RemoveHoles+0x7e>
 8016072:	4558      	cmp	r0, fp
 8016074:	d205      	bcs.n	8016082 <_RemoveHoles+0x8a>
 8016076:	464d      	mov	r5, r9
 8016078:	442c      	add	r4, r5
 801607a:	42a6      	cmp	r6, r4
 801607c:	d8c5      	bhi.n	801600a <_RemoveHoles+0x12>
 801607e:	2001      	movs	r0, #1
 8016080:	e000      	b.n	8016084 <_RemoveHoles+0x8c>
 8016082:	2000      	movs	r0, #0
 8016084:	b003      	add	sp, #12
 8016086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801608a:	bf00      	nop
 801608c:	2002238c 	.word	0x2002238c

08016090 <GUI_ALLOC_FreeFixedBlock>:
 8016090:	b128      	cbz	r0, 801609e <GUI_ALLOC_FreeFixedBlock+0xe>
 8016092:	4b03      	ldr	r3, [pc, #12]	; (80160a0 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8016094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016096:	6002      	str	r2, [r0, #0]
 8016098:	b102      	cbz	r2, 801609c <GUI_ALLOC_FreeFixedBlock+0xc>
 801609a:	6050      	str	r0, [r2, #4]
 801609c:	63d8      	str	r0, [r3, #60]	; 0x3c
 801609e:	4770      	bx	lr
 80160a0:	2002238c 	.word	0x2002238c

080160a4 <GUI_ALLOC_h2p>:
 80160a4:	4b03      	ldr	r3, [pc, #12]	; (80160b4 <GUI_ALLOC_h2p+0x10>)
 80160a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160a8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80160ac:	6840      	ldr	r0, [r0, #4]
 80160ae:	3008      	adds	r0, #8
 80160b0:	4770      	bx	lr
 80160b2:	bf00      	nop
 80160b4:	2002238c 	.word	0x2002238c

080160b8 <GUI_ALLOC_LockH>:
 80160b8:	4b05      	ldr	r3, [pc, #20]	; (80160d0 <GUI_ALLOC_LockH+0x18>)
 80160ba:	69da      	ldr	r2, [r3, #28]
 80160bc:	3201      	adds	r2, #1
 80160be:	61da      	str	r2, [r3, #28]
 80160c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80160c2:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 80160c6:	3301      	adds	r3, #1
 80160c8:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 80160cc:	f7ff bfea 	b.w	80160a4 <GUI_ALLOC_h2p>
 80160d0:	2002238c 	.word	0x2002238c

080160d4 <GUI_ALLOC_UnlockH>:
 80160d4:	6803      	ldr	r3, [r0, #0]
 80160d6:	490a      	ldr	r1, [pc, #40]	; (8016100 <GUI_ALLOC_UnlockH+0x2c>)
 80160d8:	b530      	push	{r4, r5, lr}
 80160da:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80160de:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80160e0:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 80160e4:	2b01      	cmp	r3, #1
 80160e6:	d903      	bls.n	80160f0 <GUI_ALLOC_UnlockH+0x1c>
 80160e8:	69ca      	ldr	r2, [r1, #28]
 80160ea:	b10a      	cbz	r2, 80160f0 <GUI_ALLOC_UnlockH+0x1c>
 80160ec:	3a01      	subs	r2, #1
 80160ee:	61ca      	str	r2, [r1, #28]
 80160f0:	3b01      	subs	r3, #1
 80160f2:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 80160f6:	2300      	movs	r3, #0
 80160f8:	6003      	str	r3, [r0, #0]
 80160fa:	4618      	mov	r0, r3
 80160fc:	bd30      	pop	{r4, r5, pc}
 80160fe:	bf00      	nop
 8016100:	2002238c 	.word	0x2002238c

08016104 <GUI_ALLOC_Lock>:
 8016104:	4a02      	ldr	r2, [pc, #8]	; (8016110 <GUI_ALLOC_Lock+0xc>)
 8016106:	6993      	ldr	r3, [r2, #24]
 8016108:	3301      	adds	r3, #1
 801610a:	6193      	str	r3, [r2, #24]
 801610c:	4770      	bx	lr
 801610e:	bf00      	nop
 8016110:	2002238c 	.word	0x2002238c

08016114 <GUI_ALLOC_Unlock>:
 8016114:	4a02      	ldr	r2, [pc, #8]	; (8016120 <GUI_ALLOC_Unlock+0xc>)
 8016116:	6993      	ldr	r3, [r2, #24]
 8016118:	3b01      	subs	r3, #1
 801611a:	6193      	str	r3, [r2, #24]
 801611c:	4770      	bx	lr
 801611e:	bf00      	nop
 8016120:	2002238c 	.word	0x2002238c

08016124 <GUI_ALLOC_AssignMemory>:
 8016124:	4b02      	ldr	r3, [pc, #8]	; (8016130 <GUI_ALLOC_AssignMemory+0xc>)
 8016126:	f021 0103 	bic.w	r1, r1, #3
 801612a:	6018      	str	r0, [r3, #0]
 801612c:	6059      	str	r1, [r3, #4]
 801612e:	4770      	bx	lr
 8016130:	20000160 	.word	0x20000160

08016134 <GUI_ALLOC_Free>:
 8016134:	b510      	push	{r4, lr}
 8016136:	4604      	mov	r4, r0
 8016138:	b180      	cbz	r0, 801615c <GUI_ALLOC_Free+0x28>
 801613a:	f001 f89d 	bl	8017278 <GUI_Lock>
 801613e:	4b08      	ldr	r3, [pc, #32]	; (8016160 <GUI_ALLOC_Free+0x2c>)
 8016140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016146:	6859      	ldr	r1, [r3, #4]
 8016148:	6848      	ldr	r0, [r1, #4]
 801614a:	f7ff ff03 	bl	8015f54 <_AddFreeMemory>
 801614e:	4620      	mov	r0, r4
 8016150:	f7ff fece 	bl	8015ef0 <_PushFreeBlock>
 8016154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016158:	f001 b884 	b.w	8017264 <GUI_Unlock>
 801615c:	bd10      	pop	{r4, pc}
 801615e:	bf00      	nop
 8016160:	2002238c 	.word	0x2002238c

08016164 <_EnlargeBlocks>:
 8016164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016168:	4c22      	ldr	r4, [pc, #136]	; (80161f4 <_EnlargeBlocks+0x90>)
 801616a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801616c:	b93b      	cbnz	r3, 801617e <_EnlargeBlocks+0x1a>
 801616e:	4b22      	ldr	r3, [pc, #136]	; (80161f8 <_EnlargeBlocks+0x94>)
 8016170:	689d      	ldr	r5, [r3, #8]
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	3508      	adds	r5, #8
 8016176:	fbb3 f5f5 	udiv	r5, r3, r5
 801617a:	3502      	adds	r5, #2
 801617c:	e003      	b.n	8016186 <_EnlargeBlocks+0x22>
 801617e:	6923      	ldr	r3, [r4, #16]
 8016180:	1d1d      	adds	r5, r3, #4
 8016182:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 8016186:	00e8      	lsls	r0, r5, #3
 8016188:	f000 f8f8 	bl	801637c <_Alloc>
 801618c:	4680      	mov	r8, r0
 801618e:	b360      	cbz	r0, 80161ea <_EnlargeBlocks+0x86>
 8016190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016192:	6922      	ldr	r2, [r4, #16]
 8016194:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8016198:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801619a:	00d2      	lsls	r2, r2, #3
 801619c:	685e      	ldr	r6, [r3, #4]
 801619e:	4b17      	ldr	r3, [pc, #92]	; (80161fc <_EnlargeBlocks+0x98>)
 80161a0:	3608      	adds	r6, #8
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	4630      	mov	r0, r6
 80161a6:	4798      	blx	r3
 80161a8:	6922      	ldr	r2, [r4, #16]
 80161aa:	1e69      	subs	r1, r5, #1
 80161ac:	6366      	str	r6, [r4, #52]	; 0x34
 80161ae:	4613      	mov	r3, r2
 80161b0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80161b4:	428b      	cmp	r3, r1
 80161b6:	d205      	bcs.n	80161c4 <_EnlargeBlocks+0x60>
 80161b8:	3301      	adds	r3, #1
 80161ba:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 80161be:	f840 3c04 	str.w	r3, [r0, #-4]
 80161c2:	e7f7      	b.n	80161b4 <_EnlargeBlocks+0x50>
 80161c4:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80161c8:	f04f 0800 	mov.w	r8, #0
 80161cc:	4638      	mov	r0, r7
 80161ce:	f8c6 8004 	str.w	r8, [r6, #4]
 80161d2:	6863      	ldr	r3, [r4, #4]
 80161d4:	6262      	str	r2, [r4, #36]	; 0x24
 80161d6:	1a9b      	subs	r3, r3, r2
 80161d8:	6125      	str	r5, [r4, #16]
 80161da:	442b      	add	r3, r5
 80161dc:	6063      	str	r3, [r4, #4]
 80161de:	b13f      	cbz	r7, 80161f0 <_EnlargeBlocks+0x8c>
 80161e0:	f7ff ffa8 	bl	8016134 <GUI_ALLOC_Free>
 80161e4:	4640      	mov	r0, r8
 80161e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ea:	2001      	movs	r0, #1
 80161ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f4:	2002238c 	.word	0x2002238c
 80161f8:	20000160 	.word	0x20000160
 80161fc:	20000038 	.word	0x20000038

08016200 <_InitOnce>:
 8016200:	4a17      	ldr	r2, [pc, #92]	; (8016260 <_InitOnce+0x60>)
 8016202:	b570      	push	{r4, r5, r6, lr}
 8016204:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8016208:	bb43      	cbnz	r3, 801625c <_InitOnce+0x5c>
 801620a:	2301      	movs	r3, #1
 801620c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8016210:	4b14      	ldr	r3, [pc, #80]	; (8016264 <_InitOnce+0x64>)
 8016212:	6899      	ldr	r1, [r3, #8]
 8016214:	b911      	cbnz	r1, 801621c <_InitOnce+0x1c>
 8016216:	6859      	ldr	r1, [r3, #4]
 8016218:	0889      	lsrs	r1, r1, #2
 801621a:	6099      	str	r1, [r3, #8]
 801621c:	215a      	movs	r1, #90	; 0x5a
 801621e:	2610      	movs	r6, #16
 8016220:	6211      	str	r1, [r2, #32]
 8016222:	2100      	movs	r1, #0
 8016224:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8016228:	fa06 f501 	lsl.w	r5, r6, r1
 801622c:	3101      	adds	r1, #1
 801622e:	4c0c      	ldr	r4, [pc, #48]	; (8016260 <_InitOnce+0x60>)
 8016230:	6405      	str	r5, [r0, #64]	; 0x40
 8016232:	2910      	cmp	r1, #16
 8016234:	d1f6      	bne.n	8016224 <_InitOnce+0x24>
 8016236:	6819      	ldr	r1, [r3, #0]
 8016238:	2501      	movs	r5, #1
 801623a:	6858      	ldr	r0, [r3, #4]
 801623c:	2302      	movs	r3, #2
 801623e:	63a1      	str	r1, [r4, #56]	; 0x38
 8016240:	6123      	str	r3, [r4, #16]
 8016242:	f1a0 0314 	sub.w	r3, r0, #20
 8016246:	60e0      	str	r0, [r4, #12]
 8016248:	440b      	add	r3, r1
 801624a:	6363      	str	r3, [r4, #52]	; 0x34
 801624c:	605d      	str	r5, [r3, #4]
 801624e:	6265      	str	r5, [r4, #36]	; 0x24
 8016250:	6065      	str	r5, [r4, #4]
 8016252:	f7ff fe7f 	bl	8015f54 <_AddFreeMemory>
 8016256:	f7ff ff85 	bl	8016164 <_EnlargeBlocks>
 801625a:	6325      	str	r5, [r4, #48]	; 0x30
 801625c:	bd70      	pop	{r4, r5, r6, pc}
 801625e:	bf00      	nop
 8016260:	2002238c 	.word	0x2002238c
 8016264:	20000160 	.word	0x20000160

08016268 <GUI_ALLOC_GetFixedBlock>:
 8016268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801626c:	4607      	mov	r7, r0
 801626e:	4e26      	ldr	r6, [pc, #152]	; (8016308 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8016270:	f7ff ffc6 	bl	8016200 <_InitOnce>
 8016274:	3703      	adds	r7, #3
 8016276:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8016278:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801627a:	f027 0703 	bic.w	r7, r7, #3
 801627e:	4614      	mov	r4, r2
 8016280:	3704      	adds	r7, #4
 8016282:	4287      	cmp	r7, r0
 8016284:	bf38      	it	cc
 8016286:	4607      	movcc	r7, r0
 8016288:	b134      	cbz	r4, 8016298 <GUI_ALLOC_GetFixedBlock+0x30>
 801628a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801628e:	429f      	cmp	r7, r3
 8016290:	6823      	ldr	r3, [r4, #0]
 8016292:	d02c      	beq.n	80162ee <GUI_ALLOC_GetFixedBlock+0x86>
 8016294:	461c      	mov	r4, r3
 8016296:	e7f7      	b.n	8016288 <GUI_ALLOC_GetFixedBlock+0x20>
 8016298:	68f3      	ldr	r3, [r6, #12]
 801629a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 801629c:	eb02 0803 	add.w	r8, r2, r3
 80162a0:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80162a4:	ebc5 0508 	rsb	r5, r5, r8
 80162a8:	682b      	ldr	r3, [r5, #0]
 80162aa:	b133      	cbz	r3, 80162ba <GUI_ALLOC_GetFixedBlock+0x52>
 80162ac:	4620      	mov	r0, r4
 80162ae:	f7ff fea3 	bl	8015ff8 <_RemoveHoles>
 80162b2:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80162b6:	ebc5 0508 	rsb	r5, r5, r8
 80162ba:	682b      	ldr	r3, [r5, #0]
 80162bc:	bb0b      	cbnz	r3, 8016302 <GUI_ALLOC_GetFixedBlock+0x9a>
 80162be:	686b      	ldr	r3, [r5, #4]
 80162c0:	429f      	cmp	r7, r3
 80162c2:	dc1e      	bgt.n	8016302 <GUI_ALLOC_GetFixedBlock+0x9a>
 80162c4:	4628      	mov	r0, r5
 80162c6:	1d1c      	adds	r4, r3, #4
 80162c8:	f7ff fe24 	bl	8015f14 <_RemoveFreeBlock>
 80162cc:	68f3      	ldr	r3, [r6, #12]
 80162ce:	6868      	ldr	r0, [r5, #4]
 80162d0:	1be4      	subs	r4, r4, r7
 80162d2:	1bdb      	subs	r3, r3, r7
 80162d4:	1bc0      	subs	r0, r0, r7
 80162d6:	442c      	add	r4, r5
 80162d8:	60f3      	str	r3, [r6, #12]
 80162da:	6973      	ldr	r3, [r6, #20]
 80162dc:	443b      	add	r3, r7
 80162de:	6173      	str	r3, [r6, #20]
 80162e0:	d002      	beq.n	80162e8 <GUI_ALLOC_GetFixedBlock+0x80>
 80162e2:	4629      	mov	r1, r5
 80162e4:	f7ff fe36 	bl	8015f54 <_AddFreeMemory>
 80162e8:	f844 7c04 	str.w	r7, [r4, #-4]
 80162ec:	e009      	b.n	8016302 <GUI_ALLOC_GetFixedBlock+0x9a>
 80162ee:	b10b      	cbz	r3, 80162f4 <GUI_ALLOC_GetFixedBlock+0x8c>
 80162f0:	6861      	ldr	r1, [r4, #4]
 80162f2:	6059      	str	r1, [r3, #4]
 80162f4:	6861      	ldr	r1, [r4, #4]
 80162f6:	b101      	cbz	r1, 80162fa <GUI_ALLOC_GetFixedBlock+0x92>
 80162f8:	600b      	str	r3, [r1, #0]
 80162fa:	42a2      	cmp	r2, r4
 80162fc:	d101      	bne.n	8016302 <GUI_ALLOC_GetFixedBlock+0x9a>
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	63f3      	str	r3, [r6, #60]	; 0x3c
 8016302:	4620      	mov	r0, r4
 8016304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016308:	2002238c 	.word	0x2002238c

0801630c <GUI_ALLOC_GetMaxSize>:
 801630c:	b508      	push	{r3, lr}
 801630e:	f7ff ff77 	bl	8016200 <_InitOnce>
 8016312:	2300      	movs	r3, #0
 8016314:	4a0b      	ldr	r2, [pc, #44]	; (8016344 <GUI_ALLOC_GetMaxSize+0x38>)
 8016316:	1899      	adds	r1, r3, r2
 8016318:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 801631c:	b110      	cbz	r0, 8016324 <GUI_ALLOC_GetMaxSize+0x18>
 801631e:	6883      	ldr	r3, [r0, #8]
 8016320:	2000      	movs	r0, #0
 8016322:	e00b      	b.n	801633c <GUI_ALLOC_GetMaxSize+0x30>
 8016324:	3b08      	subs	r3, #8
 8016326:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801632a:	d1f4      	bne.n	8016316 <GUI_ALLOC_GetMaxSize+0xa>
 801632c:	e008      	b.n	8016340 <GUI_ALLOC_GetMaxSize+0x34>
 801632e:	685a      	ldr	r2, [r3, #4]
 8016330:	689b      	ldr	r3, [r3, #8]
 8016332:	4290      	cmp	r0, r2
 8016334:	bf38      	it	cc
 8016336:	4610      	movcc	r0, r2
 8016338:	b113      	cbz	r3, 8016340 <GUI_ALLOC_GetMaxSize+0x34>
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d1f6      	bne.n	801632e <GUI_ALLOC_GetMaxSize+0x22>
 8016340:	380c      	subs	r0, #12
 8016342:	bd08      	pop	{r3, pc}
 8016344:	2002238c 	.word	0x2002238c

08016348 <GUI_ALLOC_RequestSize>:
 8016348:	b510      	push	{r4, lr}
 801634a:	f000 ff95 	bl	8017278 <GUI_Lock>
 801634e:	2464      	movs	r4, #100	; 0x64
 8016350:	f7ff ffdc 	bl	801630c <GUI_ALLOC_GetMaxSize>
 8016354:	4b08      	ldr	r3, [pc, #32]	; (8016378 <GUI_ALLOC_RequestSize+0x30>)
 8016356:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 801635a:	bf95      	itete	ls
 801635c:	6a1b      	ldrls	r3, [r3, #32]
 801635e:	6a1b      	ldrhi	r3, [r3, #32]
 8016360:	4358      	mulls	r0, r3
 8016362:	fb90 f0f4 	sdivhi	r0, r0, r4
 8016366:	bf94      	ite	ls
 8016368:	fbb0 f4f4 	udivls	r4, r0, r4
 801636c:	fb03 f400 	mulhi.w	r4, r3, r0
 8016370:	f000 ff78 	bl	8017264 <GUI_Unlock>
 8016374:	4620      	mov	r0, r4
 8016376:	bd10      	pop	{r4, pc}
 8016378:	2002238c 	.word	0x2002238c

0801637c <_Alloc>:
 801637c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016380:	4e39      	ldr	r6, [pc, #228]	; (8016468 <_Alloc+0xec>)
 8016382:	4604      	mov	r4, r0
 8016384:	f7ff ff3c 	bl	8016200 <_InitOnce>
 8016388:	6c35      	ldr	r5, [r6, #64]	; 0x40
 801638a:	6833      	ldr	r3, [r6, #0]
 801638c:	42ac      	cmp	r4, r5
 801638e:	bf24      	itt	cs
 8016390:	3403      	addcs	r4, #3
 8016392:	f024 0503 	biccs.w	r5, r4, #3
 8016396:	4c34      	ldr	r4, [pc, #208]	; (8016468 <_Alloc+0xec>)
 8016398:	350c      	adds	r5, #12
 801639a:	42ab      	cmp	r3, r5
 801639c:	d33e      	bcc.n	801641c <_Alloc+0xa0>
 801639e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163a0:	6862      	ldr	r2, [r4, #4]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d90f      	bls.n	80163c6 <_Alloc+0x4a>
 80163a6:	6873      	ldr	r3, [r6, #4]
 80163a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80163aa:	3b01      	subs	r3, #1
 80163ac:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80163b0:	6073      	str	r3, [r6, #4]
 80163b2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80163b4:	eb03 0208 	add.w	r2, r3, r8
 80163b8:	6852      	ldr	r2, [r2, #4]
 80163ba:	6272      	str	r2, [r6, #36]	; 0x24
 80163bc:	2201      	movs	r2, #1
 80163be:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 80163c2:	b957      	cbnz	r7, 80163da <_Alloc+0x5e>
 80163c4:	e02a      	b.n	801641c <_Alloc+0xa0>
 80163c6:	3b01      	subs	r3, #1
 80163c8:	6323      	str	r3, [r4, #48]	; 0x30
 80163ca:	f7ff fecb 	bl	8016164 <_EnlargeBlocks>
 80163ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163d0:	3301      	adds	r3, #1
 80163d2:	6323      	str	r3, [r4, #48]	; 0x30
 80163d4:	2800      	cmp	r0, #0
 80163d6:	d0e6      	beq.n	80163a6 <_Alloc+0x2a>
 80163d8:	e020      	b.n	801641c <_Alloc+0xa0>
 80163da:	230f      	movs	r3, #15
 80163dc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80163e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80163e2:	4295      	cmp	r5, r2
 80163e4:	d20c      	bcs.n	8016400 <_Alloc+0x84>
 80163e6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80163ea:	d2f7      	bcs.n	80163dc <_Alloc+0x60>
 80163ec:	e008      	b.n	8016400 <_Alloc+0x84>
 80163ee:	6894      	ldr	r4, [r2, #8]
 80163f0:	b12c      	cbz	r4, 80163fe <_Alloc+0x82>
 80163f2:	6862      	ldr	r2, [r4, #4]
 80163f4:	4295      	cmp	r5, r2
 80163f6:	d914      	bls.n	8016422 <_Alloc+0xa6>
 80163f8:	68a2      	ldr	r2, [r4, #8]
 80163fa:	2a00      	cmp	r2, #0
 80163fc:	d1f7      	bne.n	80163ee <_Alloc+0x72>
 80163fe:	3301      	adds	r3, #1
 8016400:	2b0f      	cmp	r3, #15
 8016402:	d803      	bhi.n	801640c <_Alloc+0x90>
 8016404:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8016408:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801640a:	e7f6      	b.n	80163fa <_Alloc+0x7e>
 801640c:	4628      	mov	r0, r5
 801640e:	f7ff fdf3 	bl	8015ff8 <_RemoveHoles>
 8016412:	2800      	cmp	r0, #0
 8016414:	d0e1      	beq.n	80163da <_Alloc+0x5e>
 8016416:	4638      	mov	r0, r7
 8016418:	f7ff fd6a 	bl	8015ef0 <_PushFreeBlock>
 801641c:	2000      	movs	r0, #0
 801641e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016422:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016426:	4620      	mov	r0, r4
 8016428:	6c33      	ldr	r3, [r6, #64]	; 0x40
 801642a:	ebc5 0209 	rsb	r2, r5, r9
 801642e:	330c      	adds	r3, #12
 8016430:	429a      	cmp	r2, r3
 8016432:	bf38      	it	cc
 8016434:	464d      	movcc	r5, r9
 8016436:	f7ff fd6d 	bl	8015f14 <_RemoveFreeBlock>
 801643a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801643c:	1961      	adds	r1, r4, r5
 801643e:	454d      	cmp	r5, r9
 8016440:	4498      	add	r8, r3
 8016442:	f04f 0300 	mov.w	r3, #0
 8016446:	f8c8 4004 	str.w	r4, [r8, #4]
 801644a:	6027      	str	r7, [r4, #0]
 801644c:	6065      	str	r5, [r4, #4]
 801644e:	60a3      	str	r3, [r4, #8]
 8016450:	6124      	str	r4, [r4, #16]
 8016452:	f841 5c04 	str.w	r5, [r1, #-4]
 8016456:	da03      	bge.n	8016460 <_Alloc+0xe4>
 8016458:	ebc5 0009 	rsb	r0, r5, r9
 801645c:	f7ff fd7a 	bl	8015f54 <_AddFreeMemory>
 8016460:	4638      	mov	r0, r7
 8016462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016466:	bf00      	nop
 8016468:	2002238c 	.word	0x2002238c

0801646c <GUI_ALLOC_AllocNoInit>:
 801646c:	b510      	push	{r4, lr}
 801646e:	4604      	mov	r4, r0
 8016470:	b138      	cbz	r0, 8016482 <GUI_ALLOC_AllocNoInit+0x16>
 8016472:	f000 ff01 	bl	8017278 <GUI_Lock>
 8016476:	4620      	mov	r0, r4
 8016478:	f7ff ff80 	bl	801637c <_Alloc>
 801647c:	4604      	mov	r4, r0
 801647e:	f000 fef1 	bl	8017264 <GUI_Unlock>
 8016482:	4620      	mov	r0, r4
 8016484:	bd10      	pop	{r4, pc}
	...

08016488 <GUI_ALLOC_AllocZero>:
 8016488:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801648a:	4605      	mov	r5, r0
 801648c:	f000 fef4 	bl	8017278 <GUI_Lock>
 8016490:	4628      	mov	r0, r5
 8016492:	f7ff ffeb 	bl	801646c <GUI_ALLOC_AllocNoInit>
 8016496:	4606      	mov	r6, r0
 8016498:	b160      	cbz	r0, 80164b4 <GUI_ALLOC_AllocZero+0x2c>
 801649a:	f7ff fe0d 	bl	80160b8 <GUI_ALLOC_LockH>
 801649e:	ac02      	add	r4, sp, #8
 80164a0:	4b07      	ldr	r3, [pc, #28]	; (80164c0 <GUI_ALLOC_AllocZero+0x38>)
 80164a2:	462a      	mov	r2, r5
 80164a4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80164a8:	2100      	movs	r1, #0
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	4798      	blx	r3
 80164ae:	4620      	mov	r0, r4
 80164b0:	f7ff fe10 	bl	80160d4 <GUI_ALLOC_UnlockH>
 80164b4:	f000 fed6 	bl	8017264 <GUI_Unlock>
 80164b8:	4630      	mov	r0, r6
 80164ba:	b002      	add	sp, #8
 80164bc:	bd70      	pop	{r4, r5, r6, pc}
 80164be:	bf00      	nop
 80164c0:	2000003c 	.word	0x2000003c

080164c4 <GUI_CalcColorDist>:
 80164c4:	b2c3      	uxtb	r3, r0
 80164c6:	b2ca      	uxtb	r2, r1
 80164c8:	1a9a      	subs	r2, r3, r2
 80164ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80164ce:	b292      	uxth	r2, r2
 80164d0:	b510      	push	{r4, lr}
 80164d2:	b214      	sxth	r4, r2
 80164d4:	2c00      	cmp	r4, #0
 80164d6:	bfbc      	itt	lt
 80164d8:	4252      	neglt	r2, r2
 80164da:	b214      	sxthlt	r4, r2
 80164dc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80164e0:	0c09      	lsrs	r1, r1, #16
 80164e2:	1a9b      	subs	r3, r3, r2
 80164e4:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 80164e8:	b29b      	uxth	r3, r3
 80164ea:	b289      	uxth	r1, r1
 80164ec:	b21a      	sxth	r2, r3
 80164ee:	b208      	sxth	r0, r1
 80164f0:	2a00      	cmp	r2, #0
 80164f2:	bfbc      	itt	lt
 80164f4:	425b      	neglt	r3, r3
 80164f6:	b21a      	sxthlt	r2, r3
 80164f8:	2800      	cmp	r0, #0
 80164fa:	bfb8      	it	lt
 80164fc:	4249      	neglt	r1, r1
 80164fe:	fb02 f202 	mul.w	r2, r2, r2
 8016502:	bfb8      	it	lt
 8016504:	b208      	sxthlt	r0, r1
 8016506:	fb04 2204 	mla	r2, r4, r4, r2
 801650a:	b280      	uxth	r0, r0
 801650c:	fb00 2000 	mla	r0, r0, r0, r2
 8016510:	bd10      	pop	{r4, pc}

08016512 <GUI_GetBkColor>:
 8016512:	b510      	push	{r4, lr}
 8016514:	f000 feb0 	bl	8017278 <GUI_Lock>
 8016518:	f001 feca 	bl	80182b0 <LCD_GetBkColorIndex>
 801651c:	f001 fdce 	bl	80180bc <LCD_Index2Color>
 8016520:	4604      	mov	r4, r0
 8016522:	f000 fe9f 	bl	8017264 <GUI_Unlock>
 8016526:	4620      	mov	r0, r4
 8016528:	bd10      	pop	{r4, pc}

0801652a <GUI_GetColor>:
 801652a:	b510      	push	{r4, lr}
 801652c:	f000 fea4 	bl	8017278 <GUI_Lock>
 8016530:	f001 fec6 	bl	80182c0 <LCD_GetColorIndex>
 8016534:	f001 fdc2 	bl	80180bc <LCD_Index2Color>
 8016538:	4604      	mov	r4, r0
 801653a:	f000 fe93 	bl	8017264 <GUI_Unlock>
 801653e:	4620      	mov	r0, r4
 8016540:	bd10      	pop	{r4, pc}
	...

08016544 <GUI_GetDrawMode>:
 8016544:	b510      	push	{r4, lr}
 8016546:	f000 fe97 	bl	8017278 <GUI_Lock>
 801654a:	4b03      	ldr	r3, [pc, #12]	; (8016558 <GUI_GetDrawMode+0x14>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	7c1c      	ldrb	r4, [r3, #16]
 8016550:	f000 fe88 	bl	8017264 <GUI_Unlock>
 8016554:	4620      	mov	r0, r4
 8016556:	bd10      	pop	{r4, pc}
 8016558:	20000018 	.word	0x20000018

0801655c <GUI_GetOrg>:
 801655c:	b538      	push	{r3, r4, r5, lr}
 801655e:	4605      	mov	r5, r0
 8016560:	460c      	mov	r4, r1
 8016562:	f000 fe89 	bl	8017278 <GUI_Lock>
 8016566:	4b06      	ldr	r3, [pc, #24]	; (8016580 <GUI_GetOrg+0x24>)
 8016568:	f9b3 3000 	ldrsh.w	r3, [r3]
 801656c:	602b      	str	r3, [r5, #0]
 801656e:	4b05      	ldr	r3, [pc, #20]	; (8016584 <GUI_GetOrg+0x28>)
 8016570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016574:	6023      	str	r3, [r4, #0]
 8016576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801657a:	f000 be73 	b.w	8017264 <GUI_Unlock>
 801657e:	bf00      	nop
 8016580:	20022474 	.word	0x20022474
 8016584:	20022464 	.word	0x20022464

08016588 <GUI_GetVersionString>:
 8016588:	4804      	ldr	r0, [pc, #16]	; (801659c <GUI_GetVersionString+0x14>)
 801658a:	2335      	movs	r3, #53	; 0x35
 801658c:	7003      	strb	r3, [r0, #0]
 801658e:	2334      	movs	r3, #52	; 0x34
 8016590:	7083      	strb	r3, [r0, #2]
 8016592:	70c3      	strb	r3, [r0, #3]
 8016594:	2361      	movs	r3, #97	; 0x61
 8016596:	7103      	strb	r3, [r0, #4]
 8016598:	4770      	bx	lr
 801659a:	bf00      	nop
 801659c:	20000000 	.word	0x20000000

080165a0 <GUI_MergeRect>:
 80165a0:	b510      	push	{r4, lr}
 80165a2:	b338      	cbz	r0, 80165f4 <GUI_MergeRect+0x54>
 80165a4:	b309      	cbz	r1, 80165ea <GUI_MergeRect+0x4a>
 80165a6:	b30a      	cbz	r2, 80165ec <GUI_MergeRect+0x4c>
 80165a8:	f9b2 4000 	ldrsh.w	r4, [r2]
 80165ac:	f9b1 3000 	ldrsh.w	r3, [r1]
 80165b0:	42a3      	cmp	r3, r4
 80165b2:	bfa8      	it	ge
 80165b4:	4623      	movge	r3, r4
 80165b6:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80165ba:	8003      	strh	r3, [r0, #0]
 80165bc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80165c0:	42a3      	cmp	r3, r4
 80165c2:	bfa8      	it	ge
 80165c4:	4623      	movge	r3, r4
 80165c6:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80165ca:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80165ce:	8043      	strh	r3, [r0, #2]
 80165d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80165d4:	42a3      	cmp	r3, r4
 80165d6:	bfb8      	it	lt
 80165d8:	4623      	movlt	r3, r4
 80165da:	8083      	strh	r3, [r0, #4]
 80165dc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80165e0:	4293      	cmp	r3, r2
 80165e2:	bfb8      	it	lt
 80165e4:	4613      	movlt	r3, r2
 80165e6:	80c3      	strh	r3, [r0, #6]
 80165e8:	bd10      	pop	{r4, pc}
 80165ea:	4611      	mov	r1, r2
 80165ec:	680b      	ldr	r3, [r1, #0]
 80165ee:	6003      	str	r3, [r0, #0]
 80165f0:	684b      	ldr	r3, [r1, #4]
 80165f2:	6043      	str	r3, [r0, #4]
 80165f4:	bd10      	pop	{r4, pc}

080165f6 <GUI_MoveRect>:
 80165f6:	b168      	cbz	r0, 8016614 <GUI_MoveRect+0x1e>
 80165f8:	b289      	uxth	r1, r1
 80165fa:	8803      	ldrh	r3, [r0, #0]
 80165fc:	b292      	uxth	r2, r2
 80165fe:	440b      	add	r3, r1
 8016600:	8003      	strh	r3, [r0, #0]
 8016602:	8883      	ldrh	r3, [r0, #4]
 8016604:	4419      	add	r1, r3
 8016606:	8843      	ldrh	r3, [r0, #2]
 8016608:	4413      	add	r3, r2
 801660a:	8081      	strh	r1, [r0, #4]
 801660c:	8043      	strh	r3, [r0, #2]
 801660e:	88c3      	ldrh	r3, [r0, #6]
 8016610:	441a      	add	r2, r3
 8016612:	80c2      	strh	r2, [r0, #6]
 8016614:	4770      	bx	lr
	...

08016618 <GUI_Exec1>:
 8016618:	4b0c      	ldr	r3, [pc, #48]	; (801664c <GUI_Exec1+0x34>)
 801661a:	b510      	push	{r4, lr}
 801661c:	681c      	ldr	r4, [r3, #0]
 801661e:	b11c      	cbz	r4, 8016628 <GUI_Exec1+0x10>
 8016620:	47a0      	blx	r4
 8016622:	1c04      	adds	r4, r0, #0
 8016624:	bf18      	it	ne
 8016626:	2401      	movne	r4, #1
 8016628:	f004 fedc 	bl	801b3e4 <WM_Exec>
 801662c:	4b08      	ldr	r3, [pc, #32]	; (8016650 <GUI_Exec1+0x38>)
 801662e:	2800      	cmp	r0, #0
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	bf18      	it	ne
 8016634:	2401      	movne	r4, #1
 8016636:	b11b      	cbz	r3, 8016640 <GUI_Exec1+0x28>
 8016638:	4798      	blx	r3
 801663a:	2800      	cmp	r0, #0
 801663c:	bf18      	it	ne
 801663e:	2401      	movne	r4, #1
 8016640:	4b04      	ldr	r3, [pc, #16]	; (8016654 <GUI_Exec1+0x3c>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	b103      	cbz	r3, 8016648 <GUI_Exec1+0x30>
 8016646:	4798      	blx	r3
 8016648:	4620      	mov	r0, r4
 801664a:	bd10      	pop	{r4, pc}
 801664c:	20022470 	.word	0x20022470
 8016650:	20022498 	.word	0x20022498
 8016654:	20022490 	.word	0x20022490

08016658 <GUI_Exec>:
 8016658:	b510      	push	{r4, lr}
 801665a:	2400      	movs	r4, #0
 801665c:	f7ff ffdc 	bl	8016618 <GUI_Exec1>
 8016660:	b108      	cbz	r0, 8016666 <GUI_Exec+0xe>
 8016662:	2401      	movs	r4, #1
 8016664:	e7fa      	b.n	801665c <GUI_Exec+0x4>
 8016666:	4620      	mov	r0, r4
 8016668:	bd10      	pop	{r4, pc}

0801666a <GUI_GetBitmapPixelIndexEx>:
 801666a:	2804      	cmp	r0, #4
 801666c:	b530      	push	{r4, r5, lr}
 801666e:	9d03      	ldr	r5, [sp, #12]
 8016670:	d027      	beq.n	80166c2 <GUI_GetBitmapPixelIndexEx+0x58>
 8016672:	dc10      	bgt.n	8016696 <GUI_GetBitmapPixelIndexEx+0x2c>
 8016674:	2801      	cmp	r0, #1
 8016676:	d018      	beq.n	80166aa <GUI_GetBitmapPixelIndexEx+0x40>
 8016678:	2802      	cmp	r0, #2
 801667a:	d138      	bne.n	80166ee <GUI_GetBitmapPixelIndexEx+0x84>
 801667c:	4369      	muls	r1, r5
 801667e:	eb02 0293 	add.w	r2, r2, r3, lsr #2
 8016682:	ea6f 0043 	mvn.w	r0, r3, lsl #1
 8016686:	5c52      	ldrb	r2, [r2, r1]
 8016688:	f000 0006 	and.w	r0, r0, #6
 801668c:	fa22 f000 	lsr.w	r0, r2, r0
 8016690:	f000 0003 	and.w	r0, r0, #3
 8016694:	bd30      	pop	{r4, r5, pc}
 8016696:	2810      	cmp	r0, #16
 8016698:	d01d      	beq.n	80166d6 <GUI_GetBitmapPixelIndexEx+0x6c>
 801669a:	2820      	cmp	r0, #32
 801669c:	d021      	beq.n	80166e2 <GUI_GetBitmapPixelIndexEx+0x78>
 801669e:	2808      	cmp	r0, #8
 80166a0:	d125      	bne.n	80166ee <GUI_GetBitmapPixelIndexEx+0x84>
 80166a2:	fb05 2101 	mla	r1, r5, r1, r2
 80166a6:	5cc8      	ldrb	r0, [r1, r3]
 80166a8:	bd30      	pop	{r4, r5, pc}
 80166aa:	4369      	muls	r1, r5
 80166ac:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80166b0:	43d8      	mvns	r0, r3
 80166b2:	5c52      	ldrb	r2, [r2, r1]
 80166b4:	f000 0007 	and.w	r0, r0, #7
 80166b8:	fa22 f000 	lsr.w	r0, r2, r0
 80166bc:	f000 0001 	and.w	r0, r0, #1
 80166c0:	bd30      	pop	{r4, r5, pc}
 80166c2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80166c6:	4369      	muls	r1, r5
 80166c8:	07db      	lsls	r3, r3, #31
 80166ca:	5c50      	ldrb	r0, [r2, r1]
 80166cc:	bf4c      	ite	mi
 80166ce:	f000 000f 	andmi.w	r0, r0, #15
 80166d2:	0900      	lsrpl	r0, r0, #4
 80166d4:	bd30      	pop	{r4, r5, pc}
 80166d6:	104c      	asrs	r4, r1, #1
 80166d8:	fb05 3304 	mla	r3, r5, r4, r3
 80166dc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80166e0:	bd30      	pop	{r4, r5, pc}
 80166e2:	108c      	asrs	r4, r1, #2
 80166e4:	fb05 3304 	mla	r3, r5, r4, r3
 80166e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80166ec:	bd30      	pop	{r4, r5, pc}
 80166ee:	2000      	movs	r0, #0
 80166f0:	bd30      	pop	{r4, r5, pc}

080166f2 <GUI_GetBitmapPixelIndex>:
 80166f2:	b513      	push	{r0, r1, r4, lr}
 80166f4:	460b      	mov	r3, r1
 80166f6:	b130      	cbz	r0, 8016706 <GUI_GetBitmapPixelIndex+0x14>
 80166f8:	88c4      	ldrh	r4, [r0, #6]
 80166fa:	8881      	ldrh	r1, [r0, #4]
 80166fc:	9200      	str	r2, [sp, #0]
 80166fe:	6882      	ldr	r2, [r0, #8]
 8016700:	4620      	mov	r0, r4
 8016702:	f7ff ffb2 	bl	801666a <GUI_GetBitmapPixelIndexEx>
 8016706:	b002      	add	sp, #8
 8016708:	bd10      	pop	{r4, pc}
	...

0801670c <GUI_GotoXY>:
 801670c:	b538      	push	{r3, r4, r5, lr}
 801670e:	4605      	mov	r5, r0
 8016710:	460c      	mov	r4, r1
 8016712:	f000 fdb1 	bl	8017278 <GUI_Lock>
 8016716:	4b04      	ldr	r3, [pc, #16]	; (8016728 <GUI_GotoXY+0x1c>)
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	845d      	strh	r5, [r3, #34]	; 0x22
 801671c:	849c      	strh	r4, [r3, #36]	; 0x24
 801671e:	f000 fda1 	bl	8017264 <GUI_Unlock>
 8016722:	2000      	movs	r0, #0
 8016724:	bd38      	pop	{r3, r4, r5, pc}
 8016726:	bf00      	nop
 8016728:	20000018 	.word	0x20000018

0801672c <GUI_SetPenSize>:
 801672c:	b538      	push	{r3, r4, r5, lr}
 801672e:	4605      	mov	r5, r0
 8016730:	f000 fda2 	bl	8017278 <GUI_Lock>
 8016734:	4b03      	ldr	r3, [pc, #12]	; (8016744 <GUI_SetPenSize+0x18>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	7e1c      	ldrb	r4, [r3, #24]
 801673a:	761d      	strb	r5, [r3, #24]
 801673c:	f000 fd92 	bl	8017264 <GUI_Unlock>
 8016740:	4620      	mov	r0, r4
 8016742:	bd38      	pop	{r3, r4, r5, pc}
 8016744:	20000018 	.word	0x20000018

08016748 <GUI_RectsIntersect>:
 8016748:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801674c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016750:	429a      	cmp	r2, r3
 8016752:	dc14      	bgt.n	801677e <GUI_RectsIntersect+0x36>
 8016754:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016758:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801675c:	429a      	cmp	r2, r3
 801675e:	dc0e      	bgt.n	801677e <GUI_RectsIntersect+0x36>
 8016760:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016764:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016768:	429a      	cmp	r2, r3
 801676a:	dc08      	bgt.n	801677e <GUI_RectsIntersect+0x36>
 801676c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8016770:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016774:	4283      	cmp	r3, r0
 8016776:	bfcc      	ite	gt
 8016778:	2000      	movgt	r0, #0
 801677a:	2001      	movle	r0, #1
 801677c:	4770      	bx	lr
 801677e:	2000      	movs	r0, #0
 8016780:	4770      	bx	lr
	...

08016784 <GUI_SaveContext_W>:
 8016784:	b508      	push	{r3, lr}
 8016786:	4b03      	ldr	r3, [pc, #12]	; (8016794 <GUI_SaveContext_W+0x10>)
 8016788:	2274      	movs	r2, #116	; 0x74
 801678a:	6819      	ldr	r1, [r3, #0]
 801678c:	f008 f9f7 	bl	801eb7e <memcpy>
 8016790:	bd08      	pop	{r3, pc}
 8016792:	bf00      	nop
 8016794:	20000018 	.word	0x20000018

08016798 <GUI_RestoreContext>:
 8016798:	b508      	push	{r3, lr}
 801679a:	4b03      	ldr	r3, [pc, #12]	; (80167a8 <GUI_RestoreContext+0x10>)
 801679c:	4601      	mov	r1, r0
 801679e:	2274      	movs	r2, #116	; 0x74
 80167a0:	6818      	ldr	r0, [r3, #0]
 80167a2:	f008 f9ec 	bl	801eb7e <memcpy>
 80167a6:	bd08      	pop	{r3, pc}
 80167a8:	20000018 	.word	0x20000018

080167ac <GUI_SelectLCD>:
 80167ac:	b508      	push	{r3, lr}
 80167ae:	f000 fd63 	bl	8017278 <GUI_Lock>
 80167b2:	f001 ff91 	bl	80186d8 <LCD_SelectLCD>
 80167b6:	f002 f857 	bl	8018868 <LCD_UpdateColorIndices>
 80167ba:	f004 fe57 	bl	801b46c <WM_Activate>
 80167be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80167c2:	f000 bd4f 	b.w	8017264 <GUI_Unlock>

080167c6 <GUI_SetBkColor>:
 80167c6:	b510      	push	{r4, lr}
 80167c8:	4604      	mov	r4, r0
 80167ca:	f000 fd55 	bl	8017278 <GUI_Lock>
 80167ce:	4620      	mov	r0, r4
 80167d0:	f001 fcba 	bl	8018148 <LCD_SetBkColor>
 80167d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167d8:	f000 bd44 	b.w	8017264 <GUI_Unlock>

080167dc <GUI_SetColor>:
 80167dc:	b510      	push	{r4, lr}
 80167de:	4604      	mov	r4, r0
 80167e0:	f000 fd4a 	bl	8017278 <GUI_Lock>
 80167e4:	4620      	mov	r0, r4
 80167e6:	f001 fcb5 	bl	8018154 <LCD_SetColor>
 80167ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167ee:	f000 bd39 	b.w	8017264 <GUI_Unlock>

080167f2 <GUI_SetDrawMode>:
 80167f2:	b510      	push	{r4, lr}
 80167f4:	4604      	mov	r4, r0
 80167f6:	f000 fd3f 	bl	8017278 <GUI_Lock>
 80167fa:	4620      	mov	r0, r4
 80167fc:	f001 f968 	bl	8017ad0 <LCD_SetDrawMode>
 8016800:	4604      	mov	r4, r0
 8016802:	f000 fd2f 	bl	8017264 <GUI_Unlock>
 8016806:	4620      	mov	r0, r4
 8016808:	bd10      	pop	{r4, pc}
	...

0801680c <GUI_SetFont>:
 801680c:	b538      	push	{r3, r4, r5, lr}
 801680e:	4604      	mov	r4, r0
 8016810:	f000 fd32 	bl	8017278 <GUI_Lock>
 8016814:	4b04      	ldr	r3, [pc, #16]	; (8016828 <GUI_SetFont+0x1c>)
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	69dd      	ldr	r5, [r3, #28]
 801681a:	b104      	cbz	r4, 801681e <GUI_SetFont+0x12>
 801681c:	61dc      	str	r4, [r3, #28]
 801681e:	f000 fd21 	bl	8017264 <GUI_Unlock>
 8016822:	4628      	mov	r0, r5
 8016824:	bd38      	pop	{r3, r4, r5, pc}
 8016826:	bf00      	nop
 8016828:	20000018 	.word	0x20000018

0801682c <GUI_SetLineStyle>:
 801682c:	b538      	push	{r3, r4, r5, lr}
 801682e:	4605      	mov	r5, r0
 8016830:	f000 fd22 	bl	8017278 <GUI_Lock>
 8016834:	4b03      	ldr	r3, [pc, #12]	; (8016844 <GUI_SetLineStyle+0x18>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	7e9c      	ldrb	r4, [r3, #26]
 801683a:	769d      	strb	r5, [r3, #26]
 801683c:	f000 fd12 	bl	8017264 <GUI_Unlock>
 8016840:	4620      	mov	r0, r4
 8016842:	bd38      	pop	{r3, r4, r5, pc}
 8016844:	20000018 	.word	0x20000018

08016848 <GUI_SetOrg>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	4604      	mov	r4, r0
 801684c:	460d      	mov	r5, r1
 801684e:	f000 fd13 	bl	8017278 <GUI_Lock>
 8016852:	4b09      	ldr	r3, [pc, #36]	; (8016878 <GUI_SetOrg+0x30>)
 8016854:	4621      	mov	r1, r4
 8016856:	801c      	strh	r4, [r3, #0]
 8016858:	4b08      	ldr	r3, [pc, #32]	; (801687c <GUI_SetOrg+0x34>)
 801685a:	801d      	strh	r5, [r3, #0]
 801685c:	4b08      	ldr	r3, [pc, #32]	; (8016880 <GUI_SetOrg+0x38>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	7c5a      	ldrb	r2, [r3, #17]
 8016862:	4b08      	ldr	r3, [pc, #32]	; (8016884 <GUI_SetOrg+0x3c>)
 8016864:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016868:	68c2      	ldr	r2, [r0, #12]
 801686a:	6a16      	ldr	r6, [r2, #32]
 801686c:	462a      	mov	r2, r5
 801686e:	47b0      	blx	r6
 8016870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016874:	f000 bcf6 	b.w	8017264 <GUI_Unlock>
 8016878:	20022474 	.word	0x20022474
 801687c:	20022464 	.word	0x20022464
 8016880:	20000018 	.word	0x20000018
 8016884:	2002249c 	.word	0x2002249c

08016888 <GUI_SetTextAlign>:
 8016888:	b538      	push	{r3, r4, r5, lr}
 801688a:	4605      	mov	r5, r0
 801688c:	f000 fcf4 	bl	8017278 <GUI_Lock>
 8016890:	4b04      	ldr	r3, [pc, #16]	; (80168a4 <GUI_SetTextAlign+0x1c>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8016898:	859d      	strh	r5, [r3, #44]	; 0x2c
 801689a:	f000 fce3 	bl	8017264 <GUI_Unlock>
 801689e:	4620      	mov	r0, r4
 80168a0:	bd38      	pop	{r3, r4, r5, pc}
 80168a2:	bf00      	nop
 80168a4:	20000018 	.word	0x20000018

080168a8 <GUI_SetTextMode>:
 80168a8:	b538      	push	{r3, r4, r5, lr}
 80168aa:	4605      	mov	r5, r0
 80168ac:	f000 fce4 	bl	8017278 <GUI_Lock>
 80168b0:	4b04      	ldr	r3, [pc, #16]	; (80168c4 <GUI_SetTextMode+0x1c>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 80168b8:	855d      	strh	r5, [r3, #42]	; 0x2a
 80168ba:	f000 fcd3 	bl	8017264 <GUI_Unlock>
 80168be:	4620      	mov	r0, r4
 80168c0:	bd38      	pop	{r3, r4, r5, pc}
 80168c2:	bf00      	nop
 80168c4:	20000018 	.word	0x20000018

080168c8 <GL_SetDefault>:
 80168c8:	b508      	push	{r3, lr}
 80168ca:	4b0e      	ldr	r3, [pc, #56]	; (8016904 <GL_SetDefault+0x3c>)
 80168cc:	6818      	ldr	r0, [r3, #0]
 80168ce:	f7ff ff7a 	bl	80167c6 <GUI_SetBkColor>
 80168d2:	4b0d      	ldr	r3, [pc, #52]	; (8016908 <GL_SetDefault+0x40>)
 80168d4:	6818      	ldr	r0, [r3, #0]
 80168d6:	f7ff ff81 	bl	80167dc <GUI_SetColor>
 80168da:	2001      	movs	r0, #1
 80168dc:	f7ff ff26 	bl	801672c <GUI_SetPenSize>
 80168e0:	2000      	movs	r0, #0
 80168e2:	f7ff ffd1 	bl	8016888 <GUI_SetTextAlign>
 80168e6:	2000      	movs	r0, #0
 80168e8:	f7ff ffde 	bl	80168a8 <GUI_SetTextMode>
 80168ec:	2000      	movs	r0, #0
 80168ee:	f7ff ff80 	bl	80167f2 <GUI_SetDrawMode>
 80168f2:	4b06      	ldr	r3, [pc, #24]	; (801690c <GL_SetDefault+0x44>)
 80168f4:	6818      	ldr	r0, [r3, #0]
 80168f6:	f7ff ff89 	bl	801680c <GUI_SetFont>
 80168fa:	2000      	movs	r0, #0
 80168fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016900:	f7ff bf94 	b.w	801682c <GUI_SetLineStyle>
 8016904:	20000014 	.word	0x20000014
 8016908:	20000010 	.word	0x20000010
 801690c:	2000000c 	.word	0x2000000c

08016910 <_InitContext>:
 8016910:	b538      	push	{r3, r4, r5, lr}
 8016912:	4d19      	ldr	r5, [pc, #100]	; (8016978 <_InitContext+0x68>)
 8016914:	4604      	mov	r4, r0
 8016916:	4b19      	ldr	r3, [pc, #100]	; (801697c <_InitContext+0x6c>)
 8016918:	f104 0108 	add.w	r1, r4, #8
 801691c:	6703      	str	r3, [r0, #112]	; 0x70
 801691e:	692b      	ldr	r3, [r5, #16]
 8016920:	1d1a      	adds	r2, r3, #4
 8016922:	639b      	str	r3, [r3, #56]	; 0x38
 8016924:	641b      	str	r3, [r3, #64]	; 0x40
 8016926:	63da      	str	r2, [r3, #60]	; 0x3c
 8016928:	f103 0208 	add.w	r2, r3, #8
 801692c:	6142      	str	r2, [r0, #20]
 801692e:	7c5a      	ldrb	r2, [r3, #17]
 8016930:	4b13      	ldr	r3, [pc, #76]	; (8016980 <_InitContext+0x70>)
 8016932:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016936:	68c3      	ldr	r3, [r0, #12]
 8016938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801693a:	4798      	blx	r3
 801693c:	4b11      	ldr	r3, [pc, #68]	; (8016984 <_InitContext+0x74>)
 801693e:	6663      	str	r3, [r4, #100]	; 0x64
 8016940:	686b      	ldr	r3, [r5, #4]
 8016942:	61e3      	str	r3, [r4, #28]
 8016944:	692b      	ldr	r3, [r5, #16]
 8016946:	3308      	adds	r3, #8
 8016948:	6163      	str	r3, [r4, #20]
 801694a:	2301      	movs	r3, #1
 801694c:	7623      	strb	r3, [r4, #24]
 801694e:	76e3      	strb	r3, [r4, #27]
 8016950:	f004 fe74 	bl	801b63c <WM_GetDesktopWindow>
 8016954:	2303      	movs	r3, #3
 8016956:	64a0      	str	r0, [r4, #72]	; 0x48
 8016958:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801695c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8016960:	68e8      	ldr	r0, [r5, #12]
 8016962:	6323      	str	r3, [r4, #48]	; 0x30
 8016964:	6363      	str	r3, [r4, #52]	; 0x34
 8016966:	f001 fbef 	bl	8018148 <LCD_SetBkColor>
 801696a:	68a8      	ldr	r0, [r5, #8]
 801696c:	f001 fbf2 	bl	8018154 <LCD_SetColor>
 8016970:	4a05      	ldr	r2, [pc, #20]	; (8016988 <_InitContext+0x78>)
 8016972:	4b06      	ldr	r3, [pc, #24]	; (801698c <_InitContext+0x7c>)
 8016974:	601a      	str	r2, [r3, #0]
 8016976:	bd38      	pop	{r3, r4, r5, pc}
 8016978:	20000008 	.word	0x20000008
 801697c:	200001f4 	.word	0x200001f4
 8016980:	2002249c 	.word	0x2002249c
 8016984:	0801ef58 	.word	0x0801ef58
 8016988:	0801ef70 	.word	0x0801ef70
 801698c:	20022494 	.word	0x20022494

08016990 <_OnExit>:
 8016990:	b570      	push	{r4, r5, r6, lr}
 8016992:	2400      	movs	r4, #0
 8016994:	4d09      	ldr	r5, [pc, #36]	; (80169bc <_OnExit+0x2c>)
 8016996:	4e0a      	ldr	r6, [pc, #40]	; (80169c0 <_OnExit+0x30>)
 8016998:	2274      	movs	r2, #116	; 0x74
 801699a:	4621      	mov	r1, r4
 801699c:	4628      	mov	r0, r5
 801699e:	6833      	ldr	r3, [r6, #0]
 80169a0:	67ec      	str	r4, [r5, #124]	; 0x7c
 80169a2:	4798      	blx	r3
 80169a4:	6833      	ldr	r3, [r6, #0]
 80169a6:	2208      	movs	r2, #8
 80169a8:	4621      	mov	r1, r4
 80169aa:	4806      	ldr	r0, [pc, #24]	; (80169c4 <_OnExit+0x34>)
 80169ac:	4798      	blx	r3
 80169ae:	4b06      	ldr	r3, [pc, #24]	; (80169c8 <_OnExit+0x38>)
 80169b0:	611d      	str	r5, [r3, #16]
 80169b2:	4b06      	ldr	r3, [pc, #24]	; (80169cc <_OnExit+0x3c>)
 80169b4:	701c      	strb	r4, [r3, #0]
 80169b6:	4b06      	ldr	r3, [pc, #24]	; (80169d0 <_OnExit+0x40>)
 80169b8:	601c      	str	r4, [r3, #0]
 80169ba:	bd70      	pop	{r4, r5, r6, pc}
 80169bc:	20000174 	.word	0x20000174
 80169c0:	2000003c 	.word	0x2000003c
 80169c4:	2002249c 	.word	0x2002249c
 80169c8:	20000008 	.word	0x20000008
 80169cc:	20022484 	.word	0x20022484
 80169d0:	20022460 	.word	0x20022460

080169d4 <GUI_ClearRect>:
 80169d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80169d8:	4616      	mov	r6, r2
 80169da:	461f      	mov	r7, r3
 80169dc:	4604      	mov	r4, r0
 80169de:	460d      	mov	r5, r1
 80169e0:	f000 fc4a 	bl	8017278 <GUI_Lock>
 80169e4:	2004      	movs	r0, #4
 80169e6:	f001 f873 	bl	8017ad0 <LCD_SetDrawMode>
 80169ea:	4b14      	ldr	r3, [pc, #80]	; (8016a3c <GUI_ClearRect+0x68>)
 80169ec:	4680      	mov	r8, r0
 80169ee:	4668      	mov	r0, sp
 80169f0:	691b      	ldr	r3, [r3, #16]
 80169f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80169f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169f6:	4414      	add	r4, r2
 80169f8:	4416      	add	r6, r2
 80169fa:	441d      	add	r5, r3
 80169fc:	441f      	add	r7, r3
 80169fe:	f8ad 4000 	strh.w	r4, [sp]
 8016a02:	f8ad 6004 	strh.w	r6, [sp, #4]
 8016a06:	f8ad 5002 	strh.w	r5, [sp, #2]
 8016a0a:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016a0e:	f004 fb71 	bl	801b0f4 <WM__InitIVRSearch>
 8016a12:	b938      	cbnz	r0, 8016a24 <GUI_ClearRect+0x50>
 8016a14:	4640      	mov	r0, r8
 8016a16:	f001 f85b 	bl	8017ad0 <LCD_SetDrawMode>
 8016a1a:	f000 fc23 	bl	8017264 <GUI_Unlock>
 8016a1e:	b002      	add	sp, #8
 8016a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a24:	463b      	mov	r3, r7
 8016a26:	4632      	mov	r2, r6
 8016a28:	4629      	mov	r1, r5
 8016a2a:	4620      	mov	r0, r4
 8016a2c:	f001 f8ae 	bl	8017b8c <LCD_FillRect>
 8016a30:	f004 fa9e 	bl	801af70 <WM__GetNextIVR>
 8016a34:	2800      	cmp	r0, #0
 8016a36:	d1f5      	bne.n	8016a24 <GUI_ClearRect+0x50>
 8016a38:	e7ec      	b.n	8016a14 <GUI_ClearRect+0x40>
 8016a3a:	bf00      	nop
 8016a3c:	20000008 	.word	0x20000008

08016a40 <GUI_Clear>:
 8016a40:	2100      	movs	r1, #0
 8016a42:	b510      	push	{r4, lr}
 8016a44:	4608      	mov	r0, r1
 8016a46:	f7ff fe61 	bl	801670c <GUI_GotoXY>
 8016a4a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8016a4e:	4903      	ldr	r1, [pc, #12]	; (8016a5c <GUI_Clear+0x1c>)
 8016a50:	461a      	mov	r2, r3
 8016a52:	4608      	mov	r0, r1
 8016a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a58:	f7ff bfbc 	b.w	80169d4 <GUI_ClearRect>
 8016a5c:	ffffc001 	.word	0xffffc001

08016a60 <GUI__Config>:
 8016a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a62:	4d20      	ldr	r5, [pc, #128]	; (8016ae4 <GUI__Config+0x84>)
 8016a64:	b085      	sub	sp, #20
 8016a66:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d138      	bne.n	8016ade <GUI__Config+0x7e>
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	466a      	mov	r2, sp
 8016a70:	466e      	mov	r6, sp
 8016a72:	67eb      	str	r3, [r5, #124]	; 0x7c
 8016a74:	4b1c      	ldr	r3, [pc, #112]	; (8016ae8 <GUI__Config+0x88>)
 8016a76:	f103 0708 	add.w	r7, r3, #8
 8016a7a:	6818      	ldr	r0, [r3, #0]
 8016a7c:	3308      	adds	r3, #8
 8016a7e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016a82:	4614      	mov	r4, r2
 8016a84:	42bb      	cmp	r3, r7
 8016a86:	c403      	stmia	r4!, {r0, r1}
 8016a88:	4622      	mov	r2, r4
 8016a8a:	d1f6      	bne.n	8016a7a <GUI__Config+0x1a>
 8016a8c:	6818      	ldr	r0, [r3, #0]
 8016a8e:	8899      	ldrh	r1, [r3, #4]
 8016a90:	799b      	ldrb	r3, [r3, #6]
 8016a92:	6020      	str	r0, [r4, #0]
 8016a94:	71a3      	strb	r3, [r4, #6]
 8016a96:	4633      	mov	r3, r6
 8016a98:	80a1      	strh	r1, [r4, #4]
 8016a9a:	4c14      	ldr	r4, [pc, #80]	; (8016aec <GUI__Config+0x8c>)
 8016a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016aa0:	f804 2b01 	strb.w	r2, [r4], #1
 8016aa4:	781a      	ldrb	r2, [r3, #0]
 8016aa6:	2a00      	cmp	r2, #0
 8016aa8:	d1f8      	bne.n	8016a9c <GUI__Config+0x3c>
 8016aaa:	f7ff fd6d 	bl	8016588 <GUI_GetVersionString>
 8016aae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016ab2:	4622      	mov	r2, r4
 8016ab4:	f804 3b01 	strb.w	r3, [r4], #1
 8016ab8:	7803      	ldrb	r3, [r0, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d1f7      	bne.n	8016aae <GUI__Config+0x4e>
 8016abe:	7053      	strb	r3, [r2, #1]
 8016ac0:	f7fc fd1e 	bl	8013500 <GUI_X_Config>
 8016ac4:	f000 fc14 	bl	80172f0 <GUITASK_Init>
 8016ac8:	f7fd ffbe 	bl	8014a48 <LCD_X_Config>
 8016acc:	4b08      	ldr	r3, [pc, #32]	; (8016af0 <GUI__Config+0x90>)
 8016ace:	4809      	ldr	r0, [pc, #36]	; (8016af4 <GUI__Config+0x94>)
 8016ad0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8016ad4:	b005      	add	sp, #20
 8016ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ada:	f000 b8d3 	b.w	8016c84 <GUI__RegisterExit>
 8016ade:	b005      	add	sp, #20
 8016ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae2:	bf00      	nop
 8016ae4:	20000174 	.word	0x20000174
 8016ae8:	0801ef60 	.word	0x0801ef60
 8016aec:	200001f4 	.word	0x200001f4
 8016af0:	08016991 	.word	0x08016991
 8016af4:	20000208 	.word	0x20000208

08016af8 <GUI_Init>:
 8016af8:	b590      	push	{r4, r7, lr}
 8016afa:	b083      	sub	sp, #12
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	4a54      	ldr	r2, [pc, #336]	; (8016c50 <GUI_Init+0x158>)
 8016b00:	4b53      	ldr	r3, [pc, #332]	; (8016c50 <GUI_Init+0x158>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f023 0301 	bic.w	r3, r3, #1
 8016b08:	6013      	str	r3, [r2, #0]
 8016b0a:	4b52      	ldr	r3, [pc, #328]	; (8016c54 <GUI_Init+0x15c>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b12:	f240 4249 	movw	r2, #1097	; 0x449
 8016b16:	4293      	cmp	r3, r2
 8016b18:	bf0c      	ite	eq
 8016b1a:	2301      	moveq	r3, #1
 8016b1c:	2300      	movne	r3, #0
 8016b1e:	b2da      	uxtb	r2, r3
 8016b20:	4b4c      	ldr	r3, [pc, #304]	; (8016c54 <GUI_Init+0x15c>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b28:	f240 4151 	movw	r1, #1105	; 0x451
 8016b2c:	428b      	cmp	r3, r1
 8016b2e:	bf0c      	ite	eq
 8016b30:	2301      	moveq	r3, #1
 8016b32:	2300      	movne	r3, #0
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	4313      	orrs	r3, r2
 8016b38:	b2db      	uxtb	r3, r3
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	4b45      	ldr	r3, [pc, #276]	; (8016c54 <GUI_Init+0x15c>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b44:	f240 4252 	movw	r2, #1106	; 0x452
 8016b48:	4293      	cmp	r3, r2
 8016b4a:	bf0c      	ite	eq
 8016b4c:	2301      	moveq	r3, #1
 8016b4e:	2300      	movne	r3, #0
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	430b      	orrs	r3, r1
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d010      	beq.n	8016b7a <GUI_Init+0x82>
 8016b58:	4b3f      	ldr	r3, [pc, #252]	; (8016c58 <GUI_Init+0x160>)
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	601a      	str	r2, [r3, #0]
 8016b5e:	bf00      	nop
 8016b60:	4b3d      	ldr	r3, [pc, #244]	; (8016c58 <GUI_Init+0x160>)
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d1fb      	bne.n	8016b60 <GUI_Init+0x68>
 8016b68:	4b3c      	ldr	r3, [pc, #240]	; (8016c5c <GUI_Init+0x164>)
 8016b6a:	4a3d      	ldr	r2, [pc, #244]	; (8016c60 <GUI_Init+0x168>)
 8016b6c:	601a      	str	r2, [r3, #0]
 8016b6e:	4b3b      	ldr	r3, [pc, #236]	; (8016c5c <GUI_Init+0x164>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	4a3c      	ldr	r2, [pc, #240]	; (8016c64 <GUI_Init+0x16c>)
 8016b74:	4293      	cmp	r3, r2
 8016b76:	d018      	beq.n	8016baa <GUI_Init+0xb2>
 8016b78:	e7fe      	b.n	8016b78 <GUI_Init+0x80>
 8016b7a:	4b3b      	ldr	r3, [pc, #236]	; (8016c68 <GUI_Init+0x170>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b82:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016b86:	d110      	bne.n	8016baa <GUI_Init+0xb2>
 8016b88:	4b38      	ldr	r3, [pc, #224]	; (8016c6c <GUI_Init+0x174>)
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	601a      	str	r2, [r3, #0]
 8016b8e:	bf00      	nop
 8016b90:	4b36      	ldr	r3, [pc, #216]	; (8016c6c <GUI_Init+0x174>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d1fb      	bne.n	8016b90 <GUI_Init+0x98>
 8016b98:	4b35      	ldr	r3, [pc, #212]	; (8016c70 <GUI_Init+0x178>)
 8016b9a:	4a31      	ldr	r2, [pc, #196]	; (8016c60 <GUI_Init+0x168>)
 8016b9c:	601a      	str	r2, [r3, #0]
 8016b9e:	4b34      	ldr	r3, [pc, #208]	; (8016c70 <GUI_Init+0x178>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	4a30      	ldr	r2, [pc, #192]	; (8016c64 <GUI_Init+0x16c>)
 8016ba4:	4293      	cmp	r3, r2
 8016ba6:	d000      	beq.n	8016baa <GUI_Init+0xb2>
 8016ba8:	e7fe      	b.n	8016ba8 <GUI_Init+0xb0>
 8016baa:	f7ff ff59 	bl	8016a60 <GUI__Config>
 8016bae:	4b31      	ldr	r3, [pc, #196]	; (8016c74 <GUI_Init+0x17c>)
 8016bb0:	222e      	movs	r2, #46	; 0x2e
 8016bb2:	701a      	strb	r2, [r3, #0]
 8016bb4:	f7f9 fd03 	bl	80105be <GUI_X_Init>
 8016bb8:	482f      	ldr	r0, [pc, #188]	; (8016c78 <GUI_Init+0x180>)
 8016bba:	f7ff fea9 	bl	8016910 <_InitContext>
 8016bbe:	f001 fa1d 	bl	8017ffc <emWin_LCD_Init>
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	f001 fc16 	bl	80183f4 <LCD_GetXSizeDisplay>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	bf0c      	ite	eq
 8016bce:	2301      	moveq	r3, #1
 8016bd0:	2300      	movne	r3, #0
 8016bd2:	b2dc      	uxtb	r4, r3
 8016bd4:	f001 fc14 	bl	8018400 <LCD_GetYSizeDisplay>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	bf0c      	ite	eq
 8016bde:	2301      	moveq	r3, #1
 8016be0:	2300      	movne	r3, #0
 8016be2:	b2db      	uxtb	r3, r3
 8016be4:	4323      	orrs	r3, r4
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d009      	beq.n	8016c00 <GUI_Init+0x108>
 8016bec:	f001 fbf2 	bl	80183d4 <LCD_GetXSizeMax>
 8016bf0:	4604      	mov	r4, r0
 8016bf2:	f001 fbf2 	bl	80183da <LCD_GetYSizeMax>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	4620      	mov	r0, r4
 8016bfc:	f001 fbf4 	bl	80183e8 <LCD_SetDisplaySize>
 8016c00:	2100      	movs	r1, #0
 8016c02:	2000      	movs	r0, #0
 8016c04:	f7ff fe20 	bl	8016848 <GUI_SetOrg>
 8016c08:	f004 fca0 	bl	801b54c <WM_Init>
 8016c0c:	f000 fb96 	bl	801733c <GUITASK_CopyContext>
 8016c10:	4b1a      	ldr	r3, [pc, #104]	; (8016c7c <GUI_Init+0x184>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d012      	beq.n	8016c3e <GUI_Init+0x146>
 8016c18:	e00d      	b.n	8016c36 <GUI_Init+0x13e>
 8016c1a:	4b18      	ldr	r3, [pc, #96]	; (8016c7c <GUI_Init+0x184>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d003      	beq.n	8016c2c <GUI_Init+0x134>
 8016c24:	4b15      	ldr	r3, [pc, #84]	; (8016c7c <GUI_Init+0x184>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	4798      	blx	r3
 8016c2c:	4b13      	ldr	r3, [pc, #76]	; (8016c7c <GUI_Init+0x184>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	4a12      	ldr	r2, [pc, #72]	; (8016c7c <GUI_Init+0x184>)
 8016c34:	6013      	str	r3, [r2, #0]
 8016c36:	4b11      	ldr	r3, [pc, #68]	; (8016c7c <GUI_Init+0x184>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d1ed      	bne.n	8016c1a <GUI_Init+0x122>
 8016c3e:	4b10      	ldr	r3, [pc, #64]	; (8016c80 <GUI_Init+0x188>)
 8016c40:	2201      	movs	r2, #1
 8016c42:	701a      	strb	r2, [r3, #0]
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	4618      	mov	r0, r3
 8016c48:	370c      	adds	r7, #12
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd90      	pop	{r4, r7, pc}
 8016c4e:	bf00      	nop
 8016c50:	e0002000 	.word	0xe0002000
 8016c54:	e0042000 	.word	0xe0042000
 8016c58:	40023008 	.word	0x40023008
 8016c5c:	40023000 	.word	0x40023000
 8016c60:	f407a5c2 	.word	0xf407a5c2
 8016c64:	b5e8b5cd 	.word	0xb5e8b5cd
 8016c68:	5c001000 	.word	0x5c001000
 8016c6c:	58024c08 	.word	0x58024c08
 8016c70:	58024c00 	.word	0x58024c00
 8016c74:	20022454 	.word	0x20022454
 8016c78:	20000174 	.word	0x20000174
 8016c7c:	200001ec 	.word	0x200001ec
 8016c80:	2002247c 	.word	0x2002247c

08016c84 <GUI__RegisterExit>:
 8016c84:	b480      	push	{r7}
 8016c86:	b083      	sub	sp, #12
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	4b06      	ldr	r3, [pc, #24]	; (8016ca8 <GUI__RegisterExit+0x24>)
 8016c8e:	681a      	ldr	r2, [r3, #0]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	605a      	str	r2, [r3, #4]
 8016c94:	4a04      	ldr	r2, [pc, #16]	; (8016ca8 <GUI__RegisterExit+0x24>)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6013      	str	r3, [r2, #0]
 8016c9a:	bf00      	nop
 8016c9c:	370c      	adds	r7, #12
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca4:	4770      	bx	lr
 8016ca6:	bf00      	nop
 8016ca8:	200001e8 	.word	0x200001e8

08016cac <GUI_DCACHE_Clear>:
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	4b05      	ldr	r3, [pc, #20]	; (8016ccc <GUI_DCACHE_Clear+0x20>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d003      	beq.n	8016cc4 <GUI_DCACHE_Clear+0x18>
 8016cbc:	4b03      	ldr	r3, [pc, #12]	; (8016ccc <GUI_DCACHE_Clear+0x20>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	4798      	blx	r3
 8016cc4:	bf00      	nop
 8016cc6:	3708      	adds	r7, #8
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}
 8016ccc:	20022460 	.word	0x20022460

08016cd0 <GUI_DEVICE__GetpDriver>:
 8016cd0:	2801      	cmp	r0, #1
 8016cd2:	dc09      	bgt.n	8016ce8 <GUI_DEVICE__GetpDriver+0x18>
 8016cd4:	4b05      	ldr	r3, [pc, #20]	; (8016cec <GUI_DEVICE__GetpDriver+0x1c>)
 8016cd6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8016cda:	b120      	cbz	r0, 8016ce6 <GUI_DEVICE__GetpDriver+0x16>
 8016cdc:	68c3      	ldr	r3, [r0, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	b11b      	cbz	r3, 8016cea <GUI_DEVICE__GetpDriver+0x1a>
 8016ce2:	6800      	ldr	r0, [r0, #0]
 8016ce4:	e7f9      	b.n	8016cda <GUI_DEVICE__GetpDriver+0xa>
 8016ce6:	4770      	bx	lr
 8016ce8:	2000      	movs	r0, #0
 8016cea:	4770      	bx	lr
 8016cec:	2002249c 	.word	0x2002249c

08016cf0 <GUI_DEVICE_Delete>:
 8016cf0:	f7ff b9ce 	b.w	8016090 <GUI_ALLOC_FreeFixedBlock>

08016cf4 <GUI_DEVICE_Create>:
 8016cf4:	2b01      	cmp	r3, #1
 8016cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf8:	4606      	mov	r6, r0
 8016cfa:	460d      	mov	r5, r1
 8016cfc:	4617      	mov	r7, r2
 8016cfe:	461c      	mov	r4, r3
 8016d00:	dd01      	ble.n	8016d06 <GUI_DEVICE_Create+0x12>
 8016d02:	2000      	movs	r0, #0
 8016d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d06:	201c      	movs	r0, #28
 8016d08:	f7ff faae 	bl	8016268 <GUI_ALLOC_GetFixedBlock>
 8016d0c:	2800      	cmp	r0, #0
 8016d0e:	d0f8      	beq.n	8016d02 <GUI_DEVICE_Create+0xe>
 8016d10:	b10d      	cbz	r5, 8016d16 <GUI_DEVICE_Create+0x22>
 8016d12:	6105      	str	r5, [r0, #16]
 8016d14:	e009      	b.n	8016d2a <GUI_DEVICE_Create+0x36>
 8016d16:	4b09      	ldr	r3, [pc, #36]	; (8016d3c <GUI_DEVICE_Create+0x48>)
 8016d18:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8016d1c:	b129      	cbz	r1, 8016d2a <GUI_DEVICE_Create+0x36>
 8016d1e:	680b      	ldr	r3, [r1, #0]
 8016d20:	b10b      	cbz	r3, 8016d26 <GUI_DEVICE_Create+0x32>
 8016d22:	4619      	mov	r1, r3
 8016d24:	e7fb      	b.n	8016d1e <GUI_DEVICE_Create+0x2a>
 8016d26:	690b      	ldr	r3, [r1, #16]
 8016d28:	6103      	str	r3, [r0, #16]
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	6184      	str	r4, [r0, #24]
 8016d2e:	8287      	strh	r7, [r0, #20]
 8016d30:	60c6      	str	r6, [r0, #12]
 8016d32:	6003      	str	r3, [r0, #0]
 8016d34:	6043      	str	r3, [r0, #4]
 8016d36:	6083      	str	r3, [r0, #8]
 8016d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	2002249c 	.word	0x2002249c

08016d40 <GUI_DEVICE_Unlink>:
 8016d40:	6981      	ldr	r1, [r0, #24]
 8016d42:	4a0a      	ldr	r2, [pc, #40]	; (8016d6c <GUI_DEVICE_Unlink+0x2c>)
 8016d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d48:	4298      	cmp	r0, r3
 8016d4a:	6803      	ldr	r3, [r0, #0]
 8016d4c:	d104      	bne.n	8016d58 <GUI_DEVICE_Unlink+0x18>
 8016d4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016d52:	b10b      	cbz	r3, 8016d58 <GUI_DEVICE_Unlink+0x18>
 8016d54:	2200      	movs	r2, #0
 8016d56:	605a      	str	r2, [r3, #4]
 8016d58:	6842      	ldr	r2, [r0, #4]
 8016d5a:	b102      	cbz	r2, 8016d5e <GUI_DEVICE_Unlink+0x1e>
 8016d5c:	6013      	str	r3, [r2, #0]
 8016d5e:	6803      	ldr	r3, [r0, #0]
 8016d60:	b103      	cbz	r3, 8016d64 <GUI_DEVICE_Unlink+0x24>
 8016d62:	605a      	str	r2, [r3, #4]
 8016d64:	2300      	movs	r3, #0
 8016d66:	6003      	str	r3, [r0, #0]
 8016d68:	6043      	str	r3, [r0, #4]
 8016d6a:	4770      	bx	lr
 8016d6c:	2002249c 	.word	0x2002249c

08016d70 <GUI_DEVICE_Link>:
 8016d70:	b530      	push	{r4, r5, lr}
 8016d72:	b908      	cbnz	r0, 8016d78 <GUI_DEVICE_Link+0x8>
 8016d74:	2001      	movs	r0, #1
 8016d76:	bd30      	pop	{r4, r5, pc}
 8016d78:	6984      	ldr	r4, [r0, #24]
 8016d7a:	2c01      	cmp	r4, #1
 8016d7c:	dcfa      	bgt.n	8016d74 <GUI_DEVICE_Link+0x4>
 8016d7e:	4b1b      	ldr	r3, [pc, #108]	; (8016dec <GUI_DEVICE_Link+0x7c>)
 8016d80:	781a      	ldrb	r2, [r3, #0]
 8016d82:	4294      	cmp	r4, r2
 8016d84:	bfa4      	itt	ge
 8016d86:	1c62      	addge	r2, r4, #1
 8016d88:	701a      	strbge	r2, [r3, #0]
 8016d8a:	4a19      	ldr	r2, [pc, #100]	; (8016df0 <GUI_DEVICE_Link+0x80>)
 8016d8c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8016d90:	4615      	mov	r5, r2
 8016d92:	b91b      	cbnz	r3, 8016d9c <GUI_DEVICE_Link+0x2c>
 8016d94:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016d98:	4618      	mov	r0, r3
 8016d9a:	bd30      	pop	{r4, r5, pc}
 8016d9c:	685a      	ldr	r2, [r3, #4]
 8016d9e:	b10a      	cbz	r2, 8016da4 <GUI_DEVICE_Link+0x34>
 8016da0:	4613      	mov	r3, r2
 8016da2:	e7fb      	b.n	8016d9c <GUI_DEVICE_Link+0x2c>
 8016da4:	68c2      	ldr	r2, [r0, #12]
 8016da6:	6812      	ldr	r2, [r2, #0]
 8016da8:	68d9      	ldr	r1, [r3, #12]
 8016daa:	6809      	ldr	r1, [r1, #0]
 8016dac:	4291      	cmp	r1, r2
 8016dae:	dd03      	ble.n	8016db8 <GUI_DEVICE_Link+0x48>
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d1f8      	bne.n	8016da8 <GUI_DEVICE_Link+0x38>
 8016db6:	e7dd      	b.n	8016d74 <GUI_DEVICE_Link+0x4>
 8016db8:	d109      	bne.n	8016dce <GUI_DEVICE_Link+0x5e>
 8016dba:	8a81      	ldrh	r1, [r0, #20]
 8016dbc:	2901      	cmp	r1, #1
 8016dbe:	d106      	bne.n	8016dce <GUI_DEVICE_Link+0x5e>
 8016dc0:	6819      	ldr	r1, [r3, #0]
 8016dc2:	b121      	cbz	r1, 8016dce <GUI_DEVICE_Link+0x5e>
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	68c9      	ldr	r1, [r1, #12]
 8016dc8:	6809      	ldr	r1, [r1, #0]
 8016dca:	428a      	cmp	r2, r1
 8016dcc:	ddf8      	ble.n	8016dc0 <GUI_DEVICE_Link+0x50>
 8016dce:	685a      	ldr	r2, [r3, #4]
 8016dd0:	b112      	cbz	r2, 8016dd8 <GUI_DEVICE_Link+0x68>
 8016dd2:	6010      	str	r0, [r2, #0]
 8016dd4:	6042      	str	r2, [r0, #4]
 8016dd6:	e001      	b.n	8016ddc <GUI_DEVICE_Link+0x6c>
 8016dd8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8016ddc:	6058      	str	r0, [r3, #4]
 8016dde:	4298      	cmp	r0, r3
 8016de0:	bf08      	it	eq
 8016de2:	2300      	moveq	r3, #0
 8016de4:	6003      	str	r3, [r0, #0]
 8016de6:	2000      	movs	r0, #0
 8016de8:	bd30      	pop	{r4, r5, pc}
 8016dea:	bf00      	nop
 8016dec:	2002244e 	.word	0x2002244e
 8016df0:	2002249c 	.word	0x2002249c

08016df4 <GUI_DEVICE_CreateAndLink>:
 8016df4:	b538      	push	{r3, r4, r5, lr}
 8016df6:	461d      	mov	r5, r3
 8016df8:	f7ff ff7c 	bl	8016cf4 <GUI_DEVICE_Create>
 8016dfc:	4604      	mov	r4, r0
 8016dfe:	b148      	cbz	r0, 8016e14 <GUI_DEVICE_CreateAndLink+0x20>
 8016e00:	f7ff ffb6 	bl	8016d70 <GUI_DEVICE_Link>
 8016e04:	68e3      	ldr	r3, [r4, #12]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	b923      	cbnz	r3, 8016e14 <GUI_DEVICE_CreateAndLink+0x20>
 8016e0a:	4b03      	ldr	r3, [pc, #12]	; (8016e18 <GUI_DEVICE_CreateAndLink+0x24>)
 8016e0c:	3516      	adds	r5, #22
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8016e14:	4620      	mov	r0, r4
 8016e16:	bd38      	pop	{r3, r4, r5, pc}
 8016e18:	20000018 	.word	0x20000018

08016e1c <GUI_DEVICE_UnlinkTaskDevices>:
 8016e1c:	2000      	movs	r0, #0
 8016e1e:	4770      	bx	lr

08016e20 <GUI_DEVICE_LinkDevices>:
 8016e20:	b510      	push	{r4, lr}
 8016e22:	b120      	cbz	r0, 8016e2e <GUI_DEVICE_LinkDevices+0xe>
 8016e24:	6804      	ldr	r4, [r0, #0]
 8016e26:	f7ff ffa3 	bl	8016d70 <GUI_DEVICE_Link>
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	e7f9      	b.n	8016e22 <GUI_DEVICE_LinkDevices+0x2>
 8016e2e:	bd10      	pop	{r4, pc}

08016e30 <GUI_DispString>:
 8016e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e34:	4605      	mov	r5, r0
 8016e36:	b085      	sub	sp, #20
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	f000 8084 	beq.w	8016f46 <GUI_DispString+0x116>
 8016e3e:	4c43      	ldr	r4, [pc, #268]	; (8016f4c <GUI_DispString+0x11c>)
 8016e40:	f000 fa1a 	bl	8017278 <GUI_Lock>
 8016e44:	f005 fad4 	bl	801c3f0 <GUI_GetFontDistY>
 8016e48:	4607      	mov	r7, r0
 8016e4a:	6823      	ldr	r3, [r4, #0]
 8016e4c:	46a1      	mov	r9, r4
 8016e4e:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 8016e52:	f005 faaf 	bl	801c3b4 <GUI_GetYAdjust>
 8016e56:	6822      	ldr	r2, [r4, #0]
 8016e58:	b286      	uxth	r6, r0
 8016e5a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8016e5c:	1b9b      	subs	r3, r3, r6
 8016e5e:	8493      	strh	r3, [r2, #36]	; 0x24
 8016e60:	782b      	ldrb	r3, [r5, #0]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d061      	beq.n	8016f2a <GUI_DispString+0xfa>
 8016e66:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8016e6a:	4628      	mov	r0, r5
 8016e6c:	f005 fb44 	bl	801c4f8 <GUI__GetLineNumChars>
 8016e70:	4601      	mov	r1, r0
 8016e72:	4682      	mov	sl, r0
 8016e74:	4628      	mov	r0, r5
 8016e76:	f005 fb69 	bl	801c54c <GUI__GetLineDistX>
 8016e7a:	6822      	ldr	r2, [r4, #0]
 8016e7c:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8016e7e:	f003 0303 	and.w	r3, r3, #3
 8016e82:	2b01      	cmp	r3, #1
 8016e84:	d004      	beq.n	8016e90 <GUI_DispString+0x60>
 8016e86:	2b02      	cmp	r3, #2
 8016e88:	d104      	bne.n	8016e94 <GUI_DispString+0x64>
 8016e8a:	fb90 f3f3 	sdiv	r3, r0, r3
 8016e8e:	e002      	b.n	8016e96 <GUI_DispString+0x66>
 8016e90:	4603      	mov	r3, r0
 8016e92:	e000      	b.n	8016e96 <GUI_DispString+0x66>
 8016e94:	2300      	movs	r3, #0
 8016e96:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8016e98:	fa1f fb80 	uxth.w	fp, r0
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	1acb      	subs	r3, r1, r3
 8016ea0:	b29b      	uxth	r3, r3
 8016ea2:	b219      	sxth	r1, r3
 8016ea4:	8451      	strh	r1, [r2, #34]	; 0x22
 8016ea6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016eaa:	f10b 31ff 	add.w	r1, fp, #4294967295
 8016eae:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8016eb2:	440b      	add	r3, r1
 8016eb4:	4651      	mov	r1, sl
 8016eb6:	f8ad 200a 	strh.w	r2, [sp, #10]
 8016eba:	3a01      	subs	r2, #1
 8016ebc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016ec0:	b2bb      	uxth	r3, r7
 8016ec2:	441a      	add	r2, r3
 8016ec4:	9301      	str	r3, [sp, #4]
 8016ec6:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016eca:	aa02      	add	r2, sp, #8
 8016ecc:	f005 fb6e 	bl	801c5ac <GUI__DispLine>
 8016ed0:	6822      	ldr	r2, [r4, #0]
 8016ed2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016ed6:	4628      	mov	r0, r5
 8016ed8:	8491      	strh	r1, [r2, #36]	; 0x24
 8016eda:	4651      	mov	r1, sl
 8016edc:	f000 fab0 	bl	8017440 <GUI_UC__NumChars2NumBytes>
 8016ee0:	5c2a      	ldrb	r2, [r5, r0]
 8016ee2:	eb05 0e00 	add.w	lr, r5, r0
 8016ee6:	9b01      	ldr	r3, [sp, #4]
 8016ee8:	2a0a      	cmp	r2, #10
 8016eea:	d001      	beq.n	8016ef0 <GUI_DispString+0xc0>
 8016eec:	2a0d      	cmp	r2, #13
 8016eee:	d112      	bne.n	8016f16 <GUI_DispString+0xe6>
 8016ef0:	6822      	ldr	r2, [r4, #0]
 8016ef2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8016ef4:	f001 0103 	and.w	r1, r1, #3
 8016ef8:	3901      	subs	r1, #1
 8016efa:	2901      	cmp	r1, #1
 8016efc:	bf8a      	itet	hi
 8016efe:	8c11      	ldrhhi	r1, [r2, #32]
 8016f00:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 8016f04:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8016f06:	f89e 1000 	ldrb.w	r1, [lr]
 8016f0a:	290a      	cmp	r1, #10
 8016f0c:	d10a      	bne.n	8016f24 <GUI_DispString+0xf4>
 8016f0e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8016f10:	440b      	add	r3, r1
 8016f12:	8493      	strh	r3, [r2, #36]	; 0x24
 8016f14:	e006      	b.n	8016f24 <GUI_DispString+0xf4>
 8016f16:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8016f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8016f1e:	4483      	add	fp, r0
 8016f20:	f8a3 b022 	strh.w	fp, [r3, #34]	; 0x22
 8016f24:	f89e 3000 	ldrb.w	r3, [lr]
 8016f28:	b953      	cbnz	r3, 8016f40 <GUI_DispString+0x110>
 8016f2a:	6823      	ldr	r3, [r4, #0]
 8016f2c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8016f2e:	4416      	add	r6, r2
 8016f30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016f32:	f022 0203 	bic.w	r2, r2, #3
 8016f36:	849e      	strh	r6, [r3, #36]	; 0x24
 8016f38:	859a      	strh	r2, [r3, #44]	; 0x2c
 8016f3a:	f000 f993 	bl	8017264 <GUI_Unlock>
 8016f3e:	e002      	b.n	8016f46 <GUI_DispString+0x116>
 8016f40:	f10e 0501 	add.w	r5, lr, #1
 8016f44:	e78c      	b.n	8016e60 <GUI_DispString+0x30>
 8016f46:	b005      	add	sp, #20
 8016f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f4c:	20000018 	.word	0x20000018

08016f50 <GUI_DispStringAt>:
 8016f50:	b570      	push	{r4, r5, r6, lr}
 8016f52:	460e      	mov	r6, r1
 8016f54:	4615      	mov	r5, r2
 8016f56:	4604      	mov	r4, r0
 8016f58:	f000 f98e 	bl	8017278 <GUI_Lock>
 8016f5c:	4b05      	ldr	r3, [pc, #20]	; (8016f74 <GUI_DispStringAt+0x24>)
 8016f5e:	4620      	mov	r0, r4
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	845e      	strh	r6, [r3, #34]	; 0x22
 8016f64:	849d      	strh	r5, [r3, #36]	; 0x24
 8016f66:	f7ff ff63 	bl	8016e30 <GUI_DispString>
 8016f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f6e:	f000 b979 	b.w	8017264 <GUI_Unlock>
 8016f72:	bf00      	nop
 8016f74:	20000018 	.word	0x20000018

08016f78 <_OnExit>:
 8016f78:	b538      	push	{r3, r4, r5, lr}
 8016f7a:	4c0e      	ldr	r4, [pc, #56]	; (8016fb4 <_OnExit+0x3c>)
 8016f7c:	2208      	movs	r2, #8
 8016f7e:	4d0e      	ldr	r5, [pc, #56]	; (8016fb8 <_OnExit+0x40>)
 8016f80:	2100      	movs	r1, #0
 8016f82:	4620      	mov	r0, r4
 8016f84:	682b      	ldr	r3, [r5, #0]
 8016f86:	4798      	blx	r3
 8016f88:	2208      	movs	r2, #8
 8016f8a:	682b      	ldr	r3, [r5, #0]
 8016f8c:	2100      	movs	r1, #0
 8016f8e:	18a0      	adds	r0, r4, r2
 8016f90:	4798      	blx	r3
 8016f92:	682b      	ldr	r3, [r5, #0]
 8016f94:	2208      	movs	r2, #8
 8016f96:	2100      	movs	r1, #0
 8016f98:	f104 0010 	add.w	r0, r4, #16
 8016f9c:	4798      	blx	r3
 8016f9e:	682b      	ldr	r3, [r5, #0]
 8016fa0:	2208      	movs	r2, #8
 8016fa2:	2100      	movs	r1, #0
 8016fa4:	f104 0018 	add.w	r0, r4, #24
 8016fa8:	4798      	blx	r3
 8016faa:	2200      	movs	r2, #0
 8016fac:	4b03      	ldr	r3, [pc, #12]	; (8016fbc <_OnExit+0x44>)
 8016fae:	601a      	str	r2, [r3, #0]
 8016fb0:	bd38      	pop	{r3, r4, r5, pc}
 8016fb2:	bf00      	nop
 8016fb4:	20000210 	.word	0x20000210
 8016fb8:	2000003c 	.word	0x2000003c
 8016fbc:	20022450 	.word	0x20022450

08016fc0 <GUI_MULTIBUF_BeginEx>:
 8016fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016fc2:	4917      	ldr	r1, [pc, #92]	; (8017020 <GUI_MULTIBUF_BeginEx+0x60>)
 8016fc4:	6a0b      	ldr	r3, [r1, #32]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	4b16      	ldr	r3, [pc, #88]	; (8017024 <GUI_MULTIBUF_BeginEx+0x64>)
 8016fca:	bf0c      	ite	eq
 8016fcc:	4606      	moveq	r6, r0
 8016fce:	2600      	movne	r6, #0
 8016fd0:	579d      	ldrsb	r5, [r3, r6]
 8016fd2:	2d01      	cmp	r5, #1
 8016fd4:	dd21      	ble.n	801701a <GUI_MULTIBUF_BeginEx+0x5a>
 8016fd6:	eb01 0386 	add.w	r3, r1, r6, lsl #2
 8016fda:	691a      	ldr	r2, [r3, #16]
 8016fdc:	1c54      	adds	r4, r2, #1
 8016fde:	611c      	str	r4, [r3, #16]
 8016fe0:	b9da      	cbnz	r2, 801701a <GUI_MULTIBUF_BeginEx+0x5a>
 8016fe2:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8016fe6:	4611      	mov	r1, r2
 8016fe8:	689c      	ldr	r4, [r3, #8]
 8016fea:	689a      	ldr	r2, [r3, #8]
 8016fec:	3201      	adds	r2, #1
 8016fee:	42aa      	cmp	r2, r5
 8016ff0:	bf08      	it	eq
 8016ff2:	460a      	moveq	r2, r1
 8016ff4:	42ba      	cmp	r2, r7
 8016ff6:	609a      	str	r2, [r3, #8]
 8016ff8:	4616      	mov	r6, r2
 8016ffa:	d0f6      	beq.n	8016fea <GUI_MULTIBUF_BeginEx+0x2a>
 8016ffc:	f7ff fe68 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8017000:	9001      	str	r0, [sp, #4]
 8017002:	b150      	cbz	r0, 801701a <GUI_MULTIBUF_BeginEx+0x5a>
 8017004:	68c3      	ldr	r3, [r0, #12]
 8017006:	2121      	movs	r1, #33	; 0x21
 8017008:	a801      	add	r0, sp, #4
 801700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801700c:	4798      	blx	r3
 801700e:	4603      	mov	r3, r0
 8017010:	b118      	cbz	r0, 801701a <GUI_MULTIBUF_BeginEx+0x5a>
 8017012:	4632      	mov	r2, r6
 8017014:	4621      	mov	r1, r4
 8017016:	9801      	ldr	r0, [sp, #4]
 8017018:	4798      	blx	r3
 801701a:	b003      	add	sp, #12
 801701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801701e:	bf00      	nop
 8017020:	20000210 	.word	0x20000210
 8017024:	2002244c 	.word	0x2002244c

08017028 <GUI_MULTIBUF_EndEx>:
 8017028:	4b14      	ldr	r3, [pc, #80]	; (801707c <GUI_MULTIBUF_EndEx+0x54>)
 801702a:	6a1a      	ldr	r2, [r3, #32]
 801702c:	2a00      	cmp	r2, #0
 801702e:	4a14      	ldr	r2, [pc, #80]	; (8017080 <GUI_MULTIBUF_EndEx+0x58>)
 8017030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017032:	bf0c      	ite	eq
 8017034:	4604      	moveq	r4, r0
 8017036:	2400      	movne	r4, #0
 8017038:	4605      	mov	r5, r0
 801703a:	5712      	ldrsb	r2, [r2, r4]
 801703c:	2a01      	cmp	r2, #1
 801703e:	dd1a      	ble.n	8017076 <GUI_MULTIBUF_EndEx+0x4e>
 8017040:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017044:	6923      	ldr	r3, [r4, #16]
 8017046:	3b01      	subs	r3, #1
 8017048:	6123      	str	r3, [r4, #16]
 801704a:	b9a3      	cbnz	r3, 8017076 <GUI_MULTIBUF_EndEx+0x4e>
 801704c:	2001      	movs	r0, #1
 801704e:	40a8      	lsls	r0, r5
 8017050:	f7ff fe2c 	bl	8016cac <GUI_DCACHE_Clear>
 8017054:	68a6      	ldr	r6, [r4, #8]
 8017056:	4628      	mov	r0, r5
 8017058:	61a6      	str	r6, [r4, #24]
 801705a:	f7ff fe39 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801705e:	9001      	str	r0, [sp, #4]
 8017060:	b148      	cbz	r0, 8017076 <GUI_MULTIBUF_EndEx+0x4e>
 8017062:	68c3      	ldr	r3, [r0, #12]
 8017064:	2122      	movs	r1, #34	; 0x22
 8017066:	a801      	add	r0, sp, #4
 8017068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801706a:	4798      	blx	r3
 801706c:	4603      	mov	r3, r0
 801706e:	b110      	cbz	r0, 8017076 <GUI_MULTIBUF_EndEx+0x4e>
 8017070:	4631      	mov	r1, r6
 8017072:	9801      	ldr	r0, [sp, #4]
 8017074:	4798      	blx	r3
 8017076:	b002      	add	sp, #8
 8017078:	bd70      	pop	{r4, r5, r6, pc}
 801707a:	bf00      	nop
 801707c:	20000210 	.word	0x20000210
 8017080:	2002244c 	.word	0x2002244c

08017084 <GUI_MULTIBUF_ConfirmEx>:
 8017084:	4b08      	ldr	r3, [pc, #32]	; (80170a8 <GUI_MULTIBUF_ConfirmEx+0x24>)
 8017086:	6a1a      	ldr	r2, [r3, #32]
 8017088:	2a00      	cmp	r2, #0
 801708a:	bf18      	it	ne
 801708c:	2000      	movne	r0, #0
 801708e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8017092:	b510      	push	{r4, lr}
 8017094:	6994      	ldr	r4, [r2, #24]
 8017096:	2c00      	cmp	r4, #0
 8017098:	bfa2      	ittt	ge
 801709a:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 801709e:	f04f 33ff 	movge.w	r3, #4294967295
 80170a2:	6193      	strge	r3, [r2, #24]
 80170a4:	bd10      	pop	{r4, pc}
 80170a6:	bf00      	nop
 80170a8:	20000210 	.word	0x20000210

080170ac <GUI_MULTIBUF_ConfigEx>:
 80170ac:	b570      	push	{r4, r5, r6, lr}
 80170ae:	4c0a      	ldr	r4, [pc, #40]	; (80170d8 <GUI_MULTIBUF_ConfigEx+0x2c>)
 80170b0:	4605      	mov	r5, r0
 80170b2:	460e      	mov	r6, r1
 80170b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170b6:	b92b      	cbnz	r3, 80170c4 <GUI_MULTIBUF_ConfigEx+0x18>
 80170b8:	4620      	mov	r0, r4
 80170ba:	4b08      	ldr	r3, [pc, #32]	; (80170dc <GUI_MULTIBUF_ConfigEx+0x30>)
 80170bc:	f840 3f24 	str.w	r3, [r0, #36]!
 80170c0:	f7ff fde0 	bl	8016c84 <GUI__RegisterExit>
 80170c4:	6a23      	ldr	r3, [r4, #32]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	4b05      	ldr	r3, [pc, #20]	; (80170e0 <GUI_MULTIBUF_ConfigEx+0x34>)
 80170ca:	bf18      	it	ne
 80170cc:	2500      	movne	r5, #0
 80170ce:	2e01      	cmp	r6, #1
 80170d0:	bfb8      	it	lt
 80170d2:	2601      	movlt	r6, #1
 80170d4:	555e      	strb	r6, [r3, r5]
 80170d6:	bd70      	pop	{r4, r5, r6, pc}
 80170d8:	20000210 	.word	0x20000210
 80170dc:	08016f79 	.word	0x08016f79
 80170e0:	2002244c 	.word	0x2002244c

080170e4 <GUI_StoreKey>:
 80170e4:	4b02      	ldr	r3, [pc, #8]	; (80170f0 <GUI_StoreKey+0xc>)
 80170e6:	681a      	ldr	r2, [r3, #0]
 80170e8:	b902      	cbnz	r2, 80170ec <GUI_StoreKey+0x8>
 80170ea:	6018      	str	r0, [r3, #0]
 80170ec:	f000 b9c4 	b.w	8017478 <GUI_SignalEvent>
 80170f0:	2000023c 	.word	0x2000023c

080170f4 <GUI_PollKeyMsg>:
 80170f4:	b510      	push	{r4, lr}
 80170f6:	f000 f8bf 	bl	8017278 <GUI_Lock>
 80170fa:	4a0b      	ldr	r2, [pc, #44]	; (8017128 <GUI_PollKeyMsg+0x34>)
 80170fc:	6813      	ldr	r3, [r2, #0]
 80170fe:	6851      	ldr	r1, [r2, #4]
 8017100:	428b      	cmp	r3, r1
 8017102:	d00c      	beq.n	801711e <GUI_PollKeyMsg+0x2a>
 8017104:	4c09      	ldr	r4, [pc, #36]	; (801712c <GUI_PollKeyMsg+0x38>)
 8017106:	42a3      	cmp	r3, r4
 8017108:	f04f 0401 	mov.w	r4, #1
 801710c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017110:	bf14      	ite	ne
 8017112:	3308      	addne	r3, #8
 8017114:	3b50      	subeq	r3, #80	; 0x50
 8017116:	6013      	str	r3, [r2, #0]
 8017118:	f004 fb22 	bl	801b760 <WM_OnKey>
 801711c:	e000      	b.n	8017120 <GUI_PollKeyMsg+0x2c>
 801711e:	2400      	movs	r4, #0
 8017120:	f000 f8a0 	bl	8017264 <GUI_Unlock>
 8017124:	4620      	mov	r0, r4
 8017126:	bd10      	pop	{r4, pc}
 8017128:	2000001c 	.word	0x2000001c
 801712c:	20000290 	.word	0x20000290

08017130 <GUI_GetCursorLayer>:
 8017130:	2801      	cmp	r0, #1
 8017132:	bf9a      	itte	ls
 8017134:	4b02      	ldrls	r3, [pc, #8]	; (8017140 <GUI_GetCursorLayer+0x10>)
 8017136:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801713a:	2000      	movhi	r0, #0
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	2000029c 	.word	0x2000029c

08017144 <GUI_GetLayerPosEx>:
 8017144:	b570      	push	{r4, r5, r6, lr}
 8017146:	4604      	mov	r4, r0
 8017148:	460e      	mov	r6, r1
 801714a:	4615      	mov	r5, r2
 801714c:	f000 f894 	bl	8017278 <GUI_Lock>
 8017150:	4620      	mov	r0, r4
 8017152:	4631      	mov	r1, r6
 8017154:	462a      	mov	r2, r5
 8017156:	f001 fadf 	bl	8018718 <LCD_GetPosEx>
 801715a:	4604      	mov	r4, r0
 801715c:	b110      	cbz	r0, 8017164 <GUI_GetLayerPosEx+0x20>
 801715e:	2300      	movs	r3, #0
 8017160:	6033      	str	r3, [r6, #0]
 8017162:	602b      	str	r3, [r5, #0]
 8017164:	f000 f87e 	bl	8017264 <GUI_Unlock>
 8017168:	4620      	mov	r0, r4
 801716a:	bd70      	pop	{r4, r5, r6, pc}

0801716c <GUI_SelectLayer>:
 801716c:	b570      	push	{r4, r5, r6, lr}
 801716e:	4d0b      	ldr	r5, [pc, #44]	; (801719c <GUI_SelectLayer+0x30>)
 8017170:	4604      	mov	r4, r0
 8017172:	682b      	ldr	r3, [r5, #0]
 8017174:	7c5e      	ldrb	r6, [r3, #17]
 8017176:	f000 f87f 	bl	8017278 <GUI_Lock>
 801717a:	2c01      	cmp	r4, #1
 801717c:	d809      	bhi.n	8017192 <GUI_SelectLayer+0x26>
 801717e:	4620      	mov	r0, r4
 8017180:	f7ff fda6 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8017184:	b128      	cbz	r0, 8017192 <GUI_SelectLayer+0x26>
 8017186:	682b      	ldr	r3, [r5, #0]
 8017188:	745c      	strb	r4, [r3, #17]
 801718a:	f7ff fb0f 	bl	80167ac <GUI_SelectLCD>
 801718e:	4b04      	ldr	r3, [pc, #16]	; (80171a0 <GUI_SelectLayer+0x34>)
 8017190:	601c      	str	r4, [r3, #0]
 8017192:	f000 f867 	bl	8017264 <GUI_Unlock>
 8017196:	4630      	mov	r0, r6
 8017198:	bd70      	pop	{r4, r5, r6, pc}
 801719a:	bf00      	nop
 801719c:	20000018 	.word	0x20000018
 80171a0:	200224e0 	.word	0x200224e0

080171a4 <GUI_SetLayerPosEx>:
 80171a4:	b570      	push	{r4, r5, r6, lr}
 80171a6:	4604      	mov	r4, r0
 80171a8:	460d      	mov	r5, r1
 80171aa:	4616      	mov	r6, r2
 80171ac:	f000 f864 	bl	8017278 <GUI_Lock>
 80171b0:	4629      	mov	r1, r5
 80171b2:	4620      	mov	r0, r4
 80171b4:	4632      	mov	r2, r6
 80171b6:	f001 faf8 	bl	80187aa <LCD_SetPosEx>
 80171ba:	4604      	mov	r4, r0
 80171bc:	f000 f852 	bl	8017264 <GUI_Unlock>
 80171c0:	4620      	mov	r0, r4
 80171c2:	bd70      	pop	{r4, r5, r6, pc}

080171c4 <GUI_TOUCH_StoreStateEx>:
 80171c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80171c6:	4c12      	ldr	r4, [pc, #72]	; (8017210 <GUI_TOUCH_StoreStateEx+0x4c>)
 80171c8:	220c      	movs	r2, #12
 80171ca:	4606      	mov	r6, r0
 80171cc:	4621      	mov	r1, r4
 80171ce:	f007 fcc7 	bl	801eb60 <memcmp>
 80171d2:	b1d0      	cbz	r0, 801720a <GUI_TOUCH_StoreStateEx+0x46>
 80171d4:	68e3      	ldr	r3, [r4, #12]
 80171d6:	b18b      	cbz	r3, 80171fc <GUI_TOUCH_StoreStateEx+0x38>
 80171d8:	ad01      	add	r5, sp, #4
 80171da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80171de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80171e2:	a902      	add	r1, sp, #8
 80171e4:	4628      	mov	r0, r5
 80171e6:	4798      	blx	r3
 80171e8:	4603      	mov	r3, r0
 80171ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80171ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80171f2:	b953      	cbnz	r3, 801720a <GUI_TOUCH_StoreStateEx+0x46>
 80171f4:	4628      	mov	r0, r5
 80171f6:	f005 fc09 	bl	801ca0c <GUI_PID_StoreState>
 80171fa:	e006      	b.n	801720a <GUI_TOUCH_StoreStateEx+0x46>
 80171fc:	4630      	mov	r0, r6
 80171fe:	f005 fc05 	bl	801ca0c <GUI_PID_StoreState>
 8017202:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801720a:	b004      	add	sp, #16
 801720c:	bd70      	pop	{r4, r5, r6, pc}
 801720e:	bf00      	nop
 8017210:	200002a4 	.word	0x200002a4

08017214 <_GetTaskNo>:
 8017214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017216:	2400      	movs	r4, #0
 8017218:	4d0b      	ldr	r5, [pc, #44]	; (8017248 <_GetTaskNo+0x34>)
 801721a:	4e0c      	ldr	r6, [pc, #48]	; (801724c <_GetTaskNo+0x38>)
 801721c:	277c      	movs	r7, #124	; 0x7c
 801721e:	682b      	ldr	r3, [r5, #0]
 8017220:	429c      	cmp	r4, r3
 8017222:	da0d      	bge.n	8017240 <_GetTaskNo+0x2c>
 8017224:	f7f9 fa10 	bl	8010648 <GUI_X_GetTaskId>
 8017228:	fb07 f304 	mul.w	r3, r7, r4
 801722c:	6832      	ldr	r2, [r6, #0]
 801722e:	18d1      	adds	r1, r2, r3
 8017230:	58d3      	ldr	r3, [r2, r3]
 8017232:	4298      	cmp	r0, r3
 8017234:	d006      	beq.n	8017244 <_GetTaskNo+0x30>
 8017236:	b90b      	cbnz	r3, 801723c <_GetTaskNo+0x28>
 8017238:	6008      	str	r0, [r1, #0]
 801723a:	e003      	b.n	8017244 <_GetTaskNo+0x30>
 801723c:	3401      	adds	r4, #1
 801723e:	e7ee      	b.n	801721e <_GetTaskNo+0xa>
 8017240:	2000      	movs	r0, #0
 8017242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017244:	4620      	mov	r0, r4
 8017246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017248:	20000024 	.word	0x20000024
 801724c:	200002b4 	.word	0x200002b4

08017250 <_OnExit>:
 8017250:	b510      	push	{r4, lr}
 8017252:	4c03      	ldr	r4, [pc, #12]	; (8017260 <_OnExit+0x10>)
 8017254:	6820      	ldr	r0, [r4, #0]
 8017256:	f7fe ff1b 	bl	8016090 <GUI_ALLOC_FreeFixedBlock>
 801725a:	2300      	movs	r3, #0
 801725c:	6023      	str	r3, [r4, #0]
 801725e:	bd10      	pop	{r4, pc}
 8017260:	200002b4 	.word	0x200002b4

08017264 <GUI_Unlock>:
 8017264:	4a03      	ldr	r2, [pc, #12]	; (8017274 <GUI_Unlock+0x10>)
 8017266:	6853      	ldr	r3, [r2, #4]
 8017268:	3b01      	subs	r3, #1
 801726a:	6053      	str	r3, [r2, #4]
 801726c:	b90b      	cbnz	r3, 8017272 <GUI_Unlock+0xe>
 801726e:	f7f9 b9d1 	b.w	8010614 <GUI_X_Unlock>
 8017272:	4770      	bx	lr
 8017274:	200002b4 	.word	0x200002b4

08017278 <GUI_Lock>:
 8017278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	4c19      	ldr	r4, [pc, #100]	; (80172e4 <GUI_Lock+0x6c>)
 801727e:	6863      	ldr	r3, [r4, #4]
 8017280:	b123      	cbz	r3, 801728c <GUI_Lock+0x14>
 8017282:	f7f9 f9e1 	bl	8010648 <GUI_X_GetTaskId>
 8017286:	68a3      	ldr	r3, [r4, #8]
 8017288:	4298      	cmp	r0, r3
 801728a:	d004      	beq.n	8017296 <GUI_Lock+0x1e>
 801728c:	f7f9 f9ce 	bl	801062c <GUI_X_Lock>
 8017290:	f7f9 f9da 	bl	8010648 <GUI_X_GetTaskId>
 8017294:	60a0      	str	r0, [r4, #8]
 8017296:	6863      	ldr	r3, [r4, #4]
 8017298:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80172e4 <GUI_Lock+0x6c>
 801729c:	3301      	adds	r3, #1
 801729e:	2b01      	cmp	r3, #1
 80172a0:	6063      	str	r3, [r4, #4]
 80172a2:	d11c      	bne.n	80172de <GUI_Lock+0x66>
 80172a4:	f7ff ffb6 	bl	8017214 <_GetTaskNo>
 80172a8:	4a0f      	ldr	r2, [pc, #60]	; (80172e8 <GUI_Lock+0x70>)
 80172aa:	4607      	mov	r7, r0
 80172ac:	6853      	ldr	r3, [r2, #4]
 80172ae:	4616      	mov	r6, r2
 80172b0:	4298      	cmp	r0, r3
 80172b2:	d014      	beq.n	80172de <GUI_Lock+0x66>
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	db11      	blt.n	80172dc <GUI_Lock+0x64>
 80172b8:	247c      	movs	r4, #124	; 0x7c
 80172ba:	f8d8 5000 	ldr.w	r5, [r8]
 80172be:	fb04 5503 	mla	r5, r4, r3, r5
 80172c2:	f7ff fdab 	bl	8016e1c <GUI_DEVICE_UnlinkTaskDevices>
 80172c6:	f8d8 3000 	ldr.w	r3, [r8]
 80172ca:	67a8      	str	r0, [r5, #120]	; 0x78
 80172cc:	fb04 3407 	mla	r4, r4, r7, r3
 80172d0:	4b06      	ldr	r3, [pc, #24]	; (80172ec <GUI_Lock+0x74>)
 80172d2:	1d22      	adds	r2, r4, #4
 80172d4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80172d6:	601a      	str	r2, [r3, #0]
 80172d8:	f7ff fda2 	bl	8016e20 <GUI_DEVICE_LinkDevices>
 80172dc:	6077      	str	r7, [r6, #4]
 80172de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172e2:	bf00      	nop
 80172e4:	200002b4 	.word	0x200002b4
 80172e8:	20000024 	.word	0x20000024
 80172ec:	20000018 	.word	0x20000018

080172f0 <GUITASK_Init>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	4e0e      	ldr	r6, [pc, #56]	; (801732c <GUITASK_Init+0x3c>)
 80172f4:	4b0e      	ldr	r3, [pc, #56]	; (8017330 <GUITASK_Init+0x40>)
 80172f6:	4630      	mov	r0, r6
 80172f8:	4d0e      	ldr	r5, [pc, #56]	; (8017334 <GUITASK_Init+0x44>)
 80172fa:	f840 3f0c 	str.w	r3, [r0, #12]!
 80172fe:	f7ff fcc1 	bl	8016c84 <GUI__RegisterExit>
 8017302:	682c      	ldr	r4, [r5, #0]
 8017304:	237c      	movs	r3, #124	; 0x7c
 8017306:	435c      	muls	r4, r3
 8017308:	4620      	mov	r0, r4
 801730a:	f7fe ffad 	bl	8016268 <GUI_ALLOC_GetFixedBlock>
 801730e:	4b0a      	ldr	r3, [pc, #40]	; (8017338 <GUITASK_Init+0x48>)
 8017310:	4622      	mov	r2, r4
 8017312:	2100      	movs	r1, #0
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	6030      	str	r0, [r6, #0]
 8017318:	4798      	blx	r3
 801731a:	f04f 33ff 	mov.w	r3, #4294967295
 801731e:	606b      	str	r3, [r5, #4]
 8017320:	f7f9 f954 	bl	80105cc <GUI_X_InitOS>
 8017324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017328:	f7ff bf74 	b.w	8017214 <_GetTaskNo>
 801732c:	200002b4 	.word	0x200002b4
 8017330:	08017251 	.word	0x08017251
 8017334:	20000024 	.word	0x20000024
 8017338:	2000003c 	.word	0x2000003c

0801733c <GUITASK_CopyContext>:
 801733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017340:	2500      	movs	r5, #0
 8017342:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80173a8 <GUITASK_CopyContext+0x6c>
 8017346:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80173a0 <GUITASK_CopyContext+0x64>
 801734a:	f8df a058 	ldr.w	sl, [pc, #88]	; 80173a4 <GUITASK_CopyContext+0x68>
 801734e:	f8d8 3000 	ldr.w	r3, [r8]
 8017352:	429d      	cmp	r5, r3
 8017354:	da17      	bge.n	8017386 <GUITASK_CopyContext+0x4a>
 8017356:	267c      	movs	r6, #124	; 0x7c
 8017358:	f8d9 7000 	ldr.w	r7, [r9]
 801735c:	2274      	movs	r2, #116	; 0x74
 801735e:	f8da 1000 	ldr.w	r1, [sl]
 8017362:	436e      	muls	r6, r5
 8017364:	3501      	adds	r5, #1
 8017366:	19bc      	adds	r4, r7, r6
 8017368:	1d23      	adds	r3, r4, #4
 801736a:	4618      	mov	r0, r3
 801736c:	f007 fc07 	bl	801eb7e <memcpy>
 8017370:	2200      	movs	r2, #0
 8017372:	51ba      	str	r2, [r7, r6]
 8017374:	f104 020c 	add.w	r2, r4, #12
 8017378:	63e0      	str	r0, [r4, #60]	; 0x3c
 801737a:	61a2      	str	r2, [r4, #24]
 801737c:	f104 0208 	add.w	r2, r4, #8
 8017380:	6460      	str	r0, [r4, #68]	; 0x44
 8017382:	6422      	str	r2, [r4, #64]	; 0x40
 8017384:	e7e3      	b.n	801734e <GUITASK_CopyContext+0x12>
 8017386:	f7ff ff45 	bl	8017214 <_GetTaskNo>
 801738a:	4b05      	ldr	r3, [pc, #20]	; (80173a0 <GUITASK_CopyContext+0x64>)
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	237c      	movs	r3, #124	; 0x7c
 8017390:	fb03 2000 	mla	r0, r3, r0, r2
 8017394:	4b03      	ldr	r3, [pc, #12]	; (80173a4 <GUITASK_CopyContext+0x68>)
 8017396:	3004      	adds	r0, #4
 8017398:	6018      	str	r0, [r3, #0]
 801739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801739e:	bf00      	nop
 80173a0:	200002b4 	.word	0x200002b4
 80173a4:	20000018 	.word	0x20000018
 80173a8:	20000024 	.word	0x20000024

080173ac <GUI_Delay>:
 80173ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173b0:	4605      	mov	r5, r0
 80173b2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8017410 <GUI_Delay+0x64>
 80173b6:	f7f9 f8ef 	bl	8010598 <GUI_X_GetTime>
 80173ba:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8017414 <GUI_Delay+0x68>
 80173be:	4405      	add	r5, r0
 80173c0:	f7f9 f8ea 	bl	8010598 <GUI_X_GetTime>
 80173c4:	1a2e      	subs	r6, r5, r0
 80173c6:	2e00      	cmp	r6, #0
 80173c8:	dd1f      	ble.n	801740a <GUI_Delay+0x5e>
 80173ca:	f7ff f945 	bl	8016658 <GUI_Exec>
 80173ce:	f8d8 3000 	ldr.w	r3, [r8]
 80173d2:	429e      	cmp	r6, r3
 80173d4:	bfa8      	it	ge
 80173d6:	461e      	movge	r6, r3
 80173d8:	f7ff ff4e 	bl	8017278 <GUI_Lock>
 80173dc:	f8d9 4000 	ldr.w	r4, [r9]
 80173e0:	f7fe fe90 	bl	8016104 <GUI_ALLOC_Lock>
 80173e4:	4627      	mov	r7, r4
 80173e6:	b11f      	cbz	r7, 80173f0 <GUI_Delay+0x44>
 80173e8:	f7ff ff3c 	bl	8017264 <GUI_Unlock>
 80173ec:	3f01      	subs	r7, #1
 80173ee:	e7fa      	b.n	80173e6 <GUI_Delay+0x3a>
 80173f0:	4630      	mov	r0, r6
 80173f2:	f7f9 f8d8 	bl	80105a6 <GUI_X_Delay>
 80173f6:	b11c      	cbz	r4, 8017400 <GUI_Delay+0x54>
 80173f8:	f7ff ff3e 	bl	8017278 <GUI_Lock>
 80173fc:	3c01      	subs	r4, #1
 80173fe:	e7fa      	b.n	80173f6 <GUI_Delay+0x4a>
 8017400:	f7fe fe88 	bl	8016114 <GUI_ALLOC_Unlock>
 8017404:	f7ff ff2e 	bl	8017264 <GUI_Unlock>
 8017408:	e7da      	b.n	80173c0 <GUI_Delay+0x14>
 801740a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801740e:	bf00      	nop
 8017410:	2000002c 	.word	0x2000002c
 8017414:	200002b8 	.word	0x200002b8

08017418 <GUI_UC__GetCharCodeInc>:
 8017418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801741a:	4e08      	ldr	r6, [pc, #32]	; (801743c <GUI_UC__GetCharCodeInc+0x24>)
 801741c:	4605      	mov	r5, r0
 801741e:	6804      	ldr	r4, [r0, #0]
 8017420:	6833      	ldr	r3, [r6, #0]
 8017422:	4620      	mov	r0, r4
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	4798      	blx	r3
 8017428:	6833      	ldr	r3, [r6, #0]
 801742a:	4607      	mov	r7, r0
 801742c:	4620      	mov	r0, r4
 801742e:	685b      	ldr	r3, [r3, #4]
 8017430:	4798      	blx	r3
 8017432:	4420      	add	r0, r4
 8017434:	6028      	str	r0, [r5, #0]
 8017436:	4638      	mov	r0, r7
 8017438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801743a:	bf00      	nop
 801743c:	20022494 	.word	0x20022494

08017440 <GUI_UC__NumChars2NumBytes>:
 8017440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017442:	4606      	mov	r6, r0
 8017444:	460d      	mov	r5, r1
 8017446:	2400      	movs	r4, #0
 8017448:	4f05      	ldr	r7, [pc, #20]	; (8017460 <GUI_UC__NumChars2NumBytes+0x20>)
 801744a:	b13d      	cbz	r5, 801745c <GUI_UC__NumChars2NumBytes+0x1c>
 801744c:	683b      	ldr	r3, [r7, #0]
 801744e:	4630      	mov	r0, r6
 8017450:	3d01      	subs	r5, #1
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	4798      	blx	r3
 8017456:	4406      	add	r6, r0
 8017458:	4404      	add	r4, r0
 801745a:	e7f6      	b.n	801744a <GUI_UC__NumChars2NumBytes+0xa>
 801745c:	4620      	mov	r0, r4
 801745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017460:	20022494 	.word	0x20022494

08017464 <_GetCharCode>:
 8017464:	7800      	ldrb	r0, [r0, #0]
 8017466:	4770      	bx	lr

08017468 <_GetCharSize>:
 8017468:	2001      	movs	r0, #1
 801746a:	4770      	bx	lr

0801746c <_CalcSizeOfChar>:
 801746c:	2001      	movs	r0, #1
 801746e:	4770      	bx	lr

08017470 <_Encode>:
 8017470:	7001      	strb	r1, [r0, #0]
 8017472:	2001      	movs	r0, #1
 8017474:	4770      	bx	lr
	...

08017478 <GUI_SignalEvent>:
 8017478:	4b02      	ldr	r3, [pc, #8]	; (8017484 <GUI_SignalEvent+0xc>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	b103      	cbz	r3, 8017480 <GUI_SignalEvent+0x8>
 801747e:	4718      	bx	r3
 8017480:	4770      	bx	lr
 8017482:	bf00      	nop
 8017484:	200002c8 	.word	0x200002c8

08017488 <GUI__MixColorsBulk>:
 8017488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801748c:	b087      	sub	sp, #28
 801748e:	4606      	mov	r6, r0
 8017490:	460f      	mov	r7, r1
 8017492:	4690      	mov	r8, r2
 8017494:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017498:	9304      	str	r3, [sp, #16]
 801749a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801749c:	009d      	lsls	r5, r3, #2
 801749e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80174a4:	9303      	str	r3, [sp, #12]
 80174a6:	2300      	movs	r3, #0
 80174a8:	9301      	str	r3, [sp, #4]
 80174aa:	4b17      	ldr	r3, [pc, #92]	; (8017508 <GUI__MixColorsBulk+0x80>)
 80174ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80174ae:	9901      	ldr	r1, [sp, #4]
 80174b0:	4291      	cmp	r1, r2
 80174b2:	d026      	beq.n	8017502 <GUI__MixColorsBulk+0x7a>
 80174b4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80174b8:	46c2      	mov	sl, r8
 80174ba:	46b3      	mov	fp, r6
 80174bc:	9702      	str	r7, [sp, #8]
 80174be:	f85b 0b04 	ldr.w	r0, [fp], #4
 80174c2:	9904      	ldr	r1, [sp, #16]
 80174c4:	0e02      	lsrs	r2, r0, #24
 80174c6:	9c02      	ldr	r4, [sp, #8]
 80174c8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80174cc:	9305      	str	r3, [sp, #20]
 80174ce:	434a      	muls	r2, r1
 80174d0:	21ff      	movs	r1, #255	; 0xff
 80174d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80174d6:	f854 1b04 	ldr.w	r1, [r4], #4
 80174da:	b2d2      	uxtb	r2, r2
 80174dc:	9402      	str	r4, [sp, #8]
 80174de:	681c      	ldr	r4, [r3, #0]
 80174e0:	47a0      	blx	r4
 80174e2:	f1b9 0901 	subs.w	r9, r9, #1
 80174e6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80174ea:	9b05      	ldr	r3, [sp, #20]
 80174ec:	f84a 0b04 	str.w	r0, [sl], #4
 80174f0:	d1e5      	bne.n	80174be <GUI__MixColorsBulk+0x36>
 80174f2:	9a03      	ldr	r2, [sp, #12]
 80174f4:	442e      	add	r6, r5
 80174f6:	44a8      	add	r8, r5
 80174f8:	4417      	add	r7, r2
 80174fa:	9a01      	ldr	r2, [sp, #4]
 80174fc:	3201      	adds	r2, #1
 80174fe:	9201      	str	r2, [sp, #4]
 8017500:	e7d4      	b.n	80174ac <GUI__MixColorsBulk+0x24>
 8017502:	b007      	add	sp, #28
 8017504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017508:	20000030 	.word	0x20000030

0801750c <GUI__MixColors>:
 801750c:	0e0b      	lsrs	r3, r1, #24
 801750e:	ea4f 6310 	mov.w	r3, r0, lsr #24
 8017512:	fb02 f203 	mul.w	r2, r2, r3
 8017516:	f04f 03ff 	mov.w	r3, #255	; 0xff
 801751a:	bf08      	it	eq
 801751c:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8017520:	fbb2 f2f3 	udiv	r2, r2, r3
 8017524:	b530      	push	{r4, r5, lr}
 8017526:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801752a:	1a9d      	subs	r5, r3, r2
 801752c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017530:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 8017534:	0a0c      	lsrs	r4, r1, #8
 8017536:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801753a:	436c      	muls	r4, r5
 801753c:	fb02 4403 	mla	r4, r2, r3, r4
 8017540:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8017544:	4342      	muls	r2, r0
 8017546:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 801754a:	fb05 2103 	mla	r1, r5, r3, r2
 801754e:	0a09      	lsrs	r1, r1, #8
 8017550:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8017554:	4320      	orrs	r0, r4
 8017556:	bd30      	pop	{r4, r5, pc}

08017558 <_OnExit>:
 8017558:	b510      	push	{r4, lr}
 801755a:	4c08      	ldr	r4, [pc, #32]	; (801757c <_OnExit+0x24>)
 801755c:	6820      	ldr	r0, [r4, #0]
 801755e:	f7fe fd97 	bl	8016090 <GUI_ALLOC_FreeFixedBlock>
 8017562:	6860      	ldr	r0, [r4, #4]
 8017564:	f7fe fd94 	bl	8016090 <GUI_ALLOC_FreeFixedBlock>
 8017568:	68a0      	ldr	r0, [r4, #8]
 801756a:	f7fe fd91 	bl	8016090 <GUI_ALLOC_FreeFixedBlock>
 801756e:	2300      	movs	r3, #0
 8017570:	60a3      	str	r3, [r4, #8]
 8017572:	6063      	str	r3, [r4, #4]
 8017574:	6023      	str	r3, [r4, #0]
 8017576:	60e3      	str	r3, [r4, #12]
 8017578:	6123      	str	r3, [r4, #16]
 801757a:	bd10      	pop	{r4, pc}
 801757c:	200002d0 	.word	0x200002d0

08017580 <GUI__GetAlphaBuffer>:
 8017580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017584:	4c29      	ldr	r4, [pc, #164]	; (801762c <GUI__GetAlphaBuffer+0xac>)
 8017586:	461d      	mov	r5, r3
 8017588:	4606      	mov	r6, r0
 801758a:	4688      	mov	r8, r1
 801758c:	6923      	ldr	r3, [r4, #16]
 801758e:	4617      	mov	r7, r2
 8017590:	b93b      	cbnz	r3, 80175a2 <GUI__GetAlphaBuffer+0x22>
 8017592:	2301      	movs	r3, #1
 8017594:	4620      	mov	r0, r4
 8017596:	6123      	str	r3, [r4, #16]
 8017598:	4b25      	ldr	r3, [pc, #148]	; (8017630 <GUI__GetAlphaBuffer+0xb0>)
 801759a:	f840 3f14 	str.w	r3, [r0, #20]!
 801759e:	f7ff fb71 	bl	8016c84 <GUI__RegisterExit>
 80175a2:	68e3      	ldr	r3, [r4, #12]
 80175a4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 801762c <GUI__GetAlphaBuffer+0xac>
 80175a8:	b943      	cbnz	r3, 80175bc <GUI__GetAlphaBuffer+0x3c>
 80175aa:	4b22      	ldr	r3, [pc, #136]	; (8017634 <GUI__GetAlphaBuffer+0xb4>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	f8c9 300c 	str.w	r3, [r9, #12]
 80175b2:	b91b      	cbnz	r3, 80175bc <GUI__GetAlphaBuffer+0x3c>
 80175b4:	f000 ff14 	bl	80183e0 <LCD_GetVXSizeMax>
 80175b8:	f8c9 000c 	str.w	r0, [r9, #12]
 80175bc:	b10d      	cbz	r5, 80175c2 <GUI__GetAlphaBuffer+0x42>
 80175be:	68e3      	ldr	r3, [r4, #12]
 80175c0:	602b      	str	r3, [r5, #0]
 80175c2:	b17e      	cbz	r6, 80175e4 <GUI__GetAlphaBuffer+0x64>
 80175c4:	6823      	ldr	r3, [r4, #0]
 80175c6:	4d19      	ldr	r5, [pc, #100]	; (801762c <GUI__GetAlphaBuffer+0xac>)
 80175c8:	b943      	cbnz	r3, 80175dc <GUI__GetAlphaBuffer+0x5c>
 80175ca:	68e8      	ldr	r0, [r5, #12]
 80175cc:	0080      	lsls	r0, r0, #2
 80175ce:	f7fe fe4b 	bl	8016268 <GUI_ALLOC_GetFixedBlock>
 80175d2:	6028      	str	r0, [r5, #0]
 80175d4:	fab0 f580 	clz	r5, r0
 80175d8:	096d      	lsrs	r5, r5, #5
 80175da:	e000      	b.n	80175de <GUI__GetAlphaBuffer+0x5e>
 80175dc:	2500      	movs	r5, #0
 80175de:	6823      	ldr	r3, [r4, #0]
 80175e0:	6033      	str	r3, [r6, #0]
 80175e2:	e000      	b.n	80175e6 <GUI__GetAlphaBuffer+0x66>
 80175e4:	4635      	mov	r5, r6
 80175e6:	f1b8 0f00 	cmp.w	r8, #0
 80175ea:	d00d      	beq.n	8017608 <GUI__GetAlphaBuffer+0x88>
 80175ec:	6863      	ldr	r3, [r4, #4]
 80175ee:	4e0f      	ldr	r6, [pc, #60]	; (801762c <GUI__GetAlphaBuffer+0xac>)
 80175f0:	b93b      	cbnz	r3, 8017602 <GUI__GetAlphaBuffer+0x82>
 80175f2:	68f0      	ldr	r0, [r6, #12]
 80175f4:	0080      	lsls	r0, r0, #2
 80175f6:	f7fe fe37 	bl	8016268 <GUI_ALLOC_GetFixedBlock>
 80175fa:	2800      	cmp	r0, #0
 80175fc:	6070      	str	r0, [r6, #4]
 80175fe:	bf08      	it	eq
 8017600:	2501      	moveq	r5, #1
 8017602:	6863      	ldr	r3, [r4, #4]
 8017604:	f8c8 3000 	str.w	r3, [r8]
 8017608:	b167      	cbz	r7, 8017624 <GUI__GetAlphaBuffer+0xa4>
 801760a:	68a3      	ldr	r3, [r4, #8]
 801760c:	4e07      	ldr	r6, [pc, #28]	; (801762c <GUI__GetAlphaBuffer+0xac>)
 801760e:	b93b      	cbnz	r3, 8017620 <GUI__GetAlphaBuffer+0xa0>
 8017610:	68f0      	ldr	r0, [r6, #12]
 8017612:	0080      	lsls	r0, r0, #2
 8017614:	f7fe fe28 	bl	8016268 <GUI_ALLOC_GetFixedBlock>
 8017618:	2800      	cmp	r0, #0
 801761a:	60b0      	str	r0, [r6, #8]
 801761c:	bf08      	it	eq
 801761e:	2501      	moveq	r5, #1
 8017620:	68a3      	ldr	r3, [r4, #8]
 8017622:	603b      	str	r3, [r7, #0]
 8017624:	4628      	mov	r0, r5
 8017626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801762a:	bf00      	nop
 801762c:	200002d0 	.word	0x200002d0
 8017630:	08017559 	.word	0x08017559
 8017634:	200224a4 	.word	0x200224a4

08017638 <GUI__DoAlphaBlending>:
 8017638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801763c:	b093      	sub	sp, #76	; 0x4c
 801763e:	2400      	movs	r4, #0
 8017640:	4692      	mov	sl, r2
 8017642:	461e      	mov	r6, r3
 8017644:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8017646:	ab11      	add	r3, sp, #68	; 0x44
 8017648:	900a      	str	r0, [sp, #40]	; 0x28
 801764a:	4622      	mov	r2, r4
 801764c:	910b      	str	r1, [sp, #44]	; 0x2c
 801764e:	a80f      	add	r0, sp, #60	; 0x3c
 8017650:	603c      	str	r4, [r7, #0]
 8017652:	a910      	add	r1, sp, #64	; 0x40
 8017654:	f7ff ff94 	bl	8017580 <GUI__GetAlphaBuffer>
 8017658:	4605      	mov	r5, r0
 801765a:	2800      	cmp	r0, #0
 801765c:	f040 80bd 	bne.w	80177da <GUI__DoAlphaBlending+0x1a2>
 8017660:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017662:	4c60      	ldr	r4, [pc, #384]	; (80177e4 <GUI__DoAlphaBlending+0x1ac>)
 8017664:	42b3      	cmp	r3, r6
 8017666:	bfa8      	it	ge
 8017668:	4633      	movge	r3, r6
 801766a:	9309      	str	r3, [sp, #36]	; 0x24
 801766c:	6823      	ldr	r3, [r4, #0]
 801766e:	7c58      	ldrb	r0, [r3, #17]
 8017670:	4b5d      	ldr	r3, [pc, #372]	; (80177e8 <GUI__DoAlphaBlending+0x1b0>)
 8017672:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017676:	9307      	str	r3, [sp, #28]
 8017678:	691b      	ldr	r3, [r3, #16]
 801767a:	930c      	str	r3, [sp, #48]	; 0x30
 801767c:	f000 fe7c 	bl	8018378 <GUI_GetBitsPerPixelEx>
 8017680:	6823      	ldr	r3, [r4, #0]
 8017682:	9008      	str	r0, [sp, #32]
 8017684:	7c58      	ldrb	r0, [r3, #17]
 8017686:	f000 fe95 	bl	80183b4 <GUI_GetpfIndex2ColorEx>
 801768a:	4b58      	ldr	r3, [pc, #352]	; (80177ec <GUI__DoAlphaBlending+0x1b4>)
 801768c:	9003      	str	r0, [sp, #12]
 801768e:	4298      	cmp	r0, r3
 8017690:	d005      	beq.n	801769e <GUI__DoAlphaBlending+0x66>
 8017692:	4b57      	ldr	r3, [pc, #348]	; (80177f0 <GUI__DoAlphaBlending+0x1b8>)
 8017694:	1ac3      	subs	r3, r0, r3
 8017696:	bf18      	it	ne
 8017698:	2301      	movne	r3, #1
 801769a:	9306      	str	r3, [sp, #24]
 801769c:	e000      	b.n	80176a0 <GUI__DoAlphaBlending+0x68>
 801769e:	9506      	str	r5, [sp, #24]
 80176a0:	2600      	movs	r6, #0
 80176a2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80176a6:	4635      	mov	r5, r6
 80176a8:	4653      	mov	r3, sl
 80176aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80176ae:	930d      	str	r3, [sp, #52]	; 0x34
 80176b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80176b2:	4798      	blx	r3
 80176b4:	9004      	str	r0, [sp, #16]
 80176b6:	0e03      	lsrs	r3, r0, #24
 80176b8:	2bff      	cmp	r3, #255	; 0xff
 80176ba:	9305      	str	r3, [sp, #20]
 80176bc:	d07b      	beq.n	80177b6 <GUI__DoAlphaBlending+0x17e>
 80176be:	2d00      	cmp	r5, #0
 80176c0:	d139      	bne.n	8017736 <GUI__DoAlphaBlending+0xfe>
 80176c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176c6:	eb03 0906 	add.w	r9, r3, r6
 80176ca:	4b46      	ldr	r3, [pc, #280]	; (80177e4 <GUI__DoAlphaBlending+0x1ac>)
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80176d2:	454b      	cmp	r3, r9
 80176d4:	bfc4      	itt	gt
 80176d6:	ebc9 0503 	rsbgt	r5, r9, r3
 80176da:	4699      	movgt	r9, r3
 80176dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176de:	19ac      	adds	r4, r5, r6
 80176e0:	4648      	mov	r0, r9
 80176e2:	eb03 0802 	add.w	r8, r3, r2
 80176e6:	9b07      	ldr	r3, [sp, #28]
 80176e8:	00a4      	lsls	r4, r4, #2
 80176ea:	9301      	str	r3, [sp, #4]
 80176ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80176f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176f2:	4423      	add	r3, r4
 80176f4:	9300      	str	r3, [sp, #0]
 80176f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176f8:	4619      	mov	r1, r3
 80176fa:	f000 ffbd 	bl	8018678 <GUI_ReadRectEx>
 80176fe:	9b08      	ldr	r3, [sp, #32]
 8017700:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017702:	2b17      	cmp	r3, #23
 8017704:	dc07      	bgt.n	8017716 <GUI__DoAlphaBlending+0xde>
 8017706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017708:	ebc5 010b 	rsb	r1, r5, fp
 801770c:	9a08      	ldr	r2, [sp, #32]
 801770e:	4420      	add	r0, r4
 8017710:	f000 f894 	bl	801783c <GUI__ExpandPixelIndicesEx>
 8017714:	e001      	b.n	801771a <GUI__DoAlphaBlending+0xe2>
 8017716:	9b06      	ldr	r3, [sp, #24]
 8017718:	b90b      	cbnz	r3, 801771e <GUI__DoAlphaBlending+0xe6>
 801771a:	2501      	movs	r5, #1
 801771c:	e00b      	b.n	8017736 <GUI__DoAlphaBlending+0xfe>
 801771e:	4404      	add	r4, r0
 8017720:	ebc9 0808 	rsb	r8, r9, r8
 8017724:	6820      	ldr	r0, [r4, #0]
 8017726:	9b03      	ldr	r3, [sp, #12]
 8017728:	4798      	blx	r3
 801772a:	f1b8 0801 	subs.w	r8, r8, #1
 801772e:	f844 0b04 	str.w	r0, [r4], #4
 8017732:	d1f7      	bne.n	8017724 <GUI__DoAlphaBlending+0xec>
 8017734:	e7f1      	b.n	801771a <GUI__DoAlphaBlending+0xe2>
 8017736:	4b2f      	ldr	r3, [pc, #188]	; (80177f4 <GUI__DoAlphaBlending+0x1bc>)
 8017738:	00b4      	lsls	r4, r6, #2
 801773a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801773e:	f1b8 0f00 	cmp.w	r8, #0
 8017742:	d023      	beq.n	801778c <GUI__DoAlphaBlending+0x154>
 8017744:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8017746:	465b      	mov	r3, fp
 8017748:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801774a:	4650      	mov	r0, sl
 801774c:	192a      	adds	r2, r5, r4
 801774e:	4421      	add	r1, r4
 8017750:	9210      	str	r2, [sp, #64]	; 0x40
 8017752:	910f      	str	r1, [sp, #60]	; 0x3c
 8017754:	47c0      	blx	r8
 8017756:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017758:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801775a:	2300      	movs	r3, #0
 801775c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8017760:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017764:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8017768:	d102      	bne.n	8017770 <GUI__DoAlphaBlending+0x138>
 801776a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 801776e:	e004      	b.n	801777a <GUI__DoAlphaBlending+0x142>
 8017770:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017774:	bf08      	it	eq
 8017776:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 801777a:	3301      	adds	r3, #1
 801777c:	459b      	cmp	fp, r3
 801777e:	d1ed      	bne.n	801775c <GUI__DoAlphaBlending+0x124>
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	9510      	str	r5, [sp, #64]	; 0x40
 8017784:	f043 0301 	orr.w	r3, r3, #1
 8017788:	603b      	str	r3, [r7, #0]
 801778a:	e024      	b.n	80177d6 <GUI__DoAlphaBlending+0x19e>
 801778c:	9905      	ldr	r1, [sp, #20]
 801778e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8017792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017794:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017798:	b919      	cbnz	r1, 80177a2 <GUI__DoAlphaBlending+0x16a>
 801779a:	591b      	ldr	r3, [r3, r4]
 801779c:	f848 3004 	str.w	r3, [r8, r4]
 80177a0:	e011      	b.n	80177c6 <GUI__DoAlphaBlending+0x18e>
 80177a2:	5919      	ldr	r1, [r3, r4]
 80177a4:	9b04      	ldr	r3, [sp, #16]
 80177a6:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 80177aa:	4b13      	ldr	r3, [pc, #76]	; (80177f8 <GUI__DoAlphaBlending+0x1c0>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	4798      	blx	r3
 80177b0:	f848 0004 	str.w	r0, [r8, r4]
 80177b4:	e003      	b.n	80177be <GUI__DoAlphaBlending+0x186>
 80177b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177b8:	9a04      	ldr	r2, [sp, #16]
 80177ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	f043 0301 	orr.w	r3, r3, #1
 80177c4:	603b      	str	r3, [r7, #0]
 80177c6:	f1bb 0b01 	subs.w	fp, fp, #1
 80177ca:	f106 0601 	add.w	r6, r6, #1
 80177ce:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80177d2:	f47f af69 	bne.w	80176a8 <GUI__DoAlphaBlending+0x70>
 80177d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80177d8:	e000      	b.n	80177dc <GUI__DoAlphaBlending+0x1a4>
 80177da:	4620      	mov	r0, r4
 80177dc:	b013      	add	sp, #76	; 0x4c
 80177de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177e2:	bf00      	nop
 80177e4:	20000018 	.word	0x20000018
 80177e8:	2002249c 	.word	0x2002249c
 80177ec:	08015ee9 	.word	0x08015ee9
 80177f0:	08015eeb 	.word	0x08015eeb
 80177f4:	200002d0 	.word	0x200002d0
 80177f8:	20000030 	.word	0x20000030

080177fc <GUI__AllocAlphaBuffer>:
 80177fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80177fe:	b908      	cbnz	r0, 8017804 <GUI__AllocAlphaBuffer+0x8>
 8017800:	4602      	mov	r2, r0
 8017802:	e000      	b.n	8017806 <GUI__AllocAlphaBuffer+0xa>
 8017804:	aa03      	add	r2, sp, #12
 8017806:	2300      	movs	r3, #0
 8017808:	a902      	add	r1, sp, #8
 801780a:	a801      	add	r0, sp, #4
 801780c:	f7ff feb8 	bl	8017580 <GUI__GetAlphaBuffer>
 8017810:	b005      	add	sp, #20
 8017812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08017818 <GUI_SetFuncDrawAlpha>:
 8017818:	b510      	push	{r4, lr}
 801781a:	4b06      	ldr	r3, [pc, #24]	; (8017834 <GUI_SetFuncDrawAlpha+0x1c>)
 801781c:	4c06      	ldr	r4, [pc, #24]	; (8017838 <GUI_SetFuncDrawAlpha+0x20>)
 801781e:	b120      	cbz	r0, 801782a <GUI_SetFuncDrawAlpha+0x12>
 8017820:	b119      	cbz	r1, 801782a <GUI_SetFuncDrawAlpha+0x12>
 8017822:	6020      	str	r0, [r4, #0]
 8017824:	2000      	movs	r0, #0
 8017826:	6019      	str	r1, [r3, #0]
 8017828:	bd10      	pop	{r4, pc}
 801782a:	2200      	movs	r2, #0
 801782c:	2001      	movs	r0, #1
 801782e:	6022      	str	r2, [r4, #0]
 8017830:	601a      	str	r2, [r3, #0]
 8017832:	bd10      	pop	{r4, pc}
 8017834:	200224ac 	.word	0x200224ac
 8017838:	200224b0 	.word	0x200224b0

0801783c <GUI__ExpandPixelIndicesEx>:
 801783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017840:	1e0c      	subs	r4, r1, #0
 8017842:	4605      	mov	r5, r0
 8017844:	f340 80b6 	ble.w	80179b4 <GUI__ExpandPixelIndicesEx+0x178>
 8017848:	2a08      	cmp	r2, #8
 801784a:	685e      	ldr	r6, [r3, #4]
 801784c:	dd04      	ble.n	8017858 <GUI__ExpandPixelIndicesEx+0x1c>
 801784e:	2a10      	cmp	r2, #16
 8017850:	f340 809a 	ble.w	8017988 <GUI__ExpandPixelIndicesEx+0x14c>
 8017854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017858:	3a01      	subs	r2, #1
 801785a:	2a07      	cmp	r2, #7
 801785c:	f200 80aa 	bhi.w	80179b4 <GUI__ExpandPixelIndicesEx+0x178>
 8017860:	e8df f002 	tbb	[pc, r2]
 8017864:	59a82d04 	.word	0x59a82d04
 8017868:	85a8a8a8 	.word	0x85a8a8a8
 801786c:	1e67      	subs	r7, r4, #1
 801786e:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 8017872:	10fb      	asrs	r3, r7, #3
 8017874:	f108 38ff 	add.w	r8, r8, #4294967295
 8017878:	f007 0707 	and.w	r7, r7, #7
 801787c:	f103 39ff 	add.w	r9, r3, #4294967295
 8017880:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8017884:	f815 a003 	ldrb.w	sl, [r5, r3]
 8017888:	44a9      	add	r9, r5
 801788a:	2580      	movs	r5, #128	; 0x80
 801788c:	413d      	asrs	r5, r7
 801788e:	b2ed      	uxtb	r5, r5
 8017890:	f1c7 0307 	rsb	r3, r7, #7
 8017894:	ea05 000a 	and.w	r0, r5, sl
 8017898:	4118      	asrs	r0, r3
 801789a:	47b0      	blx	r6
 801789c:	f848 0904 	str.w	r0, [r8], #-4
 80178a0:	b937      	cbnz	r7, 80178b0 <GUI__ExpandPixelIndicesEx+0x74>
 80178a2:	f899 a000 	ldrb.w	sl, [r9]
 80178a6:	2501      	movs	r5, #1
 80178a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80178ac:	2707      	movs	r7, #7
 80178ae:	e002      	b.n	80178b6 <GUI__ExpandPixelIndicesEx+0x7a>
 80178b0:	006d      	lsls	r5, r5, #1
 80178b2:	3f01      	subs	r7, #1
 80178b4:	b2ed      	uxtb	r5, r5
 80178b6:	3c01      	subs	r4, #1
 80178b8:	d1ea      	bne.n	8017890 <GUI__ExpandPixelIndicesEx+0x54>
 80178ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178be:	1e67      	subs	r7, r4, #1
 80178c0:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 80178c4:	10bb      	asrs	r3, r7, #2
 80178c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80178ca:	f007 0703 	and.w	r7, r7, #3
 80178ce:	f103 39ff 	add.w	r9, r3, #4294967295
 80178d2:	f815 a003 	ldrb.w	sl, [r5, r3]
 80178d6:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 80178da:	23c0      	movs	r3, #192	; 0xc0
 80178dc:	44a9      	add	r9, r5
 80178de:	007d      	lsls	r5, r7, #1
 80178e0:	fa43 f505 	asr.w	r5, r3, r5
 80178e4:	b2ed      	uxtb	r5, r5
 80178e6:	007b      	lsls	r3, r7, #1
 80178e8:	ea05 000a 	and.w	r0, r5, sl
 80178ec:	f1c3 0306 	rsb	r3, r3, #6
 80178f0:	4118      	asrs	r0, r3
 80178f2:	47b0      	blx	r6
 80178f4:	f848 0904 	str.w	r0, [r8], #-4
 80178f8:	b937      	cbnz	r7, 8017908 <GUI__ExpandPixelIndicesEx+0xcc>
 80178fa:	2503      	movs	r5, #3
 80178fc:	f899 a000 	ldrb.w	sl, [r9]
 8017900:	f109 39ff 	add.w	r9, r9, #4294967295
 8017904:	462f      	mov	r7, r5
 8017906:	e002      	b.n	801790e <GUI__ExpandPixelIndicesEx+0xd2>
 8017908:	00ad      	lsls	r5, r5, #2
 801790a:	3f01      	subs	r7, #1
 801790c:	b2ed      	uxtb	r5, r5
 801790e:	3c01      	subs	r4, #1
 8017910:	d1e9      	bne.n	80178e6 <GUI__ExpandPixelIndicesEx+0xaa>
 8017912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017916:	1e67      	subs	r7, r4, #1
 8017918:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 801791c:	107b      	asrs	r3, r7, #1
 801791e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017922:	f007 0701 	and.w	r7, r7, #1
 8017926:	f103 39ff 	add.w	r9, r3, #4294967295
 801792a:	f815 a003 	ldrb.w	sl, [r5, r3]
 801792e:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8017932:	23f0      	movs	r3, #240	; 0xf0
 8017934:	44a9      	add	r9, r5
 8017936:	00bd      	lsls	r5, r7, #2
 8017938:	fa43 f505 	asr.w	r5, r3, r5
 801793c:	b2ed      	uxtb	r5, r5
 801793e:	00bb      	lsls	r3, r7, #2
 8017940:	ea05 000a 	and.w	r0, r5, sl
 8017944:	f1c3 0304 	rsb	r3, r3, #4
 8017948:	4118      	asrs	r0, r3
 801794a:	47b0      	blx	r6
 801794c:	f848 0904 	str.w	r0, [r8], #-4
 8017950:	b937      	cbnz	r7, 8017960 <GUI__ExpandPixelIndicesEx+0x124>
 8017952:	f899 a000 	ldrb.w	sl, [r9]
 8017956:	250f      	movs	r5, #15
 8017958:	f109 39ff 	add.w	r9, r9, #4294967295
 801795c:	2701      	movs	r7, #1
 801795e:	e002      	b.n	8017966 <GUI__ExpandPixelIndicesEx+0x12a>
 8017960:	012d      	lsls	r5, r5, #4
 8017962:	2700      	movs	r7, #0
 8017964:	b2ed      	uxtb	r5, r5
 8017966:	3c01      	subs	r4, #1
 8017968:	d1e9      	bne.n	801793e <GUI__ExpandPixelIndicesEx+0x102>
 801796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801796e:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8017972:	4425      	add	r5, r4
 8017974:	1b64      	subs	r4, r4, r5
 8017976:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 801797a:	47b0      	blx	r6
 801797c:	f847 0d04 	str.w	r0, [r7, #-4]!
 8017980:	42e5      	cmn	r5, r4
 8017982:	d1f8      	bne.n	8017976 <GUI__ExpandPixelIndicesEx+0x13a>
 8017984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017988:	695f      	ldr	r7, [r3, #20]
 801798a:	b137      	cbz	r7, 801799a <GUI__ExpandPixelIndicesEx+0x15e>
 801798c:	4622      	mov	r2, r4
 801798e:	4629      	mov	r1, r5
 8017990:	46bc      	mov	ip, r7
 8017992:	2302      	movs	r3, #2
 8017994:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017998:	4760      	bx	ip
 801799a:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 801799e:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80179a2:	f837 0d02 	ldrh.w	r0, [r7, #-2]!
 80179a6:	47b0      	blx	r6
 80179a8:	3c01      	subs	r4, #1
 80179aa:	f845 0d04 	str.w	r0, [r5, #-4]!
 80179ae:	d1f8      	bne.n	80179a2 <GUI__ExpandPixelIndicesEx+0x166>
 80179b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080179b8 <GUI__IntersectRect>:
 80179b8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80179bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80179c0:	429a      	cmp	r2, r3
 80179c2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80179c6:	bfb8      	it	lt
 80179c8:	8003      	strhlt	r3, [r0, #0]
 80179ca:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80179d4:	bfb8      	it	lt
 80179d6:	8043      	strhlt	r3, [r0, #2]
 80179d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80179dc:	429a      	cmp	r2, r3
 80179de:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80179e2:	bfc8      	it	gt
 80179e4:	8083      	strhgt	r3, [r0, #4]
 80179e6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80179ea:	429a      	cmp	r2, r3
 80179ec:	bfc8      	it	gt
 80179ee:	80c3      	strhgt	r3, [r0, #6]
 80179f0:	4770      	bx	lr

080179f2 <GUI__IntersectRects>:
 80179f2:	b570      	push	{r4, r5, r6, lr}
 80179f4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80179f8:	4606      	mov	r6, r0
 80179fa:	f9b2 5000 	ldrsh.w	r5, [r2]
 80179fe:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8017a02:	429d      	cmp	r5, r3
 8017a04:	bfb8      	it	lt
 8017a06:	461d      	movlt	r5, r3
 8017a08:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017a0c:	8005      	strh	r5, [r0, #0]
 8017a0e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8017a12:	4283      	cmp	r3, r0
 8017a14:	bfb8      	it	lt
 8017a16:	4603      	movlt	r3, r0
 8017a18:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8017a1c:	4284      	cmp	r4, r0
 8017a1e:	8073      	strh	r3, [r6, #2]
 8017a20:	bfa8      	it	ge
 8017a22:	4604      	movge	r4, r0
 8017a24:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8017a28:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8017a2c:	80b4      	strh	r4, [r6, #4]
 8017a2e:	4282      	cmp	r2, r0
 8017a30:	bfa8      	it	ge
 8017a32:	4602      	movge	r2, r0
 8017a34:	42a5      	cmp	r5, r4
 8017a36:	80f2      	strh	r2, [r6, #6]
 8017a38:	dc04      	bgt.n	8017a44 <GUI__IntersectRects+0x52>
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	bfcc      	ite	gt
 8017a3e:	2000      	movgt	r0, #0
 8017a40:	2001      	movle	r0, #1
 8017a42:	bd70      	pop	{r4, r5, r6, pc}
 8017a44:	2000      	movs	r0, #0
 8017a46:	bd70      	pop	{r4, r5, r6, pc}

08017a48 <GUI__memset>:
 8017a48:	b2c9      	uxtb	r1, r1
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	b570      	push	{r4, r5, r6, lr}
 8017a4e:	b12a      	cbz	r2, 8017a5c <GUI__memset+0x14>
 8017a50:	079c      	lsls	r4, r3, #30
 8017a52:	d003      	beq.n	8017a5c <GUI__memset+0x14>
 8017a54:	f803 1b01 	strb.w	r1, [r3], #1
 8017a58:	3a01      	subs	r2, #1
 8017a5a:	e7f8      	b.n	8017a4e <GUI__memset+0x6>
 8017a5c:	0895      	lsrs	r5, r2, #2
 8017a5e:	d101      	bne.n	8017a64 <GUI__memset+0x1c>
 8017a60:	441a      	add	r2, r3
 8017a62:	e01a      	b.n	8017a9a <GUI__memset+0x52>
 8017a64:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8017a68:	f002 0203 	and.w	r2, r2, #3
 8017a6c:	434c      	muls	r4, r1
 8017a6e:	2d03      	cmp	r5, #3
 8017a70:	461e      	mov	r6, r3
 8017a72:	f103 0310 	add.w	r3, r3, #16
 8017a76:	dd09      	ble.n	8017a8c <GUI__memset+0x44>
 8017a78:	f843 4c10 	str.w	r4, [r3, #-16]
 8017a7c:	3d04      	subs	r5, #4
 8017a7e:	f843 4c0c 	str.w	r4, [r3, #-12]
 8017a82:	f843 4c08 	str.w	r4, [r3, #-8]
 8017a86:	f843 4c04 	str.w	r4, [r3, #-4]
 8017a8a:	e7f0      	b.n	8017a6e <GUI__memset+0x26>
 8017a8c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8017a90:	429e      	cmp	r6, r3
 8017a92:	d0e5      	beq.n	8017a60 <GUI__memset+0x18>
 8017a94:	f846 4b04 	str.w	r4, [r6], #4
 8017a98:	e7fa      	b.n	8017a90 <GUI__memset+0x48>
 8017a9a:	4293      	cmp	r3, r2
 8017a9c:	d002      	beq.n	8017aa4 <GUI__memset+0x5c>
 8017a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8017aa2:	e7fa      	b.n	8017a9a <GUI__memset+0x52>
 8017aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08017aa8 <_SetDrawMode>:
 8017aa8:	4b08      	ldr	r3, [pc, #32]	; (8017acc <_SetDrawMode+0x24>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	b570      	push	{r4, r5, r6, lr}
 8017aae:	7c1a      	ldrb	r2, [r3, #16]
 8017ab0:	ea82 0100 	eor.w	r1, r2, r0
 8017ab4:	0749      	lsls	r1, r1, #29
 8017ab6:	d505      	bpl.n	8017ac4 <_SetDrawMode+0x1c>
 8017ab8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8017aba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8017abc:	6825      	ldr	r5, [r4, #0]
 8017abe:	680e      	ldr	r6, [r1, #0]
 8017ac0:	6026      	str	r6, [r4, #0]
 8017ac2:	600d      	str	r5, [r1, #0]
 8017ac4:	7418      	strb	r0, [r3, #16]
 8017ac6:	4610      	mov	r0, r2
 8017ac8:	bd70      	pop	{r4, r5, r6, pc}
 8017aca:	bf00      	nop
 8017acc:	20000018 	.word	0x20000018

08017ad0 <LCD_SetDrawMode>:
 8017ad0:	4b01      	ldr	r3, [pc, #4]	; (8017ad8 <LCD_SetDrawMode+0x8>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	689b      	ldr	r3, [r3, #8]
 8017ad6:	4718      	bx	r3
 8017ad8:	20000040 	.word	0x20000040

08017adc <LCD_DrawPixel>:
 8017adc:	4b15      	ldr	r3, [pc, #84]	; (8017b34 <LCD_DrawPixel+0x58>)
 8017ade:	460a      	mov	r2, r1
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8017ae6:	4291      	cmp	r1, r2
 8017ae8:	b430      	push	{r4, r5}
 8017aea:	4604      	mov	r4, r0
 8017aec:	dc20      	bgt.n	8017b30 <LCD_DrawPixel+0x54>
 8017aee:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017af2:	428a      	cmp	r2, r1
 8017af4:	dc1c      	bgt.n	8017b30 <LCD_DrawPixel+0x54>
 8017af6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017afa:	4281      	cmp	r1, r0
 8017afc:	dc18      	bgt.n	8017b30 <LCD_DrawPixel+0x54>
 8017afe:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8017b02:	4288      	cmp	r0, r1
 8017b04:	dc14      	bgt.n	8017b30 <LCD_DrawPixel+0x54>
 8017b06:	7c19      	ldrb	r1, [r3, #16]
 8017b08:	7c58      	ldrb	r0, [r3, #17]
 8017b0a:	f011 0f01 	tst.w	r1, #1
 8017b0e:	490a      	ldr	r1, [pc, #40]	; (8017b38 <LCD_DrawPixel+0x5c>)
 8017b10:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8017b14:	d004      	beq.n	8017b20 <LCD_DrawPixel+0x44>
 8017b16:	68c3      	ldr	r3, [r0, #12]
 8017b18:	4621      	mov	r1, r4
 8017b1a:	69db      	ldr	r3, [r3, #28]
 8017b1c:	bc30      	pop	{r4, r5}
 8017b1e:	4718      	bx	r3
 8017b20:	68c1      	ldr	r1, [r0, #12]
 8017b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b24:	698d      	ldr	r5, [r1, #24]
 8017b26:	4621      	mov	r1, r4
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	46ac      	mov	ip, r5
 8017b2c:	bc30      	pop	{r4, r5}
 8017b2e:	4760      	bx	ip
 8017b30:	bc30      	pop	{r4, r5}
 8017b32:	4770      	bx	lr
 8017b34:	20000018 	.word	0x20000018
 8017b38:	2002249c 	.word	0x2002249c

08017b3c <LCD_DrawHLine>:
 8017b3c:	4b11      	ldr	r3, [pc, #68]	; (8017b84 <LCD_DrawHLine+0x48>)
 8017b3e:	b430      	push	{r4, r5}
 8017b40:	681c      	ldr	r4, [r3, #0]
 8017b42:	460d      	mov	r5, r1
 8017b44:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017b48:	428b      	cmp	r3, r1
 8017b4a:	dc19      	bgt.n	8017b80 <LCD_DrawHLine+0x44>
 8017b4c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8017b50:	4299      	cmp	r1, r3
 8017b52:	dc15      	bgt.n	8017b80 <LCD_DrawHLine+0x44>
 8017b54:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b5c:	4281      	cmp	r1, r0
 8017b5e:	bfb8      	it	lt
 8017b60:	4601      	movlt	r1, r0
 8017b62:	4293      	cmp	r3, r2
 8017b64:	bfa8      	it	ge
 8017b66:	4613      	movge	r3, r2
 8017b68:	4299      	cmp	r1, r3
 8017b6a:	dc09      	bgt.n	8017b80 <LCD_DrawHLine+0x44>
 8017b6c:	7c60      	ldrb	r0, [r4, #17]
 8017b6e:	4a06      	ldr	r2, [pc, #24]	; (8017b88 <LCD_DrawHLine+0x4c>)
 8017b70:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8017b74:	68c2      	ldr	r2, [r0, #12]
 8017b76:	6894      	ldr	r4, [r2, #8]
 8017b78:	462a      	mov	r2, r5
 8017b7a:	46a4      	mov	ip, r4
 8017b7c:	bc30      	pop	{r4, r5}
 8017b7e:	4760      	bx	ip
 8017b80:	bc30      	pop	{r4, r5}
 8017b82:	4770      	bx	lr
 8017b84:	20000018 	.word	0x20000018
 8017b88:	2002249c 	.word	0x2002249c

08017b8c <LCD_FillRect>:
 8017b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b8e:	4c13      	ldr	r4, [pc, #76]	; (8017bdc <LCD_FillRect+0x50>)
 8017b90:	6824      	ldr	r4, [r4, #0]
 8017b92:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8017b96:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8017b9a:	4285      	cmp	r5, r0
 8017b9c:	bfb8      	it	lt
 8017b9e:	4605      	movlt	r5, r0
 8017ba0:	4296      	cmp	r6, r2
 8017ba2:	bfa8      	it	ge
 8017ba4:	4616      	movge	r6, r2
 8017ba6:	42ae      	cmp	r6, r5
 8017ba8:	db15      	blt.n	8017bd6 <LCD_FillRect+0x4a>
 8017baa:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017bae:	428a      	cmp	r2, r1
 8017bb0:	bfb8      	it	lt
 8017bb2:	460a      	movlt	r2, r1
 8017bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bb8:	428b      	cmp	r3, r1
 8017bba:	bfa8      	it	ge
 8017bbc:	460b      	movge	r3, r1
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	dc09      	bgt.n	8017bd6 <LCD_FillRect+0x4a>
 8017bc2:	7c60      	ldrb	r0, [r4, #17]
 8017bc4:	4906      	ldr	r1, [pc, #24]	; (8017be0 <LCD_FillRect+0x54>)
 8017bc6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8017bca:	68c1      	ldr	r1, [r0, #12]
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	4633      	mov	r3, r6
 8017bd0:	690c      	ldr	r4, [r1, #16]
 8017bd2:	4629      	mov	r1, r5
 8017bd4:	47a0      	blx	r4
 8017bd6:	b002      	add	sp, #8
 8017bd8:	bd70      	pop	{r4, r5, r6, pc}
 8017bda:	bf00      	nop
 8017bdc:	20000018 	.word	0x20000018
 8017be0:	2002249c 	.word	0x2002249c

08017be4 <LCD__DrawBitmap_1bpp>:
 8017be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be8:	b08f      	sub	sp, #60	; 0x3c
 8017bea:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8017db8 <LCD__DrawBitmap_1bpp+0x1d4>
 8017bee:	460c      	mov	r4, r1
 8017bf0:	4617      	mov	r7, r2
 8017bf2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017bf4:	f8de e000 	ldr.w	lr, [lr]
 8017bf8:	9502      	str	r5, [sp, #8]
 8017bfa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8017bfc:	9007      	str	r0, [sp, #28]
 8017bfe:	9508      	str	r5, [sp, #32]
 8017c00:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017c02:	9301      	str	r3, [sp, #4]
 8017c04:	9503      	str	r5, [sp, #12]
 8017c06:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8017c0a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8017c0c:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8017c10:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8017c12:	f1be 0f00 	cmp.w	lr, #0
 8017c16:	d002      	beq.n	8017c1e <LCD__DrawBitmap_1bpp+0x3a>
 8017c18:	f8de 4000 	ldr.w	r4, [lr]
 8017c1c:	e054      	b.n	8017cc8 <LCD__DrawBitmap_1bpp+0xe4>
 8017c1e:	9b02      	ldr	r3, [sp, #8]
 8017c20:	9a08      	ldr	r2, [sp, #32]
 8017c22:	4313      	orrs	r3, r2
 8017c24:	2b01      	cmp	r3, #1
 8017c26:	d154      	bne.n	8017cd2 <LCD__DrawBitmap_1bpp+0xee>
 8017c28:	4b61      	ldr	r3, [pc, #388]	; (8017db0 <LCD__DrawBitmap_1bpp+0x1cc>)
 8017c2a:	6818      	ldr	r0, [r3, #0]
 8017c2c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017c30:	1a53      	subs	r3, r2, r1
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	dd0a      	ble.n	8017c4c <LCD__DrawBitmap_1bpp+0x68>
 8017c36:	9901      	ldr	r1, [sp, #4]
 8017c38:	ebc3 0e01 	rsb	lr, r3, r1
 8017c3c:	f1be 0f00 	cmp.w	lr, #0
 8017c40:	f340 80b2 	ble.w	8017da8 <LCD__DrawBitmap_1bpp+0x1c4>
 8017c44:	9903      	ldr	r1, [sp, #12]
 8017c46:	fb01 6603 	mla	r6, r1, r3, r6
 8017c4a:	e002      	b.n	8017c52 <LCD__DrawBitmap_1bpp+0x6e>
 8017c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017c50:	460a      	mov	r2, r1
 8017c52:	9b01      	ldr	r3, [sp, #4]
 8017c54:	441c      	add	r4, r3
 8017c56:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8017c5a:	3c01      	subs	r4, #1
 8017c5c:	1ae4      	subs	r4, r4, r3
 8017c5e:	2c00      	cmp	r4, #0
 8017c60:	dd05      	ble.n	8017c6e <LCD__DrawBitmap_1bpp+0x8a>
 8017c62:	ebc4 0e0e 	rsb	lr, r4, lr
 8017c66:	f1be 0f00 	cmp.w	lr, #0
 8017c6a:	f340 809d 	ble.w	8017da8 <LCD__DrawBitmap_1bpp+0x1c4>
 8017c6e:	9b07      	ldr	r3, [sp, #28]
 8017c70:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8017c74:	443b      	add	r3, r7
 8017c76:	3b01      	subs	r3, #1
 8017c78:	1a5b      	subs	r3, r3, r1
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	bfc8      	it	gt
 8017c7e:	1aff      	subgt	r7, r7, r3
 8017c80:	9b07      	ldr	r3, [sp, #28]
 8017c82:	1b59      	subs	r1, r3, r5
 8017c84:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017c88:	4299      	cmp	r1, r3
 8017c8a:	da09      	bge.n	8017ca0 <LCD__DrawBitmap_1bpp+0xbc>
 8017c8c:	1a5b      	subs	r3, r3, r1
 8017c8e:	441d      	add	r5, r3
 8017c90:	1aff      	subs	r7, r7, r3
 8017c92:	f023 0307 	bic.w	r3, r3, #7
 8017c96:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 8017c9a:	f005 0507 	and.w	r5, r5, #7
 8017c9e:	4419      	add	r1, r3
 8017ca0:	2f00      	cmp	r7, #0
 8017ca2:	f340 8081 	ble.w	8017da8 <LCD__DrawBitmap_1bpp+0x1c4>
 8017ca6:	7c40      	ldrb	r0, [r0, #17]
 8017ca8:	4b42      	ldr	r3, [pc, #264]	; (8017db4 <LCD__DrawBitmap_1bpp+0x1d0>)
 8017caa:	9c03      	ldr	r4, [sp, #12]
 8017cac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017cb0:	68c3      	ldr	r3, [r0, #12]
 8017cb2:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8017cb6:	951c      	str	r5, [sp, #112]	; 0x70
 8017cb8:	961b      	str	r6, [sp, #108]	; 0x6c
 8017cba:	941a      	str	r4, [sp, #104]	; 0x68
 8017cbc:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8017cc0:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8017cc4:	685c      	ldr	r4, [r3, #4]
 8017cc6:	463b      	mov	r3, r7
 8017cc8:	46a4      	mov	ip, r4
 8017cca:	b00f      	add	sp, #60	; 0x3c
 8017ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd0:	4760      	bx	ip
 8017cd2:	f1ca 0308 	rsb	r3, sl, #8
 8017cd6:	4675      	mov	r5, lr
 8017cd8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8017db0 <LCD__DrawBitmap_1bpp+0x1cc>
 8017cdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cde:	9b02      	ldr	r3, [sp, #8]
 8017ce0:	f8cd e014 	str.w	lr, [sp, #20]
 8017ce4:	3b01      	subs	r3, #1
 8017ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8017ce8:	9b05      	ldr	r3, [sp, #20]
 8017cea:	9a01      	ldr	r2, [sp, #4]
 8017cec:	4293      	cmp	r3, r2
 8017cee:	da5b      	bge.n	8017da8 <LCD__DrawBitmap_1bpp+0x1c4>
 8017cf0:	9b08      	ldr	r3, [sp, #32]
 8017cf2:	18e3      	adds	r3, r4, r3
 8017cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8017cf6:	3b01      	subs	r3, #1
 8017cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8017cfa:	f8d9 3000 	ldr.w	r3, [r9]
 8017cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017d00:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8017d04:	428a      	cmp	r2, r1
 8017d06:	dc48      	bgt.n	8017d9a <LCD__DrawBitmap_1bpp+0x1b6>
 8017d08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8017d0c:	429c      	cmp	r4, r3
 8017d0e:	dc44      	bgt.n	8017d9a <LCD__DrawBitmap_1bpp+0x1b6>
 8017d10:	9b07      	ldr	r3, [sp, #28]
 8017d12:	f04f 0800 	mov.w	r8, #0
 8017d16:	9606      	str	r6, [sp, #24]
 8017d18:	9300      	str	r3, [sp, #0]
 8017d1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8017d1e:	9b04      	ldr	r3, [sp, #16]
 8017d20:	42bb      	cmp	r3, r7
 8017d22:	da3a      	bge.n	8017d9a <LCD__DrawBitmap_1bpp+0x1b6>
 8017d24:	f1b8 0f00 	cmp.w	r8, #0
 8017d28:	d105      	bne.n	8017d36 <LCD__DrawBitmap_1bpp+0x152>
 8017d2a:	9b06      	ldr	r3, [sp, #24]
 8017d2c:	f04f 0808 	mov.w	r8, #8
 8017d30:	781d      	ldrb	r5, [r3, #0]
 8017d32:	3301      	adds	r3, #1
 8017d34:	9306      	str	r3, [sp, #24]
 8017d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d38:	ebca 0808 	rsb	r8, sl, r8
 8017d3c:	fa45 f303 	asr.w	r3, r5, r3
 8017d40:	fa05 f50a 	lsl.w	r5, r5, sl
 8017d44:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8017d48:	b2ed      	uxtb	r5, r5
 8017d4a:	d104      	bne.n	8017d56 <LCD__DrawBitmap_1bpp+0x172>
 8017d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8017d50:	7c12      	ldrb	r2, [r2, #16]
 8017d52:	0792      	lsls	r2, r2, #30
 8017d54:	d419      	bmi.n	8017d8a <LCD__DrawBitmap_1bpp+0x1a6>
 8017d56:	f8d9 2000 	ldr.w	r2, [r9]
 8017d5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017d5c:	6810      	ldr	r0, [r2, #0]
 8017d5e:	900c      	str	r0, [sp, #48]	; 0x30
 8017d60:	f1bb 0f00 	cmp.w	fp, #0
 8017d64:	d002      	beq.n	8017d6c <LCD__DrawBitmap_1bpp+0x188>
 8017d66:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8017d6a:	e000      	b.n	8017d6e <LCD__DrawBitmap_1bpp+0x18a>
 8017d6c:	b2db      	uxtb	r3, r3
 8017d6e:	6013      	str	r3, [r2, #0]
 8017d70:	9900      	ldr	r1, [sp, #0]
 8017d72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d76:	440a      	add	r2, r1
 8017d78:	9800      	ldr	r0, [sp, #0]
 8017d7a:	4621      	mov	r1, r4
 8017d7c:	f7ff ff06 	bl	8017b8c <LCD_FillRect>
 8017d80:	f8d9 3000 	ldr.w	r3, [r9]
 8017d84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d88:	601a      	str	r2, [r3, #0]
 8017d8a:	9b04      	ldr	r3, [sp, #16]
 8017d8c:	9a02      	ldr	r2, [sp, #8]
 8017d8e:	3301      	adds	r3, #1
 8017d90:	9304      	str	r3, [sp, #16]
 8017d92:	9b00      	ldr	r3, [sp, #0]
 8017d94:	4413      	add	r3, r2
 8017d96:	9300      	str	r3, [sp, #0]
 8017d98:	e7c1      	b.n	8017d1e <LCD__DrawBitmap_1bpp+0x13a>
 8017d9a:	9b05      	ldr	r3, [sp, #20]
 8017d9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017d9e:	3301      	adds	r3, #1
 8017da0:	9305      	str	r3, [sp, #20]
 8017da2:	9b03      	ldr	r3, [sp, #12]
 8017da4:	441e      	add	r6, r3
 8017da6:	e79f      	b.n	8017ce8 <LCD__DrawBitmap_1bpp+0x104>
 8017da8:	b00f      	add	sp, #60	; 0x3c
 8017daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dae:	bf00      	nop
 8017db0:	20000018 	.word	0x20000018
 8017db4:	2002249c 	.word	0x2002249c
 8017db8:	20022458 	.word	0x20022458

08017dbc <LCD_DrawBitmap>:
 8017dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dc0:	b08f      	sub	sp, #60	; 0x3c
 8017dc2:	f8df e218 	ldr.w	lr, [pc, #536]	; 8017fdc <LCD_DrawBitmap+0x220>
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	4690      	mov	r8, r2
 8017dca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017dcc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017dce:	9402      	str	r4, [sp, #8]
 8017dd0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8017dd2:	f8de e000 	ldr.w	lr, [lr]
 8017dd6:	9408      	str	r4, [sp, #32]
 8017dd8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8017dda:	9100      	str	r1, [sp, #0]
 8017ddc:	9403      	str	r4, [sp, #12]
 8017dde:	9301      	str	r3, [sp, #4]
 8017de0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8017de2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017de4:	9604      	str	r6, [sp, #16]
 8017de6:	f1be 0f00 	cmp.w	lr, #0
 8017dea:	d002      	beq.n	8017df2 <LCD_DrawBitmap+0x36>
 8017dec:	f8de 4000 	ldr.w	r4, [lr]
 8017df0:	e07a      	b.n	8017ee8 <LCD_DrawBitmap+0x12c>
 8017df2:	9b02      	ldr	r3, [sp, #8]
 8017df4:	9a08      	ldr	r2, [sp, #32]
 8017df6:	4313      	orrs	r3, r2
 8017df8:	2b01      	cmp	r3, #1
 8017dfa:	d17a      	bne.n	8017ef2 <LCD_DrawBitmap+0x136>
 8017dfc:	4b75      	ldr	r3, [pc, #468]	; (8017fd4 <LCD_DrawBitmap+0x218>)
 8017dfe:	9901      	ldr	r1, [sp, #4]
 8017e00:	6818      	ldr	r0, [r3, #0]
 8017e02:	9b00      	ldr	r3, [sp, #0]
 8017e04:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e08:	1ad3      	subs	r3, r2, r3
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	dd07      	ble.n	8017e1e <LCD_DrawBitmap+0x62>
 8017e0e:	1ac9      	subs	r1, r1, r3
 8017e10:	2900      	cmp	r1, #0
 8017e12:	f340 80db 	ble.w	8017fcc <LCD_DrawBitmap+0x210>
 8017e16:	9e03      	ldr	r6, [sp, #12]
 8017e18:	fb06 4403 	mla	r4, r6, r3, r4
 8017e1c:	e000      	b.n	8017e20 <LCD_DrawBitmap+0x64>
 8017e1e:	9a00      	ldr	r2, [sp, #0]
 8017e20:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8017e24:	441e      	add	r6, r3
 8017e26:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8017e2a:	3e01      	subs	r6, #1
 8017e2c:	1af6      	subs	r6, r6, r3
 8017e2e:	2e00      	cmp	r6, #0
 8017e30:	dd03      	ble.n	8017e3a <LCD_DrawBitmap+0x7e>
 8017e32:	1b89      	subs	r1, r1, r6
 8017e34:	2900      	cmp	r1, #0
 8017e36:	f340 80c9 	ble.w	8017fcc <LCD_DrawBitmap+0x210>
 8017e3a:	eb05 0308 	add.w	r3, r5, r8
 8017e3e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8017e42:	3b01      	subs	r3, #1
 8017e44:	1b9b      	subs	r3, r3, r6
 8017e46:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	bfc8      	it	gt
 8017e4e:	ebc3 0808 	rsbgt	r8, r3, r8
 8017e52:	42b5      	cmp	r5, r6
 8017e54:	da31      	bge.n	8017eba <LCD_DrawBitmap+0xfe>
 8017e56:	1b73      	subs	r3, r6, r5
 8017e58:	2f08      	cmp	r7, #8
 8017e5a:	ebc3 0808 	rsb	r8, r3, r8
 8017e5e:	d027      	beq.n	8017eb0 <LCD_DrawBitmap+0xf4>
 8017e60:	dc0d      	bgt.n	8017e7e <LCD_DrawBitmap+0xc2>
 8017e62:	2f02      	cmp	r7, #2
 8017e64:	d014      	beq.n	8017e90 <LCD_DrawBitmap+0xd4>
 8017e66:	2f04      	cmp	r7, #4
 8017e68:	d01a      	beq.n	8017ea0 <LCD_DrawBitmap+0xe4>
 8017e6a:	2f01      	cmp	r7, #1
 8017e6c:	d126      	bne.n	8017ebc <LCD_DrawBitmap+0x100>
 8017e6e:	f023 0607 	bic.w	r6, r3, #7
 8017e72:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8017e76:	f003 0307 	and.w	r3, r3, #7
 8017e7a:	4435      	add	r5, r6
 8017e7c:	e01e      	b.n	8017ebc <LCD_DrawBitmap+0x100>
 8017e7e:	2f18      	cmp	r7, #24
 8017e80:	d018      	beq.n	8017eb4 <LCD_DrawBitmap+0xf8>
 8017e82:	2f20      	cmp	r7, #32
 8017e84:	d016      	beq.n	8017eb4 <LCD_DrawBitmap+0xf8>
 8017e86:	2f10      	cmp	r7, #16
 8017e88:	d118      	bne.n	8017ebc <LCD_DrawBitmap+0x100>
 8017e8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017e8e:	e013      	b.n	8017eb8 <LCD_DrawBitmap+0xfc>
 8017e90:	f023 0603 	bic.w	r6, r3, #3
 8017e94:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8017e98:	f003 0303 	and.w	r3, r3, #3
 8017e9c:	4435      	add	r5, r6
 8017e9e:	e00d      	b.n	8017ebc <LCD_DrawBitmap+0x100>
 8017ea0:	f023 0601 	bic.w	r6, r3, #1
 8017ea4:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8017ea8:	f003 0301 	and.w	r3, r3, #1
 8017eac:	4435      	add	r5, r6
 8017eae:	e005      	b.n	8017ebc <LCD_DrawBitmap+0x100>
 8017eb0:	441c      	add	r4, r3
 8017eb2:	e001      	b.n	8017eb8 <LCD_DrawBitmap+0xfc>
 8017eb4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8017eb8:	4635      	mov	r5, r6
 8017eba:	2300      	movs	r3, #0
 8017ebc:	f1b8 0f00 	cmp.w	r8, #0
 8017ec0:	f340 8084 	ble.w	8017fcc <LCD_DrawBitmap+0x210>
 8017ec4:	7c46      	ldrb	r6, [r0, #17]
 8017ec6:	4844      	ldr	r0, [pc, #272]	; (8017fd8 <LCD_DrawBitmap+0x21c>)
 8017ec8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8017ecc:	9e04      	ldr	r6, [sp, #16]
 8017ece:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8017ed2:	931c      	str	r3, [sp, #112]	; 0x70
 8017ed4:	9b03      	ldr	r3, [sp, #12]
 8017ed6:	9118      	str	r1, [sp, #96]	; 0x60
 8017ed8:	4629      	mov	r1, r5
 8017eda:	931a      	str	r3, [sp, #104]	; 0x68
 8017edc:	4643      	mov	r3, r8
 8017ede:	961d      	str	r6, [sp, #116]	; 0x74
 8017ee0:	941b      	str	r4, [sp, #108]	; 0x6c
 8017ee2:	9719      	str	r7, [sp, #100]	; 0x64
 8017ee4:	f8de 4004 	ldr.w	r4, [lr, #4]
 8017ee8:	46a4      	mov	ip, r4
 8017eea:	b00f      	add	sp, #60	; 0x3c
 8017eec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef0:	4760      	bx	ip
 8017ef2:	f1c7 0308 	rsb	r3, r7, #8
 8017ef6:	46f3      	mov	fp, lr
 8017ef8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8017fd4 <LCD_DrawBitmap+0x218>
 8017efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017efe:	9b02      	ldr	r3, [sp, #8]
 8017f00:	f8cd e018 	str.w	lr, [sp, #24]
 8017f04:	3b01      	subs	r3, #1
 8017f06:	930d      	str	r3, [sp, #52]	; 0x34
 8017f08:	9b06      	ldr	r3, [sp, #24]
 8017f0a:	9a01      	ldr	r2, [sp, #4]
 8017f0c:	4293      	cmp	r3, r2
 8017f0e:	da5d      	bge.n	8017fcc <LCD_DrawBitmap+0x210>
 8017f10:	9a00      	ldr	r2, [sp, #0]
 8017f12:	9b08      	ldr	r3, [sp, #32]
 8017f14:	4413      	add	r3, r2
 8017f16:	9309      	str	r3, [sp, #36]	; 0x24
 8017f18:	3b01      	subs	r3, #1
 8017f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8017f1c:	f8da 3000 	ldr.w	r3, [sl]
 8017f20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017f22:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8017f26:	428a      	cmp	r2, r1
 8017f28:	dc48      	bgt.n	8017fbc <LCD_DrawBitmap+0x200>
 8017f2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8017f2e:	9a00      	ldr	r2, [sp, #0]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	dc43      	bgt.n	8017fbc <LCD_DrawBitmap+0x200>
 8017f34:	f04f 0900 	mov.w	r9, #0
 8017f38:	462e      	mov	r6, r5
 8017f3a:	9407      	str	r4, [sp, #28]
 8017f3c:	f8cd 9014 	str.w	r9, [sp, #20]
 8017f40:	9b05      	ldr	r3, [sp, #20]
 8017f42:	4543      	cmp	r3, r8
 8017f44:	da3a      	bge.n	8017fbc <LCD_DrawBitmap+0x200>
 8017f46:	f1b9 0f00 	cmp.w	r9, #0
 8017f4a:	d106      	bne.n	8017f5a <LCD_DrawBitmap+0x19e>
 8017f4c:	9b07      	ldr	r3, [sp, #28]
 8017f4e:	f04f 0908 	mov.w	r9, #8
 8017f52:	f893 b000 	ldrb.w	fp, [r3]
 8017f56:	3301      	adds	r3, #1
 8017f58:	9307      	str	r3, [sp, #28]
 8017f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f5c:	fa0b f207 	lsl.w	r2, fp, r7
 8017f60:	ebc7 0909 	rsb	r9, r7, r9
 8017f64:	fa4b f303 	asr.w	r3, fp, r3
 8017f68:	fa5f fb82 	uxtb.w	fp, r2
 8017f6c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8017f70:	d104      	bne.n	8017f7c <LCD_DrawBitmap+0x1c0>
 8017f72:	f8da 2000 	ldr.w	r2, [sl]
 8017f76:	7c12      	ldrb	r2, [r2, #16]
 8017f78:	0792      	lsls	r2, r2, #30
 8017f7a:	d417      	bmi.n	8017fac <LCD_DrawBitmap+0x1f0>
 8017f7c:	f8da 2000 	ldr.w	r2, [sl]
 8017f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017f82:	6810      	ldr	r0, [r2, #0]
 8017f84:	900c      	str	r0, [sp, #48]	; 0x30
 8017f86:	9804      	ldr	r0, [sp, #16]
 8017f88:	b110      	cbz	r0, 8017f90 <LCD_DrawBitmap+0x1d4>
 8017f8a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8017f8e:	e000      	b.n	8017f92 <LCD_DrawBitmap+0x1d6>
 8017f90:	b2db      	uxtb	r3, r3
 8017f92:	6013      	str	r3, [r2, #0]
 8017f94:	4630      	mov	r0, r6
 8017f96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f9a:	4432      	add	r2, r6
 8017f9c:	9900      	ldr	r1, [sp, #0]
 8017f9e:	f7ff fdf5 	bl	8017b8c <LCD_FillRect>
 8017fa2:	f8da 3000 	ldr.w	r3, [sl]
 8017fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017faa:	601a      	str	r2, [r3, #0]
 8017fac:	9b05      	ldr	r3, [sp, #20]
 8017fae:	9a02      	ldr	r2, [sp, #8]
 8017fb0:	3301      	adds	r3, #1
 8017fb2:	9305      	str	r3, [sp, #20]
 8017fb4:	4633      	mov	r3, r6
 8017fb6:	4413      	add	r3, r2
 8017fb8:	461e      	mov	r6, r3
 8017fba:	e7c1      	b.n	8017f40 <LCD_DrawBitmap+0x184>
 8017fbc:	9b06      	ldr	r3, [sp, #24]
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	9306      	str	r3, [sp, #24]
 8017fc2:	9b03      	ldr	r3, [sp, #12]
 8017fc4:	441c      	add	r4, r3
 8017fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fc8:	9300      	str	r3, [sp, #0]
 8017fca:	e79d      	b.n	8017f08 <LCD_DrawBitmap+0x14c>
 8017fcc:	b00f      	add	sp, #60	; 0x3c
 8017fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fd2:	bf00      	nop
 8017fd4:	20000018 	.word	0x20000018
 8017fd8:	2002249c 	.word	0x2002249c
 8017fdc:	20022458 	.word	0x20022458

08017fe0 <LCD_SetClipRectMax>:
 8017fe0:	4b04      	ldr	r3, [pc, #16]	; (8017ff4 <LCD_SetClipRectMax+0x14>)
 8017fe2:	6819      	ldr	r1, [r3, #0]
 8017fe4:	4b04      	ldr	r3, [pc, #16]	; (8017ff8 <LCD_SetClipRectMax+0x18>)
 8017fe6:	7c4a      	ldrb	r2, [r1, #17]
 8017fe8:	3108      	adds	r1, #8
 8017fea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017fee:	68c3      	ldr	r3, [r0, #12]
 8017ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ff2:	4718      	bx	r3
 8017ff4:	20000018 	.word	0x20000018
 8017ff8:	2002249c 	.word	0x2002249c

08017ffc <emWin_LCD_Init>:
 8017ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ffe:	f7ff ffef 	bl	8017fe0 <LCD_SetClipRectMax>
 8018002:	f000 f8bb 	bl	801817c <LCD_InitColors>
 8018006:	4604      	mov	r4, r0
 8018008:	2800      	cmp	r0, #0
 801800a:	d144      	bne.n	8018096 <emWin_LCD_Init+0x9a>
 801800c:	4605      	mov	r5, r0
 801800e:	4628      	mov	r0, r5
 8018010:	f7fe fe5e 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018014:	9001      	str	r0, [sp, #4]
 8018016:	b150      	cbz	r0, 801802e <emWin_LCD_Init+0x32>
 8018018:	68c3      	ldr	r3, [r0, #12]
 801801a:	210c      	movs	r1, #12
 801801c:	a801      	add	r0, sp, #4
 801801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018020:	4798      	blx	r3
 8018022:	4603      	mov	r3, r0
 8018024:	2800      	cmp	r0, #0
 8018026:	d034      	beq.n	8018092 <emWin_LCD_Init+0x96>
 8018028:	9801      	ldr	r0, [sp, #4]
 801802a:	4798      	blx	r3
 801802c:	4304      	orrs	r4, r0
 801802e:	3501      	adds	r5, #1
 8018030:	2d02      	cmp	r5, #2
 8018032:	d1ec      	bne.n	801800e <emWin_LCD_Init+0x12>
 8018034:	bb7c      	cbnz	r4, 8018096 <emWin_LCD_Init+0x9a>
 8018036:	f000 f8f7 	bl	8018228 <LCD_InitLUT>
 801803a:	4b18      	ldr	r3, [pc, #96]	; (801809c <emWin_LCD_Init+0xa0>)
 801803c:	681a      	ldr	r2, [r3, #0]
 801803e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8018042:	429a      	cmp	r2, r3
 8018044:	d101      	bne.n	801804a <emWin_LCD_Init+0x4e>
 8018046:	2000      	movs	r0, #0
 8018048:	e026      	b.n	8018098 <emWin_LCD_Init+0x9c>
 801804a:	2401      	movs	r4, #1
 801804c:	4620      	mov	r0, r4
 801804e:	f7fe fe3f 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018052:	9001      	str	r0, [sp, #4]
 8018054:	b1c8      	cbz	r0, 801808a <emWin_LCD_Init+0x8e>
 8018056:	4620      	mov	r0, r4
 8018058:	f7ff f888 	bl	801716c <GUI_SelectLayer>
 801805c:	2004      	movs	r0, #4
 801805e:	f7ff fd37 	bl	8017ad0 <LCD_SetDrawMode>
 8018062:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8018066:	2100      	movs	r1, #0
 8018068:	461a      	mov	r2, r3
 801806a:	4608      	mov	r0, r1
 801806c:	f7ff fd8e 	bl	8017b8c <LCD_FillRect>
 8018070:	2000      	movs	r0, #0
 8018072:	f7ff fd2d 	bl	8017ad0 <LCD_SetDrawMode>
 8018076:	9b01      	ldr	r3, [sp, #4]
 8018078:	210e      	movs	r1, #14
 801807a:	a801      	add	r0, sp, #4
 801807c:	68db      	ldr	r3, [r3, #12]
 801807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018080:	4798      	blx	r3
 8018082:	4603      	mov	r3, r0
 8018084:	b108      	cbz	r0, 801808a <emWin_LCD_Init+0x8e>
 8018086:	9801      	ldr	r0, [sp, #4]
 8018088:	4798      	blx	r3
 801808a:	f114 34ff 	adds.w	r4, r4, #4294967295
 801808e:	d2dd      	bcs.n	801804c <emWin_LCD_Init+0x50>
 8018090:	e7d9      	b.n	8018046 <emWin_LCD_Init+0x4a>
 8018092:	2001      	movs	r0, #1
 8018094:	e000      	b.n	8018098 <emWin_LCD_Init+0x9c>
 8018096:	4620      	mov	r0, r4
 8018098:	b003      	add	sp, #12
 801809a:	bd30      	pop	{r4, r5, pc}
 801809c:	20000014 	.word	0x20000014

080180a0 <LCD_Color2Index>:
 80180a0:	4b04      	ldr	r3, [pc, #16]	; (80180b4 <LCD_Color2Index+0x14>)
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	7c5a      	ldrb	r2, [r3, #17]
 80180a6:	4b04      	ldr	r3, [pc, #16]	; (80180b8 <LCD_Color2Index+0x18>)
 80180a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180ac:	691b      	ldr	r3, [r3, #16]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	4718      	bx	r3
 80180b2:	bf00      	nop
 80180b4:	20000018 	.word	0x20000018
 80180b8:	2002249c 	.word	0x2002249c

080180bc <LCD_Index2Color>:
 80180bc:	4b04      	ldr	r3, [pc, #16]	; (80180d0 <LCD_Index2Color+0x14>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	7c5a      	ldrb	r2, [r3, #17]
 80180c2:	4b04      	ldr	r3, [pc, #16]	; (80180d4 <LCD_Index2Color+0x18>)
 80180c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180c8:	691b      	ldr	r3, [r3, #16]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	4718      	bx	r3
 80180ce:	bf00      	nop
 80180d0:	20000018 	.word	0x20000018
 80180d4:	2002249c 	.word	0x2002249c

080180d8 <LCD_SetColorIndex>:
 80180d8:	4b04      	ldr	r3, [pc, #16]	; (80180ec <LCD_SetColorIndex+0x14>)
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	7c1a      	ldrb	r2, [r3, #16]
 80180de:	0752      	lsls	r2, r2, #29
 80180e0:	bf4c      	ite	mi
 80180e2:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 80180e4:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 80180e6:	6018      	str	r0, [r3, #0]
 80180e8:	4770      	bx	lr
 80180ea:	bf00      	nop
 80180ec:	20000018 	.word	0x20000018

080180f0 <_SetColor>:
 80180f0:	b508      	push	{r3, lr}
 80180f2:	4b06      	ldr	r3, [pc, #24]	; (801810c <_SetColor+0x1c>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80180f8:	4281      	cmp	r1, r0
 80180fa:	d006      	beq.n	801810a <_SetColor+0x1a>
 80180fc:	6318      	str	r0, [r3, #48]	; 0x30
 80180fe:	f7ff ffcf 	bl	80180a0 <LCD_Color2Index>
 8018102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018106:	f7ff bfe7 	b.w	80180d8 <LCD_SetColorIndex>
 801810a:	bd08      	pop	{r3, pc}
 801810c:	20000018 	.word	0x20000018

08018110 <LCD_SetBkColorIndex>:
 8018110:	4b04      	ldr	r3, [pc, #16]	; (8018124 <LCD_SetBkColorIndex+0x14>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	7c1a      	ldrb	r2, [r3, #16]
 8018116:	0752      	lsls	r2, r2, #29
 8018118:	bf4c      	ite	mi
 801811a:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 801811c:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 801811e:	6018      	str	r0, [r3, #0]
 8018120:	4770      	bx	lr
 8018122:	bf00      	nop
 8018124:	20000018 	.word	0x20000018

08018128 <_SetBkColor>:
 8018128:	b508      	push	{r3, lr}
 801812a:	4b06      	ldr	r3, [pc, #24]	; (8018144 <_SetBkColor+0x1c>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018130:	4281      	cmp	r1, r0
 8018132:	d006      	beq.n	8018142 <_SetBkColor+0x1a>
 8018134:	6358      	str	r0, [r3, #52]	; 0x34
 8018136:	f7ff ffb3 	bl	80180a0 <LCD_Color2Index>
 801813a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801813e:	f7ff bfe7 	b.w	8018110 <LCD_SetBkColorIndex>
 8018142:	bd08      	pop	{r3, pc}
 8018144:	20000018 	.word	0x20000018

08018148 <LCD_SetBkColor>:
 8018148:	4b01      	ldr	r3, [pc, #4]	; (8018150 <LCD_SetBkColor+0x8>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	685b      	ldr	r3, [r3, #4]
 801814e:	4718      	bx	r3
 8018150:	20000040 	.word	0x20000040

08018154 <LCD_SetColor>:
 8018154:	4b01      	ldr	r3, [pc, #4]	; (801815c <LCD_SetColor+0x8>)
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	4718      	bx	r3
 801815c:	20000040 	.word	0x20000040

08018160 <_OnExit>:
 8018160:	b510      	push	{r4, lr}
 8018162:	4c04      	ldr	r4, [pc, #16]	; (8018174 <_OnExit+0x14>)
 8018164:	6820      	ldr	r0, [r4, #0]
 8018166:	f7fd ff93 	bl	8016090 <GUI_ALLOC_FreeFixedBlock>
 801816a:	2300      	movs	r3, #0
 801816c:	4a02      	ldr	r2, [pc, #8]	; (8018178 <_OnExit+0x18>)
 801816e:	6023      	str	r3, [r4, #0]
 8018170:	6013      	str	r3, [r2, #0]
 8018172:	bd10      	pop	{r4, pc}
 8018174:	200224b4 	.word	0x200224b4
 8018178:	200002f0 	.word	0x200002f0

0801817c <LCD_InitColors>:
 801817c:	b538      	push	{r3, r4, r5, lr}
 801817e:	4d0a      	ldr	r5, [pc, #40]	; (80181a8 <LCD_InitColors+0x2c>)
 8018180:	682c      	ldr	r4, [r5, #0]
 8018182:	b964      	cbnz	r4, 801819e <LCD_InitColors+0x22>
 8018184:	4b09      	ldr	r3, [pc, #36]	; (80181ac <LCD_InitColors+0x30>)
 8018186:	6818      	ldr	r0, [r3, #0]
 8018188:	0080      	lsls	r0, r0, #2
 801818a:	f7fe f86d 	bl	8016268 <GUI_ALLOC_GetFixedBlock>
 801818e:	6028      	str	r0, [r5, #0]
 8018190:	b138      	cbz	r0, 80181a2 <LCD_InitColors+0x26>
 8018192:	4807      	ldr	r0, [pc, #28]	; (80181b0 <LCD_InitColors+0x34>)
 8018194:	4b07      	ldr	r3, [pc, #28]	; (80181b4 <LCD_InitColors+0x38>)
 8018196:	f840 3f04 	str.w	r3, [r0, #4]!
 801819a:	f7fe fd73 	bl	8016c84 <GUI__RegisterExit>
 801819e:	2000      	movs	r0, #0
 80181a0:	bd38      	pop	{r3, r4, r5, pc}
 80181a2:	2001      	movs	r0, #1
 80181a4:	bd38      	pop	{r3, r4, r5, pc}
 80181a6:	bf00      	nop
 80181a8:	200224b4 	.word	0x200224b4
 80181ac:	20000044 	.word	0x20000044
 80181b0:	200002f0 	.word	0x200002f0
 80181b4:	08018161 	.word	0x08018161

080181b8 <LCD_GetpPalConvTableUncached>:
 80181b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181bc:	4604      	mov	r4, r0
 80181be:	b318      	cbz	r0, 8018208 <LCD_GetpPalConvTableUncached+0x50>
 80181c0:	6887      	ldr	r7, [r0, #8]
 80181c2:	b31f      	cbz	r7, 801820c <LCD_GetpPalConvTableUncached+0x54>
 80181c4:	4d14      	ldr	r5, [pc, #80]	; (8018218 <LCD_GetpPalConvTableUncached+0x60>)
 80181c6:	6828      	ldr	r0, [r5, #0]
 80181c8:	b320      	cbz	r0, 8018214 <LCD_GetpPalConvTableUncached+0x5c>
 80181ca:	6822      	ldr	r2, [r4, #0]
 80181cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80181d0:	dc1f      	bgt.n	8018212 <LCD_GetpPalConvTableUncached+0x5a>
 80181d2:	4b12      	ldr	r3, [pc, #72]	; (801821c <LCD_GetpPalConvTableUncached+0x64>)
 80181d4:	2600      	movs	r6, #0
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	429a      	cmp	r2, r3
 80181da:	bfa8      	it	ge
 80181dc:	461a      	movge	r2, r3
 80181de:	4690      	mov	r8, r2
 80181e0:	4546      	cmp	r6, r8
 80181e2:	da09      	bge.n	80181f8 <LCD_GetpPalConvTableUncached+0x40>
 80181e4:	f8d5 9000 	ldr.w	r9, [r5]
 80181e8:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80181ec:	f7ff ff58 	bl	80180a0 <LCD_Color2Index>
 80181f0:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 80181f4:	3601      	adds	r6, #1
 80181f6:	e7f3      	b.n	80181e0 <LCD_GetpPalConvTableUncached+0x28>
 80181f8:	4b09      	ldr	r3, [pc, #36]	; (8018220 <LCD_GetpPalConvTableUncached+0x68>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	b10b      	cbz	r3, 8018202 <LCD_GetpPalConvTableUncached+0x4a>
 80181fe:	4620      	mov	r0, r4
 8018200:	4798      	blx	r3
 8018202:	6828      	ldr	r0, [r5, #0]
 8018204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801820c:	4638      	mov	r0, r7
 801820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018212:	2000      	movs	r0, #0
 8018214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018218:	200224b4 	.word	0x200224b4
 801821c:	20000044 	.word	0x20000044
 8018220:	200002f0 	.word	0x200002f0

08018224 <LCD_GetpPalConvTableBM>:
 8018224:	f7ff bfc8 	b.w	80181b8 <LCD_GetpPalConvTableUncached>

08018228 <LCD_InitLUT>:
 8018228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801822c:	4e1d      	ldr	r6, [pc, #116]	; (80182a4 <LCD_InitLUT+0x7c>)
 801822e:	f000 f942 	bl	80184b6 <LCD_GetNumLayers>
 8018232:	2400      	movs	r4, #0
 8018234:	4680      	mov	r8, r0
 8018236:	46b1      	mov	r9, r6
 8018238:	f8df a070 	ldr.w	sl, [pc, #112]	; 80182ac <LCD_InitLUT+0x84>
 801823c:	4544      	cmp	r4, r8
 801823e:	da2d      	bge.n	801829c <LCD_InitLUT+0x74>
 8018240:	4620      	mov	r0, r4
 8018242:	f7fe fd45 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018246:	b338      	cbz	r0, 8018298 <LCD_InitLUT+0x70>
 8018248:	6833      	ldr	r3, [r6, #0]
 801824a:	4620      	mov	r0, r4
 801824c:	f893 b011 	ldrb.w	fp, [r3, #17]
 8018250:	745c      	strb	r4, [r3, #17]
 8018252:	f000 f869 	bl	8018328 <LCD_GetBitsPerPixelEx>
 8018256:	2808      	cmp	r0, #8
 8018258:	dd04      	ble.n	8018264 <LCD_InitLUT+0x3c>
 801825a:	f8d9 3000 	ldr.w	r3, [r9]
 801825e:	f883 b011 	strb.w	fp, [r3, #17]
 8018262:	e019      	b.n	8018298 <LCD_InitLUT+0x70>
 8018264:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8018268:	691a      	ldr	r2, [r3, #16]
 801826a:	4b0f      	ldr	r3, [pc, #60]	; (80182a8 <LCD_InitLUT+0x80>)
 801826c:	429a      	cmp	r2, r3
 801826e:	d0f4      	beq.n	801825a <LCD_InitLUT+0x32>
 8018270:	4620      	mov	r0, r4
 8018272:	2500      	movs	r5, #0
 8018274:	f000 f85b 	bl	801832e <LCD_GetNumColorsEx>
 8018278:	4603      	mov	r3, r0
 801827a:	429d      	cmp	r5, r3
 801827c:	daed      	bge.n	801825a <LCD_InitLUT+0x32>
 801827e:	b2ef      	uxtb	r7, r5
 8018280:	9301      	str	r3, [sp, #4]
 8018282:	3501      	adds	r5, #1
 8018284:	4638      	mov	r0, r7
 8018286:	f7ff ff19 	bl	80180bc <LCD_Index2Color>
 801828a:	4639      	mov	r1, r7
 801828c:	4602      	mov	r2, r0
 801828e:	4620      	mov	r0, r4
 8018290:	f000 fa73 	bl	801877a <LCD_SetLUTEntryEx>
 8018294:	9b01      	ldr	r3, [sp, #4]
 8018296:	e7f0      	b.n	801827a <LCD_InitLUT+0x52>
 8018298:	3401      	adds	r4, #1
 801829a:	e7cf      	b.n	801823c <LCD_InitLUT+0x14>
 801829c:	b003      	add	sp, #12
 801829e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182a2:	bf00      	nop
 80182a4:	20000018 	.word	0x20000018
 80182a8:	08023578 	.word	0x08023578
 80182ac:	2002249c 	.word	0x2002249c

080182b0 <LCD_GetBkColorIndex>:
 80182b0:	4b02      	ldr	r3, [pc, #8]	; (80182bc <LCD_GetBkColorIndex+0xc>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182b6:	6818      	ldr	r0, [r3, #0]
 80182b8:	4770      	bx	lr
 80182ba:	bf00      	nop
 80182bc:	20000018 	.word	0x20000018

080182c0 <LCD_GetColorIndex>:
 80182c0:	4b02      	ldr	r3, [pc, #8]	; (80182cc <LCD_GetColorIndex+0xc>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182c6:	6818      	ldr	r0, [r3, #0]
 80182c8:	4770      	bx	lr
 80182ca:	bf00      	nop
 80182cc:	20000018 	.word	0x20000018

080182d0 <_GetDevProp>:
 80182d0:	2801      	cmp	r0, #1
 80182d2:	b510      	push	{r4, lr}
 80182d4:	460c      	mov	r4, r1
 80182d6:	dc08      	bgt.n	80182ea <_GetDevProp+0x1a>
 80182d8:	f7fe fcfa 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 80182dc:	b128      	cbz	r0, 80182ea <_GetDevProp+0x1a>
 80182de:	68c3      	ldr	r3, [r0, #12]
 80182e0:	4621      	mov	r1, r4
 80182e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182e8:	4718      	bx	r3
 80182ea:	2000      	movs	r0, #0
 80182ec:	bd10      	pop	{r4, pc}

080182ee <_GetMaxValue>:
 80182ee:	b538      	push	{r3, r4, r5, lr}
 80182f0:	4601      	mov	r1, r0
 80182f2:	4605      	mov	r5, r0
 80182f4:	2001      	movs	r0, #1
 80182f6:	f7ff ffeb 	bl	80182d0 <_GetDevProp>
 80182fa:	4604      	mov	r4, r0
 80182fc:	4629      	mov	r1, r5
 80182fe:	2000      	movs	r0, #0
 8018300:	f7ff ffe6 	bl	80182d0 <_GetDevProp>
 8018304:	42a0      	cmp	r0, r4
 8018306:	bfb8      	it	lt
 8018308:	4620      	movlt	r0, r4
 801830a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801830e:	bd38      	pop	{r3, r4, r5, pc}

08018310 <LCD_GetXSizeEx>:
 8018310:	2101      	movs	r1, #1
 8018312:	f7ff bfdd 	b.w	80182d0 <_GetDevProp>

08018316 <LCD_GetYSizeEx>:
 8018316:	2102      	movs	r1, #2
 8018318:	f7ff bfda 	b.w	80182d0 <_GetDevProp>

0801831c <LCD_GetVXSizeEx>:
 801831c:	2103      	movs	r1, #3
 801831e:	f7ff bfd7 	b.w	80182d0 <_GetDevProp>

08018322 <LCD_GetVYSizeEx>:
 8018322:	2104      	movs	r1, #4
 8018324:	f7ff bfd4 	b.w	80182d0 <_GetDevProp>

08018328 <LCD_GetBitsPerPixelEx>:
 8018328:	2108      	movs	r1, #8
 801832a:	f7ff bfd1 	b.w	80182d0 <_GetDevProp>

0801832e <LCD_GetNumColorsEx>:
 801832e:	2109      	movs	r1, #9
 8018330:	f7ff bfce 	b.w	80182d0 <_GetDevProp>

08018334 <LCD_GetMirrorXEx>:
 8018334:	210c      	movs	r1, #12
 8018336:	f7ff bfcb 	b.w	80182d0 <_GetDevProp>

0801833a <LCD_GetMirrorYEx>:
 801833a:	210d      	movs	r1, #13
 801833c:	f7ff bfc8 	b.w	80182d0 <_GetDevProp>

08018340 <LCD_GetSwapXYEx>:
 8018340:	210e      	movs	r1, #14
 8018342:	f7ff bfc5 	b.w	80182d0 <_GetDevProp>
	...

08018348 <LCD_GetXSize>:
 8018348:	4b02      	ldr	r3, [pc, #8]	; (8018354 <LCD_GetXSize+0xc>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	7c58      	ldrb	r0, [r3, #17]
 801834e:	f7ff bfdf 	b.w	8018310 <LCD_GetXSizeEx>
 8018352:	bf00      	nop
 8018354:	20000018 	.word	0x20000018

08018358 <LCD_GetYSize>:
 8018358:	4b02      	ldr	r3, [pc, #8]	; (8018364 <LCD_GetYSize+0xc>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	7c58      	ldrb	r0, [r3, #17]
 801835e:	f7ff bfda 	b.w	8018316 <LCD_GetYSizeEx>
 8018362:	bf00      	nop
 8018364:	20000018 	.word	0x20000018

08018368 <LCD_GetNumColors>:
 8018368:	4b02      	ldr	r3, [pc, #8]	; (8018374 <LCD_GetNumColors+0xc>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	7c58      	ldrb	r0, [r3, #17]
 801836e:	f7ff bfde 	b.w	801832e <LCD_GetNumColorsEx>
 8018372:	bf00      	nop
 8018374:	20000018 	.word	0x20000018

08018378 <GUI_GetBitsPerPixelEx>:
 8018378:	4b03      	ldr	r3, [pc, #12]	; (8018388 <GUI_GetBitsPerPixelEx+0x10>)
 801837a:	2108      	movs	r1, #8
 801837c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018380:	68c3      	ldr	r3, [r0, #12]
 8018382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018384:	4718      	bx	r3
 8018386:	bf00      	nop
 8018388:	2002249c 	.word	0x2002249c

0801838c <LCD_GetPaletteEx>:
 801838c:	b510      	push	{r4, lr}
 801838e:	f7fe fc9f 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018392:	b128      	cbz	r0, 80183a0 <LCD_GetPaletteEx+0x14>
 8018394:	68c3      	ldr	r3, [r0, #12]
 8018396:	2102      	movs	r1, #2
 8018398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801839a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801839e:	4718      	bx	r3
 80183a0:	bd10      	pop	{r4, pc}
	...

080183a4 <LCD_GetPalette>:
 80183a4:	4b02      	ldr	r3, [pc, #8]	; (80183b0 <LCD_GetPalette+0xc>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	7c58      	ldrb	r0, [r3, #17]
 80183aa:	f7ff bfef 	b.w	801838c <LCD_GetPaletteEx>
 80183ae:	bf00      	nop
 80183b0:	20000018 	.word	0x20000018

080183b4 <GUI_GetpfIndex2ColorEx>:
 80183b4:	4b02      	ldr	r3, [pc, #8]	; (80183c0 <GUI_GetpfIndex2ColorEx+0xc>)
 80183b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80183ba:	691b      	ldr	r3, [r3, #16]
 80183bc:	6858      	ldr	r0, [r3, #4]
 80183be:	4770      	bx	lr
 80183c0:	2002249c 	.word	0x2002249c

080183c4 <GUI_GetpfColor2IndexEx>:
 80183c4:	4b02      	ldr	r3, [pc, #8]	; (80183d0 <GUI_GetpfColor2IndexEx+0xc>)
 80183c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80183ca:	691b      	ldr	r3, [r3, #16]
 80183cc:	6818      	ldr	r0, [r3, #0]
 80183ce:	4770      	bx	lr
 80183d0:	2002249c 	.word	0x2002249c

080183d4 <LCD_GetXSizeMax>:
 80183d4:	2001      	movs	r0, #1
 80183d6:	f7ff bf8a 	b.w	80182ee <_GetMaxValue>

080183da <LCD_GetYSizeMax>:
 80183da:	2002      	movs	r0, #2
 80183dc:	f7ff bf87 	b.w	80182ee <_GetMaxValue>

080183e0 <LCD_GetVXSizeMax>:
 80183e0:	2003      	movs	r0, #3
 80183e2:	f7ff bf84 	b.w	80182ee <_GetMaxValue>
	...

080183e8 <LCD_SetDisplaySize>:
 80183e8:	4b01      	ldr	r3, [pc, #4]	; (80183f0 <LCD_SetDisplaySize+0x8>)
 80183ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80183ee:	4770      	bx	lr
 80183f0:	200002fc 	.word	0x200002fc

080183f4 <LCD_GetXSizeDisplay>:
 80183f4:	4b01      	ldr	r3, [pc, #4]	; (80183fc <LCD_GetXSizeDisplay+0x8>)
 80183f6:	6818      	ldr	r0, [r3, #0]
 80183f8:	4770      	bx	lr
 80183fa:	bf00      	nop
 80183fc:	200002fc 	.word	0x200002fc

08018400 <LCD_GetYSizeDisplay>:
 8018400:	4b01      	ldr	r3, [pc, #4]	; (8018408 <LCD_GetYSizeDisplay+0x8>)
 8018402:	6858      	ldr	r0, [r3, #4]
 8018404:	4770      	bx	lr
 8018406:	bf00      	nop
 8018408:	200002fc 	.word	0x200002fc

0801840c <LCD__GetBPP>:
 801840c:	2800      	cmp	r0, #0
 801840e:	d03b      	beq.n	8018488 <LCD__GetBPP+0x7c>
 8018410:	f030 0301 	bics.w	r3, r0, #1
 8018414:	d029      	beq.n	801846a <LCD__GetBPP+0x5e>
 8018416:	f030 0303 	bics.w	r3, r0, #3
 801841a:	d028      	beq.n	801846e <LCD__GetBPP+0x62>
 801841c:	f030 0307 	bics.w	r3, r0, #7
 8018420:	d027      	beq.n	8018472 <LCD__GetBPP+0x66>
 8018422:	f030 030f 	bics.w	r3, r0, #15
 8018426:	d026      	beq.n	8018476 <LCD__GetBPP+0x6a>
 8018428:	f030 031f 	bics.w	r3, r0, #31
 801842c:	d025      	beq.n	801847a <LCD__GetBPP+0x6e>
 801842e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8018432:	d024      	beq.n	801847e <LCD__GetBPP+0x72>
 8018434:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8018438:	f023 0301 	bic.w	r3, r3, #1
 801843c:	b30b      	cbz	r3, 8018482 <LCD__GetBPP+0x76>
 801843e:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8018442:	f023 030f 	bic.w	r3, r3, #15
 8018446:	b1e3      	cbz	r3, 8018482 <LCD__GetBPP+0x76>
 8018448:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 801844c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018450:	b1bb      	cbz	r3, 8018482 <LCD__GetBPP+0x76>
 8018452:	0c03      	lsrs	r3, r0, #16
 8018454:	041b      	lsls	r3, r3, #16
 8018456:	b1a3      	cbz	r3, 8018482 <LCD__GetBPP+0x76>
 8018458:	0c83      	lsrs	r3, r0, #18
 801845a:	049b      	lsls	r3, r3, #18
 801845c:	b19b      	cbz	r3, 8018486 <LCD__GetBPP+0x7a>
 801845e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018462:	bf0c      	ite	eq
 8018464:	2018      	moveq	r0, #24
 8018466:	2020      	movne	r0, #32
 8018468:	4770      	bx	lr
 801846a:	2001      	movs	r0, #1
 801846c:	4770      	bx	lr
 801846e:	2002      	movs	r0, #2
 8018470:	4770      	bx	lr
 8018472:	2003      	movs	r0, #3
 8018474:	4770      	bx	lr
 8018476:	2004      	movs	r0, #4
 8018478:	4770      	bx	lr
 801847a:	2005      	movs	r0, #5
 801847c:	4770      	bx	lr
 801847e:	2008      	movs	r0, #8
 8018480:	4770      	bx	lr
 8018482:	2010      	movs	r0, #16
 8018484:	4770      	bx	lr
 8018486:	2012      	movs	r0, #18
 8018488:	4770      	bx	lr

0801848a <LCD__GetBPPDevice>:
 801848a:	b508      	push	{r3, lr}
 801848c:	f7ff ffbe 	bl	801840c <LCD__GetBPP>
 8018490:	2801      	cmp	r0, #1
 8018492:	d00f      	beq.n	80184b4 <LCD__GetBPPDevice+0x2a>
 8018494:	1e83      	subs	r3, r0, #2
 8018496:	2b06      	cmp	r3, #6
 8018498:	d909      	bls.n	80184ae <LCD__GetBPPDevice+0x24>
 801849a:	f1a0 0309 	sub.w	r3, r0, #9
 801849e:	2b07      	cmp	r3, #7
 80184a0:	d907      	bls.n	80184b2 <LCD__GetBPPDevice+0x28>
 80184a2:	3811      	subs	r0, #17
 80184a4:	280f      	cmp	r0, #15
 80184a6:	bf8c      	ite	hi
 80184a8:	2000      	movhi	r0, #0
 80184aa:	2020      	movls	r0, #32
 80184ac:	bd08      	pop	{r3, pc}
 80184ae:	2008      	movs	r0, #8
 80184b0:	bd08      	pop	{r3, pc}
 80184b2:	2010      	movs	r0, #16
 80184b4:	bd08      	pop	{r3, pc}

080184b6 <LCD_GetNumLayers>:
 80184b6:	b510      	push	{r4, lr}
 80184b8:	2000      	movs	r0, #0
 80184ba:	f7fe fc09 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 80184be:	1c04      	adds	r4, r0, #0
 80184c0:	f04f 0001 	mov.w	r0, #1
 80184c4:	bf18      	it	ne
 80184c6:	2401      	movne	r4, #1
 80184c8:	f7fe fc02 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 80184cc:	b100      	cbz	r0, 80184d0 <LCD_GetNumLayers+0x1a>
 80184ce:	3401      	adds	r4, #1
 80184d0:	4620      	mov	r0, r4
 80184d2:	bd10      	pop	{r4, pc}

080184d4 <LCD_ReadRectEx>:
 80184d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d8:	b087      	sub	sp, #28
 80184da:	4690      	mov	r8, r2
 80184dc:	4607      	mov	r7, r0
 80184de:	460e      	mov	r6, r1
 80184e0:	9303      	str	r3, [sp, #12]
 80184e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80184e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80184e6:	68da      	ldr	r2, [r3, #12]
 80184e8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80184ea:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80184ee:	b96b      	cbnz	r3, 801850c <LCD_ReadRectEx+0x38>
 80184f0:	4b60      	ldr	r3, [pc, #384]	; (8018674 <LCD_ReadRectEx+0x1a0>)
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	7c58      	ldrb	r0, [r3, #17]
 80184f6:	f7ff ff3f 	bl	8018378 <GUI_GetBitsPerPixelEx>
 80184fa:	2808      	cmp	r0, #8
 80184fc:	dd15      	ble.n	801852a <LCD_ReadRectEx+0x56>
 80184fe:	2811      	cmp	r0, #17
 8018500:	bfb4      	ite	lt
 8018502:	f04f 0a02 	movlt.w	sl, #2
 8018506:	f04f 0a04 	movge.w	sl, #4
 801850a:	e010      	b.n	801852e <LCD_ReadRectEx+0x5a>
 801850c:	2101      	movs	r1, #1
 801850e:	a811      	add	r0, sp, #68	; 0x44
 8018510:	4798      	blx	r3
 8018512:	4605      	mov	r5, r0
 8018514:	2800      	cmp	r0, #0
 8018516:	d0eb      	beq.n	80184f0 <LCD_ReadRectEx+0x1c>
 8018518:	9b03      	ldr	r3, [sp, #12]
 801851a:	4632      	mov	r2, r6
 801851c:	9401      	str	r4, [sp, #4]
 801851e:	4639      	mov	r1, r7
 8018520:	9300      	str	r3, [sp, #0]
 8018522:	4643      	mov	r3, r8
 8018524:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018526:	47a8      	blx	r5
 8018528:	e0a0      	b.n	801866c <LCD_ReadRectEx+0x198>
 801852a:	f04f 0a01 	mov.w	sl, #1
 801852e:	1e43      	subs	r3, r0, #1
 8018530:	2500      	movs	r5, #0
 8018532:	9304      	str	r3, [sp, #16]
 8018534:	9b03      	ldr	r3, [sp, #12]
 8018536:	429e      	cmp	r6, r3
 8018538:	f300 8098 	bgt.w	801866c <LCD_ReadRectEx+0x198>
 801853c:	f1ba 0f02 	cmp.w	sl, #2
 8018540:	d009      	beq.n	8018556 <LCD_ReadRectEx+0x82>
 8018542:	f1ba 0f04 	cmp.w	sl, #4
 8018546:	d004      	beq.n	8018552 <LCD_ReadRectEx+0x7e>
 8018548:	f1ba 0f01 	cmp.w	sl, #1
 801854c:	f040 808c 	bne.w	8018668 <LCD_ReadRectEx+0x194>
 8018550:	e003      	b.n	801855a <LCD_ReadRectEx+0x86>
 8018552:	46bb      	mov	fp, r7
 8018554:	e07d      	b.n	8018652 <LCD_ReadRectEx+0x17e>
 8018556:	46bb      	mov	fp, r7
 8018558:	e070      	b.n	801863c <LCD_ReadRectEx+0x168>
 801855a:	9b04      	ldr	r3, [sp, #16]
 801855c:	2b07      	cmp	r3, #7
 801855e:	f200 8083 	bhi.w	8018668 <LCD_ReadRectEx+0x194>
 8018562:	e8df f003 	tbb	[pc, r3]
 8018566:	0a0e      	.short	0x0a0e
 8018568:	04040707 	.word	0x04040707
 801856c:	0404      	.short	0x0404
 801856e:	ebc4 0b07 	rsb	fp, r4, r7
 8018572:	e059      	b.n	8018628 <LCD_ReadRectEx+0x154>
 8018574:	46bb      	mov	fp, r7
 8018576:	230f      	movs	r3, #15
 8018578:	e03b      	b.n	80185f2 <LCD_ReadRectEx+0x11e>
 801857a:	46bb      	mov	fp, r7
 801857c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018580:	e019      	b.n	80185b6 <LCD_ReadRectEx+0xe2>
 8018582:	46bb      	mov	fp, r7
 8018584:	45c3      	cmp	fp, r8
 8018586:	dc6f      	bgt.n	8018668 <LCD_ReadRectEx+0x194>
 8018588:	4632      	mov	r2, r6
 801858a:	4659      	mov	r1, fp
 801858c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801858e:	f10b 0b01 	add.w	fp, fp, #1
 8018592:	47c8      	blx	r9
 8018594:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8018598:	7822      	ldrb	r2, [r4, #0]
 801859a:	412b      	asrs	r3, r5
 801859c:	401a      	ands	r2, r3
 801859e:	f1c5 0307 	rsb	r3, r5, #7
 80185a2:	3501      	adds	r5, #1
 80185a4:	4098      	lsls	r0, r3
 80185a6:	f025 0307 	bic.w	r3, r5, #7
 80185aa:	4310      	orrs	r0, r2
 80185ac:	7020      	strb	r0, [r4, #0]
 80185ae:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 80185b2:	411d      	asrs	r5, r3
 80185b4:	e7e6      	b.n	8018584 <LCD_ReadRectEx+0xb0>
 80185b6:	45c3      	cmp	fp, r8
 80185b8:	dc56      	bgt.n	8018668 <LCD_ReadRectEx+0x194>
 80185ba:	4659      	mov	r1, fp
 80185bc:	4632      	mov	r2, r6
 80185be:	9811      	ldr	r0, [sp, #68]	; 0x44
 80185c0:	f10b 0b01 	add.w	fp, fp, #1
 80185c4:	9305      	str	r3, [sp, #20]
 80185c6:	47c8      	blx	r9
 80185c8:	006a      	lsls	r2, r5, #1
 80185ca:	9b05      	ldr	r3, [sp, #20]
 80185cc:	f894 e000 	ldrb.w	lr, [r4]
 80185d0:	3501      	adds	r5, #1
 80185d2:	fa43 f102 	asr.w	r1, r3, r2
 80185d6:	f1c2 0206 	rsb	r2, r2, #6
 80185da:	ea0e 0101 	and.w	r1, lr, r1
 80185de:	4090      	lsls	r0, r2
 80185e0:	ea41 0200 	orr.w	r2, r1, r0
 80185e4:	7022      	strb	r2, [r4, #0]
 80185e6:	f025 0203 	bic.w	r2, r5, #3
 80185ea:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 80185ee:	4115      	asrs	r5, r2
 80185f0:	e7e1      	b.n	80185b6 <LCD_ReadRectEx+0xe2>
 80185f2:	45c3      	cmp	fp, r8
 80185f4:	dc38      	bgt.n	8018668 <LCD_ReadRectEx+0x194>
 80185f6:	4659      	mov	r1, fp
 80185f8:	4632      	mov	r2, r6
 80185fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80185fc:	f10b 0b01 	add.w	fp, fp, #1
 8018600:	9305      	str	r3, [sp, #20]
 8018602:	47c8      	blx	r9
 8018604:	00aa      	lsls	r2, r5, #2
 8018606:	9b05      	ldr	r3, [sp, #20]
 8018608:	f894 e000 	ldrb.w	lr, [r4]
 801860c:	fa03 f102 	lsl.w	r1, r3, r2
 8018610:	f1c2 0204 	rsb	r2, r2, #4
 8018614:	ea0e 0101 	and.w	r1, lr, r1
 8018618:	4090      	lsls	r0, r2
 801861a:	ea41 0200 	orr.w	r2, r1, r0
 801861e:	7022      	strb	r2, [r4, #0]
 8018620:	442c      	add	r4, r5
 8018622:	f085 0501 	eor.w	r5, r5, #1
 8018626:	e7e4      	b.n	80185f2 <LCD_ReadRectEx+0x11e>
 8018628:	eb04 010b 	add.w	r1, r4, fp
 801862c:	4588      	cmp	r8, r1
 801862e:	db1b      	blt.n	8018668 <LCD_ReadRectEx+0x194>
 8018630:	4632      	mov	r2, r6
 8018632:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018634:	47c8      	blx	r9
 8018636:	f804 0b01 	strb.w	r0, [r4], #1
 801863a:	e7f5      	b.n	8018628 <LCD_ReadRectEx+0x154>
 801863c:	45c3      	cmp	fp, r8
 801863e:	dc13      	bgt.n	8018668 <LCD_ReadRectEx+0x194>
 8018640:	4659      	mov	r1, fp
 8018642:	4632      	mov	r2, r6
 8018644:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018646:	f10b 0b01 	add.w	fp, fp, #1
 801864a:	47c8      	blx	r9
 801864c:	f824 0b02 	strh.w	r0, [r4], #2
 8018650:	e7f4      	b.n	801863c <LCD_ReadRectEx+0x168>
 8018652:	45c3      	cmp	fp, r8
 8018654:	dc08      	bgt.n	8018668 <LCD_ReadRectEx+0x194>
 8018656:	4659      	mov	r1, fp
 8018658:	4632      	mov	r2, r6
 801865a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801865c:	f10b 0b01 	add.w	fp, fp, #1
 8018660:	47c8      	blx	r9
 8018662:	f844 0b04 	str.w	r0, [r4], #4
 8018666:	e7f4      	b.n	8018652 <LCD_ReadRectEx+0x17e>
 8018668:	3601      	adds	r6, #1
 801866a:	e763      	b.n	8018534 <LCD_ReadRectEx+0x60>
 801866c:	b007      	add	sp, #28
 801866e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018672:	bf00      	nop
 8018674:	20000018 	.word	0x20000018

08018678 <GUI_ReadRectEx>:
 8018678:	b4f0      	push	{r4, r5, r6, r7}
 801867a:	4d16      	ldr	r5, [pc, #88]	; (80186d4 <GUI_ReadRectEx+0x5c>)
 801867c:	9e04      	ldr	r6, [sp, #16]
 801867e:	682d      	ldr	r5, [r5, #0]
 8018680:	9c05      	ldr	r4, [sp, #20]
 8018682:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8018686:	42b8      	cmp	r0, r7
 8018688:	bfb8      	it	lt
 801868a:	4638      	movlt	r0, r7
 801868c:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8018690:	42ba      	cmp	r2, r7
 8018692:	bfa8      	it	ge
 8018694:	463a      	movge	r2, r7
 8018696:	4290      	cmp	r0, r2
 8018698:	dc1a      	bgt.n	80186d0 <GUI_ReadRectEx+0x58>
 801869a:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 801869e:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 80186a2:	42b9      	cmp	r1, r7
 80186a4:	bfb8      	it	lt
 80186a6:	4639      	movlt	r1, r7
 80186a8:	42ab      	cmp	r3, r5
 80186aa:	bfa8      	it	ge
 80186ac:	462b      	movge	r3, r5
 80186ae:	428b      	cmp	r3, r1
 80186b0:	db0e      	blt.n	80186d0 <GUI_ReadRectEx+0x58>
 80186b2:	68e5      	ldr	r5, [r4, #12]
 80186b4:	682d      	ldr	r5, [r5, #0]
 80186b6:	f035 0504 	bics.w	r5, r5, #4
 80186ba:	d104      	bne.n	80186c6 <GUI_ReadRectEx+0x4e>
 80186bc:	9405      	str	r4, [sp, #20]
 80186be:	9604      	str	r6, [sp, #16]
 80186c0:	bcf0      	pop	{r4, r5, r6, r7}
 80186c2:	f7ff bf07 	b.w	80184d4 <LCD_ReadRectEx>
 80186c6:	6825      	ldr	r5, [r4, #0]
 80186c8:	2d00      	cmp	r5, #0
 80186ca:	d0f7      	beq.n	80186bc <GUI_ReadRectEx+0x44>
 80186cc:	462c      	mov	r4, r5
 80186ce:	e7f0      	b.n	80186b2 <GUI_ReadRectEx+0x3a>
 80186d0:	bcf0      	pop	{r4, r5, r6, r7}
 80186d2:	4770      	bx	lr
 80186d4:	20000018 	.word	0x20000018

080186d8 <LCD_SelectLCD>:
 80186d8:	4b0d      	ldr	r3, [pc, #52]	; (8018710 <LCD_SelectLCD+0x38>)
 80186da:	681a      	ldr	r2, [r3, #0]
 80186dc:	b510      	push	{r4, lr}
 80186de:	7c51      	ldrb	r1, [r2, #17]
 80186e0:	461c      	mov	r4, r3
 80186e2:	4a0c      	ldr	r2, [pc, #48]	; (8018714 <LCD_SelectLCD+0x3c>)
 80186e4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80186e8:	b140      	cbz	r0, 80186fc <LCD_SelectLCD+0x24>
 80186ea:	68c3      	ldr	r3, [r0, #12]
 80186ec:	b113      	cbz	r3, 80186f4 <LCD_SelectLCD+0x1c>
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	2b04      	cmp	r3, #4
 80186f2:	d001      	beq.n	80186f8 <LCD_SelectLCD+0x20>
 80186f4:	6800      	ldr	r0, [r0, #0]
 80186f6:	e7f7      	b.n	80186e8 <LCD_SelectLCD+0x10>
 80186f8:	f7fe fb22 	bl	8016d40 <GUI_DEVICE_Unlink>
 80186fc:	6823      	ldr	r3, [r4, #0]
 80186fe:	2200      	movs	r2, #0
 8018700:	661a      	str	r2, [r3, #96]	; 0x60
 8018702:	f103 0208 	add.w	r2, r3, #8
 8018706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801870a:	615a      	str	r2, [r3, #20]
 801870c:	f7ff bc68 	b.w	8017fe0 <LCD_SetClipRectMax>
 8018710:	20000018 	.word	0x20000018
 8018714:	2002249c 	.word	0x2002249c

08018718 <LCD_GetPosEx>:
 8018718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801871a:	460c      	mov	r4, r1
 801871c:	4615      	mov	r5, r2
 801871e:	f7fe fad7 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018722:	9001      	str	r0, [sp, #4]
 8018724:	b908      	cbnz	r0, 801872a <LCD_GetPosEx+0x12>
 8018726:	2001      	movs	r0, #1
 8018728:	e00d      	b.n	8018746 <LCD_GetPosEx+0x2e>
 801872a:	68c3      	ldr	r3, [r0, #12]
 801872c:	2104      	movs	r1, #4
 801872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018730:	eb0d 0001 	add.w	r0, sp, r1
 8018734:	4798      	blx	r3
 8018736:	4603      	mov	r3, r0
 8018738:	2800      	cmp	r0, #0
 801873a:	d0f4      	beq.n	8018726 <LCD_GetPosEx+0xe>
 801873c:	9801      	ldr	r0, [sp, #4]
 801873e:	462a      	mov	r2, r5
 8018740:	4621      	mov	r1, r4
 8018742:	4798      	blx	r3
 8018744:	2000      	movs	r0, #0
 8018746:	b003      	add	sp, #12
 8018748:	bd30      	pop	{r4, r5, pc}

0801874a <LCD_SetDevFunc>:
 801874a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801874c:	460c      	mov	r4, r1
 801874e:	4615      	mov	r5, r2
 8018750:	f7fe fabe 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018754:	9001      	str	r0, [sp, #4]
 8018756:	b908      	cbnz	r0, 801875c <LCD_SetDevFunc+0x12>
 8018758:	2001      	movs	r0, #1
 801875a:	e00c      	b.n	8018776 <LCD_SetDevFunc+0x2c>
 801875c:	68c3      	ldr	r3, [r0, #12]
 801875e:	2116      	movs	r1, #22
 8018760:	a801      	add	r0, sp, #4
 8018762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018764:	4798      	blx	r3
 8018766:	4603      	mov	r3, r0
 8018768:	2800      	cmp	r0, #0
 801876a:	d0f5      	beq.n	8018758 <LCD_SetDevFunc+0xe>
 801876c:	9801      	ldr	r0, [sp, #4]
 801876e:	462a      	mov	r2, r5
 8018770:	4621      	mov	r1, r4
 8018772:	4798      	blx	r3
 8018774:	2000      	movs	r0, #0
 8018776:	b003      	add	sp, #12
 8018778:	bd30      	pop	{r4, r5, pc}

0801877a <LCD_SetLUTEntryEx>:
 801877a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801877c:	460c      	mov	r4, r1
 801877e:	4615      	mov	r5, r2
 8018780:	f7fe faa6 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018784:	9001      	str	r0, [sp, #4]
 8018786:	b908      	cbnz	r0, 801878c <LCD_SetLUTEntryEx+0x12>
 8018788:	2001      	movs	r0, #1
 801878a:	e00c      	b.n	80187a6 <LCD_SetLUTEntryEx+0x2c>
 801878c:	68c3      	ldr	r3, [r0, #12]
 801878e:	2110      	movs	r1, #16
 8018790:	a801      	add	r0, sp, #4
 8018792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018794:	4798      	blx	r3
 8018796:	4603      	mov	r3, r0
 8018798:	2800      	cmp	r0, #0
 801879a:	d0f5      	beq.n	8018788 <LCD_SetLUTEntryEx+0xe>
 801879c:	9801      	ldr	r0, [sp, #4]
 801879e:	462a      	mov	r2, r5
 80187a0:	4621      	mov	r1, r4
 80187a2:	4798      	blx	r3
 80187a4:	2000      	movs	r0, #0
 80187a6:	b003      	add	sp, #12
 80187a8:	bd30      	pop	{r4, r5, pc}

080187aa <LCD_SetPosEx>:
 80187aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187ac:	460c      	mov	r4, r1
 80187ae:	4615      	mov	r5, r2
 80187b0:	f7fe fa8e 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 80187b4:	9001      	str	r0, [sp, #4]
 80187b6:	b908      	cbnz	r0, 80187bc <LCD_SetPosEx+0x12>
 80187b8:	2001      	movs	r0, #1
 80187ba:	e00c      	b.n	80187d6 <LCD_SetPosEx+0x2c>
 80187bc:	68c3      	ldr	r3, [r0, #12]
 80187be:	2103      	movs	r1, #3
 80187c0:	a801      	add	r0, sp, #4
 80187c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187c4:	4798      	blx	r3
 80187c6:	4603      	mov	r3, r0
 80187c8:	2800      	cmp	r0, #0
 80187ca:	d0f5      	beq.n	80187b8 <LCD_SetPosEx+0xe>
 80187cc:	9801      	ldr	r0, [sp, #4]
 80187ce:	462a      	mov	r2, r5
 80187d0:	4621      	mov	r1, r4
 80187d2:	4798      	blx	r3
 80187d4:	2000      	movs	r0, #0
 80187d6:	b003      	add	sp, #12
 80187d8:	bd30      	pop	{r4, r5, pc}

080187da <LCD_SetSizeEx>:
 80187da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187dc:	460c      	mov	r4, r1
 80187de:	4615      	mov	r5, r2
 80187e0:	f7fe fa76 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 80187e4:	9001      	str	r0, [sp, #4]
 80187e6:	b908      	cbnz	r0, 80187ec <LCD_SetSizeEx+0x12>
 80187e8:	2001      	movs	r0, #1
 80187ea:	e00c      	b.n	8018806 <LCD_SetSizeEx+0x2c>
 80187ec:	68c3      	ldr	r3, [r0, #12]
 80187ee:	210b      	movs	r1, #11
 80187f0:	a801      	add	r0, sp, #4
 80187f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f4:	4798      	blx	r3
 80187f6:	4603      	mov	r3, r0
 80187f8:	2800      	cmp	r0, #0
 80187fa:	d0f5      	beq.n	80187e8 <LCD_SetSizeEx+0xe>
 80187fc:	9801      	ldr	r0, [sp, #4]
 80187fe:	462a      	mov	r2, r5
 8018800:	4621      	mov	r1, r4
 8018802:	4798      	blx	r3
 8018804:	2000      	movs	r0, #0
 8018806:	b003      	add	sp, #12
 8018808:	bd30      	pop	{r4, r5, pc}

0801880a <LCD_SetVRAMAddrEx>:
 801880a:	b513      	push	{r0, r1, r4, lr}
 801880c:	460c      	mov	r4, r1
 801880e:	f7fe fa5f 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018812:	9001      	str	r0, [sp, #4]
 8018814:	b908      	cbnz	r0, 801881a <LCD_SetVRAMAddrEx+0x10>
 8018816:	2001      	movs	r0, #1
 8018818:	e00b      	b.n	8018832 <LCD_SetVRAMAddrEx+0x28>
 801881a:	68c3      	ldr	r3, [r0, #12]
 801881c:	2109      	movs	r1, #9
 801881e:	a801      	add	r0, sp, #4
 8018820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018822:	4798      	blx	r3
 8018824:	4603      	mov	r3, r0
 8018826:	2800      	cmp	r0, #0
 8018828:	d0f5      	beq.n	8018816 <LCD_SetVRAMAddrEx+0xc>
 801882a:	9801      	ldr	r0, [sp, #4]
 801882c:	4621      	mov	r1, r4
 801882e:	4798      	blx	r3
 8018830:	2000      	movs	r0, #0
 8018832:	b002      	add	sp, #8
 8018834:	bd10      	pop	{r4, pc}

08018836 <LCD_SetVSizeEx>:
 8018836:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018838:	460c      	mov	r4, r1
 801883a:	4615      	mov	r5, r2
 801883c:	f7fe fa48 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 8018840:	9001      	str	r0, [sp, #4]
 8018842:	b908      	cbnz	r0, 8018848 <LCD_SetVSizeEx+0x12>
 8018844:	2001      	movs	r0, #1
 8018846:	e00c      	b.n	8018862 <LCD_SetVSizeEx+0x2c>
 8018848:	68c3      	ldr	r3, [r0, #12]
 801884a:	210a      	movs	r1, #10
 801884c:	a801      	add	r0, sp, #4
 801884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018850:	4798      	blx	r3
 8018852:	4603      	mov	r3, r0
 8018854:	2800      	cmp	r0, #0
 8018856:	d0f5      	beq.n	8018844 <LCD_SetVSizeEx+0xe>
 8018858:	9801      	ldr	r0, [sp, #4]
 801885a:	462a      	mov	r2, r5
 801885c:	4621      	mov	r1, r4
 801885e:	4798      	blx	r3
 8018860:	2000      	movs	r0, #0
 8018862:	b003      	add	sp, #12
 8018864:	bd30      	pop	{r4, r5, pc}
	...

08018868 <LCD_UpdateColorIndices>:
 8018868:	b510      	push	{r4, lr}
 801886a:	4c07      	ldr	r4, [pc, #28]	; (8018888 <LCD_UpdateColorIndices+0x20>)
 801886c:	6823      	ldr	r3, [r4, #0]
 801886e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018870:	f7ff fc16 	bl	80180a0 <LCD_Color2Index>
 8018874:	f7ff fc30 	bl	80180d8 <LCD_SetColorIndex>
 8018878:	6823      	ldr	r3, [r4, #0]
 801887a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801887c:	f7ff fc10 	bl	80180a0 <LCD_Color2Index>
 8018880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018884:	f7ff bc44 	b.w	8018110 <LCD_SetBkColorIndex>
 8018888:	20000018 	.word	0x20000018

0801888c <_GetRect>:
 801888c:	6882      	ldr	r2, [r0, #8]
 801888e:	2300      	movs	r3, #0
 8018890:	800b      	strh	r3, [r1, #0]
 8018892:	804b      	strh	r3, [r1, #2]
 8018894:	6993      	ldr	r3, [r2, #24]
 8018896:	3b01      	subs	r3, #1
 8018898:	808b      	strh	r3, [r1, #4]
 801889a:	69d3      	ldr	r3, [r2, #28]
 801889c:	3b01      	subs	r3, #1
 801889e:	80cb      	strh	r3, [r1, #6]
 80188a0:	4770      	bx	lr

080188a2 <_SetPixelIndex>:
 80188a2:	b510      	push	{r4, lr}
 80188a4:	6884      	ldr	r4, [r0, #8]
 80188a6:	6a20      	ldr	r0, [r4, #32]
 80188a8:	fb00 1202 	mla	r2, r0, r2, r1
 80188ac:	6821      	ldr	r1, [r4, #0]
 80188ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80188b2:	bd10      	pop	{r4, pc}

080188b4 <_GetPixelIndex>:
 80188b4:	6880      	ldr	r0, [r0, #8]
 80188b6:	6a03      	ldr	r3, [r0, #32]
 80188b8:	fb03 1202 	mla	r2, r3, r2, r1
 80188bc:	6803      	ldr	r3, [r0, #0]
 80188be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80188c2:	4770      	bx	lr

080188c4 <_XorPixel>:
 80188c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188c8:	4604      	mov	r4, r0
 80188ca:	460d      	mov	r5, r1
 80188cc:	4616      	mov	r6, r2
 80188ce:	f7ff fff1 	bl	80188b4 <_GetPixelIndex>
 80188d2:	6923      	ldr	r3, [r4, #16]
 80188d4:	4607      	mov	r7, r0
 80188d6:	689b      	ldr	r3, [r3, #8]
 80188d8:	4798      	blx	r3
 80188da:	4632      	mov	r2, r6
 80188dc:	ea87 0300 	eor.w	r3, r7, r0
 80188e0:	4629      	mov	r1, r5
 80188e2:	4620      	mov	r0, r4
 80188e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188e8:	f7ff bfdb 	b.w	80188a2 <_SetPixelIndex>

080188ec <_FillRect>:
 80188ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80188f0:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80188f4:	468a      	mov	sl, r1
 80188f6:	4615      	mov	r5, r2
 80188f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80188fa:	f8d9 6034 	ldr.w	r6, [r9, #52]	; 0x34
 80188fe:	f8df e134 	ldr.w	lr, [pc, #308]	; 8018a34 <_FillRect+0x148>
 8018902:	b146      	cbz	r6, 8018916 <_FillRect+0x2a>
 8018904:	f8de 5000 	ldr.w	r5, [lr]
 8018908:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 801890a:	682d      	ldr	r5, [r5, #0]
 801890c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8018910:	6980      	ldr	r0, [r0, #24]
 8018912:	47b0      	blx	r6
 8018914:	e08b      	b.n	8018a2e <_FillRect+0x142>
 8018916:	1a5b      	subs	r3, r3, r1
 8018918:	f8de 1000 	ldr.w	r1, [lr]
 801891c:	1aa4      	subs	r4, r4, r2
 801891e:	f8d9 8020 	ldr.w	r8, [r9, #32]
 8018922:	7c0a      	ldrb	r2, [r1, #16]
 8018924:	1c5f      	adds	r7, r3, #1
 8018926:	1c66      	adds	r6, r4, #1
 8018928:	f012 0201 	ands.w	r2, r2, #1
 801892c:	d022      	beq.n	8018974 <_FillRect+0x88>
 801892e:	6903      	ldr	r3, [r0, #16]
 8018930:	689b      	ldr	r3, [r3, #8]
 8018932:	4798      	blx	r3
 8018934:	2f00      	cmp	r7, #0
 8018936:	d07a      	beq.n	8018a2e <_FillRect+0x142>
 8018938:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801893c:	f06f 0203 	mvn.w	r2, #3
 8018940:	fb03 a505 	mla	r5, r3, r5, sl
 8018944:	fb02 f208 	mul.w	r2, r2, r8
 8018948:	fb08 5404 	mla	r4, r8, r4, r5
 801894c:	00a4      	lsls	r4, r4, #2
 801894e:	2e00      	cmp	r6, #0
 8018950:	d06d      	beq.n	8018a2e <_FillRect+0x142>
 8018952:	3e01      	subs	r6, #1
 8018954:	4623      	mov	r3, r4
 8018956:	463d      	mov	r5, r7
 8018958:	f8d9 e000 	ldr.w	lr, [r9]
 801895c:	3d01      	subs	r5, #1
 801895e:	f853 100e 	ldr.w	r1, [r3, lr]
 8018962:	ea81 0100 	eor.w	r1, r1, r0
 8018966:	f843 100e 	str.w	r1, [r3, lr]
 801896a:	f103 0304 	add.w	r3, r3, #4
 801896e:	d1f3      	bne.n	8018958 <_FillRect+0x6c>
 8018970:	4414      	add	r4, r2
 8018972:	e7ec      	b.n	801894e <_FillRect+0x62>
 8018974:	f8d9 0000 	ldr.w	r0, [r9]
 8018978:	fb08 a505 	mla	r5, r8, r5, sl
 801897c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 801897e:	2f0f      	cmp	r7, #15
 8018980:	eb00 0a85 	add.w	sl, r0, r5, lsl #2
 8018984:	6808      	ldr	r0, [r1, #0]
 8018986:	d93f      	bls.n	8018a08 <_FillRect+0x11c>
 8018988:	f1a3 050f 	sub.w	r5, r3, #15
 801898c:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 8018990:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8018994:	46b4      	mov	ip, r6
 8018996:	092d      	lsrs	r5, r5, #4
 8018998:	fb0e a101 	mla	r1, lr, r1, sl
 801899c:	4692      	mov	sl, r2
 801899e:	3501      	adds	r5, #1
 80189a0:	01ad      	lsls	r5, r5, #6
 80189a2:	f1bc 0f00 	cmp.w	ip, #0
 80189a6:	d02d      	beq.n	8018a04 <_FillRect+0x118>
 80189a8:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80189ac:	463a      	mov	r2, r7
 80189ae:	3a10      	subs	r2, #16
 80189b0:	f843 0c40 	str.w	r0, [r3, #-64]
 80189b4:	f843 0c3c 	str.w	r0, [r3, #-60]
 80189b8:	3340      	adds	r3, #64	; 0x40
 80189ba:	2a0f      	cmp	r2, #15
 80189bc:	f843 0c78 	str.w	r0, [r3, #-120]
 80189c0:	f843 0c74 	str.w	r0, [r3, #-116]
 80189c4:	f843 0c70 	str.w	r0, [r3, #-112]
 80189c8:	f843 0c6c 	str.w	r0, [r3, #-108]
 80189cc:	f843 0c68 	str.w	r0, [r3, #-104]
 80189d0:	f843 0c64 	str.w	r0, [r3, #-100]
 80189d4:	f843 0c60 	str.w	r0, [r3, #-96]
 80189d8:	f843 0c5c 	str.w	r0, [r3, #-92]
 80189dc:	f843 0c58 	str.w	r0, [r3, #-88]
 80189e0:	f843 0c54 	str.w	r0, [r3, #-84]
 80189e4:	f843 0c50 	str.w	r0, [r3, #-80]
 80189e8:	f843 0c4c 	str.w	r0, [r3, #-76]
 80189ec:	f843 0c48 	str.w	r0, [r3, #-72]
 80189f0:	f843 0c44 	str.w	r0, [r3, #-68]
 80189f4:	d8db      	bhi.n	80189ae <_FillRect+0xc2>
 80189f6:	eb01 0a05 	add.w	sl, r1, r5
 80189fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80189fe:	ebce 0101 	rsb	r1, lr, r1
 8018a02:	e7ce      	b.n	80189a2 <_FillRect+0xb6>
 8018a04:	f007 070f 	and.w	r7, r7, #15
 8018a08:	b18f      	cbz	r7, 8018a2e <_FillRect+0x142>
 8018a0a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8018a0e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8018a12:	00bb      	lsls	r3, r7, #2
 8018a14:	fb08 a404 	mla	r4, r8, r4, sl
 8018a18:	b14e      	cbz	r6, 8018a2e <_FillRect+0x142>
 8018a1a:	4622      	mov	r2, r4
 8018a1c:	1919      	adds	r1, r3, r4
 8018a1e:	f842 0b04 	str.w	r0, [r2], #4
 8018a22:	428a      	cmp	r2, r1
 8018a24:	d1fb      	bne.n	8018a1e <_FillRect+0x132>
 8018a26:	3e01      	subs	r6, #1
 8018a28:	ebc8 0404 	rsb	r4, r8, r4
 8018a2c:	e7f4      	b.n	8018a18 <_FillRect+0x12c>
 8018a2e:	b002      	add	sp, #8
 8018a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a34:	20000018 	.word	0x20000018

08018a38 <_DrawHLine>:
 8018a38:	b507      	push	{r0, r1, r2, lr}
 8018a3a:	9200      	str	r2, [sp, #0]
 8018a3c:	f7ff ff56 	bl	80188ec <_FillRect>
 8018a40:	b003      	add	sp, #12
 8018a42:	f85d fb04 	ldr.w	pc, [sp], #4

08018a46 <_DrawVLine>:
 8018a46:	b507      	push	{r0, r1, r2, lr}
 8018a48:	9300      	str	r3, [sp, #0]
 8018a4a:	460b      	mov	r3, r1
 8018a4c:	f7ff ff4e 	bl	80188ec <_FillRect>
 8018a50:	b003      	add	sp, #12
 8018a52:	f85d fb04 	ldr.w	pc, [sp], #4

08018a56 <_GetDevProp>:
 8018a56:	3901      	subs	r1, #1
 8018a58:	6883      	ldr	r3, [r0, #8]
 8018a5a:	290d      	cmp	r1, #13
 8018a5c:	d814      	bhi.n	8018a88 <_GetDevProp+0x32>
 8018a5e:	e8df f001 	tbb	[pc, r1]
 8018a62:	0b09      	.short	0x0b09
 8018a64:	13130f0d 	.word	0x13130f0d
 8018a68:	11071613 	.word	0x11071613
 8018a6c:	07070711 	.word	0x07070711
 8018a70:	2000      	movs	r0, #0
 8018a72:	4770      	bx	lr
 8018a74:	6918      	ldr	r0, [r3, #16]
 8018a76:	4770      	bx	lr
 8018a78:	6958      	ldr	r0, [r3, #20]
 8018a7a:	4770      	bx	lr
 8018a7c:	6998      	ldr	r0, [r3, #24]
 8018a7e:	4770      	bx	lr
 8018a80:	69d8      	ldr	r0, [r3, #28]
 8018a82:	4770      	bx	lr
 8018a84:	2001      	movs	r0, #1
 8018a86:	4770      	bx	lr
 8018a88:	f04f 30ff 	mov.w	r0, #4294967295
 8018a8c:	4770      	bx	lr
 8018a8e:	2020      	movs	r0, #32
 8018a90:	4770      	bx	lr
	...

08018a94 <_GetDevData>:
 8018a94:	2901      	cmp	r1, #1
 8018a96:	4802      	ldr	r0, [pc, #8]	; (8018aa0 <_GetDevData+0xc>)
 8018a98:	bf18      	it	ne
 8018a9a:	2000      	movne	r0, #0
 8018a9c:	4770      	bx	lr
 8018a9e:	bf00      	nop
 8018aa0:	080234e4 	.word	0x080234e4

08018aa4 <_ReadRect>:
 8018aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aa8:	6887      	ldr	r7, [r0, #8]
 8018aaa:	ebc1 0e03 	rsb	lr, r1, r3
 8018aae:	3301      	adds	r3, #1
 8018ab0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018ab2:	6a3d      	ldr	r5, [r7, #32]
 8018ab4:	f04f 0c00 	mov.w	ip, #0
 8018ab8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018aba:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8018abe:	fb05 1502 	mla	r5, r5, r2, r1
 8018ac2:	1a59      	subs	r1, r3, r1
 8018ac4:	3801      	subs	r0, #1
 8018ac6:	ebc6 0585 	rsb	r5, r6, r5, lsl #2
 8018aca:	0089      	lsls	r1, r1, #2
 8018acc:	ebce 0000 	rsb	r0, lr, r0
 8018ad0:	0080      	lsls	r0, r0, #2
 8018ad2:	f10e 0801 	add.w	r8, lr, #1
 8018ad6:	46b1      	mov	r9, r6
 8018ad8:	eb0c 0a05 	add.w	sl, ip, r5
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	eb09 0b0a 	add.w	fp, r9, sl
 8018ae2:	f1b8 0801 	subs.w	r8, r8, #1
 8018ae6:	f85b 3003 	ldr.w	r3, [fp, r3]
 8018aea:	f849 3b04 	str.w	r3, [r9], #4
 8018aee:	d1f5      	bne.n	8018adc <_ReadRect+0x38>
 8018af0:	3201      	adds	r2, #1
 8018af2:	440e      	add	r6, r1
 8018af4:	4484      	add	ip, r0
 8018af6:	1e53      	subs	r3, r2, #1
 8018af8:	429c      	cmp	r4, r3
 8018afa:	dcea      	bgt.n	8018ad2 <_ReadRect+0x2e>
 8018afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b00 <_GetDevFunc>:
 8018b00:	3901      	subs	r1, #1
 8018b02:	2928      	cmp	r1, #40	; 0x28
 8018b04:	d848      	bhi.n	8018b98 <_GetDevFunc+0x98>
 8018b06:	e8df f001 	tbb	[pc, r1]
 8018b0a:	1f45      	.short	0x1f45
 8018b0c:	21471d1b 	.word	0x21471d1b
 8018b10:	17494747 	.word	0x17494747
 8018b14:	25472319 	.word	0x25472319
 8018b18:	47474727 	.word	0x47474727
 8018b1c:	332d2b29 	.word	0x332d2b29
 8018b20:	47354747 	.word	0x47354747
 8018b24:	47474747 	.word	0x47474747
 8018b28:	312f3947 	.word	0x312f3947
 8018b2c:	473d4741 	.word	0x473d4741
 8018b30:	4747      	.short	0x4747
 8018b32:	15          	.byte	0x15
 8018b33:	00          	.byte	0x00
 8018b34:	481a      	ldr	r0, [pc, #104]	; (8018ba0 <_GetDevFunc+0xa0>)
 8018b36:	4770      	bx	lr
 8018b38:	481a      	ldr	r0, [pc, #104]	; (8018ba4 <_GetDevFunc+0xa4>)
 8018b3a:	4770      	bx	lr
 8018b3c:	481a      	ldr	r0, [pc, #104]	; (8018ba8 <_GetDevFunc+0xa8>)
 8018b3e:	4770      	bx	lr
 8018b40:	481a      	ldr	r0, [pc, #104]	; (8018bac <_GetDevFunc+0xac>)
 8018b42:	4770      	bx	lr
 8018b44:	481a      	ldr	r0, [pc, #104]	; (8018bb0 <_GetDevFunc+0xb0>)
 8018b46:	4770      	bx	lr
 8018b48:	481a      	ldr	r0, [pc, #104]	; (8018bb4 <_GetDevFunc+0xb4>)
 8018b4a:	4770      	bx	lr
 8018b4c:	481a      	ldr	r0, [pc, #104]	; (8018bb8 <_GetDevFunc+0xb8>)
 8018b4e:	4770      	bx	lr
 8018b50:	481a      	ldr	r0, [pc, #104]	; (8018bbc <_GetDevFunc+0xbc>)
 8018b52:	4770      	bx	lr
 8018b54:	481a      	ldr	r0, [pc, #104]	; (8018bc0 <_GetDevFunc+0xc0>)
 8018b56:	4770      	bx	lr
 8018b58:	481a      	ldr	r0, [pc, #104]	; (8018bc4 <_GetDevFunc+0xc4>)
 8018b5a:	4770      	bx	lr
 8018b5c:	481a      	ldr	r0, [pc, #104]	; (8018bc8 <_GetDevFunc+0xc8>)
 8018b5e:	4770      	bx	lr
 8018b60:	481a      	ldr	r0, [pc, #104]	; (8018bcc <_GetDevFunc+0xcc>)
 8018b62:	4770      	bx	lr
 8018b64:	481a      	ldr	r0, [pc, #104]	; (8018bd0 <_GetDevFunc+0xd0>)
 8018b66:	4770      	bx	lr
 8018b68:	481a      	ldr	r0, [pc, #104]	; (8018bd4 <_GetDevFunc+0xd4>)
 8018b6a:	4770      	bx	lr
 8018b6c:	481a      	ldr	r0, [pc, #104]	; (8018bd8 <_GetDevFunc+0xd8>)
 8018b6e:	4770      	bx	lr
 8018b70:	481a      	ldr	r0, [pc, #104]	; (8018bdc <_GetDevFunc+0xdc>)
 8018b72:	4770      	bx	lr
 8018b74:	6803      	ldr	r3, [r0, #0]
 8018b76:	689b      	ldr	r3, [r3, #8]
 8018b78:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018b7a:	4770      	bx	lr
 8018b7c:	6803      	ldr	r3, [r0, #0]
 8018b7e:	689b      	ldr	r3, [r3, #8]
 8018b80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018b82:	4770      	bx	lr
 8018b84:	6803      	ldr	r3, [r0, #0]
 8018b86:	689b      	ldr	r3, [r3, #8]
 8018b88:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8018b8a:	4770      	bx	lr
 8018b8c:	6803      	ldr	r3, [r0, #0]
 8018b8e:	689b      	ldr	r3, [r3, #8]
 8018b90:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018b92:	4770      	bx	lr
 8018b94:	4812      	ldr	r0, [pc, #72]	; (8018be0 <_GetDevFunc+0xe0>)
 8018b96:	4770      	bx	lr
 8018b98:	2000      	movs	r0, #0
 8018b9a:	4770      	bx	lr
 8018b9c:	4811      	ldr	r0, [pc, #68]	; (8018be4 <_GetDevFunc+0xe4>)
 8018b9e:	4770      	bx	lr
 8018ba0:	080192ad 	.word	0x080192ad
 8018ba4:	080194bb 	.word	0x080194bb
 8018ba8:	08019479 	.word	0x08019479
 8018bac:	0801937f 	.word	0x0801937f
 8018bb0:	08019291 	.word	0x08019291
 8018bb4:	0801932d 	.word	0x0801932d
 8018bb8:	08019305 	.word	0x08019305
 8018bbc:	080192eb 	.word	0x080192eb
 8018bc0:	08018c35 	.word	0x08018c35
 8018bc4:	08018c2b 	.word	0x08018c2b
 8018bc8:	08018c15 	.word	0x08018c15
 8018bcc:	08018bff 	.word	0x08018bff
 8018bd0:	08018be9 	.word	0x08018be9
 8018bd4:	0801922d 	.word	0x0801922d
 8018bd8:	080192c5 	.word	0x080192c5
 8018bdc:	080191df 	.word	0x080191df
 8018be0:	08018aa5 	.word	0x08018aa5
 8018be4:	08019355 	.word	0x08019355

08018be8 <_SetChroma>:
 8018be8:	b507      	push	{r0, r1, r2, lr}
 8018bea:	e88d 0006 	stmia.w	sp, {r1, r2}
 8018bee:	466a      	mov	r2, sp
 8018bf0:	210d      	movs	r1, #13
 8018bf2:	6980      	ldr	r0, [r0, #24]
 8018bf4:	f7fc f80e 	bl	8014c14 <LCD_X_DisplayDriver>
 8018bf8:	b003      	add	sp, #12
 8018bfa:	f85d fb04 	ldr.w	pc, [sp], #4

08018bfe <_SetChromaMode>:
 8018bfe:	b507      	push	{r0, r1, r2, lr}
 8018c00:	aa02      	add	r2, sp, #8
 8018c02:	6980      	ldr	r0, [r0, #24]
 8018c04:	f842 1d04 	str.w	r1, [r2, #-4]!
 8018c08:	210c      	movs	r1, #12
 8018c0a:	f7fc f803 	bl	8014c14 <LCD_X_DisplayDriver>
 8018c0e:	b003      	add	sp, #12
 8018c10:	f85d fb04 	ldr.w	pc, [sp], #4

08018c14 <_SetAlphaMode>:
 8018c14:	b507      	push	{r0, r1, r2, lr}
 8018c16:	aa02      	add	r2, sp, #8
 8018c18:	6980      	ldr	r0, [r0, #24]
 8018c1a:	f842 1d04 	str.w	r1, [r2, #-4]!
 8018c1e:	210b      	movs	r1, #11
 8018c20:	f7fb fff8 	bl	8014c14 <LCD_X_DisplayDriver>
 8018c24:	b003      	add	sp, #12
 8018c26:	f85d fb04 	ldr.w	pc, [sp], #4

08018c2a <_Off>:
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	2106      	movs	r1, #6
 8018c2e:	6980      	ldr	r0, [r0, #24]
 8018c30:	f7fb bff0 	b.w	8014c14 <LCD_X_DisplayDriver>

08018c34 <_On>:
 8018c34:	2200      	movs	r2, #0
 8018c36:	2105      	movs	r1, #5
 8018c38:	6980      	ldr	r0, [r0, #24]
 8018c3a:	f7fb bfeb 	b.w	8014c14 <LCD_X_DisplayDriver>

08018c3e <_SetOrg>:
 8018c3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018c42:	2300      	movs	r3, #0
 8018c44:	4607      	mov	r7, r0
 8018c46:	6884      	ldr	r4, [r0, #8]
 8018c48:	460d      	mov	r5, r1
 8018c4a:	6980      	ldr	r0, [r0, #24]
 8018c4c:	4616      	mov	r6, r2
 8018c4e:	9300      	str	r3, [sp, #0]
 8018c50:	9301      	str	r3, [sp, #4]
 8018c52:	f7ff fb6f 	bl	8018334 <LCD_GetMirrorXEx>
 8018c56:	4680      	mov	r8, r0
 8018c58:	69b8      	ldr	r0, [r7, #24]
 8018c5a:	f7ff fb6e 	bl	801833a <LCD_GetMirrorYEx>
 8018c5e:	4681      	mov	r9, r0
 8018c60:	69b8      	ldr	r0, [r7, #24]
 8018c62:	f7ff fb6d 	bl	8018340 <LCD_GetSwapXYEx>
 8018c66:	0080      	lsls	r0, r0, #2
 8018c68:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8018c6c:	ea40 0008 	orr.w	r0, r0, r8
 8018c70:	2807      	cmp	r0, #7
 8018c72:	d826      	bhi.n	8018cc2 <_SetOrg+0x84>
 8018c74:	e8df f000 	tbb	[pc, r0]
 8018c78:	0b0f0408 	.word	0x0b0f0408
 8018c7c:	1b1f1519 	.word	0x1b1f1519
 8018c80:	69a3      	ldr	r3, [r4, #24]
 8018c82:	6921      	ldr	r1, [r4, #16]
 8018c84:	1a59      	subs	r1, r3, r1
 8018c86:	1b4d      	subs	r5, r1, r5
 8018c88:	9500      	str	r5, [sp, #0]
 8018c8a:	9601      	str	r6, [sp, #4]
 8018c8c:	e019      	b.n	8018cc2 <_SetOrg+0x84>
 8018c8e:	69a3      	ldr	r3, [r4, #24]
 8018c90:	6921      	ldr	r1, [r4, #16]
 8018c92:	1a5b      	subs	r3, r3, r1
 8018c94:	1b5d      	subs	r5, r3, r5
 8018c96:	69e3      	ldr	r3, [r4, #28]
 8018c98:	6962      	ldr	r2, [r4, #20]
 8018c9a:	9500      	str	r5, [sp, #0]
 8018c9c:	1a9a      	subs	r2, r3, r2
 8018c9e:	1b96      	subs	r6, r2, r6
 8018ca0:	e7f3      	b.n	8018c8a <_SetOrg+0x4c>
 8018ca2:	69e3      	ldr	r3, [r4, #28]
 8018ca4:	6962      	ldr	r2, [r4, #20]
 8018ca6:	1a9a      	subs	r2, r3, r2
 8018ca8:	1b96      	subs	r6, r2, r6
 8018caa:	9600      	str	r6, [sp, #0]
 8018cac:	e008      	b.n	8018cc0 <_SetOrg+0x82>
 8018cae:	69e3      	ldr	r3, [r4, #28]
 8018cb0:	6962      	ldr	r2, [r4, #20]
 8018cb2:	1a9b      	subs	r3, r3, r2
 8018cb4:	1b9e      	subs	r6, r3, r6
 8018cb6:	69a3      	ldr	r3, [r4, #24]
 8018cb8:	6921      	ldr	r1, [r4, #16]
 8018cba:	9600      	str	r6, [sp, #0]
 8018cbc:	1a59      	subs	r1, r3, r1
 8018cbe:	1b4d      	subs	r5, r1, r5
 8018cc0:	9501      	str	r5, [sp, #4]
 8018cc2:	466a      	mov	r2, sp
 8018cc4:	2103      	movs	r1, #3
 8018cc6:	69b8      	ldr	r0, [r7, #24]
 8018cc8:	f7fb ffa4 	bl	8014c14 <LCD_X_DisplayDriver>
 8018ccc:	b003      	add	sp, #12
 8018cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08018cd4 <_DrawBitmap>:
 8018cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cd8:	b089      	sub	sp, #36	; 0x24
 8018cda:	4680      	mov	r8, r0
 8018cdc:	469b      	mov	fp, r3
 8018cde:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ce2:	2804      	cmp	r0, #4
 8018ce4:	9103      	str	r1, [sp, #12]
 8018ce6:	9300      	str	r3, [sp, #0]
 8018ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018cea:	9202      	str	r2, [sp, #8]
 8018cec:	9301      	str	r3, [sp, #4]
 8018cee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018cf0:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8018cf4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8018cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018cfa:	d016      	beq.n	8018d2a <_DrawBitmap+0x56>
 8018cfc:	dc0e      	bgt.n	8018d1c <_DrawBitmap+0x48>
 8018cfe:	2801      	cmp	r0, #1
 8018d00:	d01d      	beq.n	8018d3e <_DrawBitmap+0x6a>
 8018d02:	2802      	cmp	r0, #2
 8018d04:	f040 8254 	bne.w	80191b0 <_DrawBitmap+0x4dc>
 8018d08:	4aad      	ldr	r2, [pc, #692]	; (8018fc0 <_DrawBitmap+0x2ec>)
 8018d0a:	2700      	movs	r7, #0
 8018d0c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 8018d10:	6812      	ldr	r2, [r2, #0]
 8018d12:	9204      	str	r2, [sp, #16]
 8018d14:	9a03      	ldr	r2, [sp, #12]
 8018d16:	4452      	add	r2, sl
 8018d18:	9203      	str	r2, [sp, #12]
 8018d1a:	e0bc      	b.n	8018e96 <_DrawBitmap+0x1c2>
 8018d1c:	2808      	cmp	r0, #8
 8018d1e:	f000 816f 	beq.w	8019000 <_DrawBitmap+0x32c>
 8018d22:	2820      	cmp	r0, #32
 8018d24:	f000 821a 	beq.w	801915c <_DrawBitmap+0x488>
 8018d28:	e242      	b.n	80191b0 <_DrawBitmap+0x4dc>
 8018d2a:	4aa5      	ldr	r2, [pc, #660]	; (8018fc0 <_DrawBitmap+0x2ec>)
 8018d2c:	2700      	movs	r7, #0
 8018d2e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8018d32:	6812      	ldr	r2, [r2, #0]
 8018d34:	9204      	str	r2, [sp, #16]
 8018d36:	9a03      	ldr	r2, [sp, #12]
 8018d38:	4452      	add	r2, sl
 8018d3a:	9203      	str	r2, [sp, #12]
 8018d3c:	e105      	b.n	8018f4a <_DrawBitmap+0x276>
 8018d3e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8018d40:	b916      	cbnz	r6, 8018d48 <_DrawBitmap+0x74>
 8018d42:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8018d46:	e04d      	b.n	8018de4 <_DrawBitmap+0x110>
 8018d48:	4b9d      	ldr	r3, [pc, #628]	; (8018fc0 <_DrawBitmap+0x2ec>)
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	7c1b      	ldrb	r3, [r3, #16]
 8018d4e:	07df      	lsls	r7, r3, #31
 8018d50:	d4f7      	bmi.n	8018d42 <_DrawBitmap+0x6e>
 8018d52:	9b01      	ldr	r3, [sp, #4]
 8018d54:	46b4      	mov	ip, r6
 8018d56:	9516      	str	r5, [sp, #88]	; 0x58
 8018d58:	9315      	str	r3, [sp, #84]	; 0x54
 8018d5a:	9b00      	ldr	r3, [sp, #0]
 8018d5c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8018d60:	9314      	str	r3, [sp, #80]	; 0x50
 8018d62:	4623      	mov	r3, r4
 8018d64:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8018d68:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8018d6c:	b009      	add	sp, #36	; 0x24
 8018d6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d72:	4760      	bx	ip
 8018d74:	9b03      	ldr	r3, [sp, #12]
 8018d76:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8018d7a:	eb03 070a 	add.w	r7, r3, sl
 8018d7e:	4b90      	ldr	r3, [pc, #576]	; (8018fc0 <_DrawBitmap+0x2ec>)
 8018d80:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	7c1b      	ldrb	r3, [r3, #16]
 8018d88:	f003 0303 	and.w	r3, r3, #3
 8018d8c:	2b02      	cmp	r3, #2
 8018d8e:	d030      	beq.n	8018df2 <_DrawBitmap+0x11e>
 8018d90:	2b03      	cmp	r3, #3
 8018d92:	d04f      	beq.n	8018e34 <_DrawBitmap+0x160>
 8018d94:	2b01      	cmp	r3, #1
 8018d96:	d04d      	beq.n	8018e34 <_DrawBitmap+0x160>
 8018d98:	498a      	ldr	r1, [pc, #552]	; (8018fc4 <_DrawBitmap+0x2f0>)
 8018d9a:	f1ca 0208 	rsb	r2, sl, #8
 8018d9e:	7823      	ldrb	r3, [r4, #0]
 8018da0:	6828      	ldr	r0, [r5, #0]
 8018da2:	5ccb      	ldrb	r3, [r1, r3]
 8018da4:	6a31      	ldr	r1, [r6, #32]
 8018da6:	fa43 f30a 	asr.w	r3, r3, sl
 8018daa:	fb01 7709 	mla	r7, r1, r9, r7
 8018dae:	6831      	ldr	r1, [r6, #0]
 8018db0:	4626      	mov	r6, r4
 8018db2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018db6:	4659      	mov	r1, fp
 8018db8:	f013 0f01 	tst.w	r3, #1
 8018dbc:	bf0c      	ite	eq
 8018dbe:	4686      	moveq	lr, r0
 8018dc0:	46e6      	movne	lr, ip
 8018dc2:	3a01      	subs	r2, #1
 8018dc4:	bf09      	itett	eq
 8018dc6:	7873      	ldrbeq	r3, [r6, #1]
 8018dc8:	085b      	lsrne	r3, r3, #1
 8018dca:	4a7e      	ldreq	r2, [pc, #504]	; (8018fc4 <_DrawBitmap+0x2f0>)
 8018dcc:	3601      	addeq	r6, #1
 8018dce:	f847 eb04 	str.w	lr, [r7], #4
 8018dd2:	bf04      	itt	eq
 8018dd4:	5cd3      	ldrbeq	r3, [r2, r3]
 8018dd6:	2208      	moveq	r2, #8
 8018dd8:	3901      	subs	r1, #1
 8018dda:	d1ed      	bne.n	8018db8 <_DrawBitmap+0xe4>
 8018ddc:	9b01      	ldr	r3, [sp, #4]
 8018dde:	f109 0901 	add.w	r9, r9, #1
 8018de2:	441c      	add	r4, r3
 8018de4:	9b02      	ldr	r3, [sp, #8]
 8018de6:	9a00      	ldr	r2, [sp, #0]
 8018de8:	ebc3 0309 	rsb	r3, r3, r9
 8018dec:	429a      	cmp	r2, r3
 8018dee:	dcc1      	bgt.n	8018d74 <_DrawBitmap+0xa0>
 8018df0:	e1de      	b.n	80191b0 <_DrawBitmap+0x4dc>
 8018df2:	7823      	ldrb	r3, [r4, #0]
 8018df4:	f1ca 0108 	rsb	r1, sl, #8
 8018df8:	4a72      	ldr	r2, [pc, #456]	; (8018fc4 <_DrawBitmap+0x2f0>)
 8018dfa:	2000      	movs	r0, #0
 8018dfc:	5cd2      	ldrb	r2, [r2, r3]
 8018dfe:	6a33      	ldr	r3, [r6, #32]
 8018e00:	fa42 f20a 	asr.w	r2, r2, sl
 8018e04:	fb03 7709 	mla	r7, r3, r9, r7
 8018e08:	6833      	ldr	r3, [r6, #0]
 8018e0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018e0e:	4623      	mov	r3, r4
 8018e10:	07d6      	lsls	r6, r2, #31
 8018e12:	bf48      	it	mi
 8018e14:	f847 c020 	strmi.w	ip, [r7, r0, lsl #2]
 8018e18:	3901      	subs	r1, #1
 8018e1a:	f100 0001 	add.w	r0, r0, #1
 8018e1e:	bf09      	itett	eq
 8018e20:	785a      	ldrbeq	r2, [r3, #1]
 8018e22:	0852      	lsrne	r2, r2, #1
 8018e24:	4967      	ldreq	r1, [pc, #412]	; (8018fc4 <_DrawBitmap+0x2f0>)
 8018e26:	3301      	addeq	r3, #1
 8018e28:	bf04      	itt	eq
 8018e2a:	5c8a      	ldrbeq	r2, [r1, r2]
 8018e2c:	2108      	moveq	r1, #8
 8018e2e:	4583      	cmp	fp, r0
 8018e30:	d1ee      	bne.n	8018e10 <_DrawBitmap+0x13c>
 8018e32:	e7d3      	b.n	8018ddc <_DrawBitmap+0x108>
 8018e34:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018e38:	4656      	mov	r6, sl
 8018e3a:	689b      	ldr	r3, [r3, #8]
 8018e3c:	4798      	blx	r3
 8018e3e:	eb07 030b 	add.w	r3, r7, fp
 8018e42:	9006      	str	r0, [sp, #24]
 8018e44:	f8cd b014 	str.w	fp, [sp, #20]
 8018e48:	9404      	str	r4, [sp, #16]
 8018e4a:	9307      	str	r3, [sp, #28]
 8018e4c:	9b07      	ldr	r3, [sp, #28]
 8018e4e:	9a05      	ldr	r2, [sp, #20]
 8018e50:	1a9f      	subs	r7, r3, r2
 8018e52:	9b04      	ldr	r3, [sp, #16]
 8018e54:	781a      	ldrb	r2, [r3, #0]
 8018e56:	2380      	movs	r3, #128	; 0x80
 8018e58:	4133      	asrs	r3, r6
 8018e5a:	421a      	tst	r2, r3
 8018e5c:	d00b      	beq.n	8018e76 <_DrawBitmap+0x1a2>
 8018e5e:	464a      	mov	r2, r9
 8018e60:	4639      	mov	r1, r7
 8018e62:	4640      	mov	r0, r8
 8018e64:	f7ff fd26 	bl	80188b4 <_GetPixelIndex>
 8018e68:	9b06      	ldr	r3, [sp, #24]
 8018e6a:	464a      	mov	r2, r9
 8018e6c:	4639      	mov	r1, r7
 8018e6e:	4043      	eors	r3, r0
 8018e70:	4640      	mov	r0, r8
 8018e72:	f7ff fd16 	bl	80188a2 <_SetPixelIndex>
 8018e76:	3601      	adds	r6, #1
 8018e78:	2e08      	cmp	r6, #8
 8018e7a:	bf01      	itttt	eq
 8018e7c:	9b04      	ldreq	r3, [sp, #16]
 8018e7e:	2600      	moveq	r6, #0
 8018e80:	3301      	addeq	r3, #1
 8018e82:	9304      	streq	r3, [sp, #16]
 8018e84:	9b05      	ldr	r3, [sp, #20]
 8018e86:	3b01      	subs	r3, #1
 8018e88:	9305      	str	r3, [sp, #20]
 8018e8a:	d1df      	bne.n	8018e4c <_DrawBitmap+0x178>
 8018e8c:	e7a6      	b.n	8018ddc <_DrawBitmap+0x108>
 8018e8e:	b935      	cbnz	r5, 8018e9e <_DrawBitmap+0x1ca>
 8018e90:	9a01      	ldr	r2, [sp, #4]
 8018e92:	3701      	adds	r7, #1
 8018e94:	4414      	add	r4, r2
 8018e96:	9a00      	ldr	r2, [sp, #0]
 8018e98:	4297      	cmp	r7, r2
 8018e9a:	dbf8      	blt.n	8018e8e <_DrawBitmap+0x1ba>
 8018e9c:	e188      	b.n	80191b0 <_DrawBitmap+0x4dc>
 8018e9e:	9a02      	ldr	r2, [sp, #8]
 8018ea0:	6a19      	ldr	r1, [r3, #32]
 8018ea2:	443a      	add	r2, r7
 8018ea4:	9803      	ldr	r0, [sp, #12]
 8018ea6:	f894 e000 	ldrb.w	lr, [r4]
 8018eaa:	fb01 0102 	mla	r1, r1, r2, r0
 8018eae:	681a      	ldr	r2, [r3, #0]
 8018eb0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018eb4:	9904      	ldr	r1, [sp, #16]
 8018eb6:	7c09      	ldrb	r1, [r1, #16]
 8018eb8:	4690      	mov	r8, r2
 8018eba:	f011 0103 	ands.w	r1, r1, #3
 8018ebe:	d006      	beq.n	8018ece <_DrawBitmap+0x1fa>
 8018ec0:	2902      	cmp	r1, #2
 8018ec2:	d1e5      	bne.n	8018e90 <_DrawBitmap+0x1bc>
 8018ec4:	4650      	mov	r0, sl
 8018ec6:	46a1      	mov	r9, r4
 8018ec8:	f04f 0800 	mov.w	r8, #0
 8018ecc:	e01d      	b.n	8018f0a <_DrawBitmap+0x236>
 8018ece:	4651      	mov	r1, sl
 8018ed0:	465e      	mov	r6, fp
 8018ed2:	46a1      	mov	r9, r4
 8018ed4:	f1c1 0003 	rsb	r0, r1, #3
 8018ed8:	3101      	adds	r1, #1
 8018eda:	0040      	lsls	r0, r0, #1
 8018edc:	2904      	cmp	r1, #4
 8018ede:	f1c0 0206 	rsb	r2, r0, #6
 8018ee2:	bf08      	it	eq
 8018ee4:	2100      	moveq	r1, #0
 8018ee6:	fa4c f202 	asr.w	r2, ip, r2
 8018eea:	ea02 020e 	and.w	r2, r2, lr
 8018eee:	fa22 f200 	lsr.w	r2, r2, r0
 8018ef2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018ef6:	f848 2b04 	str.w	r2, [r8], #4
 8018efa:	bf04      	itt	eq
 8018efc:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 8018f00:	f109 0901 	addeq.w	r9, r9, #1
 8018f04:	3e01      	subs	r6, #1
 8018f06:	d1e5      	bne.n	8018ed4 <_DrawBitmap+0x200>
 8018f08:	e7c2      	b.n	8018e90 <_DrawBitmap+0x1bc>
 8018f0a:	f1c0 0603 	rsb	r6, r0, #3
 8018f0e:	3001      	adds	r0, #1
 8018f10:	0076      	lsls	r6, r6, #1
 8018f12:	f1c6 0106 	rsb	r1, r6, #6
 8018f16:	fa4c f101 	asr.w	r1, ip, r1
 8018f1a:	ea01 010e 	and.w	r1, r1, lr
 8018f1e:	40f1      	lsrs	r1, r6
 8018f20:	bf1c      	itt	ne
 8018f22:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 8018f26:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 8018f2a:	2804      	cmp	r0, #4
 8018f2c:	f108 0801 	add.w	r8, r8, #1
 8018f30:	bf02      	ittt	eq
 8018f32:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 8018f36:	2000      	moveq	r0, #0
 8018f38:	f109 0901 	addeq.w	r9, r9, #1
 8018f3c:	45d8      	cmp	r8, fp
 8018f3e:	d1e4      	bne.n	8018f0a <_DrawBitmap+0x236>
 8018f40:	e7a6      	b.n	8018e90 <_DrawBitmap+0x1bc>
 8018f42:	b935      	cbnz	r5, 8018f52 <_DrawBitmap+0x27e>
 8018f44:	9a01      	ldr	r2, [sp, #4]
 8018f46:	3701      	adds	r7, #1
 8018f48:	4414      	add	r4, r2
 8018f4a:	9a00      	ldr	r2, [sp, #0]
 8018f4c:	4297      	cmp	r7, r2
 8018f4e:	dbf8      	blt.n	8018f42 <_DrawBitmap+0x26e>
 8018f50:	e12e      	b.n	80191b0 <_DrawBitmap+0x4dc>
 8018f52:	9a02      	ldr	r2, [sp, #8]
 8018f54:	6a19      	ldr	r1, [r3, #32]
 8018f56:	443a      	add	r2, r7
 8018f58:	9803      	ldr	r0, [sp, #12]
 8018f5a:	f894 e000 	ldrb.w	lr, [r4]
 8018f5e:	fb01 0102 	mla	r1, r1, r2, r0
 8018f62:	681a      	ldr	r2, [r3, #0]
 8018f64:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018f68:	9904      	ldr	r1, [sp, #16]
 8018f6a:	7c09      	ldrb	r1, [r1, #16]
 8018f6c:	4690      	mov	r8, r2
 8018f6e:	f011 0103 	ands.w	r1, r1, #3
 8018f72:	d006      	beq.n	8018f82 <_DrawBitmap+0x2ae>
 8018f74:	2902      	cmp	r1, #2
 8018f76:	d1e5      	bne.n	8018f44 <_DrawBitmap+0x270>
 8018f78:	4650      	mov	r0, sl
 8018f7a:	46a1      	mov	r9, r4
 8018f7c:	f04f 0800 	mov.w	r8, #0
 8018f80:	e022      	b.n	8018fc8 <_DrawBitmap+0x2f4>
 8018f82:	4651      	mov	r1, sl
 8018f84:	465e      	mov	r6, fp
 8018f86:	46a1      	mov	r9, r4
 8018f88:	f1c1 0001 	rsb	r0, r1, #1
 8018f8c:	3101      	adds	r1, #1
 8018f8e:	0080      	lsls	r0, r0, #2
 8018f90:	2902      	cmp	r1, #2
 8018f92:	f1c0 0204 	rsb	r2, r0, #4
 8018f96:	bf08      	it	eq
 8018f98:	2100      	moveq	r1, #0
 8018f9a:	fa4c f202 	asr.w	r2, ip, r2
 8018f9e:	ea02 020e 	and.w	r2, r2, lr
 8018fa2:	fa22 f200 	lsr.w	r2, r2, r0
 8018fa6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018faa:	f848 2b04 	str.w	r2, [r8], #4
 8018fae:	bf04      	itt	eq
 8018fb0:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 8018fb4:	f109 0901 	addeq.w	r9, r9, #1
 8018fb8:	3e01      	subs	r6, #1
 8018fba:	d1e5      	bne.n	8018f88 <_DrawBitmap+0x2b4>
 8018fbc:	e7c2      	b.n	8018f44 <_DrawBitmap+0x270>
 8018fbe:	bf00      	nop
 8018fc0:	20000018 	.word	0x20000018
 8018fc4:	08023590 	.word	0x08023590
 8018fc8:	f1c0 0601 	rsb	r6, r0, #1
 8018fcc:	3001      	adds	r0, #1
 8018fce:	00b6      	lsls	r6, r6, #2
 8018fd0:	f1c6 0104 	rsb	r1, r6, #4
 8018fd4:	fa4c f101 	asr.w	r1, ip, r1
 8018fd8:	ea01 010e 	and.w	r1, r1, lr
 8018fdc:	40f1      	lsrs	r1, r6
 8018fde:	bf1c      	itt	ne
 8018fe0:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 8018fe4:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 8018fe8:	2802      	cmp	r0, #2
 8018fea:	f108 0801 	add.w	r8, r8, #1
 8018fee:	bf02      	ittt	eq
 8018ff0:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 8018ff4:	2000      	moveq	r0, #0
 8018ff6:	f109 0901 	addeq.w	r9, r9, #1
 8018ffa:	45c3      	cmp	fp, r8
 8018ffc:	d1e4      	bne.n	8018fc8 <_DrawBitmap+0x2f4>
 8018ffe:	e7a1      	b.n	8018f44 <_DrawBitmap+0x270>
 8019000:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8019002:	4f6d      	ldr	r7, [pc, #436]	; (80191b8 <_DrawBitmap+0x4e4>)
 8019004:	b926      	cbnz	r6, 8019010 <_DrawBitmap+0x33c>
 8019006:	f8d7 c000 	ldr.w	ip, [r7]
 801900a:	f04f 0e00 	mov.w	lr, #0
 801900e:	e019      	b.n	8019044 <_DrawBitmap+0x370>
 8019010:	6838      	ldr	r0, [r7, #0]
 8019012:	7c00      	ldrb	r0, [r0, #16]
 8019014:	0780      	lsls	r0, r0, #30
 8019016:	d4f6      	bmi.n	8019006 <_DrawBitmap+0x332>
 8019018:	2d00      	cmp	r5, #0
 801901a:	d0f4      	beq.n	8019006 <_DrawBitmap+0x332>
 801901c:	9b01      	ldr	r3, [sp, #4]
 801901e:	46b4      	mov	ip, r6
 8019020:	9515      	str	r5, [sp, #84]	; 0x54
 8019022:	9314      	str	r3, [sp, #80]	; 0x50
 8019024:	9b00      	ldr	r3, [sp, #0]
 8019026:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801902a:	9313      	str	r3, [sp, #76]	; 0x4c
 801902c:	4623      	mov	r3, r4
 801902e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8019032:	b009      	add	sp, #36	; 0x24
 8019034:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019038:	4760      	bx	ip
 801903a:	b93d      	cbnz	r5, 801904c <_DrawBitmap+0x378>
 801903c:	9a01      	ldr	r2, [sp, #4]
 801903e:	f10e 0e01 	add.w	lr, lr, #1
 8019042:	4414      	add	r4, r2
 8019044:	9a00      	ldr	r2, [sp, #0]
 8019046:	4596      	cmp	lr, r2
 8019048:	dbf7      	blt.n	801903a <_DrawBitmap+0x366>
 801904a:	e0b1      	b.n	80191b0 <_DrawBitmap+0x4dc>
 801904c:	9a02      	ldr	r2, [sp, #8]
 801904e:	6a19      	ldr	r1, [r3, #32]
 8019050:	4472      	add	r2, lr
 8019052:	9803      	ldr	r0, [sp, #12]
 8019054:	fb01 0202 	mla	r2, r1, r2, r0
 8019058:	6819      	ldr	r1, [r3, #0]
 801905a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801905e:	f89c 1010 	ldrb.w	r1, [ip, #16]
 8019062:	f011 0103 	ands.w	r1, r1, #3
 8019066:	d003      	beq.n	8019070 <_DrawBitmap+0x39c>
 8019068:	2902      	cmp	r1, #2
 801906a:	d1e7      	bne.n	801903c <_DrawBitmap+0x368>
 801906c:	2000      	movs	r0, #0
 801906e:	e070      	b.n	8019152 <_DrawBitmap+0x47e>
 8019070:	4620      	mov	r0, r4
 8019072:	4659      	mov	r1, fp
 8019074:	2907      	cmp	r1, #7
 8019076:	f100 0708 	add.w	r7, r0, #8
 801907a:	f102 0620 	add.w	r6, r2, #32
 801907e:	dd33      	ble.n	80190e8 <_DrawBitmap+0x414>
 8019080:	f817 2c08 	ldrb.w	r2, [r7, #-8]
 8019084:	3908      	subs	r1, #8
 8019086:	4638      	mov	r0, r7
 8019088:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801908c:	f846 2c20 	str.w	r2, [r6, #-32]
 8019090:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 8019094:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019098:	f846 2c1c 	str.w	r2, [r6, #-28]
 801909c:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 80190a0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80190a4:	f846 2c18 	str.w	r2, [r6, #-24]
 80190a8:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 80190ac:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80190b0:	f846 2c14 	str.w	r2, [r6, #-20]
 80190b4:	f817 2c04 	ldrb.w	r2, [r7, #-4]
 80190b8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80190bc:	f846 2c10 	str.w	r2, [r6, #-16]
 80190c0:	f817 2c03 	ldrb.w	r2, [r7, #-3]
 80190c4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80190c8:	f846 2c0c 	str.w	r2, [r6, #-12]
 80190cc:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 80190d0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80190d4:	f846 2c08 	str.w	r2, [r6, #-8]
 80190d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80190dc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80190e0:	f846 2c04 	str.w	r2, [r6, #-4]
 80190e4:	4632      	mov	r2, r6
 80190e6:	e7c5      	b.n	8019074 <_DrawBitmap+0x3a0>
 80190e8:	2903      	cmp	r1, #3
 80190ea:	4616      	mov	r6, r2
 80190ec:	4607      	mov	r7, r0
 80190ee:	f102 0210 	add.w	r2, r2, #16
 80190f2:	f100 0004 	add.w	r0, r0, #4
 80190f6:	dd19      	ble.n	801912c <_DrawBitmap+0x458>
 80190f8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80190fc:	3904      	subs	r1, #4
 80190fe:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8019102:	f842 6c10 	str.w	r6, [r2, #-16]
 8019106:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801910a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801910e:	f842 6c0c 	str.w	r6, [r2, #-12]
 8019112:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8019116:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801911a:	f842 6c08 	str.w	r6, [r2, #-8]
 801911e:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8019122:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8019126:	f842 6c04 	str.w	r6, [r2, #-4]
 801912a:	e7dd      	b.n	80190e8 <_DrawBitmap+0x414>
 801912c:	3f01      	subs	r7, #1
 801912e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8019132:	42b1      	cmp	r1, r6
 8019134:	d082      	beq.n	801903c <_DrawBitmap+0x368>
 8019136:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 801913a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801913e:	f846 2b04 	str.w	r2, [r6], #4
 8019142:	e7f6      	b.n	8019132 <_DrawBitmap+0x45e>
 8019144:	5c21      	ldrb	r1, [r4, r0]
 8019146:	b119      	cbz	r1, 8019150 <_DrawBitmap+0x47c>
 8019148:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801914c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8019150:	3001      	adds	r0, #1
 8019152:	ebc0 010b 	rsb	r1, r0, fp
 8019156:	2900      	cmp	r1, #0
 8019158:	dcf4      	bgt.n	8019144 <_DrawBitmap+0x470>
 801915a:	e76f      	b.n	801903c <_DrawBitmap+0x368>
 801915c:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801915e:	b90d      	cbnz	r5, 8019164 <_DrawBitmap+0x490>
 8019160:	462a      	mov	r2, r5
 8019162:	e017      	b.n	8019194 <_DrawBitmap+0x4c0>
 8019164:	9b01      	ldr	r3, [sp, #4]
 8019166:	46ac      	mov	ip, r5
 8019168:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801916c:	9314      	str	r3, [sp, #80]	; 0x50
 801916e:	9b00      	ldr	r3, [sp, #0]
 8019170:	9313      	str	r3, [sp, #76]	; 0x4c
 8019172:	4623      	mov	r3, r4
 8019174:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8019178:	b009      	add	sp, #36	; 0x24
 801917a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917e:	4760      	bx	ip
 8019180:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8019184:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
 8019188:	3101      	adds	r1, #1
 801918a:	4559      	cmp	r1, fp
 801918c:	d1f8      	bne.n	8019180 <_DrawBitmap+0x4ac>
 801918e:	9901      	ldr	r1, [sp, #4]
 8019190:	3201      	adds	r2, #1
 8019192:	440c      	add	r4, r1
 8019194:	9900      	ldr	r1, [sp, #0]
 8019196:	428a      	cmp	r2, r1
 8019198:	da0a      	bge.n	80191b0 <_DrawBitmap+0x4dc>
 801919a:	9902      	ldr	r1, [sp, #8]
 801919c:	6a18      	ldr	r0, [r3, #32]
 801919e:	4411      	add	r1, r2
 80191a0:	9d03      	ldr	r5, [sp, #12]
 80191a2:	fb00 5101 	mla	r1, r0, r1, r5
 80191a6:	6818      	ldr	r0, [r3, #0]
 80191a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80191ac:	2100      	movs	r1, #0
 80191ae:	e7e7      	b.n	8019180 <_DrawBitmap+0x4ac>
 80191b0:	b009      	add	sp, #36	; 0x24
 80191b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191b6:	bf00      	nop
 80191b8:	20000018 	.word	0x20000018

080191bc <_InitOnce.isra.4>:
 80191bc:	b538      	push	{r3, r4, r5, lr}
 80191be:	6805      	ldr	r5, [r0, #0]
 80191c0:	4604      	mov	r4, r0
 80191c2:	b93d      	cbnz	r5, 80191d4 <_InitOnce.isra.4+0x18>
 80191c4:	2050      	movs	r0, #80	; 0x50
 80191c6:	f7fd f84f 	bl	8016268 <GUI_ALLOC_GetFixedBlock>
 80191ca:	2250      	movs	r2, #80	; 0x50
 80191cc:	6020      	str	r0, [r4, #0]
 80191ce:	4629      	mov	r1, r5
 80191d0:	f7fe fc3a 	bl	8017a48 <GUI__memset>
 80191d4:	6820      	ldr	r0, [r4, #0]
 80191d6:	fab0 f080 	clz	r0, r0
 80191da:	0940      	lsrs	r0, r0, #5
 80191dc:	bd38      	pop	{r3, r4, r5, pc}

080191de <_SetDevFunc>:
 80191de:	b570      	push	{r4, r5, r6, lr}
 80191e0:	4606      	mov	r6, r0
 80191e2:	3008      	adds	r0, #8
 80191e4:	460d      	mov	r5, r1
 80191e6:	4614      	mov	r4, r2
 80191e8:	f7ff ffe8 	bl	80191bc <_InitOnce.isra.4>
 80191ec:	68b3      	ldr	r3, [r6, #8]
 80191ee:	b1db      	cbz	r3, 8019228 <_SetDevFunc+0x4a>
 80191f0:	2d21      	cmp	r5, #33	; 0x21
 80191f2:	d012      	beq.n	801921a <_SetDevFunc+0x3c>
 80191f4:	dc07      	bgt.n	8019206 <_SetDevFunc+0x28>
 80191f6:	2d19      	cmp	r5, #25
 80191f8:	d00d      	beq.n	8019216 <_SetDevFunc+0x38>
 80191fa:	2d20      	cmp	r5, #32
 80191fc:	d00f      	beq.n	801921e <_SetDevFunc+0x40>
 80191fe:	2d03      	cmp	r5, #3
 8019200:	d112      	bne.n	8019228 <_SetDevFunc+0x4a>
 8019202:	649c      	str	r4, [r3, #72]	; 0x48
 8019204:	bd70      	pop	{r4, r5, r6, pc}
 8019206:	2d25      	cmp	r5, #37	; 0x25
 8019208:	d00b      	beq.n	8019222 <_SetDevFunc+0x44>
 801920a:	2d28      	cmp	r5, #40	; 0x28
 801920c:	d00b      	beq.n	8019226 <_SetDevFunc+0x48>
 801920e:	2d23      	cmp	r5, #35	; 0x23
 8019210:	d10a      	bne.n	8019228 <_SetDevFunc+0x4a>
 8019212:	645c      	str	r4, [r3, #68]	; 0x44
 8019214:	bd70      	pop	{r4, r5, r6, pc}
 8019216:	635c      	str	r4, [r3, #52]	; 0x34
 8019218:	bd70      	pop	{r4, r5, r6, pc}
 801921a:	639c      	str	r4, [r3, #56]	; 0x38
 801921c:	bd70      	pop	{r4, r5, r6, pc}
 801921e:	63dc      	str	r4, [r3, #60]	; 0x3c
 8019220:	bd70      	pop	{r4, r5, r6, pc}
 8019222:	641c      	str	r4, [r3, #64]	; 0x40
 8019224:	bd70      	pop	{r4, r5, r6, pc}
 8019226:	64dc      	str	r4, [r3, #76]	; 0x4c
 8019228:	bd70      	pop	{r4, r5, r6, pc}
	...

0801922c <_CopyBuffer>:
 801922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019230:	4606      	mov	r6, r0
 8019232:	3008      	adds	r0, #8
 8019234:	460f      	mov	r7, r1
 8019236:	4690      	mov	r8, r2
 8019238:	f7ff ffc0 	bl	80191bc <_InitOnce.isra.4>
 801923c:	68b4      	ldr	r4, [r6, #8]
 801923e:	b31c      	cbz	r4, 8019288 <_CopyBuffer+0x5c>
 8019240:	4547      	cmp	r7, r8
 8019242:	d021      	beq.n	8019288 <_CopyBuffer+0x5c>
 8019244:	68f3      	ldr	r3, [r6, #12]
 8019246:	2108      	movs	r1, #8
 8019248:	4630      	mov	r0, r6
 801924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801924c:	4798      	blx	r3
 801924e:	69a2      	ldr	r2, [r4, #24]
 8019250:	6963      	ldr	r3, [r4, #20]
 8019252:	4353      	muls	r3, r2
 8019254:	4358      	muls	r0, r3
 8019256:	68a3      	ldr	r3, [r4, #8]
 8019258:	08c2      	lsrs	r2, r0, #3
 801925a:	b123      	cbz	r3, 8019266 <_CopyBuffer+0x3a>
 801925c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8019260:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 8019264:	e004      	b.n	8019270 <_CopyBuffer+0x44>
 8019266:	6865      	ldr	r5, [r4, #4]
 8019268:	fb02 5107 	mla	r1, r2, r7, r5
 801926c:	fb02 5508 	mla	r5, r2, r8, r5
 8019270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019272:	b123      	cbz	r3, 801927e <_CopyBuffer+0x52>
 8019274:	4642      	mov	r2, r8
 8019276:	4639      	mov	r1, r7
 8019278:	69b0      	ldr	r0, [r6, #24]
 801927a:	4798      	blx	r3
 801927c:	e003      	b.n	8019286 <_CopyBuffer+0x5a>
 801927e:	4b03      	ldr	r3, [pc, #12]	; (801928c <_CopyBuffer+0x60>)
 8019280:	4628      	mov	r0, r5
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	4798      	blx	r3
 8019286:	6025      	str	r5, [r4, #0]
 8019288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801928c:	20000038 	.word	0x20000038

08019290 <_GetPos>:
 8019290:	b570      	push	{r4, r5, r6, lr}
 8019292:	4604      	mov	r4, r0
 8019294:	3008      	adds	r0, #8
 8019296:	460e      	mov	r6, r1
 8019298:	4615      	mov	r5, r2
 801929a:	f7ff ff8f 	bl	80191bc <_InitOnce.isra.4>
 801929e:	68a3      	ldr	r3, [r4, #8]
 80192a0:	b11b      	cbz	r3, 80192aa <_GetPos+0x1a>
 80192a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80192a4:	6032      	str	r2, [r6, #0]
 80192a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192a8:	602b      	str	r3, [r5, #0]
 80192aa:	bd70      	pop	{r4, r5, r6, pc}

080192ac <_SetVRAM_BufferPTR>:
 80192ac:	b538      	push	{r3, r4, r5, lr}
 80192ae:	4605      	mov	r5, r0
 80192b0:	3008      	adds	r0, #8
 80192b2:	460c      	mov	r4, r1
 80192b4:	f7ff ff82 	bl	80191bc <_InitOnce.isra.4>
 80192b8:	68ab      	ldr	r3, [r5, #8]
 80192ba:	b113      	cbz	r3, 80192c2 <_SetVRAM_BufferPTR+0x16>
 80192bc:	6822      	ldr	r2, [r4, #0]
 80192be:	609c      	str	r4, [r3, #8]
 80192c0:	601a      	str	r2, [r3, #0]
 80192c2:	bd38      	pop	{r3, r4, r5, pc}

080192c4 <_ShowBuffer>:
 80192c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80192c6:	2300      	movs	r3, #0
 80192c8:	4604      	mov	r4, r0
 80192ca:	3008      	adds	r0, #8
 80192cc:	460d      	mov	r5, r1
 80192ce:	9301      	str	r3, [sp, #4]
 80192d0:	f7ff ff74 	bl	80191bc <_InitOnce.isra.4>
 80192d4:	68a3      	ldr	r3, [r4, #8]
 80192d6:	b133      	cbz	r3, 80192e6 <_ShowBuffer+0x22>
 80192d8:	aa02      	add	r2, sp, #8
 80192da:	210e      	movs	r1, #14
 80192dc:	69a0      	ldr	r0, [r4, #24]
 80192de:	f842 5d04 	str.w	r5, [r2, #-4]!
 80192e2:	f7fb fc97 	bl	8014c14 <LCD_X_DisplayDriver>
 80192e6:	b003      	add	sp, #12
 80192e8:	bd30      	pop	{r4, r5, pc}

080192ea <_Init>:
 80192ea:	b538      	push	{r3, r4, r5, lr}
 80192ec:	4604      	mov	r4, r0
 80192ee:	3008      	adds	r0, #8
 80192f0:	f7ff ff64 	bl	80191bc <_InitOnce.isra.4>
 80192f4:	4605      	mov	r5, r0
 80192f6:	2200      	movs	r2, #0
 80192f8:	2101      	movs	r1, #1
 80192fa:	69a0      	ldr	r0, [r4, #24]
 80192fc:	f7fb fc8a 	bl	8014c14 <LCD_X_DisplayDriver>
 8019300:	4328      	orrs	r0, r5
 8019302:	bd38      	pop	{r3, r4, r5, pc}

08019304 <_SetVis>:
 8019304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019306:	2300      	movs	r3, #0
 8019308:	4604      	mov	r4, r0
 801930a:	3008      	adds	r0, #8
 801930c:	460d      	mov	r5, r1
 801930e:	9301      	str	r3, [sp, #4]
 8019310:	f7ff ff54 	bl	80191bc <_InitOnce.isra.4>
 8019314:	68a3      	ldr	r3, [r4, #8]
 8019316:	b13b      	cbz	r3, 8019328 <_SetVis+0x24>
 8019318:	aa02      	add	r2, sp, #8
 801931a:	631d      	str	r5, [r3, #48]	; 0x30
 801931c:	2109      	movs	r1, #9
 801931e:	69a0      	ldr	r0, [r4, #24]
 8019320:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019324:	f7fb fc76 	bl	8014c14 <LCD_X_DisplayDriver>
 8019328:	b003      	add	sp, #12
 801932a:	bd30      	pop	{r4, r5, pc}

0801932c <_SetAlpha>:
 801932c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801932e:	2300      	movs	r3, #0
 8019330:	4604      	mov	r4, r0
 8019332:	3008      	adds	r0, #8
 8019334:	460d      	mov	r5, r1
 8019336:	9301      	str	r3, [sp, #4]
 8019338:	f7ff ff40 	bl	80191bc <_InitOnce.isra.4>
 801933c:	68a3      	ldr	r3, [r4, #8]
 801933e:	b13b      	cbz	r3, 8019350 <_SetAlpha+0x24>
 8019340:	aa02      	add	r2, sp, #8
 8019342:	62dd      	str	r5, [r3, #44]	; 0x2c
 8019344:	210a      	movs	r1, #10
 8019346:	69a0      	ldr	r0, [r4, #24]
 8019348:	f842 5d04 	str.w	r5, [r2, #-4]!
 801934c:	f7fb fc62 	bl	8014c14 <LCD_X_DisplayDriver>
 8019350:	b003      	add	sp, #12
 8019352:	bd30      	pop	{r4, r5, pc}

08019354 <_SetVRAMAddr>:
 8019354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019356:	2300      	movs	r3, #0
 8019358:	4604      	mov	r4, r0
 801935a:	3008      	adds	r0, #8
 801935c:	460d      	mov	r5, r1
 801935e:	9301      	str	r3, [sp, #4]
 8019360:	f7ff ff2c 	bl	80191bc <_InitOnce.isra.4>
 8019364:	68a3      	ldr	r3, [r4, #8]
 8019366:	b143      	cbz	r3, 801937a <_SetVRAMAddr+0x26>
 8019368:	aa02      	add	r2, sp, #8
 801936a:	601d      	str	r5, [r3, #0]
 801936c:	605d      	str	r5, [r3, #4]
 801936e:	2102      	movs	r1, #2
 8019370:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019374:	69a0      	ldr	r0, [r4, #24]
 8019376:	f7fb fc4d 	bl	8014c14 <LCD_X_DisplayDriver>
 801937a:	b003      	add	sp, #12
 801937c:	bd30      	pop	{r4, r5, pc}

0801937e <_SetPos>:
 801937e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019382:	b089      	sub	sp, #36	; 0x24
 8019384:	4606      	mov	r6, r0
 8019386:	460d      	mov	r5, r1
 8019388:	4614      	mov	r4, r2
 801938a:	2100      	movs	r1, #0
 801938c:	2218      	movs	r2, #24
 801938e:	a802      	add	r0, sp, #8
 8019390:	f005 fc19 	bl	801ebc6 <memset>
 8019394:	f106 0008 	add.w	r0, r6, #8
 8019398:	f7ff ff10 	bl	80191bc <_InitOnce.isra.4>
 801939c:	68b7      	ldr	r7, [r6, #8]
 801939e:	2f00      	cmp	r7, #0
 80193a0:	d067      	beq.n	8019472 <_SetPos+0xf4>
 80193a2:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 80193a6:	f1bb 0f00 	cmp.w	fp, #0
 80193aa:	d004      	beq.n	80193b6 <_SetPos+0x38>
 80193ac:	4622      	mov	r2, r4
 80193ae:	4629      	mov	r1, r5
 80193b0:	69b0      	ldr	r0, [r6, #24]
 80193b2:	47d8      	blx	fp
 80193b4:	e05d      	b.n	8019472 <_SetPos+0xf4>
 80193b6:	627d      	str	r5, [r7, #36]	; 0x24
 80193b8:	62bc      	str	r4, [r7, #40]	; 0x28
 80193ba:	f7ff f81b 	bl	80183f4 <LCD_GetXSizeDisplay>
 80193be:	4681      	mov	r9, r0
 80193c0:	f7ff f81e 	bl	8018400 <LCD_GetYSizeDisplay>
 80193c4:	68f2      	ldr	r2, [r6, #12]
 80193c6:	697b      	ldr	r3, [r7, #20]
 80193c8:	2108      	movs	r1, #8
 80193ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80193cc:	4680      	mov	r8, r0
 80193ce:	4630      	mov	r0, r6
 80193d0:	f8d7 a010 	ldr.w	sl, [r7, #16]
 80193d4:	9301      	str	r3, [sp, #4]
 80193d6:	4790      	blx	r2
 80193d8:	2208      	movs	r2, #8
 80193da:	3007      	adds	r0, #7
 80193dc:	2d00      	cmp	r5, #0
 80193de:	eb05 010a 	add.w	r1, r5, sl
 80193e2:	9b01      	ldr	r3, [sp, #4]
 80193e4:	fb90 f0f2 	sdiv	r0, r0, r2
 80193e8:	9006      	str	r0, [sp, #24]
 80193ea:	da07      	bge.n	80193fc <_SetPos+0x7e>
 80193ec:	9a07      	ldr	r2, [sp, #28]
 80193ee:	f8cd b008 	str.w	fp, [sp, #8]
 80193f2:	fb00 2015 	mls	r0, r0, r5, r2
 80193f6:	9104      	str	r1, [sp, #16]
 80193f8:	9007      	str	r0, [sp, #28]
 80193fa:	e007      	b.n	801940c <_SetPos+0x8e>
 80193fc:	4589      	cmp	r9, r1
 80193fe:	9502      	str	r5, [sp, #8]
 8019400:	bfb6      	itet	lt
 8019402:	ebc5 0509 	rsblt	r5, r5, r9
 8019406:	f8cd a010 	strge.w	sl, [sp, #16]
 801940a:	9504      	strlt	r5, [sp, #16]
 801940c:	2c00      	cmp	r4, #0
 801940e:	eb04 0203 	add.w	r2, r4, r3
 8019412:	da09      	bge.n	8019428 <_SetPos+0xaa>
 8019414:	9b06      	ldr	r3, [sp, #24]
 8019416:	9205      	str	r2, [sp, #20]
 8019418:	435c      	muls	r4, r3
 801941a:	9b07      	ldr	r3, [sp, #28]
 801941c:	fb0a 3414 	mls	r4, sl, r4, r3
 8019420:	2300      	movs	r3, #0
 8019422:	9407      	str	r4, [sp, #28]
 8019424:	9303      	str	r3, [sp, #12]
 8019426:	e006      	b.n	8019436 <_SetPos+0xb8>
 8019428:	4590      	cmp	r8, r2
 801942a:	9403      	str	r4, [sp, #12]
 801942c:	bfb6      	itet	lt
 801942e:	ebc4 0408 	rsblt	r4, r4, r8
 8019432:	9305      	strge	r3, [sp, #20]
 8019434:	9405      	strlt	r4, [sp, #20]
 8019436:	9b04      	ldr	r3, [sp, #16]
 8019438:	2b00      	cmp	r3, #0
 801943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801943c:	dd08      	ble.n	8019450 <_SetPos+0xd2>
 801943e:	9a05      	ldr	r2, [sp, #20]
 8019440:	2a00      	cmp	r2, #0
 8019442:	dd05      	ble.n	8019450 <_SetPos+0xd2>
 8019444:	9a02      	ldr	r2, [sp, #8]
 8019446:	4591      	cmp	r9, r2
 8019448:	dd02      	ble.n	8019450 <_SetPos+0xd2>
 801944a:	9a03      	ldr	r2, [sp, #12]
 801944c:	4590      	cmp	r8, r2
 801944e:	dc06      	bgt.n	801945e <_SetPos+0xe0>
 8019450:	2b01      	cmp	r3, #1
 8019452:	d10e      	bne.n	8019472 <_SetPos+0xf4>
 8019454:	2100      	movs	r1, #0
 8019456:	4630      	mov	r0, r6
 8019458:	f7ff ff54 	bl	8019304 <_SetVis>
 801945c:	e009      	b.n	8019472 <_SetPos+0xf4>
 801945e:	b91b      	cbnz	r3, 8019468 <_SetPos+0xea>
 8019460:	2101      	movs	r1, #1
 8019462:	4630      	mov	r0, r6
 8019464:	f7ff ff4e 	bl	8019304 <_SetVis>
 8019468:	aa02      	add	r2, sp, #8
 801946a:	2108      	movs	r1, #8
 801946c:	69b0      	ldr	r0, [r6, #24]
 801946e:	f7fb fbd1 	bl	8014c14 <LCD_X_DisplayDriver>
 8019472:	b009      	add	sp, #36	; 0x24
 8019474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019478 <_SetSize>:
 8019478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801947a:	2300      	movs	r3, #0
 801947c:	4605      	mov	r5, r0
 801947e:	3008      	adds	r0, #8
 8019480:	460f      	mov	r7, r1
 8019482:	4616      	mov	r6, r2
 8019484:	9300      	str	r3, [sp, #0]
 8019486:	9301      	str	r3, [sp, #4]
 8019488:	f7ff fe98 	bl	80191bc <_InitOnce.isra.4>
 801948c:	68ac      	ldr	r4, [r5, #8]
 801948e:	b194      	cbz	r4, 80194b6 <_SetSize+0x3e>
 8019490:	6a23      	ldr	r3, [r4, #32]
 8019492:	b93b      	cbnz	r3, 80194a4 <_SetSize+0x2c>
 8019494:	69a8      	ldr	r0, [r5, #24]
 8019496:	f7fe ff53 	bl	8018340 <LCD_GetSwapXYEx>
 801949a:	2800      	cmp	r0, #0
 801949c:	bf0c      	ite	eq
 801949e:	4638      	moveq	r0, r7
 80194a0:	4630      	movne	r0, r6
 80194a2:	6220      	str	r0, [r4, #32]
 80194a4:	6127      	str	r7, [r4, #16]
 80194a6:	466a      	mov	r2, sp
 80194a8:	6166      	str	r6, [r4, #20]
 80194aa:	2107      	movs	r1, #7
 80194ac:	69a8      	ldr	r0, [r5, #24]
 80194ae:	9700      	str	r7, [sp, #0]
 80194b0:	9601      	str	r6, [sp, #4]
 80194b2:	f7fb fbaf 	bl	8014c14 <LCD_X_DisplayDriver>
 80194b6:	b003      	add	sp, #12
 80194b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080194ba <_SetVSize>:
 80194ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194bc:	4607      	mov	r7, r0
 80194be:	3008      	adds	r0, #8
 80194c0:	460d      	mov	r5, r1
 80194c2:	4616      	mov	r6, r2
 80194c4:	f7ff fe7a 	bl	80191bc <_InitOnce.isra.4>
 80194c8:	68bc      	ldr	r4, [r7, #8]
 80194ca:	b144      	cbz	r4, 80194de <_SetVSize+0x24>
 80194cc:	69b8      	ldr	r0, [r7, #24]
 80194ce:	f7fe ff37 	bl	8018340 <LCD_GetSwapXYEx>
 80194d2:	61a5      	str	r5, [r4, #24]
 80194d4:	61e6      	str	r6, [r4, #28]
 80194d6:	b108      	cbz	r0, 80194dc <_SetVSize+0x22>
 80194d8:	6226      	str	r6, [r4, #32]
 80194da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194dc:	6225      	str	r5, [r4, #32]
 80194de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080194e0 <_GetDevData>:
 80194e0:	2901      	cmp	r1, #1
 80194e2:	4802      	ldr	r0, [pc, #8]	; (80194ec <_GetDevData+0xc>)
 80194e4:	bf18      	it	ne
 80194e6:	2000      	movne	r0, #0
 80194e8:	4770      	bx	lr
 80194ea:	bf00      	nop
 80194ec:	080234e4 	.word	0x080234e4

080194f0 <_GetDevFunc>:
 80194f0:	2916      	cmp	r1, #22
 80194f2:	4802      	ldr	r0, [pc, #8]	; (80194fc <_GetDevFunc+0xc>)
 80194f4:	bf18      	it	ne
 80194f6:	2000      	movne	r0, #0
 80194f8:	4770      	bx	lr
 80194fa:	bf00      	nop
 80194fc:	0801a105 	.word	0x0801a105

08019500 <_GetDevProp>:
 8019500:	2908      	cmp	r1, #8
 8019502:	bf0c      	ite	eq
 8019504:	2020      	moveq	r0, #32
 8019506:	2000      	movne	r0, #0
 8019508:	4770      	bx	lr

0801950a <_SetOrg>:
 801950a:	6800      	ldr	r0, [r0, #0]
 801950c:	68c3      	ldr	r3, [r0, #12]
 801950e:	6a1b      	ldr	r3, [r3, #32]
 8019510:	4718      	bx	r3

08019512 <_GetRect>:
 8019512:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019514:	6880      	ldr	r0, [r0, #8]
 8019516:	460d      	mov	r5, r1
 8019518:	f7fc fdce 	bl	80160b8 <GUI_ALLOC_LockH>
 801951c:	4602      	mov	r2, r0
 801951e:	a802      	add	r0, sp, #8
 8019520:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8019524:	8914      	ldrh	r4, [r2, #8]
 8019526:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 801952a:	802b      	strh	r3, [r5, #0]
 801952c:	441c      	add	r4, r3
 801952e:	8953      	ldrh	r3, [r2, #10]
 8019530:	3c01      	subs	r4, #1
 8019532:	f840 2d04 	str.w	r2, [r0, #-4]!
 8019536:	440b      	add	r3, r1
 8019538:	8069      	strh	r1, [r5, #2]
 801953a:	80ac      	strh	r4, [r5, #4]
 801953c:	3b01      	subs	r3, #1
 801953e:	80eb      	strh	r3, [r5, #6]
 8019540:	f7fc fdc8 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019544:	b003      	add	sp, #12
 8019546:	bd30      	pop	{r4, r5, pc}

08019548 <_XY2PTR>:
 8019548:	4b0e      	ldr	r3, [pc, #56]	; (8019584 <_XY2PTR+0x3c>)
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801954e:	4606      	mov	r6, r0
 8019550:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8019552:	460d      	mov	r5, r1
 8019554:	f7fc fdb0 	bl	80160b8 <GUI_ALLOC_LockH>
 8019558:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801955c:	ab02      	add	r3, sp, #8
 801955e:	68c4      	ldr	r4, [r0, #12]
 8019560:	1a69      	subs	r1, r5, r1
 8019562:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8019566:	f843 0d04 	str.w	r0, [r3, #-4]!
 801956a:	1b76      	subs	r6, r6, r5
 801956c:	00b6      	lsls	r6, r6, #2
 801956e:	3618      	adds	r6, #24
 8019570:	fb04 6501 	mla	r5, r4, r1, r6
 8019574:	1944      	adds	r4, r0, r5
 8019576:	4618      	mov	r0, r3
 8019578:	f7fc fdac 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801957c:	4620      	mov	r0, r4
 801957e:	b002      	add	sp, #8
 8019580:	bd70      	pop	{r4, r5, r6, pc}
 8019582:	bf00      	nop
 8019584:	20000018 	.word	0x20000018

08019588 <_GetPixelIndex>:
 8019588:	b508      	push	{r3, lr}
 801958a:	4608      	mov	r0, r1
 801958c:	4611      	mov	r1, r2
 801958e:	f7ff ffdb 	bl	8019548 <_XY2PTR>
 8019592:	6800      	ldr	r0, [r0, #0]
 8019594:	bd08      	pop	{r3, pc}
	...

08019598 <_XorPixel>:
 8019598:	4b15      	ldr	r3, [pc, #84]	; (80195f0 <_XorPixel+0x58>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801959e:	4616      	mov	r6, r2
 80195a0:	460d      	mov	r5, r1
 80195a2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80195a4:	f7fc fd88 	bl	80160b8 <GUI_ALLOC_LockH>
 80195a8:	4631      	mov	r1, r6
 80195aa:	9000      	str	r0, [sp, #0]
 80195ac:	4628      	mov	r0, r5
 80195ae:	f7ff ffcb 	bl	8019548 <_XY2PTR>
 80195b2:	9b00      	ldr	r3, [sp, #0]
 80195b4:	4604      	mov	r4, r0
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	691b      	ldr	r3, [r3, #16]
 80195ba:	689b      	ldr	r3, [r3, #8]
 80195bc:	4798      	blx	r3
 80195be:	6823      	ldr	r3, [r4, #0]
 80195c0:	4058      	eors	r0, r3
 80195c2:	9b00      	ldr	r3, [sp, #0]
 80195c4:	6020      	str	r0, [r4, #0]
 80195c6:	6958      	ldr	r0, [r3, #20]
 80195c8:	b160      	cbz	r0, 80195e4 <_XorPixel+0x4c>
 80195ca:	f7fc fd75 	bl	80160b8 <GUI_ALLOC_LockH>
 80195ce:	ac02      	add	r4, sp, #8
 80195d0:	6883      	ldr	r3, [r0, #8]
 80195d2:	4632      	mov	r2, r6
 80195d4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80195d8:	4629      	mov	r1, r5
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	4798      	blx	r3
 80195de:	4620      	mov	r0, r4
 80195e0:	f7fc fd78 	bl	80160d4 <GUI_ALLOC_UnlockH>
 80195e4:	4668      	mov	r0, sp
 80195e6:	f7fc fd75 	bl	80160d4 <GUI_ALLOC_UnlockH>
 80195ea:	b002      	add	sp, #8
 80195ec:	bd70      	pop	{r4, r5, r6, pc}
 80195ee:	bf00      	nop
 80195f0:	20000018 	.word	0x20000018

080195f4 <_SetPixelIndex>:
 80195f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80195f6:	461c      	mov	r4, r3
 80195f8:	4b10      	ldr	r3, [pc, #64]	; (801963c <_SetPixelIndex+0x48>)
 80195fa:	460d      	mov	r5, r1
 80195fc:	4616      	mov	r6, r2
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8019602:	f7fc fd59 	bl	80160b8 <GUI_ALLOC_LockH>
 8019606:	4631      	mov	r1, r6
 8019608:	9000      	str	r0, [sp, #0]
 801960a:	4628      	mov	r0, r5
 801960c:	f7ff ff9c 	bl	8019548 <_XY2PTR>
 8019610:	9b00      	ldr	r3, [sp, #0]
 8019612:	6004      	str	r4, [r0, #0]
 8019614:	6958      	ldr	r0, [r3, #20]
 8019616:	b160      	cbz	r0, 8019632 <_SetPixelIndex+0x3e>
 8019618:	f7fc fd4e 	bl	80160b8 <GUI_ALLOC_LockH>
 801961c:	ac02      	add	r4, sp, #8
 801961e:	6883      	ldr	r3, [r0, #8]
 8019620:	4632      	mov	r2, r6
 8019622:	f844 0d04 	str.w	r0, [r4, #-4]!
 8019626:	4629      	mov	r1, r5
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	4798      	blx	r3
 801962c:	4620      	mov	r0, r4
 801962e:	f7fc fd51 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019632:	4668      	mov	r0, sp
 8019634:	f7fc fd4e 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019638:	b002      	add	sp, #8
 801963a:	bd70      	pop	{r4, r5, r6, pc}
 801963c:	20000018 	.word	0x20000018

08019640 <_DrawVLine>:
 8019640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019644:	4c2a      	ldr	r4, [pc, #168]	; (80196f0 <_DrawVLine+0xb0>)
 8019646:	461e      	mov	r6, r3
 8019648:	4688      	mov	r8, r1
 801964a:	4615      	mov	r5, r2
 801964c:	6823      	ldr	r3, [r4, #0]
 801964e:	4627      	mov	r7, r4
 8019650:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8019652:	f7fc fd31 	bl	80160b8 <GUI_ALLOC_LockH>
 8019656:	9000      	str	r0, [sp, #0]
 8019658:	6940      	ldr	r0, [r0, #20]
 801965a:	b108      	cbz	r0, 8019660 <_DrawVLine+0x20>
 801965c:	f7fc fd2c 	bl	80160b8 <GUI_ALLOC_LockH>
 8019660:	9001      	str	r0, [sp, #4]
 8019662:	4629      	mov	r1, r5
 8019664:	4640      	mov	r0, r8
 8019666:	f7ff ff6f 	bl	8019548 <_XY2PTR>
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	4604      	mov	r4, r0
 801966e:	9a00      	ldr	r2, [sp, #0]
 8019670:	7c19      	ldrb	r1, [r3, #16]
 8019672:	07c9      	lsls	r1, r1, #31
 8019674:	d51d      	bpl.n	80196b2 <_DrawVLine+0x72>
 8019676:	6813      	ldr	r3, [r2, #0]
 8019678:	691b      	ldr	r3, [r3, #16]
 801967a:	689b      	ldr	r3, [r3, #8]
 801967c:	4798      	blx	r3
 801967e:	4607      	mov	r7, r0
 8019680:	9801      	ldr	r0, [sp, #4]
 8019682:	b120      	cbz	r0, 801968e <_DrawVLine+0x4e>
 8019684:	6883      	ldr	r3, [r0, #8]
 8019686:	462a      	mov	r2, r5
 8019688:	4641      	mov	r1, r8
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	4798      	blx	r3
 801968e:	6823      	ldr	r3, [r4, #0]
 8019690:	3501      	adds	r5, #1
 8019692:	407b      	eors	r3, r7
 8019694:	42b5      	cmp	r5, r6
 8019696:	6023      	str	r3, [r4, #0]
 8019698:	9b00      	ldr	r3, [sp, #0]
 801969a:	68db      	ldr	r3, [r3, #12]
 801969c:	441c      	add	r4, r3
 801969e:	ddef      	ble.n	8019680 <_DrawVLine+0x40>
 80196a0:	4668      	mov	r0, sp
 80196a2:	f7fc fd17 	bl	80160d4 <GUI_ALLOC_UnlockH>
 80196a6:	9b01      	ldr	r3, [sp, #4]
 80196a8:	b1f3      	cbz	r3, 80196e8 <_DrawVLine+0xa8>
 80196aa:	a801      	add	r0, sp, #4
 80196ac:	f7fc fd12 	bl	80160d4 <GUI_ALLOC_UnlockH>
 80196b0:	e01a      	b.n	80196e8 <_DrawVLine+0xa8>
 80196b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196b4:	68d7      	ldr	r7, [r2, #12]
 80196b6:	f8d3 9000 	ldr.w	r9, [r3]
 80196ba:	9b01      	ldr	r3, [sp, #4]
 80196bc:	b163      	cbz	r3, 80196d8 <_DrawVLine+0x98>
 80196be:	9801      	ldr	r0, [sp, #4]
 80196c0:	462a      	mov	r2, r5
 80196c2:	3501      	adds	r5, #1
 80196c4:	4641      	mov	r1, r8
 80196c6:	6883      	ldr	r3, [r0, #8]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	4798      	blx	r3
 80196cc:	42ae      	cmp	r6, r5
 80196ce:	f8c4 9000 	str.w	r9, [r4]
 80196d2:	443c      	add	r4, r7
 80196d4:	daf3      	bge.n	80196be <_DrawVLine+0x7e>
 80196d6:	e7e3      	b.n	80196a0 <_DrawVLine+0x60>
 80196d8:	1b75      	subs	r5, r6, r5
 80196da:	3501      	adds	r5, #1
 80196dc:	3d01      	subs	r5, #1
 80196de:	f8c4 9000 	str.w	r9, [r4]
 80196e2:	443c      	add	r4, r7
 80196e4:	d1fa      	bne.n	80196dc <_DrawVLine+0x9c>
 80196e6:	e7db      	b.n	80196a0 <_DrawVLine+0x60>
 80196e8:	b003      	add	sp, #12
 80196ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196ee:	bf00      	nop
 80196f0:	20000018 	.word	0x20000018

080196f4 <_FillRect>:
 80196f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f8:	4e2a      	ldr	r6, [pc, #168]	; (80197a4 <_FillRect+0xb0>)
 80196fa:	461c      	mov	r4, r3
 80196fc:	b085      	sub	sp, #20
 80196fe:	4689      	mov	r9, r1
 8019700:	6833      	ldr	r3, [r6, #0]
 8019702:	4615      	mov	r5, r2
 8019704:	ebc9 0404 	rsb	r4, r9, r4
 8019708:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801970a:	f7fc fcd5 	bl	80160b8 <GUI_ALLOC_LockH>
 801970e:	4629      	mov	r1, r5
 8019710:	9002      	str	r0, [sp, #8]
 8019712:	4648      	mov	r0, r9
 8019714:	f7ff ff18 	bl	8019548 <_XY2PTR>
 8019718:	9b02      	ldr	r3, [sp, #8]
 801971a:	6832      	ldr	r2, [r6, #0]
 801971c:	4607      	mov	r7, r0
 801971e:	6958      	ldr	r0, [r3, #20]
 8019720:	3401      	adds	r4, #1
 8019722:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8019724:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8019728:	f8d2 b000 	ldr.w	fp, [r2]
 801972c:	b330      	cbz	r0, 801977c <_FillRect+0x88>
 801972e:	f7fc fcc3 	bl	80160b8 <GUI_ALLOC_LockH>
 8019732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019734:	f10d 0810 	add.w	r8, sp, #16
 8019738:	462a      	mov	r2, r5
 801973a:	1b5b      	subs	r3, r3, r5
 801973c:	4649      	mov	r1, r9
 801973e:	f848 0d04 	str.w	r0, [r8, #-4]!
 8019742:	3301      	adds	r3, #1
 8019744:	9300      	str	r3, [sp, #0]
 8019746:	4623      	mov	r3, r4
 8019748:	f000 fbe1 	bl	8019f0e <GUI_USAGE_AddRect>
 801974c:	4640      	mov	r0, r8
 801974e:	f7fc fcc1 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019752:	e013      	b.n	801977c <_FillRect+0x88>
 8019754:	6833      	ldr	r3, [r6, #0]
 8019756:	7c1b      	ldrb	r3, [r3, #16]
 8019758:	07db      	lsls	r3, r3, #31
 801975a:	d513      	bpl.n	8019784 <_FillRect+0x90>
 801975c:	9b02      	ldr	r3, [sp, #8]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	691b      	ldr	r3, [r3, #16]
 8019762:	689b      	ldr	r3, [r3, #8]
 8019764:	4798      	blx	r3
 8019766:	463a      	mov	r2, r7
 8019768:	4623      	mov	r3, r4
 801976a:	6811      	ldr	r1, [r2, #0]
 801976c:	3b01      	subs	r3, #1
 801976e:	ea81 0100 	eor.w	r1, r1, r0
 8019772:	f842 1b04 	str.w	r1, [r2], #4
 8019776:	d1f8      	bne.n	801976a <_FillRect+0x76>
 8019778:	4457      	add	r7, sl
 801977a:	3501      	adds	r5, #1
 801977c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801977e:	429d      	cmp	r5, r3
 8019780:	dde8      	ble.n	8019754 <_FillRect+0x60>
 8019782:	e008      	b.n	8019796 <_FillRect+0xa2>
 8019784:	2c00      	cmp	r4, #0
 8019786:	ddf7      	ble.n	8019778 <_FillRect+0x84>
 8019788:	4623      	mov	r3, r4
 801978a:	463a      	mov	r2, r7
 801978c:	3b01      	subs	r3, #1
 801978e:	f842 bb04 	str.w	fp, [r2], #4
 8019792:	d1fb      	bne.n	801978c <_FillRect+0x98>
 8019794:	e7f0      	b.n	8019778 <_FillRect+0x84>
 8019796:	a802      	add	r0, sp, #8
 8019798:	f7fc fc9c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801979c:	b005      	add	sp, #20
 801979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197a2:	bf00      	nop
 80197a4:	20000018 	.word	0x20000018

080197a8 <_DrawHLine>:
 80197a8:	b507      	push	{r0, r1, r2, lr}
 80197aa:	9200      	str	r2, [sp, #0]
 80197ac:	f7ff ffa2 	bl	80196f4 <_FillRect>
 80197b0:	b003      	add	sp, #12
 80197b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080197b8 <_DrawBitmap>:
 80197b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197bc:	4da7      	ldr	r5, [pc, #668]	; (8019a5c <_DrawBitmap+0x2a4>)
 80197be:	b091      	sub	sp, #68	; 0x44
 80197c0:	460e      	mov	r6, r1
 80197c2:	9302      	str	r3, [sp, #8]
 80197c4:	682b      	ldr	r3, [r5, #0]
 80197c6:	9005      	str	r0, [sp, #20]
 80197c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80197ca:	9206      	str	r2, [sp, #24]
 80197cc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80197ce:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 80197d2:	2800      	cmp	r0, #0
 80197d4:	f000 837f 	beq.w	8019ed6 <_DrawBitmap+0x71e>
 80197d8:	f7fc fc6e 	bl	80160b8 <GUI_ALLOC_LockH>
 80197dc:	900e      	str	r0, [sp, #56]	; 0x38
 80197de:	6940      	ldr	r0, [r0, #20]
 80197e0:	b108      	cbz	r0, 80197e6 <_DrawBitmap+0x2e>
 80197e2:	f7fc fc69 	bl	80160b8 <GUI_ALLOC_LockH>
 80197e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80197e8:	a810      	add	r0, sp, #64	; 0x40
 80197ea:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 80197ee:	68db      	ldr	r3, [r3, #12]
 80197f0:	9308      	str	r3, [sp, #32]
 80197f2:	f7fc fc6f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 80197f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80197f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80197fa:	18f3      	adds	r3, r6, r3
 80197fc:	9303      	str	r3, [sp, #12]
 80197fe:	b150      	cbz	r0, 8019816 <_DrawBitmap+0x5e>
 8019800:	682b      	ldr	r3, [r5, #0]
 8019802:	7c1b      	ldrb	r3, [r3, #16]
 8019804:	079d      	lsls	r5, r3, #30
 8019806:	d406      	bmi.n	8019816 <_DrawBitmap+0x5e>
 8019808:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801980a:	9a06      	ldr	r2, [sp, #24]
 801980c:	9300      	str	r3, [sp, #0]
 801980e:	9903      	ldr	r1, [sp, #12]
 8019810:	9b02      	ldr	r3, [sp, #8]
 8019812:	f000 fb7c 	bl	8019f0e <GUI_USAGE_AddRect>
 8019816:	9906      	ldr	r1, [sp, #24]
 8019818:	9803      	ldr	r0, [sp, #12]
 801981a:	f7ff fe95 	bl	8019548 <_XY2PTR>
 801981e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019820:	4605      	mov	r5, r0
 8019822:	2b17      	cmp	r3, #23
 8019824:	dd66      	ble.n	80198f4 <_DrawBitmap+0x13c>
 8019826:	9b02      	ldr	r3, [sp, #8]
 8019828:	f04f 0b00 	mov.w	fp, #0
 801982c:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8019a64 <_DrawBitmap+0x2ac>
 8019830:	009b      	lsls	r3, r3, #2
 8019832:	9307      	str	r3, [sp, #28]
 8019834:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019836:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019838:	459b      	cmp	fp, r3
 801983a:	da57      	bge.n	80198ec <_DrawBitmap+0x134>
 801983c:	b130      	cbz	r0, 801984c <_DrawBitmap+0x94>
 801983e:	6883      	ldr	r3, [r0, #8]
 8019840:	9a06      	ldr	r2, [sp, #24]
 8019842:	685e      	ldr	r6, [r3, #4]
 8019844:	445a      	add	r2, fp
 8019846:	9b02      	ldr	r3, [sp, #8]
 8019848:	9903      	ldr	r1, [sp, #12]
 801984a:	47b0      	blx	r6
 801984c:	9b05      	ldr	r3, [sp, #20]
 801984e:	691b      	ldr	r3, [r3, #16]
 8019850:	68da      	ldr	r2, [r3, #12]
 8019852:	b132      	cbz	r2, 8019862 <_DrawBitmap+0xaa>
 8019854:	f8d9 3000 	ldr.w	r3, [r9]
 8019858:	4621      	mov	r1, r4
 801985a:	9a07      	ldr	r2, [sp, #28]
 801985c:	4628      	mov	r0, r5
 801985e:	4798      	blx	r3
 8019860:	e03d      	b.n	80198de <_DrawBitmap+0x126>
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8019868:	4798      	blx	r3
 801986a:	462f      	mov	r7, r5
 801986c:	0e03      	lsrs	r3, r0, #24
 801986e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8019872:	4626      	mov	r6, r4
 8019874:	9304      	str	r3, [sp, #16]
 8019876:	4642      	mov	r2, r8
 8019878:	4631      	mov	r1, r6
 801987a:	f04f 0a00 	mov.w	sl, #0
 801987e:	f851 3b04 	ldr.w	r3, [r1], #4
 8019882:	3a01      	subs	r2, #1
 8019884:	9804      	ldr	r0, [sp, #16]
 8019886:	0e1b      	lsrs	r3, r3, #24
 8019888:	4298      	cmp	r0, r3
 801988a:	9804      	ldr	r0, [sp, #16]
 801988c:	bf08      	it	eq
 801988e:	f10a 0a01 	addeq.w	sl, sl, #1
 8019892:	4298      	cmp	r0, r3
 8019894:	d011      	beq.n	80198ba <_DrawBitmap+0x102>
 8019896:	f1ba 0f00 	cmp.w	sl, #0
 801989a:	d011      	beq.n	80198c0 <_DrawBitmap+0x108>
 801989c:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80198a0:	4631      	mov	r1, r6
 80198a2:	4638      	mov	r0, r7
 80198a4:	ebca 0808 	rsb	r8, sl, r8
 80198a8:	461a      	mov	r2, r3
 80198aa:	9309      	str	r3, [sp, #36]	; 0x24
 80198ac:	f8d9 3000 	ldr.w	r3, [r9]
 80198b0:	4798      	blx	r3
 80198b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198b4:	441f      	add	r7, r3
 80198b6:	441e      	add	r6, r3
 80198b8:	e00e      	b.n	80198d8 <_DrawBitmap+0x120>
 80198ba:	2a00      	cmp	r2, #0
 80198bc:	d1df      	bne.n	801987e <_DrawBitmap+0xc6>
 80198be:	e7ea      	b.n	8019896 <_DrawBitmap+0xde>
 80198c0:	6830      	ldr	r0, [r6, #0]
 80198c2:	0e02      	lsrs	r2, r0, #24
 80198c4:	d004      	beq.n	80198d0 <_DrawBitmap+0x118>
 80198c6:	4b66      	ldr	r3, [pc, #408]	; (8019a60 <_DrawBitmap+0x2a8>)
 80198c8:	6839      	ldr	r1, [r7, #0]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	4798      	blx	r3
 80198ce:	6038      	str	r0, [r7, #0]
 80198d0:	3704      	adds	r7, #4
 80198d2:	3604      	adds	r6, #4
 80198d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80198d8:	f1b8 0f00 	cmp.w	r8, #0
 80198dc:	d1cb      	bne.n	8019876 <_DrawBitmap+0xbe>
 80198de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80198e0:	f10b 0b01 	add.w	fp, fp, #1
 80198e4:	441c      	add	r4, r3
 80198e6:	9b08      	ldr	r3, [sp, #32]
 80198e8:	441d      	add	r5, r3
 80198ea:	e7a3      	b.n	8019834 <_DrawBitmap+0x7c>
 80198ec:	2800      	cmp	r0, #0
 80198ee:	f040 82ef 	bne.w	8019ed0 <_DrawBitmap+0x718>
 80198f2:	e2f0      	b.n	8019ed6 <_DrawBitmap+0x71e>
 80198f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80198f6:	2b10      	cmp	r3, #16
 80198f8:	d137      	bne.n	801996a <_DrawBitmap+0x1b2>
 80198fa:	9b03      	ldr	r3, [sp, #12]
 80198fc:	f04f 0800 	mov.w	r8, #0
 8019900:	9a03      	ldr	r2, [sp, #12]
 8019902:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 8019906:	eba0 0583 	sub.w	r5, r0, r3, lsl #2
 801990a:	9b02      	ldr	r3, [sp, #8]
 801990c:	eb03 0a02 	add.w	sl, r3, r2
 8019910:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019912:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019914:	4598      	cmp	r8, r3
 8019916:	da24      	bge.n	8019962 <_DrawBitmap+0x1aa>
 8019918:	9b06      	ldr	r3, [sp, #24]
 801991a:	eb03 0908 	add.w	r9, r3, r8
 801991e:	b136      	cbz	r6, 801992e <_DrawBitmap+0x176>
 8019920:	68b3      	ldr	r3, [r6, #8]
 8019922:	464a      	mov	r2, r9
 8019924:	9903      	ldr	r1, [sp, #12]
 8019926:	4630      	mov	r0, r6
 8019928:	685f      	ldr	r7, [r3, #4]
 801992a:	9b02      	ldr	r3, [sp, #8]
 801992c:	47b8      	blx	r7
 801992e:	9f03      	ldr	r7, [sp, #12]
 8019930:	9b05      	ldr	r3, [sp, #20]
 8019932:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 8019936:	691b      	ldr	r3, [r3, #16]
 8019938:	685b      	ldr	r3, [r3, #4]
 801993a:	4798      	blx	r3
 801993c:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
 8019940:	b12e      	cbz	r6, 801994e <_DrawBitmap+0x196>
 8019942:	68b3      	ldr	r3, [r6, #8]
 8019944:	464a      	mov	r2, r9
 8019946:	4639      	mov	r1, r7
 8019948:	4630      	mov	r0, r6
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	4798      	blx	r3
 801994e:	3701      	adds	r7, #1
 8019950:	4557      	cmp	r7, sl
 8019952:	d1ed      	bne.n	8019930 <_DrawBitmap+0x178>
 8019954:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019956:	f108 0801 	add.w	r8, r8, #1
 801995a:	441c      	add	r4, r3
 801995c:	9b08      	ldr	r3, [sp, #32]
 801995e:	441d      	add	r5, r3
 8019960:	e7d6      	b.n	8019910 <_DrawBitmap+0x158>
 8019962:	2e00      	cmp	r6, #0
 8019964:	f040 82b4 	bne.w	8019ed0 <_DrawBitmap+0x718>
 8019968:	e2b5      	b.n	8019ed6 <_DrawBitmap+0x71e>
 801996a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801996c:	2b08      	cmp	r3, #8
 801996e:	f040 8081 	bne.w	8019a74 <_DrawBitmap+0x2bc>
 8019972:	9a03      	ldr	r2, [sp, #12]
 8019974:	f06f 0303 	mvn.w	r3, #3
 8019978:	9e06      	ldr	r6, [sp, #24]
 801997a:	4353      	muls	r3, r2
 801997c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8019a5c <_DrawBitmap+0x2a4>
 8019980:	9304      	str	r3, [sp, #16]
 8019982:	9b02      	ldr	r3, [sp, #8]
 8019984:	4413      	add	r3, r2
 8019986:	9305      	str	r3, [sp, #20]
 8019988:	9b06      	ldr	r3, [sp, #24]
 801998a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801998c:	1af3      	subs	r3, r6, r3
 801998e:	429a      	cmp	r2, r3
 8019990:	f340 829c 	ble.w	8019ecc <_DrawBitmap+0x714>
 8019994:	f8d9 3000 	ldr.w	r3, [r9]
 8019998:	7c1b      	ldrb	r3, [r3, #16]
 801999a:	f1bb 0f00 	cmp.w	fp, #0
 801999e:	d032      	beq.n	8019a06 <_DrawBitmap+0x24e>
 80199a0:	f013 0303 	ands.w	r3, r3, #3
 80199a4:	d00a      	beq.n	80199bc <_DrawBitmap+0x204>
 80199a6:	2b02      	cmp	r3, #2
 80199a8:	d15e      	bne.n	8019a68 <_DrawBitmap+0x2b0>
 80199aa:	9b04      	ldr	r3, [sp, #16]
 80199ac:	f104 3aff 	add.w	sl, r4, #4294967295
 80199b0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80199b4:	18eb      	adds	r3, r5, r3
 80199b6:	9f03      	ldr	r7, [sp, #12]
 80199b8:	9307      	str	r3, [sp, #28]
 80199ba:	e01f      	b.n	80199fc <_DrawBitmap+0x244>
 80199bc:	9a02      	ldr	r2, [sp, #8]
 80199be:	4623      	mov	r3, r4
 80199c0:	18a1      	adds	r1, r4, r2
 80199c2:	462a      	mov	r2, r5
 80199c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80199c8:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 80199cc:	428b      	cmp	r3, r1
 80199ce:	f842 0b04 	str.w	r0, [r2], #4
 80199d2:	d1f7      	bne.n	80199c4 <_DrawBitmap+0x20c>
 80199d4:	e048      	b.n	8019a68 <_DrawBitmap+0x2b0>
 80199d6:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80199da:	9a07      	ldr	r2, [sp, #28]
 80199dc:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80199e0:	f1b8 0f00 	cmp.w	r8, #0
 80199e4:	d006      	beq.n	80199f4 <_DrawBitmap+0x23c>
 80199e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80199ea:	4632      	mov	r2, r6
 80199ec:	4639      	mov	r1, r7
 80199ee:	4640      	mov	r0, r8
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	4798      	blx	r3
 80199f4:	3701      	adds	r7, #1
 80199f6:	9b05      	ldr	r3, [sp, #20]
 80199f8:	42bb      	cmp	r3, r7
 80199fa:	d035      	beq.n	8019a68 <_DrawBitmap+0x2b0>
 80199fc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d0f7      	beq.n	80199f4 <_DrawBitmap+0x23c>
 8019a04:	e7e7      	b.n	80199d6 <_DrawBitmap+0x21e>
 8019a06:	f013 0303 	ands.w	r3, r3, #3
 8019a0a:	d00a      	beq.n	8019a22 <_DrawBitmap+0x26a>
 8019a0c:	2b02      	cmp	r3, #2
 8019a0e:	d12b      	bne.n	8019a68 <_DrawBitmap+0x2b0>
 8019a10:	9b04      	ldr	r3, [sp, #16]
 8019a12:	f104 3aff 	add.w	sl, r4, #4294967295
 8019a16:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8019a1a:	18eb      	adds	r3, r5, r3
 8019a1c:	9f03      	ldr	r7, [sp, #12]
 8019a1e:	9307      	str	r3, [sp, #28]
 8019a20:	e017      	b.n	8019a52 <_DrawBitmap+0x29a>
 8019a22:	4b10      	ldr	r3, [pc, #64]	; (8019a64 <_DrawBitmap+0x2ac>)
 8019a24:	4621      	mov	r1, r4
 8019a26:	9a02      	ldr	r2, [sp, #8]
 8019a28:	4628      	mov	r0, r5
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	4798      	blx	r3
 8019a2e:	e01b      	b.n	8019a68 <_DrawBitmap+0x2b0>
 8019a30:	9a07      	ldr	r2, [sp, #28]
 8019a32:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8019a36:	f1b8 0f00 	cmp.w	r8, #0
 8019a3a:	d006      	beq.n	8019a4a <_DrawBitmap+0x292>
 8019a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019a40:	4632      	mov	r2, r6
 8019a42:	4639      	mov	r1, r7
 8019a44:	4640      	mov	r0, r8
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	4798      	blx	r3
 8019a4a:	3701      	adds	r7, #1
 8019a4c:	9b05      	ldr	r3, [sp, #20]
 8019a4e:	42bb      	cmp	r3, r7
 8019a50:	d00a      	beq.n	8019a68 <_DrawBitmap+0x2b0>
 8019a52:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d0f7      	beq.n	8019a4a <_DrawBitmap+0x292>
 8019a5a:	e7e9      	b.n	8019a30 <_DrawBitmap+0x278>
 8019a5c:	20000018 	.word	0x20000018
 8019a60:	20000030 	.word	0x20000030
 8019a64:	20000038 	.word	0x20000038
 8019a68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019a6a:	3601      	adds	r6, #1
 8019a6c:	441c      	add	r4, r3
 8019a6e:	9b08      	ldr	r3, [sp, #32]
 8019a70:	441d      	add	r5, r3
 8019a72:	e789      	b.n	8019988 <_DrawBitmap+0x1d0>
 8019a74:	4bb3      	ldr	r3, [pc, #716]	; (8019d44 <_DrawBitmap+0x58c>)
 8019a76:	f1bb 0f00 	cmp.w	fp, #0
 8019a7a:	bf08      	it	eq
 8019a7c:	469b      	moveq	fp, r3
 8019a7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019a80:	005b      	lsls	r3, r3, #1
 8019a82:	930a      	str	r3, [sp, #40]	; 0x28
 8019a84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019a86:	009b      	lsls	r3, r3, #2
 8019a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a8a:	1c63      	adds	r3, r4, #1
 8019a8c:	9304      	str	r3, [sp, #16]
 8019a8e:	1d03      	adds	r3, r0, #4
 8019a90:	9307      	str	r3, [sp, #28]
 8019a92:	9b06      	ldr	r3, [sp, #24]
 8019a94:	9305      	str	r3, [sp, #20]
 8019a96:	9b07      	ldr	r3, [sp, #28]
 8019a98:	9a06      	ldr	r2, [sp, #24]
 8019a9a:	1f1c      	subs	r4, r3, #4
 8019a9c:	9b04      	ldr	r3, [sp, #16]
 8019a9e:	f103 3aff 	add.w	sl, r3, #4294967295
 8019aa2:	9b05      	ldr	r3, [sp, #20]
 8019aa4:	1a9b      	subs	r3, r3, r2
 8019aa6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019aa8:	429a      	cmp	r2, r3
 8019aaa:	f340 820f 	ble.w	8019ecc <_DrawBitmap+0x714>
 8019aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019ab0:	2b02      	cmp	r3, #2
 8019ab2:	f000 809b 	beq.w	8019bec <_DrawBitmap+0x434>
 8019ab6:	2b04      	cmp	r3, #4
 8019ab8:	f000 8132 	beq.w	8019d20 <_DrawBitmap+0x568>
 8019abc:	2b01      	cmp	r3, #1
 8019abe:	f040 81f9 	bne.w	8019eb4 <_DrawBitmap+0x6fc>
 8019ac2:	4ba1      	ldr	r3, [pc, #644]	; (8019d48 <_DrawBitmap+0x590>)
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8019ac8:	f7fc faf6 	bl	80160b8 <GUI_ALLOC_LockH>
 8019acc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019ace:	4a9f      	ldr	r2, [pc, #636]	; (8019d4c <_DrawBitmap+0x594>)
 8019ad0:	f1c3 0508 	rsb	r5, r3, #8
 8019ad4:	9b04      	ldr	r3, [sp, #16]
 8019ad6:	900e      	str	r0, [sp, #56]	; 0x38
 8019ad8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019adc:	9f02      	ldr	r7, [sp, #8]
 8019ade:	5cd6      	ldrb	r6, [r2, r3]
 8019ae0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019ae2:	411e      	asrs	r6, r3
 8019ae4:	4b98      	ldr	r3, [pc, #608]	; (8019d48 <_DrawBitmap+0x590>)
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	7c1b      	ldrb	r3, [r3, #16]
 8019aea:	f003 0303 	and.w	r3, r3, #3
 8019aee:	2b02      	cmp	r3, #2
 8019af0:	d01d      	beq.n	8019b2e <_DrawBitmap+0x376>
 8019af2:	2b03      	cmp	r3, #3
 8019af4:	d056      	beq.n	8019ba4 <_DrawBitmap+0x3ec>
 8019af6:	2b01      	cmp	r3, #1
 8019af8:	d054      	beq.n	8019ba4 <_DrawBitmap+0x3ec>
 8019afa:	42bd      	cmp	r5, r7
 8019afc:	4622      	mov	r2, r4
 8019afe:	bf28      	it	cs
 8019b00:	463d      	movcs	r5, r7
 8019b02:	1b7f      	subs	r7, r7, r5
 8019b04:	462b      	mov	r3, r5
 8019b06:	f006 0101 	and.w	r1, r6, #1
 8019b0a:	3b01      	subs	r3, #1
 8019b0c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019b10:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8019b14:	f842 1b04 	str.w	r1, [r2], #4
 8019b18:	d1f5      	bne.n	8019b06 <_DrawBitmap+0x34e>
 8019b1a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8019b1e:	2f00      	cmp	r7, #0
 8019b20:	d060      	beq.n	8019be4 <_DrawBitmap+0x42c>
 8019b22:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8019b26:	2508      	movs	r5, #8
 8019b28:	4a88      	ldr	r2, [pc, #544]	; (8019d4c <_DrawBitmap+0x594>)
 8019b2a:	5cd6      	ldrb	r6, [r2, r3]
 8019b2c:	e7e5      	b.n	8019afa <_DrawBitmap+0x342>
 8019b2e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8019b32:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8019b36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8019b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8019b3c:	42bd      	cmp	r5, r7
 8019b3e:	bf28      	it	cs
 8019b40:	463d      	movcs	r5, r7
 8019b42:	1b7f      	subs	r7, r7, r5
 8019b44:	f1b9 0f00 	cmp.w	r9, #0
 8019b48:	d021      	beq.n	8019b8e <_DrawBitmap+0x3d6>
 8019b4a:	b91e      	cbnz	r6, 8019b54 <_DrawBitmap+0x39c>
 8019b4c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8019b50:	44a8      	add	r8, r5
 8019b52:	e020      	b.n	8019b96 <_DrawBitmap+0x3de>
 8019b54:	07f0      	lsls	r0, r6, #31
 8019b56:	d508      	bpl.n	8019b6a <_DrawBitmap+0x3b2>
 8019b58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019b5c:	4641      	mov	r1, r8
 8019b5e:	9a05      	ldr	r2, [sp, #20]
 8019b60:	4648      	mov	r0, r9
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	4798      	blx	r3
 8019b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b68:	6023      	str	r3, [r4, #0]
 8019b6a:	3d01      	subs	r5, #1
 8019b6c:	f108 0801 	add.w	r8, r8, #1
 8019b70:	f104 0404 	add.w	r4, r4, #4
 8019b74:	d00f      	beq.n	8019b96 <_DrawBitmap+0x3de>
 8019b76:	0876      	lsrs	r6, r6, #1
 8019b78:	e7e7      	b.n	8019b4a <_DrawBitmap+0x392>
 8019b7a:	07f1      	lsls	r1, r6, #31
 8019b7c:	f104 0404 	add.w	r4, r4, #4
 8019b80:	bf44      	itt	mi
 8019b82:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 8019b84:	f844 3c04 	strmi.w	r3, [r4, #-4]
 8019b88:	3d01      	subs	r5, #1
 8019b8a:	d004      	beq.n	8019b96 <_DrawBitmap+0x3de>
 8019b8c:	0876      	lsrs	r6, r6, #1
 8019b8e:	2e00      	cmp	r6, #0
 8019b90:	d1f3      	bne.n	8019b7a <_DrawBitmap+0x3c2>
 8019b92:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8019b96:	b32f      	cbz	r7, 8019be4 <_DrawBitmap+0x42c>
 8019b98:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8019b9c:	2508      	movs	r5, #8
 8019b9e:	4a6b      	ldr	r2, [pc, #428]	; (8019d4c <_DrawBitmap+0x594>)
 8019ba0:	5cd6      	ldrb	r6, [r2, r3]
 8019ba2:	e7cb      	b.n	8019b3c <_DrawBitmap+0x384>
 8019ba4:	6803      	ldr	r3, [r0, #0]
 8019ba6:	691b      	ldr	r3, [r3, #16]
 8019ba8:	689b      	ldr	r3, [r3, #8]
 8019baa:	4798      	blx	r3
 8019bac:	42bd      	cmp	r5, r7
 8019bae:	4623      	mov	r3, r4
 8019bb0:	bf28      	it	cs
 8019bb2:	463d      	movcs	r5, r7
 8019bb4:	1b7f      	subs	r7, r7, r5
 8019bb6:	4629      	mov	r1, r5
 8019bb8:	07f2      	lsls	r2, r6, #31
 8019bba:	f103 0304 	add.w	r3, r3, #4
 8019bbe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019bc2:	bf42      	ittt	mi
 8019bc4:	f853 2c04 	ldrmi.w	r2, [r3, #-4]
 8019bc8:	4042      	eormi	r2, r0
 8019bca:	f843 2c04 	strmi.w	r2, [r3, #-4]
 8019bce:	3901      	subs	r1, #1
 8019bd0:	d1f2      	bne.n	8019bb8 <_DrawBitmap+0x400>
 8019bd2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8019bd6:	b12f      	cbz	r7, 8019be4 <_DrawBitmap+0x42c>
 8019bd8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8019bdc:	2508      	movs	r5, #8
 8019bde:	4a5b      	ldr	r2, [pc, #364]	; (8019d4c <_DrawBitmap+0x594>)
 8019be0:	5cd6      	ldrb	r6, [r2, r3]
 8019be2:	e7e3      	b.n	8019bac <_DrawBitmap+0x3f4>
 8019be4:	a80e      	add	r0, sp, #56	; 0x38
 8019be6:	f7fc fa75 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019bea:	e163      	b.n	8019eb4 <_DrawBitmap+0x6fc>
 8019bec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019bee:	f1c3 0504 	rsb	r5, r3, #4
 8019bf2:	9b04      	ldr	r3, [sp, #16]
 8019bf4:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8019bf8:	b2ed      	uxtb	r5, r5
 8019bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bfc:	409e      	lsls	r6, r3
 8019bfe:	4b52      	ldr	r3, [pc, #328]	; (8019d48 <_DrawBitmap+0x590>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	b2f6      	uxtb	r6, r6
 8019c04:	7c1b      	ldrb	r3, [r3, #16]
 8019c06:	f003 0303 	and.w	r3, r3, #3
 8019c0a:	2b01      	cmp	r3, #1
 8019c0c:	d009      	beq.n	8019c22 <_DrawBitmap+0x46a>
 8019c0e:	d30a      	bcc.n	8019c26 <_DrawBitmap+0x46e>
 8019c10:	2b02      	cmp	r3, #2
 8019c12:	f040 814f 	bne.w	8019eb4 <_DrawBitmap+0x6fc>
 8019c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c18:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8019c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c1e:	9f03      	ldr	r7, [sp, #12]
 8019c20:	e035      	b.n	8019c8e <_DrawBitmap+0x4d6>
 8019c22:	9b02      	ldr	r3, [sp, #8]
 8019c24:	e075      	b.n	8019d12 <_DrawBitmap+0x55a>
 8019c26:	9b02      	ldr	r3, [sp, #8]
 8019c28:	429d      	cmp	r5, r3
 8019c2a:	4621      	mov	r1, r4
 8019c2c:	bfc8      	it	gt
 8019c2e:	b2dd      	uxtbgt	r5, r3
 8019c30:	1b5b      	subs	r3, r3, r5
 8019c32:	462a      	mov	r2, r5
 8019c34:	09b0      	lsrs	r0, r6, #6
 8019c36:	3a01      	subs	r2, #1
 8019c38:	00b6      	lsls	r6, r6, #2
 8019c3a:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 8019c3e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8019c42:	b2f6      	uxtb	r6, r6
 8019c44:	f841 0b04 	str.w	r0, [r1], #4
 8019c48:	d1f4      	bne.n	8019c34 <_DrawBitmap+0x47c>
 8019c4a:	3d01      	subs	r5, #1
 8019c4c:	b2ed      	uxtb	r5, r5
 8019c4e:	3501      	adds	r5, #1
 8019c50:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	f000 812d 	beq.w	8019eb4 <_DrawBitmap+0x6fc>
 8019c5a:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8019c5e:	2504      	movs	r5, #4
 8019c60:	e7e2      	b.n	8019c28 <_DrawBitmap+0x470>
 8019c62:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8019c66:	d125      	bne.n	8019cb4 <_DrawBitmap+0x4fc>
 8019c68:	f109 0901 	add.w	r9, r9, #1
 8019c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c6e:	00b6      	lsls	r6, r6, #2
 8019c70:	4599      	cmp	r9, r3
 8019c72:	b2f6      	uxtb	r6, r6
 8019c74:	d1f5      	bne.n	8019c62 <_DrawBitmap+0x4aa>
 8019c76:	1c6b      	adds	r3, r5, #1
 8019c78:	3701      	adds	r7, #1
 8019c7a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8019c7e:	442f      	add	r7, r5
 8019c80:	f1b8 0f00 	cmp.w	r8, #0
 8019c84:	f000 8116 	beq.w	8019eb4 <_DrawBitmap+0x6fc>
 8019c88:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8019c8c:	2504      	movs	r5, #4
 8019c8e:	4545      	cmp	r5, r8
 8019c90:	f107 0301 	add.w	r3, r7, #1
 8019c94:	46b9      	mov	r9, r7
 8019c96:	bfc8      	it	gt
 8019c98:	fa5f f588 	uxtbgt.w	r5, r8
 8019c9c:	ebc5 0808 	rsb	r8, r5, r8
 8019ca0:	3d01      	subs	r5, #1
 8019ca2:	b2ed      	uxtb	r5, r5
 8019ca4:	442b      	add	r3, r5
 8019ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8019ca8:	f06f 0303 	mvn.w	r3, #3
 8019cac:	fb03 4307 	mla	r3, r3, r7, r4
 8019cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8019cb2:	e7d6      	b.n	8019c62 <_DrawBitmap+0x4aa>
 8019cb4:	09b3      	lsrs	r3, r6, #6
 8019cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019cb8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8019cbc:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 8019cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d0d0      	beq.n	8019c68 <_DrawBitmap+0x4b0>
 8019cc6:	689b      	ldr	r3, [r3, #8]
 8019cc8:	4649      	mov	r1, r9
 8019cca:	9a05      	ldr	r2, [sp, #20]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cd0:	4798      	blx	r3
 8019cd2:	e7c9      	b.n	8019c68 <_DrawBitmap+0x4b0>
 8019cd4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8019cd8:	f102 32ff 	add.w	r2, r2, #4294967295
 8019cdc:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8019ce0:	f100 0004 	add.w	r0, r0, #4
 8019ce4:	bf18      	it	ne
 8019ce6:	f850 1c04 	ldrne.w	r1, [r0, #-4]
 8019cea:	b2f6      	uxtb	r6, r6
 8019cec:	bf1c      	itt	ne
 8019cee:	f081 01ff 	eorne.w	r1, r1, #255	; 0xff
 8019cf2:	f840 1c04 	strne.w	r1, [r0, #-4]
 8019cf6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8019cfa:	d1eb      	bne.n	8019cd4 <_DrawBitmap+0x51c>
 8019cfc:	3d01      	subs	r5, #1
 8019cfe:	b2ed      	uxtb	r5, r5
 8019d00:	3501      	adds	r5, #1
 8019d02:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	f000 80d4 	beq.w	8019eb4 <_DrawBitmap+0x6fc>
 8019d0c:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8019d10:	2504      	movs	r5, #4
 8019d12:	429d      	cmp	r5, r3
 8019d14:	4620      	mov	r0, r4
 8019d16:	bfc8      	it	gt
 8019d18:	b2dd      	uxtbgt	r5, r3
 8019d1a:	1b5b      	subs	r3, r3, r5
 8019d1c:	462a      	mov	r2, r5
 8019d1e:	e7d9      	b.n	8019cd4 <_DrawBitmap+0x51c>
 8019d20:	9b04      	ldr	r3, [sp, #16]
 8019d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d24:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019d28:	4093      	lsls	r3, r2
 8019d2a:	4a07      	ldr	r2, [pc, #28]	; (8019d48 <_DrawBitmap+0x590>)
 8019d2c:	6812      	ldr	r2, [r2, #0]
 8019d2e:	b2dd      	uxtb	r5, r3
 8019d30:	7c12      	ldrb	r2, [r2, #16]
 8019d32:	f002 0203 	and.w	r2, r2, #3
 8019d36:	2a01      	cmp	r2, #1
 8019d38:	f000 8093 	beq.w	8019e62 <_DrawBitmap+0x6aa>
 8019d3c:	d308      	bcc.n	8019d50 <_DrawBitmap+0x598>
 8019d3e:	2a02      	cmp	r2, #2
 8019d40:	d037      	beq.n	8019db2 <_DrawBitmap+0x5fa>
 8019d42:	e0b7      	b.n	8019eb4 <_DrawBitmap+0x6fc>
 8019d44:	08023518 	.word	0x08023518
 8019d48:	20000018 	.word	0x20000018
 8019d4c:	08023590 	.word	0x08023590
 8019d50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019d52:	b153      	cbz	r3, 8019d6a <_DrawBitmap+0x5b2>
 8019d54:	092d      	lsrs	r5, r5, #4
 8019d56:	9a04      	ldr	r2, [sp, #16]
 8019d58:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8019d5c:	4692      	mov	sl, r2
 8019d5e:	6023      	str	r3, [r4, #0]
 8019d60:	9b02      	ldr	r3, [sp, #8]
 8019d62:	9c07      	ldr	r4, [sp, #28]
 8019d64:	3b01      	subs	r3, #1
 8019d66:	7815      	ldrb	r5, [r2, #0]
 8019d68:	e000      	b.n	8019d6c <_DrawBitmap+0x5b4>
 8019d6a:	9b02      	ldr	r3, [sp, #8]
 8019d6c:	2b01      	cmp	r3, #1
 8019d6e:	dd18      	ble.n	8019da2 <_DrawBitmap+0x5ea>
 8019d70:	1058      	asrs	r0, r3, #1
 8019d72:	f104 0208 	add.w	r2, r4, #8
 8019d76:	f003 0301 	and.w	r3, r3, #1
 8019d7a:	eb0a 0600 	add.w	r6, sl, r0
 8019d7e:	0929      	lsrs	r1, r5, #4
 8019d80:	f005 050f 	and.w	r5, r5, #15
 8019d84:	3208      	adds	r2, #8
 8019d86:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8019d8a:	f842 1c10 	str.w	r1, [r2, #-16]
 8019d8e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8019d92:	f842 1c0c 	str.w	r1, [r2, #-12]
 8019d96:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8019d9a:	45b2      	cmp	sl, r6
 8019d9c:	d1ef      	bne.n	8019d7e <_DrawBitmap+0x5c6>
 8019d9e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	f000 8086 	beq.w	8019eb4 <_DrawBitmap+0x6fc>
 8019da8:	092d      	lsrs	r5, r5, #4
 8019daa:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8019dae:	6023      	str	r3, [r4, #0]
 8019db0:	e080      	b.n	8019eb4 <_DrawBitmap+0x6fc>
 8019db2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019db4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019db6:	b1ba      	cbz	r2, 8019de8 <_DrawBitmap+0x630>
 8019db8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8019dbc:	d00a      	beq.n	8019dd4 <_DrawBitmap+0x61c>
 8019dbe:	092d      	lsrs	r5, r5, #4
 8019dc0:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8019dc4:	6023      	str	r3, [r4, #0]
 8019dc6:	b12e      	cbz	r6, 8019dd4 <_DrawBitmap+0x61c>
 8019dc8:	68b3      	ldr	r3, [r6, #8]
 8019dca:	4630      	mov	r0, r6
 8019dcc:	9a05      	ldr	r2, [sp, #20]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	9903      	ldr	r1, [sp, #12]
 8019dd2:	4798      	blx	r3
 8019dd4:	9b03      	ldr	r3, [sp, #12]
 8019dd6:	9c07      	ldr	r4, [sp, #28]
 8019dd8:	1c5f      	adds	r7, r3, #1
 8019dda:	9b02      	ldr	r3, [sp, #8]
 8019ddc:	f103 38ff 	add.w	r8, r3, #4294967295
 8019de0:	9b04      	ldr	r3, [sp, #16]
 8019de2:	781d      	ldrb	r5, [r3, #0]
 8019de4:	469a      	mov	sl, r3
 8019de6:	e00f      	b.n	8019e08 <_DrawBitmap+0x650>
 8019de8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8019dec:	9f03      	ldr	r7, [sp, #12]
 8019dee:	e00b      	b.n	8019e08 <_DrawBitmap+0x650>
 8019df0:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8019df4:	d10c      	bne.n	8019e10 <_DrawBitmap+0x658>
 8019df6:	f015 050f 	ands.w	r5, r5, #15
 8019dfa:	d116      	bne.n	8019e2a <_DrawBitmap+0x672>
 8019dfc:	3408      	adds	r4, #8
 8019dfe:	3702      	adds	r7, #2
 8019e00:	f1a8 0802 	sub.w	r8, r8, #2
 8019e04:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8019e08:	f1b8 0f01 	cmp.w	r8, #1
 8019e0c:	dcf0      	bgt.n	8019df0 <_DrawBitmap+0x638>
 8019e0e:	e018      	b.n	8019e42 <_DrawBitmap+0x68a>
 8019e10:	092b      	lsrs	r3, r5, #4
 8019e12:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8019e16:	6023      	str	r3, [r4, #0]
 8019e18:	2e00      	cmp	r6, #0
 8019e1a:	d0ec      	beq.n	8019df6 <_DrawBitmap+0x63e>
 8019e1c:	68b3      	ldr	r3, [r6, #8]
 8019e1e:	4639      	mov	r1, r7
 8019e20:	9a05      	ldr	r2, [sp, #20]
 8019e22:	4630      	mov	r0, r6
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	4798      	blx	r3
 8019e28:	e7e5      	b.n	8019df6 <_DrawBitmap+0x63e>
 8019e2a:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8019e2e:	6063      	str	r3, [r4, #4]
 8019e30:	2e00      	cmp	r6, #0
 8019e32:	d0e3      	beq.n	8019dfc <_DrawBitmap+0x644>
 8019e34:	68b3      	ldr	r3, [r6, #8]
 8019e36:	1c79      	adds	r1, r7, #1
 8019e38:	9a05      	ldr	r2, [sp, #20]
 8019e3a:	4630      	mov	r0, r6
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	4798      	blx	r3
 8019e40:	e7dc      	b.n	8019dfc <_DrawBitmap+0x644>
 8019e42:	f1b8 0f00 	cmp.w	r8, #0
 8019e46:	d035      	beq.n	8019eb4 <_DrawBitmap+0x6fc>
 8019e48:	092d      	lsrs	r5, r5, #4
 8019e4a:	d033      	beq.n	8019eb4 <_DrawBitmap+0x6fc>
 8019e4c:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8019e50:	6023      	str	r3, [r4, #0]
 8019e52:	b37e      	cbz	r6, 8019eb4 <_DrawBitmap+0x6fc>
 8019e54:	68b3      	ldr	r3, [r6, #8]
 8019e56:	4639      	mov	r1, r7
 8019e58:	9a05      	ldr	r2, [sp, #20]
 8019e5a:	4630      	mov	r0, r6
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	4798      	blx	r3
 8019e60:	e028      	b.n	8019eb4 <_DrawBitmap+0x6fc>
 8019e62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019e64:	9a02      	ldr	r2, [sp, #8]
 8019e66:	f1c3 0302 	rsb	r3, r3, #2
 8019e6a:	b2db      	uxtb	r3, r3
 8019e6c:	4293      	cmp	r3, r2
 8019e6e:	4626      	mov	r6, r4
 8019e70:	bfc8      	it	gt
 8019e72:	b2d3      	uxtbgt	r3, r2
 8019e74:	1ad2      	subs	r2, r2, r3
 8019e76:	4619      	mov	r1, r3
 8019e78:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8019e7c:	f101 31ff 	add.w	r1, r1, #4294967295
 8019e80:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019e84:	f106 0604 	add.w	r6, r6, #4
 8019e88:	bf18      	it	ne
 8019e8a:	f856 0c04 	ldrne.w	r0, [r6, #-4]
 8019e8e:	b2ed      	uxtb	r5, r5
 8019e90:	bf1c      	itt	ne
 8019e92:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8019e96:	f846 0c04 	strne.w	r0, [r6, #-4]
 8019e9a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8019e9e:	d1eb      	bne.n	8019e78 <_DrawBitmap+0x6c0>
 8019ea0:	3b01      	subs	r3, #1
 8019ea2:	b2db      	uxtb	r3, r3
 8019ea4:	3301      	adds	r3, #1
 8019ea6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8019eaa:	b11a      	cbz	r2, 8019eb4 <_DrawBitmap+0x6fc>
 8019eac:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8019eb0:	2302      	movs	r3, #2
 8019eb2:	e7db      	b.n	8019e6c <_DrawBitmap+0x6b4>
 8019eb4:	9b05      	ldr	r3, [sp, #20]
 8019eb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019eb8:	3301      	adds	r3, #1
 8019eba:	9305      	str	r3, [sp, #20]
 8019ebc:	9b04      	ldr	r3, [sp, #16]
 8019ebe:	4413      	add	r3, r2
 8019ec0:	9a08      	ldr	r2, [sp, #32]
 8019ec2:	9304      	str	r3, [sp, #16]
 8019ec4:	9b07      	ldr	r3, [sp, #28]
 8019ec6:	4413      	add	r3, r2
 8019ec8:	9307      	str	r3, [sp, #28]
 8019eca:	e5e4      	b.n	8019a96 <_DrawBitmap+0x2de>
 8019ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ece:	b113      	cbz	r3, 8019ed6 <_DrawBitmap+0x71e>
 8019ed0:	a80f      	add	r0, sp, #60	; 0x3c
 8019ed2:	f7fc f8ff 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019ed6:	b011      	add	sp, #68	; 0x44
 8019ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019edc <GUI_USAGE_DecUseCnt>:
 8019edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ede:	4605      	mov	r5, r0
 8019ee0:	f7fd f9ca 	bl	8017278 <GUI_Lock>
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	f7fc f8e7 	bl	80160b8 <GUI_ALLOC_LockH>
 8019eea:	8984      	ldrh	r4, [r0, #12]
 8019eec:	ab02      	add	r3, sp, #8
 8019eee:	3c01      	subs	r4, #1
 8019ef0:	f843 0d04 	str.w	r0, [r3, #-4]!
 8019ef4:	b224      	sxth	r4, r4
 8019ef6:	8184      	strh	r4, [r0, #12]
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7fc f8eb 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019efe:	b914      	cbnz	r4, 8019f06 <GUI_USAGE_DecUseCnt+0x2a>
 8019f00:	4628      	mov	r0, r5
 8019f02:	f7fc f917 	bl	8016134 <GUI_ALLOC_Free>
 8019f06:	f7fd f9ad 	bl	8017264 <GUI_Unlock>
 8019f0a:	b003      	add	sp, #12
 8019f0c:	bd30      	pop	{r4, r5, pc}

08019f0e <GUI_USAGE_AddRect>:
 8019f0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f12:	9c08      	ldr	r4, [sp, #32]
 8019f14:	4605      	mov	r5, r0
 8019f16:	4688      	mov	r8, r1
 8019f18:	4699      	mov	r9, r3
 8019f1a:	4414      	add	r4, r2
 8019f1c:	68ab      	ldr	r3, [r5, #8]
 8019f1e:	1c56      	adds	r6, r2, #1
 8019f20:	4641      	mov	r1, r8
 8019f22:	4628      	mov	r0, r5
 8019f24:	685f      	ldr	r7, [r3, #4]
 8019f26:	464b      	mov	r3, r9
 8019f28:	47b8      	blx	r7
 8019f2a:	42b4      	cmp	r4, r6
 8019f2c:	4632      	mov	r2, r6
 8019f2e:	d1f5      	bne.n	8019f1c <GUI_USAGE_AddRect+0xe>
 8019f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019f34 <_ClipX>:
 8019f34:	b570      	push	{r4, r5, r6, lr}
 8019f36:	4c0f      	ldr	r4, [pc, #60]	; (8019f74 <_ClipX+0x40>)
 8019f38:	680d      	ldr	r5, [r1, #0]
 8019f3a:	6826      	ldr	r6, [r4, #0]
 8019f3c:	4405      	add	r5, r0
 8019f3e:	f9b6 400c 	ldrsh.w	r4, [r6, #12]
 8019f42:	3d01      	subs	r5, #1
 8019f44:	1b2c      	subs	r4, r5, r4
 8019f46:	2c00      	cmp	r4, #0
 8019f48:	bfc8      	it	gt
 8019f4a:	1b00      	subgt	r0, r0, r4
 8019f4c:	6010      	str	r0, [r2, #0]
 8019f4e:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8019f52:	680c      	ldr	r4, [r1, #0]
 8019f54:	42a0      	cmp	r0, r4
 8019f56:	dd09      	ble.n	8019f6c <_ClipX+0x38>
 8019f58:	1b00      	subs	r0, r0, r4
 8019f5a:	6018      	str	r0, [r3, #0]
 8019f5c:	680c      	ldr	r4, [r1, #0]
 8019f5e:	4420      	add	r0, r4
 8019f60:	6008      	str	r0, [r1, #0]
 8019f62:	6811      	ldr	r1, [r2, #0]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	1ac9      	subs	r1, r1, r3
 8019f68:	6011      	str	r1, [r2, #0]
 8019f6a:	bd70      	pop	{r4, r5, r6, pc}
 8019f6c:	2200      	movs	r2, #0
 8019f6e:	601a      	str	r2, [r3, #0]
 8019f70:	bd70      	pop	{r4, r5, r6, pc}
 8019f72:	bf00      	nop
 8019f74:	20000018 	.word	0x20000018

08019f78 <_ClipY>:
 8019f78:	b570      	push	{r4, r5, r6, lr}
 8019f7a:	4c0f      	ldr	r4, [pc, #60]	; (8019fb8 <_ClipY+0x40>)
 8019f7c:	680d      	ldr	r5, [r1, #0]
 8019f7e:	6826      	ldr	r6, [r4, #0]
 8019f80:	4405      	add	r5, r0
 8019f82:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
 8019f86:	3d01      	subs	r5, #1
 8019f88:	1b2c      	subs	r4, r5, r4
 8019f8a:	2c00      	cmp	r4, #0
 8019f8c:	bfc8      	it	gt
 8019f8e:	1b00      	subgt	r0, r0, r4
 8019f90:	6010      	str	r0, [r2, #0]
 8019f92:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
 8019f96:	680c      	ldr	r4, [r1, #0]
 8019f98:	4284      	cmp	r4, r0
 8019f9a:	da09      	bge.n	8019fb0 <_ClipY+0x38>
 8019f9c:	1b00      	subs	r0, r0, r4
 8019f9e:	6018      	str	r0, [r3, #0]
 8019fa0:	680c      	ldr	r4, [r1, #0]
 8019fa2:	4420      	add	r0, r4
 8019fa4:	6008      	str	r0, [r1, #0]
 8019fa6:	6811      	ldr	r1, [r2, #0]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	1ac9      	subs	r1, r1, r3
 8019fac:	6011      	str	r1, [r2, #0]
 8019fae:	bd70      	pop	{r4, r5, r6, pc}
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	601a      	str	r2, [r3, #0]
 8019fb4:	bd70      	pop	{r4, r5, r6, pc}
 8019fb6:	bf00      	nop
 8019fb8:	20000018 	.word	0x20000018

08019fbc <_WriteToActiveAlpha>:
 8019fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fc0:	b095      	sub	sp, #84	; 0x54
 8019fc2:	461f      	mov	r7, r3
 8019fc4:	4680      	mov	r8, r0
 8019fc6:	910d      	str	r1, [sp, #52]	; 0x34
 8019fc8:	920c      	str	r2, [sp, #48]	; 0x30
 8019fca:	f7fc f875 	bl	80160b8 <GUI_ALLOC_LockH>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	a814      	add	r0, sp, #80	; 0x50
 8019fd2:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8019fd6:	f840 3d18 	str.w	r3, [r0, #-24]!
 8019fda:	f9b3 500a 	ldrsh.w	r5, [r3, #10]
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	691b      	ldr	r3, [r3, #16]
 8019fe2:	685b      	ldr	r3, [r3, #4]
 8019fe4:	9307      	str	r3, [sp, #28]
 8019fe6:	f7fc f875 	bl	80160d4 <GUI_ALLOC_UnlockH>
 8019fea:	4b43      	ldr	r3, [pc, #268]	; (801a0f8 <_WriteToActiveAlpha+0x13c>)
 8019fec:	2108      	movs	r1, #8
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	7c5a      	ldrb	r2, [r3, #17]
 8019ff2:	4b42      	ldr	r3, [pc, #264]	; (801a0fc <_WriteToActiveAlpha+0x140>)
 8019ff4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019ff8:	68c3      	ldr	r3, [r0, #12]
 8019ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ffc:	4798      	blx	r3
 8019ffe:	2817      	cmp	r0, #23
 801a000:	4604      	mov	r4, r0
 801a002:	d804      	bhi.n	801a00e <_WriteToActiveAlpha+0x52>
 801a004:	2803      	cmp	r0, #3
 801a006:	bf14      	ite	ne
 801a008:	4604      	movne	r4, r0
 801a00a:	2408      	moveq	r4, #8
 801a00c:	e000      	b.n	801a010 <_WriteToActiveAlpha+0x54>
 801a00e:	2420      	movs	r4, #32
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2000      	movs	r0, #0
 801a014:	9308      	str	r3, [sp, #32]
 801a016:	683b      	ldr	r3, [r7, #0]
 801a018:	9309      	str	r3, [sp, #36]	; 0x24
 801a01a:	f7fd fbef 	bl	80177fc <GUI__AllocAlphaBuffer>
 801a01e:	2800      	cmp	r0, #0
 801a020:	d166      	bne.n	801a0f0 <_WriteToActiveAlpha+0x134>
 801a022:	ab0f      	add	r3, sp, #60	; 0x3c
 801a024:	aa11      	add	r2, sp, #68	; 0x44
 801a026:	a90d      	add	r1, sp, #52	; 0x34
 801a028:	4630      	mov	r0, r6
 801a02a:	f7ff ff83 	bl	8019f34 <_ClipX>
 801a02e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a030:	2b00      	cmp	r3, #0
 801a032:	dd5d      	ble.n	801a0f0 <_WriteToActiveAlpha+0x134>
 801a034:	ab10      	add	r3, sp, #64	; 0x40
 801a036:	aa12      	add	r2, sp, #72	; 0x48
 801a038:	a90c      	add	r1, sp, #48	; 0x30
 801a03a:	4628      	mov	r0, r5
 801a03c:	f7ff ff9c 	bl	8019f78 <_ClipY>
 801a040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a042:	2b00      	cmp	r3, #0
 801a044:	dd54      	ble.n	801a0f0 <_WriteToActiveAlpha+0x134>
 801a046:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801a100 <_WriteToActiveAlpha+0x144>
 801a04a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a04c:	4640      	mov	r0, r8
 801a04e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a050:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801a052:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801a056:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801a05a:	920b      	str	r2, [sp, #44]	; 0x2c
 801a05c:	930a      	str	r3, [sp, #40]	; 0x28
 801a05e:	f003 fe7b 	bl	801dd58 <GUI_MEMDEV_GetDataPtr>
 801a062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a064:	ab13      	add	r3, sp, #76	; 0x4c
 801a066:	4649      	mov	r1, r9
 801a068:	fb05 2206 	mla	r2, r5, r6, r2
 801a06c:	9301      	str	r3, [sp, #4]
 801a06e:	9b07      	ldr	r3, [sp, #28]
 801a070:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a074:	4658      	mov	r0, fp
 801a076:	9300      	str	r3, [sp, #0]
 801a078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a07a:	f7fd fadd 	bl	8017638 <GUI__DoAlphaBlending>
 801a07e:	4605      	mov	r5, r0
 801a080:	2800      	cmp	r0, #0
 801a082:	d035      	beq.n	801a0f0 <_WriteToActiveAlpha+0x134>
 801a084:	9b08      	ldr	r3, [sp, #32]
 801a086:	4553      	cmp	r3, sl
 801a088:	d01b      	beq.n	801a0c2 <_WriteToActiveAlpha+0x106>
 801a08a:	463b      	mov	r3, r7
 801a08c:	4622      	mov	r2, r4
 801a08e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a090:	f003 fb0d 	bl	801d6ae <GUI__CompactPixelIndicesEx>
 801a094:	b9a8      	cbnz	r0, 801a0c2 <_WriteToActiveAlpha+0x106>
 801a096:	f8d7 b010 	ldr.w	fp, [r7, #16]
 801a09a:	f1bb 0f00 	cmp.w	fp, #0
 801a09e:	d005      	beq.n	801a0ac <_WriteToActiveAlpha+0xf0>
 801a0a0:	2304      	movs	r3, #4
 801a0a2:	4632      	mov	r2, r6
 801a0a4:	4629      	mov	r1, r5
 801a0a6:	4628      	mov	r0, r5
 801a0a8:	47d8      	blx	fp
 801a0aa:	e00a      	b.n	801a0c2 <_WriteToActiveAlpha+0x106>
 801a0ac:	46a9      	mov	r9, r5
 801a0ae:	46b3      	mov	fp, r6
 801a0b0:	f8d9 0000 	ldr.w	r0, [r9]
 801a0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0b6:	4798      	blx	r3
 801a0b8:	f1bb 0b01 	subs.w	fp, fp, #1
 801a0bc:	f849 0b04 	str.w	r0, [r9], #4
 801a0c0:	d1f6      	bne.n	801a0b0 <_WriteToActiveAlpha+0xf4>
 801a0c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a0c4:	9504      	str	r5, [sp, #16]
 801a0c6:	1c4b      	adds	r3, r1, #1
 801a0c8:	9402      	str	r4, [sp, #8]
 801a0ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a0cc:	930c      	str	r3, [sp, #48]	; 0x30
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a0d2:	9305      	str	r3, [sp, #20]
 801a0d4:	9303      	str	r3, [sp, #12]
 801a0d6:	2301      	movs	r3, #1
 801a0d8:	9301      	str	r3, [sp, #4]
 801a0da:	9300      	str	r3, [sp, #0]
 801a0dc:	f7fd fe6e 	bl	8017dbc <LCD_DrawBitmap>
 801a0e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a0e2:	3301      	adds	r3, #1
 801a0e4:	9310      	str	r3, [sp, #64]	; 0x40
 801a0e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a0e8:	3b01      	subs	r3, #1
 801a0ea:	9312      	str	r3, [sp, #72]	; 0x48
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d1ac      	bne.n	801a04a <_WriteToActiveAlpha+0x8e>
 801a0f0:	b015      	add	sp, #84	; 0x54
 801a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f6:	bf00      	nop
 801a0f8:	20000018 	.word	0x20000018
 801a0fc:	2002249c 	.word	0x2002249c
 801a100:	08015ee9 	.word	0x08015ee9

0801a104 <GUI_MEMDEV__WriteToActiveAlpha>:
 801a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a108:	4d45      	ldr	r5, [pc, #276]	; (801a220 <GUI_MEMDEV__WriteToActiveAlpha+0x11c>)
 801a10a:	b08c      	sub	sp, #48	; 0x30
 801a10c:	4b45      	ldr	r3, [pc, #276]	; (801a224 <GUI_MEMDEV__WriteToActiveAlpha+0x120>)
 801a10e:	4607      	mov	r7, r0
 801a110:	f8d5 e000 	ldr.w	lr, [r5]
 801a114:	4e44      	ldr	r6, [pc, #272]	; (801a228 <GUI_MEMDEV__WriteToActiveAlpha+0x124>)
 801a116:	f89e 4011 	ldrb.w	r4, [lr, #17]
 801a11a:	f8d6 c000 	ldr.w	ip, [r6]
 801a11e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801a122:	9105      	str	r1, [sp, #20]
 801a124:	9204      	str	r2, [sp, #16]
 801a126:	6923      	ldr	r3, [r4, #16]
 801a128:	f1bc 0f00 	cmp.w	ip, #0
 801a12c:	d012      	beq.n	801a154 <GUI_MEMDEV__WriteToActiveAlpha+0x50>
 801a12e:	68e2      	ldr	r2, [r4, #12]
 801a130:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
 801a134:	6812      	ldr	r2, [r2, #0]
 801a136:	b919      	cbnz	r1, 801a140 <GUI_MEMDEV__WriteToActiveAlpha+0x3c>
 801a138:	fab2 f282 	clz	r2, r2
 801a13c:	0952      	lsrs	r2, r2, #5
 801a13e:	e005      	b.n	801a14c <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 801a140:	2a07      	cmp	r2, #7
 801a142:	d004      	beq.n	801a14e <GUI_MEMDEV__WriteToActiveAlpha+0x4a>
 801a144:	4a39      	ldr	r2, [pc, #228]	; (801a22c <GUI_MEMDEV__WriteToActiveAlpha+0x128>)
 801a146:	1a99      	subs	r1, r3, r2
 801a148:	424a      	negs	r2, r1
 801a14a:	414a      	adcs	r2, r1
 801a14c:	b92a      	cbnz	r2, 801a15a <GUI_MEMDEV__WriteToActiveAlpha+0x56>
 801a14e:	9a04      	ldr	r2, [sp, #16]
 801a150:	4638      	mov	r0, r7
 801a152:	9905      	ldr	r1, [sp, #20]
 801a154:	f7ff ff32 	bl	8019fbc <_WriteToActiveAlpha>
 801a158:	e05f      	b.n	801a21a <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801a15a:	4638      	mov	r0, r7
 801a15c:	f7fb ffac 	bl	80160b8 <GUI_ALLOC_LockH>
 801a160:	4603      	mov	r3, r0
 801a162:	a80c      	add	r0, sp, #48	; 0x30
 801a164:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801a168:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a16c:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 801a170:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801a174:	f7fb ffae 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a178:	ab08      	add	r3, sp, #32
 801a17a:	aa06      	add	r2, sp, #24
 801a17c:	a905      	add	r1, sp, #20
 801a17e:	4620      	mov	r0, r4
 801a180:	f7ff fed8 	bl	8019f34 <_ClipX>
 801a184:	9b06      	ldr	r3, [sp, #24]
 801a186:	2b00      	cmp	r3, #0
 801a188:	dd47      	ble.n	801a21a <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801a18a:	ab09      	add	r3, sp, #36	; 0x24
 801a18c:	aa07      	add	r2, sp, #28
 801a18e:	a904      	add	r1, sp, #16
 801a190:	4648      	mov	r0, r9
 801a192:	f7ff fef1 	bl	8019f78 <_ClipY>
 801a196:	9b07      	ldr	r3, [sp, #28]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	dd3e      	ble.n	801a21a <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801a19c:	4638      	mov	r0, r7
 801a19e:	f003 fddb 	bl	801dd58 <GUI_MEMDEV_GetDataPtr>
 801a1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1a4:	9f08      	ldr	r7, [sp, #32]
 801a1a6:	fb03 7704 	mla	r7, r3, r4, r7
 801a1aa:	682b      	ldr	r3, [r5, #0]
 801a1ac:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801a1b0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a1b2:	b328      	cbz	r0, 801a200 <GUI_MEMDEV__WriteToActiveAlpha+0xfc>
 801a1b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801a1b8:	9d04      	ldr	r5, [sp, #16]
 801a1ba:	f7fb ff7d 	bl	80160b8 <GUI_ALLOC_LockH>
 801a1be:	4604      	mov	r4, r0
 801a1c0:	a80c      	add	r0, sp, #48	; 0x30
 801a1c2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a1c6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801a1ca:	1aed      	subs	r5, r5, r3
 801a1cc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a1d0:	f840 4d04 	str.w	r4, [r0, #-4]!
 801a1d4:	ebc3 0909 	rsb	r9, r3, r9
 801a1d8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801a1dc:	fb0a 9505 	mla	r5, sl, r5, r9
 801a1e0:	3518      	adds	r5, #24
 801a1e2:	442c      	add	r4, r5
 801a1e4:	f7fb ff76 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a1e8:	b1bc      	cbz	r4, 801a21a <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801a1ea:	f8cd 8004 	str.w	r8, [sp, #4]
 801a1ee:	4639      	mov	r1, r7
 801a1f0:	f8cd a000 	str.w	sl, [sp]
 801a1f4:	4620      	mov	r0, r4
 801a1f6:	6835      	ldr	r5, [r6, #0]
 801a1f8:	9b07      	ldr	r3, [sp, #28]
 801a1fa:	9a06      	ldr	r2, [sp, #24]
 801a1fc:	47a8      	blx	r5
 801a1fe:	e00c      	b.n	801a21a <GUI_MEMDEV__WriteToActiveAlpha+0x116>
 801a200:	7c58      	ldrb	r0, [r3, #17]
 801a202:	00a4      	lsls	r4, r4, #2
 801a204:	9b07      	ldr	r3, [sp, #28]
 801a206:	9402      	str	r4, [sp, #8]
 801a208:	9301      	str	r3, [sp, #4]
 801a20a:	9b06      	ldr	r3, [sp, #24]
 801a20c:	9a04      	ldr	r2, [sp, #16]
 801a20e:	9300      	str	r3, [sp, #0]
 801a210:	4b07      	ldr	r3, [pc, #28]	; (801a230 <GUI_MEMDEV__WriteToActiveAlpha+0x12c>)
 801a212:	9905      	ldr	r1, [sp, #20]
 801a214:	681c      	ldr	r4, [r3, #0]
 801a216:	463b      	mov	r3, r7
 801a218:	47a0      	blx	r4
 801a21a:	b00c      	add	sp, #48	; 0x30
 801a21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a220:	20000018 	.word	0x20000018
 801a224:	2002249c 	.word	0x2002249c
 801a228:	200224b0 	.word	0x200224b0
 801a22c:	0801eeb0 	.word	0x0801eeb0
 801a230:	200224ac 	.word	0x200224ac

0801a234 <_OnExit>:
 801a234:	b570      	push	{r4, r5, r6, lr}
 801a236:	4b1a      	ldr	r3, [pc, #104]	; (801a2a0 <_OnExit+0x6c>)
 801a238:	2400      	movs	r4, #0
 801a23a:	4d1a      	ldr	r5, [pc, #104]	; (801a2a4 <_OnExit+0x70>)
 801a23c:	601c      	str	r4, [r3, #0]
 801a23e:	4621      	mov	r1, r4
 801a240:	4b19      	ldr	r3, [pc, #100]	; (801a2a8 <_OnExit+0x74>)
 801a242:	481a      	ldr	r0, [pc, #104]	; (801a2ac <_OnExit+0x78>)
 801a244:	601c      	str	r4, [r3, #0]
 801a246:	605c      	str	r4, [r3, #4]
 801a248:	300c      	adds	r0, #12
 801a24a:	4b19      	ldr	r3, [pc, #100]	; (801a2b0 <_OnExit+0x7c>)
 801a24c:	4a19      	ldr	r2, [pc, #100]	; (801a2b4 <_OnExit+0x80>)
 801a24e:	601c      	str	r4, [r3, #0]
 801a250:	4b19      	ldr	r3, [pc, #100]	; (801a2b8 <_OnExit+0x84>)
 801a252:	f800 4c0c 	strb.w	r4, [r0, #-12]
 801a256:	601c      	str	r4, [r3, #0]
 801a258:	4b18      	ldr	r3, [pc, #96]	; (801a2bc <_OnExit+0x88>)
 801a25a:	f840 4c08 	str.w	r4, [r0, #-8]
 801a25e:	601c      	str	r4, [r3, #0]
 801a260:	4b17      	ldr	r3, [pc, #92]	; (801a2c0 <_OnExit+0x8c>)
 801a262:	6014      	str	r4, [r2, #0]
 801a264:	6054      	str	r4, [r2, #4]
 801a266:	2218      	movs	r2, #24
 801a268:	601c      	str	r4, [r3, #0]
 801a26a:	f840 4c04 	str.w	r4, [r0, #-4]
 801a26e:	682b      	ldr	r3, [r5, #0]
 801a270:	4798      	blx	r3
 801a272:	4b14      	ldr	r3, [pc, #80]	; (801a2c4 <_OnExit+0x90>)
 801a274:	4621      	mov	r1, r4
 801a276:	2210      	movs	r2, #16
 801a278:	601c      	str	r4, [r3, #0]
 801a27a:	4b13      	ldr	r3, [pc, #76]	; (801a2c8 <_OnExit+0x94>)
 801a27c:	4813      	ldr	r0, [pc, #76]	; (801a2cc <_OnExit+0x98>)
 801a27e:	601c      	str	r4, [r3, #0]
 801a280:	605c      	str	r4, [r3, #4]
 801a282:	682b      	ldr	r3, [r5, #0]
 801a284:	4798      	blx	r3
 801a286:	682b      	ldr	r3, [r5, #0]
 801a288:	4621      	mov	r1, r4
 801a28a:	2210      	movs	r2, #16
 801a28c:	4810      	ldr	r0, [pc, #64]	; (801a2d0 <_OnExit+0x9c>)
 801a28e:	4798      	blx	r3
 801a290:	682b      	ldr	r3, [r5, #0]
 801a292:	4621      	mov	r1, r4
 801a294:	2210      	movs	r2, #16
 801a296:	480f      	ldr	r0, [pc, #60]	; (801a2d4 <_OnExit+0xa0>)
 801a298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a29c:	4718      	bx	r3
 801a29e:	bf00      	nop
 801a2a0:	200224fc 	.word	0x200224fc
 801a2a4:	2000003c 	.word	0x2000003c
 801a2a8:	20022504 	.word	0x20022504
 801a2ac:	20000304 	.word	0x20000304
 801a2b0:	20022510 	.word	0x20022510
 801a2b4:	200224d0 	.word	0x200224d0
 801a2b8:	200224bc 	.word	0x200224bc
 801a2bc:	200224f0 	.word	0x200224f0
 801a2c0:	20022500 	.word	0x20022500
 801a2c4:	200224cc 	.word	0x200224cc
 801a2c8:	200224c0 	.word	0x200224c0
 801a2cc:	20022534 	.word	0x20022534
 801a2d0:	20022524 	.word	0x20022524
 801a2d4:	20022514 	.word	0x20022514

0801a2d8 <_Paint1>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	4604      	mov	r4, r0
 801a2dc:	f7fb fee2 	bl	80160a4 <GUI_ALLOC_h2p>
 801a2e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a2e2:	4a05      	ldr	r2, [pc, #20]	; (801a2f8 <_Paint1+0x20>)
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801a2ea:	4b04      	ldr	r3, [pc, #16]	; (801a2fc <_Paint1+0x24>)
 801a2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2f0:	bf08      	it	eq
 801a2f2:	4613      	moveq	r3, r2
 801a2f4:	4718      	bx	r3
 801a2f6:	bf00      	nop
 801a2f8:	0801b209 	.word	0x0801b209
 801a2fc:	0801dfbd 	.word	0x0801dfbd

0801a300 <_Findy1>:
 801a300:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a302:	b085      	sub	sp, #20
 801a304:	4607      	mov	r7, r0
 801a306:	460c      	mov	r4, r1
 801a308:	4616      	mov	r6, r2
 801a30a:	ad02      	add	r5, sp, #8
 801a30c:	2f00      	cmp	r7, #0
 801a30e:	d048      	beq.n	801a3a2 <_Findy1+0xa2>
 801a310:	4638      	mov	r0, r7
 801a312:	f7fb fed1 	bl	80160b8 <GUI_ALLOC_LockH>
 801a316:	6a87      	ldr	r7, [r0, #40]	; 0x28
 801a318:	4601      	mov	r1, r0
 801a31a:	9001      	str	r0, [sp, #4]
 801a31c:	07bb      	lsls	r3, r7, #30
 801a31e:	d53a      	bpl.n	801a396 <_Findy1+0x96>
 801a320:	b126      	cbz	r6, 801a32c <_Findy1+0x2c>
 801a322:	4632      	mov	r2, r6
 801a324:	4628      	mov	r0, r5
 801a326:	f7fd fb64 	bl	80179f2 <GUI__IntersectRects>
 801a32a:	e002      	b.n	801a332 <_Findy1+0x32>
 801a32c:	c803      	ldmia	r0, {r0, r1}
 801a32e:	e885 0003 	stmia.w	r5, {r0, r1}
 801a332:	4629      	mov	r1, r5
 801a334:	4620      	mov	r0, r4
 801a336:	f7fc fa07 	bl	8016748 <GUI_RectsIntersect>
 801a33a:	b360      	cbz	r0, 801a396 <_Findy1+0x96>
 801a33c:	f017 0f01 	tst.w	r7, #1
 801a340:	9b01      	ldr	r3, [sp, #4]
 801a342:	d11c      	bne.n	801a37e <_Findy1+0x7e>
 801a344:	b13e      	cbz	r6, 801a356 <_Findy1+0x56>
 801a346:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a34a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a34e:	4293      	cmp	r3, r2
 801a350:	bfb8      	it	lt
 801a352:	4613      	movlt	r3, r2
 801a354:	e001      	b.n	801a35a <_Findy1+0x5a>
 801a356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a35a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a35e:	4293      	cmp	r3, r2
 801a360:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a364:	dd05      	ble.n	801a372 <_Findy1+0x72>
 801a366:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a36a:	429a      	cmp	r2, r3
 801a36c:	db13      	blt.n	801a396 <_Findy1+0x96>
 801a36e:	3b01      	subs	r3, #1
 801a370:	e003      	b.n	801a37a <_Findy1+0x7a>
 801a372:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a376:	429a      	cmp	r2, r3
 801a378:	dd0d      	ble.n	801a396 <_Findy1+0x96>
 801a37a:	80e3      	strh	r3, [r4, #6]
 801a37c:	e00b      	b.n	801a396 <_Findy1+0x96>
 801a37e:	69df      	ldr	r7, [r3, #28]
 801a380:	b14f      	cbz	r7, 801a396 <_Findy1+0x96>
 801a382:	4638      	mov	r0, r7
 801a384:	462a      	mov	r2, r5
 801a386:	4621      	mov	r1, r4
 801a388:	f7ff ffba 	bl	801a300 <_Findy1>
 801a38c:	4638      	mov	r0, r7
 801a38e:	f7fb fe89 	bl	80160a4 <GUI_ALLOC_h2p>
 801a392:	6a07      	ldr	r7, [r0, #32]
 801a394:	e7f4      	b.n	801a380 <_Findy1+0x80>
 801a396:	9b01      	ldr	r3, [sp, #4]
 801a398:	a801      	add	r0, sp, #4
 801a39a:	6a1f      	ldr	r7, [r3, #32]
 801a39c:	f7fb fe9a 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a3a0:	e7b4      	b.n	801a30c <_Findy1+0xc>
 801a3a2:	b005      	add	sp, #20
 801a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a3a6 <_Findx0>:
 801a3a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a3aa:	4606      	mov	r6, r0
 801a3ac:	460f      	mov	r7, r1
 801a3ae:	4690      	mov	r8, r2
 801a3b0:	2500      	movs	r5, #0
 801a3b2:	ac02      	add	r4, sp, #8
 801a3b4:	2e00      	cmp	r6, #0
 801a3b6:	d035      	beq.n	801a424 <_Findx0+0x7e>
 801a3b8:	4630      	mov	r0, r6
 801a3ba:	f7fb fe7d 	bl	80160b8 <GUI_ALLOC_LockH>
 801a3be:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801a3c0:	4601      	mov	r1, r0
 801a3c2:	9001      	str	r0, [sp, #4]
 801a3c4:	07b2      	lsls	r2, r6, #30
 801a3c6:	d527      	bpl.n	801a418 <_Findx0+0x72>
 801a3c8:	f1b8 0f00 	cmp.w	r8, #0
 801a3cc:	d004      	beq.n	801a3d8 <_Findx0+0x32>
 801a3ce:	4642      	mov	r2, r8
 801a3d0:	4620      	mov	r0, r4
 801a3d2:	f7fd fb0e 	bl	80179f2 <GUI__IntersectRects>
 801a3d6:	e002      	b.n	801a3de <_Findx0+0x38>
 801a3d8:	c803      	ldmia	r0, {r0, r1}
 801a3da:	e884 0003 	stmia.w	r4, {r0, r1}
 801a3de:	4621      	mov	r1, r4
 801a3e0:	4638      	mov	r0, r7
 801a3e2:	f7fc f9b1 	bl	8016748 <GUI_RectsIntersect>
 801a3e6:	b1b8      	cbz	r0, 801a418 <_Findx0+0x72>
 801a3e8:	07f3      	lsls	r3, r6, #31
 801a3ea:	d405      	bmi.n	801a3f8 <_Findx0+0x52>
 801a3ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a3f0:	2501      	movs	r5, #1
 801a3f2:	3301      	adds	r3, #1
 801a3f4:	803b      	strh	r3, [r7, #0]
 801a3f6:	e00f      	b.n	801a418 <_Findx0+0x72>
 801a3f8:	9b01      	ldr	r3, [sp, #4]
 801a3fa:	69de      	ldr	r6, [r3, #28]
 801a3fc:	b166      	cbz	r6, 801a418 <_Findx0+0x72>
 801a3fe:	4622      	mov	r2, r4
 801a400:	4639      	mov	r1, r7
 801a402:	4630      	mov	r0, r6
 801a404:	f7ff ffcf 	bl	801a3a6 <_Findx0>
 801a408:	2800      	cmp	r0, #0
 801a40a:	4630      	mov	r0, r6
 801a40c:	bf18      	it	ne
 801a40e:	2501      	movne	r5, #1
 801a410:	f7fb fe48 	bl	80160a4 <GUI_ALLOC_h2p>
 801a414:	6a06      	ldr	r6, [r0, #32]
 801a416:	e7f1      	b.n	801a3fc <_Findx0+0x56>
 801a418:	9b01      	ldr	r3, [sp, #4]
 801a41a:	a801      	add	r0, sp, #4
 801a41c:	6a1e      	ldr	r6, [r3, #32]
 801a41e:	f7fb fe59 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a422:	e7c7      	b.n	801a3b4 <_Findx0+0xe>
 801a424:	4628      	mov	r0, r5
 801a426:	b004      	add	sp, #16
 801a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a42c <_Findx1>:
 801a42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a42e:	b085      	sub	sp, #20
 801a430:	4605      	mov	r5, r0
 801a432:	460e      	mov	r6, r1
 801a434:	4617      	mov	r7, r2
 801a436:	ac02      	add	r4, sp, #8
 801a438:	b37d      	cbz	r5, 801a49a <_Findx1+0x6e>
 801a43a:	4628      	mov	r0, r5
 801a43c:	f7fb fe3c 	bl	80160b8 <GUI_ALLOC_LockH>
 801a440:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801a442:	4601      	mov	r1, r0
 801a444:	9001      	str	r0, [sp, #4]
 801a446:	07aa      	lsls	r2, r5, #30
 801a448:	d521      	bpl.n	801a48e <_Findx1+0x62>
 801a44a:	b127      	cbz	r7, 801a456 <_Findx1+0x2a>
 801a44c:	463a      	mov	r2, r7
 801a44e:	4620      	mov	r0, r4
 801a450:	f7fd facf 	bl	80179f2 <GUI__IntersectRects>
 801a454:	e002      	b.n	801a45c <_Findx1+0x30>
 801a456:	c803      	ldmia	r0, {r0, r1}
 801a458:	e884 0003 	stmia.w	r4, {r0, r1}
 801a45c:	4621      	mov	r1, r4
 801a45e:	4630      	mov	r0, r6
 801a460:	f7fc f972 	bl	8016748 <GUI_RectsIntersect>
 801a464:	b198      	cbz	r0, 801a48e <_Findx1+0x62>
 801a466:	07eb      	lsls	r3, r5, #31
 801a468:	d404      	bmi.n	801a474 <_Findx1+0x48>
 801a46a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a46e:	3b01      	subs	r3, #1
 801a470:	80b3      	strh	r3, [r6, #4]
 801a472:	e00c      	b.n	801a48e <_Findx1+0x62>
 801a474:	9b01      	ldr	r3, [sp, #4]
 801a476:	69dd      	ldr	r5, [r3, #28]
 801a478:	b14d      	cbz	r5, 801a48e <_Findx1+0x62>
 801a47a:	4628      	mov	r0, r5
 801a47c:	4622      	mov	r2, r4
 801a47e:	4631      	mov	r1, r6
 801a480:	f7ff ffd4 	bl	801a42c <_Findx1>
 801a484:	4628      	mov	r0, r5
 801a486:	f7fb fe0d 	bl	80160a4 <GUI_ALLOC_h2p>
 801a48a:	6a05      	ldr	r5, [r0, #32]
 801a48c:	e7f4      	b.n	801a478 <_Findx1+0x4c>
 801a48e:	9b01      	ldr	r3, [sp, #4]
 801a490:	a801      	add	r0, sp, #4
 801a492:	6a1d      	ldr	r5, [r3, #32]
 801a494:	f7fb fe1e 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a498:	e7ce      	b.n	801a438 <_Findx1+0xc>
 801a49a:	b005      	add	sp, #20
 801a49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a4a0 <_Paint1Trans>:
 801a4a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a4a4:	4d21      	ldr	r5, [pc, #132]	; (801a52c <_Paint1Trans+0x8c>)
 801a4a6:	4607      	mov	r7, r0
 801a4a8:	ac02      	add	r4, sp, #8
 801a4aa:	682b      	ldr	r3, [r5, #0]
 801a4ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a4ae:	f7fb fe03 	bl	80160b8 <GUI_ALLOC_LockH>
 801a4b2:	9000      	str	r0, [sp, #0]
 801a4b4:	4638      	mov	r0, r7
 801a4b6:	f7fb fdff 	bl	80160b8 <GUI_ALLOC_LockH>
 801a4ba:	4601      	mov	r1, r0
 801a4bc:	9001      	str	r0, [sp, #4]
 801a4be:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 801a4c2:	3008      	adds	r0, #8
 801a4c4:	f7fc f940 	bl	8016748 <GUI_RectsIntersect>
 801a4c8:	4606      	mov	r6, r0
 801a4ca:	b328      	cbz	r0, 801a518 <_Paint1Trans+0x78>
 801a4cc:	9901      	ldr	r1, [sp, #4]
 801a4ce:	9a00      	ldr	r2, [sp, #0]
 801a4d0:	682b      	ldr	r3, [r5, #0]
 801a4d2:	f101 0008 	add.w	r0, r1, #8
 801a4d6:	3208      	adds	r2, #8
 801a4d8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801a4da:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801a4de:	f7fd fa88 	bl	80179f2 <GUI__IntersectRects>
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	4c12      	ldr	r4, [pc, #72]	; (801a530 <_Paint1Trans+0x90>)
 801a4e6:	f7fb fdf5 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a4ea:	9a01      	ldr	r2, [sp, #4]
 801a4ec:	682b      	ldr	r3, [r5, #0]
 801a4ee:	a801      	add	r0, sp, #4
 801a4f0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a4f4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801a4f8:	64d9      	str	r1, [r3, #76]	; 0x4c
 801a4fa:	651a      	str	r2, [r3, #80]	; 0x50
 801a4fc:	6027      	str	r7, [r4, #0]
 801a4fe:	f7fb fde9 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a502:	4638      	mov	r0, r7
 801a504:	f7ff fee8 	bl	801a2d8 <_Paint1>
 801a508:	2300      	movs	r3, #0
 801a50a:	6023      	str	r3, [r4, #0]
 801a50c:	682b      	ldr	r3, [r5, #0]
 801a50e:	64de      	str	r6, [r3, #76]	; 0x4c
 801a510:	2601      	movs	r6, #1
 801a512:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 801a516:	e005      	b.n	801a524 <_Paint1Trans+0x84>
 801a518:	4620      	mov	r0, r4
 801a51a:	f7fb fddb 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a51e:	a801      	add	r0, sp, #4
 801a520:	f7fb fdd8 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a524:	4630      	mov	r0, r6
 801a526:	b002      	add	sp, #8
 801a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a52c:	20000018 	.word	0x20000018
 801a530:	200224bc 	.word	0x200224bc

0801a534 <_PaintTransChildren>:
 801a534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a538:	4605      	mov	r5, r0
 801a53a:	f7fb fdbd 	bl	80160b8 <GUI_ALLOC_LockH>
 801a53e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a540:	9001      	str	r0, [sp, #4]
 801a542:	079b      	lsls	r3, r3, #30
 801a544:	d405      	bmi.n	801a552 <_PaintTransChildren+0x1e>
 801a546:	a801      	add	r0, sp, #4
 801a548:	f7fb fdc4 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a54c:	b003      	add	sp, #12
 801a54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a552:	69c4      	ldr	r4, [r0, #28]
 801a554:	2c00      	cmp	r4, #0
 801a556:	d0f6      	beq.n	801a546 <_PaintTransChildren+0x12>
 801a558:	4620      	mov	r0, r4
 801a55a:	f7fb fdad 	bl	80160b8 <GUI_ALLOC_LockH>
 801a55e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a560:	9000      	str	r0, [sp, #0]
 801a562:	f003 0303 	and.w	r3, r3, #3
 801a566:	2b03      	cmp	r3, #3
 801a568:	d135      	bne.n	801a5d6 <_PaintTransChildren+0xa2>
 801a56a:	9901      	ldr	r1, [sp, #4]
 801a56c:	3108      	adds	r1, #8
 801a56e:	f7fc f8eb 	bl	8016748 <GUI_RectsIntersect>
 801a572:	b380      	cbz	r0, 801a5d6 <_PaintTransChildren+0xa2>
 801a574:	9b01      	ldr	r3, [sp, #4]
 801a576:	a801      	add	r0, sp, #4
 801a578:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 801a57c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 801a580:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 801a584:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 801a588:	f7fb fda4 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a58c:	4668      	mov	r0, sp
 801a58e:	f7fb fda1 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a592:	4620      	mov	r0, r4
 801a594:	f7ff ff84 	bl	801a4a0 <_Paint1Trans>
 801a598:	b170      	cbz	r0, 801a5b8 <_PaintTransChildren+0x84>
 801a59a:	4620      	mov	r0, r4
 801a59c:	f7fb fd82 	bl	80160a4 <GUI_ALLOC_h2p>
 801a5a0:	9000      	str	r0, [sp, #0]
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	f7ff ffc6 	bl	801a534 <_PaintTransChildren>
 801a5a8:	4620      	mov	r0, r4
 801a5aa:	f7fb fd7b 	bl	80160a4 <GUI_ALLOC_h2p>
 801a5ae:	9000      	str	r0, [sp, #0]
 801a5b0:	4628      	mov	r0, r5
 801a5b2:	f7fb fd77 	bl	80160a4 <GUI_ALLOC_h2p>
 801a5b6:	9001      	str	r0, [sp, #4]
 801a5b8:	4628      	mov	r0, r5
 801a5ba:	f7fb fd7d 	bl	80160b8 <GUI_ALLOC_LockH>
 801a5be:	9001      	str	r0, [sp, #4]
 801a5c0:	4620      	mov	r0, r4
 801a5c2:	f7fb fd79 	bl	80160b8 <GUI_ALLOC_LockH>
 801a5c6:	9b01      	ldr	r3, [sp, #4]
 801a5c8:	9000      	str	r0, [sp, #0]
 801a5ca:	f8a3 9008 	strh.w	r9, [r3, #8]
 801a5ce:	f8a3 800a 	strh.w	r8, [r3, #10]
 801a5d2:	819f      	strh	r7, [r3, #12]
 801a5d4:	81de      	strh	r6, [r3, #14]
 801a5d6:	9b00      	ldr	r3, [sp, #0]
 801a5d8:	4668      	mov	r0, sp
 801a5da:	6a1c      	ldr	r4, [r3, #32]
 801a5dc:	f7fb fd7a 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a5e0:	e7b8      	b.n	801a554 <_PaintTransChildren+0x20>
	...

0801a5e4 <WM__PaintWinAndOverlays>:
 801a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	f7fb fd66 	bl	80160b8 <GUI_ALLOC_LockH>
 801a5ec:	f640 0301 	movw	r3, #2049	; 0x801
 801a5f0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801a5f2:	9001      	str	r0, [sp, #4]
 801a5f4:	4013      	ands	r3, r2
 801a5f6:	2b01      	cmp	r3, #1
 801a5f8:	d005      	beq.n	801a606 <WM__PaintWinAndOverlays+0x22>
 801a5fa:	a801      	add	r0, sp, #4
 801a5fc:	f7fb fd6a 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a600:	4620      	mov	r0, r4
 801a602:	f7ff fe69 	bl	801a2d8 <_Paint1>
 801a606:	4b14      	ldr	r3, [pc, #80]	; (801a658 <WM__PaintWinAndOverlays+0x74>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	b313      	cbz	r3, 801a652 <WM__PaintWinAndOverlays+0x6e>
 801a60c:	4620      	mov	r0, r4
 801a60e:	f7ff ff91 	bl	801a534 <_PaintTransChildren>
 801a612:	4620      	mov	r0, r4
 801a614:	f7fb fd46 	bl	80160a4 <GUI_ALLOC_h2p>
 801a618:	6985      	ldr	r5, [r0, #24]
 801a61a:	6a04      	ldr	r4, [r0, #32]
 801a61c:	b1cd      	cbz	r5, 801a652 <WM__PaintWinAndOverlays+0x6e>
 801a61e:	b194      	cbz	r4, 801a646 <WM__PaintWinAndOverlays+0x62>
 801a620:	4620      	mov	r0, r4
 801a622:	f7fb fd3f 	bl	80160a4 <GUI_ALLOC_h2p>
 801a626:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a628:	f003 0303 	and.w	r3, r3, #3
 801a62c:	2b03      	cmp	r3, #3
 801a62e:	d102      	bne.n	801a636 <WM__PaintWinAndOverlays+0x52>
 801a630:	4620      	mov	r0, r4
 801a632:	f7ff ff35 	bl	801a4a0 <_Paint1Trans>
 801a636:	4620      	mov	r0, r4
 801a638:	f7ff ff7c 	bl	801a534 <_PaintTransChildren>
 801a63c:	4620      	mov	r0, r4
 801a63e:	f7fb fd31 	bl	80160a4 <GUI_ALLOC_h2p>
 801a642:	6a04      	ldr	r4, [r0, #32]
 801a644:	e7eb      	b.n	801a61e <WM__PaintWinAndOverlays+0x3a>
 801a646:	4628      	mov	r0, r5
 801a648:	f7fb fd2c 	bl	80160a4 <GUI_ALLOC_h2p>
 801a64c:	6a04      	ldr	r4, [r0, #32]
 801a64e:	6985      	ldr	r5, [r0, #24]
 801a650:	e7e4      	b.n	801a61c <WM__PaintWinAndOverlays+0x38>
 801a652:	b003      	add	sp, #12
 801a654:	bd30      	pop	{r4, r5, pc}
 801a656:	bf00      	nop
 801a658:	20022510 	.word	0x20022510

0801a65c <_cbPaintMemDev>:
 801a65c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a660:	4d18      	ldr	r5, [pc, #96]	; (801a6c4 <_cbPaintMemDev+0x68>)
 801a662:	4682      	mov	sl, r0
 801a664:	ac02      	add	r4, sp, #8
 801a666:	682b      	ldr	r3, [r5, #0]
 801a668:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a66a:	f7fb fd25 	bl	80160b8 <GUI_ALLOC_LockH>
 801a66e:	682a      	ldr	r2, [r5, #0]
 801a670:	f844 0d04 	str.w	r0, [r4, #-4]!
 801a674:	f100 0308 	add.w	r3, r0, #8
 801a678:	3208      	adds	r2, #8
 801a67a:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801a67e:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 801a682:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 801a686:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 801a68a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a68e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a692:	4620      	mov	r0, r4
 801a694:	f7fb fd1e 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a698:	f8da 0000 	ldr.w	r0, [sl]
 801a69c:	f7ff ffa2 	bl	801a5e4 <WM__PaintWinAndOverlays>
 801a6a0:	682b      	ldr	r3, [r5, #0]
 801a6a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a6a4:	f7fb fd08 	bl	80160b8 <GUI_ALLOC_LockH>
 801a6a8:	9001      	str	r0, [sp, #4]
 801a6aa:	f8a0 9008 	strh.w	r9, [r0, #8]
 801a6ae:	f8a0 800a 	strh.w	r8, [r0, #10]
 801a6b2:	8187      	strh	r7, [r0, #12]
 801a6b4:	81c6      	strh	r6, [r0, #14]
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	f7fb fd0c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a6bc:	b002      	add	sp, #8
 801a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6c2:	bf00      	nop
 801a6c4:	20000018 	.word	0x20000018

0801a6c8 <WM__ClipAtParentBorders>:
 801a6c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6ca:	4606      	mov	r6, r0
 801a6cc:	460d      	mov	r5, r1
 801a6ce:	4628      	mov	r0, r5
 801a6d0:	f7fb fcf2 	bl	80160b8 <GUI_ALLOC_LockH>
 801a6d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a6d6:	4601      	mov	r1, r0
 801a6d8:	9001      	str	r0, [sp, #4]
 801a6da:	f013 0402 	ands.w	r4, r3, #2
 801a6de:	d104      	bne.n	801a6ea <WM__ClipAtParentBorders+0x22>
 801a6e0:	a801      	add	r0, sp, #4
 801a6e2:	f7fb fcf7 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a6e6:	4620      	mov	r0, r4
 801a6e8:	e016      	b.n	801a718 <WM__ClipAtParentBorders+0x50>
 801a6ea:	4630      	mov	r0, r6
 801a6ec:	f7fd f964 	bl	80179b8 <GUI__IntersectRect>
 801a6f0:	9b01      	ldr	r3, [sp, #4]
 801a6f2:	a801      	add	r0, sp, #4
 801a6f4:	699c      	ldr	r4, [r3, #24]
 801a6f6:	b954      	cbnz	r4, 801a70e <WM__ClipAtParentBorders+0x46>
 801a6f8:	f7fb fcec 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a6fc:	4b07      	ldr	r3, [pc, #28]	; (801a71c <WM__ClipAtParentBorders+0x54>)
 801a6fe:	681a      	ldr	r2, [r3, #0]
 801a700:	4295      	cmp	r5, r2
 801a702:	d008      	beq.n	801a716 <WM__ClipAtParentBorders+0x4e>
 801a704:	6858      	ldr	r0, [r3, #4]
 801a706:	1b43      	subs	r3, r0, r5
 801a708:	4258      	negs	r0, r3
 801a70a:	4158      	adcs	r0, r3
 801a70c:	e004      	b.n	801a718 <WM__ClipAtParentBorders+0x50>
 801a70e:	f7fb fce1 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a712:	4625      	mov	r5, r4
 801a714:	e7db      	b.n	801a6ce <WM__ClipAtParentBorders+0x6>
 801a716:	2001      	movs	r0, #1
 801a718:	b002      	add	sp, #8
 801a71a:	bd70      	pop	{r4, r5, r6, pc}
 801a71c:	200224c0 	.word	0x200224c0

0801a720 <WM__InsertWindowIntoList>:
 801a720:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a724:	4606      	mov	r6, r0
 801a726:	460c      	mov	r4, r1
 801a728:	2900      	cmp	r1, #0
 801a72a:	d04c      	beq.n	801a7c6 <WM__InsertWindowIntoList+0xa6>
 801a72c:	f7fb fcc4 	bl	80160b8 <GUI_ALLOC_LockH>
 801a730:	2300      	movs	r3, #0
 801a732:	6184      	str	r4, [r0, #24]
 801a734:	9001      	str	r0, [sp, #4]
 801a736:	6203      	str	r3, [r0, #32]
 801a738:	4620      	mov	r0, r4
 801a73a:	f7fb fcbd 	bl	80160b8 <GUI_ALLOC_LockH>
 801a73e:	ac04      	add	r4, sp, #16
 801a740:	69c7      	ldr	r7, [r0, #28]
 801a742:	f844 0d08 	str.w	r0, [r4, #-8]!
 801a746:	b92f      	cbnz	r7, 801a754 <WM__InsertWindowIntoList+0x34>
 801a748:	61c6      	str	r6, [r0, #28]
 801a74a:	a801      	add	r0, sp, #4
 801a74c:	f7fb fcc2 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a750:	4620      	mov	r0, r4
 801a752:	e036      	b.n	801a7c2 <WM__InsertWindowIntoList+0xa2>
 801a754:	9b01      	ldr	r3, [sp, #4]
 801a756:	f10d 0810 	add.w	r8, sp, #16
 801a75a:	4638      	mov	r0, r7
 801a75c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801a75e:	f7fb fcab 	bl	80160b8 <GUI_ALLOC_LockH>
 801a762:	f848 0d04 	str.w	r0, [r8, #-4]!
 801a766:	f005 0508 	and.w	r5, r5, #8
 801a76a:	b975      	cbnz	r5, 801a78a <WM__InsertWindowIntoList+0x6a>
 801a76c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a76e:	071a      	lsls	r2, r3, #28
 801a770:	d50b      	bpl.n	801a78a <WM__InsertWindowIntoList+0x6a>
 801a772:	9b01      	ldr	r3, [sp, #4]
 801a774:	a801      	add	r0, sp, #4
 801a776:	621f      	str	r7, [r3, #32]
 801a778:	9b02      	ldr	r3, [sp, #8]
 801a77a:	61de      	str	r6, [r3, #28]
 801a77c:	f7fb fcaa 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a780:	4620      	mov	r0, r4
 801a782:	f7fb fca7 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a786:	4640      	mov	r0, r8
 801a788:	e01b      	b.n	801a7c2 <WM__InsertWindowIntoList+0xa2>
 801a78a:	4620      	mov	r0, r4
 801a78c:	f7fb fca2 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a790:	4640      	mov	r0, r8
 801a792:	f7fb fc9f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a796:	4638      	mov	r0, r7
 801a798:	f7fb fc84 	bl	80160a4 <GUI_ALLOC_h2p>
 801a79c:	9003      	str	r0, [sp, #12]
 801a79e:	9b03      	ldr	r3, [sp, #12]
 801a7a0:	6a1c      	ldr	r4, [r3, #32]
 801a7a2:	b90c      	cbnz	r4, 801a7a8 <WM__InsertWindowIntoList+0x88>
 801a7a4:	621e      	str	r6, [r3, #32]
 801a7a6:	e00b      	b.n	801a7c0 <WM__InsertWindowIntoList+0xa0>
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	f7fb fc7b 	bl	80160a4 <GUI_ALLOC_h2p>
 801a7ae:	2d00      	cmp	r5, #0
 801a7b0:	d1f4      	bne.n	801a79c <WM__InsertWindowIntoList+0x7c>
 801a7b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a7b4:	071b      	lsls	r3, r3, #28
 801a7b6:	d5f1      	bpl.n	801a79c <WM__InsertWindowIntoList+0x7c>
 801a7b8:	9b03      	ldr	r3, [sp, #12]
 801a7ba:	621e      	str	r6, [r3, #32]
 801a7bc:	9b01      	ldr	r3, [sp, #4]
 801a7be:	621c      	str	r4, [r3, #32]
 801a7c0:	a801      	add	r0, sp, #4
 801a7c2:	f7fb fc87 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a7c6:	b004      	add	sp, #16
 801a7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a7cc <WM__RemoveWindowFromList>:
 801a7cc:	b570      	push	{r4, r5, r6, lr}
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	f7fb fc68 	bl	80160a4 <GUI_ALLOC_h2p>
 801a7d4:	4605      	mov	r5, r0
 801a7d6:	6980      	ldr	r0, [r0, #24]
 801a7d8:	b1a8      	cbz	r0, 801a806 <WM__RemoveWindowFromList+0x3a>
 801a7da:	f7fb fc63 	bl	80160a4 <GUI_ALLOC_h2p>
 801a7de:	69c3      	ldr	r3, [r0, #28]
 801a7e0:	4606      	mov	r6, r0
 801a7e2:	429c      	cmp	r4, r3
 801a7e4:	d105      	bne.n	801a7f2 <WM__RemoveWindowFromList+0x26>
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	f7fb fc5c 	bl	80160a4 <GUI_ALLOC_h2p>
 801a7ec:	6a03      	ldr	r3, [r0, #32]
 801a7ee:	61f3      	str	r3, [r6, #28]
 801a7f0:	bd70      	pop	{r4, r5, r6, pc}
 801a7f2:	b143      	cbz	r3, 801a806 <WM__RemoveWindowFromList+0x3a>
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	f7fb fc55 	bl	80160a4 <GUI_ALLOC_h2p>
 801a7fa:	6a03      	ldr	r3, [r0, #32]
 801a7fc:	429c      	cmp	r4, r3
 801a7fe:	d1f8      	bne.n	801a7f2 <WM__RemoveWindowFromList+0x26>
 801a800:	6a2b      	ldr	r3, [r5, #32]
 801a802:	6203      	str	r3, [r0, #32]
 801a804:	bd70      	pop	{r4, r5, r6, pc}
 801a806:	bd70      	pop	{r4, r5, r6, pc}

0801a808 <WM__Client2Screen>:
 801a808:	4603      	mov	r3, r0
 801a80a:	4608      	mov	r0, r1
 801a80c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a810:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a814:	f7fb beef 	b.w	80165f6 <GUI_MoveRect>

0801a818 <_SetClipRectUserIntersect>:
 801a818:	4b11      	ldr	r3, [pc, #68]	; (801a860 <_SetClipRectUserIntersect+0x48>)
 801a81a:	b530      	push	{r4, r5, lr}
 801a81c:	681c      	ldr	r4, [r3, #0]
 801a81e:	b085      	sub	sp, #20
 801a820:	4605      	mov	r5, r0
 801a822:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801a824:	b1ba      	cbz	r2, 801a856 <_SetClipRectUserIntersect+0x3e>
 801a826:	6810      	ldr	r0, [r2, #0]
 801a828:	ab02      	add	r3, sp, #8
 801a82a:	6851      	ldr	r1, [r2, #4]
 801a82c:	c303      	stmia	r3!, {r0, r1}
 801a82e:	4b0d      	ldr	r3, [pc, #52]	; (801a864 <_SetClipRectUserIntersect+0x4c>)
 801a830:	6818      	ldr	r0, [r3, #0]
 801a832:	b900      	cbnz	r0, 801a836 <_SetClipRectUserIntersect+0x1e>
 801a834:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a836:	ac04      	add	r4, sp, #16
 801a838:	f7fb fc3e 	bl	80160b8 <GUI_ALLOC_LockH>
 801a83c:	a902      	add	r1, sp, #8
 801a83e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801a842:	f7ff ffe1 	bl	801a808 <WM__Client2Screen>
 801a846:	4620      	mov	r0, r4
 801a848:	f7fb fc44 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a84c:	a802      	add	r0, sp, #8
 801a84e:	4629      	mov	r1, r5
 801a850:	f7fd f8b2 	bl	80179b8 <GUI__IntersectRect>
 801a854:	a802      	add	r0, sp, #8
 801a856:	f002 ffd1 	bl	801d7fc <LCD_SetClipRectEx>
 801a85a:	b005      	add	sp, #20
 801a85c:	bd30      	pop	{r4, r5, pc}
 801a85e:	bf00      	nop
 801a860:	20000018 	.word	0x20000018
 801a864:	200224bc 	.word	0x200224bc

0801a868 <WM__ActivateClipRect>:
 801a868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a86a:	4b0e      	ldr	r3, [pc, #56]	; (801a8a4 <WM__ActivateClipRect+0x3c>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801a872:	b10a      	cbz	r2, 801a878 <WM__ActivateClipRect+0x10>
 801a874:	480c      	ldr	r0, [pc, #48]	; (801a8a8 <WM__ActivateClipRect+0x40>)
 801a876:	e011      	b.n	801a89c <WM__ActivateClipRect+0x34>
 801a878:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a87a:	ac02      	add	r4, sp, #8
 801a87c:	f7fb fc1c 	bl	80160b8 <GUI_ALLOC_LockH>
 801a880:	9001      	str	r0, [sp, #4]
 801a882:	c803      	ldmia	r0, {r0, r1}
 801a884:	e884 0003 	stmia.w	r4, {r0, r1}
 801a888:	a801      	add	r0, sp, #4
 801a88a:	f7fb fc23 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a88e:	4b07      	ldr	r3, [pc, #28]	; (801a8ac <WM__ActivateClipRect+0x44>)
 801a890:	6819      	ldr	r1, [r3, #0]
 801a892:	b111      	cbz	r1, 801a89a <WM__ActivateClipRect+0x32>
 801a894:	4620      	mov	r0, r4
 801a896:	f7ff ff17 	bl	801a6c8 <WM__ClipAtParentBorders>
 801a89a:	4620      	mov	r0, r4
 801a89c:	f7ff ffbc 	bl	801a818 <_SetClipRectUserIntersect>
 801a8a0:	b004      	add	sp, #16
 801a8a2:	bd10      	pop	{r4, pc}
 801a8a4:	20000018 	.word	0x20000018
 801a8a8:	20000318 	.word	0x20000318
 801a8ac:	200224bc 	.word	0x200224bc

0801a8b0 <WM__IsWindow>:
 801a8b0:	4b06      	ldr	r3, [pc, #24]	; (801a8cc <WM__IsWindow+0x1c>)
 801a8b2:	b510      	push	{r4, lr}
 801a8b4:	4604      	mov	r4, r0
 801a8b6:	6818      	ldr	r0, [r3, #0]
 801a8b8:	b128      	cbz	r0, 801a8c6 <WM__IsWindow+0x16>
 801a8ba:	42a0      	cmp	r0, r4
 801a8bc:	d004      	beq.n	801a8c8 <WM__IsWindow+0x18>
 801a8be:	f7fb fbf1 	bl	80160a4 <GUI_ALLOC_h2p>
 801a8c2:	6940      	ldr	r0, [r0, #20]
 801a8c4:	e7f8      	b.n	801a8b8 <WM__IsWindow+0x8>
 801a8c6:	bd10      	pop	{r4, pc}
 801a8c8:	2001      	movs	r0, #1
 801a8ca:	bd10      	pop	{r4, pc}
 801a8cc:	200224dc 	.word	0x200224dc

0801a8d0 <WM__InvalidateDrawAndDescs>:
 801a8d0:	b513      	push	{r0, r1, r4, lr}
 801a8d2:	4604      	mov	r4, r0
 801a8d4:	b300      	cbz	r0, 801a918 <WM__InvalidateDrawAndDescs+0x48>
 801a8d6:	f7fb fbef 	bl	80160b8 <GUI_ALLOC_LockH>
 801a8da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a8dc:	9001      	str	r0, [sp, #4]
 801a8de:	079b      	lsls	r3, r3, #30
 801a8e0:	d517      	bpl.n	801a912 <WM__InvalidateDrawAndDescs+0x42>
 801a8e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a8e4:	b140      	cbz	r0, 801a8f8 <WM__InvalidateDrawAndDescs+0x28>
 801a8e6:	4b0d      	ldr	r3, [pc, #52]	; (801a91c <WM__InvalidateDrawAndDescs+0x4c>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	429c      	cmp	r4, r3
 801a8ec:	d004      	beq.n	801a8f8 <WM__InvalidateDrawAndDescs+0x28>
 801a8ee:	f003 f865 	bl	801d9bc <GUI_MEMDEV_Delete>
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	9b01      	ldr	r3, [sp, #4]
 801a8f6:	625a      	str	r2, [r3, #36]	; 0x24
 801a8f8:	4620      	mov	r0, r4
 801a8fa:	f000 feb5 	bl	801b668 <WM_GetFirstChild>
 801a8fe:	4604      	mov	r4, r0
 801a900:	b13c      	cbz	r4, 801a912 <WM__InvalidateDrawAndDescs+0x42>
 801a902:	4620      	mov	r0, r4
 801a904:	f7ff ffe4 	bl	801a8d0 <WM__InvalidateDrawAndDescs>
 801a908:	4620      	mov	r0, r4
 801a90a:	f7fb fbcb 	bl	80160a4 <GUI_ALLOC_h2p>
 801a90e:	6a04      	ldr	r4, [r0, #32]
 801a910:	e7f6      	b.n	801a900 <WM__InvalidateDrawAndDescs+0x30>
 801a912:	a801      	add	r0, sp, #4
 801a914:	f7fb fbde 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801a918:	b002      	add	sp, #8
 801a91a:	bd10      	pop	{r4, pc}
 801a91c:	2002250c 	.word	0x2002250c

0801a920 <WM__RectIsNZ>:
 801a920:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a924:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a928:	429a      	cmp	r2, r3
 801a92a:	dc08      	bgt.n	801a93e <WM__RectIsNZ+0x1e>
 801a92c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a930:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801a934:	4283      	cmp	r3, r0
 801a936:	bfcc      	ite	gt
 801a938:	2000      	movgt	r0, #0
 801a93a:	2001      	movle	r0, #1
 801a93c:	4770      	bx	lr
 801a93e:	2000      	movs	r0, #0
 801a940:	4770      	bx	lr

0801a942 <WM__SendMsgNoData>:
 801a942:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a944:	ab04      	add	r3, sp, #16
 801a946:	9001      	str	r0, [sp, #4]
 801a948:	f843 1d10 	str.w	r1, [r3, #-16]!
 801a94c:	4619      	mov	r1, r3
 801a94e:	f001 fb91 	bl	801c074 <WM__SendMessage>
 801a952:	b005      	add	sp, #20
 801a954:	f85d fb04 	ldr.w	pc, [sp], #4

0801a958 <WM__GetClientRectWin>:
 801a958:	2300      	movs	r3, #0
 801a95a:	804b      	strh	r3, [r1, #2]
 801a95c:	800b      	strh	r3, [r1, #0]
 801a95e:	8883      	ldrh	r3, [r0, #4]
 801a960:	8802      	ldrh	r2, [r0, #0]
 801a962:	1a9b      	subs	r3, r3, r2
 801a964:	8842      	ldrh	r2, [r0, #2]
 801a966:	808b      	strh	r3, [r1, #4]
 801a968:	88c3      	ldrh	r3, [r0, #6]
 801a96a:	1a9b      	subs	r3, r3, r2
 801a96c:	80cb      	strh	r3, [r1, #6]
 801a96e:	4770      	bx	lr

0801a970 <WM__GetTopLevelLayer>:
 801a970:	b510      	push	{r4, lr}
 801a972:	4604      	mov	r4, r0
 801a974:	f7fb fb96 	bl	80160a4 <GUI_ALLOC_h2p>
 801a978:	6980      	ldr	r0, [r0, #24]
 801a97a:	2800      	cmp	r0, #0
 801a97c:	d1f9      	bne.n	801a972 <WM__GetTopLevelLayer+0x2>
 801a97e:	4b05      	ldr	r3, [pc, #20]	; (801a994 <WM__GetTopLevelLayer+0x24>)
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	4294      	cmp	r4, r2
 801a984:	d005      	beq.n	801a992 <WM__GetTopLevelLayer+0x22>
 801a986:	6858      	ldr	r0, [r3, #4]
 801a988:	4284      	cmp	r4, r0
 801a98a:	bf0c      	ite	eq
 801a98c:	2001      	moveq	r0, #1
 801a98e:	f04f 30ff 	movne.w	r0, #4294967295
 801a992:	bd10      	pop	{r4, pc}
 801a994:	200224c0 	.word	0x200224c0

0801a998 <_Invalidate1Abs>:
 801a998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a99a:	b085      	sub	sp, #20
 801a99c:	460d      	mov	r5, r1
 801a99e:	4606      	mov	r6, r0
 801a9a0:	4617      	mov	r7, r2
 801a9a2:	f7fb fb7f 	bl	80160a4 <GUI_ALLOC_h2p>
 801a9a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801a9a8:	9001      	str	r0, [sp, #4]
 801a9aa:	078b      	lsls	r3, r1, #30
 801a9ac:	d53e      	bpl.n	801aa2c <_Invalidate1Abs+0x94>
 801a9ae:	4628      	mov	r0, r5
 801a9b0:	f7ff ffb6 	bl	801a920 <WM__RectIsNZ>
 801a9b4:	2800      	cmp	r0, #0
 801a9b6:	d039      	beq.n	801aa2c <_Invalidate1Abs+0x94>
 801a9b8:	f640 0301 	movw	r3, #2049	; 0x801
 801a9bc:	400b      	ands	r3, r1
 801a9be:	2b01      	cmp	r3, #1
 801a9c0:	d034      	beq.n	801aa2c <_Invalidate1Abs+0x94>
 801a9c2:	ac02      	add	r4, sp, #8
 801a9c4:	4630      	mov	r0, r6
 801a9c6:	f7fb fb77 	bl	80160b8 <GUI_ALLOC_LockH>
 801a9ca:	4629      	mov	r1, r5
 801a9cc:	4602      	mov	r2, r0
 801a9ce:	9001      	str	r0, [sp, #4]
 801a9d0:	4620      	mov	r0, r4
 801a9d2:	f7fd f80e 	bl	80179f2 <GUI__IntersectRects>
 801a9d6:	4620      	mov	r0, r4
 801a9d8:	f7ff ffa2 	bl	801a920 <WM__RectIsNZ>
 801a9dc:	b318      	cbz	r0, 801aa26 <_Invalidate1Abs+0x8e>
 801a9de:	9b01      	ldr	r3, [sp, #4]
 801a9e0:	f244 0120 	movw	r1, #16416	; 0x4020
 801a9e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a9e6:	f103 0508 	add.w	r5, r3, #8
 801a9ea:	4011      	ands	r1, r2
 801a9ec:	b129      	cbz	r1, 801a9fa <_Invalidate1Abs+0x62>
 801a9ee:	4622      	mov	r2, r4
 801a9f0:	4629      	mov	r1, r5
 801a9f2:	4628      	mov	r0, r5
 801a9f4:	f7fb fdd4 	bl	80165a0 <GUI_MergeRect>
 801a9f8:	e015      	b.n	801aa26 <_Invalidate1Abs+0x8e>
 801a9fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a9fe:	433a      	orrs	r2, r7
 801aa00:	e885 0003 	stmia.w	r5, {r0, r1}
 801aa04:	629a      	str	r2, [r3, #40]	; 0x28
 801aa06:	4630      	mov	r0, r6
 801aa08:	4a09      	ldr	r2, [pc, #36]	; (801aa30 <_Invalidate1Abs+0x98>)
 801aa0a:	8813      	ldrh	r3, [r2, #0]
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	8013      	strh	r3, [r2, #0]
 801aa10:	f7ff ffae 	bl	801a970 <WM__GetTopLevelLayer>
 801aa14:	4a07      	ldr	r2, [pc, #28]	; (801aa34 <_Invalidate1Abs+0x9c>)
 801aa16:	2301      	movs	r3, #1
 801aa18:	fa03 f000 	lsl.w	r0, r3, r0
 801aa1c:	6813      	ldr	r3, [r2, #0]
 801aa1e:	4303      	orrs	r3, r0
 801aa20:	6013      	str	r3, [r2, #0]
 801aa22:	f7fc fd29 	bl	8017478 <GUI_SignalEvent>
 801aa26:	a801      	add	r0, sp, #4
 801aa28:	f7fb fb54 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801aa2c:	b005      	add	sp, #20
 801aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa30:	200224d8 	.word	0x200224d8
 801aa34:	200224e8 	.word	0x200224e8

0801aa38 <WM__Invalidate1Abs>:
 801aa38:	2220      	movs	r2, #32
 801aa3a:	f7ff bfad 	b.w	801a998 <_Invalidate1Abs>

0801aa3e <WM_InvalidateWindowAndDescsEx>:
 801aa3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa40:	460f      	mov	r7, r1
 801aa42:	b085      	sub	sp, #20
 801aa44:	4615      	mov	r5, r2
 801aa46:	4606      	mov	r6, r0
 801aa48:	b348      	cbz	r0, 801aa9e <WM_InvalidateWindowAndDescsEx+0x60>
 801aa4a:	f7fb fb35 	bl	80160b8 <GUI_ALLOC_LockH>
 801aa4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801aa50:	ac04      	add	r4, sp, #16
 801aa52:	4602      	mov	r2, r0
 801aa54:	079b      	lsls	r3, r3, #30
 801aa56:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801aa5a:	d403      	bmi.n	801aa64 <WM_InvalidateWindowAndDescsEx+0x26>
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	f7fb fb39 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801aa62:	e01c      	b.n	801aa9e <WM_InvalidateWindowAndDescsEx+0x60>
 801aa64:	4639      	mov	r1, r7
 801aa66:	a802      	add	r0, sp, #8
 801aa68:	f7fc ffc3 	bl	80179f2 <GUI__IntersectRects>
 801aa6c:	2800      	cmp	r0, #0
 801aa6e:	d0f5      	beq.n	801aa5c <WM_InvalidateWindowAndDescsEx+0x1e>
 801aa70:	4620      	mov	r0, r4
 801aa72:	f7fb fb2f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801aa76:	462a      	mov	r2, r5
 801aa78:	a902      	add	r1, sp, #8
 801aa7a:	4630      	mov	r0, r6
 801aa7c:	f7ff ff8c 	bl	801a998 <_Invalidate1Abs>
 801aa80:	4630      	mov	r0, r6
 801aa82:	f000 fdf1 	bl	801b668 <WM_GetFirstChild>
 801aa86:	4604      	mov	r4, r0
 801aa88:	b14c      	cbz	r4, 801aa9e <WM_InvalidateWindowAndDescsEx+0x60>
 801aa8a:	4620      	mov	r0, r4
 801aa8c:	462a      	mov	r2, r5
 801aa8e:	a902      	add	r1, sp, #8
 801aa90:	f7ff ffd5 	bl	801aa3e <WM_InvalidateWindowAndDescsEx>
 801aa94:	4620      	mov	r0, r4
 801aa96:	f7fb fb05 	bl	80160a4 <GUI_ALLOC_h2p>
 801aa9a:	6a04      	ldr	r4, [r0, #32]
 801aa9c:	e7f4      	b.n	801aa88 <WM_InvalidateWindowAndDescsEx+0x4a>
 801aa9e:	b005      	add	sp, #20
 801aaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801aaa2 <WM__InvalidateRect>:
 801aaa2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801aaa6:	4680      	mov	r8, r0
 801aaa8:	4617      	mov	r7, r2
 801aaaa:	461d      	mov	r5, r3
 801aaac:	460c      	mov	r4, r1
 801aaae:	b381      	cbz	r1, 801ab12 <WM__InvalidateRect+0x70>
 801aab0:	4608      	mov	r0, r1
 801aab2:	f7fb fb01 	bl	80160b8 <GUI_ALLOC_LockH>
 801aab6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801aab8:	4602      	mov	r2, r0
 801aaba:	9001      	str	r0, [sp, #4]
 801aabc:	07b3      	lsls	r3, r6, #30
 801aabe:	d525      	bpl.n	801ab0c <WM__InvalidateRect+0x6a>
 801aac0:	4641      	mov	r1, r8
 801aac2:	a802      	add	r0, sp, #8
 801aac4:	f7fc ff95 	bl	80179f2 <GUI__IntersectRects>
 801aac8:	b300      	cbz	r0, 801ab0c <WM__InvalidateRect+0x6a>
 801aaca:	f640 0301 	movw	r3, #2049	; 0x801
 801aace:	4033      	ands	r3, r6
 801aad0:	2b01      	cmp	r3, #1
 801aad2:	d107      	bne.n	801aae4 <WM__InvalidateRect+0x42>
 801aad4:	9901      	ldr	r1, [sp, #4]
 801aad6:	462b      	mov	r3, r5
 801aad8:	a802      	add	r0, sp, #8
 801aada:	6a0a      	ldr	r2, [r1, #32]
 801aadc:	6989      	ldr	r1, [r1, #24]
 801aade:	f7ff ffe0 	bl	801aaa2 <WM__InvalidateRect>
 801aae2:	e004      	b.n	801aaee <WM__InvalidateRect+0x4c>
 801aae4:	462a      	mov	r2, r5
 801aae6:	a902      	add	r1, sp, #8
 801aae8:	4620      	mov	r0, r4
 801aaea:	f7ff ff55 	bl	801a998 <_Invalidate1Abs>
 801aaee:	9b01      	ldr	r3, [sp, #4]
 801aaf0:	69dc      	ldr	r4, [r3, #28]
 801aaf2:	b15c      	cbz	r4, 801ab0c <WM__InvalidateRect+0x6a>
 801aaf4:	42bc      	cmp	r4, r7
 801aaf6:	d009      	beq.n	801ab0c <WM__InvalidateRect+0x6a>
 801aaf8:	4620      	mov	r0, r4
 801aafa:	462a      	mov	r2, r5
 801aafc:	a902      	add	r1, sp, #8
 801aafe:	f7ff ff9e 	bl	801aa3e <WM_InvalidateWindowAndDescsEx>
 801ab02:	4620      	mov	r0, r4
 801ab04:	f7fb face 	bl	80160a4 <GUI_ALLOC_h2p>
 801ab08:	6a04      	ldr	r4, [r0, #32]
 801ab0a:	e7f2      	b.n	801aaf2 <WM__InvalidateRect+0x50>
 801ab0c:	a801      	add	r0, sp, #4
 801ab0e:	f7fb fae1 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ab12:	b004      	add	sp, #16
 801ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ab18 <WM__InvalidateParent>:
 801ab18:	b570      	push	{r4, r5, r6, lr}
 801ab1a:	4605      	mov	r5, r0
 801ab1c:	4608      	mov	r0, r1
 801ab1e:	460c      	mov	r4, r1
 801ab20:	4616      	mov	r6, r2
 801ab22:	f7fb fabf 	bl	80160a4 <GUI_ALLOC_h2p>
 801ab26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ab28:	4632      	mov	r2, r6
 801ab2a:	4621      	mov	r1, r4
 801ab2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801ab30:	4628      	mov	r0, r5
 801ab32:	bf14      	ite	ne
 801ab34:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 801ab38:	2320      	moveq	r3, #32
 801ab3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab3e:	f7ff bfb0 	b.w	801aaa2 <WM__InvalidateRect>

0801ab42 <WM__InvalidateRectEx>:
 801ab42:	2320      	movs	r3, #32
 801ab44:	f7ff bfad 	b.w	801aaa2 <WM__InvalidateRect>

0801ab48 <WM__DetachWindow>:
 801ab48:	b513      	push	{r0, r1, r4, lr}
 801ab4a:	4604      	mov	r4, r0
 801ab4c:	f7fb fab4 	bl	80160b8 <GUI_ALLOC_LockH>
 801ab50:	6981      	ldr	r1, [r0, #24]
 801ab52:	9001      	str	r0, [sp, #4]
 801ab54:	b141      	cbz	r1, 801ab68 <WM__DetachWindow+0x20>
 801ab56:	6a02      	ldr	r2, [r0, #32]
 801ab58:	f7ff fff3 	bl	801ab42 <WM__InvalidateRectEx>
 801ab5c:	4620      	mov	r0, r4
 801ab5e:	f7ff fe35 	bl	801a7cc <WM__RemoveWindowFromList>
 801ab62:	2200      	movs	r2, #0
 801ab64:	9b01      	ldr	r3, [sp, #4]
 801ab66:	619a      	str	r2, [r3, #24]
 801ab68:	a801      	add	r0, sp, #4
 801ab6a:	f7fb fab3 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ab6e:	b002      	add	sp, #8
 801ab70:	bd10      	pop	{r4, pc}

0801ab72 <WM_InvalidateRect>:
 801ab72:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab74:	460f      	mov	r7, r1
 801ab76:	b087      	sub	sp, #28
 801ab78:	4605      	mov	r5, r0
 801ab7a:	2800      	cmp	r0, #0
 801ab7c:	d038      	beq.n	801abf0 <WM_InvalidateRect+0x7e>
 801ab7e:	f7fc fb7b 	bl	8017278 <GUI_Lock>
 801ab82:	4628      	mov	r0, r5
 801ab84:	f7fb fa98 	bl	80160b8 <GUI_ALLOC_LockH>
 801ab88:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801ab8a:	9001      	str	r0, [sp, #4]
 801ab8c:	07b2      	lsls	r2, r6, #30
 801ab8e:	d52a      	bpl.n	801abe6 <WM_InvalidateRect+0x74>
 801ab90:	ac04      	add	r4, sp, #16
 801ab92:	03f3      	lsls	r3, r6, #15
 801ab94:	c803      	ldmia	r0, {r0, r1}
 801ab96:	e884 0003 	stmia.w	r4, {r0, r1}
 801ab9a:	d502      	bpl.n	801aba2 <WM_InvalidateRect+0x30>
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	f7ff fe97 	bl	801a8d0 <WM__InvalidateDrawAndDescs>
 801aba2:	b15f      	cbz	r7, 801abbc <WM_InvalidateRect+0x4a>
 801aba4:	6838      	ldr	r0, [r7, #0]
 801aba6:	ab02      	add	r3, sp, #8
 801aba8:	6879      	ldr	r1, [r7, #4]
 801abaa:	c303      	stmia	r3!, {r0, r1}
 801abac:	a902      	add	r1, sp, #8
 801abae:	9801      	ldr	r0, [sp, #4]
 801abb0:	f7ff fe2a 	bl	801a808 <WM__Client2Screen>
 801abb4:	a902      	add	r1, sp, #8
 801abb6:	4620      	mov	r0, r4
 801abb8:	f7fc fefe 	bl	80179b8 <GUI__IntersectRect>
 801abbc:	4629      	mov	r1, r5
 801abbe:	4620      	mov	r0, r4
 801abc0:	f7ff fd82 	bl	801a6c8 <WM__ClipAtParentBorders>
 801abc4:	b178      	cbz	r0, 801abe6 <WM_InvalidateRect+0x74>
 801abc6:	f640 0301 	movw	r3, #2049	; 0x801
 801abca:	4033      	ands	r3, r6
 801abcc:	2b01      	cmp	r3, #1
 801abce:	d106      	bne.n	801abde <WM_InvalidateRect+0x6c>
 801abd0:	9b01      	ldr	r3, [sp, #4]
 801abd2:	4620      	mov	r0, r4
 801abd4:	6a1a      	ldr	r2, [r3, #32]
 801abd6:	6999      	ldr	r1, [r3, #24]
 801abd8:	f7ff ffb3 	bl	801ab42 <WM__InvalidateRectEx>
 801abdc:	e003      	b.n	801abe6 <WM_InvalidateRect+0x74>
 801abde:	4621      	mov	r1, r4
 801abe0:	4628      	mov	r0, r5
 801abe2:	f7ff ff29 	bl	801aa38 <WM__Invalidate1Abs>
 801abe6:	a801      	add	r0, sp, #4
 801abe8:	f7fb fa74 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801abec:	f7fc fb3a 	bl	8017264 <GUI_Unlock>
 801abf0:	b007      	add	sp, #28
 801abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801abf4 <WM_InvalidateWindow>:
 801abf4:	2100      	movs	r1, #0
 801abf6:	f7ff bfbc 	b.w	801ab72 <WM_InvalidateRect>

0801abfa <WM__SelectTopLevelLayer>:
 801abfa:	b508      	push	{r3, lr}
 801abfc:	f7ff feb8 	bl	801a970 <WM__GetTopLevelLayer>
 801ac00:	2800      	cmp	r0, #0
 801ac02:	db03      	blt.n	801ac0c <WM__SelectTopLevelLayer+0x12>
 801ac04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ac08:	f7fc bab0 	b.w	801716c <GUI_SelectLayer>
 801ac0c:	bd08      	pop	{r3, pc}
	...

0801ac10 <WM_SelectWindow>:
 801ac10:	b570      	push	{r4, r5, r6, lr}
 801ac12:	4604      	mov	r4, r0
 801ac14:	f7fc fb30 	bl	8017278 <GUI_Lock>
 801ac18:	4b0d      	ldr	r3, [pc, #52]	; (801ac50 <WM_SelectWindow+0x40>)
 801ac1a:	681a      	ldr	r2, [r3, #0]
 801ac1c:	461d      	mov	r5, r3
 801ac1e:	6c96      	ldr	r6, [r2, #72]	; 0x48
 801ac20:	b90c      	cbnz	r4, 801ac26 <WM_SelectWindow+0x16>
 801ac22:	4b0c      	ldr	r3, [pc, #48]	; (801ac54 <WM_SelectWindow+0x44>)
 801ac24:	681c      	ldr	r4, [r3, #0]
 801ac26:	6494      	str	r4, [r2, #72]	; 0x48
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f7ff ffe6 	bl	801abfa <WM__SelectTopLevelLayer>
 801ac2e:	f7fd f9d7 	bl	8017fe0 <LCD_SetClipRectMax>
 801ac32:	4620      	mov	r0, r4
 801ac34:	f7fb fa36 	bl	80160a4 <GUI_ALLOC_h2p>
 801ac38:	682b      	ldr	r3, [r5, #0]
 801ac3a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ac3e:	64da      	str	r2, [r3, #76]	; 0x4c
 801ac40:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ac44:	651a      	str	r2, [r3, #80]	; 0x50
 801ac46:	f7fc fb0d 	bl	8017264 <GUI_Unlock>
 801ac4a:	4630      	mov	r0, r6
 801ac4c:	bd70      	pop	{r4, r5, r6, pc}
 801ac4e:	bf00      	nop
 801ac50:	20000018 	.word	0x20000018
 801ac54:	200224dc 	.word	0x200224dc

0801ac58 <WM_CreateWindowAsChild>:
 801ac58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ac60:	4698      	mov	r8, r3
 801ac62:	4605      	mov	r5, r0
 801ac64:	460e      	mov	r6, r1
 801ac66:	4617      	mov	r7, r2
 801ac68:	f7fc fb06 	bl	8017278 <GUI_Lock>
 801ac6c:	4b4d      	ldr	r3, [pc, #308]	; (801ada4 <WM_CreateWindowAsChild+0x14c>)
 801ac6e:	f8d3 9000 	ldr.w	r9, [r3]
 801ac72:	f1ba 0f00 	cmp.w	sl, #0
 801ac76:	d128      	bne.n	801acca <WM_CreateWindowAsChild+0x72>
 801ac78:	4b4b      	ldr	r3, [pc, #300]	; (801ada8 <WM_CreateWindowAsChild+0x150>)
 801ac7a:	881b      	ldrh	r3, [r3, #0]
 801ac7c:	b353      	cbz	r3, 801acd4 <WM_CreateWindowAsChild+0x7c>
 801ac7e:	4b4b      	ldr	r3, [pc, #300]	; (801adac <WM_CreateWindowAsChild+0x154>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	7c5a      	ldrb	r2, [r3, #17]
 801ac84:	4b4a      	ldr	r3, [pc, #296]	; (801adb0 <WM_CreateWindowAsChild+0x158>)
 801ac86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac8a:	1c5a      	adds	r2, r3, #1
 801ac8c:	2a01      	cmp	r2, #1
 801ac8e:	d921      	bls.n	801acd4 <WM_CreateWindowAsChild+0x7c>
 801ac90:	469a      	mov	sl, r3
 801ac92:	4650      	mov	r0, sl
 801ac94:	f7fb fa10 	bl	80160b8 <GUI_ALLOC_LockH>
 801ac98:	f9b0 1000 	ldrsh.w	r1, [r0]
 801ac9c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801aca0:	9001      	str	r0, [sp, #4]
 801aca2:	440d      	add	r5, r1
 801aca4:	4416      	add	r6, r2
 801aca6:	b91f      	cbnz	r7, 801acb0 <WM_CreateWindowAsChild+0x58>
 801aca8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801acac:	1a5f      	subs	r7, r3, r1
 801acae:	3701      	adds	r7, #1
 801acb0:	f1b8 0f00 	cmp.w	r8, #0
 801acb4:	d105      	bne.n	801acc2 <WM_CreateWindowAsChild+0x6a>
 801acb6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801acba:	ebc2 0803 	rsb	r8, r2, r3
 801acbe:	f108 0801 	add.w	r8, r8, #1
 801acc2:	a801      	add	r0, sp, #4
 801acc4:	f7fb fa06 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801acc8:	e004      	b.n	801acd4 <WM_CreateWindowAsChild+0x7c>
 801acca:	f1ba 3fff 	cmp.w	sl, #4294967295
 801acce:	d1e0      	bne.n	801ac92 <WM_CreateWindowAsChild+0x3a>
 801acd0:	f04f 0a00 	mov.w	sl, #0
 801acd4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801acd6:	302c      	adds	r0, #44	; 0x2c
 801acd8:	f7fb fbd6 	bl	8016488 <GUI_ALLOC_AllocZero>
 801acdc:	4604      	mov	r4, r0
 801acde:	2800      	cmp	r0, #0
 801ace0:	d059      	beq.n	801ad96 <WM_CreateWindowAsChild+0x13e>
 801ace2:	4a31      	ldr	r2, [pc, #196]	; (801ada8 <WM_CreateWindowAsChild+0x150>)
 801ace4:	f10d 0b08 	add.w	fp, sp, #8
 801ace8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acea:	ea49 0903 	orr.w	r9, r9, r3
 801acee:	8813      	ldrh	r3, [r2, #0]
 801acf0:	3301      	adds	r3, #1
 801acf2:	8013      	strh	r3, [r2, #0]
 801acf4:	f7fb f9e0 	bl	80160b8 <GUI_ALLOC_LockH>
 801acf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801acfa:	f84b 0d08 	str.w	r0, [fp, #-8]!
 801acfe:	6103      	str	r3, [r0, #16]
 801ad00:	4b2c      	ldr	r3, [pc, #176]	; (801adb4 <WM_CreateWindowAsChild+0x15c>)
 801ad02:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801ad04:	8005      	strh	r5, [r0, #0]
 801ad06:	ea09 0303 	and.w	r3, r9, r3
 801ad0a:	8046      	strh	r6, [r0, #2]
 801ad0c:	443d      	add	r5, r7
 801ad0e:	4446      	add	r6, r8
 801ad10:	4313      	orrs	r3, r2
 801ad12:	3d01      	subs	r5, #1
 801ad14:	3e01      	subs	r6, #1
 801ad16:	6283      	str	r3, [r0, #40]	; 0x28
 801ad18:	8085      	strh	r5, [r0, #4]
 801ad1a:	80c6      	strh	r6, [r0, #6]
 801ad1c:	4658      	mov	r0, fp
 801ad1e:	f7fb f9d9 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ad22:	4b25      	ldr	r3, [pc, #148]	; (801adb8 <WM_CreateWindowAsChild+0x160>)
 801ad24:	6818      	ldr	r0, [r3, #0]
 801ad26:	b148      	cbz	r0, 801ad3c <WM_CreateWindowAsChild+0xe4>
 801ad28:	f7fb f9bc 	bl	80160a4 <GUI_ALLOC_h2p>
 801ad2c:	4605      	mov	r5, r0
 801ad2e:	4620      	mov	r0, r4
 801ad30:	f7fb f9b8 	bl	80160a4 <GUI_ALLOC_h2p>
 801ad34:	696b      	ldr	r3, [r5, #20]
 801ad36:	6143      	str	r3, [r0, #20]
 801ad38:	616c      	str	r4, [r5, #20]
 801ad3a:	e000      	b.n	801ad3e <WM_CreateWindowAsChild+0xe6>
 801ad3c:	601c      	str	r4, [r3, #0]
 801ad3e:	4651      	mov	r1, sl
 801ad40:	4620      	mov	r0, r4
 801ad42:	f7ff fced 	bl	801a720 <WM__InsertWindowIntoList>
 801ad46:	f019 0f20 	tst.w	r9, #32
 801ad4a:	d002      	beq.n	801ad52 <WM_CreateWindowAsChild+0xfa>
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	f7ff ff5f 	bl	801ac10 <WM_SelectWindow>
 801ad52:	f019 0f01 	tst.w	r9, #1
 801ad56:	bf1f      	itttt	ne
 801ad58:	4a18      	ldrne	r2, [pc, #96]	; (801adbc <WM_CreateWindowAsChild+0x164>)
 801ad5a:	6813      	ldrne	r3, [r2, #0]
 801ad5c:	3301      	addne	r3, #1
 801ad5e:	6013      	strne	r3, [r2, #0]
 801ad60:	f019 0f40 	tst.w	r9, #64	; 0x40
 801ad64:	d002      	beq.n	801ad6c <WM_CreateWindowAsChild+0x114>
 801ad66:	4620      	mov	r0, r4
 801ad68:	f000 fca6 	bl	801b6b8 <WM_BringToBottom>
 801ad6c:	f019 0f02 	tst.w	r9, #2
 801ad70:	d00d      	beq.n	801ad8e <WM_CreateWindowAsChild+0x136>
 801ad72:	4620      	mov	r0, r4
 801ad74:	f7fb f9a0 	bl	80160b8 <GUI_ALLOC_LockH>
 801ad78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ad7a:	9000      	str	r0, [sp, #0]
 801ad7c:	f043 0302 	orr.w	r3, r3, #2
 801ad80:	6283      	str	r3, [r0, #40]	; 0x28
 801ad82:	4658      	mov	r0, fp
 801ad84:	f7fb f9a6 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ad88:	4620      	mov	r0, r4
 801ad8a:	f7ff ff33 	bl	801abf4 <WM_InvalidateWindow>
 801ad8e:	2101      	movs	r1, #1
 801ad90:	4620      	mov	r0, r4
 801ad92:	f7ff fdd6 	bl	801a942 <WM__SendMsgNoData>
 801ad96:	f7fc fa65 	bl	8017264 <GUI_Unlock>
 801ad9a:	4620      	mov	r0, r4
 801ad9c:	b003      	add	sp, #12
 801ad9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ada2:	bf00      	nop
 801ada4:	200224f0 	.word	0x200224f0
 801ada8:	200224b8 	.word	0x200224b8
 801adac:	20000018 	.word	0x20000018
 801adb0:	200224c0 	.word	0x200224c0
 801adb4:	003f3f9f 	.word	0x003f3f9f
 801adb8:	200224dc 	.word	0x200224dc
 801adbc:	20022510 	.word	0x20022510

0801adc0 <WM_DeleteWindow>:
 801adc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801adc2:	4604      	mov	r4, r0
 801adc4:	2800      	cmp	r0, #0
 801adc6:	d076      	beq.n	801aeb6 <WM_DeleteWindow+0xf6>
 801adc8:	f7fc fa56 	bl	8017278 <GUI_Lock>
 801adcc:	4620      	mov	r0, r4
 801adce:	f7ff fd6f 	bl	801a8b0 <WM__IsWindow>
 801add2:	2800      	cmp	r0, #0
 801add4:	d06d      	beq.n	801aeb2 <WM_DeleteWindow+0xf2>
 801add6:	4620      	mov	r0, r4
 801add8:	f7ff fdca 	bl	801a970 <WM__GetTopLevelLayer>
 801addc:	210b      	movs	r1, #11
 801adde:	4605      	mov	r5, r0
 801ade0:	4620      	mov	r0, r4
 801ade2:	f7ff fdae 	bl	801a942 <WM__SendMsgNoData>
 801ade6:	4620      	mov	r0, r4
 801ade8:	f000 fea6 	bl	801bb38 <WM__DeleteAssocTimer>
 801adec:	4620      	mov	r0, r4
 801adee:	f7fb f963 	bl	80160b8 <GUI_ALLOC_LockH>
 801adf2:	9001      	str	r0, [sp, #4]
 801adf4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801adf6:	b108      	cbz	r0, 801adfc <WM_DeleteWindow+0x3c>
 801adf8:	f002 fde0 	bl	801d9bc <GUI_MEMDEV_Delete>
 801adfc:	2100      	movs	r1, #0
 801adfe:	4b2f      	ldr	r3, [pc, #188]	; (801aebc <WM_DeleteWindow+0xfc>)
 801ae00:	4a2f      	ldr	r2, [pc, #188]	; (801aec0 <WM_DeleteWindow+0x100>)
 801ae02:	6099      	str	r1, [r3, #8]
 801ae04:	4b2f      	ldr	r3, [pc, #188]	; (801aec4 <WM_DeleteWindow+0x104>)
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ae0c:	4284      	cmp	r4, r0
 801ae0e:	bf08      	it	eq
 801ae10:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 801ae14:	4a2c      	ldr	r2, [pc, #176]	; (801aec8 <WM_DeleteWindow+0x108>)
 801ae16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ae1a:	428c      	cmp	r4, r1
 801ae1c:	bf04      	itt	eq
 801ae1e:	2100      	moveq	r1, #0
 801ae20:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 801ae24:	2200      	movs	r2, #0
 801ae26:	4b29      	ldr	r3, [pc, #164]	; (801aecc <WM_DeleteWindow+0x10c>)
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	b12b      	cbz	r3, 801ae38 <WM_DeleteWindow+0x78>
 801ae2c:	6859      	ldr	r1, [r3, #4]
 801ae2e:	428c      	cmp	r4, r1
 801ae30:	d100      	bne.n	801ae34 <WM_DeleteWindow+0x74>
 801ae32:	605a      	str	r2, [r3, #4]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	e7f8      	b.n	801ae2a <WM_DeleteWindow+0x6a>
 801ae38:	2107      	movs	r1, #7
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	f000 fd56 	bl	801b8ec <WM_NotifyParent>
 801ae40:	9e01      	ldr	r6, [sp, #4]
 801ae42:	69f0      	ldr	r0, [r6, #28]
 801ae44:	f7ff ffbc 	bl	801adc0 <WM_DeleteWindow>
 801ae48:	69f3      	ldr	r3, [r6, #28]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d1f9      	bne.n	801ae42 <WM_DeleteWindow+0x82>
 801ae4e:	4620      	mov	r0, r4
 801ae50:	f7ff fe7a 	bl	801ab48 <WM__DetachWindow>
 801ae54:	4b1e      	ldr	r3, [pc, #120]	; (801aed0 <WM_DeleteWindow+0x110>)
 801ae56:	6818      	ldr	r0, [r3, #0]
 801ae58:	b150      	cbz	r0, 801ae70 <WM_DeleteWindow+0xb0>
 801ae5a:	f7fb f923 	bl	80160a4 <GUI_ALLOC_h2p>
 801ae5e:	4606      	mov	r6, r0
 801ae60:	6940      	ldr	r0, [r0, #20]
 801ae62:	4284      	cmp	r4, r0
 801ae64:	d1f8      	bne.n	801ae58 <WM_DeleteWindow+0x98>
 801ae66:	4620      	mov	r0, r4
 801ae68:	f7fb f91c 	bl	80160a4 <GUI_ALLOC_h2p>
 801ae6c:	6943      	ldr	r3, [r0, #20]
 801ae6e:	6173      	str	r3, [r6, #20]
 801ae70:	9b01      	ldr	r3, [sp, #4]
 801ae72:	a801      	add	r0, sp, #4
 801ae74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ae76:	07d1      	lsls	r1, r2, #31
 801ae78:	bf41      	itttt	mi
 801ae7a:	4916      	ldrmi	r1, [pc, #88]	; (801aed4 <WM_DeleteWindow+0x114>)
 801ae7c:	680b      	ldrmi	r3, [r1, #0]
 801ae7e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801ae82:	600b      	strmi	r3, [r1, #0]
 801ae84:	0693      	lsls	r3, r2, #26
 801ae86:	bf41      	itttt	mi
 801ae88:	4a13      	ldrmi	r2, [pc, #76]	; (801aed8 <WM_DeleteWindow+0x118>)
 801ae8a:	8813      	ldrhmi	r3, [r2, #0]
 801ae8c:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801ae90:	8013      	strhmi	r3, [r2, #0]
 801ae92:	f7fb f91f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ae96:	4a11      	ldr	r2, [pc, #68]	; (801aedc <WM_DeleteWindow+0x11c>)
 801ae98:	4620      	mov	r0, r4
 801ae9a:	8813      	ldrh	r3, [r2, #0]
 801ae9c:	3b01      	subs	r3, #1
 801ae9e:	8013      	strh	r3, [r2, #0]
 801aea0:	f7fb f948 	bl	8016134 <GUI_ALLOC_Free>
 801aea4:	2d00      	cmp	r5, #0
 801aea6:	db04      	blt.n	801aeb2 <WM_DeleteWindow+0xf2>
 801aea8:	4b0d      	ldr	r3, [pc, #52]	; (801aee0 <WM_DeleteWindow+0x120>)
 801aeaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801aeae:	f7ff feaf 	bl	801ac10 <WM_SelectWindow>
 801aeb2:	f7fc f9d7 	bl	8017264 <GUI_Unlock>
 801aeb6:	b002      	add	sp, #8
 801aeb8:	bd70      	pop	{r4, r5, r6, pc}
 801aeba:	bf00      	nop
 801aebc:	20000304 	.word	0x20000304
 801aec0:	200224d0 	.word	0x200224d0
 801aec4:	200224e0 	.word	0x200224e0
 801aec8:	20022504 	.word	0x20022504
 801aecc:	200224fc 	.word	0x200224fc
 801aed0:	200224dc 	.word	0x200224dc
 801aed4:	20022510 	.word	0x20022510
 801aed8:	200224d8 	.word	0x200224d8
 801aedc:	200224b8 	.word	0x200224b8
 801aee0:	200224c0 	.word	0x200224c0

0801aee4 <_Exec1Input>:
 801aee4:	4b1d      	ldr	r3, [pc, #116]	; (801af5c <_Exec1Input+0x78>)
 801aee6:	685a      	ldr	r2, [r3, #4]
 801aee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aeea:	461d      	mov	r5, r3
 801aeec:	b1ea      	cbz	r2, 801af2a <_Exec1Input+0x46>
 801aeee:	f7fc f9c3 	bl	8017278 <GUI_Lock>
 801aef2:	4b1b      	ldr	r3, [pc, #108]	; (801af60 <_Exec1Input+0x7c>)
 801aef4:	681c      	ldr	r4, [r3, #0]
 801aef6:	b1ac      	cbz	r4, 801af24 <_Exec1Input+0x40>
 801aef8:	4620      	mov	r0, r4
 801aefa:	f7fb f8dd 	bl	80160b8 <GUI_ALLOC_LockH>
 801aefe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801af00:	9001      	str	r0, [sp, #4]
 801af02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 801af06:	6946      	ldr	r6, [r0, #20]
 801af08:	d007      	beq.n	801af1a <_Exec1Input+0x36>
 801af0a:	a801      	add	r0, sp, #4
 801af0c:	f7fb f8e2 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801af10:	4620      	mov	r0, r4
 801af12:	f7ff ff55 	bl	801adc0 <WM_DeleteWindow>
 801af16:	4634      	mov	r4, r6
 801af18:	e7ed      	b.n	801aef6 <_Exec1Input+0x12>
 801af1a:	a801      	add	r0, sp, #4
 801af1c:	4634      	mov	r4, r6
 801af1e:	f7fb f8d9 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801af22:	e7e8      	b.n	801aef6 <_Exec1Input+0x12>
 801af24:	606c      	str	r4, [r5, #4]
 801af26:	f7fc f99d 	bl	8017264 <GUI_Unlock>
 801af2a:	4b0e      	ldr	r3, [pc, #56]	; (801af64 <_Exec1Input+0x80>)
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	b103      	cbz	r3, 801af32 <_Exec1Input+0x4e>
 801af30:	4798      	blx	r3
 801af32:	4b0d      	ldr	r3, [pc, #52]	; (801af68 <_Exec1Input+0x84>)
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	b953      	cbnz	r3, 801af4e <_Exec1Input+0x6a>
 801af38:	4b0c      	ldr	r3, [pc, #48]	; (801af6c <_Exec1Input+0x88>)
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801af40:	b148      	cbz	r0, 801af56 <_Exec1Input+0x72>
 801af42:	f7fc f8d7 	bl	80170f4 <GUI_PollKeyMsg>
 801af46:	3000      	adds	r0, #0
 801af48:	bf18      	it	ne
 801af4a:	2001      	movne	r0, #1
 801af4c:	e003      	b.n	801af56 <_Exec1Input+0x72>
 801af4e:	4798      	blx	r3
 801af50:	2800      	cmp	r0, #0
 801af52:	d0f1      	beq.n	801af38 <_Exec1Input+0x54>
 801af54:	2001      	movs	r0, #1
 801af56:	b002      	add	sp, #8
 801af58:	bd70      	pop	{r4, r5, r6, pc}
 801af5a:	bf00      	nop
 801af5c:	20000304 	.word	0x20000304
 801af60:	200224dc 	.word	0x200224dc
 801af64:	200224c8 	.word	0x200224c8
 801af68:	200224a8 	.word	0x200224a8
 801af6c:	20000018 	.word	0x20000018

0801af70 <WM__GetNextIVR>:
 801af70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801af74:	4f5d      	ldr	r7, [pc, #372]	; (801b0ec <WM__GetNextIVR+0x17c>)
 801af76:	683b      	ldr	r3, [r7, #0]
 801af78:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801af7c:	2800      	cmp	r0, #0
 801af7e:	f000 80b1 	beq.w	801b0e4 <WM__GetNextIVR+0x174>
 801af82:	4a5b      	ldr	r2, [pc, #364]	; (801b0f0 <WM__GetNextIVR+0x180>)
 801af84:	6a13      	ldr	r3, [r2, #32]
 801af86:	4614      	mov	r4, r2
 801af88:	2b01      	cmp	r3, #1
 801af8a:	dd03      	ble.n	801af94 <WM__GetNextIVR+0x24>
 801af8c:	3b01      	subs	r3, #1
 801af8e:	2000      	movs	r0, #0
 801af90:	6213      	str	r3, [r2, #32]
 801af92:	e0a7      	b.n	801b0e4 <WM__GetNextIVR+0x174>
 801af94:	69d3      	ldr	r3, [r2, #28]
 801af96:	f102 0614 	add.w	r6, r2, #20
 801af9a:	ad02      	add	r5, sp, #8
 801af9c:	3301      	adds	r3, #1
 801af9e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801afa2:	61d3      	str	r3, [r2, #28]
 801afa4:	e885 0003 	stmia.w	r5, {r0, r1}
 801afa8:	b923      	cbnz	r3, 801afb4 <WM__GetNextIVR+0x44>
 801afaa:	8993      	ldrh	r3, [r2, #12]
 801afac:	f8ad 3008 	strh.w	r3, [sp, #8]
 801afb0:	89d3      	ldrh	r3, [r2, #14]
 801afb2:	e010      	b.n	801afd6 <WM__GetNextIVR+0x66>
 801afb4:	8b13      	ldrh	r3, [r2, #24]
 801afb6:	8ad2      	ldrh	r2, [r2, #22]
 801afb8:	3301      	adds	r3, #1
 801afba:	f8ad 200a 	strh.w	r2, [sp, #10]
 801afbe:	b21b      	sxth	r3, r3
 801afc0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 801afc4:	429a      	cmp	r2, r3
 801afc6:	f8ad 3008 	strh.w	r3, [sp, #8]
 801afca:	da06      	bge.n	801afda <WM__GetNextIVR+0x6a>
 801afcc:	89a3      	ldrh	r3, [r4, #12]
 801afce:	f8ad 3008 	strh.w	r3, [sp, #8]
 801afd2:	8b63      	ldrh	r3, [r4, #26]
 801afd4:	3301      	adds	r3, #1
 801afd6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801afda:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801afde:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 801afe2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801b0f0 <WM__GetNextIVR+0x180>
 801afe6:	429a      	cmp	r2, r3
 801afe8:	dd04      	ble.n	801aff4 <WM__GetNextIVR+0x84>
 801afea:	6a23      	ldr	r3, [r4, #32]
 801afec:	2000      	movs	r0, #0
 801afee:	3b01      	subs	r3, #1
 801aff0:	6223      	str	r3, [r4, #32]
 801aff2:	e077      	b.n	801b0e4 <WM__GetNextIVR+0x174>
 801aff4:	683b      	ldr	r3, [r7, #0]
 801aff6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801aff8:	f7fb f85e 	bl	80160b8 <GUI_ALLOC_LockH>
 801affc:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801b000:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 801b004:	9001      	str	r0, [sp, #4]
 801b006:	429a      	cmp	r2, r3
 801b008:	d11c      	bne.n	801b044 <WM__GetNextIVR+0xd4>
 801b00a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 801b00e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b012:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 801b016:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b01a:	4b34      	ldr	r3, [pc, #208]	; (801b0ec <WM__GetNextIVR+0x17c>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801b020:	b15a      	cbz	r2, 801b03a <WM__GetNextIVR+0xca>
 801b022:	4610      	mov	r0, r2
 801b024:	f7fb f83e 	bl	80160a4 <GUI_ALLOC_h2p>
 801b028:	4680      	mov	r8, r0
 801b02a:	2200      	movs	r2, #0
 801b02c:	4629      	mov	r1, r5
 801b02e:	6a00      	ldr	r0, [r0, #32]
 801b030:	f7ff f966 	bl	801a300 <_Findy1>
 801b034:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801b038:	e7f2      	b.n	801b020 <WM__GetNextIVR+0xb0>
 801b03a:	9b01      	ldr	r3, [sp, #4]
 801b03c:	4629      	mov	r1, r5
 801b03e:	69d8      	ldr	r0, [r3, #28]
 801b040:	f7ff f95e 	bl	801a300 <_Findy1>
 801b044:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b048:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b04c:	683b      	ldr	r3, [r7, #0]
 801b04e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801b050:	b16a      	cbz	r2, 801b06e <WM__GetNextIVR+0xfe>
 801b052:	4610      	mov	r0, r2
 801b054:	f7fb f826 	bl	80160a4 <GUI_ALLOC_h2p>
 801b058:	2200      	movs	r2, #0
 801b05a:	4680      	mov	r8, r0
 801b05c:	4629      	mov	r1, r5
 801b05e:	6a00      	ldr	r0, [r0, #32]
 801b060:	f7ff f9a1 	bl	801a3a6 <_Findx0>
 801b064:	2800      	cmp	r0, #0
 801b066:	d1ed      	bne.n	801b044 <WM__GetNextIVR+0xd4>
 801b068:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801b06c:	e7f0      	b.n	801b050 <WM__GetNextIVR+0xe0>
 801b06e:	9b01      	ldr	r3, [sp, #4]
 801b070:	4629      	mov	r1, r5
 801b072:	69d8      	ldr	r0, [r3, #28]
 801b074:	f7ff f997 	bl	801a3a6 <_Findx0>
 801b078:	2800      	cmp	r0, #0
 801b07a:	d1e3      	bne.n	801b044 <WM__GetNextIVR+0xd4>
 801b07c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801b080:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801b084:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b088:	429a      	cmp	r2, r3
 801b08a:	dd07      	ble.n	801b09c <WM__GetNextIVR+0x12c>
 801b08c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b090:	e886 0003 	stmia.w	r6, {r0, r1}
 801b094:	a801      	add	r0, sp, #4
 801b096:	f7fb f81d 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b09a:	e797      	b.n	801afcc <WM__GetNextIVR+0x5c>
 801b09c:	683b      	ldr	r3, [r7, #0]
 801b09e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801b0a0:	b152      	cbz	r2, 801b0b8 <WM__GetNextIVR+0x148>
 801b0a2:	4610      	mov	r0, r2
 801b0a4:	f7fa fffe 	bl	80160a4 <GUI_ALLOC_h2p>
 801b0a8:	4607      	mov	r7, r0
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	4629      	mov	r1, r5
 801b0ae:	6a00      	ldr	r0, [r0, #32]
 801b0b0:	f7ff f9bc 	bl	801a42c <_Findx1>
 801b0b4:	69ba      	ldr	r2, [r7, #24]
 801b0b6:	e7f3      	b.n	801b0a0 <WM__GetNextIVR+0x130>
 801b0b8:	af04      	add	r7, sp, #16
 801b0ba:	4629      	mov	r1, r5
 801b0bc:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 801b0c0:	69d8      	ldr	r0, [r3, #28]
 801b0c2:	f7ff f9b3 	bl	801a42c <_Findx1>
 801b0c6:	4638      	mov	r0, r7
 801b0c8:	f7fb f804 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b0cc:	69e2      	ldr	r2, [r4, #28]
 801b0ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 801b0d2:	429a      	cmp	r2, r3
 801b0d4:	dc89      	bgt.n	801afea <WM__GetNextIVR+0x7a>
 801b0d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b0da:	e886 0003 	stmia.w	r6, {r0, r1}
 801b0de:	f7ff fbc3 	bl	801a868 <WM__ActivateClipRect>
 801b0e2:	2001      	movs	r0, #1
 801b0e4:	b004      	add	sp, #16
 801b0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ea:	bf00      	nop
 801b0ec:	20000018 	.word	0x20000018
 801b0f0:	20000304 	.word	0x20000304

0801b0f4 <WM__InitIVRSearch>:
 801b0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0f8:	4e39      	ldr	r6, [pc, #228]	; (801b1e0 <WM__InitIVRSearch+0xec>)
 801b0fa:	b086      	sub	sp, #24
 801b0fc:	4680      	mov	r8, r0
 801b0fe:	6832      	ldr	r2, [r6, #0]
 801b100:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 801b104:	b913      	cbnz	r3, 801b10c <WM__InitIVRSearch+0x18>
 801b106:	f7ff fbaf 	bl	801a868 <WM__ActivateClipRect>
 801b10a:	e064      	b.n	801b1d6 <WM__InitIVRSearch+0xe2>
 801b10c:	4f35      	ldr	r7, [pc, #212]	; (801b1e4 <WM__InitIVRSearch+0xf0>)
 801b10e:	6a3b      	ldr	r3, [r7, #32]
 801b110:	463d      	mov	r5, r7
 801b112:	3301      	adds	r3, #1
 801b114:	2b01      	cmp	r3, #1
 801b116:	623b      	str	r3, [r7, #32]
 801b118:	dc5d      	bgt.n	801b1d6 <WM__InitIVRSearch+0xe2>
 801b11a:	6c90      	ldr	r0, [r2, #72]	; 0x48
 801b11c:	f7fa ffcc 	bl	80160b8 <GUI_ALLOC_LockH>
 801b120:	f04f 33ff 	mov.w	r3, #4294967295
 801b124:	9000      	str	r0, [sp, #0]
 801b126:	61fb      	str	r3, [r7, #28]
 801b128:	4b2f      	ldr	r3, [pc, #188]	; (801b1e8 <WM__InitIVRSearch+0xf4>)
 801b12a:	781b      	ldrb	r3, [r3, #0]
 801b12c:	b113      	cbz	r3, 801b134 <WM__InitIVRSearch+0x40>
 801b12e:	ab02      	add	r3, sp, #8
 801b130:	3008      	adds	r0, #8
 801b132:	e004      	b.n	801b13e <WM__InitIVRSearch+0x4a>
 801b134:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b136:	f013 0402 	ands.w	r4, r3, #2
 801b13a:	d00c      	beq.n	801b156 <WM__InitIVRSearch+0x62>
 801b13c:	ab02      	add	r3, sp, #8
 801b13e:	ac02      	add	r4, sp, #8
 801b140:	c803      	ldmia	r0, {r0, r1}
 801b142:	e883 0003 	stmia.w	r3, {r0, r1}
 801b146:	f1b8 0f00 	cmp.w	r8, #0
 801b14a:	d00c      	beq.n	801b166 <WM__InitIVRSearch+0x72>
 801b14c:	4641      	mov	r1, r8
 801b14e:	4620      	mov	r0, r4
 801b150:	f7fc fc32 	bl	80179b8 <GUI__IntersectRect>
 801b154:	e007      	b.n	801b166 <WM__InitIVRSearch+0x72>
 801b156:	6a3b      	ldr	r3, [r7, #32]
 801b158:	4668      	mov	r0, sp
 801b15a:	3b01      	subs	r3, #1
 801b15c:	623b      	str	r3, [r7, #32]
 801b15e:	f7fa ffb9 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b162:	4620      	mov	r0, r4
 801b164:	e038      	b.n	801b1d8 <WM__InitIVRSearch+0xe4>
 801b166:	6833      	ldr	r3, [r6, #0]
 801b168:	4f20      	ldr	r7, [pc, #128]	; (801b1ec <WM__InitIVRSearch+0xf8>)
 801b16a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b16c:	b1c2      	cbz	r2, 801b1a0 <WM__InitIVRSearch+0xac>
 801b16e:	9b00      	ldr	r3, [sp, #0]
 801b170:	6810      	ldr	r0, [r2, #0]
 801b172:	9301      	str	r3, [sp, #4]
 801b174:	ab04      	add	r3, sp, #16
 801b176:	6851      	ldr	r1, [r2, #4]
 801b178:	c303      	stmia	r3!, {r0, r1}
 801b17a:	683b      	ldr	r3, [r7, #0]
 801b17c:	b133      	cbz	r3, 801b18c <WM__InitIVRSearch+0x98>
 801b17e:	a801      	add	r0, sp, #4
 801b180:	f7fa ffa8 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b184:	6838      	ldr	r0, [r7, #0]
 801b186:	f7fa ff97 	bl	80160b8 <GUI_ALLOC_LockH>
 801b18a:	9001      	str	r0, [sp, #4]
 801b18c:	a904      	add	r1, sp, #16
 801b18e:	9801      	ldr	r0, [sp, #4]
 801b190:	f7ff fb3a 	bl	801a808 <WM__Client2Screen>
 801b194:	4620      	mov	r0, r4
 801b196:	a904      	add	r1, sp, #16
 801b198:	f7fc fc0e 	bl	80179b8 <GUI__IntersectRect>
 801b19c:	a801      	add	r0, sp, #4
 801b19e:	e000      	b.n	801b1a2 <WM__InitIVRSearch+0xae>
 801b1a0:	4668      	mov	r0, sp
 801b1a2:	f7fa ff97 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b1a6:	6839      	ldr	r1, [r7, #0]
 801b1a8:	b119      	cbz	r1, 801b1b2 <WM__InitIVRSearch+0xbe>
 801b1aa:	4620      	mov	r0, r4
 801b1ac:	f7ff fa8c 	bl	801a6c8 <WM__ClipAtParentBorders>
 801b1b0:	b128      	cbz	r0, 801b1be <WM__InitIVRSearch+0xca>
 801b1b2:	6833      	ldr	r3, [r6, #0]
 801b1b4:	4620      	mov	r0, r4
 801b1b6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801b1b8:	f7ff fa86 	bl	801a6c8 <WM__ClipAtParentBorders>
 801b1bc:	b918      	cbnz	r0, 801b1c6 <WM__InitIVRSearch+0xd2>
 801b1be:	6a2b      	ldr	r3, [r5, #32]
 801b1c0:	3b01      	subs	r3, #1
 801b1c2:	622b      	str	r3, [r5, #32]
 801b1c4:	e008      	b.n	801b1d8 <WM__InitIVRSearch+0xe4>
 801b1c6:	4b0a      	ldr	r3, [pc, #40]	; (801b1f0 <WM__InitIVRSearch+0xfc>)
 801b1c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b1cc:	e883 0003 	stmia.w	r3, {r0, r1}
 801b1d0:	f7ff fece 	bl	801af70 <WM__GetNextIVR>
 801b1d4:	e000      	b.n	801b1d8 <WM__InitIVRSearch+0xe4>
 801b1d6:	2001      	movs	r0, #1
 801b1d8:	b006      	add	sp, #24
 801b1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1de:	bf00      	nop
 801b1e0:	20000018 	.word	0x20000018
 801b1e4:	20000304 	.word	0x20000304
 801b1e8:	200224ec 	.word	0x200224ec
 801b1ec:	200224bc 	.word	0x200224bc
 801b1f0:	20000310 	.word	0x20000310

0801b1f4 <WM_SetDefault>:
 801b1f4:	b508      	push	{r3, lr}
 801b1f6:	f7fb fb67 	bl	80168c8 <GL_SetDefault>
 801b1fa:	4b02      	ldr	r3, [pc, #8]	; (801b204 <WM_SetDefault+0x10>)
 801b1fc:	2200      	movs	r2, #0
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	645a      	str	r2, [r3, #68]	; 0x44
 801b202:	bd08      	pop	{r3, pc}
 801b204:	20000018 	.word	0x20000018

0801b208 <WM__Paint1>:
 801b208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b20a:	b089      	sub	sp, #36	; 0x24
 801b20c:	4604      	mov	r4, r0
 801b20e:	f7fa ff53 	bl	80160b8 <GUI_ALLOC_LockH>
 801b212:	6907      	ldr	r7, [r0, #16]
 801b214:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801b216:	ae02      	add	r6, sp, #8
 801b218:	9001      	str	r0, [sp, #4]
 801b21a:	3008      	adds	r0, #8
 801b21c:	c803      	ldmia	r0, {r0, r1}
 801b21e:	e886 0003 	stmia.w	r6, {r0, r1}
 801b222:	a801      	add	r0, sp, #4
 801b224:	f7fa ff56 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b228:	2f00      	cmp	r7, #0
 801b22a:	d032      	beq.n	801b292 <WM__Paint1+0x8a>
 801b22c:	07ab      	lsls	r3, r5, #30
 801b22e:	d530      	bpl.n	801b292 <WM__Paint1+0x8a>
 801b230:	212e      	movs	r1, #46	; 0x2e
 801b232:	4620      	mov	r0, r4
 801b234:	f000 fb3a 	bl	801b8ac <WM_SendMessageNoPara>
 801b238:	4b17      	ldr	r3, [pc, #92]	; (801b298 <WM__Paint1+0x90>)
 801b23a:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 801b23e:	781a      	ldrb	r2, [r3, #0]
 801b240:	461d      	mov	r5, r3
 801b242:	f102 0201 	add.w	r2, r2, #1
 801b246:	701a      	strb	r2, [r3, #0]
 801b248:	d00a      	beq.n	801b260 <WM__Paint1+0x58>
 801b24a:	230f      	movs	r3, #15
 801b24c:	9405      	str	r4, [sp, #20]
 801b24e:	9607      	str	r6, [sp, #28]
 801b250:	9304      	str	r3, [sp, #16]
 801b252:	f7ff ffcf 	bl	801b1f4 <WM_SetDefault>
 801b256:	a904      	add	r1, sp, #16
 801b258:	4620      	mov	r0, r4
 801b25a:	f000 ff0b 	bl	801c074 <WM__SendMessage>
 801b25e:	e011      	b.n	801b284 <WM__Paint1+0x7c>
 801b260:	4630      	mov	r0, r6
 801b262:	f7ff ff47 	bl	801b0f4 <WM__InitIVRSearch>
 801b266:	b168      	cbz	r0, 801b284 <WM__Paint1+0x7c>
 801b268:	270f      	movs	r7, #15
 801b26a:	9405      	str	r4, [sp, #20]
 801b26c:	9704      	str	r7, [sp, #16]
 801b26e:	9607      	str	r6, [sp, #28]
 801b270:	f7ff ffc0 	bl	801b1f4 <WM_SetDefault>
 801b274:	a904      	add	r1, sp, #16
 801b276:	4620      	mov	r0, r4
 801b278:	f000 fefc 	bl	801c074 <WM__SendMessage>
 801b27c:	f7ff fe78 	bl	801af70 <WM__GetNextIVR>
 801b280:	2800      	cmp	r0, #0
 801b282:	d1f2      	bne.n	801b26a <WM__Paint1+0x62>
 801b284:	782b      	ldrb	r3, [r5, #0]
 801b286:	212f      	movs	r1, #47	; 0x2f
 801b288:	4620      	mov	r0, r4
 801b28a:	3b01      	subs	r3, #1
 801b28c:	702b      	strb	r3, [r5, #0]
 801b28e:	f000 fb0d 	bl	801b8ac <WM_SendMessageNoPara>
 801b292:	b009      	add	sp, #36	; 0x24
 801b294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b296:	bf00      	nop
 801b298:	200224ec 	.word	0x200224ec

0801b29c <WM__Paint>:
 801b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2a0:	b088      	sub	sp, #32
 801b2a2:	f244 0420 	movw	r4, #16416	; 0x4020
 801b2a6:	9003      	str	r0, [sp, #12]
 801b2a8:	f7fa ff06 	bl	80160b8 <GUI_ALLOC_LockH>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	f100 0208 	add.w	r2, r0, #8
 801b2b2:	9005      	str	r0, [sp, #20]
 801b2b4:	ae06      	add	r6, sp, #24
 801b2b6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801b2b8:	699f      	ldr	r7, [r3, #24]
 801b2ba:	402c      	ands	r4, r5
 801b2bc:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801b2c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b2c4:	e886 0003 	stmia.w	r6, {r0, r1}
 801b2c8:	a805      	add	r0, sp, #20
 801b2ca:	f7fa ff03 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b2ce:	2c00      	cmp	r4, #0
 801b2d0:	d035      	beq.n	801b33e <WM__Paint+0xa2>
 801b2d2:	f1b8 0f00 	cmp.w	r8, #0
 801b2d6:	d017      	beq.n	801b308 <WM__Paint+0x6c>
 801b2d8:	9903      	ldr	r1, [sp, #12]
 801b2da:	4630      	mov	r0, r6
 801b2dc:	f7ff f9f4 	bl	801a6c8 <WM__ClipAtParentBorders>
 801b2e0:	b190      	cbz	r0, 801b308 <WM__Paint+0x6c>
 801b2e2:	9803      	ldr	r0, [sp, #12]
 801b2e4:	f7ff fc94 	bl	801ac10 <WM_SelectWindow>
 801b2e8:	0769      	lsls	r1, r5, #29
 801b2ea:	d50f      	bpl.n	801b30c <WM__Paint+0x70>
 801b2ec:	b127      	cbz	r7, 801b2f8 <WM__Paint+0x5c>
 801b2ee:	f005 0501 	and.w	r5, r5, #1
 801b2f2:	f085 0501 	eor.w	r5, r5, #1
 801b2f6:	e000      	b.n	801b2fa <WM__Paint+0x5e>
 801b2f8:	2501      	movs	r5, #1
 801b2fa:	9500      	str	r5, [sp, #0]
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	aa03      	add	r2, sp, #12
 801b300:	4911      	ldr	r1, [pc, #68]	; (801b348 <WM__Paint+0xac>)
 801b302:	4630      	mov	r0, r6
 801b304:	f002 fc4a 	bl	801db9c <GUI_MEMDEV_Draw>
 801b308:	2400      	movs	r4, #0
 801b30a:	e003      	b.n	801b314 <WM__Paint+0x78>
 801b30c:	2401      	movs	r4, #1
 801b30e:	9803      	ldr	r0, [sp, #12]
 801b310:	f7ff f968 	bl	801a5e4 <WM__PaintWinAndOverlays>
 801b314:	9803      	ldr	r0, [sp, #12]
 801b316:	f7fa fecf 	bl	80160b8 <GUI_ALLOC_LockH>
 801b31a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b31c:	9005      	str	r0, [sp, #20]
 801b31e:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 801b322:	0492      	lsls	r2, r2, #18
 801b324:	f023 0320 	bic.w	r3, r3, #32
 801b328:	bf48      	it	mi
 801b32a:	f043 0304 	orrmi.w	r3, r3, #4
 801b32e:	6283      	str	r3, [r0, #40]	; 0x28
 801b330:	a805      	add	r0, sp, #20
 801b332:	f7fa fecf 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b336:	4a05      	ldr	r2, [pc, #20]	; (801b34c <WM__Paint+0xb0>)
 801b338:	8813      	ldrh	r3, [r2, #0]
 801b33a:	3b01      	subs	r3, #1
 801b33c:	8013      	strh	r3, [r2, #0]
 801b33e:	4620      	mov	r0, r4
 801b340:	b008      	add	sp, #32
 801b342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b346:	bf00      	nop
 801b348:	0801a65d 	.word	0x0801a65d
 801b34c:	200224d8 	.word	0x200224d8

0801b350 <_Exec1Draw>:
 801b350:	4b20      	ldr	r3, [pc, #128]	; (801b3d4 <_Exec1Draw+0x84>)
 801b352:	681a      	ldr	r2, [r3, #0]
 801b354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b358:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 801b35c:	b09f      	sub	sp, #124	; 0x7c
 801b35e:	461f      	mov	r7, r3
 801b360:	2800      	cmp	r0, #0
 801b362:	d033      	beq.n	801b3cc <_Exec1Draw+0x7c>
 801b364:	4b1c      	ldr	r3, [pc, #112]	; (801b3d8 <_Exec1Draw+0x88>)
 801b366:	8818      	ldrh	r0, [r3, #0]
 801b368:	461e      	mov	r6, r3
 801b36a:	b378      	cbz	r0, 801b3cc <_Exec1Draw+0x7c>
 801b36c:	f7fb ff84 	bl	8017278 <GUI_Lock>
 801b370:	4b1a      	ldr	r3, [pc, #104]	; (801b3dc <_Exec1Draw+0x8c>)
 801b372:	689c      	ldr	r4, [r3, #8]
 801b374:	461d      	mov	r5, r3
 801b376:	b90c      	cbnz	r4, 801b37c <_Exec1Draw+0x2c>
 801b378:	4b19      	ldr	r3, [pc, #100]	; (801b3e0 <_Exec1Draw+0x90>)
 801b37a:	681c      	ldr	r4, [r3, #0]
 801b37c:	a801      	add	r0, sp, #4
 801b37e:	f7fb fa01 	bl	8016784 <GUI_SaveContext_W>
 801b382:	683b      	ldr	r3, [r7, #0]
 801b384:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 801b388:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 801b38a:	b924      	cbnz	r4, 801b396 <_Exec1Draw+0x46>
 801b38c:	2400      	movs	r4, #0
 801b38e:	e00d      	b.n	801b3ac <_Exec1Draw+0x5c>
 801b390:	f1b9 0f00 	cmp.w	r9, #0
 801b394:	d10a      	bne.n	801b3ac <_Exec1Draw+0x5c>
 801b396:	4620      	mov	r0, r4
 801b398:	f7ff ff80 	bl	801b29c <WM__Paint>
 801b39c:	4681      	mov	r9, r0
 801b39e:	4620      	mov	r0, r4
 801b3a0:	f7fa fe80 	bl	80160a4 <GUI_ALLOC_h2p>
 801b3a4:	6944      	ldr	r4, [r0, #20]
 801b3a6:	2c00      	cmp	r4, #0
 801b3a8:	d1f2      	bne.n	801b390 <_Exec1Draw+0x40>
 801b3aa:	e7ef      	b.n	801b38c <_Exec1Draw+0x3c>
 801b3ac:	4640      	mov	r0, r8
 801b3ae:	60ac      	str	r4, [r5, #8]
 801b3b0:	f7fb fa14 	bl	80167dc <GUI_SetColor>
 801b3b4:	4638      	mov	r0, r7
 801b3b6:	f7fb fa06 	bl	80167c6 <GUI_SetBkColor>
 801b3ba:	a801      	add	r0, sp, #4
 801b3bc:	f7fb f9ec 	bl	8016798 <GUI_RestoreContext>
 801b3c0:	f7fb ff50 	bl	8017264 <GUI_Unlock>
 801b3c4:	8830      	ldrh	r0, [r6, #0]
 801b3c6:	3000      	adds	r0, #0
 801b3c8:	bf18      	it	ne
 801b3ca:	2001      	movne	r0, #1
 801b3cc:	b01f      	add	sp, #124	; 0x7c
 801b3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b3d2:	bf00      	nop
 801b3d4:	20000018 	.word	0x20000018
 801b3d8:	200224d8 	.word	0x200224d8
 801b3dc:	20000304 	.word	0x20000304
 801b3e0:	200224dc 	.word	0x200224dc

0801b3e4 <WM_Exec>:
 801b3e4:	b570      	push	{r4, r5, r6, lr}
 801b3e6:	f7fb ff47 	bl	8017278 <GUI_Lock>
 801b3ea:	4b1b      	ldr	r3, [pc, #108]	; (801b458 <WM_Exec+0x74>)
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	b103      	cbz	r3, 801b3f2 <WM_Exec+0xe>
 801b3f0:	4798      	blx	r3
 801b3f2:	2500      	movs	r5, #0
 801b3f4:	f7ff fd76 	bl	801aee4 <_Exec1Input>
 801b3f8:	b108      	cbz	r0, 801b3fe <WM_Exec+0x1a>
 801b3fa:	2501      	movs	r5, #1
 801b3fc:	e7fa      	b.n	801b3f4 <WM_Exec+0x10>
 801b3fe:	4b17      	ldr	r3, [pc, #92]	; (801b45c <WM_Exec+0x78>)
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 801b406:	b144      	cbz	r4, 801b41a <WM_Exec+0x36>
 801b408:	4b15      	ldr	r3, [pc, #84]	; (801b460 <WM_Exec+0x7c>)
 801b40a:	881c      	ldrh	r4, [r3, #0]
 801b40c:	b12c      	cbz	r4, 801b41a <WM_Exec+0x36>
 801b40e:	4b15      	ldr	r3, [pc, #84]	; (801b464 <WM_Exec+0x80>)
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	b1c3      	cbz	r3, 801b446 <WM_Exec+0x62>
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	4798      	blx	r3
 801b418:	2401      	movs	r4, #1
 801b41a:	f7fb ff23 	bl	8017264 <GUI_Unlock>
 801b41e:	f7ff ff97 	bl	801b350 <_Exec1Draw>
 801b422:	4606      	mov	r6, r0
 801b424:	b108      	cbz	r0, 801b42a <WM_Exec+0x46>
 801b426:	2501      	movs	r5, #1
 801b428:	e7f9      	b.n	801b41e <WM_Exec+0x3a>
 801b42a:	f7fb ff25 	bl	8017278 <GUI_Lock>
 801b42e:	b174      	cbz	r4, 801b44e <WM_Exec+0x6a>
 801b430:	4b0c      	ldr	r3, [pc, #48]	; (801b464 <WM_Exec+0x80>)
 801b432:	6818      	ldr	r0, [r3, #0]
 801b434:	b120      	cbz	r0, 801b440 <WM_Exec+0x5c>
 801b436:	6843      	ldr	r3, [r0, #4]
 801b438:	4798      	blx	r3
 801b43a:	4b0b      	ldr	r3, [pc, #44]	; (801b468 <WM_Exec+0x84>)
 801b43c:	601e      	str	r6, [r3, #0]
 801b43e:	e006      	b.n	801b44e <WM_Exec+0x6a>
 801b440:	f002 f9aa 	bl	801d798 <GUI__ManageCache>
 801b444:	e003      	b.n	801b44e <WM_Exec+0x6a>
 801b446:	2001      	movs	r0, #1
 801b448:	f002 f9a6 	bl	801d798 <GUI__ManageCache>
 801b44c:	e7e4      	b.n	801b418 <WM_Exec+0x34>
 801b44e:	f7fb ff09 	bl	8017264 <GUI_Unlock>
 801b452:	4628      	mov	r0, r5
 801b454:	bd70      	pop	{r4, r5, r6, pc}
 801b456:	bf00      	nop
 801b458:	200224cc 	.word	0x200224cc
 801b45c:	20000018 	.word	0x20000018
 801b460:	200224d8 	.word	0x200224d8
 801b464:	20022500 	.word	0x20022500
 801b468:	200224e8 	.word	0x200224e8

0801b46c <WM_Activate>:
 801b46c:	4b02      	ldr	r3, [pc, #8]	; (801b478 <WM_Activate+0xc>)
 801b46e:	2201      	movs	r2, #1
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801b476:	4770      	bx	lr
 801b478:	20000018 	.word	0x20000018

0801b47c <WM_Deactivate>:
 801b47c:	b508      	push	{r3, lr}
 801b47e:	4b06      	ldr	r3, [pc, #24]	; (801b498 <WM_Deactivate+0x1c>)
 801b480:	2200      	movs	r2, #0
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801b488:	f7fb fef6 	bl	8017278 <GUI_Lock>
 801b48c:	f7fc fda8 	bl	8017fe0 <LCD_SetClipRectMax>
 801b490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b494:	f7fb bee6 	b.w	8017264 <GUI_Unlock>
 801b498:	20000018 	.word	0x20000018

0801b49c <WM_DefaultProc>:
 801b49c:	b510      	push	{r4, lr}
 801b49e:	4604      	mov	r4, r0
 801b4a0:	6840      	ldr	r0, [r0, #4]
 801b4a2:	6823      	ldr	r3, [r4, #0]
 801b4a4:	2b17      	cmp	r3, #23
 801b4a6:	d010      	beq.n	801b4ca <WM_DefaultProc+0x2e>
 801b4a8:	dc07      	bgt.n	801b4ba <WM_DefaultProc+0x1e>
 801b4aa:	2b0e      	cmp	r3, #14
 801b4ac:	d00f      	beq.n	801b4ce <WM_DefaultProc+0x32>
 801b4ae:	2b14      	cmp	r3, #20
 801b4b0:	d115      	bne.n	801b4de <WM_DefaultProc+0x42>
 801b4b2:	68e1      	ldr	r1, [r4, #12]
 801b4b4:	f000 feb2 	bl	801c21c <WM__GetClientRectEx>
 801b4b8:	e011      	b.n	801b4de <WM_DefaultProc+0x42>
 801b4ba:	2b22      	cmp	r3, #34	; 0x22
 801b4bc:	d00c      	beq.n	801b4d8 <WM_DefaultProc+0x3c>
 801b4be:	2b28      	cmp	r3, #40	; 0x28
 801b4c0:	d10d      	bne.n	801b4de <WM_DefaultProc+0x42>
 801b4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4c6:	f7ff bb95 	b.w	801abf4 <WM_InvalidateWindow>
 801b4ca:	60e0      	str	r0, [r4, #12]
 801b4cc:	bd10      	pop	{r4, pc}
 801b4ce:	4621      	mov	r1, r4
 801b4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4d4:	f000 b9f7 	b.w	801b8c6 <WM_SendToParent>
 801b4d8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801b4dc:	e000      	b.n	801b4e0 <WM_DefaultProc+0x44>
 801b4de:	2300      	movs	r3, #0
 801b4e0:	60e3      	str	r3, [r4, #12]
 801b4e2:	bd10      	pop	{r4, pc}

0801b4e4 <_cbBackWin>:
 801b4e4:	6803      	ldr	r3, [r0, #0]
 801b4e6:	2b0e      	cmp	r3, #14
 801b4e8:	b510      	push	{r4, lr}
 801b4ea:	4604      	mov	r4, r0
 801b4ec:	d002      	beq.n	801b4f4 <_cbBackWin+0x10>
 801b4ee:	2b0f      	cmp	r3, #15
 801b4f0:	d009      	beq.n	801b506 <_cbBackWin+0x22>
 801b4f2:	e020      	b.n	801b536 <_cbBackWin+0x52>
 801b4f4:	68c3      	ldr	r3, [r0, #12]
 801b4f6:	685a      	ldr	r2, [r3, #4]
 801b4f8:	2a01      	cmp	r2, #1
 801b4fa:	d121      	bne.n	801b540 <_cbBackWin+0x5c>
 801b4fc:	6818      	ldr	r0, [r3, #0]
 801b4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b502:	f7fb bdef 	b.w	80170e4 <GUI_StoreKey>
 801b506:	4a0f      	ldr	r2, [pc, #60]	; (801b544 <_cbBackWin+0x60>)
 801b508:	6843      	ldr	r3, [r0, #4]
 801b50a:	6811      	ldr	r1, [r2, #0]
 801b50c:	428b      	cmp	r3, r1
 801b50e:	d006      	beq.n	801b51e <_cbBackWin+0x3a>
 801b510:	6852      	ldr	r2, [r2, #4]
 801b512:	4293      	cmp	r3, r2
 801b514:	bf0c      	ite	eq
 801b516:	2301      	moveq	r3, #1
 801b518:	f04f 33ff 	movne.w	r3, #4294967295
 801b51c:	e000      	b.n	801b520 <_cbBackWin+0x3c>
 801b51e:	2300      	movs	r3, #0
 801b520:	4a09      	ldr	r2, [pc, #36]	; (801b548 <_cbBackWin+0x64>)
 801b522:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b526:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801b52a:	4298      	cmp	r0, r3
 801b52c:	d003      	beq.n	801b536 <_cbBackWin+0x52>
 801b52e:	f7fb f94a 	bl	80167c6 <GUI_SetBkColor>
 801b532:	f7fb fa85 	bl	8016a40 <GUI_Clear>
 801b536:	4620      	mov	r0, r4
 801b538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b53c:	f7ff bfae 	b.w	801b49c <WM_DefaultProc>
 801b540:	bd10      	pop	{r4, pc}
 801b542:	bf00      	nop
 801b544:	200224c0 	.word	0x200224c0
 801b548:	200224f4 	.word	0x200224f4

0801b54c <WM_Init>:
 801b54c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b550:	4d2a      	ldr	r5, [pc, #168]	; (801b5fc <WM_Init+0xb0>)
 801b552:	7828      	ldrb	r0, [r5, #0]
 801b554:	2800      	cmp	r0, #0
 801b556:	d14d      	bne.n	801b5f4 <WM_Init+0xa8>
 801b558:	4b29      	ldr	r3, [pc, #164]	; (801b600 <WM_Init+0xb4>)
 801b55a:	4604      	mov	r4, r0
 801b55c:	4e29      	ldr	r6, [pc, #164]	; (801b604 <WM_Init+0xb8>)
 801b55e:	6018      	str	r0, [r3, #0]
 801b560:	4b29      	ldr	r3, [pc, #164]	; (801b608 <WM_Init+0xbc>)
 801b562:	4f2a      	ldr	r7, [pc, #168]	; (801b60c <WM_Init+0xc0>)
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b638 <WM_Init+0xec>
 801b56a:	6458      	str	r0, [r3, #68]	; 0x44
 801b56c:	4b28      	ldr	r3, [pc, #160]	; (801b610 <WM_Init+0xc4>)
 801b56e:	60a8      	str	r0, [r5, #8]
 801b570:	8018      	strh	r0, [r3, #0]
 801b572:	4b28      	ldr	r3, [pc, #160]	; (801b614 <WM_Init+0xc8>)
 801b574:	8018      	strh	r0, [r3, #0]
 801b576:	4620      	mov	r0, r4
 801b578:	f7fb fbaa 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801b57c:	b1a8      	cbz	r0, 801b5aa <WM_Init+0x5e>
 801b57e:	f04f 32ff 	mov.w	r2, #4294967295
 801b582:	2302      	movs	r3, #2
 801b584:	2100      	movs	r1, #0
 801b586:	9602      	str	r6, [sp, #8]
 801b588:	e88d 000c 	stmia.w	sp, {r2, r3}
 801b58c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 801b590:	9103      	str	r1, [sp, #12]
 801b592:	4608      	mov	r0, r1
 801b594:	461a      	mov	r2, r3
 801b596:	f7ff fb5f 	bl	801ac58 <WM_CreateWindowAsChild>
 801b59a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801b59e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 801b5a2:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 801b5a6:	f7ff fb25 	bl	801abf4 <WM_InvalidateWindow>
 801b5aa:	3401      	adds	r4, #1
 801b5ac:	2c02      	cmp	r4, #2
 801b5ae:	d1e2      	bne.n	801b576 <WM_Init+0x2a>
 801b5b0:	4819      	ldr	r0, [pc, #100]	; (801b618 <WM_Init+0xcc>)
 801b5b2:	f000 fe15 	bl	801c1e0 <WM__AddCriticalHandle>
 801b5b6:	4819      	ldr	r0, [pc, #100]	; (801b61c <WM_Init+0xd0>)
 801b5b8:	f000 fe12 	bl	801c1e0 <WM__AddCriticalHandle>
 801b5bc:	4818      	ldr	r0, [pc, #96]	; (801b620 <WM_Init+0xd4>)
 801b5be:	f000 fe0f 	bl	801c1e0 <WM__AddCriticalHandle>
 801b5c2:	4818      	ldr	r0, [pc, #96]	; (801b624 <WM_Init+0xd8>)
 801b5c4:	f000 fe0c 	bl	801c1e0 <WM__AddCriticalHandle>
 801b5c8:	4817      	ldr	r0, [pc, #92]	; (801b628 <WM_Init+0xdc>)
 801b5ca:	f000 fe09 	bl	801c1e0 <WM__AddCriticalHandle>
 801b5ce:	4817      	ldr	r0, [pc, #92]	; (801b62c <WM_Init+0xe0>)
 801b5d0:	f000 fe06 	bl	801c1e0 <WM__AddCriticalHandle>
 801b5d4:	4b0d      	ldr	r3, [pc, #52]	; (801b60c <WM_Init+0xc0>)
 801b5d6:	6818      	ldr	r0, [r3, #0]
 801b5d8:	f7ff fb1a 	bl	801ac10 <WM_SelectWindow>
 801b5dc:	f7ff ff46 	bl	801b46c <WM_Activate>
 801b5e0:	2301      	movs	r3, #1
 801b5e2:	4813      	ldr	r0, [pc, #76]	; (801b630 <WM_Init+0xe4>)
 801b5e4:	702b      	strb	r3, [r5, #0]
 801b5e6:	4b13      	ldr	r3, [pc, #76]	; (801b634 <WM_Init+0xe8>)
 801b5e8:	626b      	str	r3, [r5, #36]	; 0x24
 801b5ea:	b004      	add	sp, #16
 801b5ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5f0:	f7fb bb48 	b.w	8016c84 <GUI__RegisterExit>
 801b5f4:	b004      	add	sp, #16
 801b5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5fa:	bf00      	nop
 801b5fc:	20000304 	.word	0x20000304
 801b600:	200224dc 	.word	0x200224dc
 801b604:	0801b4e5 	.word	0x0801b4e5
 801b608:	20000018 	.word	0x20000018
 801b60c:	200224c0 	.word	0x200224c0
 801b610:	200224d8 	.word	0x200224d8
 801b614:	200224b8 	.word	0x200224b8
 801b618:	20022534 	.word	0x20022534
 801b61c:	20022524 	.word	0x20022524
 801b620:	20022514 	.word	0x20022514
 801b624:	2002253c 	.word	0x2002253c
 801b628:	2002252c 	.word	0x2002252c
 801b62c:	2002251c 	.word	0x2002251c
 801b630:	20000328 	.word	0x20000328
 801b634:	0801a235 	.word	0x0801a235
 801b638:	200224f4 	.word	0x200224f4

0801b63c <WM_GetDesktopWindow>:
 801b63c:	4b03      	ldr	r3, [pc, #12]	; (801b64c <WM_GetDesktopWindow+0x10>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	7c5a      	ldrb	r2, [r3, #17]
 801b642:	4b03      	ldr	r3, [pc, #12]	; (801b650 <WM_GetDesktopWindow+0x14>)
 801b644:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b648:	4770      	bx	lr
 801b64a:	bf00      	nop
 801b64c:	20000018 	.word	0x20000018
 801b650:	200224c0 	.word	0x200224c0

0801b654 <WM_GetDesktopWindowEx>:
 801b654:	2801      	cmp	r0, #1
 801b656:	bf9a      	itte	ls
 801b658:	4b02      	ldrls	r3, [pc, #8]	; (801b664 <WM_GetDesktopWindowEx+0x10>)
 801b65a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801b65e:	2000      	movhi	r0, #0
 801b660:	4770      	bx	lr
 801b662:	bf00      	nop
 801b664:	200224c0 	.word	0x200224c0

0801b668 <WM_GetFirstChild>:
 801b668:	b510      	push	{r4, lr}
 801b66a:	4604      	mov	r4, r0
 801b66c:	b138      	cbz	r0, 801b67e <WM_GetFirstChild+0x16>
 801b66e:	f7fb fe03 	bl	8017278 <GUI_Lock>
 801b672:	4620      	mov	r0, r4
 801b674:	f7fa fd16 	bl	80160a4 <GUI_ALLOC_h2p>
 801b678:	69c4      	ldr	r4, [r0, #28]
 801b67a:	f7fb fdf3 	bl	8017264 <GUI_Unlock>
 801b67e:	4620      	mov	r0, r4
 801b680:	bd10      	pop	{r4, pc}

0801b682 <WM_GetWindowOrgX>:
 801b682:	b510      	push	{r4, lr}
 801b684:	4604      	mov	r4, r0
 801b686:	b140      	cbz	r0, 801b69a <WM_GetWindowOrgX+0x18>
 801b688:	f7fb fdf6 	bl	8017278 <GUI_Lock>
 801b68c:	4620      	mov	r0, r4
 801b68e:	f7fa fd09 	bl	80160a4 <GUI_ALLOC_h2p>
 801b692:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b696:	f7fb fde5 	bl	8017264 <GUI_Unlock>
 801b69a:	4620      	mov	r0, r4
 801b69c:	bd10      	pop	{r4, pc}

0801b69e <WM_GetParent>:
 801b69e:	b510      	push	{r4, lr}
 801b6a0:	4604      	mov	r4, r0
 801b6a2:	b138      	cbz	r0, 801b6b4 <WM_GetParent+0x16>
 801b6a4:	f7fb fde8 	bl	8017278 <GUI_Lock>
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f7fa fcfb 	bl	80160a4 <GUI_ALLOC_h2p>
 801b6ae:	6984      	ldr	r4, [r0, #24]
 801b6b0:	f7fb fdd8 	bl	8017264 <GUI_Unlock>
 801b6b4:	4620      	mov	r0, r4
 801b6b6:	bd10      	pop	{r4, pc}

0801b6b8 <WM_BringToBottom>:
 801b6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6bc:	4604      	mov	r4, r0
 801b6be:	b087      	sub	sp, #28
 801b6c0:	f7fb fdda 	bl	8017278 <GUI_Lock>
 801b6c4:	2c00      	cmp	r4, #0
 801b6c6:	d03a      	beq.n	801b73e <WM_BringToBottom+0x86>
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	ad04      	add	r5, sp, #16
 801b6cc:	f7fa fcf4 	bl	80160b8 <GUI_ALLOC_LockH>
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	9001      	str	r0, [sp, #4]
 801b6d4:	6a1e      	ldr	r6, [r3, #32]
 801b6d6:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 801b6da:	c803      	ldmia	r0, {r0, r1}
 801b6dc:	e885 0003 	stmia.w	r5, {r0, r1}
 801b6e0:	a801      	add	r0, sp, #4
 801b6e2:	f7fa fcf7 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b6e6:	4620      	mov	r0, r4
 801b6e8:	f000 fc97 	bl	801c01a <WM__GetPrevSibling>
 801b6ec:	4607      	mov	r7, r0
 801b6ee:	b330      	cbz	r0, 801b73e <WM_BringToBottom+0x86>
 801b6f0:	4620      	mov	r0, r4
 801b6f2:	f7ff ffd4 	bl	801b69e <WM_GetParent>
 801b6f6:	f019 0f02 	tst.w	r9, #2
 801b6fa:	4680      	mov	r8, r0
 801b6fc:	d004      	beq.n	801b708 <WM_BringToBottom+0x50>
 801b6fe:	4601      	mov	r1, r0
 801b700:	4632      	mov	r2, r6
 801b702:	4628      	mov	r0, r5
 801b704:	f7ff fa1d 	bl	801ab42 <WM__InvalidateRectEx>
 801b708:	4620      	mov	r0, r4
 801b70a:	f7fa fcd5 	bl	80160b8 <GUI_ALLOC_LockH>
 801b70e:	9001      	str	r0, [sp, #4]
 801b710:	4640      	mov	r0, r8
 801b712:	f7fa fcd1 	bl	80160b8 <GUI_ALLOC_LockH>
 801b716:	9003      	str	r0, [sp, #12]
 801b718:	4638      	mov	r0, r7
 801b71a:	f7fa fccd 	bl	80160b8 <GUI_ALLOC_LockH>
 801b71e:	9b03      	ldr	r3, [sp, #12]
 801b720:	9a01      	ldr	r2, [sp, #4]
 801b722:	69d9      	ldr	r1, [r3, #28]
 801b724:	6206      	str	r6, [r0, #32]
 801b726:	9002      	str	r0, [sp, #8]
 801b728:	a801      	add	r0, sp, #4
 801b72a:	6211      	str	r1, [r2, #32]
 801b72c:	61dc      	str	r4, [r3, #28]
 801b72e:	f7fa fcd1 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b732:	a803      	add	r0, sp, #12
 801b734:	f7fa fcce 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b738:	a802      	add	r0, sp, #8
 801b73a:	f7fa fccb 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b73e:	f7fb fd91 	bl	8017264 <GUI_Unlock>
 801b742:	b007      	add	sp, #28
 801b744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801b748 <WM_IsWindow>:
 801b748:	b510      	push	{r4, lr}
 801b74a:	4604      	mov	r4, r0
 801b74c:	f7fb fd94 	bl	8017278 <GUI_Lock>
 801b750:	4620      	mov	r0, r4
 801b752:	f7ff f8ad 	bl	801a8b0 <WM__IsWindow>
 801b756:	4604      	mov	r4, r0
 801b758:	f7fb fd84 	bl	8017264 <GUI_Unlock>
 801b75c:	4620      	mov	r0, r4
 801b75e:	bd10      	pop	{r4, pc}

0801b760 <WM_OnKey>:
 801b760:	b530      	push	{r4, r5, lr}
 801b762:	b087      	sub	sp, #28
 801b764:	4605      	mov	r5, r0
 801b766:	460c      	mov	r4, r1
 801b768:	f7fb fd86 	bl	8017278 <GUI_Lock>
 801b76c:	4b0b      	ldr	r3, [pc, #44]	; (801b79c <WM_OnKey+0x3c>)
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	4b0b      	ldr	r3, [pc, #44]	; (801b7a0 <WM_OnKey+0x40>)
 801b772:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b776:	b150      	cbz	r0, 801b78e <WM_OnKey+0x2e>
 801b778:	230e      	movs	r3, #14
 801b77a:	a902      	add	r1, sp, #8
 801b77c:	9401      	str	r4, [sp, #4]
 801b77e:	2401      	movs	r4, #1
 801b780:	9500      	str	r5, [sp, #0]
 801b782:	9302      	str	r3, [sp, #8]
 801b784:	f8cd d014 	str.w	sp, [sp, #20]
 801b788:	f000 fc74 	bl	801c074 <WM__SendMessage>
 801b78c:	e000      	b.n	801b790 <WM_OnKey+0x30>
 801b78e:	4604      	mov	r4, r0
 801b790:	f7fb fd68 	bl	8017264 <GUI_Unlock>
 801b794:	4620      	mov	r0, r4
 801b796:	b007      	add	sp, #28
 801b798:	bd30      	pop	{r4, r5, pc}
 801b79a:	bf00      	nop
 801b79c:	200224e0 	.word	0x200224e0
 801b7a0:	200224d0 	.word	0x200224d0

0801b7a4 <WM_ResizeWindow>:
 801b7a4:	ea51 0302 	orrs.w	r3, r1, r2
 801b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7ac:	4606      	mov	r6, r0
 801b7ae:	b08a      	sub	sp, #40	; 0x28
 801b7b0:	4688      	mov	r8, r1
 801b7b2:	4617      	mov	r7, r2
 801b7b4:	d077      	beq.n	801b8a6 <WM_ResizeWindow+0x102>
 801b7b6:	2800      	cmp	r0, #0
 801b7b8:	d075      	beq.n	801b8a6 <WM_ResizeWindow+0x102>
 801b7ba:	f7fb fd5d 	bl	8017278 <GUI_Lock>
 801b7be:	4630      	mov	r0, r6
 801b7c0:	f7fa fc7a 	bl	80160b8 <GUI_ALLOC_LockH>
 801b7c4:	ac04      	add	r4, sp, #16
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	9003      	str	r0, [sp, #12]
 801b7ca:	ad06      	add	r5, sp, #24
 801b7cc:	c803      	ldmia	r0, {r0, r1}
 801b7ce:	e884 0003 	stmia.w	r4, {r0, r1}
 801b7d2:	e885 0003 	stmia.w	r5, {r0, r1}
 801b7d6:	f1b8 0f00 	cmp.w	r8, #0
 801b7da:	d010      	beq.n	801b7fe <WM_ResizeWindow+0x5a>
 801b7dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b7de:	f402 7220 	and.w	r2, r2, #640	; 0x280
 801b7e2:	2a80      	cmp	r2, #128	; 0x80
 801b7e4:	bf0b      	itete	eq
 801b7e6:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
 801b7ea:	f8bd 201c 	ldrhne.w	r2, [sp, #28]
 801b7ee:	ebc8 0802 	rsbeq	r8, r8, r2
 801b7f2:	4490      	addne	r8, r2
 801b7f4:	bf0c      	ite	eq
 801b7f6:	f8ad 8018 	strheq.w	r8, [sp, #24]
 801b7fa:	f8ad 801c 	strhne.w	r8, [sp, #28]
 801b7fe:	b187      	cbz	r7, 801b822 <WM_ResizeWindow+0x7e>
 801b800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b802:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801b806:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801b80a:	bf0b      	itete	eq
 801b80c:	f8bd 201a 	ldrheq.w	r2, [sp, #26]
 801b810:	f8bd 201e 	ldrhne.w	r2, [sp, #30]
 801b814:	1bd7      	subeq	r7, r2, r7
 801b816:	18bf      	addne	r7, r7, r2
 801b818:	bf0c      	ite	eq
 801b81a:	f8ad 701a 	strheq.w	r7, [sp, #26]
 801b81e:	f8ad 701e 	strhne.w	r7, [sp, #30]
 801b822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b824:	03da      	lsls	r2, r3, #15
 801b826:	d502      	bpl.n	801b82e <WM_ResizeWindow+0x8a>
 801b828:	4630      	mov	r0, r6
 801b82a:	f7ff f851 	bl	801a8d0 <WM__InvalidateDrawAndDescs>
 801b82e:	9b03      	ldr	r3, [sp, #12]
 801b830:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b834:	e883 0003 	stmia.w	r3, {r0, r1}
 801b838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b83a:	079b      	lsls	r3, r3, #30
 801b83c:	d50a      	bpl.n	801b854 <WM_ResizeWindow+0xb0>
 801b83e:	462a      	mov	r2, r5
 801b840:	4621      	mov	r1, r4
 801b842:	a808      	add	r0, sp, #32
 801b844:	f7fa feac 	bl	80165a0 <GUI_MergeRect>
 801b848:	9b03      	ldr	r3, [sp, #12]
 801b84a:	a808      	add	r0, sp, #32
 801b84c:	6a1a      	ldr	r2, [r3, #32]
 801b84e:	6999      	ldr	r1, [r3, #24]
 801b850:	f7ff f977 	bl	801ab42 <WM__InvalidateRectEx>
 801b854:	f9bd e016 	ldrsh.w	lr, [sp, #22]
 801b858:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 801b85c:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 801b860:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801b864:	ebce 0000 	rsb	r0, lr, r0
 801b868:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 801b86c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b870:	1a61      	subs	r1, r4, r1
 801b872:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 801b876:	ac0a      	add	r4, sp, #40	; 0x28
 801b878:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801b87c:	1afb      	subs	r3, r7, r3
 801b87e:	9000      	str	r0, [sp, #0]
 801b880:	1aaa      	subs	r2, r5, r2
 801b882:	9803      	ldr	r0, [sp, #12]
 801b884:	f000 fc35 	bl	801c0f2 <WM__UpdateChildPositions>
 801b888:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 801b88c:	f101 0008 	add.w	r0, r1, #8
 801b890:	f7fc f892 	bl	80179b8 <GUI__IntersectRect>
 801b894:	2105      	movs	r1, #5
 801b896:	4630      	mov	r0, r6
 801b898:	f7ff f853 	bl	801a942 <WM__SendMsgNoData>
 801b89c:	4620      	mov	r0, r4
 801b89e:	f7fa fc19 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b8a2:	f7fb fcdf 	bl	8017264 <GUI_Unlock>
 801b8a6:	b00a      	add	sp, #40	; 0x28
 801b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b8ac <WM_SendMessageNoPara>:
 801b8ac:	b538      	push	{r3, r4, r5, lr}
 801b8ae:	4604      	mov	r4, r0
 801b8b0:	460d      	mov	r5, r1
 801b8b2:	f7fb fce1 	bl	8017278 <GUI_Lock>
 801b8b6:	4629      	mov	r1, r5
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	f000 fc06 	bl	801c0ca <WM__SendMessageNoPara>
 801b8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b8c2:	f7fb bccf 	b.w	8017264 <GUI_Unlock>

0801b8c6 <WM_SendToParent>:
 801b8c6:	b538      	push	{r3, r4, r5, lr}
 801b8c8:	4605      	mov	r5, r0
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	b169      	cbz	r1, 801b8ea <WM_SendToParent+0x24>
 801b8ce:	f7fb fcd3 	bl	8017278 <GUI_Lock>
 801b8d2:	4628      	mov	r0, r5
 801b8d4:	f7ff fee3 	bl	801b69e <WM_GetParent>
 801b8d8:	b118      	cbz	r0, 801b8e2 <WM_SendToParent+0x1c>
 801b8da:	60a5      	str	r5, [r4, #8]
 801b8dc:	4621      	mov	r1, r4
 801b8de:	f000 fbc9 	bl	801c074 <WM__SendMessage>
 801b8e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b8e6:	f7fb bcbd 	b.w	8017264 <GUI_Unlock>
 801b8ea:	bd38      	pop	{r3, r4, r5, pc}

0801b8ec <WM_NotifyParent>:
 801b8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b8ee:	2326      	movs	r3, #38	; 0x26
 801b8f0:	9103      	str	r1, [sp, #12]
 801b8f2:	4669      	mov	r1, sp
 801b8f4:	9300      	str	r3, [sp, #0]
 801b8f6:	f7ff ffe6 	bl	801b8c6 <WM_SendToParent>
 801b8fa:	b005      	add	sp, #20
 801b8fc:	f85d fb04 	ldr.w	pc, [sp], #4

0801b900 <WM_SetSize>:
 801b900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b904:	460f      	mov	r7, r1
 801b906:	4690      	mov	r8, r2
 801b908:	4606      	mov	r6, r0
 801b90a:	b308      	cbz	r0, 801b950 <WM_SetSize+0x50>
 801b90c:	f7fb fcb4 	bl	8017278 <GUI_Lock>
 801b910:	4630      	mov	r0, r6
 801b912:	f7fa fbd1 	bl	80160b8 <GUI_ALLOC_LockH>
 801b916:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801b91a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b91e:	f10d 0e08 	add.w	lr, sp, #8
 801b922:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b926:	1b2c      	subs	r4, r5, r4
 801b928:	f84e 0d04 	str.w	r0, [lr, #-4]!
 801b92c:	3401      	adds	r4, #1
 801b92e:	1b3d      	subs	r5, r7, r4
 801b930:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801b934:	4670      	mov	r0, lr
 801b936:	1ae3      	subs	r3, r4, r3
 801b938:	3301      	adds	r3, #1
 801b93a:	ebc3 0408 	rsb	r4, r3, r8
 801b93e:	f7fa fbc9 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801b942:	4629      	mov	r1, r5
 801b944:	4630      	mov	r0, r6
 801b946:	4622      	mov	r2, r4
 801b948:	f7ff ff2c 	bl	801b7a4 <WM_ResizeWindow>
 801b94c:	f7fb fc8a 	bl	8017264 <GUI_Unlock>
 801b950:	b002      	add	sp, #8
 801b952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801b958 <_MULTIBUF_End>:
 801b958:	b570      	push	{r4, r5, r6, lr}
 801b95a:	2400      	movs	r4, #0
 801b95c:	4e07      	ldr	r6, [pc, #28]	; (801b97c <_MULTIBUF_End+0x24>)
 801b95e:	4d08      	ldr	r5, [pc, #32]	; (801b980 <_MULTIBUF_End+0x28>)
 801b960:	6832      	ldr	r2, [r6, #0]
 801b962:	682b      	ldr	r3, [r5, #0]
 801b964:	b102      	cbz	r2, 801b968 <_MULTIBUF_End+0x10>
 801b966:	4013      	ands	r3, r2
 801b968:	40e3      	lsrs	r3, r4
 801b96a:	07db      	lsls	r3, r3, #31
 801b96c:	d502      	bpl.n	801b974 <_MULTIBUF_End+0x1c>
 801b96e:	4620      	mov	r0, r4
 801b970:	f7fb fb5a 	bl	8017028 <GUI_MULTIBUF_EndEx>
 801b974:	3401      	adds	r4, #1
 801b976:	2c02      	cmp	r4, #2
 801b978:	d1f2      	bne.n	801b960 <_MULTIBUF_End+0x8>
 801b97a:	bd70      	pop	{r4, r5, r6, pc}
 801b97c:	20022450 	.word	0x20022450
 801b980:	200224e8 	.word	0x200224e8

0801b984 <_MULTIBUF_Begin>:
 801b984:	b570      	push	{r4, r5, r6, lr}
 801b986:	2400      	movs	r4, #0
 801b988:	4e07      	ldr	r6, [pc, #28]	; (801b9a8 <_MULTIBUF_Begin+0x24>)
 801b98a:	4d08      	ldr	r5, [pc, #32]	; (801b9ac <_MULTIBUF_Begin+0x28>)
 801b98c:	6832      	ldr	r2, [r6, #0]
 801b98e:	682b      	ldr	r3, [r5, #0]
 801b990:	b102      	cbz	r2, 801b994 <_MULTIBUF_Begin+0x10>
 801b992:	4013      	ands	r3, r2
 801b994:	40e3      	lsrs	r3, r4
 801b996:	07db      	lsls	r3, r3, #31
 801b998:	d502      	bpl.n	801b9a0 <_MULTIBUF_Begin+0x1c>
 801b99a:	4620      	mov	r0, r4
 801b99c:	f7fb fb10 	bl	8016fc0 <GUI_MULTIBUF_BeginEx>
 801b9a0:	3401      	adds	r4, #1
 801b9a2:	2c02      	cmp	r4, #2
 801b9a4:	d1f2      	bne.n	801b98c <_MULTIBUF_Begin+0x8>
 801b9a6:	bd70      	pop	{r4, r5, r6, pc}
 801b9a8:	20022450 	.word	0x20022450
 801b9ac:	200224e8 	.word	0x200224e8

0801b9b0 <WM_MULTIBUF_Enable>:
 801b9b0:	4a05      	ldr	r2, [pc, #20]	; (801b9c8 <WM_MULTIBUF_Enable+0x18>)
 801b9b2:	6813      	ldr	r3, [r2, #0]
 801b9b4:	3300      	adds	r3, #0
 801b9b6:	bf18      	it	ne
 801b9b8:	2301      	movne	r3, #1
 801b9ba:	b110      	cbz	r0, 801b9c2 <WM_MULTIBUF_Enable+0x12>
 801b9bc:	4903      	ldr	r1, [pc, #12]	; (801b9cc <WM_MULTIBUF_Enable+0x1c>)
 801b9be:	6011      	str	r1, [r2, #0]
 801b9c0:	e000      	b.n	801b9c4 <WM_MULTIBUF_Enable+0x14>
 801b9c2:	6010      	str	r0, [r2, #0]
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	4770      	bx	lr
 801b9c8:	20022500 	.word	0x20022500
 801b9cc:	08023558 	.word	0x08023558

0801b9d0 <_MoveDescendents>:
 801b9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9d4:	b088      	sub	sp, #32
 801b9d6:	4616      	mov	r6, r2
 801b9d8:	2210      	movs	r2, #16
 801b9da:	2703      	movs	r7, #3
 801b9dc:	f10d 0808 	add.w	r8, sp, #8
 801b9e0:	4604      	mov	r4, r0
 801b9e2:	460d      	mov	r5, r1
 801b9e4:	eb0d 0002 	add.w	r0, sp, r2
 801b9e8:	2100      	movs	r1, #0
 801b9ea:	f003 f8ec 	bl	801ebc6 <memset>
 801b9ee:	b32c      	cbz	r4, 801ba3c <_MoveDescendents+0x6c>
 801b9f0:	4620      	mov	r0, r4
 801b9f2:	f7fa fb61 	bl	80160b8 <GUI_ALLOC_LockH>
 801b9f6:	4632      	mov	r2, r6
 801b9f8:	4629      	mov	r1, r5
 801b9fa:	9001      	str	r0, [sp, #4]
 801b9fc:	f7fa fdfb 	bl	80165f6 <GUI_MoveRect>
 801ba00:	9801      	ldr	r0, [sp, #4]
 801ba02:	4632      	mov	r2, r6
 801ba04:	4629      	mov	r1, r5
 801ba06:	3008      	adds	r0, #8
 801ba08:	f7fa fdf5 	bl	80165f6 <GUI_MoveRect>
 801ba0c:	9b01      	ldr	r3, [sp, #4]
 801ba0e:	a801      	add	r0, sp, #4
 801ba10:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 801ba14:	f8d3 9020 	ldr.w	r9, [r3, #32]
 801ba18:	f7fa fb5c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ba1c:	4632      	mov	r2, r6
 801ba1e:	4629      	mov	r1, r5
 801ba20:	4650      	mov	r0, sl
 801ba22:	f7ff ffd5 	bl	801b9d0 <_MoveDescendents>
 801ba26:	4620      	mov	r0, r4
 801ba28:	a904      	add	r1, sp, #16
 801ba2a:	9704      	str	r7, [sp, #16]
 801ba2c:	f8cd 801c 	str.w	r8, [sp, #28]
 801ba30:	464c      	mov	r4, r9
 801ba32:	9502      	str	r5, [sp, #8]
 801ba34:	9603      	str	r6, [sp, #12]
 801ba36:	f000 fb1d 	bl	801c074 <WM__SendMessage>
 801ba3a:	e7d8      	b.n	801b9ee <_MoveDescendents+0x1e>
 801ba3c:	b008      	add	sp, #32
 801ba3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801ba42 <WM__MoveWindow>:
 801ba42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba46:	b08b      	sub	sp, #44	; 0x2c
 801ba48:	4606      	mov	r6, r0
 801ba4a:	460d      	mov	r5, r1
 801ba4c:	4614      	mov	r4, r2
 801ba4e:	2100      	movs	r1, #0
 801ba50:	2210      	movs	r2, #16
 801ba52:	a806      	add	r0, sp, #24
 801ba54:	f003 f8b7 	bl	801ebc6 <memset>
 801ba58:	2e00      	cmp	r6, #0
 801ba5a:	d043      	beq.n	801bae4 <WM__MoveWindow+0xa2>
 801ba5c:	b90d      	cbnz	r5, 801ba62 <WM__MoveWindow+0x20>
 801ba5e:	2c00      	cmp	r4, #0
 801ba60:	d040      	beq.n	801bae4 <WM__MoveWindow+0xa2>
 801ba62:	4630      	mov	r0, r6
 801ba64:	f10d 0808 	add.w	r8, sp, #8
 801ba68:	f7fa fb26 	bl	80160b8 <GUI_ALLOC_LockH>
 801ba6c:	4603      	mov	r3, r0
 801ba6e:	9001      	str	r0, [sp, #4]
 801ba70:	4622      	mov	r2, r4
 801ba72:	af0a      	add	r7, sp, #40	; 0x28
 801ba74:	c803      	ldmia	r0, {r0, r1}
 801ba76:	e888 0003 	stmia.w	r8, {r0, r1}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	4629      	mov	r1, r5
 801ba7e:	f7fa fdba 	bl	80165f6 <GUI_MoveRect>
 801ba82:	9801      	ldr	r0, [sp, #4]
 801ba84:	4622      	mov	r2, r4
 801ba86:	4629      	mov	r1, r5
 801ba88:	3008      	adds	r0, #8
 801ba8a:	f7fa fdb4 	bl	80165f6 <GUI_MoveRect>
 801ba8e:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 801ba92:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801ba96:	4638      	mov	r0, r7
 801ba98:	f7fa fb1c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ba9c:	4622      	mov	r2, r4
 801ba9e:	4629      	mov	r1, r5
 801baa0:	4648      	mov	r0, r9
 801baa2:	f7ff ff95 	bl	801b9d0 <_MoveDescendents>
 801baa6:	4630      	mov	r0, r6
 801baa8:	f7fa fb06 	bl	80160b8 <GUI_ALLOC_LockH>
 801baac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801baae:	9001      	str	r0, [sp, #4]
 801bab0:	0792      	lsls	r2, r2, #30
 801bab2:	d50a      	bpl.n	801baca <WM__MoveWindow+0x88>
 801bab4:	6981      	ldr	r1, [r0, #24]
 801bab6:	b141      	cbz	r1, 801baca <WM__MoveWindow+0x88>
 801bab8:	6a02      	ldr	r2, [r0, #32]
 801baba:	f7ff f82d 	bl	801ab18 <WM__InvalidateParent>
 801babe:	9b01      	ldr	r3, [sp, #4]
 801bac0:	4640      	mov	r0, r8
 801bac2:	6a1a      	ldr	r2, [r3, #32]
 801bac4:	6999      	ldr	r1, [r3, #24]
 801bac6:	f7ff f827 	bl	801ab18 <WM__InvalidateParent>
 801baca:	4638      	mov	r0, r7
 801bacc:	f7fa fb02 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801bad0:	2303      	movs	r3, #3
 801bad2:	a906      	add	r1, sp, #24
 801bad4:	4630      	mov	r0, r6
 801bad6:	9306      	str	r3, [sp, #24]
 801bad8:	ab04      	add	r3, sp, #16
 801bada:	9504      	str	r5, [sp, #16]
 801badc:	9309      	str	r3, [sp, #36]	; 0x24
 801bade:	9405      	str	r4, [sp, #20]
 801bae0:	f000 fac8 	bl	801c074 <WM__SendMessage>
 801bae4:	b00b      	add	sp, #44	; 0x2c
 801bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801baea <WM_MoveWindow>:
 801baea:	b570      	push	{r4, r5, r6, lr}
 801baec:	4604      	mov	r4, r0
 801baee:	460d      	mov	r5, r1
 801baf0:	4616      	mov	r6, r2
 801baf2:	f7fb fbc1 	bl	8017278 <GUI_Lock>
 801baf6:	4629      	mov	r1, r5
 801baf8:	4620      	mov	r0, r4
 801bafa:	4632      	mov	r2, r6
 801bafc:	f7ff ffa1 	bl	801ba42 <WM__MoveWindow>
 801bb00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb04:	f7fb bbae 	b.w	8017264 <GUI_Unlock>

0801bb08 <WM_DeleteTimer>:
 801bb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb0a:	4604      	mov	r4, r0
 801bb0c:	b190      	cbz	r0, 801bb34 <WM_DeleteTimer+0x2c>
 801bb0e:	ad02      	add	r5, sp, #8
 801bb10:	f7fb fbb2 	bl	8017278 <GUI_Lock>
 801bb14:	4620      	mov	r0, r4
 801bb16:	f7fa facf 	bl	80160b8 <GUI_ALLOC_LockH>
 801bb1a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801bb1e:	6800      	ldr	r0, [r0, #0]
 801bb20:	f001 fbf0 	bl	801d304 <GUI_TIMER_Delete>
 801bb24:	4628      	mov	r0, r5
 801bb26:	f7fa fad5 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	f7fa fb02 	bl	8016134 <GUI_ALLOC_Free>
 801bb30:	f7fb fb98 	bl	8017264 <GUI_Unlock>
 801bb34:	b003      	add	sp, #12
 801bb36:	bd30      	pop	{r4, r5, pc}

0801bb38 <WM__DeleteAssocTimer>:
 801bb38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bb3a:	4605      	mov	r5, r0
 801bb3c:	f7fb fb9c 	bl	8017278 <GUI_Lock>
 801bb40:	a801      	add	r0, sp, #4
 801bb42:	f001 fbab 	bl	801d29c <GUI_TIMER__GetFirstTimer>
 801bb46:	4604      	mov	r4, r0
 801bb48:	b1dc      	cbz	r4, 801bb82 <WM__DeleteAssocTimer+0x4a>
 801bb4a:	2101      	movs	r1, #1
 801bb4c:	4620      	mov	r0, r4
 801bb4e:	f001 fc11 	bl	801d374 <GUI_TIMER_GetFlag>
 801bb52:	9b01      	ldr	r3, [sp, #4]
 801bb54:	b183      	cbz	r3, 801bb78 <WM__DeleteAssocTimer+0x40>
 801bb56:	b178      	cbz	r0, 801bb78 <WM__DeleteAssocTimer+0x40>
 801bb58:	4618      	mov	r0, r3
 801bb5a:	f7fa faa3 	bl	80160a4 <GUI_ALLOC_h2p>
 801bb5e:	6843      	ldr	r3, [r0, #4]
 801bb60:	42ab      	cmp	r3, r5
 801bb62:	d109      	bne.n	801bb78 <WM__DeleteAssocTimer+0x40>
 801bb64:	9e01      	ldr	r6, [sp, #4]
 801bb66:	a901      	add	r1, sp, #4
 801bb68:	4620      	mov	r0, r4
 801bb6a:	f001 fbaf 	bl	801d2cc <GUI_TIMER__GetNextTimerLin>
 801bb6e:	4604      	mov	r4, r0
 801bb70:	4630      	mov	r0, r6
 801bb72:	f7ff ffc9 	bl	801bb08 <WM_DeleteTimer>
 801bb76:	e7e7      	b.n	801bb48 <WM__DeleteAssocTimer+0x10>
 801bb78:	a901      	add	r1, sp, #4
 801bb7a:	4620      	mov	r0, r4
 801bb7c:	f001 fba6 	bl	801d2cc <GUI_TIMER__GetNextTimerLin>
 801bb80:	e7e1      	b.n	801bb46 <WM__DeleteAssocTimer+0xe>
 801bb82:	f7fb fb6f 	bl	8017264 <GUI_Unlock>
 801bb86:	b002      	add	sp, #8
 801bb88:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bb8c <WM__IsInModalArea>:
 801bb8c:	b570      	push	{r4, r5, r6, lr}
 801bb8e:	4604      	mov	r4, r0
 801bb90:	b908      	cbnz	r0, 801bb96 <WM__IsInModalArea+0xa>
 801bb92:	2000      	movs	r0, #0
 801bb94:	bd70      	pop	{r4, r5, r6, pc}
 801bb96:	4b11      	ldr	r3, [pc, #68]	; (801bbdc <WM__IsInModalArea+0x50>)
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	da0f      	bge.n	801bbbe <WM__IsInModalArea+0x32>
 801bb9e:	4e10      	ldr	r6, [pc, #64]	; (801bbe0 <WM__IsInModalArea+0x54>)
 801bba0:	4620      	mov	r0, r4
 801bba2:	4d10      	ldr	r5, [pc, #64]	; (801bbe4 <WM__IsInModalArea+0x58>)
 801bba4:	6833      	ldr	r3, [r6, #0]
 801bba6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801bbaa:	6859      	ldr	r1, [r3, #4]
 801bbac:	f000 fa48 	bl	801c040 <WM__IsAncestor>
 801bbb0:	6833      	ldr	r3, [r6, #0]
 801bbb2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801bbb6:	686a      	ldr	r2, [r5, #4]
 801bbb8:	686b      	ldr	r3, [r5, #4]
 801bbba:	b942      	cbnz	r2, 801bbce <WM__IsInModalArea+0x42>
 801bbbc:	e00c      	b.n	801bbd8 <WM__IsInModalArea+0x4c>
 801bbbe:	4a0a      	ldr	r2, [pc, #40]	; (801bbe8 <WM__IsInModalArea+0x5c>)
 801bbc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801bbc4:	f000 fa3c 	bl	801c040 <WM__IsAncestor>
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	d1e8      	bne.n	801bb9e <WM__IsInModalArea+0x12>
 801bbcc:	e7e1      	b.n	801bb92 <WM__IsInModalArea+0x6>
 801bbce:	b918      	cbnz	r0, 801bbd8 <WM__IsInModalArea+0x4c>
 801bbd0:	1ae3      	subs	r3, r4, r3
 801bbd2:	4258      	negs	r0, r3
 801bbd4:	4158      	adcs	r0, r3
 801bbd6:	bd70      	pop	{r4, r5, r6, pc}
 801bbd8:	2001      	movs	r0, #1
 801bbda:	bd70      	pop	{r4, r5, r6, pc}
 801bbdc:	20000048 	.word	0x20000048
 801bbe0:	200224e0 	.word	0x200224e0
 801bbe4:	20022534 	.word	0x20022534
 801bbe8:	200224c0 	.word	0x200224c0

0801bbec <WM__SendPIDMessage>:
 801bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbee:	4606      	mov	r6, r0
 801bbf0:	b085      	sub	sp, #20
 801bbf2:	460c      	mov	r4, r1
 801bbf4:	466d      	mov	r5, sp
 801bbf6:	4637      	mov	r7, r6
 801bbf8:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801bbfa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801bbfe:	230d      	movs	r3, #13
 801bc00:	9602      	str	r6, [sp, #8]
 801bc02:	9300      	str	r3, [sp, #0]
 801bc04:	4638      	mov	r0, r7
 801bc06:	f7ff fd9f 	bl	801b748 <WM_IsWindow>
 801bc0a:	b150      	cbz	r0, 801bc22 <WM__SendPIDMessage+0x36>
 801bc0c:	4638      	mov	r0, r7
 801bc0e:	f7ff fd46 	bl	801b69e <WM_GetParent>
 801bc12:	4607      	mov	r7, r0
 801bc14:	2800      	cmp	r0, #0
 801bc16:	d0f5      	beq.n	801bc04 <WM__SendPIDMessage+0x18>
 801bc18:	4629      	mov	r1, r5
 801bc1a:	9403      	str	r4, [sp, #12]
 801bc1c:	f000 fa48 	bl	801c0b0 <WM__SendMessageIfEnabled>
 801bc20:	e7f0      	b.n	801bc04 <WM__SendPIDMessage+0x18>
 801bc22:	4621      	mov	r1, r4
 801bc24:	4630      	mov	r0, r6
 801bc26:	f000 fa43 	bl	801c0b0 <WM__SendMessageIfEnabled>
 801bc2a:	b005      	add	sp, #20
 801bc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bc2e <WM__SendTouchMessage>:
 801bc2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc30:	68cc      	ldr	r4, [r1, #12]
 801bc32:	4606      	mov	r6, r0
 801bc34:	460d      	mov	r5, r1
 801bc36:	b18c      	cbz	r4, 801bc5c <WM__SendTouchMessage+0x2e>
 801bc38:	f7fa fa3e 	bl	80160b8 <GUI_ALLOC_LockH>
 801bc3c:	6822      	ldr	r2, [r4, #0]
 801bc3e:	f9b0 1000 	ldrsh.w	r1, [r0]
 801bc42:	ab02      	add	r3, sp, #8
 801bc44:	1a52      	subs	r2, r2, r1
 801bc46:	f843 0d04 	str.w	r0, [r3, #-4]!
 801bc4a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	6022      	str	r2, [r4, #0]
 801bc52:	6862      	ldr	r2, [r4, #4]
 801bc54:	1a52      	subs	r2, r2, r1
 801bc56:	6062      	str	r2, [r4, #4]
 801bc58:	f7fa fa3c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801bc5c:	4629      	mov	r1, r5
 801bc5e:	4630      	mov	r0, r6
 801bc60:	f7ff ffc4 	bl	801bbec <WM__SendPIDMessage>
 801bc64:	b002      	add	sp, #8
 801bc66:	bd70      	pop	{r4, r5, r6, pc}

0801bc68 <WM_HandlePID>:
 801bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc6c:	b097      	sub	sp, #92	; 0x5c
 801bc6e:	2300      	movs	r3, #0
 801bc70:	ad06      	add	r5, sp, #24
 801bc72:	9306      	str	r3, [sp, #24]
 801bc74:	606b      	str	r3, [r5, #4]
 801bc76:	60ab      	str	r3, [r5, #8]
 801bc78:	f000 ff24 	bl	801cac4 <GUI_PID_IsEmpty>
 801bc7c:	4607      	mov	r7, r0
 801bc7e:	b108      	cbz	r0, 801bc84 <WM_HandlePID+0x1c>
 801bc80:	2700      	movs	r7, #0
 801bc82:	e1bb      	b.n	801bffc <WM_HandlePID+0x394>
 801bc84:	ac09      	add	r4, sp, #36	; 0x24
 801bc86:	4ea3      	ldr	r6, [pc, #652]	; (801bf14 <WM_HandlePID+0x2ac>)
 801bc88:	4620      	mov	r0, r4
 801bc8a:	f000 fe97 	bl	801c9bc <GUI_PID_GetState>
 801bc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc90:	3301      	adds	r3, #1
 801bc92:	d10c      	bne.n	801bcae <WM_HandlePID+0x46>
 801bc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc96:	3301      	adds	r3, #1
 801bc98:	d109      	bne.n	801bcae <WM_HandlePID+0x46>
 801bc9a:	4a9f      	ldr	r2, [pc, #636]	; (801bf18 <WM_HandlePID+0x2b0>)
 801bc9c:	210c      	movs	r1, #12
 801bc9e:	6833      	ldr	r3, [r6, #0]
 801bca0:	fb01 2303 	mla	r3, r1, r3, r2
 801bca4:	7e1a      	ldrb	r2, [r3, #24]
 801bca6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d0e8      	beq.n	801bc80 <WM_HandlePID+0x18>
 801bcae:	f7fb fae3 	bl	8017278 <GUI_Lock>
 801bcb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	db0d      	blt.n	801bcd4 <WM_HandlePID+0x6c>
 801bcb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bcba:	2a00      	cmp	r2, #0
 801bcbc:	db18      	blt.n	801bcf0 <WM_HandlePID+0x88>
 801bcbe:	4997      	ldr	r1, [pc, #604]	; (801bf1c <WM_HandlePID+0x2b4>)
 801bcc0:	f9b1 1000 	ldrsh.w	r1, [r1]
 801bcc4:	440b      	add	r3, r1
 801bcc6:	9309      	str	r3, [sp, #36]	; 0x24
 801bcc8:	4b95      	ldr	r3, [pc, #596]	; (801bf20 <WM_HandlePID+0x2b8>)
 801bcca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bcce:	441a      	add	r2, r3
 801bcd0:	920a      	str	r2, [sp, #40]	; 0x28
 801bcd2:	e00d      	b.n	801bcf0 <WM_HandlePID+0x88>
 801bcd4:	3301      	adds	r3, #1
 801bcd6:	d10b      	bne.n	801bcf0 <WM_HandlePID+0x88>
 801bcd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcda:	3301      	adds	r3, #1
 801bcdc:	d108      	bne.n	801bcf0 <WM_HandlePID+0x88>
 801bcde:	6832      	ldr	r2, [r6, #0]
 801bce0:	210c      	movs	r1, #12
 801bce2:	4b8d      	ldr	r3, [pc, #564]	; (801bf18 <WM_HandlePID+0x2b0>)
 801bce4:	fb01 3302 	mla	r3, r1, r2, r3
 801bce8:	691a      	ldr	r2, [r3, #16]
 801bcea:	695b      	ldr	r3, [r3, #20]
 801bcec:	9209      	str	r2, [sp, #36]	; 0x24
 801bcee:	930a      	str	r3, [sp, #40]	; 0x28
 801bcf0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801bcf4:	f8df 821c 	ldr.w	r8, [pc, #540]	; 801bf14 <WM_HandlePID+0x2ac>
 801bcf8:	2b01      	cmp	r3, #1
 801bcfa:	bf98      	it	ls
 801bcfc:	6033      	strls	r3, [r6, #0]
 801bcfe:	6830      	ldr	r0, [r6, #0]
 801bd00:	f7fa ffe6 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801bd04:	b910      	cbnz	r0, 801bd0c <WM_HandlePID+0xa4>
 801bd06:	f7fb faad 	bl	8017264 <GUI_Unlock>
 801bd0a:	e177      	b.n	801bffc <WM_HandlePID+0x394>
 801bd0c:	aa02      	add	r2, sp, #8
 801bd0e:	a901      	add	r1, sp, #4
 801bd10:	f8d8 0000 	ldr.w	r0, [r8]
 801bd14:	f7fb fa16 	bl	8017144 <GUI_GetLayerPosEx>
 801bd18:	a804      	add	r0, sp, #16
 801bd1a:	f000 fa61 	bl	801c1e0 <WM__AddCriticalHandle>
 801bd1e:	9b01      	ldr	r3, [sp, #4]
 801bd20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd22:	220c      	movs	r2, #12
 801bd24:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bd26:	1ac0      	subs	r0, r0, r3
 801bd28:	9b02      	ldr	r3, [sp, #8]
 801bd2a:	4f7b      	ldr	r7, [pc, #492]	; (801bf18 <WM_HandlePID+0x2b0>)
 801bd2c:	1ac9      	subs	r1, r1, r3
 801bd2e:	f8d8 3000 	ldr.w	r3, [r8]
 801bd32:	9009      	str	r0, [sp, #36]	; 0x24
 801bd34:	fb02 7303 	mla	r3, r2, r3, r7
 801bd38:	910a      	str	r1, [sp, #40]	; 0x28
 801bd3a:	691a      	ldr	r2, [r3, #16]
 801bd3c:	4290      	cmp	r0, r2
 801bd3e:	d108      	bne.n	801bd52 <WM_HandlePID+0xea>
 801bd40:	695a      	ldr	r2, [r3, #20]
 801bd42:	4291      	cmp	r1, r2
 801bd44:	d105      	bne.n	801bd52 <WM_HandlePID+0xea>
 801bd46:	7e1a      	ldrb	r2, [r3, #24]
 801bd48:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801bd4c:	429a      	cmp	r2, r3
 801bd4e:	f000 814e 	beq.w	801bfee <WM_HandlePID+0x386>
 801bd52:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801bd56:	f000 fdef 	bl	801c938 <GUI_CURSOR_SetPositionEx>
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	b113      	cbz	r3, 801bd64 <WM_HandlePID+0xfc>
 801bd5e:	2100      	movs	r1, #0
 801bd60:	4620      	mov	r0, r4
 801bd62:	4798      	blx	r3
 801bd64:	6832      	ldr	r2, [r6, #0]
 801bd66:	4b6f      	ldr	r3, [pc, #444]	; (801bf24 <WM_HandlePID+0x2bc>)
 801bd68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bd6c:	b918      	cbnz	r0, 801bd76 <WM_HandlePID+0x10e>
 801bd6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bd70:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd72:	f002 fe83 	bl	801ea7c <WM_Screen2hWin>
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	9005      	str	r0, [sp, #20]
 801bd7a:	b113      	cbz	r3, 801bd82 <WM_HandlePID+0x11a>
 801bd7c:	9905      	ldr	r1, [sp, #20]
 801bd7e:	4620      	mov	r0, r4
 801bd80:	4798      	blx	r3
 801bd82:	4969      	ldr	r1, [pc, #420]	; (801bf28 <WM_HandlePID+0x2c0>)
 801bd84:	6833      	ldr	r3, [r6, #0]
 801bd86:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801bf14 <WM_HandlePID+0x2ac>
 801bd8a:	4688      	mov	r8, r1
 801bd8c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801bd90:	685a      	ldr	r2, [r3, #4]
 801bd92:	9805      	ldr	r0, [sp, #20]
 801bd94:	b312      	cbz	r2, 801bddc <WM_HandlePID+0x174>
 801bd96:	4282      	cmp	r2, r0
 801bd98:	d020      	beq.n	801bddc <WM_HandlePID+0x174>
 801bd9a:	6858      	ldr	r0, [r3, #4]
 801bd9c:	f7ff fef6 	bl	801bb8c <WM__IsInModalArea>
 801bda0:	b1e0      	cbz	r0, 801bddc <WM_HandlePID+0x174>
 801bda2:	f8d9 3000 	ldr.w	r3, [r9]
 801bda6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801bdaa:	6858      	ldr	r0, [r3, #4]
 801bdac:	f000 f959 	bl	801c062 <WM__IsEnabled>
 801bdb0:	b1a0      	cbz	r0, 801bddc <WM_HandlePID+0x174>
 801bdb2:	2312      	movs	r3, #18
 801bdb4:	9515      	str	r5, [sp, #84]	; 0x54
 801bdb6:	9312      	str	r3, [sp, #72]	; 0x48
 801bdb8:	f8d9 3000 	ldr.w	r3, [r9]
 801bdbc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bdc0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801bdc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801bdc8:	6858      	ldr	r0, [r3, #4]
 801bdca:	a912      	add	r1, sp, #72	; 0x48
 801bdcc:	f7ff ff2f 	bl	801bc2e <WM__SendTouchMessage>
 801bdd0:	f8d9 3000 	ldr.w	r3, [r9]
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801bdda:	605a      	str	r2, [r3, #4]
 801bddc:	9805      	ldr	r0, [sp, #20]
 801bdde:	f7ff fed5 	bl	801bb8c <WM__IsInModalArea>
 801bde2:	b908      	cbnz	r0, 801bde8 <WM_HandlePID+0x180>
 801bde4:	2500      	movs	r5, #0
 801bde6:	e0f4      	b.n	801bfd2 <WM_HandlePID+0x36a>
 801bde8:	6833      	ldr	r3, [r6, #0]
 801bdea:	9a05      	ldr	r2, [sp, #20]
 801bdec:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 801bdf0:	f8df a120 	ldr.w	sl, [pc, #288]	; 801bf14 <WM_HandlePID+0x2ac>
 801bdf4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801bf18 <WM_HandlePID+0x2b0>
 801bdf8:	f8c8 2004 	str.w	r2, [r8, #4]
 801bdfc:	f04f 080c 	mov.w	r8, #12
 801be00:	fb08 7303 	mla	r3, r8, r3, r7
 801be04:	7e1a      	ldrb	r2, [r3, #24]
 801be06:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801be0a:	429a      	cmp	r2, r3
 801be0c:	d063      	beq.n	801bed6 <WM_HandlePID+0x26e>
 801be0e:	9b05      	ldr	r3, [sp, #20]
 801be10:	2b00      	cmp	r3, #0
 801be12:	d060      	beq.n	801bed6 <WM_HandlePID+0x26e>
 801be14:	9805      	ldr	r0, [sp, #20]
 801be16:	f7fa f94f 	bl	80160b8 <GUI_ALLOC_LockH>
 801be1a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801be1e:	9003      	str	r0, [sp, #12]
 801be20:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 801be24:	f8da 3000 	ldr.w	r3, [sl]
 801be28:	fb08 9303 	mla	r3, r8, r3, r9
 801be2c:	7e1b      	ldrb	r3, [r3, #24]
 801be2e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 801be32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be34:	f9b0 2000 	ldrsh.w	r2, [r0]
 801be38:	1a9b      	subs	r3, r3, r2
 801be3a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801be3e:	eb0d 0008 	add.w	r0, sp, r8
 801be42:	930f      	str	r3, [sp, #60]	; 0x3c
 801be44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be46:	1a9b      	subs	r3, r3, r2
 801be48:	9310      	str	r3, [sp, #64]	; 0x40
 801be4a:	f7fa f943 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801be4e:	ab0f      	add	r3, sp, #60	; 0x3c
 801be50:	9315      	str	r3, [sp, #84]	; 0x54
 801be52:	2311      	movs	r3, #17
 801be54:	9312      	str	r3, [sp, #72]	; 0x48
 801be56:	f8da 3000 	ldr.w	r3, [sl]
 801be5a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801be5e:	fb08 9e03 	mla	lr, r8, r3, r9
 801be62:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 801bf2c <WM_HandlePID+0x2c4>
 801be66:	00db      	lsls	r3, r3, #3
 801be68:	f10e 0210 	add.w	r2, lr, #16
 801be6c:	ca07      	ldmia	r2, {r0, r1, r2}
 801be6e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 801be72:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801be76:	f88e 2018 	strb.w	r2, [lr, #24]
 801be7a:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801be7e:	b132      	cbz	r2, 801be8e <WM_HandlePID+0x226>
 801be80:	eb09 0203 	add.w	r2, r9, r3
 801be84:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801be88:	9905      	ldr	r1, [sp, #20]
 801be8a:	6051      	str	r1, [r2, #4]
 801be8c:	e000      	b.n	801be90 <WM_HandlePID+0x228>
 801be8e:	4690      	mov	r8, r2
 801be90:	444b      	add	r3, r9
 801be92:	a912      	add	r1, sp, #72	; 0x48
 801be94:	f8d3 b004 	ldr.w	fp, [r3, #4]
 801be98:	9805      	ldr	r0, [sp, #20]
 801be9a:	f000 f909 	bl	801c0b0 <WM__SendMessageIfEnabled>
 801be9e:	6833      	ldr	r3, [r6, #0]
 801bea0:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
 801bea4:	6851      	ldr	r1, [r2, #4]
 801bea6:	458b      	cmp	fp, r1
 801bea8:	d001      	beq.n	801beae <WM_HandlePID+0x246>
 801beaa:	6852      	ldr	r2, [r2, #4]
 801beac:	9205      	str	r2, [sp, #20]
 801beae:	220c      	movs	r2, #12
 801beb0:	fb02 7303 	mla	r3, r2, r3, r7
 801beb4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 801beb8:	3310      	adds	r3, #16
 801beba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bebe:	f1b8 0f00 	cmp.w	r8, #0
 801bec2:	d008      	beq.n	801bed6 <WM_HandlePID+0x26e>
 801bec4:	4640      	mov	r0, r8
 801bec6:	f7ff fc3f 	bl	801b748 <WM_IsWindow>
 801beca:	b120      	cbz	r0, 801bed6 <WM_HandlePID+0x26e>
 801becc:	6833      	ldr	r3, [r6, #0]
 801bece:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 801bed2:	f8c9 8004 	str.w	r8, [r9, #4]
 801bed6:	6833      	ldr	r3, [r6, #0]
 801bed8:	200c      	movs	r0, #12
 801beda:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 801bede:	fb00 7003 	mla	r0, r0, r3, r7
 801bee2:	7e02      	ldrb	r2, [r0, #24]
 801bee4:	ea5e 0802 	orrs.w	r8, lr, r2
 801bee8:	d05c      	beq.n	801bfa4 <WM_HandlePID+0x33c>
 801beea:	f44f 7210 	mov.w	r2, #576	; 0x240
 801beee:	490f      	ldr	r1, [pc, #60]	; (801bf2c <WM_HandlePID+0x2c4>)
 801bef0:	00db      	lsls	r3, r3, #3
 801bef2:	9212      	str	r2, [sp, #72]	; 0x48
 801bef4:	18ca      	adds	r2, r1, r3
 801bef6:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801befa:	f8dd c014 	ldr.w	ip, [sp, #20]
 801befe:	45e0      	cmp	r8, ip
 801bf00:	4688      	mov	r8, r1
 801bf02:	d026      	beq.n	801bf52 <WM_HandlePID+0x2ea>
 801bf04:	6852      	ldr	r2, [r2, #4]
 801bf06:	b322      	cbz	r2, 801bf52 <WM_HandlePID+0x2ea>
 801bf08:	f1be 0f00 	cmp.w	lr, #0
 801bf0c:	d010      	beq.n	801bf30 <WM_HandlePID+0x2c8>
 801bf0e:	2200      	movs	r2, #0
 801bf10:	9215      	str	r2, [sp, #84]	; 0x54
 801bf12:	e014      	b.n	801bf3e <WM_HandlePID+0x2d6>
 801bf14:	200224e0 	.word	0x200224e0
 801bf18:	20000334 	.word	0x20000334
 801bf1c:	20022474 	.word	0x20022474
 801bf20:	20022464 	.word	0x20022464
 801bf24:	20022504 	.word	0x20022504
 801bf28:	20022514 	.word	0x20022514
 801bf2c:	20022524 	.word	0x20022524
 801bf30:	6902      	ldr	r2, [r0, #16]
 801bf32:	f88d e020 	strb.w	lr, [sp, #32]
 801bf36:	9206      	str	r2, [sp, #24]
 801bf38:	6942      	ldr	r2, [r0, #20]
 801bf3a:	9515      	str	r5, [sp, #84]	; 0x54
 801bf3c:	9207      	str	r2, [sp, #28]
 801bf3e:	4443      	add	r3, r8
 801bf40:	a912      	add	r1, sp, #72	; 0x48
 801bf42:	6858      	ldr	r0, [r3, #4]
 801bf44:	f7ff fe73 	bl	801bc2e <WM__SendTouchMessage>
 801bf48:	6833      	ldr	r3, [r6, #0]
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801bf50:	605a      	str	r2, [r3, #4]
 801bf52:	6833      	ldr	r3, [r6, #0]
 801bf54:	220c      	movs	r2, #12
 801bf56:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 801bf5a:	fb02 7203 	mla	r2, r2, r3, r7
 801bf5e:	f882 e018 	strb.w	lr, [r2, #24]
 801bf62:	9a05      	ldr	r2, [sp, #20]
 801bf64:	2a00      	cmp	r2, #0
 801bf66:	d033      	beq.n	801bfd0 <WM_HandlePID+0x368>
 801bf68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bf6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801bf70:	f1be 0f00 	cmp.w	lr, #0
 801bf74:	d005      	beq.n	801bf82 <WM_HandlePID+0x31a>
 801bf76:	9a05      	ldr	r2, [sp, #20]
 801bf78:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 801bf7c:	f8c8 2004 	str.w	r2, [r8, #4]
 801bf80:	e00a      	b.n	801bf98 <WM_HandlePID+0x330>
 801bf82:	4b20      	ldr	r3, [pc, #128]	; (801c004 <WM_HandlePID+0x39c>)
 801bf84:	781b      	ldrb	r3, [r3, #0]
 801bf86:	b10b      	cbz	r3, 801bf8c <WM_HandlePID+0x324>
 801bf88:	f002 fda6 	bl	801ead8 <WM_ReleaseCapture>
 801bf8c:	6833      	ldr	r3, [r6, #0]
 801bf8e:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 801bf92:	2300      	movs	r3, #0
 801bf94:	f8c8 3004 	str.w	r3, [r8, #4]
 801bf98:	9805      	ldr	r0, [sp, #20]
 801bf9a:	a912      	add	r1, sp, #72	; 0x48
 801bf9c:	9515      	str	r5, [sp, #84]	; 0x54
 801bf9e:	f7ff fe46 	bl	801bc2e <WM__SendTouchMessage>
 801bfa2:	e015      	b.n	801bfd0 <WM_HandlePID+0x368>
 801bfa4:	9b05      	ldr	r3, [sp, #20]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	f43f af1c 	beq.w	801bde4 <WM_HandlePID+0x17c>
 801bfac:	9805      	ldr	r0, [sp, #20]
 801bfae:	f000 f858 	bl	801c062 <WM__IsEnabled>
 801bfb2:	2800      	cmp	r0, #0
 801bfb4:	f43f af16 	beq.w	801bde4 <WM_HandlePID+0x17c>
 801bfb8:	2310      	movs	r3, #16
 801bfba:	9515      	str	r5, [sp, #84]	; 0x54
 801bfbc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bfc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801bfc4:	9805      	ldr	r0, [sp, #20]
 801bfc6:	a912      	add	r1, sp, #72	; 0x48
 801bfc8:	9312      	str	r3, [sp, #72]	; 0x48
 801bfca:	f7ff fe30 	bl	801bc2e <WM__SendTouchMessage>
 801bfce:	e709      	b.n	801bde4 <WM_HandlePID+0x17c>
 801bfd0:	2501      	movs	r5, #1
 801bfd2:	6836      	ldr	r6, [r6, #0]
 801bfd4:	230c      	movs	r3, #12
 801bfd6:	fb03 7706 	mla	r7, r3, r6, r7
 801bfda:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bfde:	3710      	adds	r7, #16
 801bfe0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801bfe4:	4631      	mov	r1, r6
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	f002 fcf2 	bl	801e9d0 <WM_PID__SetPrevState>
 801bfec:	e000      	b.n	801bff0 <WM_HandlePID+0x388>
 801bfee:	2500      	movs	r5, #0
 801bff0:	462f      	mov	r7, r5
 801bff2:	a804      	add	r0, sp, #16
 801bff4:	f000 f8fc 	bl	801c1f0 <WM__RemoveCriticalHandle>
 801bff8:	f7fb f934 	bl	8017264 <GUI_Unlock>
 801bffc:	4638      	mov	r0, r7
 801bffe:	b017      	add	sp, #92	; 0x5c
 801c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c004:	200224e4 	.word	0x200224e4

0801c008 <WM__GetFirstSibling>:
 801c008:	b508      	push	{r3, lr}
 801c00a:	f7ff fb48 	bl	801b69e <WM_GetParent>
 801c00e:	b118      	cbz	r0, 801c018 <WM__GetFirstSibling+0x10>
 801c010:	f7fa f848 	bl	80160a4 <GUI_ALLOC_h2p>
 801c014:	69c0      	ldr	r0, [r0, #28]
 801c016:	bd08      	pop	{r3, pc}
 801c018:	bd08      	pop	{r3, pc}

0801c01a <WM__GetPrevSibling>:
 801c01a:	b538      	push	{r3, r4, r5, lr}
 801c01c:	4605      	mov	r5, r0
 801c01e:	f7ff fff3 	bl	801c008 <WM__GetFirstSibling>
 801c022:	4604      	mov	r4, r0
 801c024:	b154      	cbz	r4, 801c03c <WM__GetPrevSibling+0x22>
 801c026:	42ac      	cmp	r4, r5
 801c028:	d007      	beq.n	801c03a <WM__GetPrevSibling+0x20>
 801c02a:	4620      	mov	r0, r4
 801c02c:	f7fa f83a 	bl	80160a4 <GUI_ALLOC_h2p>
 801c030:	6a03      	ldr	r3, [r0, #32]
 801c032:	429d      	cmp	r5, r3
 801c034:	d002      	beq.n	801c03c <WM__GetPrevSibling+0x22>
 801c036:	461c      	mov	r4, r3
 801c038:	e7f4      	b.n	801c024 <WM__GetPrevSibling+0xa>
 801c03a:	2400      	movs	r4, #0
 801c03c:	4620      	mov	r0, r4
 801c03e:	bd38      	pop	{r3, r4, r5, pc}

0801c040 <WM__IsAncestor>:
 801c040:	b510      	push	{r4, lr}
 801c042:	460c      	mov	r4, r1
 801c044:	b908      	cbnz	r0, 801c04a <WM__IsAncestor+0xa>
 801c046:	2000      	movs	r0, #0
 801c048:	bd10      	pop	{r4, pc}
 801c04a:	2900      	cmp	r1, #0
 801c04c:	d0fb      	beq.n	801c046 <WM__IsAncestor+0x6>
 801c04e:	f7fa f829 	bl	80160a4 <GUI_ALLOC_h2p>
 801c052:	6980      	ldr	r0, [r0, #24]
 801c054:	4284      	cmp	r4, r0
 801c056:	d002      	beq.n	801c05e <WM__IsAncestor+0x1e>
 801c058:	2800      	cmp	r0, #0
 801c05a:	d1f8      	bne.n	801c04e <WM__IsAncestor+0xe>
 801c05c:	e7f3      	b.n	801c046 <WM__IsAncestor+0x6>
 801c05e:	2001      	movs	r0, #1
 801c060:	bd10      	pop	{r4, pc}

0801c062 <WM__IsEnabled>:
 801c062:	b508      	push	{r3, lr}
 801c064:	f7fa f81e 	bl	80160a4 <GUI_ALLOC_h2p>
 801c068:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c06a:	f080 0010 	eor.w	r0, r0, #16
 801c06e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801c072:	bd08      	pop	{r3, pc}

0801c074 <WM__SendMessage>:
 801c074:	b570      	push	{r4, r5, r6, lr}
 801c076:	4c0d      	ldr	r4, [pc, #52]	; (801c0ac <WM__SendMessage+0x38>)
 801c078:	4606      	mov	r6, r0
 801c07a:	460d      	mov	r5, r1
 801c07c:	6823      	ldr	r3, [r4, #0]
 801c07e:	2b13      	cmp	r3, #19
 801c080:	dc12      	bgt.n	801c0a8 <WM__SendMessage+0x34>
 801c082:	f7fa f80f 	bl	80160a4 <GUI_ALLOC_h2p>
 801c086:	6902      	ldr	r2, [r0, #16]
 801c088:	606e      	str	r6, [r5, #4]
 801c08a:	b142      	cbz	r2, 801c09e <WM__SendMessage+0x2a>
 801c08c:	6823      	ldr	r3, [r4, #0]
 801c08e:	4628      	mov	r0, r5
 801c090:	3301      	adds	r3, #1
 801c092:	6023      	str	r3, [r4, #0]
 801c094:	4790      	blx	r2
 801c096:	6823      	ldr	r3, [r4, #0]
 801c098:	3b01      	subs	r3, #1
 801c09a:	6023      	str	r3, [r4, #0]
 801c09c:	bd70      	pop	{r4, r5, r6, pc}
 801c09e:	4628      	mov	r0, r5
 801c0a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0a4:	f7ff b9fa 	b.w	801b49c <WM_DefaultProc>
 801c0a8:	bd70      	pop	{r4, r5, r6, pc}
 801c0aa:	bf00      	nop
 801c0ac:	2000035c 	.word	0x2000035c

0801c0b0 <WM__SendMessageIfEnabled>:
 801c0b0:	b538      	push	{r3, r4, r5, lr}
 801c0b2:	4604      	mov	r4, r0
 801c0b4:	460d      	mov	r5, r1
 801c0b6:	f7ff ffd4 	bl	801c062 <WM__IsEnabled>
 801c0ba:	b128      	cbz	r0, 801c0c8 <WM__SendMessageIfEnabled+0x18>
 801c0bc:	4629      	mov	r1, r5
 801c0be:	4620      	mov	r0, r4
 801c0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c0c4:	f7ff bfd6 	b.w	801c074 <WM__SendMessage>
 801c0c8:	bd38      	pop	{r3, r4, r5, pc}

0801c0ca <WM__SendMessageNoPara>:
 801c0ca:	b530      	push	{r4, r5, lr}
 801c0cc:	b085      	sub	sp, #20
 801c0ce:	4604      	mov	r4, r0
 801c0d0:	2210      	movs	r2, #16
 801c0d2:	460d      	mov	r5, r1
 801c0d4:	4668      	mov	r0, sp
 801c0d6:	2100      	movs	r1, #0
 801c0d8:	f002 fd75 	bl	801ebc6 <memset>
 801c0dc:	4620      	mov	r0, r4
 801c0de:	f7f9 ffe1 	bl	80160a4 <GUI_ALLOC_h2p>
 801c0e2:	6903      	ldr	r3, [r0, #16]
 801c0e4:	b11b      	cbz	r3, 801c0ee <WM__SendMessageNoPara+0x24>
 801c0e6:	9401      	str	r4, [sp, #4]
 801c0e8:	4668      	mov	r0, sp
 801c0ea:	9500      	str	r5, [sp, #0]
 801c0ec:	4798      	blx	r3
 801c0ee:	b005      	add	sp, #20
 801c0f0:	bd30      	pop	{r4, r5, pc}

0801c0f2 <WM__UpdateChildPositions>:
 801c0f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0f6:	b08b      	sub	sp, #44	; 0x2c
 801c0f8:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801c0fc:	9303      	str	r3, [sp, #12]
 801c0fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c102:	9101      	str	r1, [sp, #4]
 801c104:	9304      	str	r3, [sp, #16]
 801c106:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c10a:	9202      	str	r2, [sp, #8]
 801c10c:	9305      	str	r3, [sp, #20]
 801c10e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801c112:	9306      	str	r3, [sp, #24]
 801c114:	f1bb 0f00 	cmp.w	fp, #0
 801c118:	d05e      	beq.n	801c1d8 <WM__UpdateChildPositions+0xe6>
 801c11a:	4658      	mov	r0, fp
 801c11c:	f7f9 ffcc 	bl	80160b8 <GUI_ALLOC_LockH>
 801c120:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801c122:	9009      	str	r0, [sp, #36]	; 0x24
 801c124:	f402 7120 	and.w	r1, r2, #640	; 0x280
 801c128:	f9b0 a000 	ldrsh.w	sl, [r0]
 801c12c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c130:	2980      	cmp	r1, #128	; 0x80
 801c132:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801c136:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 801c13a:	d008      	beq.n	801c14e <WM__UpdateChildPositions+0x5c>
 801c13c:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 801c140:	d107      	bne.n	801c152 <WM__UpdateChildPositions+0x60>
 801c142:	9901      	ldr	r1, [sp, #4]
 801c144:	eb0a 0601 	add.w	r6, sl, r1
 801c148:	9903      	ldr	r1, [sp, #12]
 801c14a:	b236      	sxth	r6, r6
 801c14c:	e005      	b.n	801c15a <WM__UpdateChildPositions+0x68>
 801c14e:	9904      	ldr	r1, [sp, #16]
 801c150:	e000      	b.n	801c154 <WM__UpdateChildPositions+0x62>
 801c152:	9905      	ldr	r1, [sp, #20]
 801c154:	eb01 060a 	add.w	r6, r1, sl
 801c158:	b236      	sxth	r6, r6
 801c15a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801c15e:	eb01 0508 	add.w	r5, r1, r8
 801c162:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801c166:	b22d      	sxth	r5, r5
 801c168:	d007      	beq.n	801c17a <WM__UpdateChildPositions+0x88>
 801c16a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801c16e:	d10a      	bne.n	801c186 <WM__UpdateChildPositions+0x94>
 801c170:	9a02      	ldr	r2, [sp, #8]
 801c172:	189f      	adds	r7, r3, r2
 801c174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c176:	b23f      	sxth	r7, r7
 801c178:	e002      	b.n	801c180 <WM__UpdateChildPositions+0x8e>
 801c17a:	9a06      	ldr	r2, [sp, #24]
 801c17c:	18d7      	adds	r7, r2, r3
 801c17e:	b23f      	sxth	r7, r7
 801c180:	eb09 0402 	add.w	r4, r9, r2
 801c184:	e005      	b.n	801c192 <WM__UpdateChildPositions+0xa0>
 801c186:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c18a:	18cf      	adds	r7, r1, r3
 801c18c:	eb01 0409 	add.w	r4, r1, r9
 801c190:	b23f      	sxth	r7, r7
 801c192:	ebb6 010a 	subs.w	r1, r6, sl
 801c196:	b224      	sxth	r4, r4
 801c198:	eba7 0203 	sub.w	r2, r7, r3
 801c19c:	d100      	bne.n	801c1a0 <WM__UpdateChildPositions+0xae>
 801c19e:	b122      	cbz	r2, 801c1aa <WM__UpdateChildPositions+0xb8>
 801c1a0:	4658      	mov	r0, fp
 801c1a2:	9307      	str	r3, [sp, #28]
 801c1a4:	f7ff fca1 	bl	801baea <WM_MoveWindow>
 801c1a8:	9b07      	ldr	r3, [sp, #28]
 801c1aa:	1bad      	subs	r5, r5, r6
 801c1ac:	ebca 0808 	rsb	r8, sl, r8
 801c1b0:	1be4      	subs	r4, r4, r7
 801c1b2:	ebc3 0909 	rsb	r9, r3, r9
 801c1b6:	ebb5 0108 	subs.w	r1, r5, r8
 801c1ba:	ebc9 0204 	rsb	r2, r9, r4
 801c1be:	d100      	bne.n	801c1c2 <WM__UpdateChildPositions+0xd0>
 801c1c0:	b112      	cbz	r2, 801c1c8 <WM__UpdateChildPositions+0xd6>
 801c1c2:	4658      	mov	r0, fp
 801c1c4:	f7ff faee 	bl	801b7a4 <WM_ResizeWindow>
 801c1c8:	a80a      	add	r0, sp, #40	; 0x28
 801c1ca:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801c1ce:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801c1d2:	f7f9 ff7f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801c1d6:	e79d      	b.n	801c114 <WM__UpdateChildPositions+0x22>
 801c1d8:	b00b      	add	sp, #44	; 0x2c
 801c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c1e0 <WM__AddCriticalHandle>:
 801c1e0:	4b02      	ldr	r3, [pc, #8]	; (801c1ec <WM__AddCriticalHandle+0xc>)
 801c1e2:	681a      	ldr	r2, [r3, #0]
 801c1e4:	6002      	str	r2, [r0, #0]
 801c1e6:	6018      	str	r0, [r3, #0]
 801c1e8:	4770      	bx	lr
 801c1ea:	bf00      	nop
 801c1ec:	200224fc 	.word	0x200224fc

0801c1f0 <WM__RemoveCriticalHandle>:
 801c1f0:	4a09      	ldr	r2, [pc, #36]	; (801c218 <WM__RemoveCriticalHandle+0x28>)
 801c1f2:	6813      	ldr	r3, [r2, #0]
 801c1f4:	b510      	push	{r4, lr}
 801c1f6:	b16b      	cbz	r3, 801c214 <WM__RemoveCriticalHandle+0x24>
 801c1f8:	2100      	movs	r1, #0
 801c1fa:	4298      	cmp	r0, r3
 801c1fc:	d105      	bne.n	801c20a <WM__RemoveCriticalHandle+0x1a>
 801c1fe:	6803      	ldr	r3, [r0, #0]
 801c200:	b109      	cbz	r1, 801c206 <WM__RemoveCriticalHandle+0x16>
 801c202:	600b      	str	r3, [r1, #0]
 801c204:	bd10      	pop	{r4, pc}
 801c206:	6013      	str	r3, [r2, #0]
 801c208:	bd10      	pop	{r4, pc}
 801c20a:	681c      	ldr	r4, [r3, #0]
 801c20c:	4619      	mov	r1, r3
 801c20e:	b10c      	cbz	r4, 801c214 <WM__RemoveCriticalHandle+0x24>
 801c210:	4623      	mov	r3, r4
 801c212:	e7f2      	b.n	801c1fa <WM__RemoveCriticalHandle+0xa>
 801c214:	bd10      	pop	{r4, pc}
 801c216:	bf00      	nop
 801c218:	200224fc 	.word	0x200224fc

0801c21c <WM__GetClientRectEx>:
 801c21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c21e:	460d      	mov	r5, r1
 801c220:	b158      	cbz	r0, 801c23a <WM__GetClientRectEx+0x1e>
 801c222:	b151      	cbz	r1, 801c23a <WM__GetClientRectEx+0x1e>
 801c224:	ac02      	add	r4, sp, #8
 801c226:	f7f9 ff47 	bl	80160b8 <GUI_ALLOC_LockH>
 801c22a:	4629      	mov	r1, r5
 801c22c:	f844 0d04 	str.w	r0, [r4, #-4]!
 801c230:	f7fe fb92 	bl	801a958 <WM__GetClientRectWin>
 801c234:	4620      	mov	r0, r4
 801c236:	f7f9 ff4d 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801c23a:	b003      	add	sp, #12
 801c23c:	bd30      	pop	{r4, r5, pc}

0801c23e <_Color2Index_16>:
 801c23e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801c242:	b2c2      	uxtb	r2, r0
 801c244:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c246:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801c24a:	f101 0e01 	add.w	lr, r1, #1
 801c24e:	1c56      	adds	r6, r2, #1
 801c250:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 801c254:	f104 0701 	add.w	r7, r4, #1
 801c258:	4625      	mov	r5, r4
 801c25a:	4614      	mov	r4, r2
 801c25c:	bf94      	ite	ls
 801c25e:	2000      	movls	r0, #0
 801c260:	2001      	movhi	r0, #1
 801c262:	2f54      	cmp	r7, #84	; 0x54
 801c264:	bf94      	ite	ls
 801c266:	2300      	movls	r3, #0
 801c268:	2301      	movhi	r3, #1
 801c26a:	2e54      	cmp	r6, #84	; 0x54
 801c26c:	eb00 0203 	add.w	r2, r0, r3
 801c270:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801c274:	bf94      	ite	ls
 801c276:	f04f 0c00 	movls.w	ip, #0
 801c27a:	f04f 0c01 	movhi.w	ip, #1
 801c27e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801c282:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 801c286:	4462      	add	r2, ip
 801c288:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
 801c28c:	d803      	bhi.n	801c296 <_Color2Index_16+0x58>
 801c28e:	2f54      	cmp	r7, #84	; 0x54
 801c290:	d801      	bhi.n	801c296 <_Color2Index_16+0x58>
 801c292:	2e54      	cmp	r6, #84	; 0x54
 801c294:	d90a      	bls.n	801c2ac <_Color2Index_16+0x6e>
 801c296:	4429      	add	r1, r5
 801c298:	ebc2 1382 	rsb	r3, r2, r2, lsl #6
 801c29c:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
 801c2a0:	4421      	add	r1, r4
 801c2a2:	4419      	add	r1, r3
 801c2a4:	fbb1 f2f2 	udiv	r2, r1, r2
 801c2a8:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 801c2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c2ae <_Index2Color_16>:
 801c2ae:	b570      	push	{r4, r5, r6, lr}
 801c2b0:	f3c0 0680 	ubfx	r6, r0, #2, #1
 801c2b4:	f3c0 0440 	ubfx	r4, r0, #1, #1
 801c2b8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 801c2bc:	ea00 0106 	and.w	r1, r0, r6
 801c2c0:	ea00 0504 	and.w	r5, r0, r4
 801c2c4:	4018      	ands	r0, r3
 801c2c6:	01ca      	lsls	r2, r1, #7
 801c2c8:	1a52      	subs	r2, r2, r1
 801c2ca:	eb02 11c6 	add.w	r1, r2, r6, lsl #7
 801c2ce:	01c2      	lsls	r2, r0, #7
 801c2d0:	1a12      	subs	r2, r2, r0
 801c2d2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 801c2d6:	01ea      	lsls	r2, r5, #7
 801c2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801c2dc:	1b50      	subs	r0, r2, r5
 801c2de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801c2e2:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 801c2e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801c2ea:	bd70      	pop	{r4, r5, r6, pc}

0801c2ec <_GetIndexMask_16>:
 801c2ec:	200f      	movs	r0, #15
 801c2ee:	4770      	bx	lr

0801c2f0 <_GetIndexMask_0>:
 801c2f0:	b508      	push	{r3, lr}
 801c2f2:	f7fc f839 	bl	8018368 <LCD_GetNumColors>
 801c2f6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801c2fa:	d010      	beq.n	801c31e <_GetIndexMask_0+0x2e>
 801c2fc:	287f      	cmp	r0, #127	; 0x7f
 801c2fe:	d810      	bhi.n	801c322 <_GetIndexMask_0+0x32>
 801c300:	283f      	cmp	r0, #63	; 0x3f
 801c302:	d810      	bhi.n	801c326 <_GetIndexMask_0+0x36>
 801c304:	281f      	cmp	r0, #31
 801c306:	d810      	bhi.n	801c32a <_GetIndexMask_0+0x3a>
 801c308:	280f      	cmp	r0, #15
 801c30a:	d810      	bhi.n	801c32e <_GetIndexMask_0+0x3e>
 801c30c:	2807      	cmp	r0, #7
 801c30e:	d810      	bhi.n	801c332 <_GetIndexMask_0+0x42>
 801c310:	2803      	cmp	r0, #3
 801c312:	d810      	bhi.n	801c336 <_GetIndexMask_0+0x46>
 801c314:	2801      	cmp	r0, #1
 801c316:	bf94      	ite	ls
 801c318:	2000      	movls	r0, #0
 801c31a:	2001      	movhi	r0, #1
 801c31c:	e00c      	b.n	801c338 <_GetIndexMask_0+0x48>
 801c31e:	2008      	movs	r0, #8
 801c320:	e00a      	b.n	801c338 <_GetIndexMask_0+0x48>
 801c322:	2007      	movs	r0, #7
 801c324:	e008      	b.n	801c338 <_GetIndexMask_0+0x48>
 801c326:	2006      	movs	r0, #6
 801c328:	e006      	b.n	801c338 <_GetIndexMask_0+0x48>
 801c32a:	2005      	movs	r0, #5
 801c32c:	e004      	b.n	801c338 <_GetIndexMask_0+0x48>
 801c32e:	2004      	movs	r0, #4
 801c330:	e002      	b.n	801c338 <_GetIndexMask_0+0x48>
 801c332:	2003      	movs	r0, #3
 801c334:	e000      	b.n	801c338 <_GetIndexMask_0+0x48>
 801c336:	2002      	movs	r0, #2
 801c338:	2301      	movs	r3, #1
 801c33a:	fa03 f000 	lsl.w	r0, r3, r0
 801c33e:	3801      	subs	r0, #1
 801c340:	bd08      	pop	{r3, pc}

0801c342 <_Index2Color_0>:
 801c342:	b538      	push	{r3, r4, r5, lr}
 801c344:	4604      	mov	r4, r0
 801c346:	f7fc f80f 	bl	8018368 <LCD_GetNumColors>
 801c34a:	4605      	mov	r5, r0
 801c34c:	f7fc f82a 	bl	80183a4 <LCD_GetPalette>
 801c350:	42a5      	cmp	r5, r4
 801c352:	d903      	bls.n	801c35c <_Index2Color_0+0x1a>
 801c354:	b118      	cbz	r0, 801c35e <_Index2Color_0+0x1c>
 801c356:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801c35a:	bd38      	pop	{r3, r4, r5, pc}
 801c35c:	2000      	movs	r0, #0
 801c35e:	bd38      	pop	{r3, r4, r5, pc}

0801c360 <_Color2Index_0>:
 801c360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c364:	4681      	mov	r9, r0
 801c366:	f7fb ffff 	bl	8018368 <LCD_GetNumColors>
 801c36a:	4607      	mov	r7, r0
 801c36c:	f7fc f81a 	bl	80183a4 <LCD_GetPalette>
 801c370:	4606      	mov	r6, r0
 801c372:	b1e0      	cbz	r0, 801c3ae <_Color2Index_0+0x4e>
 801c374:	2000      	movs	r0, #0
 801c376:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 801c37a:	454b      	cmp	r3, r9
 801c37c:	d017      	beq.n	801c3ae <_Color2Index_0+0x4e>
 801c37e:	3001      	adds	r0, #1
 801c380:	4287      	cmp	r7, r0
 801c382:	dcf8      	bgt.n	801c376 <_Color2Index_0+0x16>
 801c384:	2400      	movs	r4, #0
 801c386:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 801c38a:	4625      	mov	r5, r4
 801c38c:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 801c390:	4648      	mov	r0, r9
 801c392:	f7fa f897 	bl	80164c4 <GUI_CalcColorDist>
 801c396:	4580      	cmp	r8, r0
 801c398:	bf88      	it	hi
 801c39a:	462c      	movhi	r4, r5
 801c39c:	f105 0501 	add.w	r5, r5, #1
 801c3a0:	bf88      	it	hi
 801c3a2:	4680      	movhi	r8, r0
 801c3a4:	42af      	cmp	r7, r5
 801c3a6:	dcf1      	bgt.n	801c38c <_Color2Index_0+0x2c>
 801c3a8:	4620      	mov	r0, r4
 801c3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801c3b4 <GUI_GetYAdjust>:
 801c3b4:	b510      	push	{r4, lr}
 801c3b6:	f7fa ff5f 	bl	8017278 <GUI_Lock>
 801c3ba:	4b0c      	ldr	r3, [pc, #48]	; (801c3ec <GUI_GetYAdjust+0x38>)
 801c3bc:	681a      	ldr	r2, [r3, #0]
 801c3be:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 801c3c0:	f003 030c 	and.w	r3, r3, #12
 801c3c4:	2b08      	cmp	r3, #8
 801c3c6:	d007      	beq.n	801c3d8 <GUI_GetYAdjust+0x24>
 801c3c8:	2b0c      	cmp	r3, #12
 801c3ca:	d005      	beq.n	801c3d8 <GUI_GetYAdjust+0x24>
 801c3cc:	2b04      	cmp	r3, #4
 801c3ce:	d107      	bne.n	801c3e0 <GUI_GetYAdjust+0x2c>
 801c3d0:	69d3      	ldr	r3, [r2, #28]
 801c3d2:	7e1c      	ldrb	r4, [r3, #24]
 801c3d4:	3c01      	subs	r4, #1
 801c3d6:	e004      	b.n	801c3e2 <GUI_GetYAdjust+0x2e>
 801c3d8:	69d3      	ldr	r3, [r2, #28]
 801c3da:	7e1c      	ldrb	r4, [r3, #24]
 801c3dc:	0864      	lsrs	r4, r4, #1
 801c3de:	e000      	b.n	801c3e2 <GUI_GetYAdjust+0x2e>
 801c3e0:	2400      	movs	r4, #0
 801c3e2:	f7fa ff3f 	bl	8017264 <GUI_Unlock>
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	bd10      	pop	{r4, pc}
 801c3ea:	bf00      	nop
 801c3ec:	20000018 	.word	0x20000018

0801c3f0 <GUI_GetFontDistY>:
 801c3f0:	b510      	push	{r4, lr}
 801c3f2:	f7fa ff41 	bl	8017278 <GUI_Lock>
 801c3f6:	4b04      	ldr	r3, [pc, #16]	; (801c408 <GUI_GetFontDistY+0x18>)
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	69db      	ldr	r3, [r3, #28]
 801c3fc:	7e5c      	ldrb	r4, [r3, #25]
 801c3fe:	f7fa ff31 	bl	8017264 <GUI_Unlock>
 801c402:	4620      	mov	r0, r4
 801c404:	bd10      	pop	{r4, pc}
 801c406:	bf00      	nop
 801c408:	20000018 	.word	0x20000018

0801c40c <GUI_GetCharDistX>:
 801c40c:	b510      	push	{r4, lr}
 801c40e:	4604      	mov	r4, r0
 801c410:	f7fa ff32 	bl	8017278 <GUI_Lock>
 801c414:	4b05      	ldr	r3, [pc, #20]	; (801c42c <GUI_GetCharDistX+0x20>)
 801c416:	2100      	movs	r1, #0
 801c418:	4620      	mov	r0, r4
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	69db      	ldr	r3, [r3, #28]
 801c41e:	685b      	ldr	r3, [r3, #4]
 801c420:	4798      	blx	r3
 801c422:	4604      	mov	r4, r0
 801c424:	f7fa ff1e 	bl	8017264 <GUI_Unlock>
 801c428:	4620      	mov	r0, r4
 801c42a:	bd10      	pop	{r4, pc}
 801c42c:	20000018 	.word	0x20000018

0801c430 <GUI_GetCharDistXEx>:
 801c430:	b538      	push	{r3, r4, r5, lr}
 801c432:	4604      	mov	r4, r0
 801c434:	460d      	mov	r5, r1
 801c436:	f7fa ff1f 	bl	8017278 <GUI_Lock>
 801c43a:	4b06      	ldr	r3, [pc, #24]	; (801c454 <GUI_GetCharDistXEx+0x24>)
 801c43c:	4629      	mov	r1, r5
 801c43e:	4620      	mov	r0, r4
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	69db      	ldr	r3, [r3, #28]
 801c444:	685b      	ldr	r3, [r3, #4]
 801c446:	4798      	blx	r3
 801c448:	4604      	mov	r4, r0
 801c44a:	f7fa ff0b 	bl	8017264 <GUI_Unlock>
 801c44e:	4620      	mov	r0, r4
 801c450:	bd38      	pop	{r3, r4, r5, pc}
 801c452:	bf00      	nop
 801c454:	20000018 	.word	0x20000018

0801c458 <_Log2VisBuffered>:
 801c458:	4770      	bx	lr
	...

0801c45c <_DispLine>:
 801c45c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c45e:	4615      	mov	r5, r2
 801c460:	ab02      	add	r3, sp, #8
 801c462:	4a21      	ldr	r2, [pc, #132]	; (801c4e8 <_DispLine+0x8c>)
 801c464:	4c21      	ldr	r4, [pc, #132]	; (801c4ec <_DispLine+0x90>)
 801c466:	f843 1d08 	str.w	r1, [r3, #-8]!
 801c46a:	4619      	mov	r1, r3
 801c46c:	9001      	str	r0, [sp, #4]
 801c46e:	6812      	ldr	r2, [r2, #0]
 801c470:	4790      	blx	r2
 801c472:	6823      	ldr	r3, [r4, #0]
 801c474:	9001      	str	r0, [sp, #4]
 801c476:	6958      	ldr	r0, [r3, #20]
 801c478:	b940      	cbnz	r0, 801c48c <_DispLine+0x30>
 801c47a:	2001      	movs	r0, #1
 801c47c:	f001 f98c 	bl	801d798 <GUI__ManageCache>
 801c480:	6822      	ldr	r2, [r4, #0]
 801c482:	69d3      	ldr	r3, [r2, #28]
 801c484:	695b      	ldr	r3, [r3, #20]
 801c486:	b93b      	cbnz	r3, 801c498 <_DispLine+0x3c>
 801c488:	4d19      	ldr	r5, [pc, #100]	; (801c4f0 <_DispLine+0x94>)
 801c48a:	e022      	b.n	801c4d2 <_DispLine+0x76>
 801c48c:	4629      	mov	r1, r5
 801c48e:	f7fa f95b 	bl	8016748 <GUI_RectsIntersect>
 801c492:	2800      	cmp	r0, #0
 801c494:	d1f1      	bne.n	801c47a <_DispLine+0x1e>
 801c496:	e024      	b.n	801c4e2 <_DispLine+0x86>
 801c498:	4c16      	ldr	r4, [pc, #88]	; (801c4f4 <_DispLine+0x98>)
 801c49a:	689b      	ldr	r3, [r3, #8]
 801c49c:	6821      	ldr	r1, [r4, #0]
 801c49e:	b141      	cbz	r1, 801c4b2 <_DispLine+0x56>
 801c4a0:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 801c4a4:	9801      	ldr	r0, [sp, #4]
 801c4a6:	9900      	ldr	r1, [sp, #0]
 801c4a8:	4798      	blx	r3
 801c4aa:	6823      	ldr	r3, [r4, #0]
 801c4ac:	4628      	mov	r0, r5
 801c4ae:	4798      	blx	r3
 801c4b0:	e014      	b.n	801c4dc <_DispLine+0x80>
 801c4b2:	9900      	ldr	r1, [sp, #0]
 801c4b4:	9801      	ldr	r0, [sp, #4]
 801c4b6:	4798      	blx	r3
 801c4b8:	e010      	b.n	801c4dc <_DispLine+0x80>
 801c4ba:	a801      	add	r0, sp, #4
 801c4bc:	f7fa ffac 	bl	8017418 <GUI_UC__GetCharCodeInc>
 801c4c0:	6823      	ldr	r3, [r4, #0]
 801c4c2:	4606      	mov	r6, r0
 801c4c4:	69db      	ldr	r3, [r3, #28]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	4798      	blx	r3
 801c4ca:	682b      	ldr	r3, [r5, #0]
 801c4cc:	b10b      	cbz	r3, 801c4d2 <_DispLine+0x76>
 801c4ce:	4630      	mov	r0, r6
 801c4d0:	4798      	blx	r3
 801c4d2:	9b00      	ldr	r3, [sp, #0]
 801c4d4:	3b01      	subs	r3, #1
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	9300      	str	r3, [sp, #0]
 801c4da:	daee      	bge.n	801c4ba <_DispLine+0x5e>
 801c4dc:	2000      	movs	r0, #0
 801c4de:	f001 f95b 	bl	801d798 <GUI__ManageCache>
 801c4e2:	b002      	add	sp, #8
 801c4e4:	bd70      	pop	{r4, r5, r6, pc}
 801c4e6:	bf00      	nop
 801c4e8:	2000004c 	.word	0x2000004c
 801c4ec:	20000018 	.word	0x20000018
 801c4f0:	20022478 	.word	0x20022478
 801c4f4:	2002246c 	.word	0x2002246c

0801c4f8 <GUI__GetLineNumChars>:
 801c4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c4fa:	460d      	mov	r5, r1
 801c4fc:	9001      	str	r0, [sp, #4]
 801c4fe:	4604      	mov	r4, r0
 801c500:	b188      	cbz	r0, 801c526 <GUI__GetLineNumChars+0x2e>
 801c502:	4b0a      	ldr	r3, [pc, #40]	; (801c52c <GUI__GetLineNumChars+0x34>)
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	69db      	ldr	r3, [r3, #28]
 801c508:	695c      	ldr	r4, [r3, #20]
 801c50a:	b154      	cbz	r4, 801c522 <GUI__GetLineNumChars+0x2a>
 801c50c:	6864      	ldr	r4, [r4, #4]
 801c50e:	b144      	cbz	r4, 801c522 <GUI__GetLineNumChars+0x2a>
 801c510:	47a0      	blx	r4
 801c512:	e009      	b.n	801c528 <GUI__GetLineNumChars+0x30>
 801c514:	a801      	add	r0, sp, #4
 801c516:	f7fa ff7f 	bl	8017418 <GUI_UC__GetCharCodeInc>
 801c51a:	b120      	cbz	r0, 801c526 <GUI__GetLineNumChars+0x2e>
 801c51c:	280a      	cmp	r0, #10
 801c51e:	d002      	beq.n	801c526 <GUI__GetLineNumChars+0x2e>
 801c520:	3401      	adds	r4, #1
 801c522:	42ac      	cmp	r4, r5
 801c524:	dbf6      	blt.n	801c514 <GUI__GetLineNumChars+0x1c>
 801c526:	4620      	mov	r0, r4
 801c528:	b003      	add	sp, #12
 801c52a:	bd30      	pop	{r4, r5, pc}
 801c52c:	20000018 	.word	0x20000018

0801c530 <GUI__GetOverlap>:
 801c530:	b513      	push	{r0, r1, r4, lr}
 801c532:	2400      	movs	r4, #0
 801c534:	a902      	add	r1, sp, #8
 801c536:	f841 4d04 	str.w	r4, [r1, #-4]!
 801c53a:	f7ff ff79 	bl	801c430 <GUI_GetCharDistXEx>
 801c53e:	9b01      	ldr	r3, [sp, #4]
 801c540:	4298      	cmp	r0, r3
 801c542:	bfb4      	ite	lt
 801c544:	1a18      	sublt	r0, r3, r0
 801c546:	4620      	movge	r0, r4
 801c548:	b002      	add	sp, #8
 801c54a:	bd10      	pop	{r4, pc}

0801c54c <GUI__GetLineDistX>:
 801c54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c54e:	4a15      	ldr	r2, [pc, #84]	; (801c5a4 <GUI__GetLineDistX+0x58>)
 801c550:	ab02      	add	r3, sp, #8
 801c552:	9001      	str	r0, [sp, #4]
 801c554:	f843 1d08 	str.w	r1, [r3, #-8]!
 801c558:	4619      	mov	r1, r3
 801c55a:	6812      	ldr	r2, [r2, #0]
 801c55c:	4790      	blx	r2
 801c55e:	9001      	str	r0, [sp, #4]
 801c560:	b1e8      	cbz	r0, 801c59e <GUI__GetLineDistX+0x52>
 801c562:	4b11      	ldr	r3, [pc, #68]	; (801c5a8 <GUI__GetLineDistX+0x5c>)
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	69db      	ldr	r3, [r3, #28]
 801c568:	695c      	ldr	r4, [r3, #20]
 801c56a:	b10c      	cbz	r4, 801c570 <GUI__GetLineDistX+0x24>
 801c56c:	6824      	ldr	r4, [r4, #0]
 801c56e:	b90c      	cbnz	r4, 801c574 <GUI__GetLineDistX+0x28>
 801c570:	4625      	mov	r5, r4
 801c572:	e002      	b.n	801c57a <GUI__GetLineDistX+0x2e>
 801c574:	9900      	ldr	r1, [sp, #0]
 801c576:	47a0      	blx	r4
 801c578:	e011      	b.n	801c59e <GUI__GetLineDistX+0x52>
 801c57a:	9b00      	ldr	r3, [sp, #0]
 801c57c:	3b01      	subs	r3, #1
 801c57e:	2b00      	cmp	r3, #0
 801c580:	9300      	str	r3, [sp, #0]
 801c582:	db07      	blt.n	801c594 <GUI__GetLineDistX+0x48>
 801c584:	a801      	add	r0, sp, #4
 801c586:	f7fa ff47 	bl	8017418 <GUI_UC__GetCharCodeInc>
 801c58a:	4604      	mov	r4, r0
 801c58c:	f7ff ff3e 	bl	801c40c <GUI_GetCharDistX>
 801c590:	4405      	add	r5, r0
 801c592:	e7f2      	b.n	801c57a <GUI__GetLineDistX+0x2e>
 801c594:	4620      	mov	r0, r4
 801c596:	f7ff ffcb 	bl	801c530 <GUI__GetOverlap>
 801c59a:	4428      	add	r0, r5
 801c59c:	e7ff      	b.n	801c59e <GUI__GetLineDistX+0x52>
 801c59e:	b003      	add	sp, #12
 801c5a0:	bd30      	pop	{r4, r5, pc}
 801c5a2:	bf00      	nop
 801c5a4:	2000004c 	.word	0x2000004c
 801c5a8:	20000018 	.word	0x20000018

0801c5ac <GUI__DispLine>:
 801c5ac:	4b27      	ldr	r3, [pc, #156]	; (801c64c <GUI__DispLine+0xa0>)
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c5b2:	4605      	mov	r5, r0
 801c5b4:	460e      	mov	r6, r1
 801c5b6:	b163      	cbz	r3, 801c5d2 <GUI__DispLine+0x26>
 801c5b8:	2000      	movs	r0, #0
 801c5ba:	f7fe fd9b 	bl	801b0f4 <WM__InitIVRSearch>
 801c5be:	2800      	cmp	r0, #0
 801c5c0:	d041      	beq.n	801c646 <GUI__DispLine+0x9a>
 801c5c2:	466a      	mov	r2, sp
 801c5c4:	4631      	mov	r1, r6
 801c5c6:	4628      	mov	r0, r5
 801c5c8:	f7ff ff48 	bl	801c45c <_DispLine>
 801c5cc:	f7fe fcd0 	bl	801af70 <WM__GetNextIVR>
 801c5d0:	e7f5      	b.n	801c5be <GUI__DispLine+0x12>
 801c5d2:	4c1f      	ldr	r4, [pc, #124]	; (801c650 <GUI__DispLine+0xa4>)
 801c5d4:	466b      	mov	r3, sp
 801c5d6:	6810      	ldr	r0, [r2, #0]
 801c5d8:	6851      	ldr	r1, [r2, #4]
 801c5da:	6822      	ldr	r2, [r4, #0]
 801c5dc:	c303      	stmia	r3!, {r0, r1}
 801c5de:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 801c5e2:	f8bd 3000 	ldrh.w	r3, [sp]
 801c5e6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 801c5ea:	443b      	add	r3, r7
 801c5ec:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801c5f0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c5f4:	f8ad 3000 	strh.w	r3, [sp]
 801c5f8:	4401      	add	r1, r0
 801c5fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c5fe:	443a      	add	r2, r7
 801c600:	f8ad 1002 	strh.w	r1, [sp, #2]
 801c604:	4403      	add	r3, r0
 801c606:	4668      	mov	r0, sp
 801c608:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c60c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c610:	f7fe fd70 	bl	801b0f4 <WM__InitIVRSearch>
 801c614:	6823      	ldr	r3, [r4, #0]
 801c616:	b940      	cbnz	r0, 801c62a <GUI__DispLine+0x7e>
 801c618:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801c61a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801c61c:	1a52      	subs	r2, r2, r1
 801c61e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801c620:	845a      	strh	r2, [r3, #34]	; 0x22
 801c622:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801c624:	1a52      	subs	r2, r2, r1
 801c626:	849a      	strh	r2, [r3, #36]	; 0x24
 801c628:	e00d      	b.n	801c646 <GUI__DispLine+0x9a>
 801c62a:	f8bd 2000 	ldrh.w	r2, [sp]
 801c62e:	4631      	mov	r1, r6
 801c630:	4628      	mov	r0, r5
 801c632:	845a      	strh	r2, [r3, #34]	; 0x22
 801c634:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c638:	849a      	strh	r2, [r3, #36]	; 0x24
 801c63a:	466a      	mov	r2, sp
 801c63c:	f7ff ff0e 	bl	801c45c <_DispLine>
 801c640:	f7fe fc96 	bl	801af70 <WM__GetNextIVR>
 801c644:	e7e6      	b.n	801c614 <GUI__DispLine+0x68>
 801c646:	b003      	add	sp, #12
 801c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c64a:	bf00      	nop
 801c64c:	20022458 	.word	0x20022458
 801c650:	20000018 	.word	0x20000018

0801c654 <GUIMONO_DispChar>:
 801c654:	4b4d      	ldr	r3, [pc, #308]	; (801c78c <GUIMONO_DispChar+0x138>)
 801c656:	681a      	ldr	r2, [r3, #0]
 801c658:	69d1      	ldr	r1, [r2, #28]
 801c65a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65e:	69cc      	ldr	r4, [r1, #28]
 801c660:	b08b      	sub	sp, #44	; 0x2c
 801c662:	89a3      	ldrh	r3, [r4, #12]
 801c664:	4283      	cmp	r3, r0
 801c666:	d808      	bhi.n	801c67a <GUIMONO_DispChar+0x26>
 801c668:	89e5      	ldrh	r5, [r4, #14]
 801c66a:	4285      	cmp	r5, r0
 801c66c:	d305      	bcc.n	801c67a <GUIMONO_DispChar+0x26>
 801c66e:	6825      	ldr	r5, [r4, #0]
 801c670:	1ac3      	subs	r3, r0, r3
 801c672:	f04f 36ff 	mov.w	r6, #4294967295
 801c676:	9506      	str	r5, [sp, #24]
 801c678:	e013      	b.n	801c6a2 <GUIMONO_DispChar+0x4e>
 801c67a:	68a3      	ldr	r3, [r4, #8]
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d07c      	beq.n	801c77a <GUIMONO_DispChar+0x126>
 801c680:	881d      	ldrh	r5, [r3, #0]
 801c682:	42a8      	cmp	r0, r5
 801c684:	d379      	bcc.n	801c77a <GUIMONO_DispChar+0x126>
 801c686:	885e      	ldrh	r6, [r3, #2]
 801c688:	4286      	cmp	r6, r0
 801c68a:	d376      	bcc.n	801c77a <GUIMONO_DispChar+0x126>
 801c68c:	1b40      	subs	r0, r0, r5
 801c68e:	685b      	ldr	r3, [r3, #4]
 801c690:	6866      	ldr	r6, [r4, #4]
 801c692:	b280      	uxth	r0, r0
 801c694:	9606      	str	r6, [sp, #24]
 801c696:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 801c69a:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 801c69e:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 801c6a2:	1c58      	adds	r0, r3, #1
 801c6a4:	9309      	str	r3, [sp, #36]	; 0x24
 801c6a6:	d068      	beq.n	801c77a <GUIMONO_DispChar+0x126>
 801c6a8:	f891 b018 	ldrb.w	fp, [r1, #24]
 801c6ac:	7ca1      	ldrb	r1, [r4, #18]
 801c6ae:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 801c6b2:	fb1b f301 	smulbb	r3, fp, r1
 801c6b6:	4d35      	ldr	r5, [pc, #212]	; (801c78c <GUIMONO_DispChar+0x138>)
 801c6b8:	4648      	mov	r0, r9
 801c6ba:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 801c6be:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 801c6c2:	9307      	str	r3, [sp, #28]
 801c6c4:	f894 a010 	ldrb.w	sl, [r4, #16]
 801c6c8:	f7fb fa02 	bl	8017ad0 <LCD_SetDrawMode>
 801c6cc:	6829      	ldr	r1, [r5, #0]
 801c6ce:	9b07      	ldr	r3, [sp, #28]
 801c6d0:	69ca      	ldr	r2, [r1, #28]
 801c6d2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801c6d4:	9008      	str	r0, [sp, #32]
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	9105      	str	r1, [sp, #20]
 801c6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6dc:	9906      	ldr	r1, [sp, #24]
 801c6de:	fb00 1003 	mla	r0, r0, r3, r1
 801c6e2:	4641      	mov	r1, r8
 801c6e4:	9004      	str	r0, [sp, #16]
 801c6e6:	4638      	mov	r0, r7
 801c6e8:	7ca3      	ldrb	r3, [r4, #18]
 801c6ea:	9303      	str	r3, [sp, #12]
 801c6ec:	2301      	movs	r3, #1
 801c6ee:	9302      	str	r3, [sp, #8]
 801c6f0:	7ed3      	ldrb	r3, [r2, #27]
 801c6f2:	9301      	str	r3, [sp, #4]
 801c6f4:	7e93      	ldrb	r3, [r2, #26]
 801c6f6:	4652      	mov	r2, sl
 801c6f8:	9300      	str	r3, [sp, #0]
 801c6fa:	465b      	mov	r3, fp
 801c6fc:	f7fb fb5e 	bl	8017dbc <LCD_DrawBitmap>
 801c700:	1c73      	adds	r3, r6, #1
 801c702:	d01a      	beq.n	801c73a <GUIMONO_DispChar+0xe6>
 801c704:	f049 0002 	orr.w	r0, r9, #2
 801c708:	f7fb f9e2 	bl	8017ad0 <LCD_SetDrawMode>
 801c70c:	682a      	ldr	r2, [r5, #0]
 801c70e:	9906      	ldr	r1, [sp, #24]
 801c710:	4638      	mov	r0, r7
 801c712:	69d3      	ldr	r3, [r2, #28]
 801c714:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c716:	9205      	str	r2, [sp, #20]
 801c718:	9a07      	ldr	r2, [sp, #28]
 801c71a:	fb02 1606 	mla	r6, r2, r6, r1
 801c71e:	4641      	mov	r1, r8
 801c720:	9604      	str	r6, [sp, #16]
 801c722:	7ca2      	ldrb	r2, [r4, #18]
 801c724:	9203      	str	r2, [sp, #12]
 801c726:	2201      	movs	r2, #1
 801c728:	9202      	str	r2, [sp, #8]
 801c72a:	7eda      	ldrb	r2, [r3, #27]
 801c72c:	9201      	str	r2, [sp, #4]
 801c72e:	4652      	mov	r2, sl
 801c730:	7e9b      	ldrb	r3, [r3, #26]
 801c732:	9300      	str	r3, [sp, #0]
 801c734:	465b      	mov	r3, fp
 801c736:	f7fb fb41 	bl	8017dbc <LCD_DrawBitmap>
 801c73a:	682b      	ldr	r3, [r5, #0]
 801c73c:	69db      	ldr	r3, [r3, #28]
 801c73e:	7e5a      	ldrb	r2, [r3, #25]
 801c740:	7e1b      	ldrb	r3, [r3, #24]
 801c742:	429a      	cmp	r2, r3
 801c744:	d915      	bls.n	801c772 <GUIMONO_DispChar+0x11e>
 801c746:	f1b9 0f02 	cmp.w	r9, #2
 801c74a:	d012      	beq.n	801c772 <GUIMONO_DispChar+0x11e>
 801c74c:	f089 0004 	eor.w	r0, r9, #4
 801c750:	f7fb f9be 	bl	8017ad0 <LCD_SetDrawMode>
 801c754:	4b0d      	ldr	r3, [pc, #52]	; (801c78c <GUIMONO_DispChar+0x138>)
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	69db      	ldr	r3, [r3, #28]
 801c75a:	7e18      	ldrb	r0, [r3, #24]
 801c75c:	7ed9      	ldrb	r1, [r3, #27]
 801c75e:	7e9a      	ldrb	r2, [r3, #26]
 801c760:	7e5b      	ldrb	r3, [r3, #25]
 801c762:	fb00 8101 	mla	r1, r0, r1, r8
 801c766:	fb0a 7202 	mla	r2, sl, r2, r7
 801c76a:	4638      	mov	r0, r7
 801c76c:	4443      	add	r3, r8
 801c76e:	f7fb fa0d 	bl	8017b8c <LCD_FillRect>
 801c772:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801c776:	f7fb f9ab 	bl	8017ad0 <LCD_SetDrawMode>
 801c77a:	4b04      	ldr	r3, [pc, #16]	; (801c78c <GUIMONO_DispChar+0x138>)
 801c77c:	7c61      	ldrb	r1, [r4, #17]
 801c77e:	681a      	ldr	r2, [r3, #0]
 801c780:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 801c782:	440b      	add	r3, r1
 801c784:	8453      	strh	r3, [r2, #34]	; 0x22
 801c786:	b00b      	add	sp, #44	; 0x2c
 801c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c78c:	20000018 	.word	0x20000018

0801c790 <GUIMONO_GetCharDistX>:
 801c790:	4b04      	ldr	r3, [pc, #16]	; (801c7a4 <GUIMONO_GetCharDistX+0x14>)
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	69db      	ldr	r3, [r3, #28]
 801c796:	69db      	ldr	r3, [r3, #28]
 801c798:	b109      	cbz	r1, 801c79e <GUIMONO_GetCharDistX+0xe>
 801c79a:	7c1a      	ldrb	r2, [r3, #16]
 801c79c:	600a      	str	r2, [r1, #0]
 801c79e:	7c58      	ldrb	r0, [r3, #17]
 801c7a0:	4770      	bx	lr
 801c7a2:	bf00      	nop
 801c7a4:	20000018 	.word	0x20000018

0801c7a8 <GUIMONO_GetFontInfo>:
 801c7a8:	2302      	movs	r3, #2
 801c7aa:	800b      	strh	r3, [r1, #0]
 801c7ac:	4770      	bx	lr

0801c7ae <GUIMONO_IsInFont>:
 801c7ae:	69c3      	ldr	r3, [r0, #28]
 801c7b0:	899a      	ldrh	r2, [r3, #12]
 801c7b2:	428a      	cmp	r2, r1
 801c7b4:	d802      	bhi.n	801c7bc <GUIMONO_IsInFont+0xe>
 801c7b6:	89da      	ldrh	r2, [r3, #14]
 801c7b8:	428a      	cmp	r2, r1
 801c7ba:	d20f      	bcs.n	801c7dc <GUIMONO_IsInFont+0x2e>
 801c7bc:	6898      	ldr	r0, [r3, #8]
 801c7be:	b180      	cbz	r0, 801c7e2 <GUIMONO_IsInFont+0x34>
 801c7c0:	8803      	ldrh	r3, [r0, #0]
 801c7c2:	4299      	cmp	r1, r3
 801c7c4:	d30c      	bcc.n	801c7e0 <GUIMONO_IsInFont+0x32>
 801c7c6:	8842      	ldrh	r2, [r0, #2]
 801c7c8:	428a      	cmp	r2, r1
 801c7ca:	d309      	bcc.n	801c7e0 <GUIMONO_IsInFont+0x32>
 801c7cc:	1ac9      	subs	r1, r1, r3
 801c7ce:	6843      	ldr	r3, [r0, #4]
 801c7d0:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 801c7d4:	43c0      	mvns	r0, r0
 801c7d6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801c7da:	4770      	bx	lr
 801c7dc:	2001      	movs	r0, #1
 801c7de:	4770      	bx	lr
 801c7e0:	2000      	movs	r0, #0
 801c7e2:	4770      	bx	lr

0801c7e4 <GUIPROP__FindChar>:
 801c7e4:	b138      	cbz	r0, 801c7f6 <GUIPROP__FindChar+0x12>
 801c7e6:	8803      	ldrh	r3, [r0, #0]
 801c7e8:	428b      	cmp	r3, r1
 801c7ea:	d802      	bhi.n	801c7f2 <GUIPROP__FindChar+0xe>
 801c7ec:	8843      	ldrh	r3, [r0, #2]
 801c7ee:	428b      	cmp	r3, r1
 801c7f0:	d201      	bcs.n	801c7f6 <GUIPROP__FindChar+0x12>
 801c7f2:	6880      	ldr	r0, [r0, #8]
 801c7f4:	e7f6      	b.n	801c7e4 <GUIPROP__FindChar>
 801c7f6:	4770      	bx	lr

0801c7f8 <GUIPROP_DispChar>:
 801c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7fc:	4c38      	ldr	r4, [pc, #224]	; (801c8e0 <GUIPROP_DispChar+0xe8>)
 801c7fe:	b089      	sub	sp, #36	; 0x24
 801c800:	4606      	mov	r6, r0
 801c802:	4601      	mov	r1, r0
 801c804:	6823      	ldr	r3, [r4, #0]
 801c806:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 801c80a:	69db      	ldr	r3, [r3, #28]
 801c80c:	69d8      	ldr	r0, [r3, #28]
 801c80e:	f7ff ffe9 	bl	801c7e4 <GUIPROP__FindChar>
 801c812:	2800      	cmp	r0, #0
 801c814:	d060      	beq.n	801c8d8 <GUIPROP_DispChar+0xe0>
 801c816:	8805      	ldrh	r5, [r0, #0]
 801c818:	6847      	ldr	r7, [r0, #4]
 801c81a:	4640      	mov	r0, r8
 801c81c:	1b75      	subs	r5, r6, r5
 801c81e:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 801c822:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c826:	f7fb f953 	bl	8017ad0 <LCD_SetDrawMode>
 801c82a:	f8d4 c000 	ldr.w	ip, [r4]
 801c82e:	4681      	mov	r9, r0
 801c830:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 801c834:	f8dc e01c 	ldr.w	lr, [ip, #28]
 801c838:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 801c83c:	f89e b018 	ldrb.w	fp, [lr, #24]
 801c840:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 801c844:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 801c848:	f04f 0c01 	mov.w	ip, #1
 801c84c:	9305      	str	r3, [sp, #20]
 801c84e:	6873      	ldr	r3, [r6, #4]
 801c850:	f8cd a00c 	str.w	sl, [sp, #12]
 801c854:	9304      	str	r3, [sp, #16]
 801c856:	465b      	mov	r3, fp
 801c858:	f8cd c008 	str.w	ip, [sp, #8]
 801c85c:	f89e c01b 	ldrb.w	ip, [lr, #27]
 801c860:	f8cd c004 	str.w	ip, [sp, #4]
 801c864:	f89e e01a 	ldrb.w	lr, [lr, #26]
 801c868:	f8cd e000 	str.w	lr, [sp]
 801c86c:	f7fb faa6 	bl	8017dbc <LCD_DrawBitmap>
 801c870:	6823      	ldr	r3, [r4, #0]
 801c872:	69db      	ldr	r3, [r3, #28]
 801c874:	7e59      	ldrb	r1, [r3, #25]
 801c876:	f893 a018 	ldrb.w	sl, [r3, #24]
 801c87a:	9107      	str	r1, [sp, #28]
 801c87c:	4551      	cmp	r1, sl
 801c87e:	d920      	bls.n	801c8c2 <GUIPROP_DispChar+0xca>
 801c880:	f1b8 0f02 	cmp.w	r8, #2
 801c884:	d01d      	beq.n	801c8c2 <GUIPROP_DispChar+0xca>
 801c886:	f893 b01b 	ldrb.w	fp, [r3, #27]
 801c88a:	f7f9 fe4e 	bl	801652a <GUI_GetColor>
 801c88e:	4680      	mov	r8, r0
 801c890:	f7f9 fe3f 	bl	8016512 <GUI_GetBkColor>
 801c894:	f7f9 ffa2 	bl	80167dc <GUI_SetColor>
 801c898:	6823      	ldr	r3, [r4, #0]
 801c89a:	9907      	ldr	r1, [sp, #28]
 801c89c:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 801c8a0:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 801c8a4:	69db      	ldr	r3, [r3, #28]
 801c8a6:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 801c8aa:	7eda      	ldrb	r2, [r3, #27]
 801c8ac:	fb0b e301 	mla	r3, fp, r1, lr
 801c8b0:	fb0b e10a 	mla	r1, fp, sl, lr
 801c8b4:	fb05 0202 	mla	r2, r5, r2, r0
 801c8b8:	f7fb f968 	bl	8017b8c <LCD_FillRect>
 801c8bc:	4640      	mov	r0, r8
 801c8be:	f7f9 ff8d 	bl	80167dc <GUI_SetColor>
 801c8c2:	4648      	mov	r0, r9
 801c8c4:	f7fb f904 	bl	8017ad0 <LCD_SetDrawMode>
 801c8c8:	6823      	ldr	r3, [r4, #0]
 801c8ca:	7871      	ldrb	r1, [r6, #1]
 801c8cc:	69da      	ldr	r2, [r3, #28]
 801c8ce:	7e90      	ldrb	r0, [r2, #26]
 801c8d0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801c8d2:	fb00 2201 	mla	r2, r0, r1, r2
 801c8d6:	845a      	strh	r2, [r3, #34]	; 0x22
 801c8d8:	b009      	add	sp, #36	; 0x24
 801c8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8de:	bf00      	nop
 801c8e0:	20000018 	.word	0x20000018

0801c8e4 <GUIPROP_GetCharDistX>:
 801c8e4:	b538      	push	{r3, r4, r5, lr}
 801c8e6:	4b0d      	ldr	r3, [pc, #52]	; (801c91c <GUIPROP_GetCharDistX+0x38>)
 801c8e8:	4602      	mov	r2, r0
 801c8ea:	460c      	mov	r4, r1
 801c8ec:	4601      	mov	r1, r0
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	69dd      	ldr	r5, [r3, #28]
 801c8f2:	69e8      	ldr	r0, [r5, #28]
 801c8f4:	f7ff ff76 	bl	801c7e4 <GUIPROP__FindChar>
 801c8f8:	b170      	cbz	r0, 801c918 <GUIPROP_GetCharDistX+0x34>
 801c8fa:	8803      	ldrh	r3, [r0, #0]
 801c8fc:	1ad2      	subs	r2, r2, r3
 801c8fe:	6843      	ldr	r3, [r0, #4]
 801c900:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801c904:	7848      	ldrb	r0, [r1, #1]
 801c906:	7ea9      	ldrb	r1, [r5, #26]
 801c908:	fb10 f001 	smulbb	r0, r0, r1
 801c90c:	b124      	cbz	r4, 801c918 <GUIPROP_GetCharDistX+0x34>
 801c90e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 801c912:	fb11 f303 	smulbb	r3, r1, r3
 801c916:	6023      	str	r3, [r4, #0]
 801c918:	bd38      	pop	{r3, r4, r5, pc}
 801c91a:	bf00      	nop
 801c91c:	20000018 	.word	0x20000018

0801c920 <GUIPROP_GetFontInfo>:
 801c920:	2301      	movs	r3, #1
 801c922:	800b      	strh	r3, [r1, #0]
 801c924:	4770      	bx	lr

0801c926 <GUIPROP_IsInFont>:
 801c926:	b508      	push	{r3, lr}
 801c928:	69c0      	ldr	r0, [r0, #28]
 801c92a:	f7ff ff5b 	bl	801c7e4 <GUIPROP__FindChar>
 801c92e:	3000      	adds	r0, #0
 801c930:	bf18      	it	ne
 801c932:	2001      	movne	r0, #1
 801c934:	bd08      	pop	{r3, pc}
	...

0801c938 <GUI_CURSOR_SetPositionEx>:
 801c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c93a:	4614      	mov	r4, r2
 801c93c:	4606      	mov	r6, r0
 801c93e:	460d      	mov	r5, r1
 801c940:	f7fa fc9a 	bl	8017278 <GUI_Lock>
 801c944:	4620      	mov	r0, r4
 801c946:	4f16      	ldr	r7, [pc, #88]	; (801c9a0 <GUI_CURSOR_SetPositionEx+0x68>)
 801c948:	f7fa fbf2 	bl	8017130 <GUI_GetCursorLayer>
 801c94c:	2314      	movs	r3, #20
 801c94e:	b148      	cbz	r0, 801c964 <GUI_CURSOR_SetPositionEx+0x2c>
 801c950:	fb03 7404 	mla	r4, r3, r4, r7
 801c954:	6863      	ldr	r3, [r4, #4]
 801c956:	689a      	ldr	r2, [r3, #8]
 801c958:	6859      	ldr	r1, [r3, #4]
 801c95a:	1aaa      	subs	r2, r5, r2
 801c95c:	1a71      	subs	r1, r6, r1
 801c95e:	f7fa fc21 	bl	80171a4 <GUI_SetLayerPosEx>
 801c962:	e018      	b.n	801c996 <GUI_CURSOR_SetPositionEx+0x5e>
 801c964:	fb03 7304 	mla	r3, r3, r4, r7
 801c968:	68da      	ldr	r2, [r3, #12]
 801c96a:	42b2      	cmp	r2, r6
 801c96c:	d102      	bne.n	801c974 <GUI_CURSOR_SetPositionEx+0x3c>
 801c96e:	691b      	ldr	r3, [r3, #16]
 801c970:	42ab      	cmp	r3, r5
 801c972:	d010      	beq.n	801c996 <GUI_CURSOR_SetPositionEx+0x5e>
 801c974:	2314      	movs	r3, #20
 801c976:	fb03 7304 	mla	r3, r3, r4, r7
 801c97a:	6958      	ldr	r0, [r3, #20]
 801c97c:	b130      	cbz	r0, 801c98c <GUI_CURSOR_SetPositionEx+0x54>
 801c97e:	685b      	ldr	r3, [r3, #4]
 801c980:	689a      	ldr	r2, [r3, #8]
 801c982:	6859      	ldr	r1, [r3, #4]
 801c984:	1aaa      	subs	r2, r5, r2
 801c986:	1a71      	subs	r1, r6, r1
 801c988:	f000 f9f6 	bl	801cd78 <GUI_SPRITE_SetPosition>
 801c98c:	2314      	movs	r3, #20
 801c98e:	fb03 7404 	mla	r4, r3, r4, r7
 801c992:	60e6      	str	r6, [r4, #12]
 801c994:	6125      	str	r5, [r4, #16]
 801c996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c99a:	f7fa bc63 	b.w	8017264 <GUI_Unlock>
 801c99e:	bf00      	nop
 801c9a0:	20000360 	.word	0x20000360

0801c9a4 <_OnExit>:
 801c9a4:	4b03      	ldr	r3, [pc, #12]	; (801c9b4 <_OnExit+0x10>)
 801c9a6:	4a04      	ldr	r2, [pc, #16]	; (801c9b8 <_OnExit+0x14>)
 801c9a8:	6013      	str	r3, [r2, #0]
 801c9aa:	6053      	str	r3, [r2, #4]
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	649a      	str	r2, [r3, #72]	; 0x48
 801c9b0:	64da      	str	r2, [r3, #76]	; 0x4c
 801c9b2:	4770      	bx	lr
 801c9b4:	200003ac 	.word	0x200003ac
 801c9b8:	20000050 	.word	0x20000050

0801c9bc <GUI_PID_GetState>:
 801c9bc:	4a11      	ldr	r2, [pc, #68]	; (801ca04 <GUI_PID_GetState+0x48>)
 801c9be:	6813      	ldr	r3, [r2, #0]
 801c9c0:	6851      	ldr	r1, [r2, #4]
 801c9c2:	428b      	cmp	r3, r1
 801c9c4:	b570      	push	{r4, r5, r6, lr}
 801c9c6:	4604      	mov	r4, r0
 801c9c8:	4616      	mov	r6, r2
 801c9ca:	4d0f      	ldr	r5, [pc, #60]	; (801ca08 <GUI_PID_GetState+0x4c>)
 801c9cc:	d109      	bne.n	801c9e2 <GUI_PID_GetState+0x26>
 801c9ce:	42ab      	cmp	r3, r5
 801c9d0:	bf0a      	itet	eq
 801c9d2:	333c      	addeq	r3, #60	; 0x3c
 801c9d4:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 801c9d8:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 801c9dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c9e0:	e00a      	b.n	801c9f8 <GUI_PID_GetState+0x3c>
 801c9e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c9ea:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 801c9ee:	4293      	cmp	r3, r2
 801c9f0:	bf18      	it	ne
 801c9f2:	f103 050c 	addne.w	r5, r3, #12
 801c9f6:	6035      	str	r5, [r6, #0]
 801c9f8:	7a20      	ldrb	r0, [r4, #8]
 801c9fa:	3000      	adds	r0, #0
 801c9fc:	bf18      	it	ne
 801c9fe:	2001      	movne	r0, #1
 801ca00:	bd70      	pop	{r4, r5, r6, pc}
 801ca02:	bf00      	nop
 801ca04:	20000050 	.word	0x20000050
 801ca08:	200003ac 	.word	0x200003ac

0801ca0c <GUI_PID_StoreState>:
 801ca0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca0e:	4c27      	ldr	r4, [pc, #156]	; (801caac <GUI_PID_StoreState+0xa0>)
 801ca10:	b085      	sub	sp, #20
 801ca12:	4606      	mov	r6, r0
 801ca14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801ca16:	b92b      	cbnz	r3, 801ca24 <GUI_PID_StoreState+0x18>
 801ca18:	4620      	mov	r0, r4
 801ca1a:	4b25      	ldr	r3, [pc, #148]	; (801cab0 <GUI_PID_StoreState+0xa4>)
 801ca1c:	f840 3f50 	str.w	r3, [r0, #80]!
 801ca20:	f7fa f930 	bl	8016c84 <GUI__RegisterExit>
 801ca24:	4a23      	ldr	r2, [pc, #140]	; (801cab4 <GUI_PID_StoreState+0xa8>)
 801ca26:	ad01      	add	r5, sp, #4
 801ca28:	4b23      	ldr	r3, [pc, #140]	; (801cab8 <GUI_PID_StoreState+0xac>)
 801ca2a:	601a      	str	r2, [r3, #0]
 801ca2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801ca2e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ca32:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801ca36:	b10b      	cbz	r3, 801ca3c <GUI_PID_StoreState+0x30>
 801ca38:	4628      	mov	r0, r5
 801ca3a:	4798      	blx	r3
 801ca3c:	4e1f      	ldr	r6, [pc, #124]	; (801cabc <GUI_PID_StoreState+0xb0>)
 801ca3e:	f8df e080 	ldr.w	lr, [pc, #128]	; 801cac0 <GUI_PID_StoreState+0xb4>
 801ca42:	6837      	ldr	r7, [r6, #0]
 801ca44:	6873      	ldr	r3, [r6, #4]
 801ca46:	429f      	cmp	r7, r3
 801ca48:	d017      	beq.n	801ca7a <GUI_PID_StoreState+0x6e>
 801ca4a:	42a3      	cmp	r3, r4
 801ca4c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 801ca50:	bf14      	ite	ne
 801ca52:	f1a3 020c 	subne.w	r2, r3, #12
 801ca56:	4672      	moveq	r2, lr
 801ca58:	7a10      	ldrb	r0, [r2, #8]
 801ca5a:	4288      	cmp	r0, r1
 801ca5c:	d10d      	bne.n	801ca7a <GUI_PID_StoreState+0x6e>
 801ca5e:	4297      	cmp	r7, r2
 801ca60:	d00b      	beq.n	801ca7a <GUI_PID_StoreState+0x6e>
 801ca62:	42a2      	cmp	r2, r4
 801ca64:	bf14      	ite	ne
 801ca66:	3a0c      	subne	r2, #12
 801ca68:	4a15      	ldreq	r2, [pc, #84]	; (801cac0 <GUI_PID_StoreState+0xb4>)
 801ca6a:	7a12      	ldrb	r2, [r2, #8]
 801ca6c:	428a      	cmp	r2, r1
 801ca6e:	d104      	bne.n	801ca7a <GUI_PID_StoreState+0x6e>
 801ca70:	42a3      	cmp	r3, r4
 801ca72:	bf14      	ite	ne
 801ca74:	3b0c      	subne	r3, #12
 801ca76:	4b12      	ldreq	r3, [pc, #72]	; (801cac0 <GUI_PID_StoreState+0xb4>)
 801ca78:	6073      	str	r3, [r6, #4]
 801ca7a:	6873      	ldr	r3, [r6, #4]
 801ca7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ca80:	4573      	cmp	r3, lr
 801ca82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ca86:	bf14      	ite	ne
 801ca88:	330c      	addne	r3, #12
 801ca8a:	4b08      	ldreq	r3, [pc, #32]	; (801caac <GUI_PID_StoreState+0xa0>)
 801ca8c:	429f      	cmp	r7, r3
 801ca8e:	6073      	str	r3, [r6, #4]
 801ca90:	d104      	bne.n	801ca9c <GUI_PID_StoreState+0x90>
 801ca92:	4577      	cmp	r7, lr
 801ca94:	bf14      	ite	ne
 801ca96:	370c      	addne	r7, #12
 801ca98:	4f04      	ldreq	r7, [pc, #16]	; (801caac <GUI_PID_StoreState+0xa0>)
 801ca9a:	6037      	str	r7, [r6, #0]
 801ca9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801ca9e:	b10b      	cbz	r3, 801caa4 <GUI_PID_StoreState+0x98>
 801caa0:	4628      	mov	r0, r5
 801caa2:	4798      	blx	r3
 801caa4:	f7fa fce8 	bl	8017478 <GUI_SignalEvent>
 801caa8:	b005      	add	sp, #20
 801caaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801caac:	200003ac 	.word	0x200003ac
 801cab0:	0801c9a5 	.word	0x0801c9a5
 801cab4:	0801bc69 	.word	0x0801bc69
 801cab8:	200224a8 	.word	0x200224a8
 801cabc:	20000050 	.word	0x20000050
 801cac0:	200003e8 	.word	0x200003e8

0801cac4 <GUI_PID_IsEmpty>:
 801cac4:	4b02      	ldr	r3, [pc, #8]	; (801cad0 <GUI_PID_IsEmpty+0xc>)
 801cac6:	cb09      	ldmia	r3, {r0, r3}
 801cac8:	1ac3      	subs	r3, r0, r3
 801caca:	4258      	negs	r0, r3
 801cacc:	4158      	adcs	r0, r3
 801cace:	4770      	bx	lr
 801cad0:	20000050 	.word	0x20000050

0801cad4 <_CreateBuffer>:
 801cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cad6:	6943      	ldr	r3, [r0, #20]
 801cad8:	4605      	mov	r5, r0
 801cada:	460e      	mov	r6, r1
 801cadc:	8818      	ldrh	r0, [r3, #0]
 801cade:	300d      	adds	r0, #13
 801cae0:	0080      	lsls	r0, r0, #2
 801cae2:	f7f9 fcc3 	bl	801646c <GUI_ALLOC_AllocNoInit>
 801cae6:	4607      	mov	r7, r0
 801cae8:	b908      	cbnz	r0, 801caee <_CreateBuffer+0x1a>
 801caea:	2000      	movs	r0, #0
 801caec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801caee:	f7f9 fae3 	bl	80160b8 <GUI_ALLOC_LockH>
 801caf2:	682b      	ldr	r3, [r5, #0]
 801caf4:	4604      	mov	r4, r0
 801caf6:	6998      	ldr	r0, [r3, #24]
 801caf8:	f7fa f8ea 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	d0f4      	beq.n	801caea <_CreateBuffer+0x16>
 801cb00:	68c3      	ldr	r3, [r0, #12]
 801cb02:	2108      	movs	r1, #8
 801cb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb06:	4798      	blx	r3
 801cb08:	2802      	cmp	r0, #2
 801cb0a:	dd0b      	ble.n	801cb24 <_CreateBuffer+0x50>
 801cb0c:	2804      	cmp	r0, #4
 801cb0e:	dd06      	ble.n	801cb1e <_CreateBuffer+0x4a>
 801cb10:	2808      	cmp	r0, #8
 801cb12:	dd06      	ble.n	801cb22 <_CreateBuffer+0x4e>
 801cb14:	2810      	cmp	r0, #16
 801cb16:	bfcc      	ite	gt
 801cb18:	2020      	movgt	r0, #32
 801cb1a:	2010      	movle	r0, #16
 801cb1c:	e002      	b.n	801cb24 <_CreateBuffer+0x50>
 801cb1e:	2004      	movs	r0, #4
 801cb20:	e000      	b.n	801cb24 <_CreateBuffer+0x50>
 801cb22:	2008      	movs	r0, #8
 801cb24:	2808      	cmp	r0, #8
 801cb26:	61a0      	str	r0, [r4, #24]
 801cb28:	dd04      	ble.n	801cb34 <_CreateBuffer+0x60>
 801cb2a:	2811      	cmp	r0, #17
 801cb2c:	bfb4      	ite	lt
 801cb2e:	2202      	movlt	r2, #2
 801cb30:	2204      	movge	r2, #4
 801cb32:	e000      	b.n	801cb36 <_CreateBuffer+0x62>
 801cb34:	2201      	movs	r2, #1
 801cb36:	696b      	ldr	r3, [r5, #20]
 801cb38:	6122      	str	r2, [r4, #16]
 801cb3a:	881b      	ldrh	r3, [r3, #0]
 801cb3c:	61e3      	str	r3, [r4, #28]
 801cb3e:	4353      	muls	r3, r2
 801cb40:	6163      	str	r3, [r4, #20]
 801cb42:	f7f9 fbe3 	bl	801630c <GUI_ALLOC_GetMaxSize>
 801cb46:	6963      	ldr	r3, [r4, #20]
 801cb48:	2200      	movs	r2, #0
 801cb4a:	60a7      	str	r7, [r4, #8]
 801cb4c:	4298      	cmp	r0, r3
 801cb4e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801cb52:	60e2      	str	r2, [r4, #12]
 801cb54:	bfb8      	it	lt
 801cb56:	6160      	strlt	r0, [r4, #20]
 801cb58:	2e01      	cmp	r6, #1
 801cb5a:	6023      	str	r3, [r4, #0]
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	bf18      	it	ne
 801cb60:	69e2      	ldrne	r2, [r4, #28]
 801cb62:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 801cb66:	bf1e      	ittt	ne
 801cb68:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 801cb6c:	f102 32ff 	addne.w	r2, r2, #4294967295
 801cb70:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 801cb74:	6063      	str	r3, [r4, #4]
 801cb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cb78 <_GetBkIndex.isra.0>:
 801cb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb7c:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 801cb80:	4607      	mov	r7, r0
 801cb82:	4688      	mov	r8, r1
 801cb84:	4691      	mov	r9, r2
 801cb86:	4286      	cmp	r6, r0
 801cb88:	461c      	mov	r4, r3
 801cb8a:	dd04      	ble.n	801cb96 <_GetBkIndex.isra.0+0x1e>
 801cb8c:	f8d9 0000 	ldr.w	r0, [r9]
 801cb90:	bb18      	cbnz	r0, 801cbda <_GetBkIndex.isra.0+0x62>
 801cb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cb9a:	4298      	cmp	r0, r3
 801cb9c:	dcf6      	bgt.n	801cb8c <_GetBkIndex.isra.0+0x14>
 801cb9e:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 801cba2:	428d      	cmp	r5, r1
 801cba4:	dcf2      	bgt.n	801cb8c <_GetBkIndex.isra.0+0x14>
 801cba6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801cbaa:	4299      	cmp	r1, r3
 801cbac:	dcee      	bgt.n	801cb8c <_GetBkIndex.isra.0+0x14>
 801cbae:	1b86      	subs	r6, r0, r6
 801cbb0:	1b4d      	subs	r5, r1, r5
 801cbb2:	6960      	ldr	r0, [r4, #20]
 801cbb4:	462a      	mov	r2, r5
 801cbb6:	4631      	mov	r1, r6
 801cbb8:	f7f9 fd9b 	bl	80166f2 <GUI_GetBitmapPixelIndex>
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	d0e5      	beq.n	801cb8c <_GetBkIndex.isra.0+0x14>
 801cbc0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801cbc4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cbc8:	1a9b      	subs	r3, r3, r2
 801cbca:	fb03 5505 	mla	r5, r3, r5, r5
 801cbce:	4435      	add	r5, r6
 801cbd0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 801cbd4:	6a20      	ldr	r0, [r4, #32]
 801cbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbda:	68c3      	ldr	r3, [r0, #12]
 801cbdc:	4642      	mov	r2, r8
 801cbde:	4639      	mov	r1, r7
 801cbe0:	695b      	ldr	r3, [r3, #20]
 801cbe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbe6:	4718      	bx	r3

0801cbe8 <_GetBkIndexAlpha.isra.2>:
 801cbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbec:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801cbf0:	4607      	mov	r7, r0
 801cbf2:	4688      	mov	r8, r1
 801cbf4:	4691      	mov	r9, r2
 801cbf6:	4285      	cmp	r5, r0
 801cbf8:	461e      	mov	r6, r3
 801cbfa:	dc14      	bgt.n	801cc26 <_GetBkIndexAlpha.isra.2+0x3e>
 801cbfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cc00:	4298      	cmp	r0, r3
 801cc02:	dc10      	bgt.n	801cc26 <_GetBkIndexAlpha.isra.2+0x3e>
 801cc04:	f9b6 4006 	ldrsh.w	r4, [r6, #6]
 801cc08:	428c      	cmp	r4, r1
 801cc0a:	dc0c      	bgt.n	801cc26 <_GetBkIndexAlpha.isra.2+0x3e>
 801cc0c:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 801cc10:	4299      	cmp	r1, r3
 801cc12:	dc08      	bgt.n	801cc26 <_GetBkIndexAlpha.isra.2+0x3e>
 801cc14:	1b45      	subs	r5, r0, r5
 801cc16:	6970      	ldr	r0, [r6, #20]
 801cc18:	1b0c      	subs	r4, r1, r4
 801cc1a:	b138      	cbz	r0, 801cc2c <_GetBkIndexAlpha.isra.2+0x44>
 801cc1c:	4622      	mov	r2, r4
 801cc1e:	4629      	mov	r1, r5
 801cc20:	f7f9 fd67 	bl	80166f2 <GUI_GetBitmapPixelIndex>
 801cc24:	e002      	b.n	801cc2c <_GetBkIndexAlpha.isra.2+0x44>
 801cc26:	2400      	movs	r4, #0
 801cc28:	4625      	mov	r5, r4
 801cc2a:	4620      	mov	r0, r4
 801cc2c:	0e03      	lsrs	r3, r0, #24
 801cc2e:	d109      	bne.n	801cc44 <_GetBkIndexAlpha.isra.2+0x5c>
 801cc30:	f8d9 0000 	ldr.w	r0, [r9]
 801cc34:	b188      	cbz	r0, 801cc5a <_GetBkIndexAlpha.isra.2+0x72>
 801cc36:	68c3      	ldr	r3, [r0, #12]
 801cc38:	4642      	mov	r2, r8
 801cc3a:	4639      	mov	r1, r7
 801cc3c:	695b      	ldr	r3, [r3, #20]
 801cc3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc42:	4718      	bx	r3
 801cc44:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 801cc48:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 801cc4c:	1a9b      	subs	r3, r3, r2
 801cc4e:	fb03 4404 	mla	r4, r3, r4, r4
 801cc52:	442c      	add	r4, r5
 801cc54:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801cc58:	6a20      	ldr	r0, [r4, #32]
 801cc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801cc60 <_GetDeviceRect>:
 801cc60:	6983      	ldr	r3, [r0, #24]
 801cc62:	4a0d      	ldr	r2, [pc, #52]	; (801cc98 <_GetDeviceRect+0x38>)
 801cc64:	b570      	push	{r4, r5, r6, lr}
 801cc66:	56d2      	ldrsb	r2, [r2, r3]
 801cc68:	4605      	mov	r5, r0
 801cc6a:	460c      	mov	r4, r1
 801cc6c:	2a01      	cmp	r2, #1
 801cc6e:	dd0d      	ble.n	801cc8c <_GetDeviceRect+0x2c>
 801cc70:	2200      	movs	r2, #0
 801cc72:	4618      	mov	r0, r3
 801cc74:	804a      	strh	r2, [r1, #2]
 801cc76:	800a      	strh	r2, [r1, #0]
 801cc78:	f7fb fb4a 	bl	8018310 <LCD_GetXSizeEx>
 801cc7c:	3801      	subs	r0, #1
 801cc7e:	80a0      	strh	r0, [r4, #4]
 801cc80:	69a8      	ldr	r0, [r5, #24]
 801cc82:	f7fb fb48 	bl	8018316 <LCD_GetYSizeEx>
 801cc86:	3801      	subs	r0, #1
 801cc88:	80e0      	strh	r0, [r4, #6]
 801cc8a:	bd70      	pop	{r4, r5, r6, pc}
 801cc8c:	68c3      	ldr	r3, [r0, #12]
 801cc8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc94:	4718      	bx	r3
 801cc96:	bf00      	nop
 801cc98:	2002244c 	.word	0x2002244c

0801cc9c <_FlushBuffer.isra.5>:
 801cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cca0:	460c      	mov	r4, r1
 801cca2:	68c9      	ldr	r1, [r1, #12]
 801cca4:	b086      	sub	sp, #24
 801cca6:	2900      	cmp	r1, #0
 801cca8:	d031      	beq.n	801cd0e <_FlushBuffer.isra.5+0x72>
 801ccaa:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 801ccae:	6822      	ldr	r2, [r4, #0]
 801ccb0:	2b01      	cmp	r3, #1
 801ccb2:	d104      	bne.n	801ccbe <_FlushBuffer.isra.5+0x22>
 801ccb4:	4616      	mov	r6, r2
 801ccb6:	6062      	str	r2, [r4, #4]
 801ccb8:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 801ccbc:	e00a      	b.n	801ccd4 <_FlushBuffer.isra.5+0x38>
 801ccbe:	69e3      	ldr	r3, [r4, #28]
 801ccc0:	6866      	ldr	r6, [r4, #4]
 801ccc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ccc6:	f8d4 8020 	ldr.w	r8, [r4, #32]
 801ccca:	3604      	adds	r6, #4
 801cccc:	3b01      	subs	r3, #1
 801ccce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ccd2:	6063      	str	r3, [r4, #4]
 801ccd4:	6807      	ldr	r7, [r0, #0]
 801ccd6:	b1af      	cbz	r7, 801cd04 <_FlushBuffer.isra.5+0x68>
 801ccd8:	69a2      	ldr	r2, [r4, #24]
 801ccda:	4630      	mov	r0, r6
 801ccdc:	f000 fb65 	bl	801d3aa <GUI__CompactPixelIndices>
 801cce0:	6962      	ldr	r2, [r4, #20]
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	2500      	movs	r5, #0
 801cce6:	9202      	str	r2, [sp, #8]
 801cce8:	4641      	mov	r1, r8
 801ccea:	69a2      	ldr	r2, [r4, #24]
 801ccec:	4638      	mov	r0, r7
 801ccee:	9505      	str	r5, [sp, #20]
 801ccf0:	9201      	str	r2, [sp, #4]
 801ccf2:	2201      	movs	r2, #1
 801ccf4:	9504      	str	r5, [sp, #16]
 801ccf6:	9200      	str	r2, [sp, #0]
 801ccf8:	9603      	str	r6, [sp, #12]
 801ccfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ccfc:	685e      	ldr	r6, [r3, #4]
 801ccfe:	68e3      	ldr	r3, [r4, #12]
 801cd00:	47b0      	blx	r6
 801cd02:	e000      	b.n	801cd06 <_FlushBuffer.isra.5+0x6a>
 801cd04:	2501      	movs	r5, #1
 801cd06:	2300      	movs	r3, #0
 801cd08:	b2e8      	uxtb	r0, r5
 801cd0a:	60e3      	str	r3, [r4, #12]
 801cd0c:	e000      	b.n	801cd10 <_FlushBuffer.isra.5+0x74>
 801cd0e:	4608      	mov	r0, r1
 801cd10:	b006      	add	sp, #24
 801cd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd16 <_SetBkIndexBuffered>:
 801cd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd18:	9c06      	ldr	r4, [sp, #24]
 801cd1a:	4617      	mov	r7, r2
 801cd1c:	4606      	mov	r6, r0
 801cd1e:	460d      	mov	r5, r1
 801cd20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cd22:	428a      	cmp	r2, r1
 801cd24:	d105      	bne.n	801cd32 <_SetBkIndexBuffered+0x1c>
 801cd26:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 801cd2a:	6a21      	ldr	r1, [r4, #32]
 801cd2c:	4411      	add	r1, r2
 801cd2e:	4281      	cmp	r1, r0
 801cd30:	d003      	beq.n	801cd3a <_SetBkIndexBuffered+0x24>
 801cd32:	4621      	mov	r1, r4
 801cd34:	4618      	mov	r0, r3
 801cd36:	f7ff ffb1 	bl	801cc9c <_FlushBuffer.isra.5>
 801cd3a:	6863      	ldr	r3, [r4, #4]
 801cd3c:	601f      	str	r7, [r3, #0]
 801cd3e:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 801cd42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801cd46:	6063      	str	r3, [r4, #4]
 801cd48:	68e3      	ldr	r3, [r4, #12]
 801cd4a:	b90b      	cbnz	r3, 801cd50 <_SetBkIndexBuffered+0x3a>
 801cd4c:	62a6      	str	r6, [r4, #40]	; 0x28
 801cd4e:	62e5      	str	r5, [r4, #44]	; 0x2c
 801cd50:	3301      	adds	r3, #1
 801cd52:	6226      	str	r6, [r4, #32]
 801cd54:	6265      	str	r5, [r4, #36]	; 0x24
 801cd56:	60e3      	str	r3, [r4, #12]
 801cd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cd5a <_ReleaseBuffer.isra.6>:
 801cd5a:	b513      	push	{r0, r1, r4, lr}
 801cd5c:	9101      	str	r1, [sp, #4]
 801cd5e:	f7ff ff9d 	bl	801cc9c <_FlushBuffer.isra.5>
 801cd62:	a802      	add	r0, sp, #8
 801cd64:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801cd68:	689c      	ldr	r4, [r3, #8]
 801cd6a:	f7f9 f9b3 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801cd6e:	4620      	mov	r0, r4
 801cd70:	f7f9 f9e0 	bl	8016134 <GUI_ALLOC_Free>
 801cd74:	b002      	add	sp, #8
 801cd76:	bd10      	pop	{r4, pc}

0801cd78 <GUI_SPRITE_SetPosition>:
 801cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd7c:	b0a7      	sub	sp, #156	; 0x9c
 801cd7e:	4604      	mov	r4, r0
 801cd80:	9111      	str	r1, [sp, #68]	; 0x44
 801cd82:	9212      	str	r2, [sp, #72]	; 0x48
 801cd84:	2800      	cmp	r0, #0
 801cd86:	f000 8247 	beq.w	801d218 <GUI_SPRITE_SetPosition+0x4a0>
 801cd8a:	f7fa fa75 	bl	8017278 <GUI_Lock>
 801cd8e:	4620      	mov	r0, r4
 801cd90:	f7f9 f992 	bl	80160b8 <GUI_ALLOC_LockH>
 801cd94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801cd9a:	9023      	str	r0, [sp, #140]	; 0x8c
 801cd9c:	429a      	cmp	r2, r3
 801cd9e:	f8d0 b000 	ldr.w	fp, [r0]
 801cda2:	d105      	bne.n	801cdb0 <GUI_SPRITE_SetPosition+0x38>
 801cda4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801cda8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cdaa:	429a      	cmp	r2, r3
 801cdac:	f000 8204 	beq.w	801d1b8 <GUI_SPRITE_SetPosition+0x440>
 801cdb0:	2000      	movs	r0, #0
 801cdb2:	f000 fe6b 	bl	801da8c <GUI_MEMDEV_Select>
 801cdb6:	f8db 3018 	ldr.w	r3, [fp, #24]
 801cdba:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801cdbc:	9309      	str	r3, [sp, #36]	; 0x24
 801cdbe:	4b96      	ldr	r3, [pc, #600]	; (801d018 <GUI_SPRITE_SetPosition+0x2a0>)
 801cdc0:	901e      	str	r0, [sp, #120]	; 0x78
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	7c5a      	ldrb	r2, [r3, #17]
 801cdc6:	9213      	str	r2, [sp, #76]	; 0x4c
 801cdc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801cdca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cdcc:	428a      	cmp	r2, r1
 801cdce:	bf1c      	itt	ne
 801cdd0:	f89d 2024 	ldrbne.w	r2, [sp, #36]	; 0x24
 801cdd4:	745a      	strbne	r2, [r3, #17]
 801cdd6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801cdda:	9305      	str	r3, [sp, #20]
 801cddc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801cde0:	9a05      	ldr	r2, [sp, #20]
 801cde2:	9306      	str	r3, [sp, #24]
 801cde4:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801cde8:	ebc2 0a03 	rsb	sl, r2, r3
 801cdec:	9a06      	ldr	r2, [sp, #24]
 801cdee:	f10a 0301 	add.w	r3, sl, #1
 801cdf2:	9307      	str	r3, [sp, #28]
 801cdf4:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801cdf8:	1a9b      	subs	r3, r3, r2
 801cdfa:	9308      	str	r3, [sp, #32]
 801cdfc:	3301      	adds	r3, #1
 801cdfe:	9319      	str	r3, [sp, #100]	; 0x64
 801ce00:	8a2b      	ldrh	r3, [r5, #16]
 801ce02:	079b      	lsls	r3, r3, #30
 801ce04:	f140 81bb 	bpl.w	801d17e <GUI_SPRITE_SetPosition+0x406>
 801ce08:	696b      	ldr	r3, [r5, #20]
 801ce0a:	9a05      	ldr	r2, [sp, #20]
 801ce0c:	930c      	str	r3, [sp, #48]	; 0x30
 801ce0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ce10:	1a9b      	subs	r3, r3, r2
 801ce12:	9a06      	ldr	r2, [sp, #24]
 801ce14:	9302      	str	r3, [sp, #8]
 801ce16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ce18:	1a9b      	subs	r3, r3, r2
 801ce1a:	9303      	str	r3, [sp, #12]
 801ce1c:	9b02      	ldr	r3, [sp, #8]
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	dc09      	bgt.n	801ce36 <GUI_SPRITE_SetPosition+0xbe>
 801ce22:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801ce26:	449a      	add	sl, r3
 801ce28:	2300      	movs	r3, #0
 801ce2a:	9316      	str	r3, [sp, #88]	; 0x58
 801ce2c:	f04f 33ff 	mov.w	r3, #4294967295
 801ce30:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce32:	9304      	str	r3, [sp, #16]
 801ce34:	e007      	b.n	801ce46 <GUI_SPRITE_SetPosition+0xce>
 801ce36:	9b02      	ldr	r3, [sp, #8]
 801ce38:	9316      	str	r3, [sp, #88]	; 0x58
 801ce3a:	9b07      	ldr	r3, [sp, #28]
 801ce3c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce3e:	2301      	movs	r3, #1
 801ce40:	9304      	str	r3, [sp, #16]
 801ce42:	2300      	movs	r3, #0
 801ce44:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce46:	9b03      	ldr	r3, [sp, #12]
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	dc0b      	bgt.n	801ce64 <GUI_SPRITE_SetPosition+0xec>
 801ce4c:	9c08      	ldr	r4, [sp, #32]
 801ce4e:	9a03      	ldr	r2, [sp, #12]
 801ce50:	4623      	mov	r3, r4
 801ce52:	4413      	add	r3, r2
 801ce54:	9308      	str	r3, [sp, #32]
 801ce56:	2300      	movs	r3, #0
 801ce58:	9314      	str	r3, [sp, #80]	; 0x50
 801ce5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce5e:	9310      	str	r3, [sp, #64]	; 0x40
 801ce60:	930a      	str	r3, [sp, #40]	; 0x28
 801ce62:	e006      	b.n	801ce72 <GUI_SPRITE_SetPosition+0xfa>
 801ce64:	9b03      	ldr	r3, [sp, #12]
 801ce66:	2400      	movs	r4, #0
 801ce68:	9314      	str	r3, [sp, #80]	; 0x50
 801ce6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ce6c:	9310      	str	r3, [sp, #64]	; 0x40
 801ce6e:	2301      	movs	r3, #1
 801ce70:	930a      	str	r3, [sp, #40]	; 0x28
 801ce72:	a924      	add	r1, sp, #144	; 0x90
 801ce74:	4658      	mov	r0, fp
 801ce76:	f7ff fef3 	bl	801cc60 <_GetDeviceRect>
 801ce7a:	9904      	ldr	r1, [sp, #16]
 801ce7c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801ce7e:	f7ff fe29 	bl	801cad4 <_CreateBuffer>
 801ce82:	900d      	str	r0, [sp, #52]	; 0x34
 801ce84:	2800      	cmp	r0, #0
 801ce86:	f000 817a 	beq.w	801d17e <GUI_SPRITE_SetPosition+0x406>
 801ce8a:	9904      	ldr	r1, [sp, #16]
 801ce8c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801ce8e:	f7ff fe21 	bl	801cad4 <_CreateBuffer>
 801ce92:	900e      	str	r0, [sp, #56]	; 0x38
 801ce94:	2800      	cmp	r0, #0
 801ce96:	f000 816d 	beq.w	801d174 <GUI_SPRITE_SetPosition+0x3fc>
 801ce9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ce9c:	68d8      	ldr	r0, [r3, #12]
 801ce9e:	b980      	cbnz	r0, 801cec2 <GUI_SPRITE_SetPosition+0x14a>
 801cea0:	9b07      	ldr	r3, [sp, #28]
 801cea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cea4:	009b      	lsls	r3, r3, #2
 801cea6:	901d      	str	r0, [sp, #116]	; 0x74
 801cea8:	4353      	muls	r3, r2
 801ceaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ceac:	931f      	str	r3, [sp, #124]	; 0x7c
 801ceae:	9b07      	ldr	r3, [sp, #28]
 801ceb0:	fb03 2304 	mla	r3, r3, r4, r2
 801ceb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801ceb8:	9315      	str	r3, [sp, #84]	; 0x54
 801ceba:	9b04      	ldr	r3, [sp, #16]
 801cebc:	009b      	lsls	r3, r3, #2
 801cebe:	9320      	str	r3, [sp, #128]	; 0x80
 801cec0:	e0cc      	b.n	801d05c <GUI_SPRITE_SetPosition+0x2e4>
 801cec2:	f7f9 f8f9 	bl	80160b8 <GUI_ALLOC_LockH>
 801cec6:	9b07      	ldr	r3, [sp, #28]
 801cec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ceca:	009b      	lsls	r3, r3, #2
 801cecc:	9022      	str	r0, [sp, #136]	; 0x88
 801cece:	4353      	muls	r3, r2
 801ced0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ced2:	931f      	str	r3, [sp, #124]	; 0x7c
 801ced4:	9b07      	ldr	r3, [sp, #28]
 801ced6:	fb03 2304 	mla	r3, r3, r4, r2
 801ceda:	9a02      	ldr	r2, [sp, #8]
 801cedc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801cee0:	9315      	str	r3, [sp, #84]	; 0x54
 801cee2:	9b04      	ldr	r3, [sp, #16]
 801cee4:	009b      	lsls	r3, r3, #2
 801cee6:	9320      	str	r3, [sp, #128]	; 0x80
 801cee8:	9b05      	ldr	r3, [sp, #20]
 801ceea:	4413      	add	r3, r2
 801ceec:	9321      	str	r3, [sp, #132]	; 0x84
 801ceee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cef0:	429c      	cmp	r4, r3
 801cef2:	f000 808c 	beq.w	801d00e <GUI_SPRITE_SetPosition+0x296>
 801cef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cef8:	429c      	cmp	r4, r3
 801cefa:	db05      	blt.n	801cf08 <GUI_SPRITE_SetPosition+0x190>
 801cefc:	9b08      	ldr	r3, [sp, #32]
 801cefe:	429c      	cmp	r4, r3
 801cf00:	bfcc      	ite	gt
 801cf02:	2300      	movgt	r3, #0
 801cf04:	2301      	movle	r3, #1
 801cf06:	e000      	b.n	801cf0a <GUI_SPRITE_SetPosition+0x192>
 801cf08:	2300      	movs	r3, #0
 801cf0a:	931a      	str	r3, [sp, #104]	; 0x68
 801cf0c:	9b06      	ldr	r3, [sp, #24]
 801cf0e:	9a06      	ldr	r2, [sp, #24]
 801cf10:	18e3      	adds	r3, r4, r3
 801cf12:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 801cf16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801cf18:	9318      	str	r3, [sp, #96]	; 0x60
 801cf1a:	9b03      	ldr	r3, [sp, #12]
 801cf1c:	189e      	adds	r6, r3, r2
 801cf1e:	1ae3      	subs	r3, r4, r3
 801cf20:	4426      	add	r6, r4
 801cf22:	931d      	str	r3, [sp, #116]	; 0x74
 801cf24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf26:	429d      	cmp	r5, r3
 801cf28:	d06a      	beq.n	801d000 <GUI_SPRITE_SetPosition+0x288>
 801cf2a:	4622      	mov	r2, r4
 801cf2c:	4629      	mov	r1, r5
 801cf2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cf30:	f7f9 fbdf 	bl	80166f2 <GUI_GetBitmapPixelIndex>
 801cf34:	901b      	str	r0, [sp, #108]	; 0x6c
 801cf36:	2800      	cmp	r0, #0
 801cf38:	d05d      	beq.n	801cff6 <GUI_SPRITE_SetPosition+0x27e>
 801cf3a:	9b05      	ldr	r3, [sp, #20]
 801cf3c:	18eb      	adds	r3, r5, r3
 801cf3e:	9317      	str	r3, [sp, #92]	; 0x5c
 801cf40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cf42:	195f      	adds	r7, r3, r5
 801cf44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801cf46:	429d      	cmp	r5, r3
 801cf48:	db04      	blt.n	801cf54 <GUI_SPRITE_SetPosition+0x1dc>
 801cf4a:	4555      	cmp	r5, sl
 801cf4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801cf4e:	bfc8      	it	gt
 801cf50:	2300      	movgt	r3, #0
 801cf52:	e000      	b.n	801cf56 <GUI_SPRITE_SetPosition+0x1de>
 801cf54:	2300      	movs	r3, #0
 801cf56:	931c      	str	r3, [sp, #112]	; 0x70
 801cf58:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801cf5c:	42bb      	cmp	r3, r7
 801cf5e:	dc13      	bgt.n	801cf88 <GUI_SPRITE_SetPosition+0x210>
 801cf60:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801cf64:	42b3      	cmp	r3, r6
 801cf66:	dc0f      	bgt.n	801cf88 <GUI_SPRITE_SetPosition+0x210>
 801cf68:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801cf6c:	42bb      	cmp	r3, r7
 801cf6e:	db0b      	blt.n	801cf88 <GUI_SPRITE_SetPosition+0x210>
 801cf70:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801cf74:	42b3      	cmp	r3, r6
 801cf76:	db07      	blt.n	801cf88 <GUI_SPRITE_SetPosition+0x210>
 801cf78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cf7a:	465a      	mov	r2, fp
 801cf7c:	4631      	mov	r1, r6
 801cf7e:	4638      	mov	r0, r7
 801cf80:	f7ff fdfa 	bl	801cb78 <_GetBkIndex.isra.0>
 801cf84:	4680      	mov	r8, r0
 801cf86:	e001      	b.n	801cf8c <GUI_SPRITE_SetPosition+0x214>
 801cf88:	f04f 0800 	mov.w	r8, #0
 801cf8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cf8e:	b153      	cbz	r3, 801cfa6 <GUI_SPRITE_SetPosition+0x22e>
 801cf90:	9b02      	ldr	r3, [sp, #8]
 801cf92:	1ae9      	subs	r1, r5, r3
 801cf94:	d412      	bmi.n	801cfbc <GUI_SPRITE_SetPosition+0x244>
 801cf96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	db0f      	blt.n	801cfbc <GUI_SPRITE_SetPosition+0x244>
 801cf9c:	461a      	mov	r2, r3
 801cf9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cfa0:	f7f9 fba7 	bl	80166f2 <GUI_GetBitmapPixelIndex>
 801cfa4:	b950      	cbnz	r0, 801cfbc <GUI_SPRITE_SetPosition+0x244>
 801cfa6:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801cfaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cfac:	4293      	cmp	r3, r2
 801cfae:	dc05      	bgt.n	801cfbc <GUI_SPRITE_SetPosition+0x244>
 801cfb0:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801cfb4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cfb6:	4293      	cmp	r3, r2
 801cfb8:	f340 8104 	ble.w	801d1c4 <GUI_SPRITE_SetPosition+0x44c>
 801cfbc:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801cfc0:	42bb      	cmp	r3, r7
 801cfc2:	dc16      	bgt.n	801cff2 <GUI_SPRITE_SetPosition+0x27a>
 801cfc4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801cfc8:	42b3      	cmp	r3, r6
 801cfca:	dc12      	bgt.n	801cff2 <GUI_SPRITE_SetPosition+0x27a>
 801cfcc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801cfd0:	42bb      	cmp	r3, r7
 801cfd2:	db0e      	blt.n	801cff2 <GUI_SPRITE_SetPosition+0x27a>
 801cfd4:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801cfd8:	42b3      	cmp	r3, r6
 801cfda:	db0a      	blt.n	801cff2 <GUI_SPRITE_SetPosition+0x27a>
 801cfdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cfde:	4638      	mov	r0, r7
 801cfe0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801cfe2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cfe4:	9300      	str	r3, [sp, #0]
 801cfe6:	465b      	mov	r3, fp
 801cfe8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801cfec:	4631      	mov	r1, r6
 801cfee:	f7ff fe92 	bl	801cd16 <_SetBkIndexBuffered>
 801cff2:	f8c9 8020 	str.w	r8, [r9, #32]
 801cff6:	9b04      	ldr	r3, [sp, #16]
 801cff8:	441d      	add	r5, r3
 801cffa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cffc:	4499      	add	r9, r3
 801cffe:	e791      	b.n	801cf24 <GUI_SPRITE_SetPosition+0x1ac>
 801d000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d002:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801d004:	441c      	add	r4, r3
 801d006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d008:	4413      	add	r3, r2
 801d00a:	9315      	str	r3, [sp, #84]	; 0x54
 801d00c:	e76f      	b.n	801ceee <GUI_SPRITE_SetPosition+0x176>
 801d00e:	a822      	add	r0, sp, #136	; 0x88
 801d010:	f7f9 f860 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d014:	e0a9      	b.n	801d16a <GUI_SPRITE_SetPosition+0x3f2>
 801d016:	bf00      	nop
 801d018:	20000018 	.word	0x20000018
 801d01c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d01e:	42a3      	cmp	r3, r4
 801d020:	dc20      	bgt.n	801d064 <GUI_SPRITE_SetPosition+0x2ec>
 801d022:	9b08      	ldr	r3, [sp, #32]
 801d024:	42a3      	cmp	r3, r4
 801d026:	bfb4      	ite	lt
 801d028:	2300      	movlt	r3, #0
 801d02a:	2301      	movge	r3, #1
 801d02c:	931a      	str	r3, [sp, #104]	; 0x68
 801d02e:	9b06      	ldr	r3, [sp, #24]
 801d030:	9a06      	ldr	r2, [sp, #24]
 801d032:	4423      	add	r3, r4
 801d034:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 801d038:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d03a:	9318      	str	r3, [sp, #96]	; 0x60
 801d03c:	9b03      	ldr	r3, [sp, #12]
 801d03e:	189e      	adds	r6, r3, r2
 801d040:	9b05      	ldr	r3, [sp, #20]
 801d042:	9a02      	ldr	r2, [sp, #8]
 801d044:	4426      	add	r6, r4
 801d046:	4413      	add	r3, r2
 801d048:	9321      	str	r3, [sp, #132]	; 0x84
 801d04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d04c:	42ab      	cmp	r3, r5
 801d04e:	d10b      	bne.n	801d068 <GUI_SPRITE_SetPosition+0x2f0>
 801d050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d052:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801d054:	441c      	add	r4, r3
 801d056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d058:	4413      	add	r3, r2
 801d05a:	9315      	str	r3, [sp, #84]	; 0x54
 801d05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d05e:	42a3      	cmp	r3, r4
 801d060:	d1dc      	bne.n	801d01c <GUI_SPRITE_SetPosition+0x2a4>
 801d062:	e082      	b.n	801d16a <GUI_SPRITE_SetPosition+0x3f2>
 801d064:	2300      	movs	r3, #0
 801d066:	e7e1      	b.n	801d02c <GUI_SPRITE_SetPosition+0x2b4>
 801d068:	4622      	mov	r2, r4
 801d06a:	4629      	mov	r1, r5
 801d06c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d06e:	f7f9 fb40 	bl	80166f2 <GUI_GetBitmapPixelIndex>
 801d072:	4603      	mov	r3, r0
 801d074:	901b      	str	r0, [sp, #108]	; 0x6c
 801d076:	0e1b      	lsrs	r3, r3, #24
 801d078:	d072      	beq.n	801d160 <GUI_SPRITE_SetPosition+0x3e8>
 801d07a:	9b05      	ldr	r3, [sp, #20]
 801d07c:	18eb      	adds	r3, r5, r3
 801d07e:	9317      	str	r3, [sp, #92]	; 0x5c
 801d080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d082:	eb03 0805 	add.w	r8, r3, r5
 801d086:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d088:	42ab      	cmp	r3, r5
 801d08a:	dc04      	bgt.n	801d096 <GUI_SPRITE_SetPosition+0x31e>
 801d08c:	45aa      	cmp	sl, r5
 801d08e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d090:	bfb8      	it	lt
 801d092:	2300      	movlt	r3, #0
 801d094:	e000      	b.n	801d098 <GUI_SPRITE_SetPosition+0x320>
 801d096:	2300      	movs	r3, #0
 801d098:	931c      	str	r3, [sp, #112]	; 0x70
 801d09a:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801d09e:	4543      	cmp	r3, r8
 801d0a0:	dc1d      	bgt.n	801d0de <GUI_SPRITE_SetPosition+0x366>
 801d0a2:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801d0a6:	42b3      	cmp	r3, r6
 801d0a8:	dc19      	bgt.n	801d0de <GUI_SPRITE_SetPosition+0x366>
 801d0aa:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801d0ae:	4543      	cmp	r3, r8
 801d0b0:	db15      	blt.n	801d0de <GUI_SPRITE_SetPosition+0x366>
 801d0b2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801d0b6:	42b3      	cmp	r3, r6
 801d0b8:	db11      	blt.n	801d0de <GUI_SPRITE_SetPosition+0x366>
 801d0ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d0bc:	465a      	mov	r2, fp
 801d0be:	4631      	mov	r1, r6
 801d0c0:	4640      	mov	r0, r8
 801d0c2:	f7ff fd91 	bl	801cbe8 <_GetBkIndexAlpha.isra.2>
 801d0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d0c8:	4b55      	ldr	r3, [pc, #340]	; (801d220 <GUI_SPRITE_SetPosition+0x4a8>)
 801d0ca:	4607      	mov	r7, r0
 801d0cc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801d0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d0d4:	691b      	ldr	r3, [r3, #16]
 801d0d6:	685b      	ldr	r3, [r3, #4]
 801d0d8:	4798      	blx	r3
 801d0da:	901d      	str	r0, [sp, #116]	; 0x74
 801d0dc:	e000      	b.n	801d0e0 <GUI_SPRITE_SetPosition+0x368>
 801d0de:	2700      	movs	r7, #0
 801d0e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d0e2:	b153      	cbz	r3, 801d0fa <GUI_SPRITE_SetPosition+0x382>
 801d0e4:	9b02      	ldr	r3, [sp, #8]
 801d0e6:	1ae9      	subs	r1, r5, r3
 801d0e8:	d411      	bmi.n	801d10e <GUI_SPRITE_SetPosition+0x396>
 801d0ea:	9b03      	ldr	r3, [sp, #12]
 801d0ec:	1ae2      	subs	r2, r4, r3
 801d0ee:	d40e      	bmi.n	801d10e <GUI_SPRITE_SetPosition+0x396>
 801d0f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d0f2:	f7f9 fafe 	bl	80166f2 <GUI_GetBitmapPixelIndex>
 801d0f6:	0e03      	lsrs	r3, r0, #24
 801d0f8:	d109      	bne.n	801d10e <GUI_SPRITE_SetPosition+0x396>
 801d0fa:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801d0fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d100:	4293      	cmp	r3, r2
 801d102:	dc04      	bgt.n	801d10e <GUI_SPRITE_SetPosition+0x396>
 801d104:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801d108:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d10a:	4293      	cmp	r3, r2
 801d10c:	dd70      	ble.n	801d1f0 <GUI_SPRITE_SetPosition+0x478>
 801d10e:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801d112:	4543      	cmp	r3, r8
 801d114:	dc22      	bgt.n	801d15c <GUI_SPRITE_SetPosition+0x3e4>
 801d116:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801d11a:	42b3      	cmp	r3, r6
 801d11c:	dc1e      	bgt.n	801d15c <GUI_SPRITE_SetPosition+0x3e4>
 801d11e:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801d122:	4543      	cmp	r3, r8
 801d124:	db1a      	blt.n	801d15c <GUI_SPRITE_SetPosition+0x3e4>
 801d126:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801d12a:	42b3      	cmp	r3, r6
 801d12c:	db16      	blt.n	801d15c <GUI_SPRITE_SetPosition+0x3e4>
 801d12e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d130:	22ff      	movs	r2, #255	; 0xff
 801d132:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801d134:	f043 417f 	orr.w	r1, r3, #4278190080	; 0xff000000
 801d138:	4b3a      	ldr	r3, [pc, #232]	; (801d224 <GUI_SPRITE_SetPosition+0x4ac>)
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	4798      	blx	r3
 801d13e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d140:	4b37      	ldr	r3, [pc, #220]	; (801d220 <GUI_SPRITE_SetPosition+0x4a8>)
 801d142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d146:	691b      	ldr	r3, [r3, #16]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	4798      	blx	r3
 801d14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d14e:	4602      	mov	r2, r0
 801d150:	4631      	mov	r1, r6
 801d152:	9300      	str	r3, [sp, #0]
 801d154:	4640      	mov	r0, r8
 801d156:	465b      	mov	r3, fp
 801d158:	f7ff fddd 	bl	801cd16 <_SetBkIndexBuffered>
 801d15c:	f8c9 7020 	str.w	r7, [r9, #32]
 801d160:	9b04      	ldr	r3, [sp, #16]
 801d162:	441d      	add	r5, r3
 801d164:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d166:	4499      	add	r9, r3
 801d168:	e76f      	b.n	801d04a <GUI_SPRITE_SetPosition+0x2d2>
 801d16a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d16c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d16e:	6818      	ldr	r0, [r3, #0]
 801d170:	f7ff fdf3 	bl	801cd5a <_ReleaseBuffer.isra.6>
 801d174:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d176:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d178:	6818      	ldr	r0, [r3, #0]
 801d17a:	f7ff fdee 	bl	801cd5a <_ReleaseBuffer.isra.6>
 801d17e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d180:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801d184:	9907      	ldr	r1, [sp, #28]
 801d186:	809a      	strh	r2, [r3, #4]
 801d188:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801d18c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801d18e:	80da      	strh	r2, [r3, #6]
 801d190:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d192:	440a      	add	r2, r1
 801d194:	9919      	ldr	r1, [sp, #100]	; 0x64
 801d196:	3a01      	subs	r2, #1
 801d198:	811a      	strh	r2, [r3, #8]
 801d19a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d19c:	3a01      	subs	r2, #1
 801d19e:	440a      	add	r2, r1
 801d1a0:	815a      	strh	r2, [r3, #10]
 801d1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d1a6:	4293      	cmp	r3, r2
 801d1a8:	bf1f      	itttt	ne
 801d1aa:	4b1f      	ldrne	r3, [pc, #124]	; (801d228 <GUI_SPRITE_SetPosition+0x4b0>)
 801d1ac:	f89d 204c 	ldrbne.w	r2, [sp, #76]	; 0x4c
 801d1b0:	681b      	ldrne	r3, [r3, #0]
 801d1b2:	745a      	strbne	r2, [r3, #17]
 801d1b4:	f000 fc6a 	bl	801da8c <GUI_MEMDEV_Select>
 801d1b8:	a823      	add	r0, sp, #140	; 0x8c
 801d1ba:	f7f8 ff8b 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d1be:	f7fa f851 	bl	8017264 <GUI_Unlock>
 801d1c2:	e029      	b.n	801d218 <GUI_SPRITE_SetPosition+0x4a0>
 801d1c4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801d1c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d1ca:	4293      	cmp	r3, r2
 801d1cc:	f6ff aef6 	blt.w	801cfbc <GUI_SPRITE_SetPosition+0x244>
 801d1d0:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801d1d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d1d6:	4293      	cmp	r3, r2
 801d1d8:	f6ff aef0 	blt.w	801cfbc <GUI_SPRITE_SetPosition+0x244>
 801d1dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1de:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d1e0:	9300      	str	r3, [sp, #0]
 801d1e2:	465b      	mov	r3, fp
 801d1e4:	f8d9 2020 	ldr.w	r2, [r9, #32]
 801d1e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d1ea:	f7ff fd94 	bl	801cd16 <_SetBkIndexBuffered>
 801d1ee:	e6e5      	b.n	801cfbc <GUI_SPRITE_SetPosition+0x244>
 801d1f0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801d1f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d1f6:	4293      	cmp	r3, r2
 801d1f8:	db89      	blt.n	801d10e <GUI_SPRITE_SetPosition+0x396>
 801d1fa:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801d1fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d200:	4293      	cmp	r3, r2
 801d202:	db84      	blt.n	801d10e <GUI_SPRITE_SetPosition+0x396>
 801d204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d206:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d208:	9300      	str	r3, [sp, #0]
 801d20a:	465b      	mov	r3, fp
 801d20c:	f8d9 2020 	ldr.w	r2, [r9, #32]
 801d210:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d212:	f7ff fd80 	bl	801cd16 <_SetBkIndexBuffered>
 801d216:	e77a      	b.n	801d10e <GUI_SPRITE_SetPosition+0x396>
 801d218:	b027      	add	sp, #156	; 0x9c
 801d21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d21e:	bf00      	nop
 801d220:	2002249c 	.word	0x2002249c
 801d224:	20000030 	.word	0x20000030
 801d228:	20000018 	.word	0x20000018

0801d22c <GUI__AlphaPreserveTrans>:
 801d22c:	4b07      	ldr	r3, [pc, #28]	; (801d24c <GUI__AlphaPreserveTrans+0x20>)
 801d22e:	b510      	push	{r4, lr}
 801d230:	781c      	ldrb	r4, [r3, #0]
 801d232:	b118      	cbz	r0, 801d23c <GUI__AlphaPreserveTrans+0x10>
 801d234:	2201      	movs	r2, #1
 801d236:	2000      	movs	r0, #0
 801d238:	701a      	strb	r2, [r3, #0]
 801d23a:	e002      	b.n	801d242 <GUI__AlphaPreserveTrans+0x16>
 801d23c:	7018      	strb	r0, [r3, #0]
 801d23e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801d242:	f000 fad3 	bl	801d7ec <LCD_AA_SetOrMask>
 801d246:	4620      	mov	r0, r4
 801d248:	bd10      	pop	{r4, pc}
 801d24a:	bf00      	nop
 801d24c:	20022484 	.word	0x20022484

0801d250 <_Unlink>:
 801d250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d252:	4605      	mov	r5, r0
 801d254:	b1e8      	cbz	r0, 801d292 <_Unlink+0x42>
 801d256:	f7f8 ff2f 	bl	80160b8 <GUI_ALLOC_LockH>
 801d25a:	4b0f      	ldr	r3, [pc, #60]	; (801d298 <_Unlink+0x48>)
 801d25c:	9000      	str	r0, [sp, #0]
 801d25e:	685c      	ldr	r4, [r3, #4]
 801d260:	42a5      	cmp	r5, r4
 801d262:	d105      	bne.n	801d270 <_Unlink+0x20>
 801d264:	6842      	ldr	r2, [r0, #4]
 801d266:	605a      	str	r2, [r3, #4]
 801d268:	e010      	b.n	801d28c <_Unlink+0x3c>
 801d26a:	a801      	add	r0, sp, #4
 801d26c:	f7f8 ff32 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d270:	b164      	cbz	r4, 801d28c <_Unlink+0x3c>
 801d272:	4620      	mov	r0, r4
 801d274:	f7f8 ff20 	bl	80160b8 <GUI_ALLOC_LockH>
 801d278:	6844      	ldr	r4, [r0, #4]
 801d27a:	9001      	str	r0, [sp, #4]
 801d27c:	42a5      	cmp	r5, r4
 801d27e:	d1f4      	bne.n	801d26a <_Unlink+0x1a>
 801d280:	9b00      	ldr	r3, [sp, #0]
 801d282:	685b      	ldr	r3, [r3, #4]
 801d284:	6043      	str	r3, [r0, #4]
 801d286:	a801      	add	r0, sp, #4
 801d288:	f7f8 ff24 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d28c:	4668      	mov	r0, sp
 801d28e:	f7f8 ff21 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d292:	b003      	add	sp, #12
 801d294:	bd30      	pop	{r4, r5, pc}
 801d296:	bf00      	nop
 801d298:	20000404 	.word	0x20000404

0801d29c <GUI_TIMER__GetFirstTimer>:
 801d29c:	2300      	movs	r3, #0
 801d29e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d2a0:	6003      	str	r3, [r0, #0]
 801d2a2:	4605      	mov	r5, r0
 801d2a4:	4b08      	ldr	r3, [pc, #32]	; (801d2c8 <GUI_TIMER__GetFirstTimer+0x2c>)
 801d2a6:	681c      	ldr	r4, [r3, #0]
 801d2a8:	b154      	cbz	r4, 801d2c0 <GUI_TIMER__GetFirstTimer+0x24>
 801d2aa:	4620      	mov	r0, r4
 801d2ac:	f7f8 ff04 	bl	80160b8 <GUI_ALLOC_LockH>
 801d2b0:	ab02      	add	r3, sp, #8
 801d2b2:	6902      	ldr	r2, [r0, #16]
 801d2b4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	602a      	str	r2, [r5, #0]
 801d2bc:	f7f8 ff0a 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d2c0:	4620      	mov	r0, r4
 801d2c2:	b003      	add	sp, #12
 801d2c4:	bd30      	pop	{r4, r5, pc}
 801d2c6:	bf00      	nop
 801d2c8:	20000404 	.word	0x20000404

0801d2cc <GUI_TIMER__GetNextTimerLin>:
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d2d0:	600b      	str	r3, [r1, #0]
 801d2d2:	460e      	mov	r6, r1
 801d2d4:	4604      	mov	r4, r0
 801d2d6:	b190      	cbz	r0, 801d2fe <GUI_TIMER__GetNextTimerLin+0x32>
 801d2d8:	f7f8 feee 	bl	80160b8 <GUI_ALLOC_LockH>
 801d2dc:	ad02      	add	r5, sp, #8
 801d2de:	6884      	ldr	r4, [r0, #8]
 801d2e0:	f845 0d04 	str.w	r0, [r5, #-4]!
 801d2e4:	b144      	cbz	r4, 801d2f8 <GUI_TIMER__GetNextTimerLin+0x2c>
 801d2e6:	4628      	mov	r0, r5
 801d2e8:	f7f8 fef4 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	f7f8 fee3 	bl	80160b8 <GUI_ALLOC_LockH>
 801d2f2:	6903      	ldr	r3, [r0, #16]
 801d2f4:	9001      	str	r0, [sp, #4]
 801d2f6:	6033      	str	r3, [r6, #0]
 801d2f8:	4628      	mov	r0, r5
 801d2fa:	f7f8 feeb 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d2fe:	4620      	mov	r0, r4
 801d300:	b002      	add	sp, #8
 801d302:	bd70      	pop	{r4, r5, r6, pc}

0801d304 <GUI_TIMER_Delete>:
 801d304:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d306:	4604      	mov	r4, r0
 801d308:	b378      	cbz	r0, 801d36a <GUI_TIMER_Delete+0x66>
 801d30a:	4e19      	ldr	r6, [pc, #100]	; (801d370 <GUI_TIMER_Delete+0x6c>)
 801d30c:	f7f9 ffb4 	bl	8017278 <GUI_Lock>
 801d310:	6835      	ldr	r5, [r6, #0]
 801d312:	42ac      	cmp	r4, r5
 801d314:	d10c      	bne.n	801d330 <GUI_TIMER_Delete+0x2c>
 801d316:	4620      	mov	r0, r4
 801d318:	f7f8 fece 	bl	80160b8 <GUI_ALLOC_LockH>
 801d31c:	ab02      	add	r3, sp, #8
 801d31e:	6882      	ldr	r2, [r0, #8]
 801d320:	f843 0d04 	str.w	r0, [r3, #-4]!
 801d324:	4618      	mov	r0, r3
 801d326:	6032      	str	r2, [r6, #0]
 801d328:	e015      	b.n	801d356 <GUI_TIMER_Delete+0x52>
 801d32a:	4668      	mov	r0, sp
 801d32c:	f7f8 fed2 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d330:	b19d      	cbz	r5, 801d35a <GUI_TIMER_Delete+0x56>
 801d332:	4628      	mov	r0, r5
 801d334:	f7f8 fec0 	bl	80160b8 <GUI_ALLOC_LockH>
 801d338:	6885      	ldr	r5, [r0, #8]
 801d33a:	9000      	str	r0, [sp, #0]
 801d33c:	42ac      	cmp	r4, r5
 801d33e:	d1f4      	bne.n	801d32a <GUI_TIMER_Delete+0x26>
 801d340:	4620      	mov	r0, r4
 801d342:	f7f8 feb9 	bl	80160b8 <GUI_ALLOC_LockH>
 801d346:	9b00      	ldr	r3, [sp, #0]
 801d348:	6882      	ldr	r2, [r0, #8]
 801d34a:	9001      	str	r0, [sp, #4]
 801d34c:	a801      	add	r0, sp, #4
 801d34e:	609a      	str	r2, [r3, #8]
 801d350:	f7f8 fec0 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d354:	4668      	mov	r0, sp
 801d356:	f7f8 febd 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d35a:	4620      	mov	r0, r4
 801d35c:	f7ff ff78 	bl	801d250 <_Unlink>
 801d360:	4620      	mov	r0, r4
 801d362:	f7f8 fee7 	bl	8016134 <GUI_ALLOC_Free>
 801d366:	f7f9 ff7d 	bl	8017264 <GUI_Unlock>
 801d36a:	b002      	add	sp, #8
 801d36c:	bd70      	pop	{r4, r5, r6, pc}
 801d36e:	bf00      	nop
 801d370:	20000404 	.word	0x20000404

0801d374 <GUI_TIMER_GetFlag>:
 801d374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d376:	460d      	mov	r5, r1
 801d378:	4604      	mov	r4, r0
 801d37a:	b190      	cbz	r0, 801d3a2 <GUI_TIMER_GetFlag+0x2e>
 801d37c:	f7f9 ff7c 	bl	8017278 <GUI_Lock>
 801d380:	4620      	mov	r0, r4
 801d382:	f7f8 fe99 	bl	80160b8 <GUI_ALLOC_LockH>
 801d386:	8982      	ldrh	r2, [r0, #12]
 801d388:	ab02      	add	r3, sp, #8
 801d38a:	422a      	tst	r2, r5
 801d38c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801d390:	4618      	mov	r0, r3
 801d392:	bf14      	ite	ne
 801d394:	2401      	movne	r4, #1
 801d396:	2400      	moveq	r4, #0
 801d398:	f7f8 fe9c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d39c:	f7f9 ff62 	bl	8017264 <GUI_Unlock>
 801d3a0:	e000      	b.n	801d3a4 <GUI_TIMER_GetFlag+0x30>
 801d3a2:	2401      	movs	r4, #1
 801d3a4:	4620      	mov	r0, r4
 801d3a6:	b003      	add	sp, #12
 801d3a8:	bd30      	pop	{r4, r5, pc}

0801d3aa <GUI__CompactPixelIndices>:
 801d3aa:	2a08      	cmp	r2, #8
 801d3ac:	b510      	push	{r4, lr}
 801d3ae:	dd0e      	ble.n	801d3ce <GUI__CompactPixelIndices+0x24>
 801d3b0:	2a10      	cmp	r2, #16
 801d3b2:	dc0a      	bgt.n	801d3ca <GUI__CompactPixelIndices+0x20>
 801d3b4:	4603      	mov	r3, r0
 801d3b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d3ba:	f850 2b04 	ldr.w	r2, [r0], #4
 801d3be:	f823 2b02 	strh.w	r2, [r3], #2
 801d3c2:	428b      	cmp	r3, r1
 801d3c4:	d1f9      	bne.n	801d3ba <GUI__CompactPixelIndices+0x10>
 801d3c6:	2001      	movs	r0, #1
 801d3c8:	bd10      	pop	{r4, pc}
 801d3ca:	2000      	movs	r0, #0
 801d3cc:	bd10      	pop	{r4, pc}
 801d3ce:	2a02      	cmp	r2, #2
 801d3d0:	d12a      	bne.n	801d428 <GUI__CompactPixelIndices+0x7e>
 801d3d2:	4604      	mov	r4, r0
 801d3d4:	6803      	ldr	r3, [r0, #0]
 801d3d6:	2901      	cmp	r1, #1
 801d3d8:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801d3dc:	b2db      	uxtb	r3, r3
 801d3de:	d020      	beq.n	801d422 <GUI__CompactPixelIndices+0x78>
 801d3e0:	6842      	ldr	r2, [r0, #4]
 801d3e2:	2902      	cmp	r1, #2
 801d3e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 801d3e8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 801d3ec:	ea43 0302 	orr.w	r3, r3, r2
 801d3f0:	d101      	bne.n	801d3f6 <GUI__CompactPixelIndices+0x4c>
 801d3f2:	3008      	adds	r0, #8
 801d3f4:	e016      	b.n	801d424 <GUI__CompactPixelIndices+0x7a>
 801d3f6:	6882      	ldr	r2, [r0, #8]
 801d3f8:	2903      	cmp	r1, #3
 801d3fa:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801d3fe:	f002 020c 	and.w	r2, r2, #12
 801d402:	ea43 0302 	orr.w	r3, r3, r2
 801d406:	d101      	bne.n	801d40c <GUI__CompactPixelIndices+0x62>
 801d408:	300c      	adds	r0, #12
 801d40a:	e00b      	b.n	801d424 <GUI__CompactPixelIndices+0x7a>
 801d40c:	68c2      	ldr	r2, [r0, #12]
 801d40e:	3904      	subs	r1, #4
 801d410:	3010      	adds	r0, #16
 801d412:	f002 0203 	and.w	r2, r2, #3
 801d416:	4313      	orrs	r3, r2
 801d418:	f804 3b01 	strb.w	r3, [r4], #1
 801d41c:	2900      	cmp	r1, #0
 801d41e:	d1d9      	bne.n	801d3d4 <GUI__CompactPixelIndices+0x2a>
 801d420:	e7d1      	b.n	801d3c6 <GUI__CompactPixelIndices+0x1c>
 801d422:	3004      	adds	r0, #4
 801d424:	2100      	movs	r1, #0
 801d426:	e7f7      	b.n	801d418 <GUI__CompactPixelIndices+0x6e>
 801d428:	2a04      	cmp	r2, #4
 801d42a:	d115      	bne.n	801d458 <GUI__CompactPixelIndices+0xae>
 801d42c:	4604      	mov	r4, r0
 801d42e:	2901      	cmp	r1, #1
 801d430:	6803      	ldr	r3, [r0, #0]
 801d432:	bf18      	it	ne
 801d434:	6842      	ldrne	r2, [r0, #4]
 801d436:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801d43a:	bf0c      	ite	eq
 801d43c:	2100      	moveq	r1, #0
 801d43e:	3902      	subne	r1, #2
 801d440:	b2db      	uxtb	r3, r3
 801d442:	bf17      	itett	ne
 801d444:	f002 020f 	andne.w	r2, r2, #15
 801d448:	3004      	addeq	r0, #4
 801d44a:	3008      	addne	r0, #8
 801d44c:	4313      	orrne	r3, r2
 801d44e:	f804 3b01 	strb.w	r3, [r4], #1
 801d452:	2900      	cmp	r1, #0
 801d454:	d1eb      	bne.n	801d42e <GUI__CompactPixelIndices+0x84>
 801d456:	e7b6      	b.n	801d3c6 <GUI__CompactPixelIndices+0x1c>
 801d458:	2a01      	cmp	r2, #1
 801d45a:	4603      	mov	r3, r0
 801d45c:	d154      	bne.n	801d508 <GUI__CompactPixelIndices+0x15e>
 801d45e:	681a      	ldr	r2, [r3, #0]
 801d460:	2901      	cmp	r1, #1
 801d462:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 801d466:	b2d2      	uxtb	r2, r2
 801d468:	d04b      	beq.n	801d502 <GUI__CompactPixelIndices+0x158>
 801d46a:	685c      	ldr	r4, [r3, #4]
 801d46c:	2902      	cmp	r1, #2
 801d46e:	ea4f 1484 	mov.w	r4, r4, lsl #6
 801d472:	f004 0440 	and.w	r4, r4, #64	; 0x40
 801d476:	ea42 0204 	orr.w	r2, r2, r4
 801d47a:	d101      	bne.n	801d480 <GUI__CompactPixelIndices+0xd6>
 801d47c:	3308      	adds	r3, #8
 801d47e:	e041      	b.n	801d504 <GUI__CompactPixelIndices+0x15a>
 801d480:	689c      	ldr	r4, [r3, #8]
 801d482:	2903      	cmp	r1, #3
 801d484:	ea4f 1444 	mov.w	r4, r4, lsl #5
 801d488:	f004 0420 	and.w	r4, r4, #32
 801d48c:	ea42 0204 	orr.w	r2, r2, r4
 801d490:	d101      	bne.n	801d496 <GUI__CompactPixelIndices+0xec>
 801d492:	330c      	adds	r3, #12
 801d494:	e036      	b.n	801d504 <GUI__CompactPixelIndices+0x15a>
 801d496:	68dc      	ldr	r4, [r3, #12]
 801d498:	2904      	cmp	r1, #4
 801d49a:	ea4f 1404 	mov.w	r4, r4, lsl #4
 801d49e:	f004 0410 	and.w	r4, r4, #16
 801d4a2:	ea42 0204 	orr.w	r2, r2, r4
 801d4a6:	d101      	bne.n	801d4ac <GUI__CompactPixelIndices+0x102>
 801d4a8:	3310      	adds	r3, #16
 801d4aa:	e02b      	b.n	801d504 <GUI__CompactPixelIndices+0x15a>
 801d4ac:	691c      	ldr	r4, [r3, #16]
 801d4ae:	2905      	cmp	r1, #5
 801d4b0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801d4b4:	f004 0408 	and.w	r4, r4, #8
 801d4b8:	ea42 0204 	orr.w	r2, r2, r4
 801d4bc:	d101      	bne.n	801d4c2 <GUI__CompactPixelIndices+0x118>
 801d4be:	3314      	adds	r3, #20
 801d4c0:	e020      	b.n	801d504 <GUI__CompactPixelIndices+0x15a>
 801d4c2:	695c      	ldr	r4, [r3, #20]
 801d4c4:	2906      	cmp	r1, #6
 801d4c6:	ea4f 0484 	mov.w	r4, r4, lsl #2
 801d4ca:	f004 0404 	and.w	r4, r4, #4
 801d4ce:	ea42 0204 	orr.w	r2, r2, r4
 801d4d2:	d101      	bne.n	801d4d8 <GUI__CompactPixelIndices+0x12e>
 801d4d4:	3318      	adds	r3, #24
 801d4d6:	e015      	b.n	801d504 <GUI__CompactPixelIndices+0x15a>
 801d4d8:	699c      	ldr	r4, [r3, #24]
 801d4da:	3907      	subs	r1, #7
 801d4dc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801d4e0:	bf08      	it	eq
 801d4e2:	331c      	addeq	r3, #28
 801d4e4:	f004 0402 	and.w	r4, r4, #2
 801d4e8:	ea42 0204 	orr.w	r2, r2, r4
 801d4ec:	bf1f      	itttt	ne
 801d4ee:	69dc      	ldrne	r4, [r3, #28]
 801d4f0:	3320      	addne	r3, #32
 801d4f2:	f004 0401 	andne.w	r4, r4, #1
 801d4f6:	4322      	orrne	r2, r4
 801d4f8:	f800 2b01 	strb.w	r2, [r0], #1
 801d4fc:	2900      	cmp	r1, #0
 801d4fe:	d1ae      	bne.n	801d45e <GUI__CompactPixelIndices+0xb4>
 801d500:	e761      	b.n	801d3c6 <GUI__CompactPixelIndices+0x1c>
 801d502:	3304      	adds	r3, #4
 801d504:	2100      	movs	r1, #0
 801d506:	e7f7      	b.n	801d4f8 <GUI__CompactPixelIndices+0x14e>
 801d508:	4401      	add	r1, r0
 801d50a:	f850 2b04 	ldr.w	r2, [r0], #4
 801d50e:	f803 2b01 	strb.w	r2, [r3], #1
 801d512:	4299      	cmp	r1, r3
 801d514:	d1f9      	bne.n	801d50a <GUI__CompactPixelIndices+0x160>
 801d516:	e756      	b.n	801d3c6 <GUI__CompactPixelIndices+0x1c>

0801d518 <GUI__ConvertColor2Index>:
 801d518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d51c:	9f08      	ldr	r7, [sp, #32]
 801d51e:	4604      	mov	r4, r0
 801d520:	460d      	mov	r5, r1
 801d522:	f8d3 8000 	ldr.w	r8, [r3]
 801d526:	2f00      	cmp	r7, #0
 801d528:	bf08      	it	eq
 801d52a:	4607      	moveq	r7, r0
 801d52c:	2a08      	cmp	r2, #8
 801d52e:	dd05      	ble.n	801d53c <GUI__ConvertColor2Index+0x24>
 801d530:	2a10      	cmp	r2, #16
 801d532:	f340 80ad 	ble.w	801d690 <GUI__ConvertColor2Index+0x178>
 801d536:	2000      	movs	r0, #0
 801d538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d53c:	3a01      	subs	r2, #1
 801d53e:	2a07      	cmp	r2, #7
 801d540:	f200 809d 	bhi.w	801d67e <GUI__ConvertColor2Index+0x166>
 801d544:	e8df f002 	tbb	[pc, r2]
 801d548:	7f9b5b11 	.word	0x7f9b5b11
 801d54c:	899b9b9b 	.word	0x899b9b9b
 801d550:	69e0      	ldr	r0, [r4, #28]
 801d552:	f104 0920 	add.w	r9, r4, #32
 801d556:	47c0      	blx	r8
 801d558:	4330      	orrs	r0, r6
 801d55a:	3d08      	subs	r5, #8
 801d55c:	464c      	mov	r4, r9
 801d55e:	b2c6      	uxtb	r6, r0
 801d560:	f807 6b01 	strb.w	r6, [r7], #1
 801d564:	2d00      	cmp	r5, #0
 801d566:	f000 808a 	beq.w	801d67e <GUI__ConvertColor2Index+0x166>
 801d56a:	6820      	ldr	r0, [r4, #0]
 801d56c:	47c0      	blx	r8
 801d56e:	2d01      	cmp	r5, #1
 801d570:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 801d574:	b2c6      	uxtb	r6, r0
 801d576:	f000 8085 	beq.w	801d684 <GUI__ConvertColor2Index+0x16c>
 801d57a:	6860      	ldr	r0, [r4, #4]
 801d57c:	47c0      	blx	r8
 801d57e:	2d02      	cmp	r5, #2
 801d580:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 801d584:	b2c6      	uxtb	r6, r0
 801d586:	d101      	bne.n	801d58c <GUI__ConvertColor2Index+0x74>
 801d588:	3408      	adds	r4, #8
 801d58a:	e07c      	b.n	801d686 <GUI__ConvertColor2Index+0x16e>
 801d58c:	68a0      	ldr	r0, [r4, #8]
 801d58e:	47c0      	blx	r8
 801d590:	2d03      	cmp	r5, #3
 801d592:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 801d596:	b2c6      	uxtb	r6, r0
 801d598:	d101      	bne.n	801d59e <GUI__ConvertColor2Index+0x86>
 801d59a:	340c      	adds	r4, #12
 801d59c:	e073      	b.n	801d686 <GUI__ConvertColor2Index+0x16e>
 801d59e:	68e0      	ldr	r0, [r4, #12]
 801d5a0:	47c0      	blx	r8
 801d5a2:	2d04      	cmp	r5, #4
 801d5a4:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801d5a8:	b2c6      	uxtb	r6, r0
 801d5aa:	d101      	bne.n	801d5b0 <GUI__ConvertColor2Index+0x98>
 801d5ac:	3410      	adds	r4, #16
 801d5ae:	e06a      	b.n	801d686 <GUI__ConvertColor2Index+0x16e>
 801d5b0:	6920      	ldr	r0, [r4, #16]
 801d5b2:	47c0      	blx	r8
 801d5b4:	2d05      	cmp	r5, #5
 801d5b6:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 801d5ba:	b2c6      	uxtb	r6, r0
 801d5bc:	d101      	bne.n	801d5c2 <GUI__ConvertColor2Index+0xaa>
 801d5be:	3414      	adds	r4, #20
 801d5c0:	e061      	b.n	801d686 <GUI__ConvertColor2Index+0x16e>
 801d5c2:	6960      	ldr	r0, [r4, #20]
 801d5c4:	47c0      	blx	r8
 801d5c6:	2d06      	cmp	r5, #6
 801d5c8:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 801d5cc:	b2c6      	uxtb	r6, r0
 801d5ce:	d101      	bne.n	801d5d4 <GUI__ConvertColor2Index+0xbc>
 801d5d0:	3418      	adds	r4, #24
 801d5d2:	e058      	b.n	801d686 <GUI__ConvertColor2Index+0x16e>
 801d5d4:	69a0      	ldr	r0, [r4, #24]
 801d5d6:	47c0      	blx	r8
 801d5d8:	2d07      	cmp	r5, #7
 801d5da:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 801d5de:	b2c6      	uxtb	r6, r0
 801d5e0:	d1b6      	bne.n	801d550 <GUI__ConvertColor2Index+0x38>
 801d5e2:	341c      	adds	r4, #28
 801d5e4:	e04f      	b.n	801d686 <GUI__ConvertColor2Index+0x16e>
 801d5e6:	68e0      	ldr	r0, [r4, #12]
 801d5e8:	f104 0910 	add.w	r9, r4, #16
 801d5ec:	47c0      	blx	r8
 801d5ee:	4330      	orrs	r0, r6
 801d5f0:	3d04      	subs	r5, #4
 801d5f2:	464c      	mov	r4, r9
 801d5f4:	b2c6      	uxtb	r6, r0
 801d5f6:	f807 6b01 	strb.w	r6, [r7], #1
 801d5fa:	2d00      	cmp	r5, #0
 801d5fc:	d03f      	beq.n	801d67e <GUI__ConvertColor2Index+0x166>
 801d5fe:	6820      	ldr	r0, [r4, #0]
 801d600:	47c0      	blx	r8
 801d602:	2d01      	cmp	r5, #1
 801d604:	ea4f 1080 	mov.w	r0, r0, lsl #6
 801d608:	b2c6      	uxtb	r6, r0
 801d60a:	d03e      	beq.n	801d68a <GUI__ConvertColor2Index+0x172>
 801d60c:	6860      	ldr	r0, [r4, #4]
 801d60e:	47c0      	blx	r8
 801d610:	2d02      	cmp	r5, #2
 801d612:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801d616:	b2c6      	uxtb	r6, r0
 801d618:	d101      	bne.n	801d61e <GUI__ConvertColor2Index+0x106>
 801d61a:	3408      	adds	r4, #8
 801d61c:	e036      	b.n	801d68c <GUI__ConvertColor2Index+0x174>
 801d61e:	68a0      	ldr	r0, [r4, #8]
 801d620:	47c0      	blx	r8
 801d622:	2d03      	cmp	r5, #3
 801d624:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 801d628:	b2c6      	uxtb	r6, r0
 801d62a:	d1dc      	bne.n	801d5e6 <GUI__ConvertColor2Index+0xce>
 801d62c:	340c      	adds	r4, #12
 801d62e:	e02d      	b.n	801d68c <GUI__ConvertColor2Index+0x174>
 801d630:	6860      	ldr	r0, [r4, #4]
 801d632:	f104 0908 	add.w	r9, r4, #8
 801d636:	47c0      	blx	r8
 801d638:	4330      	orrs	r0, r6
 801d63a:	3d02      	subs	r5, #2
 801d63c:	464c      	mov	r4, r9
 801d63e:	b2c6      	uxtb	r6, r0
 801d640:	f807 6b01 	strb.w	r6, [r7], #1
 801d644:	b1dd      	cbz	r5, 801d67e <GUI__ConvertColor2Index+0x166>
 801d646:	6820      	ldr	r0, [r4, #0]
 801d648:	47c0      	blx	r8
 801d64a:	2d01      	cmp	r5, #1
 801d64c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801d650:	b2c6      	uxtb	r6, r0
 801d652:	d1ed      	bne.n	801d630 <GUI__ConvertColor2Index+0x118>
 801d654:	3404      	adds	r4, #4
 801d656:	2500      	movs	r5, #0
 801d658:	e7f2      	b.n	801d640 <GUI__ConvertColor2Index+0x128>
 801d65a:	691e      	ldr	r6, [r3, #16]
 801d65c:	b12e      	cbz	r6, 801d66a <GUI__ConvertColor2Index+0x152>
 801d65e:	2301      	movs	r3, #1
 801d660:	462a      	mov	r2, r5
 801d662:	4639      	mov	r1, r7
 801d664:	4620      	mov	r0, r4
 801d666:	47b0      	blx	r6
 801d668:	e009      	b.n	801d67e <GUI__ConvertColor2Index+0x166>
 801d66a:	1e7e      	subs	r6, r7, #1
 801d66c:	f854 0b04 	ldr.w	r0, [r4], #4
 801d670:	47c0      	blx	r8
 801d672:	f806 0f01 	strb.w	r0, [r6, #1]!
 801d676:	43f3      	mvns	r3, r6
 801d678:	442b      	add	r3, r5
 801d67a:	42df      	cmn	r7, r3
 801d67c:	d1f6      	bne.n	801d66c <GUI__ConvertColor2Index+0x154>
 801d67e:	2001      	movs	r0, #1
 801d680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d684:	3404      	adds	r4, #4
 801d686:	2500      	movs	r5, #0
 801d688:	e76a      	b.n	801d560 <GUI__ConvertColor2Index+0x48>
 801d68a:	3404      	adds	r4, #4
 801d68c:	2500      	movs	r5, #0
 801d68e:	e7b2      	b.n	801d5f6 <GUI__ConvertColor2Index+0xde>
 801d690:	691e      	ldr	r6, [r3, #16]
 801d692:	b11e      	cbz	r6, 801d69c <GUI__ConvertColor2Index+0x184>
 801d694:	2302      	movs	r3, #2
 801d696:	462a      	mov	r2, r5
 801d698:	4639      	mov	r1, r7
 801d69a:	e7e4      	b.n	801d666 <GUI__ConvertColor2Index+0x14e>
 801d69c:	3f02      	subs	r7, #2
 801d69e:	f854 0b04 	ldr.w	r0, [r4], #4
 801d6a2:	47c0      	blx	r8
 801d6a4:	3d01      	subs	r5, #1
 801d6a6:	f827 0f02 	strh.w	r0, [r7, #2]!
 801d6aa:	d1f8      	bne.n	801d69e <GUI__ConvertColor2Index+0x186>
 801d6ac:	e7e7      	b.n	801d67e <GUI__ConvertColor2Index+0x166>

0801d6ae <GUI__CompactPixelIndicesEx>:
 801d6ae:	b513      	push	{r0, r1, r4, lr}
 801d6b0:	2400      	movs	r4, #0
 801d6b2:	9400      	str	r4, [sp, #0]
 801d6b4:	f7ff ff30 	bl	801d518 <GUI__ConvertColor2Index>
 801d6b8:	b002      	add	sp, #8
 801d6ba:	bd10      	pop	{r4, pc}

0801d6bc <GUI__ManageCacheEx>:
 801d6bc:	2801      	cmp	r0, #1
 801d6be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d6c0:	4606      	mov	r6, r0
 801d6c2:	460c      	mov	r4, r1
 801d6c4:	dc62      	bgt.n	801d78c <GUI__ManageCacheEx+0xd0>
 801d6c6:	4d33      	ldr	r5, [pc, #204]	; (801d794 <GUI__ManageCacheEx+0xd8>)
 801d6c8:	686b      	ldr	r3, [r5, #4]
 801d6ca:	b103      	cbz	r3, 801d6ce <GUI__ManageCacheEx+0x12>
 801d6cc:	4798      	blx	r3
 801d6ce:	2c01      	cmp	r4, #1
 801d6d0:	d004      	beq.n	801d6dc <GUI__ManageCacheEx+0x20>
 801d6d2:	2c02      	cmp	r4, #2
 801d6d4:	d020      	beq.n	801d718 <GUI__ManageCacheEx+0x5c>
 801d6d6:	2c00      	cmp	r4, #0
 801d6d8:	d158      	bne.n	801d78c <GUI__ManageCacheEx+0xd0>
 801d6da:	e033      	b.n	801d744 <GUI__ManageCacheEx+0x88>
 801d6dc:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801d6e0:	68af      	ldr	r7, [r5, #8]
 801d6e2:	b9af      	cbnz	r7, 801d710 <GUI__ManageCacheEx+0x54>
 801d6e4:	4630      	mov	r0, r6
 801d6e6:	f7f9 faf3 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801d6ea:	9001      	str	r0, [sp, #4]
 801d6ec:	2800      	cmp	r0, #0
 801d6ee:	d04d      	beq.n	801d78c <GUI__ManageCacheEx+0xd0>
 801d6f0:	68c3      	ldr	r3, [r0, #12]
 801d6f2:	210d      	movs	r1, #13
 801d6f4:	a801      	add	r0, sp, #4
 801d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6f8:	4798      	blx	r3
 801d6fa:	4603      	mov	r3, r0
 801d6fc:	2800      	cmp	r0, #0
 801d6fe:	d045      	beq.n	801d78c <GUI__ManageCacheEx+0xd0>
 801d700:	4621      	mov	r1, r4
 801d702:	9801      	ldr	r0, [sp, #4]
 801d704:	4798      	blx	r3
 801d706:	68ab      	ldr	r3, [r5, #8]
 801d708:	4638      	mov	r0, r7
 801d70a:	3301      	adds	r3, #1
 801d70c:	60ab      	str	r3, [r5, #8]
 801d70e:	e03e      	b.n	801d78e <GUI__ManageCacheEx+0xd2>
 801d710:	1c78      	adds	r0, r7, #1
 801d712:	60a8      	str	r0, [r5, #8]
 801d714:	4620      	mov	r0, r4
 801d716:	e03a      	b.n	801d78e <GUI__ManageCacheEx+0xd2>
 801d718:	4630      	mov	r0, r6
 801d71a:	f7f9 fad9 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801d71e:	9001      	str	r0, [sp, #4]
 801d720:	2800      	cmp	r0, #0
 801d722:	d033      	beq.n	801d78c <GUI__ManageCacheEx+0xd0>
 801d724:	68c3      	ldr	r3, [r0, #12]
 801d726:	210d      	movs	r1, #13
 801d728:	a801      	add	r0, sp, #4
 801d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d72c:	4798      	blx	r3
 801d72e:	4604      	mov	r4, r0
 801d730:	2800      	cmp	r0, #0
 801d732:	d02b      	beq.n	801d78c <GUI__ManageCacheEx+0xd0>
 801d734:	682b      	ldr	r3, [r5, #0]
 801d736:	b103      	cbz	r3, 801d73a <GUI__ManageCacheEx+0x7e>
 801d738:	4798      	blx	r3
 801d73a:	2102      	movs	r1, #2
 801d73c:	9801      	ldr	r0, [sp, #4]
 801d73e:	47a0      	blx	r4
 801d740:	2000      	movs	r0, #0
 801d742:	e024      	b.n	801d78e <GUI__ManageCacheEx+0xd2>
 801d744:	00b4      	lsls	r4, r6, #2
 801d746:	192b      	adds	r3, r5, r4
 801d748:	689b      	ldr	r3, [r3, #8]
 801d74a:	2b01      	cmp	r3, #1
 801d74c:	d001      	beq.n	801d752 <GUI__ManageCacheEx+0x96>
 801d74e:	2001      	movs	r0, #1
 801d750:	e015      	b.n	801d77e <GUI__ManageCacheEx+0xc2>
 801d752:	4630      	mov	r0, r6
 801d754:	f7f9 fabc 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801d758:	9001      	str	r0, [sp, #4]
 801d75a:	2800      	cmp	r0, #0
 801d75c:	d0f7      	beq.n	801d74e <GUI__ManageCacheEx+0x92>
 801d75e:	68c3      	ldr	r3, [r0, #12]
 801d760:	210d      	movs	r1, #13
 801d762:	a801      	add	r0, sp, #4
 801d764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d766:	4798      	blx	r3
 801d768:	4606      	mov	r6, r0
 801d76a:	2800      	cmp	r0, #0
 801d76c:	d0ef      	beq.n	801d74e <GUI__ManageCacheEx+0x92>
 801d76e:	4b09      	ldr	r3, [pc, #36]	; (801d794 <GUI__ManageCacheEx+0xd8>)
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	b103      	cbz	r3, 801d776 <GUI__ManageCacheEx+0xba>
 801d774:	4798      	blx	r3
 801d776:	2100      	movs	r1, #0
 801d778:	9801      	ldr	r0, [sp, #4]
 801d77a:	47b0      	blx	r6
 801d77c:	2000      	movs	r0, #0
 801d77e:	4425      	add	r5, r4
 801d780:	68ab      	ldr	r3, [r5, #8]
 801d782:	2b00      	cmp	r3, #0
 801d784:	bf18      	it	ne
 801d786:	3b01      	subne	r3, #1
 801d788:	60ab      	str	r3, [r5, #8]
 801d78a:	e000      	b.n	801d78e <GUI__ManageCacheEx+0xd2>
 801d78c:	2001      	movs	r0, #1
 801d78e:	b003      	add	sp, #12
 801d790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d792:	bf00      	nop
 801d794:	20000418 	.word	0x20000418

0801d798 <GUI__ManageCache>:
 801d798:	4b02      	ldr	r3, [pc, #8]	; (801d7a4 <GUI__ManageCache+0xc>)
 801d79a:	4601      	mov	r1, r0
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	7c58      	ldrb	r0, [r3, #17]
 801d7a0:	f7ff bf8c 	b.w	801d6bc <GUI__ManageCacheEx>
 801d7a4:	20000018 	.word	0x20000018

0801d7a8 <LCD_AA_MixColors16>:
 801d7a8:	0e0b      	lsrs	r3, r1, #24
 801d7aa:	b510      	push	{r4, lr}
 801d7ac:	4c0d      	ldr	r4, [pc, #52]	; (801d7e4 <LCD_AA_MixColors16+0x3c>)
 801d7ae:	d110      	bne.n	801d7d2 <LCD_AA_MixColors16+0x2a>
 801d7b0:	0e03      	lsrs	r3, r0, #24
 801d7b2:	2bff      	cmp	r3, #255	; 0xff
 801d7b4:	d108      	bne.n	801d7c8 <LCD_AA_MixColors16+0x20>
 801d7b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801d7ba:	6863      	ldr	r3, [r4, #4]
 801d7bc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d7c0:	4303      	orrs	r3, r0
 801d7c2:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
 801d7c6:	bd10      	pop	{r4, pc}
 801d7c8:	b91b      	cbnz	r3, 801d7d2 <LCD_AA_MixColors16+0x2a>
 801d7ca:	6862      	ldr	r2, [r4, #4]
 801d7cc:	ea41 0002 	orr.w	r0, r1, r2
 801d7d0:	bd10      	pop	{r4, pc}
 801d7d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d7d6:	4b04      	ldr	r3, [pc, #16]	; (801d7e8 <LCD_AA_MixColors16+0x40>)
 801d7d8:	b2d2      	uxtb	r2, r2
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	4798      	blx	r3
 801d7de:	6861      	ldr	r1, [r4, #4]
 801d7e0:	4308      	orrs	r0, r1
 801d7e2:	bd10      	pop	{r4, pc}
 801d7e4:	20000058 	.word	0x20000058
 801d7e8:	20000030 	.word	0x20000030

0801d7ec <LCD_AA_SetOrMask>:
 801d7ec:	4b02      	ldr	r3, [pc, #8]	; (801d7f8 <LCD_AA_SetOrMask+0xc>)
 801d7ee:	685a      	ldr	r2, [r3, #4]
 801d7f0:	6058      	str	r0, [r3, #4]
 801d7f2:	4610      	mov	r0, r2
 801d7f4:	4770      	bx	lr
 801d7f6:	bf00      	nop
 801d7f8:	20000058 	.word	0x20000058

0801d7fc <LCD_SetClipRectEx>:
 801d7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d7fe:	4c09      	ldr	r4, [pc, #36]	; (801d824 <LCD_SetClipRectEx+0x28>)
 801d800:	4605      	mov	r5, r0
 801d802:	4669      	mov	r1, sp
 801d804:	6823      	ldr	r3, [r4, #0]
 801d806:	7c5a      	ldrb	r2, [r3, #17]
 801d808:	4b07      	ldr	r3, [pc, #28]	; (801d828 <LCD_SetClipRectEx+0x2c>)
 801d80a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d80e:	68c3      	ldr	r3, [r0, #12]
 801d810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d812:	4798      	blx	r3
 801d814:	6820      	ldr	r0, [r4, #0]
 801d816:	466a      	mov	r2, sp
 801d818:	4629      	mov	r1, r5
 801d81a:	3008      	adds	r0, #8
 801d81c:	f7fa f8e9 	bl	80179f2 <GUI__IntersectRects>
 801d820:	b003      	add	sp, #12
 801d822:	bd30      	pop	{r4, r5, pc}
 801d824:	20000018 	.word	0x20000018
 801d828:	2002249c 	.word	0x2002249c

0801d82c <GUI_MEMDEV__WriteToActiveAt>:
 801d82c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d830:	460f      	mov	r7, r1
 801d832:	4690      	mov	r8, r2
 801d834:	4606      	mov	r6, r0
 801d836:	f7f8 fc3f 	bl	80160b8 <GUI_ALLOC_LockH>
 801d83a:	6803      	ldr	r3, [r0, #0]
 801d83c:	ac02      	add	r4, sp, #8
 801d83e:	2116      	movs	r1, #22
 801d840:	68db      	ldr	r3, [r3, #12]
 801d842:	f844 0d04 	str.w	r0, [r4, #-4]!
 801d846:	2000      	movs	r0, #0
 801d848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d84a:	4798      	blx	r3
 801d84c:	4605      	mov	r5, r0
 801d84e:	4620      	mov	r0, r4
 801d850:	f7f8 fc40 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d854:	b11d      	cbz	r5, 801d85e <GUI_MEMDEV__WriteToActiveAt+0x32>
 801d856:	4642      	mov	r2, r8
 801d858:	4639      	mov	r1, r7
 801d85a:	4630      	mov	r0, r6
 801d85c:	47a8      	blx	r5
 801d85e:	b002      	add	sp, #8
 801d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d864 <GUI_MEMDEV__CreateFixed>:
 801d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d868:	4d46      	ldr	r5, [pc, #280]	; (801d984 <GUI_MEMDEV__CreateFixed+0x120>)
 801d86a:	b087      	sub	sp, #28
 801d86c:	461c      	mov	r4, r3
 801d86e:	4681      	mov	r9, r0
 801d870:	682b      	ldr	r3, [r5, #0]
 801d872:	468a      	mov	sl, r1
 801d874:	4690      	mov	r8, r2
 801d876:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d878:	7c5b      	ldrb	r3, [r3, #17]
 801d87a:	2200      	movs	r2, #0
 801d87c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d87e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d880:	f7f9 fa38 	bl	8016cf4 <GUI_DEVICE_Create>
 801d884:	9503      	str	r5, [sp, #12]
 801d886:	4606      	mov	r6, r0
 801d888:	b380      	cbz	r0, 801d8ec <GUI_MEMDEV__CreateFixed+0x88>
 801d88a:	6903      	ldr	r3, [r0, #16]
 801d88c:	689b      	ldr	r3, [r3, #8]
 801d88e:	4798      	blx	r3
 801d890:	f7fa fdfb 	bl	801848a <LCD__GetBPPDevice>
 801d894:	fb00 f508 	mul.w	r5, r0, r8
 801d898:	9002      	str	r0, [sp, #8]
 801d89a:	f7f8 fd55 	bl	8016348 <GUI_ALLOC_RequestSize>
 801d89e:	f017 0701 	ands.w	r7, r7, #1
 801d8a2:	f105 0507 	add.w	r5, r5, #7
 801d8a6:	bf08      	it	eq
 801d8a8:	2304      	moveq	r3, #4
 801d8aa:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 801d8ae:	bf04      	itt	eq
 801d8b0:	fb90 f0f3 	sdiveq	r0, r0, r3
 801d8b4:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 801d8b8:	2c00      	cmp	r4, #0
 801d8ba:	dc44      	bgt.n	801d946 <GUI_MEMDEV__CreateFixed+0xe2>
 801d8bc:	b11d      	cbz	r5, 801d8c6 <GUI_MEMDEV__CreateFixed+0x62>
 801d8be:	3818      	subs	r0, #24
 801d8c0:	fbb0 f0f5 	udiv	r0, r0, r5
 801d8c4:	e000      	b.n	801d8c8 <GUI_MEMDEV__CreateFixed+0x64>
 801d8c6:	4628      	mov	r0, r5
 801d8c8:	4264      	negs	r4, r4
 801d8ca:	4284      	cmp	r4, r0
 801d8cc:	bfa8      	it	ge
 801d8ce:	4604      	movge	r4, r0
 801d8d0:	b977      	cbnz	r7, 801d8f0 <GUI_MEMDEV__CreateFixed+0x8c>
 801d8d2:	9700      	str	r7, [sp, #0]
 801d8d4:	4623      	mov	r3, r4
 801d8d6:	4642      	mov	r2, r8
 801d8d8:	4651      	mov	r1, sl
 801d8da:	4648      	mov	r0, r9
 801d8dc:	f000 fc24 	bl	801e128 <GUI_USAGE_BM_Create>
 801d8e0:	2c00      	cmp	r4, #0
 801d8e2:	4683      	mov	fp, r0
 801d8e4:	dc39      	bgt.n	801d95a <GUI_MEMDEV__CreateFixed+0xf6>
 801d8e6:	4630      	mov	r0, r6
 801d8e8:	f7f9 fa02 	bl	8016cf0 <GUI_DEVICE_Delete>
 801d8ec:	2000      	movs	r0, #0
 801d8ee:	e046      	b.n	801d97e <GUI_MEMDEV__CreateFixed+0x11a>
 801d8f0:	2c00      	cmp	r4, #0
 801d8f2:	ddf8      	ble.n	801d8e6 <GUI_MEMDEV__CreateFixed+0x82>
 801d8f4:	fb05 f004 	mul.w	r0, r5, r4
 801d8f8:	3018      	adds	r0, #24
 801d8fa:	f7f8 fdb7 	bl	801646c <GUI_ALLOC_AllocNoInit>
 801d8fe:	4607      	mov	r7, r0
 801d900:	2800      	cmp	r0, #0
 801d902:	d0f0      	beq.n	801d8e6 <GUI_MEMDEV__CreateFixed+0x82>
 801d904:	f04f 0b00 	mov.w	fp, #0
 801d908:	4638      	mov	r0, r7
 801d90a:	f7f8 fbd5 	bl	80160b8 <GUI_ALLOC_LockH>
 801d90e:	9a02      	ldr	r2, [sp, #8]
 801d910:	4603      	mov	r3, r0
 801d912:	a806      	add	r0, sp, #24
 801d914:	f8a3 9004 	strh.w	r9, [r3, #4]
 801d918:	f840 3d04 	str.w	r3, [r0, #-4]!
 801d91c:	f8a3 a006 	strh.w	sl, [r3, #6]
 801d920:	601e      	str	r6, [r3, #0]
 801d922:	f8a3 8008 	strh.w	r8, [r3, #8]
 801d926:	815c      	strh	r4, [r3, #10]
 801d928:	60dd      	str	r5, [r3, #12]
 801d92a:	611a      	str	r2, [r3, #16]
 801d92c:	f8c3 b014 	str.w	fp, [r3, #20]
 801d930:	f7f8 fbd0 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d936:	60b7      	str	r7, [r6, #8]
 801d938:	6133      	str	r3, [r6, #16]
 801d93a:	9b03      	ldr	r3, [sp, #12]
 801d93c:	681b      	ldr	r3, [r3, #0]
 801d93e:	7c5b      	ldrb	r3, [r3, #17]
 801d940:	61b3      	str	r3, [r6, #24]
 801d942:	4638      	mov	r0, r7
 801d944:	e01b      	b.n	801d97e <GUI_MEMDEV__CreateFixed+0x11a>
 801d946:	2f00      	cmp	r7, #0
 801d948:	d1d4      	bne.n	801d8f4 <GUI_MEMDEV__CreateFixed+0x90>
 801d94a:	9700      	str	r7, [sp, #0]
 801d94c:	4623      	mov	r3, r4
 801d94e:	4642      	mov	r2, r8
 801d950:	4651      	mov	r1, sl
 801d952:	4648      	mov	r0, r9
 801d954:	f000 fbe8 	bl	801e128 <GUI_USAGE_BM_Create>
 801d958:	4683      	mov	fp, r0
 801d95a:	fb05 f004 	mul.w	r0, r5, r4
 801d95e:	3018      	adds	r0, #24
 801d960:	f7f8 fd92 	bl	8016488 <GUI_ALLOC_AllocZero>
 801d964:	4607      	mov	r7, r0
 801d966:	2800      	cmp	r0, #0
 801d968:	d1ce      	bne.n	801d908 <GUI_MEMDEV__CreateFixed+0xa4>
 801d96a:	4630      	mov	r0, r6
 801d96c:	f7f9 f9c0 	bl	8016cf0 <GUI_DEVICE_Delete>
 801d970:	f1bb 0f00 	cmp.w	fp, #0
 801d974:	d0ba      	beq.n	801d8ec <GUI_MEMDEV__CreateFixed+0x88>
 801d976:	4658      	mov	r0, fp
 801d978:	f7f8 fbdc 	bl	8016134 <GUI_ALLOC_Free>
 801d97c:	e7e1      	b.n	801d942 <GUI_MEMDEV__CreateFixed+0xde>
 801d97e:	b007      	add	sp, #28
 801d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d984:	20000018 	.word	0x20000018

0801d988 <GUI_MEMDEV_GetBitsPerPixel>:
 801d988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d98a:	4604      	mov	r4, r0
 801d98c:	b198      	cbz	r0, 801d9b6 <GUI_MEMDEV_GetBitsPerPixel+0x2e>
 801d98e:	f7f9 fc73 	bl	8017278 <GUI_Lock>
 801d992:	4620      	mov	r0, r4
 801d994:	f7f8 fb90 	bl	80160b8 <GUI_ALLOC_LockH>
 801d998:	6803      	ldr	r3, [r0, #0]
 801d99a:	ad02      	add	r5, sp, #8
 801d99c:	691b      	ldr	r3, [r3, #16]
 801d99e:	f845 0d04 	str.w	r0, [r5, #-4]!
 801d9a2:	689b      	ldr	r3, [r3, #8]
 801d9a4:	4798      	blx	r3
 801d9a6:	f7fa fd70 	bl	801848a <LCD__GetBPPDevice>
 801d9aa:	4604      	mov	r4, r0
 801d9ac:	4628      	mov	r0, r5
 801d9ae:	f7f8 fb91 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d9b2:	f7f9 fc57 	bl	8017264 <GUI_Unlock>
 801d9b6:	4620      	mov	r0, r4
 801d9b8:	b003      	add	sp, #12
 801d9ba:	bd30      	pop	{r4, r5, pc}

0801d9bc <GUI_MEMDEV_Delete>:
 801d9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d9be:	4604      	mov	r4, r0
 801d9c0:	b1f0      	cbz	r0, 801da00 <GUI_MEMDEV_Delete+0x44>
 801d9c2:	f7f9 fc59 	bl	8017278 <GUI_Lock>
 801d9c6:	4b0f      	ldr	r3, [pc, #60]	; (801da04 <GUI_MEMDEV_Delete+0x48>)
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d9cc:	429c      	cmp	r4, r3
 801d9ce:	d101      	bne.n	801d9d4 <GUI_MEMDEV_Delete+0x18>
 801d9d0:	f7f8 feec 	bl	80167ac <GUI_SelectLCD>
 801d9d4:	4620      	mov	r0, r4
 801d9d6:	f7f8 fb6f 	bl	80160b8 <GUI_ALLOC_LockH>
 801d9da:	9001      	str	r0, [sp, #4]
 801d9dc:	6940      	ldr	r0, [r0, #20]
 801d9de:	b108      	cbz	r0, 801d9e4 <GUI_MEMDEV_Delete+0x28>
 801d9e0:	f7fc fa7c 	bl	8019edc <GUI_USAGE_DecUseCnt>
 801d9e4:	ad02      	add	r5, sp, #8
 801d9e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801d9ea:	6818      	ldr	r0, [r3, #0]
 801d9ec:	f7f9 f980 	bl	8016cf0 <GUI_DEVICE_Delete>
 801d9f0:	4628      	mov	r0, r5
 801d9f2:	f7f8 fb6f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801d9f6:	4620      	mov	r0, r4
 801d9f8:	f7f8 fb9c 	bl	8016134 <GUI_ALLOC_Free>
 801d9fc:	f7f9 fc32 	bl	8017264 <GUI_Unlock>
 801da00:	b003      	add	sp, #12
 801da02:	bd30      	pop	{r4, r5, pc}
 801da04:	20000018 	.word	0x20000018

0801da08 <GUI_MEMDEV_CreateEx>:
 801da08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801da0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801da0e:	4607      	mov	r7, r0
 801da10:	469a      	mov	sl, r3
 801da12:	4688      	mov	r8, r1
 801da14:	4691      	mov	r9, r2
 801da16:	f7f9 fc2f 	bl	8017278 <GUI_Lock>
 801da1a:	4b19      	ldr	r3, [pc, #100]	; (801da80 <GUI_MEMDEV_CreateEx+0x78>)
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	7c58      	ldrb	r0, [r3, #17]
 801da20:	4b18      	ldr	r3, [pc, #96]	; (801da84 <GUI_MEMDEV_CreateEx+0x7c>)
 801da22:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801da26:	68e3      	ldr	r3, [r4, #12]
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	2b04      	cmp	r3, #4
 801da2c:	d006      	beq.n	801da3c <GUI_MEMDEV_CreateEx+0x34>
 801da2e:	6824      	ldr	r4, [r4, #0]
 801da30:	2c00      	cmp	r4, #0
 801da32:	d1f8      	bne.n	801da26 <GUI_MEMDEV_CreateEx+0x1e>
 801da34:	f7f9 f94c 	bl	8016cd0 <GUI_DEVICE__GetpDriver>
 801da38:	4604      	mov	r4, r0
 801da3a:	b1e0      	cbz	r0, 801da76 <GUI_MEMDEV_CreateEx+0x6e>
 801da3c:	68e3      	ldr	r3, [r4, #12]
 801da3e:	2101      	movs	r1, #1
 801da40:	4620      	mov	r0, r4
 801da42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da44:	4798      	blx	r3
 801da46:	4606      	mov	r6, r0
 801da48:	b190      	cbz	r0, 801da70 <GUI_MEMDEV_CreateEx+0x68>
 801da4a:	6924      	ldr	r4, [r4, #16]
 801da4c:	68a3      	ldr	r3, [r4, #8]
 801da4e:	4798      	blx	r3
 801da50:	3001      	adds	r0, #1
 801da52:	4653      	mov	r3, sl
 801da54:	464a      	mov	r2, r9
 801da56:	bf04      	itt	eq
 801da58:	4c0b      	ldreq	r4, [pc, #44]	; (801da88 <GUI_MEMDEV_CreateEx+0x80>)
 801da5a:	f045 0501 	orreq.w	r5, r5, #1
 801da5e:	4641      	mov	r1, r8
 801da60:	4638      	mov	r0, r7
 801da62:	9402      	str	r4, [sp, #8]
 801da64:	e88d 0060 	stmia.w	sp, {r5, r6}
 801da68:	f7ff fefc 	bl	801d864 <GUI_MEMDEV__CreateFixed>
 801da6c:	4604      	mov	r4, r0
 801da6e:	e000      	b.n	801da72 <GUI_MEMDEV_CreateEx+0x6a>
 801da70:	4604      	mov	r4, r0
 801da72:	f7f9 fbf7 	bl	8017264 <GUI_Unlock>
 801da76:	4620      	mov	r0, r4
 801da78:	b004      	add	sp, #16
 801da7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da7e:	bf00      	nop
 801da80:	20000018 	.word	0x20000018
 801da84:	2002249c 	.word	0x2002249c
 801da88:	0801eeb0 	.word	0x0801eeb0

0801da8c <GUI_MEMDEV_Select>:
 801da8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801da8e:	4606      	mov	r6, r0
 801da90:	f7f9 fbf2 	bl	8017278 <GUI_Lock>
 801da94:	4b11      	ldr	r3, [pc, #68]	; (801dadc <GUI_MEMDEV_Select+0x50>)
 801da96:	681a      	ldr	r2, [r3, #0]
 801da98:	461c      	mov	r4, r3
 801da9a:	6e17      	ldr	r7, [r2, #96]	; 0x60
 801da9c:	b916      	cbnz	r6, 801daa4 <GUI_MEMDEV_Select+0x18>
 801da9e:	f7f8 fe85 	bl	80167ac <GUI_SelectLCD>
 801daa2:	e016      	b.n	801dad2 <GUI_MEMDEV_Select+0x46>
 801daa4:	b10f      	cbz	r7, 801daaa <GUI_MEMDEV_Select+0x1e>
 801daa6:	f7f8 fe81 	bl	80167ac <GUI_SelectLCD>
 801daaa:	f7fd fce7 	bl	801b47c <WM_Deactivate>
 801daae:	4630      	mov	r0, r6
 801dab0:	f7f8 fb02 	bl	80160b8 <GUI_ALLOC_LockH>
 801dab4:	ad02      	add	r5, sp, #8
 801dab6:	6823      	ldr	r3, [r4, #0]
 801dab8:	f845 0d04 	str.w	r0, [r5, #-4]!
 801dabc:	661e      	str	r6, [r3, #96]	; 0x60
 801dabe:	6800      	ldr	r0, [r0, #0]
 801dac0:	f7f9 f956 	bl	8016d70 <GUI_DEVICE_Link>
 801dac4:	4628      	mov	r0, r5
 801dac6:	f7f8 fb05 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801daca:	f7fa fecd 	bl	8018868 <LCD_UpdateColorIndices>
 801dace:	f7fa fa87 	bl	8017fe0 <LCD_SetClipRectMax>
 801dad2:	f7f9 fbc7 	bl	8017264 <GUI_Unlock>
 801dad6:	4638      	mov	r0, r7
 801dad8:	b003      	add	sp, #12
 801dada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dadc:	20000018 	.word	0x20000018

0801dae0 <GUI_MEMDEV_CopyToLCDAt>:
 801dae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dae4:	460c      	mov	r4, r1
 801dae6:	b085      	sub	sp, #20
 801dae8:	4615      	mov	r5, r2
 801daea:	4606      	mov	r6, r0
 801daec:	2800      	cmp	r0, #0
 801daee:	d047      	beq.n	801db80 <GUI_MEMDEV_CopyToLCDAt+0xa0>
 801daf0:	f7f9 fbc2 	bl	8017278 <GUI_Lock>
 801daf4:	2000      	movs	r0, #0
 801daf6:	f7f8 fe7c 	bl	80167f2 <GUI_SetDrawMode>
 801dafa:	4b23      	ldr	r3, [pc, #140]	; (801db88 <GUI_MEMDEV_CopyToLCDAt+0xa8>)
 801dafc:	4607      	mov	r7, r0
 801dafe:	4630      	mov	r0, r6
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 801db06:	f7f8 fad7 	bl	80160b8 <GUI_ALLOC_LockH>
 801db0a:	6803      	ldr	r3, [r0, #0]
 801db0c:	9001      	str	r0, [sp, #4]
 801db0e:	6998      	ldr	r0, [r3, #24]
 801db10:	f7f9 fb2c 	bl	801716c <GUI_SelectLayer>
 801db14:	9a01      	ldr	r2, [sp, #4]
 801db16:	4b1d      	ldr	r3, [pc, #116]	; (801db8c <GUI_MEMDEV_CopyToLCDAt+0xac>)
 801db18:	4681      	mov	r9, r0
 801db1a:	429c      	cmp	r4, r3
 801db1c:	8913      	ldrh	r3, [r2, #8]
 801db1e:	bf08      	it	eq
 801db20:	f9b2 4004 	ldrsheq.w	r4, [r2, #4]
 801db24:	f103 33ff 	add.w	r3, r3, #4294967295
 801db28:	bf08      	it	eq
 801db2a:	f9b2 5006 	ldrsheq.w	r5, [r2, #6]
 801db2e:	4423      	add	r3, r4
 801db30:	f8ad 4008 	strh.w	r4, [sp, #8]
 801db34:	f8ad 500a 	strh.w	r5, [sp, #10]
 801db38:	f8ad 300c 	strh.w	r3, [sp, #12]
 801db3c:	8953      	ldrh	r3, [r2, #10]
 801db3e:	3b01      	subs	r3, #1
 801db40:	442b      	add	r3, r5
 801db42:	f8ad 300e 	strh.w	r3, [sp, #14]
 801db46:	f7fd fc91 	bl	801b46c <WM_Activate>
 801db4a:	a801      	add	r0, sp, #4
 801db4c:	f7f8 fac2 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801db50:	a802      	add	r0, sp, #8
 801db52:	f7fd facf 	bl	801b0f4 <WM__InitIVRSearch>
 801db56:	b958      	cbnz	r0, 801db70 <GUI_MEMDEV_CopyToLCDAt+0x90>
 801db58:	4648      	mov	r0, r9
 801db5a:	f7f9 fb07 	bl	801716c <GUI_SelectLayer>
 801db5e:	4640      	mov	r0, r8
 801db60:	f7ff ff94 	bl	801da8c <GUI_MEMDEV_Select>
 801db64:	4638      	mov	r0, r7
 801db66:	f7f8 fe44 	bl	80167f2 <GUI_SetDrawMode>
 801db6a:	f7f9 fb7b 	bl	8017264 <GUI_Unlock>
 801db6e:	e007      	b.n	801db80 <GUI_MEMDEV_CopyToLCDAt+0xa0>
 801db70:	462a      	mov	r2, r5
 801db72:	4621      	mov	r1, r4
 801db74:	4630      	mov	r0, r6
 801db76:	f000 fb85 	bl	801e284 <GUI_MEMDEV__WriteToActiveOpaque>
 801db7a:	f7fd f9f9 	bl	801af70 <WM__GetNextIVR>
 801db7e:	e7ea      	b.n	801db56 <GUI_MEMDEV_CopyToLCDAt+0x76>
 801db80:	b005      	add	sp, #20
 801db82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db86:	bf00      	nop
 801db88:	20000018 	.word	0x20000018
 801db8c:	fffff001 	.word	0xfffff001

0801db90 <GUI_MEMDEV_CopyToLCD>:
 801db90:	4a01      	ldr	r2, [pc, #4]	; (801db98 <GUI_MEMDEV_CopyToLCD+0x8>)
 801db92:	4611      	mov	r1, r2
 801db94:	f7ff bfa4 	b.w	801dae0 <GUI_MEMDEV_CopyToLCDAt>
 801db98:	fffff001 	.word	0xfffff001

0801db9c <GUI_MEMDEV_Draw>:
 801db9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dba0:	b087      	sub	sp, #28
 801dba2:	4606      	mov	r6, r0
 801dba4:	4698      	mov	r8, r3
 801dba6:	9203      	str	r2, [sp, #12]
 801dba8:	9102      	str	r1, [sp, #8]
 801dbaa:	f7f9 fb65 	bl	8017278 <GUI_Lock>
 801dbae:	4b54      	ldr	r3, [pc, #336]	; (801dd00 <GUI_MEMDEV_Draw+0x164>)
 801dbb0:	681a      	ldr	r2, [r3, #0]
 801dbb2:	469b      	mov	fp, r3
 801dbb4:	7c54      	ldrb	r4, [r2, #17]
 801dbb6:	4a53      	ldr	r2, [pc, #332]	; (801dd04 <GUI_MEMDEV_Draw+0x168>)
 801dbb8:	4620      	mov	r0, r4
 801dbba:	5712      	ldrsb	r2, [r2, r4]
 801dbbc:	2a01      	cmp	r2, #1
 801dbbe:	dd06      	ble.n	801dbce <GUI_MEMDEV_Draw+0x32>
 801dbc0:	f7fa fba6 	bl	8018310 <LCD_GetXSizeEx>
 801dbc4:	4681      	mov	r9, r0
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	f7fa fba5 	bl	8018316 <LCD_GetYSizeEx>
 801dbcc:	e005      	b.n	801dbda <GUI_MEMDEV_Draw+0x3e>
 801dbce:	f7fa fba5 	bl	801831c <LCD_GetVXSizeEx>
 801dbd2:	4681      	mov	r9, r0
 801dbd4:	4620      	mov	r0, r4
 801dbd6:	f7fa fba4 	bl	8018322 <LCD_GetVYSizeEx>
 801dbda:	4604      	mov	r4, r0
 801dbdc:	b336      	cbz	r6, 801dc2c <GUI_MEMDEV_Draw+0x90>
 801dbde:	a905      	add	r1, sp, #20
 801dbe0:	a804      	add	r0, sp, #16
 801dbe2:	f7f8 fcbb 	bl	801655c <GUI_GetOrg>
 801dbe6:	9a04      	ldr	r2, [sp, #16]
 801dbe8:	9b05      	ldr	r3, [sp, #20]
 801dbea:	4491      	add	r9, r2
 801dbec:	f9b6 7000 	ldrsh.w	r7, [r6]
 801dbf0:	441c      	add	r4, r3
 801dbf2:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 801dbf6:	f109 32ff 	add.w	r2, r9, #4294967295
 801dbfa:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 801dbfe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801dc02:	f9b6 9004 	ldrsh.w	r9, [r6, #4]
 801dc06:	3c01      	subs	r4, #1
 801dc08:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801dc0c:	454a      	cmp	r2, r9
 801dc0e:	bfd4      	ite	le
 801dc10:	ebc7 0902 	rsble	r9, r7, r2
 801dc14:	ebc7 0909 	rsbgt	r9, r7, r9
 801dc18:	429c      	cmp	r4, r3
 801dc1a:	bfd4      	ite	le
 801dc1c:	ebc5 0404 	rsble	r4, r5, r4
 801dc20:	ebc5 0403 	rsbgt	r4, r5, r3
 801dc24:	f109 0901 	add.w	r9, r9, #1
 801dc28:	3401      	adds	r4, #1
 801dc2a:	e001      	b.n	801dc30 <GUI_MEMDEV_Draw+0x94>
 801dc2c:	4635      	mov	r5, r6
 801dc2e:	4637      	mov	r7, r6
 801dc30:	f1b8 0f00 	cmp.w	r8, #0
 801dc34:	d101      	bne.n	801dc3a <GUI_MEMDEV_Draw+0x9e>
 801dc36:	f1c4 0800 	rsb	r8, r4, #0
 801dc3a:	f1b9 0f00 	cmp.w	r9, #0
 801dc3e:	dd01      	ble.n	801dc44 <GUI_MEMDEV_Draw+0xa8>
 801dc40:	2c00      	cmp	r4, #0
 801dc42:	dc03      	bgt.n	801dc4c <GUI_MEMDEV_Draw+0xb0>
 801dc44:	f7f9 fb0e 	bl	8017264 <GUI_Unlock>
 801dc48:	2000      	movs	r0, #0
 801dc4a:	e055      	b.n	801dcf8 <GUI_MEMDEV_Draw+0x15c>
 801dc4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc4e:	464a      	mov	r2, r9
 801dc50:	4629      	mov	r1, r5
 801dc52:	4638      	mov	r0, r7
 801dc54:	9300      	str	r3, [sp, #0]
 801dc56:	4643      	mov	r3, r8
 801dc58:	f7ff fed6 	bl	801da08 <GUI_MEMDEV_CreateEx>
 801dc5c:	4606      	mov	r6, r0
 801dc5e:	b930      	cbnz	r0, 801dc6e <GUI_MEMDEV_Draw+0xd2>
 801dc60:	9803      	ldr	r0, [sp, #12]
 801dc62:	9b02      	ldr	r3, [sp, #8]
 801dc64:	4798      	blx	r3
 801dc66:	f7f9 fafd 	bl	8017264 <GUI_Unlock>
 801dc6a:	2001      	movs	r0, #1
 801dc6c:	e044      	b.n	801dcf8 <GUI_MEMDEV_Draw+0x15c>
 801dc6e:	f000 f889 	bl	801dd84 <GUI_MEMDEV_GetYSize>
 801dc72:	4284      	cmp	r4, r0
 801dc74:	4680      	mov	r8, r0
 801dc76:	d006      	beq.n	801dc86 <GUI_MEMDEV_Draw+0xea>
 801dc78:	f8db 3000 	ldr.w	r3, [fp]
 801dc7c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801dc7e:	b110      	cbz	r0, 801dc86 <GUI_MEMDEV_Draw+0xea>
 801dc80:	2132      	movs	r1, #50	; 0x32
 801dc82:	f7fe fa22 	bl	801c0ca <WM__SendMessageNoPara>
 801dc86:	46a2      	mov	sl, r4
 801dc88:	f04f 0900 	mov.w	r9, #0
 801dc8c:	4630      	mov	r0, r6
 801dc8e:	f7ff fefd 	bl	801da8c <GUI_MEMDEV_Select>
 801dc92:	45d0      	cmp	r8, sl
 801dc94:	dd03      	ble.n	801dc9e <GUI_MEMDEV_Draw+0x102>
 801dc96:	4651      	mov	r1, sl
 801dc98:	4630      	mov	r0, r6
 801dc9a:	f000 f88f 	bl	801ddbc <GUI_MEMDEV_ReduceYSize>
 801dc9e:	f1b9 0f00 	cmp.w	r9, #0
 801dca2:	d008      	beq.n	801dcb6 <GUI_MEMDEV_Draw+0x11a>
 801dca4:	4630      	mov	r0, r6
 801dca6:	eb05 0209 	add.w	r2, r5, r9
 801dcaa:	4639      	mov	r1, r7
 801dcac:	f000 f8a2 	bl	801ddf4 <GUI_MEMDEV_SetOrg>
 801dcb0:	4630      	mov	r0, r6
 801dcb2:	f000 f82b 	bl	801dd0c <GUI_MEMDEV_Clear>
 801dcb6:	9b02      	ldr	r3, [sp, #8]
 801dcb8:	9803      	ldr	r0, [sp, #12]
 801dcba:	4798      	blx	r3
 801dcbc:	4b12      	ldr	r3, [pc, #72]	; (801dd08 <GUI_MEMDEV_Draw+0x16c>)
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	b10b      	cbz	r3, 801dcc6 <GUI_MEMDEV_Draw+0x12a>
 801dcc2:	20ff      	movs	r0, #255	; 0xff
 801dcc4:	4798      	blx	r3
 801dcc6:	44c1      	add	r9, r8
 801dcc8:	4630      	mov	r0, r6
 801dcca:	f7ff ff61 	bl	801db90 <GUI_MEMDEV_CopyToLCD>
 801dcce:	ebc8 0a0a 	rsb	sl, r8, sl
 801dcd2:	454c      	cmp	r4, r9
 801dcd4:	dcdd      	bgt.n	801dc92 <GUI_MEMDEV_Draw+0xf6>
 801dcd6:	4630      	mov	r0, r6
 801dcd8:	f7ff fe70 	bl	801d9bc <GUI_MEMDEV_Delete>
 801dcdc:	2000      	movs	r0, #0
 801dcde:	f7ff fed5 	bl	801da8c <GUI_MEMDEV_Select>
 801dce2:	4544      	cmp	r4, r8
 801dce4:	d0ae      	beq.n	801dc44 <GUI_MEMDEV_Draw+0xa8>
 801dce6:	f8db 3000 	ldr.w	r3, [fp]
 801dcea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801dcec:	2800      	cmp	r0, #0
 801dcee:	d0a9      	beq.n	801dc44 <GUI_MEMDEV_Draw+0xa8>
 801dcf0:	2133      	movs	r1, #51	; 0x33
 801dcf2:	f7fe f9ea 	bl	801c0ca <WM__SendMessageNoPara>
 801dcf6:	e7a5      	b.n	801dc44 <GUI_MEMDEV_Draw+0xa8>
 801dcf8:	b007      	add	sp, #28
 801dcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcfe:	bf00      	nop
 801dd00:	20000018 	.word	0x20000018
 801dd04:	2002244c 	.word	0x2002244c
 801dd08:	20000430 	.word	0x20000430

0801dd0c <GUI_MEMDEV_Clear>:
 801dd0c:	b513      	push	{r0, r1, r4, lr}
 801dd0e:	4604      	mov	r4, r0
 801dd10:	b918      	cbnz	r0, 801dd1a <GUI_MEMDEV_Clear+0xe>
 801dd12:	4b10      	ldr	r3, [pc, #64]	; (801dd54 <GUI_MEMDEV_Clear+0x48>)
 801dd14:	681b      	ldr	r3, [r3, #0]
 801dd16:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801dd18:	b1d4      	cbz	r4, 801dd50 <GUI_MEMDEV_Clear+0x44>
 801dd1a:	f7f9 faad 	bl	8017278 <GUI_Lock>
 801dd1e:	4620      	mov	r0, r4
 801dd20:	f7f8 f9ca 	bl	80160b8 <GUI_ALLOC_LockH>
 801dd24:	ab02      	add	r3, sp, #8
 801dd26:	6944      	ldr	r4, [r0, #20]
 801dd28:	f843 0d08 	str.w	r0, [r3, #-8]!
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	f7f8 f9d1 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801dd32:	b15c      	cbz	r4, 801dd4c <GUI_MEMDEV_Clear+0x40>
 801dd34:	4620      	mov	r0, r4
 801dd36:	ac02      	add	r4, sp, #8
 801dd38:	f7f8 f9be 	bl	80160b8 <GUI_ALLOC_LockH>
 801dd3c:	6883      	ldr	r3, [r0, #8]
 801dd3e:	f844 0d04 	str.w	r0, [r4, #-4]!
 801dd42:	689b      	ldr	r3, [r3, #8]
 801dd44:	4798      	blx	r3
 801dd46:	4620      	mov	r0, r4
 801dd48:	f7f8 f9c4 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801dd4c:	f7f9 fa8a 	bl	8017264 <GUI_Unlock>
 801dd50:	b002      	add	sp, #8
 801dd52:	bd10      	pop	{r4, pc}
 801dd54:	20000018 	.word	0x20000018

0801dd58 <GUI_MEMDEV_GetDataPtr>:
 801dd58:	b513      	push	{r0, r1, r4, lr}
 801dd5a:	4604      	mov	r4, r0
 801dd5c:	b170      	cbz	r0, 801dd7c <GUI_MEMDEV_GetDataPtr+0x24>
 801dd5e:	f7f9 fa8b 	bl	8017278 <GUI_Lock>
 801dd62:	4620      	mov	r0, r4
 801dd64:	f7f8 f9a8 	bl	80160b8 <GUI_ALLOC_LockH>
 801dd68:	ab02      	add	r3, sp, #8
 801dd6a:	f100 0418 	add.w	r4, r0, #24
 801dd6e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dd72:	4618      	mov	r0, r3
 801dd74:	f7f8 f9ae 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801dd78:	f7f9 fa74 	bl	8017264 <GUI_Unlock>
 801dd7c:	4620      	mov	r0, r4
 801dd7e:	b002      	add	sp, #8
 801dd80:	bd10      	pop	{r4, pc}
	...

0801dd84 <GUI_MEMDEV_GetYSize>:
 801dd84:	b513      	push	{r0, r1, r4, lr}
 801dd86:	4604      	mov	r4, r0
 801dd88:	f7f9 fa76 	bl	8017278 <GUI_Lock>
 801dd8c:	b91c      	cbnz	r4, 801dd96 <GUI_MEMDEV_GetYSize+0x12>
 801dd8e:	4b0a      	ldr	r3, [pc, #40]	; (801ddb8 <GUI_MEMDEV_GetYSize+0x34>)
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801dd94:	b154      	cbz	r4, 801ddac <GUI_MEMDEV_GetYSize+0x28>
 801dd96:	4620      	mov	r0, r4
 801dd98:	f7f8 f98e 	bl	80160b8 <GUI_ALLOC_LockH>
 801dd9c:	ab02      	add	r3, sp, #8
 801dd9e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801dda2:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dda6:	4618      	mov	r0, r3
 801dda8:	f7f8 f994 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ddac:	f7f9 fa5a 	bl	8017264 <GUI_Unlock>
 801ddb0:	4620      	mov	r0, r4
 801ddb2:	b002      	add	sp, #8
 801ddb4:	bd10      	pop	{r4, pc}
 801ddb6:	bf00      	nop
 801ddb8:	20000018 	.word	0x20000018

0801ddbc <GUI_MEMDEV_ReduceYSize>:
 801ddbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ddbe:	460d      	mov	r5, r1
 801ddc0:	4604      	mov	r4, r0
 801ddc2:	b918      	cbnz	r0, 801ddcc <GUI_MEMDEV_ReduceYSize+0x10>
 801ddc4:	4b0a      	ldr	r3, [pc, #40]	; (801ddf0 <GUI_MEMDEV_ReduceYSize+0x34>)
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801ddca:	b17c      	cbz	r4, 801ddec <GUI_MEMDEV_ReduceYSize+0x30>
 801ddcc:	f7f9 fa54 	bl	8017278 <GUI_Lock>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	f7f8 f971 	bl	80160b8 <GUI_ALLOC_LockH>
 801ddd6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ddda:	9001      	str	r0, [sp, #4]
 801dddc:	42ab      	cmp	r3, r5
 801ddde:	bfc8      	it	gt
 801dde0:	8145      	strhgt	r5, [r0, #10]
 801dde2:	a801      	add	r0, sp, #4
 801dde4:	f7f8 f976 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801dde8:	f7f9 fa3c 	bl	8017264 <GUI_Unlock>
 801ddec:	b003      	add	sp, #12
 801ddee:	bd30      	pop	{r4, r5, pc}
 801ddf0:	20000018 	.word	0x20000018

0801ddf4 <GUI_MEMDEV_SetOrg>:
 801ddf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ddf6:	460d      	mov	r5, r1
 801ddf8:	4614      	mov	r4, r2
 801ddfa:	4606      	mov	r6, r0
 801ddfc:	b918      	cbnz	r0, 801de06 <GUI_MEMDEV_SetOrg+0x12>
 801ddfe:	4b15      	ldr	r3, [pc, #84]	; (801de54 <GUI_MEMDEV_SetOrg+0x60>)
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 801de04:	b326      	cbz	r6, 801de50 <GUI_MEMDEV_SetOrg+0x5c>
 801de06:	b224      	sxth	r4, r4
 801de08:	b22d      	sxth	r5, r5
 801de0a:	f7f9 fa35 	bl	8017278 <GUI_Lock>
 801de0e:	4630      	mov	r0, r6
 801de10:	f7f8 f952 	bl	80160b8 <GUI_ALLOC_LockH>
 801de14:	80c4      	strh	r4, [r0, #6]
 801de16:	8085      	strh	r5, [r0, #4]
 801de18:	9000      	str	r0, [sp, #0]
 801de1a:	f7fa f8e1 	bl	8017fe0 <LCD_SetClipRectMax>
 801de1e:	9b00      	ldr	r3, [sp, #0]
 801de20:	6958      	ldr	r0, [r3, #20]
 801de22:	b180      	cbz	r0, 801de46 <GUI_MEMDEV_SetOrg+0x52>
 801de24:	f7f8 f948 	bl	80160b8 <GUI_ALLOC_LockH>
 801de28:	9b00      	ldr	r3, [sp, #0]
 801de2a:	9001      	str	r0, [sp, #4]
 801de2c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801de30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801de34:	8082      	strh	r2, [r0, #4]
 801de36:	80c3      	strh	r3, [r0, #6]
 801de38:	b112      	cbz	r2, 801de40 <GUI_MEMDEV_SetOrg+0x4c>
 801de3a:	b10b      	cbz	r3, 801de40 <GUI_MEMDEV_SetOrg+0x4c>
 801de3c:	8005      	strh	r5, [r0, #0]
 801de3e:	8044      	strh	r4, [r0, #2]
 801de40:	a801      	add	r0, sp, #4
 801de42:	f7f8 f947 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801de46:	4668      	mov	r0, sp
 801de48:	f7f8 f944 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801de4c:	f7f9 fa0a 	bl	8017264 <GUI_Unlock>
 801de50:	b002      	add	sp, #8
 801de52:	bd70      	pop	{r4, r5, r6, pc}
 801de54:	20000018 	.word	0x20000018

0801de58 <_CreateStaticDevice>:
 801de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de5c:	b087      	sub	sp, #28
 801de5e:	4607      	mov	r7, r0
 801de60:	f7f8 f92a 	bl	80160b8 <GUI_ALLOC_LockH>
 801de64:	f9b0 9000 	ldrsh.w	r9, [r0]
 801de68:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801de6c:	f10d 0818 	add.w	r8, sp, #24
 801de70:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801de74:	ebc9 0606 	rsb	r6, r9, r6
 801de78:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 801de7c:	f848 0d04 	str.w	r0, [r8, #-4]!
 801de80:	3601      	adds	r6, #1
 801de82:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 801de86:	4640      	mov	r0, r8
 801de88:	ebc5 040b 	rsb	r4, r5, fp
 801de8c:	f7f8 f922 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801de90:	2e00      	cmp	r6, #0
 801de92:	f104 0401 	add.w	r4, r4, #1
 801de96:	dd4c      	ble.n	801df32 <_CreateStaticDevice+0xda>
 801de98:	2c00      	cmp	r4, #0
 801de9a:	dd4a      	ble.n	801df32 <_CreateStaticDevice+0xda>
 801de9c:	f1ba 0f00 	cmp.w	sl, #0
 801dea0:	d049      	beq.n	801df36 <_CreateStaticDevice+0xde>
 801dea2:	4650      	mov	r0, sl
 801dea4:	f7f8 f908 	bl	80160b8 <GUI_ALLOC_LockH>
 801dea8:	ab06      	add	r3, sp, #24
 801deaa:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801deae:	f843 0d08 	str.w	r0, [r3, #-8]!
 801deb2:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801deb6:	4618      	mov	r0, r3
 801deb8:	f7f8 f90c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801debc:	454e      	cmp	r6, r9
 801debe:	d101      	bne.n	801dec4 <_CreateStaticDevice+0x6c>
 801dec0:	42ac      	cmp	r4, r5
 801dec2:	d031      	beq.n	801df28 <_CreateStaticDevice+0xd0>
 801dec4:	462a      	mov	r2, r5
 801dec6:	4649      	mov	r1, r9
 801dec8:	4650      	mov	r0, sl
 801deca:	f7ff ff93 	bl	801ddf4 <GUI_MEMDEV_SetOrg>
 801dece:	e02b      	b.n	801df28 <_CreateStaticDevice+0xd0>
 801ded0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ded2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ded6:	6283      	str	r3, [r0, #40]	; 0x28
 801ded8:	4640      	mov	r0, r8
 801deda:	f7f8 f8fb 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801dede:	4628      	mov	r0, r5
 801dee0:	f7ff fdd4 	bl	801da8c <GUI_MEMDEV_Select>
 801dee4:	4680      	mov	r8, r0
 801dee6:	4650      	mov	r0, sl
 801dee8:	f7ff f9a0 	bl	801d22c <GUI__AlphaPreserveTrans>
 801deec:	4628      	mov	r0, r5
 801deee:	f7ff ff33 	bl	801dd58 <GUI_MEMDEV_GetDataPtr>
 801def2:	fb04 f206 	mul.w	r2, r4, r6
 801def6:	4b2b      	ldr	r3, [pc, #172]	; (801dfa4 <_CreateStaticDevice+0x14c>)
 801def8:	492b      	ldr	r1, [pc, #172]	; (801dfa8 <_CreateStaticDevice+0x150>)
 801defa:	0092      	lsls	r2, r2, #2
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	7809      	ldrb	r1, [r1, #0]
 801df00:	4c2a      	ldr	r4, [pc, #168]	; (801dfac <_CreateStaticDevice+0x154>)
 801df02:	4798      	blx	r3
 801df04:	4d2a      	ldr	r5, [pc, #168]	; (801dfb0 <_CreateStaticDevice+0x158>)
 801df06:	4638      	mov	r0, r7
 801df08:	6826      	ldr	r6, [r4, #0]
 801df0a:	602f      	str	r7, [r5, #0]
 801df0c:	f7fd fbb9 	bl	801b682 <WM_GetWindowOrgX>
 801df10:	6020      	str	r0, [r4, #0]
 801df12:	4638      	mov	r0, r7
 801df14:	f7fd f978 	bl	801b208 <WM__Paint1>
 801df18:	2000      	movs	r0, #0
 801df1a:	6026      	str	r6, [r4, #0]
 801df1c:	6028      	str	r0, [r5, #0]
 801df1e:	f7ff f985 	bl	801d22c <GUI__AlphaPreserveTrans>
 801df22:	4640      	mov	r0, r8
 801df24:	f7ff fdb2 	bl	801da8c <GUI_MEMDEV_Select>
 801df28:	4638      	mov	r0, r7
 801df2a:	f7f8 f8bb 	bl	80160a4 <GUI_ALLOC_h2p>
 801df2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801df30:	e035      	b.n	801df9e <_CreateStaticDevice+0x146>
 801df32:	2000      	movs	r0, #0
 801df34:	e033      	b.n	801df9e <_CreateStaticDevice+0x146>
 801df36:	f7fd fb81 	bl	801b63c <WM_GetDesktopWindow>
 801df3a:	4287      	cmp	r7, r0
 801df3c:	d112      	bne.n	801df64 <_CreateStaticDevice+0x10c>
 801df3e:	f7fa fa03 	bl	8018348 <LCD_GetXSize>
 801df42:	4682      	mov	sl, r0
 801df44:	f7fa fa08 	bl	8018358 <LCD_GetYSize>
 801df48:	4556      	cmp	r6, sl
 801df4a:	dc02      	bgt.n	801df52 <_CreateStaticDevice+0xfa>
 801df4c:	4284      	cmp	r4, r0
 801df4e:	dd09      	ble.n	801df64 <_CreateStaticDevice+0x10c>
 801df50:	e000      	b.n	801df54 <_CreateStaticDevice+0xfc>
 801df52:	4656      	mov	r6, sl
 801df54:	4284      	cmp	r4, r0
 801df56:	4631      	mov	r1, r6
 801df58:	bfa8      	it	ge
 801df5a:	4604      	movge	r4, r0
 801df5c:	4638      	mov	r0, r7
 801df5e:	4622      	mov	r2, r4
 801df60:	f7fd fcce 	bl	801b900 <WM_SetSize>
 801df64:	4b13      	ldr	r3, [pc, #76]	; (801dfb4 <_CreateStaticDevice+0x15c>)
 801df66:	f04f 0a01 	mov.w	sl, #1
 801df6a:	4629      	mov	r1, r5
 801df6c:	4632      	mov	r2, r6
 801df6e:	9302      	str	r3, [sp, #8]
 801df70:	4648      	mov	r0, r9
 801df72:	4b11      	ldr	r3, [pc, #68]	; (801dfb8 <_CreateStaticDevice+0x160>)
 801df74:	f8cd a000 	str.w	sl, [sp]
 801df78:	9301      	str	r3, [sp, #4]
 801df7a:	4623      	mov	r3, r4
 801df7c:	f7ff fc72 	bl	801d864 <GUI_MEMDEV__CreateFixed>
 801df80:	4605      	mov	r5, r0
 801df82:	4638      	mov	r0, r7
 801df84:	f7f8 f898 	bl	80160b8 <GUI_ALLOC_LockH>
 801df88:	9005      	str	r0, [sp, #20]
 801df8a:	6245      	str	r5, [r0, #36]	; 0x24
 801df8c:	2d00      	cmp	r5, #0
 801df8e:	d19f      	bne.n	801ded0 <_CreateStaticDevice+0x78>
 801df90:	4640      	mov	r0, r8
 801df92:	f7f8 f89f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801df96:	4638      	mov	r0, r7
 801df98:	f7fd f936 	bl	801b208 <WM__Paint1>
 801df9c:	4628      	mov	r0, r5
 801df9e:	b007      	add	sp, #28
 801dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfa4:	2000003c 	.word	0x2000003c
 801dfa8:	20000434 	.word	0x20000434
 801dfac:	2002245c 	.word	0x2002245c
 801dfb0:	2002250c 	.word	0x2002250c
 801dfb4:	0801eeb0 	.word	0x0801eeb0
 801dfb8:	080234e4 	.word	0x080234e4

0801dfbc <GUI_MEMDEV_Paint1Static>:
 801dfbc:	b538      	push	{r3, r4, r5, lr}
 801dfbe:	4605      	mov	r5, r0
 801dfc0:	2405      	movs	r4, #5
 801dfc2:	4628      	mov	r0, r5
 801dfc4:	f7ff ff48 	bl	801de58 <_CreateStaticDevice>
 801dfc8:	b910      	cbnz	r0, 801dfd0 <GUI_MEMDEV_Paint1Static+0x14>
 801dfca:	3c01      	subs	r4, #1
 801dfcc:	d1f9      	bne.n	801dfc2 <GUI_MEMDEV_Paint1Static+0x6>
 801dfce:	bd38      	pop	{r3, r4, r5, pc}
 801dfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dfd4:	f000 b910 	b.w	801e1f8 <GUI_MEMDEV_Write>

0801dfd8 <GUI_USAGE_BM_AddPixel>:
 801dfd8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801dfdc:	1ac9      	subs	r1, r1, r3
 801dfde:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801dfe2:	1ad2      	subs	r2, r2, r3
 801dfe4:	6903      	ldr	r3, [r0, #16]
 801dfe6:	435a      	muls	r2, r3
 801dfe8:	2380      	movs	r3, #128	; 0x80
 801dfea:	3214      	adds	r2, #20
 801dfec:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 801dff0:	f001 0107 	and.w	r1, r1, #7
 801dff4:	fa43 f101 	asr.w	r1, r3, r1
 801dff8:	5c83      	ldrb	r3, [r0, r2]
 801dffa:	4319      	orrs	r1, r3
 801dffc:	5481      	strb	r1, [r0, r2]
 801dffe:	4770      	bx	lr

0801e000 <GUI_USAGE_BM_GetNextDirty>:
 801e000:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e004:	4293      	cmp	r3, r2
 801e006:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e008:	dd44      	ble.n	801e094 <GUI_USAGE_BM_GetNextDirty+0x94>
 801e00a:	680c      	ldr	r4, [r1, #0]
 801e00c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801e010:	42b4      	cmp	r4, r6
 801e012:	da3f      	bge.n	801e094 <GUI_USAGE_BM_GetNextDirty+0x94>
 801e014:	10e3      	asrs	r3, r4, #3
 801e016:	6907      	ldr	r7, [r0, #16]
 801e018:	461d      	mov	r5, r3
 801e01a:	fb07 3202 	mla	r2, r7, r2, r3
 801e01e:	1e73      	subs	r3, r6, #1
 801e020:	ebc5 03e3 	rsb	r3, r5, r3, asr #3
 801e024:	f102 0515 	add.w	r5, r2, #21
 801e028:	3214      	adds	r2, #20
 801e02a:	4405      	add	r5, r0
 801e02c:	5c82      	ldrb	r2, [r0, r2]
 801e02e:	f004 0007 	and.w	r0, r4, #7
 801e032:	4082      	lsls	r2, r0
 801e034:	b2d2      	uxtb	r2, r2
 801e036:	b93a      	cbnz	r2, 801e048 <GUI_USAGE_BM_GetNextDirty+0x48>
 801e038:	b373      	cbz	r3, 801e098 <GUI_USAGE_BM_GetNextDirty+0x98>
 801e03a:	3408      	adds	r4, #8
 801e03c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801e040:	3b01      	subs	r3, #1
 801e042:	f024 0407 	bic.w	r4, r4, #7
 801e046:	e7f6      	b.n	801e036 <GUI_USAGE_BM_GetNextDirty+0x36>
 801e048:	0617      	lsls	r7, r2, #24
 801e04a:	d403      	bmi.n	801e054 <GUI_USAGE_BM_GetNextDirty+0x54>
 801e04c:	0052      	lsls	r2, r2, #1
 801e04e:	3401      	adds	r4, #1
 801e050:	b2d2      	uxtb	r2, r2
 801e052:	e7f9      	b.n	801e048 <GUI_USAGE_BM_GetNextDirty+0x48>
 801e054:	2aff      	cmp	r2, #255	; 0xff
 801e056:	d006      	beq.n	801e066 <GUI_USAGE_BM_GetNextDirty+0x66>
 801e058:	4620      	mov	r0, r4
 801e05a:	0656      	lsls	r6, r2, #25
 801e05c:	d504      	bpl.n	801e068 <GUI_USAGE_BM_GetNextDirty+0x68>
 801e05e:	0052      	lsls	r2, r2, #1
 801e060:	3001      	adds	r0, #1
 801e062:	b2d2      	uxtb	r2, r2
 801e064:	e7f9      	b.n	801e05a <GUI_USAGE_BM_GetNextDirty+0x5a>
 801e066:	1de0      	adds	r0, r4, #7
 801e068:	f000 0207 	and.w	r2, r0, #7
 801e06c:	2a07      	cmp	r2, #7
 801e06e:	d10d      	bne.n	801e08c <GUI_USAGE_BM_GetNextDirty+0x8c>
 801e070:	3b01      	subs	r3, #1
 801e072:	d40b      	bmi.n	801e08c <GUI_USAGE_BM_GetNextDirty+0x8c>
 801e074:	f815 2b01 	ldrb.w	r2, [r5], #1
 801e078:	2aff      	cmp	r2, #255	; 0xff
 801e07a:	d101      	bne.n	801e080 <GUI_USAGE_BM_GetNextDirty+0x80>
 801e07c:	3008      	adds	r0, #8
 801e07e:	e7f7      	b.n	801e070 <GUI_USAGE_BM_GetNextDirty+0x70>
 801e080:	0613      	lsls	r3, r2, #24
 801e082:	d503      	bpl.n	801e08c <GUI_USAGE_BM_GetNextDirty+0x8c>
 801e084:	0052      	lsls	r2, r2, #1
 801e086:	3001      	adds	r0, #1
 801e088:	b2d2      	uxtb	r2, r2
 801e08a:	e7f9      	b.n	801e080 <GUI_USAGE_BM_GetNextDirty+0x80>
 801e08c:	1b00      	subs	r0, r0, r4
 801e08e:	600c      	str	r4, [r1, #0]
 801e090:	3001      	adds	r0, #1
 801e092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e094:	2000      	movs	r0, #0
 801e096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e098:	4618      	mov	r0, r3
 801e09a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e09c <_GUI_USAGE_BM_Delete>:
 801e09c:	f7f8 b84a 	b.w	8016134 <GUI_ALLOC_Free>

0801e0a0 <GUI_USAGE_BM_Clear>:
 801e0a0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e0a4:	2100      	movs	r1, #0
 801e0a6:	6902      	ldr	r2, [r0, #16]
 801e0a8:	3014      	adds	r0, #20
 801e0aa:	435a      	muls	r2, r3
 801e0ac:	f000 bd8b 	b.w	801ebc6 <memset>

0801e0b0 <GUI_USAGE_BM_AddHLine>:
 801e0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0b2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e0b6:	1b09      	subs	r1, r1, r4
 801e0b8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801e0bc:	42a1      	cmp	r1, r4
 801e0be:	da32      	bge.n	801e126 <GUI_USAGE_BM_AddHLine+0x76>
 801e0c0:	440b      	add	r3, r1
 801e0c2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801e0c6:	10ce      	asrs	r6, r1, #3
 801e0c8:	f001 0407 	and.w	r4, r1, #7
 801e0cc:	3b01      	subs	r3, #1
 801e0ce:	1b52      	subs	r2, r2, r5
 801e0d0:	6905      	ldr	r5, [r0, #16]
 801e0d2:	21ff      	movs	r1, #255	; 0xff
 801e0d4:	43df      	mvns	r7, r3
 801e0d6:	fb05 6502 	mla	r5, r5, r2, r6
 801e0da:	fa41 f404 	asr.w	r4, r1, r4
 801e0de:	f007 0707 	and.w	r7, r7, #7
 801e0e2:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 801e0e6:	f105 0514 	add.w	r5, r5, #20
 801e0ea:	b2e4      	uxtb	r4, r4
 801e0ec:	fa01 f707 	lsl.w	r7, r1, r7
 801e0f0:	eb00 0205 	add.w	r2, r0, r5
 801e0f4:	f810 e005 	ldrb.w	lr, [r0, r5]
 801e0f8:	b2ff      	uxtb	r7, r7
 801e0fa:	d104      	bne.n	801e106 <GUI_USAGE_BM_AddHLine+0x56>
 801e0fc:	403c      	ands	r4, r7
 801e0fe:	ea4e 0404 	orr.w	r4, lr, r4
 801e102:	5544      	strb	r4, [r0, r5]
 801e104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e106:	ea44 040e 	orr.w	r4, r4, lr
 801e10a:	1c53      	adds	r3, r2, #1
 801e10c:	5544      	strb	r4, [r0, r5]
 801e10e:	1e75      	subs	r5, r6, #1
 801e110:	2d00      	cmp	r5, #0
 801e112:	dd05      	ble.n	801e120 <GUI_USAGE_BM_AddHLine+0x70>
 801e114:	4618      	mov	r0, r3
 801e116:	462a      	mov	r2, r5
 801e118:	f000 fd55 	bl	801ebc6 <memset>
 801e11c:	4603      	mov	r3, r0
 801e11e:	442b      	add	r3, r5
 801e120:	781c      	ldrb	r4, [r3, #0]
 801e122:	433c      	orrs	r4, r7
 801e124:	701c      	strb	r4, [r3, #0]
 801e126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e128 <GUI_USAGE_BM_Create>:
 801e128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e12c:	f102 040f 	add.w	r4, r2, #15
 801e130:	4681      	mov	r9, r0
 801e132:	4688      	mov	r8, r1
 801e134:	4617      	mov	r7, r2
 801e136:	1124      	asrs	r4, r4, #4
 801e138:	461e      	mov	r6, r3
 801e13a:	0064      	lsls	r4, r4, #1
 801e13c:	fb03 f004 	mul.w	r0, r3, r4
 801e140:	3014      	adds	r0, #20
 801e142:	f7f8 f9a1 	bl	8016488 <GUI_ALLOC_AllocZero>
 801e146:	4605      	mov	r5, r0
 801e148:	b1b8      	cbz	r0, 801e17a <GUI_USAGE_BM_Create+0x52>
 801e14a:	f7f9 f895 	bl	8017278 <GUI_Lock>
 801e14e:	4628      	mov	r0, r5
 801e150:	f7f7 ffb2 	bl	80160b8 <GUI_ALLOC_LockH>
 801e154:	4a0b      	ldr	r2, [pc, #44]	; (801e184 <GUI_USAGE_BM_Create+0x5c>)
 801e156:	4603      	mov	r3, r0
 801e158:	a802      	add	r0, sp, #8
 801e15a:	609a      	str	r2, [r3, #8]
 801e15c:	2201      	movs	r2, #1
 801e15e:	f840 3d04 	str.w	r3, [r0, #-4]!
 801e162:	809f      	strh	r7, [r3, #4]
 801e164:	f8a3 9000 	strh.w	r9, [r3]
 801e168:	f8a3 8002 	strh.w	r8, [r3, #2]
 801e16c:	80de      	strh	r6, [r3, #6]
 801e16e:	819a      	strh	r2, [r3, #12]
 801e170:	611c      	str	r4, [r3, #16]
 801e172:	f7f7 ffaf 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e176:	f7f9 f875 	bl	8017264 <GUI_Unlock>
 801e17a:	4628      	mov	r0, r5
 801e17c:	b003      	add	sp, #12
 801e17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e182:	bf00      	nop
 801e184:	08023690 	.word	0x08023690

0801e188 <GUI_MEMDEV_WriteAt>:
 801e188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e18a:	460c      	mov	r4, r1
 801e18c:	4615      	mov	r5, r2
 801e18e:	4606      	mov	r6, r0
 801e190:	b370      	cbz	r0, 801e1f0 <GUI_MEMDEV_WriteAt+0x68>
 801e192:	f7f9 f871 	bl	8017278 <GUI_Lock>
 801e196:	4630      	mov	r0, r6
 801e198:	f7f7 ff8e 	bl	80160b8 <GUI_ALLOC_LockH>
 801e19c:	4b15      	ldr	r3, [pc, #84]	; (801e1f4 <GUI_MEMDEV_WriteAt+0x6c>)
 801e19e:	9001      	str	r0, [sp, #4]
 801e1a0:	429c      	cmp	r4, r3
 801e1a2:	8903      	ldrh	r3, [r0, #8]
 801e1a4:	bf08      	it	eq
 801e1a6:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 801e1aa:	f103 33ff 	add.w	r3, r3, #4294967295
 801e1ae:	bf08      	it	eq
 801e1b0:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 801e1b4:	4423      	add	r3, r4
 801e1b6:	f8ad 4008 	strh.w	r4, [sp, #8]
 801e1ba:	f8ad 500a 	strh.w	r5, [sp, #10]
 801e1be:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e1c2:	8943      	ldrh	r3, [r0, #10]
 801e1c4:	a801      	add	r0, sp, #4
 801e1c6:	3b01      	subs	r3, #1
 801e1c8:	442b      	add	r3, r5
 801e1ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e1ce:	f7f7 ff81 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e1d2:	a802      	add	r0, sp, #8
 801e1d4:	f7fc ff8e 	bl	801b0f4 <WM__InitIVRSearch>
 801e1d8:	b910      	cbnz	r0, 801e1e0 <GUI_MEMDEV_WriteAt+0x58>
 801e1da:	f7f9 f843 	bl	8017264 <GUI_Unlock>
 801e1de:	e007      	b.n	801e1f0 <GUI_MEMDEV_WriteAt+0x68>
 801e1e0:	462a      	mov	r2, r5
 801e1e2:	4621      	mov	r1, r4
 801e1e4:	4630      	mov	r0, r6
 801e1e6:	f7ff fb21 	bl	801d82c <GUI_MEMDEV__WriteToActiveAt>
 801e1ea:	f7fc fec1 	bl	801af70 <WM__GetNextIVR>
 801e1ee:	e7f3      	b.n	801e1d8 <GUI_MEMDEV_WriteAt+0x50>
 801e1f0:	b004      	add	sp, #16
 801e1f2:	bd70      	pop	{r4, r5, r6, pc}
 801e1f4:	fffff001 	.word	0xfffff001

0801e1f8 <GUI_MEMDEV_Write>:
 801e1f8:	4a01      	ldr	r2, [pc, #4]	; (801e200 <GUI_MEMDEV_Write+0x8>)
 801e1fa:	4611      	mov	r1, r2
 801e1fc:	f7ff bfc4 	b.w	801e188 <GUI_MEMDEV_WriteAt>
 801e200:	fffff001 	.word	0xfffff001

0801e204 <_Convert16>:
 801e204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e208:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801e20c:	4681      	mov	r9, r0
 801e20e:	460d      	mov	r5, r1
 801e210:	4616      	mov	r6, r2
 801e212:	461f      	mov	r7, r3
 801e214:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801e218:	4614      	mov	r4, r2
 801e21a:	4688      	mov	r8, r1
 801e21c:	f839 0b02 	ldrh.w	r0, [r9], #2
 801e220:	47d8      	blx	fp
 801e222:	47d0      	blx	sl
 801e224:	3c01      	subs	r4, #1
 801e226:	f848 0b04 	str.w	r0, [r8], #4
 801e22a:	d1f7      	bne.n	801e21c <_Convert16+0x18>
 801e22c:	2f1f      	cmp	r7, #31
 801e22e:	d806      	bhi.n	801e23e <_Convert16+0x3a>
 801e230:	463a      	mov	r2, r7
 801e232:	4631      	mov	r1, r6
 801e234:	4628      	mov	r0, r5
 801e236:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e23a:	f7ff b8b6 	b.w	801d3aa <GUI__CompactPixelIndices>
 801e23e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e242 <_Convert8>:
 801e242:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e246:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801e24a:	4680      	mov	r8, r0
 801e24c:	460d      	mov	r5, r1
 801e24e:	4616      	mov	r6, r2
 801e250:	461f      	mov	r7, r3
 801e252:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801e256:	4689      	mov	r9, r1
 801e258:	4604      	mov	r4, r0
 801e25a:	f814 0b01 	ldrb.w	r0, [r4], #1
 801e25e:	47d8      	blx	fp
 801e260:	47d0      	blx	sl
 801e262:	1b33      	subs	r3, r6, r4
 801e264:	f849 0b04 	str.w	r0, [r9], #4
 801e268:	eb18 0f03 	cmn.w	r8, r3
 801e26c:	d1f5      	bne.n	801e25a <_Convert8+0x18>
 801e26e:	2f1f      	cmp	r7, #31
 801e270:	d806      	bhi.n	801e280 <_Convert8+0x3e>
 801e272:	463a      	mov	r2, r7
 801e274:	4631      	mov	r1, r6
 801e276:	4628      	mov	r0, r5
 801e278:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e27c:	f7ff b895 	b.w	801d3aa <GUI__CompactPixelIndices>
 801e280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e284 <GUI_MEMDEV__WriteToActiveOpaque>:
 801e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e288:	b09b      	sub	sp, #108	; 0x6c
 801e28a:	4605      	mov	r5, r0
 801e28c:	9108      	str	r1, [sp, #32]
 801e28e:	9209      	str	r2, [sp, #36]	; 0x24
 801e290:	2800      	cmp	r0, #0
 801e292:	f000 8399 	beq.w	801e9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801e296:	f7f7 ff0f 	bl	80160b8 <GUI_ALLOC_LockH>
 801e29a:	ab1a      	add	r3, sp, #104	; 0x68
 801e29c:	6944      	ldr	r4, [r0, #20]
 801e29e:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	f7f7 ff16 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e2a8:	4628      	mov	r0, r5
 801e2aa:	f7ff fb6d 	bl	801d988 <GUI_MEMDEV_GetBitsPerPixel>
 801e2ae:	2808      	cmp	r0, #8
 801e2b0:	4607      	mov	r7, r0
 801e2b2:	4ea5      	ldr	r6, [pc, #660]	; (801e548 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 801e2b4:	dd02      	ble.n	801e2bc <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 801e2b6:	2c00      	cmp	r4, #0
 801e2b8:	f000 81c9 	beq.w	801e64e <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 801e2bc:	2301      	movs	r3, #1
 801e2be:	2700      	movs	r7, #0
 801e2c0:	4628      	mov	r0, r5
 801e2c2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 801e2c6:	9319      	str	r3, [sp, #100]	; 0x64
 801e2c8:	930d      	str	r3, [sp, #52]	; 0x34
 801e2ca:	9718      	str	r7, [sp, #96]	; 0x60
 801e2cc:	f7f7 fef4 	bl	80160b8 <GUI_ALLOC_LockH>
 801e2d0:	6802      	ldr	r2, [r0, #0]
 801e2d2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801e2d6:	6912      	ldr	r2, [r2, #16]
 801e2d8:	930e      	str	r3, [sp, #56]	; 0x38
 801e2da:	6853      	ldr	r3, [r2, #4]
 801e2dc:	6832      	ldr	r2, [r6, #0]
 801e2de:	f849 0d14 	str.w	r0, [r9, #-20]!
 801e2e2:	6904      	ldr	r4, [r0, #16]
 801e2e4:	f8d0 8014 	ldr.w	r8, [r0, #20]
 801e2e8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801e2ec:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 801e2f0:	7c50      	ldrb	r0, [r2, #17]
 801e2f2:	930c      	str	r3, [sp, #48]	; 0x30
 801e2f4:	f7fa f840 	bl	8018378 <GUI_GetBitsPerPixelEx>
 801e2f8:	6832      	ldr	r2, [r6, #0]
 801e2fa:	900b      	str	r0, [sp, #44]	; 0x2c
 801e2fc:	7c50      	ldrb	r0, [r2, #17]
 801e2fe:	f7fa f859 	bl	80183b4 <GUI_GetpfIndex2ColorEx>
 801e302:	900a      	str	r0, [sp, #40]	; 0x28
 801e304:	4648      	mov	r0, r9
 801e306:	f7f7 fee5 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e30a:	2c08      	cmp	r4, #8
 801e30c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e30e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e310:	d904      	bls.n	801e31c <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 801e312:	2c10      	cmp	r4, #16
 801e314:	bf8c      	ite	hi
 801e316:	2304      	movhi	r3, #4
 801e318:	2302      	movls	r3, #2
 801e31a:	e005      	b.n	801e328 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 801e31c:	2c01      	cmp	r4, #1
 801e31e:	d103      	bne.n	801e328 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 801e320:	ab18      	add	r3, sp, #96	; 0x60
 801e322:	940d      	str	r4, [sp, #52]	; 0x34
 801e324:	930a      	str	r3, [sp, #40]	; 0x28
 801e326:	e001      	b.n	801e32c <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801e328:	930d      	str	r3, [sp, #52]	; 0x34
 801e32a:	970a      	str	r7, [sp, #40]	; 0x28
 801e32c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e32e:	4293      	cmp	r3, r2
 801e330:	f000 80df 	beq.w	801e4f2 <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 801e334:	6833      	ldr	r3, [r6, #0]
 801e336:	7c58      	ldrb	r0, [r3, #17]
 801e338:	f7fa f844 	bl	80183c4 <GUI_GetpfColor2IndexEx>
 801e33c:	900f      	str	r0, [sp, #60]	; 0x3c
 801e33e:	ea4f 008b 	mov.w	r0, fp, lsl #2
 801e342:	f7f8 f893 	bl	801646c <GUI_ALLOC_AllocNoInit>
 801e346:	9010      	str	r0, [sp, #64]	; 0x40
 801e348:	2800      	cmp	r0, #0
 801e34a:	f000 833d 	beq.w	801e9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801e34e:	4628      	mov	r0, r5
 801e350:	f7ff fd02 	bl	801dd58 <GUI_MEMDEV_GetDataPtr>
 801e354:	4605      	mov	r5, r0
 801e356:	f1b8 0f00 	cmp.w	r8, #0
 801e35a:	f000 80b9 	beq.w	801e4d0 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 801e35e:	4640      	mov	r0, r8
 801e360:	f7f7 feaa 	bl	80160b8 <GUI_ALLOC_LockH>
 801e364:	eb05 030a 	add.w	r3, r5, sl
 801e368:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e36c:	9311      	str	r3, [sp, #68]	; 0x44
 801e36e:	2300      	movs	r3, #0
 801e370:	9016      	str	r0, [sp, #88]	; 0x58
 801e372:	9309      	str	r3, [sp, #36]	; 0x24
 801e374:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e378:	ebca 0703 	rsb	r7, sl, r3
 801e37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e37e:	4293      	cmp	r3, r2
 801e380:	f340 80a2 	ble.w	801e4c8 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 801e384:	2300      	movs	r3, #0
 801e386:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e388:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 801e38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e38e:	9317      	str	r3, [sp, #92]	; 0x5c
 801e390:	6883      	ldr	r3, [r0, #8]
 801e392:	4641      	mov	r1, r8
 801e394:	695b      	ldr	r3, [r3, #20]
 801e396:	4798      	blx	r3
 801e398:	4583      	cmp	fp, r0
 801e39a:	4605      	mov	r5, r0
 801e39c:	d128      	bne.n	801e3f0 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 801e39e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e3a0:	f7f7 fe8a 	bl	80160b8 <GUI_ALLOC_LockH>
 801e3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3a6:	2c08      	cmp	r4, #8
 801e3a8:	4601      	mov	r1, r0
 801e3aa:	9301      	str	r3, [sp, #4]
 801e3ac:	465a      	mov	r2, fp
 801e3ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e3b0:	9014      	str	r0, [sp, #80]	; 0x50
 801e3b2:	4638      	mov	r0, r7
 801e3b4:	9300      	str	r3, [sp, #0]
 801e3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3b8:	d902      	bls.n	801e3c0 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 801e3ba:	f7ff ff23 	bl	801e204 <_Convert16>
 801e3be:	e001      	b.n	801e3c4 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 801e3c0:	f7ff ff3f 	bl	801e242 <_Convert8>
 801e3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3c6:	ad1a      	add	r5, sp, #104	; 0x68
 801e3c8:	9808      	ldr	r0, [sp, #32]
 801e3ca:	465a      	mov	r2, fp
 801e3cc:	9305      	str	r3, [sp, #20]
 801e3ce:	4649      	mov	r1, r9
 801e3d0:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 801e3d4:	9304      	str	r3, [sp, #16]
 801e3d6:	2300      	movs	r3, #0
 801e3d8:	9303      	str	r3, [sp, #12]
 801e3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3dc:	9302      	str	r3, [sp, #8]
 801e3de:	2301      	movs	r3, #1
 801e3e0:	9301      	str	r3, [sp, #4]
 801e3e2:	9300      	str	r3, [sp, #0]
 801e3e4:	f7f9 fcea 	bl	8017dbc <LCD_DrawBitmap>
 801e3e8:	4628      	mov	r0, r5
 801e3ea:	f7f7 fe73 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e3ee:	e062      	b.n	801e4b6 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 801e3f0:	2c01      	cmp	r4, #1
 801e3f2:	d002      	beq.n	801e3fa <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 801e3f4:	f04f 0801 	mov.w	r8, #1
 801e3f8:	e057      	b.n	801e4aa <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 801e3fa:	2d00      	cmp	r5, #0
 801e3fc:	d05b      	beq.n	801e4b6 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 801e3fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e400:	462a      	mov	r2, r5
 801e402:	9e08      	ldr	r6, [sp, #32]
 801e404:	4649      	mov	r1, r9
 801e406:	f000 0307 	and.w	r3, r0, #7
 801e40a:	f8cd a00c 	str.w	sl, [sp, #12]
 801e40e:	9306      	str	r3, [sp, #24]
 801e410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e412:	9305      	str	r3, [sp, #20]
 801e414:	2308      	movs	r3, #8
 801e416:	fb90 f3f3 	sdiv	r3, r0, r3
 801e41a:	443b      	add	r3, r7
 801e41c:	4430      	add	r0, r6
 801e41e:	9304      	str	r3, [sp, #16]
 801e420:	2301      	movs	r3, #1
 801e422:	9302      	str	r3, [sp, #8]
 801e424:	9301      	str	r3, [sp, #4]
 801e426:	9300      	str	r3, [sp, #0]
 801e428:	f7f9 fbdc 	bl	8017be4 <LCD__DrawBitmap_1bpp>
 801e42c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e42e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e430:	4641      	mov	r1, r8
 801e432:	441d      	add	r5, r3
 801e434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e436:	6883      	ldr	r3, [r0, #8]
 801e438:	9517      	str	r5, [sp, #92]	; 0x5c
 801e43a:	695b      	ldr	r3, [r3, #20]
 801e43c:	4798      	blx	r3
 801e43e:	4605      	mov	r5, r0
 801e440:	e7db      	b.n	801e3fa <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 801e442:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e444:	f7f7 fe38 	bl	80160b8 <GUI_ALLOC_LockH>
 801e448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e44a:	4601      	mov	r1, r0
 801e44c:	9014      	str	r0, [sp, #80]	; 0x50
 801e44e:	9301      	str	r3, [sp, #4]
 801e450:	2c08      	cmp	r4, #8
 801e452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e454:	462a      	mov	r2, r5
 801e456:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e458:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e45a:	9300      	str	r3, [sp, #0]
 801e45c:	fb00 7006 	mla	r0, r0, r6, r7
 801e460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e462:	d925      	bls.n	801e4b0 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 801e464:	f7ff fece 	bl	801e204 <_Convert16>
 801e468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e46a:	462a      	mov	r2, r5
 801e46c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e46e:	4649      	mov	r1, r9
 801e470:	9305      	str	r3, [sp, #20]
 801e472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e474:	9e08      	ldr	r6, [sp, #32]
 801e476:	9304      	str	r3, [sp, #16]
 801e478:	2300      	movs	r3, #0
 801e47a:	4430      	add	r0, r6
 801e47c:	f8cd 8004 	str.w	r8, [sp, #4]
 801e480:	9303      	str	r3, [sp, #12]
 801e482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e484:	f8cd 8000 	str.w	r8, [sp]
 801e488:	9302      	str	r3, [sp, #8]
 801e48a:	2301      	movs	r3, #1
 801e48c:	f7f9 fc96 	bl	8017dbc <LCD_DrawBitmap>
 801e490:	a814      	add	r0, sp, #80	; 0x50
 801e492:	f7f7 fe1f 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e496:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e498:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e49a:	a917      	add	r1, sp, #92	; 0x5c
 801e49c:	441d      	add	r5, r3
 801e49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4a0:	6883      	ldr	r3, [r0, #8]
 801e4a2:	9517      	str	r5, [sp, #92]	; 0x5c
 801e4a4:	695b      	ldr	r3, [r3, #20]
 801e4a6:	4798      	blx	r3
 801e4a8:	4605      	mov	r5, r0
 801e4aa:	2d00      	cmp	r5, #0
 801e4ac:	d1c9      	bne.n	801e442 <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 801e4ae:	e002      	b.n	801e4b6 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 801e4b0:	f7ff fec7 	bl	801e242 <_Convert8>
 801e4b4:	e7d8      	b.n	801e468 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 801e4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4b8:	f109 0901 	add.w	r9, r9, #1
 801e4bc:	3301      	adds	r3, #1
 801e4be:	9309      	str	r3, [sp, #36]	; 0x24
 801e4c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4c2:	4453      	add	r3, sl
 801e4c4:	9311      	str	r3, [sp, #68]	; 0x44
 801e4c6:	e755      	b.n	801e374 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 801e4c8:	a816      	add	r0, sp, #88	; 0x58
 801e4ca:	f7f7 fe03 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e4ce:	e00e      	b.n	801e4ee <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 801e4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4d2:	465a      	mov	r2, fp
 801e4d4:	9004      	str	r0, [sp, #16]
 801e4d6:	9305      	str	r3, [sp, #20]
 801e4d8:	2301      	movs	r3, #1
 801e4da:	f8cd a00c 	str.w	sl, [sp, #12]
 801e4de:	9301      	str	r3, [sp, #4]
 801e4e0:	9300      	str	r3, [sp, #0]
 801e4e2:	9402      	str	r4, [sp, #8]
 801e4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e4e8:	9808      	ldr	r0, [sp, #32]
 801e4ea:	f7f9 fc67 	bl	8017dbc <LCD_DrawBitmap>
 801e4ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e4f0:	e268      	b.n	801e9c4 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 801e4f2:	4628      	mov	r0, r5
 801e4f4:	f7ff fc30 	bl	801dd58 <GUI_MEMDEV_GetDataPtr>
 801e4f8:	4607      	mov	r7, r0
 801e4fa:	f1b8 0f00 	cmp.w	r8, #0
 801e4fe:	f000 809a 	beq.w	801e636 <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 801e502:	2500      	movs	r5, #0
 801e504:	4640      	mov	r0, r8
 801e506:	f7f7 fdd7 	bl	80160b8 <GUI_ALLOC_LockH>
 801e50a:	9016      	str	r0, [sp, #88]	; 0x58
 801e50c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e50e:	42ab      	cmp	r3, r5
 801e510:	f340 808d 	ble.w	801e62e <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 801e514:	2300      	movs	r3, #0
 801e516:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e518:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 801e51c:	462a      	mov	r2, r5
 801e51e:	9317      	str	r3, [sp, #92]	; 0x5c
 801e520:	6883      	ldr	r3, [r0, #8]
 801e522:	4641      	mov	r1, r8
 801e524:	695b      	ldr	r3, [r3, #20]
 801e526:	4798      	blx	r3
 801e528:	4583      	cmp	fp, r0
 801e52a:	4606      	mov	r6, r0
 801e52c:	d126      	bne.n	801e57c <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 801e52e:	462e      	mov	r6, r5
 801e530:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e532:	f106 0901 	add.w	r9, r6, #1
 801e536:	4641      	mov	r1, r8
 801e538:	6883      	ldr	r3, [r0, #8]
 801e53a:	464a      	mov	r2, r9
 801e53c:	695b      	ldr	r3, [r3, #20]
 801e53e:	4798      	blx	r3
 801e540:	4583      	cmp	fp, r0
 801e542:	d103      	bne.n	801e54c <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 801e544:	464e      	mov	r6, r9
 801e546:	e7f3      	b.n	801e530 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 801e548:	20000018 	.word	0x20000018
 801e54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e54e:	ebc5 0806 	rsb	r8, r5, r6
 801e552:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e554:	465a      	mov	r2, fp
 801e556:	f108 0801 	add.w	r8, r8, #1
 801e55a:	9305      	str	r3, [sp, #20]
 801e55c:	2301      	movs	r3, #1
 801e55e:	9704      	str	r7, [sp, #16]
 801e560:	4429      	add	r1, r5
 801e562:	f8cd a00c 	str.w	sl, [sp, #12]
 801e566:	9301      	str	r3, [sp, #4]
 801e568:	4635      	mov	r5, r6
 801e56a:	9300      	str	r3, [sp, #0]
 801e56c:	4643      	mov	r3, r8
 801e56e:	9402      	str	r4, [sp, #8]
 801e570:	9808      	ldr	r0, [sp, #32]
 801e572:	fb0a 7708 	mla	r7, sl, r8, r7
 801e576:	f7f9 fc21 	bl	8017dbc <LCD_DrawBitmap>
 801e57a:	e056      	b.n	801e62a <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 801e57c:	2c01      	cmp	r4, #1
 801e57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e580:	d004      	beq.n	801e58c <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 801e582:	442b      	add	r3, r5
 801e584:	f04f 0901 	mov.w	r9, #1
 801e588:	930b      	str	r3, [sp, #44]	; 0x2c
 801e58a:	e02b      	b.n	801e5e4 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 801e58c:	eb03 0905 	add.w	r9, r3, r5
 801e590:	46a0      	mov	r8, r4
 801e592:	b32e      	cbz	r6, 801e5e0 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 801e594:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801e598:	4632      	mov	r2, r6
 801e59a:	9808      	ldr	r0, [sp, #32]
 801e59c:	4649      	mov	r1, r9
 801e59e:	f00e 0307 	and.w	r3, lr, #7
 801e5a2:	f8cd a00c 	str.w	sl, [sp, #12]
 801e5a6:	4470      	add	r0, lr
 801e5a8:	f8cd 8008 	str.w	r8, [sp, #8]
 801e5ac:	9306      	str	r3, [sp, #24]
 801e5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5b0:	f8cd 8004 	str.w	r8, [sp, #4]
 801e5b4:	9305      	str	r3, [sp, #20]
 801e5b6:	2308      	movs	r3, #8
 801e5b8:	f8cd 8000 	str.w	r8, [sp]
 801e5bc:	fb9e f3f3 	sdiv	r3, lr, r3
 801e5c0:	443b      	add	r3, r7
 801e5c2:	9304      	str	r3, [sp, #16]
 801e5c4:	2301      	movs	r3, #1
 801e5c6:	f7f9 fb0d 	bl	8017be4 <LCD__DrawBitmap_1bpp>
 801e5ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e5cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e5ce:	462a      	mov	r2, r5
 801e5d0:	441e      	add	r6, r3
 801e5d2:	a917      	add	r1, sp, #92	; 0x5c
 801e5d4:	6883      	ldr	r3, [r0, #8]
 801e5d6:	9617      	str	r6, [sp, #92]	; 0x5c
 801e5d8:	695b      	ldr	r3, [r3, #20]
 801e5da:	4798      	blx	r3
 801e5dc:	4606      	mov	r6, r0
 801e5de:	e7d8      	b.n	801e592 <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 801e5e0:	4457      	add	r7, sl
 801e5e2:	e022      	b.n	801e62a <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 801e5e4:	2e00      	cmp	r6, #0
 801e5e6:	d0fb      	beq.n	801e5e0 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 801e5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5ea:	4632      	mov	r2, r6
 801e5ec:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801e5f0:	9305      	str	r3, [sp, #20]
 801e5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5f4:	9808      	ldr	r0, [sp, #32]
 801e5f6:	fb03 730e 	mla	r3, r3, lr, r7
 801e5fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e5fc:	4470      	add	r0, lr
 801e5fe:	f8cd a00c 	str.w	sl, [sp, #12]
 801e602:	9304      	str	r3, [sp, #16]
 801e604:	2301      	movs	r3, #1
 801e606:	9402      	str	r4, [sp, #8]
 801e608:	f8cd 9004 	str.w	r9, [sp, #4]
 801e60c:	f8cd 9000 	str.w	r9, [sp]
 801e610:	f7f9 fbd4 	bl	8017dbc <LCD_DrawBitmap>
 801e614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e616:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e618:	462a      	mov	r2, r5
 801e61a:	441e      	add	r6, r3
 801e61c:	4641      	mov	r1, r8
 801e61e:	6883      	ldr	r3, [r0, #8]
 801e620:	9617      	str	r6, [sp, #92]	; 0x5c
 801e622:	695b      	ldr	r3, [r3, #20]
 801e624:	4798      	blx	r3
 801e626:	4606      	mov	r6, r0
 801e628:	e7dc      	b.n	801e5e4 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 801e62a:	3501      	adds	r5, #1
 801e62c:	e76e      	b.n	801e50c <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 801e62e:	a816      	add	r0, sp, #88	; 0x58
 801e630:	f7f7 fd50 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e634:	e1c8      	b.n	801e9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801e636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e638:	465a      	mov	r2, fp
 801e63a:	9004      	str	r0, [sp, #16]
 801e63c:	9305      	str	r3, [sp, #20]
 801e63e:	2301      	movs	r3, #1
 801e640:	f8cd a00c 	str.w	sl, [sp, #12]
 801e644:	9301      	str	r3, [sp, #4]
 801e646:	9300      	str	r3, [sp, #0]
 801e648:	9402      	str	r4, [sp, #8]
 801e64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e64c:	e03a      	b.n	801e6c4 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 801e64e:	4628      	mov	r0, r5
 801e650:	f7f7 fd32 	bl	80160b8 <GUI_ALLOC_LockH>
 801e654:	4683      	mov	fp, r0
 801e656:	a81a      	add	r0, sp, #104	; 0x68
 801e658:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801e65c:	f840 bd10 	str.w	fp, [r0, #-16]!
 801e660:	930b      	str	r3, [sp, #44]	; 0x2c
 801e662:	f8db 2000 	ldr.w	r2, [fp]
 801e666:	f8db 300c 	ldr.w	r3, [fp, #12]
 801e66a:	f8d2 8010 	ldr.w	r8, [r2, #16]
 801e66e:	930c      	str	r3, [sp, #48]	; 0x30
 801e670:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801e674:	f7f7 fd2e 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e678:	6832      	ldr	r2, [r6, #0]
 801e67a:	f8d8 9004 	ldr.w	r9, [r8, #4]
 801e67e:	7c50      	ldrb	r0, [r2, #17]
 801e680:	4aa1      	ldr	r2, [pc, #644]	; (801e908 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 801e682:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801e686:	6916      	ldr	r6, [r2, #16]
 801e688:	6833      	ldr	r3, [r6, #0]
 801e68a:	930a      	str	r3, [sp, #40]	; 0x28
 801e68c:	f7f9 fe74 	bl	8018378 <GUI_GetBitsPerPixelEx>
 801e690:	2808      	cmp	r0, #8
 801e692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e694:	d906      	bls.n	801e6a4 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 801e696:	2810      	cmp	r0, #16
 801e698:	bf8c      	ite	hi
 801e69a:	f04f 0a04 	movhi.w	sl, #4
 801e69e:	f04f 0a02 	movls.w	sl, #2
 801e6a2:	e001      	b.n	801e6a8 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 801e6a4:	f04f 0a01 	mov.w	sl, #1
 801e6a8:	45b0      	cmp	r8, r6
 801e6aa:	d110      	bne.n	801e6ce <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	9303      	str	r3, [sp, #12]
 801e6b0:	2301      	movs	r3, #1
 801e6b2:	f10b 0018 	add.w	r0, fp, #24
 801e6b6:	9205      	str	r2, [sp, #20]
 801e6b8:	4622      	mov	r2, r4
 801e6ba:	9301      	str	r3, [sp, #4]
 801e6bc:	9300      	str	r3, [sp, #0]
 801e6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6c0:	9004      	str	r0, [sp, #16]
 801e6c2:	9702      	str	r7, [sp, #8]
 801e6c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e6c6:	9808      	ldr	r0, [sp, #32]
 801e6c8:	f7f9 fb78 	bl	8017dbc <LCD_DrawBitmap>
 801e6cc:	e17c      	b.n	801e9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801e6ce:	2f20      	cmp	r7, #32
 801e6d0:	f040 80a2 	bne.w	801e818 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 801e6d4:	fb0a f004 	mul.w	r0, sl, r4
 801e6d8:	f7f7 fec8 	bl	801646c <GUI_ALLOC_AllocNoInit>
 801e6dc:	900d      	str	r0, [sp, #52]	; 0x34
 801e6de:	2800      	cmp	r0, #0
 801e6e0:	f000 8172 	beq.w	801e9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801e6e4:	f7f7 fce8 	bl	80160b8 <GUI_ALLOC_LockH>
 801e6e8:	9018      	str	r0, [sp, #96]	; 0x60
 801e6ea:	4628      	mov	r0, r5
 801e6ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e6f0:	f7f7 fce2 	bl	80160b8 <GUI_ALLOC_LockH>
 801e6f4:	9016      	str	r0, [sp, #88]	; 0x58
 801e6f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801e6fa:	6933      	ldr	r3, [r6, #16]
 801e6fc:	f100 0518 	add.w	r5, r0, #24
 801e700:	920c      	str	r2, [sp, #48]	; 0x30
 801e702:	b373      	cbz	r3, 801e762 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 801e704:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801e708:	f04f 0901 	mov.w	r9, #1
 801e70c:	f1ba 0f02 	cmp.w	sl, #2
 801e710:	d005      	beq.n	801e71e <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 801e712:	f1ba 0f04 	cmp.w	sl, #4
 801e716:	d002      	beq.n	801e71e <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 801e718:	f1ba 0f01 	cmp.w	sl, #1
 801e71c:	d106      	bne.n	801e72c <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 801e71e:	4628      	mov	r0, r5
 801e720:	445d      	add	r5, fp
 801e722:	6937      	ldr	r7, [r6, #16]
 801e724:	4653      	mov	r3, sl
 801e726:	4622      	mov	r2, r4
 801e728:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e72a:	47b8      	blx	r7
 801e72c:	2300      	movs	r3, #0
 801e72e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e730:	f8cd 9004 	str.w	r9, [sp, #4]
 801e734:	4641      	mov	r1, r8
 801e736:	9305      	str	r3, [sp, #20]
 801e738:	f108 0701 	add.w	r7, r8, #1
 801e73c:	9303      	str	r3, [sp, #12]
 801e73e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e740:	9204      	str	r2, [sp, #16]
 801e742:	4622      	mov	r2, r4
 801e744:	9302      	str	r3, [sp, #8]
 801e746:	2301      	movs	r3, #1
 801e748:	f8cd 9000 	str.w	r9, [sp]
 801e74c:	9808      	ldr	r0, [sp, #32]
 801e74e:	f7f9 fb35 	bl	8017dbc <LCD_DrawBitmap>
 801e752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e756:	4413      	add	r3, r2
 801e758:	429f      	cmp	r7, r3
 801e75a:	f000 812c 	beq.w	801e9b6 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801e75e:	46b8      	mov	r8, r7
 801e760:	e7d4      	b.n	801e70c <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 801e762:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e764:	461e      	mov	r6, r3
 801e766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e768:	f04f 0901 	mov.w	r9, #1
 801e76c:	443b      	add	r3, r7
 801e76e:	9309      	str	r3, [sp, #36]	; 0x24
 801e770:	f1ba 0f02 	cmp.w	sl, #2
 801e774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e778:	d016      	beq.n	801e7a8 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 801e77a:	f1ba 0f04 	cmp.w	sl, #4
 801e77e:	d024      	beq.n	801e7ca <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 801e780:	f1ba 0f01 	cmp.w	sl, #1
 801e784:	d130      	bne.n	801e7e8 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 801e786:	4643      	mov	r3, r8
 801e788:	462a      	mov	r2, r5
 801e78a:	f852 0b04 	ldr.w	r0, [r2], #4
 801e78e:	930e      	str	r3, [sp, #56]	; 0x38
 801e790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e792:	920b      	str	r2, [sp, #44]	; 0x2c
 801e794:	4798      	blx	r3
 801e796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e79a:	f803 0b01 	strb.w	r0, [r3], #1
 801e79e:	1ae1      	subs	r1, r4, r3
 801e7a0:	eb18 0f01 	cmn.w	r8, r1
 801e7a4:	d1f1      	bne.n	801e78a <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 801e7a6:	e01e      	b.n	801e7e6 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 801e7a8:	4643      	mov	r3, r8
 801e7aa:	462a      	mov	r2, r5
 801e7ac:	46a0      	mov	r8, r4
 801e7ae:	f852 0b04 	ldr.w	r0, [r2], #4
 801e7b2:	930e      	str	r3, [sp, #56]	; 0x38
 801e7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7b6:	920b      	str	r2, [sp, #44]	; 0x2c
 801e7b8:	4798      	blx	r3
 801e7ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7bc:	f1b8 0801 	subs.w	r8, r8, #1
 801e7c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e7c2:	f823 0b02 	strh.w	r0, [r3], #2
 801e7c6:	d1f2      	bne.n	801e7ae <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 801e7c8:	e00d      	b.n	801e7e6 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 801e7ca:	462a      	mov	r2, r5
 801e7cc:	4623      	mov	r3, r4
 801e7ce:	f852 0b04 	ldr.w	r0, [r2], #4
 801e7d2:	930e      	str	r3, [sp, #56]	; 0x38
 801e7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7d6:	920b      	str	r2, [sp, #44]	; 0x2c
 801e7d8:	4798      	blx	r3
 801e7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7dc:	f848 0b04 	str.w	r0, [r8], #4
 801e7e0:	3b01      	subs	r3, #1
 801e7e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e7e4:	d1f3      	bne.n	801e7ce <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 801e7e6:	445d      	add	r5, fp
 801e7e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e7ea:	4622      	mov	r2, r4
 801e7ec:	9605      	str	r6, [sp, #20]
 801e7ee:	4639      	mov	r1, r7
 801e7f0:	9304      	str	r3, [sp, #16]
 801e7f2:	f107 0801 	add.w	r8, r7, #1
 801e7f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7f8:	9603      	str	r6, [sp, #12]
 801e7fa:	9302      	str	r3, [sp, #8]
 801e7fc:	2301      	movs	r3, #1
 801e7fe:	f8cd 9004 	str.w	r9, [sp, #4]
 801e802:	f8cd 9000 	str.w	r9, [sp]
 801e806:	9808      	ldr	r0, [sp, #32]
 801e808:	f7f9 fad8 	bl	8017dbc <LCD_DrawBitmap>
 801e80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e80e:	4543      	cmp	r3, r8
 801e810:	f000 80d1 	beq.w	801e9b6 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801e814:	4647      	mov	r7, r8
 801e816:	e7ab      	b.n	801e770 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 801e818:	2f10      	cmp	r7, #16
 801e81a:	f040 80d5 	bne.w	801e9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801e81e:	fb04 f00a 	mul.w	r0, r4, sl
 801e822:	f7f7 fe23 	bl	801646c <GUI_ALLOC_AllocNoInit>
 801e826:	900d      	str	r0, [sp, #52]	; 0x34
 801e828:	2800      	cmp	r0, #0
 801e82a:	f000 80cd 	beq.w	801e9c8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801e82e:	f7f7 fc43 	bl	80160b8 <GUI_ALLOC_LockH>
 801e832:	9018      	str	r0, [sp, #96]	; 0x60
 801e834:	4628      	mov	r0, r5
 801e836:	f7f7 fc3f 	bl	80160b8 <GUI_ALLOC_LockH>
 801e83a:	9016      	str	r0, [sp, #88]	; 0x58
 801e83c:	6933      	ldr	r3, [r6, #16]
 801e83e:	f100 0718 	add.w	r7, r0, #24
 801e842:	b113      	cbz	r3, 801e84a <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 801e844:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801e848:	b953      	cbnz	r3, 801e860 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 801e84a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801e84e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e850:	0066      	lsls	r6, r4, #1
 801e852:	f04f 0b00 	mov.w	fp, #0
 801e856:	930c      	str	r3, [sp, #48]	; 0x30
 801e858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e85a:	442b      	add	r3, r5
 801e85c:	9309      	str	r3, [sp, #36]	; 0x24
 801e85e:	e083      	b.n	801e968 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 801e860:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801e864:	0080      	lsls	r0, r0, #2
 801e866:	f7f7 fe01 	bl	801646c <GUI_ALLOC_AllocNoInit>
 801e86a:	900c      	str	r0, [sp, #48]	; 0x30
 801e86c:	b118      	cbz	r0, 801e876 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 801e86e:	f7f7 fc23 	bl	80160b8 <GUI_ALLOC_LockH>
 801e872:	9017      	str	r0, [sp, #92]	; 0x5c
 801e874:	e001      	b.n	801e87a <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 801e876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e878:	9317      	str	r3, [sp, #92]	; 0x5c
 801e87a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	f000 809a 	beq.w	801e9b6 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801e882:	0063      	lsls	r3, r4, #1
 801e884:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e888:	930a      	str	r3, [sp, #40]	; 0x28
 801e88a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801e88e:	930e      	str	r3, [sp, #56]	; 0x38
 801e890:	f1ba 0f02 	cmp.w	sl, #2
 801e894:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801e898:	d006      	beq.n	801e8a8 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 801e89a:	f1ba 0f04 	cmp.w	sl, #4
 801e89e:	d005      	beq.n	801e8ac <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 801e8a0:	f1ba 0f01 	cmp.w	sl, #1
 801e8a4:	d111      	bne.n	801e8ca <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 801e8a6:	e001      	b.n	801e8ac <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 801e8a8:	4653      	mov	r3, sl
 801e8aa:	e000      	b.n	801e8ae <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 801e8ac:	2302      	movs	r3, #2
 801e8ae:	4638      	mov	r0, r7
 801e8b0:	4622      	mov	r2, r4
 801e8b2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e8b4:	f8d8 5014 	ldr.w	r5, [r8, #20]
 801e8b8:	47a8      	blx	r5
 801e8ba:	4653      	mov	r3, sl
 801e8bc:	4622      	mov	r2, r4
 801e8be:	4649      	mov	r1, r9
 801e8c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e8c2:	6935      	ldr	r5, [r6, #16]
 801e8c4:	47a8      	blx	r5
 801e8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8c8:	441f      	add	r7, r3
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e8ce:	4659      	mov	r1, fp
 801e8d0:	9808      	ldr	r0, [sp, #32]
 801e8d2:	9305      	str	r3, [sp, #20]
 801e8d4:	f10b 0901 	add.w	r9, fp, #1
 801e8d8:	9303      	str	r3, [sp, #12]
 801e8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8dc:	9204      	str	r2, [sp, #16]
 801e8de:	4622      	mov	r2, r4
 801e8e0:	9302      	str	r3, [sp, #8]
 801e8e2:	2301      	movs	r3, #1
 801e8e4:	9301      	str	r3, [sp, #4]
 801e8e6:	9300      	str	r3, [sp, #0]
 801e8e8:	f7f9 fa68 	bl	8017dbc <LCD_DrawBitmap>
 801e8ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8f0:	4413      	add	r3, r2
 801e8f2:	4599      	cmp	r9, r3
 801e8f4:	d001      	beq.n	801e8fa <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 801e8f6:	46cb      	mov	fp, r9
 801e8f8:	e7ca      	b.n	801e890 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 801e8fa:	a817      	add	r0, sp, #92	; 0x5c
 801e8fc:	f7f7 fbea 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e900:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e902:	f7f7 fc17 	bl	8016134 <GUI_ALLOC_Free>
 801e906:	e056      	b.n	801e9b6 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801e908:	2002249c 	.word	0x2002249c
 801e90c:	f1ba 0f04 	cmp.w	sl, #4
 801e910:	d041      	beq.n	801e996 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 801e912:	f1ba 0f01 	cmp.w	sl, #1
 801e916:	d111      	bne.n	801e93c <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 801e918:	4643      	mov	r3, r8
 801e91a:	463a      	mov	r2, r7
 801e91c:	f832 0b02 	ldrh.w	r0, [r2], #2
 801e920:	930e      	str	r3, [sp, #56]	; 0x38
 801e922:	920b      	str	r2, [sp, #44]	; 0x2c
 801e924:	47c8      	blx	r9
 801e926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e928:	4798      	blx	r3
 801e92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e92c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e92e:	f803 0b01 	strb.w	r0, [r3], #1
 801e932:	1ae1      	subs	r1, r4, r3
 801e934:	eb18 0f01 	cmn.w	r8, r1
 801e938:	d1f0      	bne.n	801e91c <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 801e93a:	4437      	add	r7, r6
 801e93c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e93e:	4622      	mov	r2, r4
 801e940:	f8cd b014 	str.w	fp, [sp, #20]
 801e944:	4629      	mov	r1, r5
 801e946:	9304      	str	r3, [sp, #16]
 801e948:	f105 0801 	add.w	r8, r5, #1
 801e94c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e94e:	f8cd b00c 	str.w	fp, [sp, #12]
 801e952:	9302      	str	r3, [sp, #8]
 801e954:	2301      	movs	r3, #1
 801e956:	9808      	ldr	r0, [sp, #32]
 801e958:	9301      	str	r3, [sp, #4]
 801e95a:	9300      	str	r3, [sp, #0]
 801e95c:	f7f9 fa2e 	bl	8017dbc <LCD_DrawBitmap>
 801e960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e962:	4543      	cmp	r3, r8
 801e964:	d027      	beq.n	801e9b6 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801e966:	4645      	mov	r5, r8
 801e968:	f1ba 0f02 	cmp.w	sl, #2
 801e96c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e970:	d1cc      	bne.n	801e90c <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 801e972:	4643      	mov	r3, r8
 801e974:	463a      	mov	r2, r7
 801e976:	46a0      	mov	r8, r4
 801e978:	f832 0b02 	ldrh.w	r0, [r2], #2
 801e97c:	930e      	str	r3, [sp, #56]	; 0x38
 801e97e:	920b      	str	r2, [sp, #44]	; 0x2c
 801e980:	47c8      	blx	r9
 801e982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e984:	4798      	blx	r3
 801e986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e988:	f1b8 0801 	subs.w	r8, r8, #1
 801e98c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e98e:	f823 0b02 	strh.w	r0, [r3], #2
 801e992:	d1f1      	bne.n	801e978 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 801e994:	e7d1      	b.n	801e93a <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 801e996:	463a      	mov	r2, r7
 801e998:	4623      	mov	r3, r4
 801e99a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801e99e:	930e      	str	r3, [sp, #56]	; 0x38
 801e9a0:	920b      	str	r2, [sp, #44]	; 0x2c
 801e9a2:	47c8      	blx	r9
 801e9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9a6:	4798      	blx	r3
 801e9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e9aa:	f848 0b04 	str.w	r0, [r8], #4
 801e9ae:	3b01      	subs	r3, #1
 801e9b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e9b2:	d1f2      	bne.n	801e99a <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 801e9b4:	e7c1      	b.n	801e93a <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 801e9b6:	a816      	add	r0, sp, #88	; 0x58
 801e9b8:	f7f7 fb8c 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e9bc:	a818      	add	r0, sp, #96	; 0x60
 801e9be:	f7f7 fb89 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801e9c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e9c4:	f7f7 fbb6 	bl	8016134 <GUI_ALLOC_Free>
 801e9c8:	b01b      	add	sp, #108	; 0x6c
 801e9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ce:	bf00      	nop

0801e9d0 <WM_PID__SetPrevState>:
 801e9d0:	4a03      	ldr	r2, [pc, #12]	; (801e9e0 <WM_PID__SetPrevState+0x10>)
 801e9d2:	230c      	movs	r3, #12
 801e9d4:	fb03 2301 	mla	r3, r3, r1, r2
 801e9d8:	c807      	ldmia	r0, {r0, r1, r2}
 801e9da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e9de:	4770      	bx	lr
 801e9e0:	20000438 	.word	0x20000438

0801e9e4 <WM__IsInWindow>:
 801e9e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e9e6:	f013 0302 	ands.w	r3, r3, #2
 801e9ea:	d012      	beq.n	801ea12 <WM__IsInWindow+0x2e>
 801e9ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e9f0:	428b      	cmp	r3, r1
 801e9f2:	dc10      	bgt.n	801ea16 <WM__IsInWindow+0x32>
 801e9f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e9f8:	4299      	cmp	r1, r3
 801e9fa:	dc0c      	bgt.n	801ea16 <WM__IsInWindow+0x32>
 801e9fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ea00:	4293      	cmp	r3, r2
 801ea02:	dc08      	bgt.n	801ea16 <WM__IsInWindow+0x32>
 801ea04:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801ea08:	429a      	cmp	r2, r3
 801ea0a:	bfcc      	ite	gt
 801ea0c:	2000      	movgt	r0, #0
 801ea0e:	2001      	movle	r0, #1
 801ea10:	4770      	bx	lr
 801ea12:	4618      	mov	r0, r3
 801ea14:	4770      	bx	lr
 801ea16:	2000      	movs	r0, #0
 801ea18:	4770      	bx	lr

0801ea1a <_Screen2hWin>:
 801ea1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ea1e:	460e      	mov	r6, r1
 801ea20:	4617      	mov	r7, r2
 801ea22:	4698      	mov	r8, r3
 801ea24:	4604      	mov	r4, r0
 801ea26:	b320      	cbz	r0, 801ea72 <_Screen2hWin+0x58>
 801ea28:	f7f7 fb46 	bl	80160b8 <GUI_ALLOC_LockH>
 801ea2c:	4642      	mov	r2, r8
 801ea2e:	4639      	mov	r1, r7
 801ea30:	4605      	mov	r5, r0
 801ea32:	9001      	str	r0, [sp, #4]
 801ea34:	f7ff ffd6 	bl	801e9e4 <WM__IsInWindow>
 801ea38:	4681      	mov	r9, r0
 801ea3a:	b920      	cbnz	r0, 801ea46 <_Screen2hWin+0x2c>
 801ea3c:	a801      	add	r0, sp, #4
 801ea3e:	f7f7 fb49 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ea42:	4648      	mov	r0, r9
 801ea44:	e016      	b.n	801ea74 <_Screen2hWin+0x5a>
 801ea46:	69ed      	ldr	r5, [r5, #28]
 801ea48:	b91d      	cbnz	r5, 801ea52 <_Screen2hWin+0x38>
 801ea4a:	a801      	add	r0, sp, #4
 801ea4c:	f7f7 fb42 	bl	80160d4 <GUI_ALLOC_UnlockH>
 801ea50:	e00f      	b.n	801ea72 <_Screen2hWin+0x58>
 801ea52:	42b5      	cmp	r5, r6
 801ea54:	d0f9      	beq.n	801ea4a <_Screen2hWin+0x30>
 801ea56:	4643      	mov	r3, r8
 801ea58:	463a      	mov	r2, r7
 801ea5a:	4631      	mov	r1, r6
 801ea5c:	4628      	mov	r0, r5
 801ea5e:	f7ff ffdc 	bl	801ea1a <_Screen2hWin>
 801ea62:	2800      	cmp	r0, #0
 801ea64:	bf18      	it	ne
 801ea66:	4604      	movne	r4, r0
 801ea68:	4628      	mov	r0, r5
 801ea6a:	f7f7 fb1b 	bl	80160a4 <GUI_ALLOC_h2p>
 801ea6e:	6a05      	ldr	r5, [r0, #32]
 801ea70:	e7ea      	b.n	801ea48 <_Screen2hWin+0x2e>
 801ea72:	4620      	mov	r0, r4
 801ea74:	b003      	add	sp, #12
 801ea76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801ea7c <WM_Screen2hWin>:
 801ea7c:	b538      	push	{r3, r4, r5, lr}
 801ea7e:	460d      	mov	r5, r1
 801ea80:	4604      	mov	r4, r0
 801ea82:	f7f8 fbf9 	bl	8017278 <GUI_Lock>
 801ea86:	4b07      	ldr	r3, [pc, #28]	; (801eaa4 <WM_Screen2hWin+0x28>)
 801ea88:	6818      	ldr	r0, [r3, #0]
 801ea8a:	f7fc fde3 	bl	801b654 <WM_GetDesktopWindowEx>
 801ea8e:	4622      	mov	r2, r4
 801ea90:	462b      	mov	r3, r5
 801ea92:	2100      	movs	r1, #0
 801ea94:	f7ff ffc1 	bl	801ea1a <_Screen2hWin>
 801ea98:	4604      	mov	r4, r0
 801ea9a:	f7f8 fbe3 	bl	8017264 <GUI_Unlock>
 801ea9e:	4620      	mov	r0, r4
 801eaa0:	bd38      	pop	{r3, r4, r5, pc}
 801eaa2:	bf00      	nop
 801eaa4:	200224e0 	.word	0x200224e0

0801eaa8 <WM__ReleaseCapture>:
 801eaa8:	b530      	push	{r4, r5, lr}
 801eaaa:	4d09      	ldr	r5, [pc, #36]	; (801ead0 <WM__ReleaseCapture+0x28>)
 801eaac:	b085      	sub	sp, #20
 801eaae:	4c09      	ldr	r4, [pc, #36]	; (801ead4 <WM__ReleaseCapture+0x2c>)
 801eab0:	682b      	ldr	r3, [r5, #0]
 801eab2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801eab6:	b148      	cbz	r0, 801eacc <WM__ReleaseCapture+0x24>
 801eab8:	2318      	movs	r3, #24
 801eaba:	a904      	add	r1, sp, #16
 801eabc:	f841 3d10 	str.w	r3, [r1, #-16]!
 801eac0:	f7fd fad8 	bl	801c074 <WM__SendMessage>
 801eac4:	682b      	ldr	r3, [r5, #0]
 801eac6:	2200      	movs	r2, #0
 801eac8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801eacc:	b005      	add	sp, #20
 801eace:	bd30      	pop	{r4, r5, pc}
 801ead0:	200224e0 	.word	0x200224e0
 801ead4:	20022504 	.word	0x20022504

0801ead8 <WM_ReleaseCapture>:
 801ead8:	b508      	push	{r3, lr}
 801eada:	f7f8 fbcd 	bl	8017278 <GUI_Lock>
 801eade:	f7ff ffe3 	bl	801eaa8 <WM__ReleaseCapture>
 801eae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801eae6:	f7f8 bbbd 	b.w	8017264 <GUI_Unlock>
	...

0801eaec <__errno>:
 801eaec:	4b01      	ldr	r3, [pc, #4]	; (801eaf4 <__errno+0x8>)
 801eaee:	6818      	ldr	r0, [r3, #0]
 801eaf0:	4770      	bx	lr
 801eaf2:	bf00      	nop
 801eaf4:	200000c8 	.word	0x200000c8

0801eaf8 <__libc_init_array>:
 801eaf8:	b570      	push	{r4, r5, r6, lr}
 801eafa:	4e0d      	ldr	r6, [pc, #52]	; (801eb30 <__libc_init_array+0x38>)
 801eafc:	4c0d      	ldr	r4, [pc, #52]	; (801eb34 <__libc_init_array+0x3c>)
 801eafe:	1ba4      	subs	r4, r4, r6
 801eb00:	10a4      	asrs	r4, r4, #2
 801eb02:	2500      	movs	r5, #0
 801eb04:	42a5      	cmp	r5, r4
 801eb06:	d109      	bne.n	801eb1c <__libc_init_array+0x24>
 801eb08:	4e0b      	ldr	r6, [pc, #44]	; (801eb38 <__libc_init_array+0x40>)
 801eb0a:	4c0c      	ldr	r4, [pc, #48]	; (801eb3c <__libc_init_array+0x44>)
 801eb0c:	f000 f91e 	bl	801ed4c <_init>
 801eb10:	1ba4      	subs	r4, r4, r6
 801eb12:	10a4      	asrs	r4, r4, #2
 801eb14:	2500      	movs	r5, #0
 801eb16:	42a5      	cmp	r5, r4
 801eb18:	d105      	bne.n	801eb26 <__libc_init_array+0x2e>
 801eb1a:	bd70      	pop	{r4, r5, r6, pc}
 801eb1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801eb20:	4798      	blx	r3
 801eb22:	3501      	adds	r5, #1
 801eb24:	e7ee      	b.n	801eb04 <__libc_init_array+0xc>
 801eb26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801eb2a:	4798      	blx	r3
 801eb2c:	3501      	adds	r5, #1
 801eb2e:	e7f2      	b.n	801eb16 <__libc_init_array+0x1e>
 801eb30:	080236dc 	.word	0x080236dc
 801eb34:	080236dc 	.word	0x080236dc
 801eb38:	080236dc 	.word	0x080236dc
 801eb3c:	080236e0 	.word	0x080236e0

0801eb40 <malloc>:
 801eb40:	4b02      	ldr	r3, [pc, #8]	; (801eb4c <malloc+0xc>)
 801eb42:	4601      	mov	r1, r0
 801eb44:	6818      	ldr	r0, [r3, #0]
 801eb46:	f000 b895 	b.w	801ec74 <_malloc_r>
 801eb4a:	bf00      	nop
 801eb4c:	200000c8 	.word	0x200000c8

0801eb50 <free>:
 801eb50:	4b02      	ldr	r3, [pc, #8]	; (801eb5c <free+0xc>)
 801eb52:	4601      	mov	r1, r0
 801eb54:	6818      	ldr	r0, [r3, #0]
 801eb56:	f000 b83f 	b.w	801ebd8 <_free_r>
 801eb5a:	bf00      	nop
 801eb5c:	200000c8 	.word	0x200000c8

0801eb60 <memcmp>:
 801eb60:	b530      	push	{r4, r5, lr}
 801eb62:	2400      	movs	r4, #0
 801eb64:	42a2      	cmp	r2, r4
 801eb66:	d101      	bne.n	801eb6c <memcmp+0xc>
 801eb68:	2000      	movs	r0, #0
 801eb6a:	e007      	b.n	801eb7c <memcmp+0x1c>
 801eb6c:	5d03      	ldrb	r3, [r0, r4]
 801eb6e:	3401      	adds	r4, #1
 801eb70:	190d      	adds	r5, r1, r4
 801eb72:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801eb76:	42ab      	cmp	r3, r5
 801eb78:	d0f4      	beq.n	801eb64 <memcmp+0x4>
 801eb7a:	1b58      	subs	r0, r3, r5
 801eb7c:	bd30      	pop	{r4, r5, pc}

0801eb7e <memcpy>:
 801eb7e:	b510      	push	{r4, lr}
 801eb80:	1e43      	subs	r3, r0, #1
 801eb82:	440a      	add	r2, r1
 801eb84:	4291      	cmp	r1, r2
 801eb86:	d100      	bne.n	801eb8a <memcpy+0xc>
 801eb88:	bd10      	pop	{r4, pc}
 801eb8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eb8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eb92:	e7f7      	b.n	801eb84 <memcpy+0x6>

0801eb94 <memmove>:
 801eb94:	4288      	cmp	r0, r1
 801eb96:	b510      	push	{r4, lr}
 801eb98:	eb01 0302 	add.w	r3, r1, r2
 801eb9c:	d807      	bhi.n	801ebae <memmove+0x1a>
 801eb9e:	1e42      	subs	r2, r0, #1
 801eba0:	4299      	cmp	r1, r3
 801eba2:	d00a      	beq.n	801ebba <memmove+0x26>
 801eba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eba8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801ebac:	e7f8      	b.n	801eba0 <memmove+0xc>
 801ebae:	4283      	cmp	r3, r0
 801ebb0:	d9f5      	bls.n	801eb9e <memmove+0xa>
 801ebb2:	1881      	adds	r1, r0, r2
 801ebb4:	1ad2      	subs	r2, r2, r3
 801ebb6:	42d3      	cmn	r3, r2
 801ebb8:	d100      	bne.n	801ebbc <memmove+0x28>
 801ebba:	bd10      	pop	{r4, pc}
 801ebbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ebc0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801ebc4:	e7f7      	b.n	801ebb6 <memmove+0x22>

0801ebc6 <memset>:
 801ebc6:	4402      	add	r2, r0
 801ebc8:	4603      	mov	r3, r0
 801ebca:	4293      	cmp	r3, r2
 801ebcc:	d100      	bne.n	801ebd0 <memset+0xa>
 801ebce:	4770      	bx	lr
 801ebd0:	f803 1b01 	strb.w	r1, [r3], #1
 801ebd4:	e7f9      	b.n	801ebca <memset+0x4>
	...

0801ebd8 <_free_r>:
 801ebd8:	b538      	push	{r3, r4, r5, lr}
 801ebda:	4605      	mov	r5, r0
 801ebdc:	2900      	cmp	r1, #0
 801ebde:	d045      	beq.n	801ec6c <_free_r+0x94>
 801ebe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ebe4:	1f0c      	subs	r4, r1, #4
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	bfb8      	it	lt
 801ebea:	18e4      	addlt	r4, r4, r3
 801ebec:	f000 f8ac 	bl	801ed48 <__malloc_lock>
 801ebf0:	4a1f      	ldr	r2, [pc, #124]	; (801ec70 <_free_r+0x98>)
 801ebf2:	6813      	ldr	r3, [r2, #0]
 801ebf4:	4610      	mov	r0, r2
 801ebf6:	b933      	cbnz	r3, 801ec06 <_free_r+0x2e>
 801ebf8:	6063      	str	r3, [r4, #4]
 801ebfa:	6014      	str	r4, [r2, #0]
 801ebfc:	4628      	mov	r0, r5
 801ebfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ec02:	f000 b8a2 	b.w	801ed4a <__malloc_unlock>
 801ec06:	42a3      	cmp	r3, r4
 801ec08:	d90c      	bls.n	801ec24 <_free_r+0x4c>
 801ec0a:	6821      	ldr	r1, [r4, #0]
 801ec0c:	1862      	adds	r2, r4, r1
 801ec0e:	4293      	cmp	r3, r2
 801ec10:	bf04      	itt	eq
 801ec12:	681a      	ldreq	r2, [r3, #0]
 801ec14:	685b      	ldreq	r3, [r3, #4]
 801ec16:	6063      	str	r3, [r4, #4]
 801ec18:	bf04      	itt	eq
 801ec1a:	1852      	addeq	r2, r2, r1
 801ec1c:	6022      	streq	r2, [r4, #0]
 801ec1e:	6004      	str	r4, [r0, #0]
 801ec20:	e7ec      	b.n	801ebfc <_free_r+0x24>
 801ec22:	4613      	mov	r3, r2
 801ec24:	685a      	ldr	r2, [r3, #4]
 801ec26:	b10a      	cbz	r2, 801ec2c <_free_r+0x54>
 801ec28:	42a2      	cmp	r2, r4
 801ec2a:	d9fa      	bls.n	801ec22 <_free_r+0x4a>
 801ec2c:	6819      	ldr	r1, [r3, #0]
 801ec2e:	1858      	adds	r0, r3, r1
 801ec30:	42a0      	cmp	r0, r4
 801ec32:	d10b      	bne.n	801ec4c <_free_r+0x74>
 801ec34:	6820      	ldr	r0, [r4, #0]
 801ec36:	4401      	add	r1, r0
 801ec38:	1858      	adds	r0, r3, r1
 801ec3a:	4282      	cmp	r2, r0
 801ec3c:	6019      	str	r1, [r3, #0]
 801ec3e:	d1dd      	bne.n	801ebfc <_free_r+0x24>
 801ec40:	6810      	ldr	r0, [r2, #0]
 801ec42:	6852      	ldr	r2, [r2, #4]
 801ec44:	605a      	str	r2, [r3, #4]
 801ec46:	4401      	add	r1, r0
 801ec48:	6019      	str	r1, [r3, #0]
 801ec4a:	e7d7      	b.n	801ebfc <_free_r+0x24>
 801ec4c:	d902      	bls.n	801ec54 <_free_r+0x7c>
 801ec4e:	230c      	movs	r3, #12
 801ec50:	602b      	str	r3, [r5, #0]
 801ec52:	e7d3      	b.n	801ebfc <_free_r+0x24>
 801ec54:	6820      	ldr	r0, [r4, #0]
 801ec56:	1821      	adds	r1, r4, r0
 801ec58:	428a      	cmp	r2, r1
 801ec5a:	bf04      	itt	eq
 801ec5c:	6811      	ldreq	r1, [r2, #0]
 801ec5e:	6852      	ldreq	r2, [r2, #4]
 801ec60:	6062      	str	r2, [r4, #4]
 801ec62:	bf04      	itt	eq
 801ec64:	1809      	addeq	r1, r1, r0
 801ec66:	6021      	streq	r1, [r4, #0]
 801ec68:	605c      	str	r4, [r3, #4]
 801ec6a:	e7c7      	b.n	801ebfc <_free_r+0x24>
 801ec6c:	bd38      	pop	{r3, r4, r5, pc}
 801ec6e:	bf00      	nop
 801ec70:	200210fc 	.word	0x200210fc

0801ec74 <_malloc_r>:
 801ec74:	b570      	push	{r4, r5, r6, lr}
 801ec76:	1ccd      	adds	r5, r1, #3
 801ec78:	f025 0503 	bic.w	r5, r5, #3
 801ec7c:	3508      	adds	r5, #8
 801ec7e:	2d0c      	cmp	r5, #12
 801ec80:	bf38      	it	cc
 801ec82:	250c      	movcc	r5, #12
 801ec84:	2d00      	cmp	r5, #0
 801ec86:	4606      	mov	r6, r0
 801ec88:	db01      	blt.n	801ec8e <_malloc_r+0x1a>
 801ec8a:	42a9      	cmp	r1, r5
 801ec8c:	d903      	bls.n	801ec96 <_malloc_r+0x22>
 801ec8e:	230c      	movs	r3, #12
 801ec90:	6033      	str	r3, [r6, #0]
 801ec92:	2000      	movs	r0, #0
 801ec94:	bd70      	pop	{r4, r5, r6, pc}
 801ec96:	f000 f857 	bl	801ed48 <__malloc_lock>
 801ec9a:	4a21      	ldr	r2, [pc, #132]	; (801ed20 <_malloc_r+0xac>)
 801ec9c:	6814      	ldr	r4, [r2, #0]
 801ec9e:	4621      	mov	r1, r4
 801eca0:	b991      	cbnz	r1, 801ecc8 <_malloc_r+0x54>
 801eca2:	4c20      	ldr	r4, [pc, #128]	; (801ed24 <_malloc_r+0xb0>)
 801eca4:	6823      	ldr	r3, [r4, #0]
 801eca6:	b91b      	cbnz	r3, 801ecb0 <_malloc_r+0x3c>
 801eca8:	4630      	mov	r0, r6
 801ecaa:	f000 f83d 	bl	801ed28 <_sbrk_r>
 801ecae:	6020      	str	r0, [r4, #0]
 801ecb0:	4629      	mov	r1, r5
 801ecb2:	4630      	mov	r0, r6
 801ecb4:	f000 f838 	bl	801ed28 <_sbrk_r>
 801ecb8:	1c43      	adds	r3, r0, #1
 801ecba:	d124      	bne.n	801ed06 <_malloc_r+0x92>
 801ecbc:	230c      	movs	r3, #12
 801ecbe:	6033      	str	r3, [r6, #0]
 801ecc0:	4630      	mov	r0, r6
 801ecc2:	f000 f842 	bl	801ed4a <__malloc_unlock>
 801ecc6:	e7e4      	b.n	801ec92 <_malloc_r+0x1e>
 801ecc8:	680b      	ldr	r3, [r1, #0]
 801ecca:	1b5b      	subs	r3, r3, r5
 801eccc:	d418      	bmi.n	801ed00 <_malloc_r+0x8c>
 801ecce:	2b0b      	cmp	r3, #11
 801ecd0:	d90f      	bls.n	801ecf2 <_malloc_r+0x7e>
 801ecd2:	600b      	str	r3, [r1, #0]
 801ecd4:	50cd      	str	r5, [r1, r3]
 801ecd6:	18cc      	adds	r4, r1, r3
 801ecd8:	4630      	mov	r0, r6
 801ecda:	f000 f836 	bl	801ed4a <__malloc_unlock>
 801ecde:	f104 000b 	add.w	r0, r4, #11
 801ece2:	1d23      	adds	r3, r4, #4
 801ece4:	f020 0007 	bic.w	r0, r0, #7
 801ece8:	1ac3      	subs	r3, r0, r3
 801ecea:	d0d3      	beq.n	801ec94 <_malloc_r+0x20>
 801ecec:	425a      	negs	r2, r3
 801ecee:	50e2      	str	r2, [r4, r3]
 801ecf0:	e7d0      	b.n	801ec94 <_malloc_r+0x20>
 801ecf2:	428c      	cmp	r4, r1
 801ecf4:	684b      	ldr	r3, [r1, #4]
 801ecf6:	bf16      	itet	ne
 801ecf8:	6063      	strne	r3, [r4, #4]
 801ecfa:	6013      	streq	r3, [r2, #0]
 801ecfc:	460c      	movne	r4, r1
 801ecfe:	e7eb      	b.n	801ecd8 <_malloc_r+0x64>
 801ed00:	460c      	mov	r4, r1
 801ed02:	6849      	ldr	r1, [r1, #4]
 801ed04:	e7cc      	b.n	801eca0 <_malloc_r+0x2c>
 801ed06:	1cc4      	adds	r4, r0, #3
 801ed08:	f024 0403 	bic.w	r4, r4, #3
 801ed0c:	42a0      	cmp	r0, r4
 801ed0e:	d005      	beq.n	801ed1c <_malloc_r+0xa8>
 801ed10:	1a21      	subs	r1, r4, r0
 801ed12:	4630      	mov	r0, r6
 801ed14:	f000 f808 	bl	801ed28 <_sbrk_r>
 801ed18:	3001      	adds	r0, #1
 801ed1a:	d0cf      	beq.n	801ecbc <_malloc_r+0x48>
 801ed1c:	6025      	str	r5, [r4, #0]
 801ed1e:	e7db      	b.n	801ecd8 <_malloc_r+0x64>
 801ed20:	200210fc 	.word	0x200210fc
 801ed24:	20021100 	.word	0x20021100

0801ed28 <_sbrk_r>:
 801ed28:	b538      	push	{r3, r4, r5, lr}
 801ed2a:	4c06      	ldr	r4, [pc, #24]	; (801ed44 <_sbrk_r+0x1c>)
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	4605      	mov	r5, r0
 801ed30:	4608      	mov	r0, r1
 801ed32:	6023      	str	r3, [r4, #0]
 801ed34:	f7e4 fa5c 	bl	80031f0 <_sbrk>
 801ed38:	1c43      	adds	r3, r0, #1
 801ed3a:	d102      	bne.n	801ed42 <_sbrk_r+0x1a>
 801ed3c:	6823      	ldr	r3, [r4, #0]
 801ed3e:	b103      	cbz	r3, 801ed42 <_sbrk_r+0x1a>
 801ed40:	602b      	str	r3, [r5, #0]
 801ed42:	bd38      	pop	{r3, r4, r5, pc}
 801ed44:	20022544 	.word	0x20022544

0801ed48 <__malloc_lock>:
 801ed48:	4770      	bx	lr

0801ed4a <__malloc_unlock>:
 801ed4a:	4770      	bx	lr

0801ed4c <_init>:
 801ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed4e:	bf00      	nop
 801ed50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed52:	bc08      	pop	{r3}
 801ed54:	469e      	mov	lr, r3
 801ed56:	4770      	bx	lr

0801ed58 <_fini>:
 801ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed5a:	bf00      	nop
 801ed5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed5e:	bc08      	pop	{r3}
 801ed60:	469e      	mov	lr, r3
 801ed62:	4770      	bx	lr
