
Stm32F7_PVD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d40  0800a598  0800a598  0001a598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d8  0800c2d8  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2d8  0800c2d8  0001c2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2e0  0800c2e0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2e0  0800c2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2e4  0800c2e4  0001c2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000210  0800c4f8  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  0800c4f8  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6a4  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e5e  00000000  00000000  0003c8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a10  00000000  00000000  00040748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001800  00000000  00000000  00042158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029f18  00000000  00000000  00043958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017065  00000000  00000000  0006d870  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100eaf  00000000  00000000  000848d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00185784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076d4  00000000  00000000  00185800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a580 	.word	0x0800a580

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800a580 	.word	0x0800a580

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <SCB_CleanInvalidateDCache_by_Addr>:
  \details Cleans and invalidates D_Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3e:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8000f42:	e00b      	b.n	8000f5c <SCB_CleanInvalidateDCache_by_Addr+0x34>
      SCB->DCCIMVAC = op_addr;
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <SCB_CleanInvalidateDCache_by_Addr+0x50>)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4413      	add	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dcf0      	bgt.n	8000f44 <SCB_CleanInvalidateDCache_by_Addr+0x1c>
 8000f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f66:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000f82:	2306      	movs	r3, #6
 8000f84:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f86:	2306      	movs	r3, #6
 8000f88:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	83fb      	strh	r3, [r7, #30]
 8000f92:	2300      	movs	r3, #0
 8000f94:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8000f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000fa0:	4bac      	ldr	r3, [pc, #688]	; (8001254 <EE_Init+0x2d8>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000fa6:	4bac      	ldr	r3, [pc, #688]	; (8001258 <EE_Init+0x2dc>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fbe:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <EE_Init+0x10e>
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <EE_Init+0x5a>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8108 	beq.w	80011e4 <EE_Init+0x268>
 8000fd4:	e1ad      	b.n	8001332 <EE_Init+0x3b6>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000fd6:	8c3b      	ldrh	r3, [r7, #32]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d11b      	bne.n	8001014 <EE_Init+0x98>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000fdc:	489d      	ldr	r0, [pc, #628]	; (8001254 <EE_Init+0x2d8>)
 8000fde:	f000 f9c9 	bl	8001374 <EE_VerifyPageFullyErased>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f040 81ae 	bne.w	8001346 <EE_Init+0x3ca>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000fea:	f107 0214 	add.w	r2, r7, #20
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fadc 	bl	80055b0 <HAL_FLASHEx_Erase>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ffc:	7efb      	ldrb	r3, [r7, #27]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <EE_Init+0x8c>
          {
            return FlashStatus;
 8001002:	7efb      	ldrb	r3, [r7, #27]
 8001004:	b29b      	uxth	r3, r3
 8001006:	e1a6      	b.n	8001356 <EE_Init+0x3da>
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 8001008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100c:	4891      	ldr	r0, [pc, #580]	; (8001254 <EE_Init+0x2d8>)
 800100e:	f7ff ff8b 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
        if (FlashStatus != HAL_OK)
        {
          return FlashStatus;
        }
      }
      break;
 8001012:	e198      	b.n	8001346 <EE_Init+0x3ca>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001014:	8c3b      	ldrh	r3, [r7, #32]
 8001016:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800101a:	4293      	cmp	r3, r2
 800101c:	d12a      	bne.n	8001074 <EE_Init+0xf8>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800101e:	488d      	ldr	r0, [pc, #564]	; (8001254 <EE_Init+0x2d8>)
 8001020:	f000 f9a8 	bl	8001374 <EE_VerifyPageFullyErased>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d113      	bne.n	8001052 <EE_Init+0xd6>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800102a:	f107 0214 	add.w	r2, r7, #20
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fabc 	bl	80055b0 <HAL_FLASHEx_Erase>
 8001038:	4603      	mov	r3, r0
 800103a:	76fb      	strb	r3, [r7, #27]
          if (FlashStatus != HAL_OK)
 800103c:	7efb      	ldrb	r3, [r7, #27]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <EE_Init+0xcc>
            return FlashStatus;
 8001042:	7efb      	ldrb	r3, [r7, #27]
 8001044:	b29b      	uxth	r3, r3
 8001046:	e186      	b.n	8001356 <EE_Init+0x3da>
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 8001048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104c:	4881      	ldr	r0, [pc, #516]	; (8001254 <EE_Init+0x2d8>)
 800104e:	f7ff ff6b 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	497f      	ldr	r1, [pc, #508]	; (8001258 <EE_Init+0x2dc>)
 800105c:	2001      	movs	r0, #1
 800105e:	f004 f8ff 	bl	8005260 <HAL_FLASH_Program>
 8001062:	4603      	mov	r3, r0
 8001064:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 8001066:	7efb      	ldrb	r3, [r7, #27]
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 816c 	beq.w	8001346 <EE_Init+0x3ca>
          return FlashStatus;
 800106e:	7efb      	ldrb	r3, [r7, #27]
 8001070:	b29b      	uxth	r3, r3
 8001072:	e170      	b.n	8001356 <EE_Init+0x3da>
        FlashStatus = EE_Format();
 8001074:	f000 fa10 	bl	8001498 <EE_Format>
 8001078:	4603      	mov	r3, r0
 800107a:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 800107c:	7efb      	ldrb	r3, [r7, #27]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8161 	beq.w	8001346 <EE_Init+0x3ca>
          return FlashStatus;
 8001084:	7efb      	ldrb	r3, [r7, #27]
 8001086:	b29b      	uxth	r3, r3
 8001088:	e165      	b.n	8001356 <EE_Init+0x3da>

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800108a:	8c3b      	ldrh	r3, [r7, #32]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d168      	bne.n	8001162 <EE_Init+0x1e6>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001094:	e030      	b.n	80010f8 <EE_Init+0x17c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001096:	4b71      	ldr	r3, [pc, #452]	; (800125c <EE_Init+0x2e0>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	b29a      	uxth	r2, r3
 800109c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800109e:	4970      	ldr	r1, [pc, #448]	; (8001260 <EE_Init+0x2e4>)
 80010a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d101      	bne.n	80010ac <EE_Init+0x130>
          {
            x = VarIdx;
 80010a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010aa:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80010ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d01d      	beq.n	80010f2 <EE_Init+0x176>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80010b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010b8:	4a69      	ldr	r2, [pc, #420]	; (8001260 <EE_Init+0x2e4>)
 80010ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010be:	4969      	ldr	r1, [pc, #420]	; (8001264 <EE_Init+0x2e8>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f97d 	bl	80013c0 <EE_ReadVariable>
 80010c6:	4603      	mov	r3, r0
 80010c8:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80010ca:	8bbb      	ldrh	r3, [r7, #28]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d010      	beq.n	80010f2 <EE_Init+0x176>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80010d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010d2:	4a63      	ldr	r2, [pc, #396]	; (8001260 <EE_Init+0x2e4>)
 80010d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010d8:	4b62      	ldr	r3, [pc, #392]	; (8001264 <EE_Init+0x2e8>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f000 fa7c 	bl	80015dc <EE_VerifyPageFullWriteVariable>
 80010e4:	4603      	mov	r3, r0
 80010e6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010e8:	8bfb      	ldrh	r3, [r7, #30]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <EE_Init+0x176>
              {
                return EepromStatus;
 80010ee:	8bfb      	ldrh	r3, [r7, #30]
 80010f0:	e131      	b.n	8001356 <EE_Init+0x3da>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f4:	3301      	adds	r3, #1
 80010f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d9cb      	bls.n	8001096 <EE_Init+0x11a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	4953      	ldr	r1, [pc, #332]	; (8001254 <EE_Init+0x2d8>)
 8001108:	2001      	movs	r0, #1
 800110a:	f004 f8a9 	bl	8005260 <HAL_FLASH_Program>
 800110e:	4603      	mov	r3, r0
 8001110:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001112:	7efb      	ldrb	r3, [r7, #27]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <EE_Init+0x1a2>
        {
          return FlashStatus;
 8001118:	7efb      	ldrb	r3, [r7, #27]
 800111a:	b29b      	uxth	r3, r3
 800111c:	e11b      	b.n	8001356 <EE_Init+0x3da>
        }
        pEraseInit.Sector = PAGE1_ID;
 800111e:	2303      	movs	r3, #3
 8001120:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001126:	2302      	movs	r3, #2
 8001128:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800112a:	484b      	ldr	r0, [pc, #300]	; (8001258 <EE_Init+0x2dc>)
 800112c:	f000 f922 	bl	8001374 <EE_VerifyPageFullyErased>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 8109 	bne.w	800134a <EE_Init+0x3ce>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001138:	f107 0214 	add.w	r2, r7, #20
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fa35 	bl	80055b0 <HAL_FLASHEx_Erase>
 8001146:	4603      	mov	r3, r0
 8001148:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800114a:	7efb      	ldrb	r3, [r7, #27]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <EE_Init+0x1da>
          {
            return FlashStatus;
 8001150:	7efb      	ldrb	r3, [r7, #27]
 8001152:	b29b      	uxth	r3, r3
 8001154:	e0ff      	b.n	8001356 <EE_Init+0x3da>
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 8001156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115a:	483f      	ldr	r0, [pc, #252]	; (8001258 <EE_Init+0x2dc>)
 800115c:	f7ff fee4 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
        if (FlashStatus != HAL_OK)
        {
          return FlashStatus;
        }
      }
      break;
 8001160:	e0f3      	b.n	800134a <EE_Init+0x3ce>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001162:	8c3b      	ldrh	r3, [r7, #32]
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	4293      	cmp	r3, r2
 800116a:	d130      	bne.n	80011ce <EE_Init+0x252>
        pEraseInit.Sector = PAGE1_ID;
 800116c:	2303      	movs	r3, #3
 800116e:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001174:	2302      	movs	r3, #2
 8001176:	613b      	str	r3, [r7, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001178:	4837      	ldr	r0, [pc, #220]	; (8001258 <EE_Init+0x2dc>)
 800117a:	f000 f8fb 	bl	8001374 <EE_VerifyPageFullyErased>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d113      	bne.n	80011ac <EE_Init+0x230>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001184:	f107 0214 	add.w	r2, r7, #20
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f004 fa0f 	bl	80055b0 <HAL_FLASHEx_Erase>
 8001192:	4603      	mov	r3, r0
 8001194:	76fb      	strb	r3, [r7, #27]
          if (FlashStatus != HAL_OK)
 8001196:	7efb      	ldrb	r3, [r7, #27]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <EE_Init+0x226>
            return FlashStatus;
 800119c:	7efb      	ldrb	r3, [r7, #27]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	e0d9      	b.n	8001356 <EE_Init+0x3da>
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 80011a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a6:	482c      	ldr	r0, [pc, #176]	; (8001258 <EE_Init+0x2dc>)
 80011a8:	f7ff febe 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	4927      	ldr	r1, [pc, #156]	; (8001254 <EE_Init+0x2d8>)
 80011b6:	2001      	movs	r0, #1
 80011b8:	f004 f852 	bl	8005260 <HAL_FLASH_Program>
 80011bc:	4603      	mov	r3, r0
 80011be:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 80011c0:	7efb      	ldrb	r3, [r7, #27]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80c1 	beq.w	800134a <EE_Init+0x3ce>
          return FlashStatus;
 80011c8:	7efb      	ldrb	r3, [r7, #27]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	e0c3      	b.n	8001356 <EE_Init+0x3da>
        FlashStatus = EE_Format();
 80011ce:	f000 f963 	bl	8001498 <EE_Format>
 80011d2:	4603      	mov	r3, r0
 80011d4:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 80011d6:	7efb      	ldrb	r3, [r7, #27]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80b6 	beq.w	800134a <EE_Init+0x3ce>
          return FlashStatus;
 80011de:	7efb      	ldrb	r3, [r7, #27]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	e0b8      	b.n	8001356 <EE_Init+0x3da>

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80011e4:	8c3b      	ldrh	r3, [r7, #32]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10a      	bne.n	8001200 <EE_Init+0x284>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80011ea:	f000 f955 	bl	8001498 <EE_Format>
 80011ee:	4603      	mov	r3, r0
 80011f0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80011f2:	7efb      	ldrb	r3, [r7, #27]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80aa 	beq.w	800134e <EE_Init+0x3d2>
        {
          return FlashStatus;
 80011fa:	7efb      	ldrb	r3, [r7, #27]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	e0aa      	b.n	8001356 <EE_Init+0x3da>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001200:	8c3b      	ldrh	r3, [r7, #32]
 8001202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001206:	4293      	cmp	r3, r2
 8001208:	d121      	bne.n	800124e <EE_Init+0x2d2>
      {
        pEraseInit.Sector = PAGE1_ID;
 800120a:	2303      	movs	r3, #3
 800120c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001212:	2302      	movs	r3, #2
 8001214:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <EE_Init+0x2dc>)
 8001218:	f000 f8ac 	bl	8001374 <EE_VerifyPageFullyErased>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 8095 	bne.w	800134e <EE_Init+0x3d2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001224:	f107 0214 	add.w	r2, r7, #20
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f004 f9bf 	bl	80055b0 <HAL_FLASHEx_Erase>
 8001232:	4603      	mov	r3, r0
 8001234:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001236:	7efb      	ldrb	r3, [r7, #27]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <EE_Init+0x2c6>
          {
            return FlashStatus;
 800123c:	7efb      	ldrb	r3, [r7, #27]
 800123e:	b29b      	uxth	r3, r3
 8001240:	e089      	b.n	8001356 <EE_Init+0x3da>
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 8001242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <EE_Init+0x2dc>)
 8001248:	f7ff fe6e 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
            return FlashStatus;
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
        }
      }
      break;
 800124c:	e07f      	b.n	800134e <EE_Init+0x3d2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800124e:	2300      	movs	r3, #0
 8001250:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001252:	e03a      	b.n	80012ca <EE_Init+0x34e>
 8001254:	08010000 	.word	0x08010000
 8001258:	08018000 	.word	0x08018000
 800125c:	08010006 	.word	0x08010006
 8001260:	20000450 	.word	0x20000450
 8001264:	2000022c 	.word	0x2000022c
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <EE_Init+0x3e4>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29a      	uxth	r2, r3
 800126e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001270:	493c      	ldr	r1, [pc, #240]	; (8001364 <EE_Init+0x3e8>)
 8001272:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001276:	429a      	cmp	r2, r3
 8001278:	d101      	bne.n	800127e <EE_Init+0x302>
            x = VarIdx;
 800127a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127c:	84bb      	strh	r3, [r7, #36]	; 0x24
          if (VarIdx != x)
 800127e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001280:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001284:	429a      	cmp	r2, r3
 8001286:	d01d      	beq.n	80012c4 <EE_Init+0x348>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001288:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800128a:	4a36      	ldr	r2, [pc, #216]	; (8001364 <EE_Init+0x3e8>)
 800128c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <EE_Init+0x3ec>)
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f894 	bl	80013c0 <EE_ReadVariable>
 8001298:	4603      	mov	r3, r0
 800129a:	83bb      	strh	r3, [r7, #28]
            if (ReadStatus != 0x1)
 800129c:	8bbb      	ldrh	r3, [r7, #28]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d010      	beq.n	80012c4 <EE_Init+0x348>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80012a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012a4:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <EE_Init+0x3e8>)
 80012a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <EE_Init+0x3ec>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4610      	mov	r0, r2
 80012b2:	f000 f993 	bl	80015dc <EE_VerifyPageFullWriteVariable>
 80012b6:	4603      	mov	r3, r0
 80012b8:	83fb      	strh	r3, [r7, #30]
              if (EepromStatus != HAL_OK)
 80012ba:	8bfb      	ldrh	r3, [r7, #30]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <EE_Init+0x348>
                return EepromStatus;
 80012c0:	8bfb      	ldrh	r3, [r7, #30]
 80012c2:	e048      	b.n	8001356 <EE_Init+0x3da>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80012c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012c6:	3301      	adds	r3, #1
 80012c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d9cb      	bls.n	8001268 <EE_Init+0x2ec>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	4924      	ldr	r1, [pc, #144]	; (800136c <EE_Init+0x3f0>)
 80012da:	2001      	movs	r0, #1
 80012dc:	f003 ffc0 	bl	8005260 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 80012e4:	7efb      	ldrb	r3, [r7, #27]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <EE_Init+0x374>
          return FlashStatus;
 80012ea:	7efb      	ldrb	r3, [r7, #27]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	e032      	b.n	8001356 <EE_Init+0x3da>
        pEraseInit.Sector = PAGE0_ID;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80012f8:	2302      	movs	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <EE_Init+0x3f4>)
 80012fe:	f000 f839 	bl	8001374 <EE_VerifyPageFullyErased>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d122      	bne.n	800134e <EE_Init+0x3d2>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001308:	f107 0214 	add.w	r2, r7, #20
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f004 f94d 	bl	80055b0 <HAL_FLASHEx_Erase>
 8001316:	4603      	mov	r3, r0
 8001318:	76fb      	strb	r3, [r7, #27]
          if (FlashStatus != HAL_OK)
 800131a:	7efb      	ldrb	r3, [r7, #27]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <EE_Init+0x3aa>
            return FlashStatus;
 8001320:	7efb      	ldrb	r3, [r7, #27]
 8001322:	b29b      	uxth	r3, r3
 8001324:	e017      	b.n	8001356 <EE_Init+0x3da>
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 8001326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <EE_Init+0x3f4>)
 800132c:	f7ff fdfc 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
      break;
 8001330:	e00d      	b.n	800134e <EE_Init+0x3d2>

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001332:	f000 f8b1 	bl	8001498 <EE_Format>
 8001336:	4603      	mov	r3, r0
 8001338:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800133a:	7efb      	ldrb	r3, [r7, #27]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d008      	beq.n	8001352 <EE_Init+0x3d6>
      {
        return FlashStatus;
 8001340:	7efb      	ldrb	r3, [r7, #27]
 8001342:	b29b      	uxth	r3, r3
 8001344:	e007      	b.n	8001356 <EE_Init+0x3da>
      break;
 8001346:	bf00      	nop
 8001348:	e004      	b.n	8001354 <EE_Init+0x3d8>
      break;
 800134a:	bf00      	nop
 800134c:	e002      	b.n	8001354 <EE_Init+0x3d8>
      break;
 800134e:	bf00      	nop
 8001350:	e000      	b.n	8001354 <EE_Init+0x3d8>
      }
      break;
 8001352:	bf00      	nop
  }

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	08018006 	.word	0x08018006
 8001364:	20000450 	.word	0x20000450
 8001368:	2000022c 	.word	0x2000022c
 800136c:	08018000 	.word	0x08018000
 8001370:	08010000 	.word	0x08010000

08001374 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8001380:	f245 5355 	movw	r3, #21845	; 0x5555
 8001384:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001386:	e00d      	b.n	80013a4 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800138e:	897b      	ldrh	r3, [r7, #10]
 8001390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001394:	4293      	cmp	r3, r2
 8001396:	d002      	beq.n	800139e <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]

      break;
 800139c:	e006      	b.n	80013ac <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <EE_VerifyPageFullyErased+0x48>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d9ed      	bls.n	8001388 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	b29b      	uxth	r3, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	08017fff 	.word	0x08017fff

080013c0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80013d0:	f245 5355 	movw	r3, #21845	; 0x5555
 80013d4:	81bb      	strh	r3, [r7, #12]
 80013d6:	2301      	movs	r3, #1
 80013d8:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <EE_ReadVariable+0x8c>)
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <EE_ReadVariable+0x8c>)
 80013e0:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f8b4 	bl	8001550 <EE_FindValidPage>
 80013e8:	4603      	mov	r3, r0
 80013ea:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	2bab      	cmp	r3, #171	; 0xab
 80013f0:	d101      	bne.n	80013f6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80013f2:	23ab      	movs	r3, #171	; 0xab
 80013f4:	e025      	b.n	8001442 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80013f6:	89fa      	ldrh	r2, [r7, #14]
 80013f8:	f241 0302 	movw	r3, #4098	; 0x1002
 80013fc:	4413      	add	r3, r2
 80013fe:	03db      	lsls	r3, r3, #15
 8001400:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	3301      	adds	r3, #1
 8001406:	03da      	lsls	r2, r3, #15
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <EE_ReadVariable+0x90>)
 800140a:	4413      	add	r3, r2
 800140c:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800140e:	e012      	b.n	8001436 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001416:	89ba      	ldrh	r2, [r7, #12]
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	429a      	cmp	r2, r3
 800141c:	d108      	bne.n	8001430 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	3b02      	subs	r3, #2
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29a      	uxth	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	82fb      	strh	r3, [r7, #22]

      break;
 800142e:	e007      	b.n	8001440 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	3b04      	subs	r3, #4
 8001434:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3302      	adds	r3, #2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8e7      	bhi.n	8001410 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001440:	8afb      	ldrh	r3, [r7, #22]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	08010000 	.word	0x08010000
 8001450:	0800fffe 	.word	0x0800fffe

08001454 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	4613      	mov	r3, r2
 8001462:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001468:	88ba      	ldrh	r2, [r7, #4]
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f8b4 	bl	80015dc <EE_VerifyPageFullWriteVariable>
 8001474:	4603      	mov	r3, r0
 8001476:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	2b80      	cmp	r3, #128	; 0x80
 800147c:	d107      	bne.n	800148e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800147e:	88ba      	ldrh	r2, [r7, #4]
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f907 	bl	8001698 <EE_PageTransfer>
 800148a:	4603      	mov	r3, r0
 800148c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800148e:	89fb      	ldrh	r3, [r7, #14]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
  uint32_t SectorError = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80014aa:	2302      	movs	r3, #2
 80014ac:	607b      	str	r3, [r7, #4]
  pEraseInit.NbSectors = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80014b2:	2302      	movs	r3, #2
 80014b4:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80014b6:	4824      	ldr	r0, [pc, #144]	; (8001548 <EE_Format+0xb0>)
 80014b8:	f7ff ff5c 	bl	8001374 <EE_VerifyPageFullyErased>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d112      	bne.n	80014e8 <EE_Format+0x50>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80014c2:	f107 0210 	add.w	r2, r7, #16
 80014c6:	463b      	mov	r3, r7
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 f870 	bl	80055b0 <HAL_FLASHEx_Erase>
 80014d0:	4603      	mov	r3, r0
 80014d2:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <EE_Format+0x46>
    {
      return FlashStatus;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	e02f      	b.n	800153e <EE_Format+0xa6>
    }
    SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 80014de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e2:	4819      	ldr	r0, [pc, #100]	; (8001548 <EE_Format+0xb0>)
 80014e4:	f7ff fd20 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	4915      	ldr	r1, [pc, #84]	; (8001548 <EE_Format+0xb0>)
 80014f2:	2001      	movs	r0, #1
 80014f4:	f003 feb4 	bl	8005260 <HAL_FLASH_Program>
 80014f8:	4603      	mov	r3, r0
 80014fa:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <EE_Format+0x6e>
  {
    return FlashStatus;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	e01b      	b.n	800153e <EE_Format+0xa6>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001506:	2303      	movs	r3, #3
 8001508:	607b      	str	r3, [r7, #4]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800150a:	4810      	ldr	r0, [pc, #64]	; (800154c <EE_Format+0xb4>)
 800150c:	f7ff ff32 	bl	8001374 <EE_VerifyPageFullyErased>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d112      	bne.n	800153c <EE_Format+0xa4>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8001516:	f107 0210 	add.w	r2, r7, #16
 800151a:	463b      	mov	r3, r7
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f004 f846 	bl	80055b0 <HAL_FLASHEx_Erase>
 8001524:	4603      	mov	r3, r0
 8001526:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <EE_Format+0x9a>
    {
      return FlashStatus;
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	e005      	b.n	800153e <EE_Format+0xa6>
    }
    SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 8001532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <EE_Format+0xb4>)
 8001538:	f7ff fcf6 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>
  }
  
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08010000 	.word	0x08010000
 800154c:	08018000 	.word	0x08018000

08001550 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800155a:	2306      	movs	r3, #6
 800155c:	81fb      	strh	r3, [r7, #14]
 800155e:	2306      	movs	r3, #6
 8001560:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <EE_FindValidPage+0x84>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <EE_FindValidPage+0x88>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01b      	beq.n	80015ac <EE_FindValidPage+0x5c>
 8001574:	2b01      	cmp	r3, #1
 8001576:	d125      	bne.n	80015c4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001578:	89bb      	ldrh	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d108      	bne.n	8001590 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800157e:	89fb      	ldrh	r3, [r7, #14]
 8001580:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001584:	4293      	cmp	r3, r2
 8001586:	d101      	bne.n	800158c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001588:	2300      	movs	r3, #0
 800158a:	e01c      	b.n	80015c6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800158c:	2301      	movs	r3, #1
 800158e:	e01a      	b.n	80015c6 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001590:	89fb      	ldrh	r3, [r7, #14]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d108      	bne.n	80015a8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001596:	89bb      	ldrh	r3, [r7, #12]
 8001598:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80015a0:	2301      	movs	r3, #1
 80015a2:	e010      	b.n	80015c6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80015a4:	2300      	movs	r3, #0
 80015a6:	e00e      	b.n	80015c6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80015a8:	23ab      	movs	r3, #171	; 0xab
 80015aa:	e00c      	b.n	80015c6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80015b2:	2300      	movs	r3, #0
 80015b4:	e007      	b.n	80015c6 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 80015b6:	89bb      	ldrh	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80015bc:	2301      	movs	r3, #1
 80015be:	e002      	b.n	80015c6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80015c0:	23ab      	movs	r3, #171	; 0xab
 80015c2:	e000      	b.n	80015c6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80015c4:	2300      	movs	r3, #0
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	08010000 	.word	0x08010000
 80015d8:	08018000 	.word	0x08018000

080015dc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	460a      	mov	r2, r1
 80015e6:	80fb      	strh	r3, [r7, #6]
 80015e8:	4613      	mov	r3, r2
 80015ea:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <EE_VerifyPageFullWriteVariable+0xb0>)
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <EE_VerifyPageFullWriteVariable+0xb4>)
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff ffa7 	bl	8001550 <EE_FindValidPage>
 8001602:	4603      	mov	r3, r0
 8001604:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001606:	8a3b      	ldrh	r3, [r7, #16]
 8001608:	2bab      	cmp	r3, #171	; 0xab
 800160a:	d101      	bne.n	8001610 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 800160c:	23ab      	movs	r3, #171	; 0xab
 800160e:	e039      	b.n	8001684 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001610:	8a3a      	ldrh	r2, [r7, #16]
 8001612:	f241 0302 	movw	r3, #4098	; 0x1002
 8001616:	4413      	add	r3, r2
 8001618:	03db      	lsls	r3, r3, #15
 800161a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800161c:	8a3b      	ldrh	r3, [r7, #16]
 800161e:	3301      	adds	r3, #1
 8001620:	03da      	lsls	r2, r3, #15
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <EE_VerifyPageFullWriteVariable+0xb8>)
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8001628:	e027      	b.n	800167a <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001632:	d11f      	bne.n	8001674 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	f04f 0400 	mov.w	r4, #0
 800163a:	461a      	mov	r2, r3
 800163c:	4623      	mov	r3, r4
 800163e:	6979      	ldr	r1, [r7, #20]
 8001640:	2001      	movs	r0, #1
 8001642:	f003 fe0d 	bl	8005260 <HAL_FLASH_Program>
 8001646:	4603      	mov	r3, r0
 8001648:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800164a:	7cfb      	ldrb	r3, [r7, #19]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	b29b      	uxth	r3, r3
 8001654:	e016      	b.n	8001684 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	1c99      	adds	r1, r3, #2
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	f04f 0400 	mov.w	r4, #0
 8001660:	461a      	mov	r2, r3
 8001662:	4623      	mov	r3, r4
 8001664:	2001      	movs	r0, #1
 8001666:	f003 fdfb 	bl	8005260 <HAL_FLASH_Program>
 800166a:	4603      	mov	r3, r0
 800166c:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800166e:	7cfb      	ldrb	r3, [r7, #19]
 8001670:	b29b      	uxth	r3, r3
 8001672:	e007      	b.n	8001684 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3304      	adds	r3, #4
 8001678:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3d3      	bcc.n	800162a <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001682:	2380      	movs	r3, #128	; 0x80
}
 8001684:	4618      	mov	r0, r3
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	08010000 	.word	0x08010000
 8001690:	08018000 	.word	0x08018000
 8001694:	0800ffff 	.word	0x0800ffff

08001698 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	460a      	mov	r2, r1
 80016a2:	80fb      	strh	r3, [r7, #6]
 80016a4:	4613      	mov	r3, r2
 80016a6:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 80016ae:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <EE_PageTransfer+0x180>)
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t OldPageAddress = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t OldPageId=0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	843b      	strh	r3, [r7, #32]
 80016be:	2300      	movs	r3, #0
 80016c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	83fb      	strh	r3, [r7, #30]
 80016c6:	2300      	movs	r3, #0
 80016c8:	83bb      	strh	r3, [r7, #28]
  uint32_t SectorError = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff ff3e 	bl	8001550 <EE_FindValidPage>
 80016d4:	4603      	mov	r3, r0
 80016d6:	843b      	strh	r3, [r7, #32]

  if (ValidPage == PAGE1)       /* Page1 valid */
 80016d8:	8c3b      	ldrh	r3, [r7, #32]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <EE_PageTransfer+0x54>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80016de:	4b4e      	ldr	r3, [pc, #312]	; (8001818 <EE_PageTransfer+0x180>)
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page address  where variable will be moved from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 80016e2:	4b4e      	ldr	r3, [pc, #312]	; (800181c <EE_PageTransfer+0x184>)
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80016e6:	2303      	movs	r3, #3
 80016e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016ea:	e00b      	b.n	8001704 <EE_PageTransfer+0x6c>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80016ec:	8c3b      	ldrh	r3, [r7, #32]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <EE_PageTransfer+0x68>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <EE_PageTransfer+0x184>)
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page address  where variable will be moved from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 80016f6:	4b48      	ldr	r3, [pc, #288]	; (8001818 <EE_PageTransfer+0x180>)
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80016fa:	2302      	movs	r3, #2
 80016fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016fe:	e001      	b.n	8001704 <EE_PageTransfer+0x6c>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001700:	23ab      	movs	r3, #171	; 0xab
 8001702:	e084      	b.n	800180e <EE_PageTransfer+0x176>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8001704:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800170e:	2001      	movs	r0, #1
 8001710:	f003 fda6 	bl	8005260 <HAL_FLASH_Program>
 8001714:	4603      	mov	r3, r0
 8001716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800171a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <EE_PageTransfer+0x92>
  {
    return FlashStatus;
 8001722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001726:	b29b      	uxth	r3, r3
 8001728:	e071      	b.n	800180e <EE_PageTransfer+0x176>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800172a:	88ba      	ldrh	r2, [r7, #4]
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff53 	bl	80015dc <EE_VerifyPageFullWriteVariable>
 8001736:	4603      	mov	r3, r0
 8001738:	83fb      	strh	r3, [r7, #30]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800173a:	8bfb      	ldrh	r3, [r7, #30]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <EE_PageTransfer+0xac>
  {
    return EepromStatus;
 8001740:	8bfb      	ldrh	r3, [r7, #30]
 8001742:	e064      	b.n	800180e <EE_PageTransfer+0x176>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001744:	2300      	movs	r3, #0
 8001746:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001748:	e027      	b.n	800179a <EE_PageTransfer+0x102>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800174a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <EE_PageTransfer+0x188>)
 800174e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001752:	88fa      	ldrh	r2, [r7, #6]
 8001754:	429a      	cmp	r2, r3
 8001756:	d01d      	beq.n	8001794 <EE_PageTransfer+0xfc>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <EE_PageTransfer+0x188>)
 800175c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001760:	4930      	ldr	r1, [pc, #192]	; (8001824 <EE_PageTransfer+0x18c>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe2c 	bl	80013c0 <EE_ReadVariable>
 8001768:	4603      	mov	r3, r0
 800176a:	83bb      	strh	r3, [r7, #28]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800176c:	8bbb      	ldrh	r3, [r7, #28]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d010      	beq.n	8001794 <EE_PageTransfer+0xfc>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <EE_PageTransfer+0x188>)
 8001776:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <EE_PageTransfer+0x18c>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff ff2b 	bl	80015dc <EE_VerifyPageFullWriteVariable>
 8001786:	4603      	mov	r3, r0
 8001788:	83fb      	strh	r3, [r7, #30]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800178a:	8bfb      	ldrh	r3, [r7, #30]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <EE_PageTransfer+0xfc>
        {
          return EepromStatus;
 8001790:	8bfb      	ldrh	r3, [r7, #30]
 8001792:	e03c      	b.n	800180e <EE_PageTransfer+0x176>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001796:	3301      	adds	r3, #1
 8001798:	84bb      	strh	r3, [r7, #36]	; 0x24
 800179a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800179c:	2b02      	cmp	r3, #2
 800179e:	d9d4      	bls.n	800174a <EE_PageTransfer+0xb2>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80017a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a6:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80017ac:	2302      	movs	r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 80017b0:	f107 0218 	add.w	r2, r7, #24
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fef8 	bl	80055b0 <HAL_FLASHEx_Erase>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80017c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <EE_PageTransfer+0x13e>
  {
    return FlashStatus;
 80017ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	e01b      	b.n	800180e <EE_PageTransfer+0x176>
  }
  SCB_CleanInvalidateDCache_by_Addr((uint32_t*)OldPageAddress,PAGE_SIZE);
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fba3 	bl	8000f28 <SCB_CleanInvalidateDCache_by_Addr>

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017ec:	2001      	movs	r0, #1
 80017ee:	f003 fd37 	bl	8005260 <HAL_FLASH_Program>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80017f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <EE_PageTransfer+0x170>
  {
    return FlashStatus;
 8001800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001804:	b29b      	uxth	r3, r3
 8001806:	e002      	b.n	800180e <EE_PageTransfer+0x176>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800180c:	b29b      	uxth	r3, r3
}
 800180e:	4618      	mov	r0, r3
 8001810:	3730      	adds	r7, #48	; 0x30
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08010000 	.word	0x08010000
 800181c:	08018000 	.word	0x08018000
 8001820:	20000450 	.word	0x20000450
 8001824:	2000022c 	.word	0x2000022c

08001828 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001832:	20c8      	movs	r0, #200	; 0xc8
 8001834:	f000 feae 	bl	8002594 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001838:	f000 fa7a 	bl	8001d30 <ft5336_I2C_InitializeIfRequired>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800186c:	2300      	movs	r3, #0
 800186e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001870:	f000 fa5e 	bl	8001d30 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e010      	b.n	800189c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	21a8      	movs	r1, #168	; 0xa8
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fe69 	bl	8002558 <TS_IO_Read>
 8001886:	4603      	mov	r3, r0
 8001888:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b51      	cmp	r3, #81	; 0x51
 8001890:	d101      	bne.n	8001896 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	3301      	adds	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d802      	bhi.n	80018a8 <ft5336_ReadID+0x4e>
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0e8      	beq.n	800187a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80018a8:	7b7b      	ldrb	r3, [r7, #13]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	b29b      	uxth	r3, r3
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fa44 	bl	8001d50 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f932 	bl	8001b34 <ft5336_TS_DisableIT>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2102      	movs	r1, #2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fe33 	bl	8002558 <TS_IO_Read>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b05      	cmp	r3, #5
 8001908:	d901      	bls.n	800190e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <ft5336_TS_DetectTouch+0x50>)
 8001914:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <ft5336_TS_DetectTouch+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	b2db      	uxtb	r3, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000230 	.word	0x20000230

0800192c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800194e:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <ft5336_TS_GetXY+0x1d8>)
 8001950:	789a      	ldrb	r2, [r3, #2]
 8001952:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <ft5336_TS_GetXY+0x1d8>)
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	429a      	cmp	r2, r3
 8001958:	f080 80cf 	bcs.w	8001afa <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800195c:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <ft5336_TS_GetXY+0x1d8>)
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	2b09      	cmp	r3, #9
 8001962:	d871      	bhi.n	8001a48 <ft5336_TS_GetXY+0x11c>
 8001964:	a201      	add	r2, pc, #4	; (adr r2, 800196c <ft5336_TS_GetXY+0x40>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	08001995 	.word	0x08001995
 8001970:	080019a7 	.word	0x080019a7
 8001974:	080019b9 	.word	0x080019b9
 8001978:	080019cb 	.word	0x080019cb
 800197c:	080019dd 	.word	0x080019dd
 8001980:	080019ef 	.word	0x080019ef
 8001984:	08001a01 	.word	0x08001a01
 8001988:	08001a13 	.word	0x08001a13
 800198c:	08001a25 	.word	0x08001a25
 8001990:	08001a37 	.word	0x08001a37
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001994:	2304      	movs	r3, #4
 8001996:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001998:	2303      	movs	r3, #3
 800199a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800199c:	2306      	movs	r3, #6
 800199e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80019a0:	2305      	movs	r3, #5
 80019a2:	753b      	strb	r3, [r7, #20]
      break;
 80019a4:	e051      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80019a6:	230a      	movs	r3, #10
 80019a8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80019aa:	2309      	movs	r3, #9
 80019ac:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80019ae:	230c      	movs	r3, #12
 80019b0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80019b2:	230b      	movs	r3, #11
 80019b4:	753b      	strb	r3, [r7, #20]
      break;
 80019b6:	e048      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80019b8:	2310      	movs	r3, #16
 80019ba:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80019bc:	230f      	movs	r3, #15
 80019be:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80019c0:	2312      	movs	r3, #18
 80019c2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80019c4:	2311      	movs	r3, #17
 80019c6:	753b      	strb	r3, [r7, #20]
      break;
 80019c8:	e03f      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80019ca:	2316      	movs	r3, #22
 80019cc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80019ce:	2315      	movs	r3, #21
 80019d0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80019d2:	2318      	movs	r3, #24
 80019d4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80019d6:	2317      	movs	r3, #23
 80019d8:	753b      	strb	r3, [r7, #20]
      break;
 80019da:	e036      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80019dc:	231c      	movs	r3, #28
 80019de:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80019e0:	231b      	movs	r3, #27
 80019e2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80019e4:	231e      	movs	r3, #30
 80019e6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80019e8:	231d      	movs	r3, #29
 80019ea:	753b      	strb	r3, [r7, #20]
      break;
 80019ec:	e02d      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80019ee:	2322      	movs	r3, #34	; 0x22
 80019f0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80019f2:	2321      	movs	r3, #33	; 0x21
 80019f4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80019f6:	2324      	movs	r3, #36	; 0x24
 80019f8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80019fa:	2323      	movs	r3, #35	; 0x23
 80019fc:	753b      	strb	r3, [r7, #20]
      break;
 80019fe:	e024      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001a00:	2328      	movs	r3, #40	; 0x28
 8001a02:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001a04:	2327      	movs	r3, #39	; 0x27
 8001a06:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001a08:	232a      	movs	r3, #42	; 0x2a
 8001a0a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001a0c:	2329      	movs	r3, #41	; 0x29
 8001a0e:	753b      	strb	r3, [r7, #20]
      break;
 8001a10:	e01b      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001a12:	232e      	movs	r3, #46	; 0x2e
 8001a14:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001a16:	232d      	movs	r3, #45	; 0x2d
 8001a18:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001a1a:	2330      	movs	r3, #48	; 0x30
 8001a1c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001a1e:	232f      	movs	r3, #47	; 0x2f
 8001a20:	753b      	strb	r3, [r7, #20]
      break;
 8001a22:	e012      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001a24:	2334      	movs	r3, #52	; 0x34
 8001a26:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001a28:	2333      	movs	r3, #51	; 0x33
 8001a2a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001a2c:	2336      	movs	r3, #54	; 0x36
 8001a2e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001a30:	2335      	movs	r3, #53	; 0x35
 8001a32:	753b      	strb	r3, [r7, #20]
      break;
 8001a34:	e009      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001a36:	233a      	movs	r3, #58	; 0x3a
 8001a38:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001a3a:	2339      	movs	r3, #57	; 0x39
 8001a3c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001a3e:	233c      	movs	r3, #60	; 0x3c
 8001a40:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001a42:	233b      	movs	r3, #59	; 0x3b
 8001a44:	753b      	strb	r3, [r7, #20]
      break;
 8001a46:	e000      	b.n	8001a4a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001a48:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	7dfa      	ldrb	r2, [r7, #23]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fd80 	bl	8002558 <TS_IO_Read>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001a5c:	7cfb      	ldrb	r3, [r7, #19]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001a64:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	7dba      	ldrb	r2, [r7, #22]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd72 	bl	8002558 <TS_IO_Read>
 8001a74:	4603      	mov	r3, r0
 8001a76:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001a92:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	7d7a      	ldrb	r2, [r7, #21]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fd57 	bl	8002558 <TS_IO_Read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001aae:	7cfb      	ldrb	r3, [r7, #19]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001ab6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	7d3a      	ldrb	r2, [r7, #20]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fd49 	bl	8002558 <TS_IO_Read>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001aca:	7cfb      	ldrb	r3, [r7, #19]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001ae4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <ft5336_TS_GetXY+0x1dc>)
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <ft5336_TS_GetXY+0x1d8>)
 8001af0:	789b      	ldrb	r3, [r3, #2]
 8001af2:	3301      	adds	r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <ft5336_TS_GetXY+0x1d8>)
 8001af8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000230 	.word	0x20000230
 8001b08:	20000234 	.word	0x20000234

08001b0c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	21a4      	movs	r1, #164	; 0xa4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fcfc 	bl	8002524 <TS_IO_Write>
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	21a4      	movs	r1, #164	; 0xa4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fce8 	bl	8002524 <TS_IO_Write>
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	6039      	str	r1, [r7, #0]
 8001b94:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fcd9 	bl	8002558 <TS_IO_Read>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4603      	mov	r3, r0
 8001bca:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <ft5336_TS_GetTouchInfo+0x158>)
 8001bde:	785b      	ldrb	r3, [r3, #1]
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f080 8090 	bcs.w	8001d0a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d85d      	bhi.n	8001cac <ft5336_TS_GetTouchInfo+0xf0>
 8001bf0:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <ft5336_TS_GetTouchInfo+0x3c>)
 8001bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf6:	bf00      	nop
 8001bf8:	08001c21 	.word	0x08001c21
 8001bfc:	08001c2f 	.word	0x08001c2f
 8001c00:	08001c3d 	.word	0x08001c3d
 8001c04:	08001c4b 	.word	0x08001c4b
 8001c08:	08001c59 	.word	0x08001c59
 8001c0c:	08001c67 	.word	0x08001c67
 8001c10:	08001c75 	.word	0x08001c75
 8001c14:	08001c83 	.word	0x08001c83
 8001c18:	08001c91 	.word	0x08001c91
 8001c1c:	08001c9f 	.word	0x08001c9f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001c20:	2303      	movs	r3, #3
 8001c22:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001c24:	2307      	movs	r3, #7
 8001c26:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	757b      	strb	r3, [r7, #21]
      break;
 8001c2c:	e03f      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001c2e:	2309      	movs	r3, #9
 8001c30:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001c32:	230d      	movs	r3, #13
 8001c34:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001c36:	230e      	movs	r3, #14
 8001c38:	757b      	strb	r3, [r7, #21]
      break;
 8001c3a:	e038      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001c40:	2313      	movs	r3, #19
 8001c42:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001c44:	2314      	movs	r3, #20
 8001c46:	757b      	strb	r3, [r7, #21]
      break;
 8001c48:	e031      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001c4a:	2315      	movs	r3, #21
 8001c4c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001c4e:	2319      	movs	r3, #25
 8001c50:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001c52:	231a      	movs	r3, #26
 8001c54:	757b      	strb	r3, [r7, #21]
      break;
 8001c56:	e02a      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001c58:	231b      	movs	r3, #27
 8001c5a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001c60:	2320      	movs	r3, #32
 8001c62:	757b      	strb	r3, [r7, #21]
      break;
 8001c64:	e023      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001c66:	2321      	movs	r3, #33	; 0x21
 8001c68:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001c6a:	2325      	movs	r3, #37	; 0x25
 8001c6c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001c6e:	2326      	movs	r3, #38	; 0x26
 8001c70:	757b      	strb	r3, [r7, #21]
      break;
 8001c72:	e01c      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001c74:	2327      	movs	r3, #39	; 0x27
 8001c76:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001c78:	232b      	movs	r3, #43	; 0x2b
 8001c7a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001c7c:	232c      	movs	r3, #44	; 0x2c
 8001c7e:	757b      	strb	r3, [r7, #21]
      break;
 8001c80:	e015      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001c82:	232d      	movs	r3, #45	; 0x2d
 8001c84:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001c86:	2331      	movs	r3, #49	; 0x31
 8001c88:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001c8a:	2332      	movs	r3, #50	; 0x32
 8001c8c:	757b      	strb	r3, [r7, #21]
      break;
 8001c8e:	e00e      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001c90:	2333      	movs	r3, #51	; 0x33
 8001c92:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001c94:	2337      	movs	r3, #55	; 0x37
 8001c96:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001c98:	2338      	movs	r3, #56	; 0x38
 8001c9a:	757b      	strb	r3, [r7, #21]
      break;
 8001c9c:	e007      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001c9e:	2339      	movs	r3, #57	; 0x39
 8001ca0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001ca2:	233d      	movs	r3, #61	; 0x3d
 8001ca4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001ca6:	233e      	movs	r3, #62	; 0x3e
 8001ca8:	757b      	strb	r3, [r7, #21]
      break;
 8001caa:	e000      	b.n	8001cae <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001cac:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	7dfa      	ldrb	r2, [r7, #23]
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fc4e 	bl	8002558 <TS_IO_Read>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001cc0:	7d3b      	ldrb	r3, [r7, #20]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	119b      	asrs	r3, r3, #6
 8001cc6:	f003 0203 	and.w	r2, r3, #3
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001cce:	89fb      	ldrh	r3, [r7, #14]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	7dba      	ldrb	r2, [r7, #22]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fc3e 	bl	8002558 <TS_IO_Read>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001ce0:	7d3b      	ldrb	r3, [r7, #20]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	7d7a      	ldrb	r2, [r7, #21]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fc30 	bl	8002558 <TS_IO_Read>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001cfc:	7d3b      	ldrb	r3, [r7, #20]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	111b      	asrs	r3, r3, #4
 8001d02:	f003 0204 	and.w	r2, r3, #4
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000230 	.word	0x20000230

08001d18 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000230 	.word	0x20000230

08001d30 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001d34:	f7ff fff0 	bl	8001d18 <ft5336_Get_I2C_InitializedStatus>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001d3e:	f000 fbe7 	bl	8002510 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001d42:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000230 	.word	0x20000230

08001d50 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	0000      	movs	r0, r0
	...

08001d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d70:	b598      	push	{r3, r4, r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d74:	f002 fbb1 	bl	80044da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d78:	f000 f892 	bl	8001ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7c:	f000 f9f2 	bl	8002164 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d80:	f000 f99c 	bl	80020bc <MX_TIM2_Init>
  MX_RTC_Init();
 8001d84:	f000 f974 	bl	8002070 <MX_RTC_Init>
  MX_CRC_Init();
 8001d88:	f000 f91e 	bl	8001fc8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001d8c:	f000 f93e 	bl	800200c <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

 // counter = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);


  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001d90:	2100      	movs	r1, #0
 8001d92:	4839      	ldr	r0, [pc, #228]	; (8001e78 <main+0x108>)
 8001d94:	f005 fdb8 	bl	8007908 <HAL_TIM_IC_Start_IT>





  HAL_Delay(100);
 8001d98:	2064      	movs	r0, #100	; 0x64
 8001d9a:	f002 fbfb 	bl	8004594 <HAL_Delay>


  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8001d9e:	f001 f8b7 	bl	8002f10 <BSP_SDRAM_Init>
//  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
  BSP_TS_Init(480, 272);
 8001da2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001da6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001daa:	f001 fa67 	bl	800327c <BSP_TS_Init>
  BSP_LCD_Init();
 8001dae:	f000 fbfd 	bl	80025ac <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001db2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 fc90 	bl	80026dc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001dbc:	f000 fe90 	bl	8002ae0 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 fceb 	bl	800279c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001dc6:	482d      	ldr	r0, [pc, #180]	; (8001e7c <main+0x10c>)
 8001dc8:	f000 fd12 	bl	80027f0 <BSP_LCD_Clear>
//  BSP_LCD_DisplayStringAt(20, 20, (uint8_t *)"Hello!", LEFT_MODE);

  HAL_Delay(1000);
 8001dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd0:	f002 fbe0 	bl	8004594 <HAL_Delay>



  HAL_FLASH_Unlock(); // unlock flash memory to be used as eeprom
 8001dd4:	f003 faa0 	bl	8005318 <HAL_FLASH_Unlock>

  /* Configure LED1 */

  /* EEPROM Init */
  EE_Init();   //init eeprom
 8001dd8:	f7ff f8d0 	bl	8000f7c <EE_Init>



	  EE_ReadVariable(3,&counter_1_1);   // 4th 8-bit of 32 bit read from eeprom
 8001ddc:	4928      	ldr	r1, [pc, #160]	; (8001e80 <main+0x110>)
 8001dde:	2003      	movs	r0, #3
 8001de0:	f7ff faee 	bl	80013c0 <EE_ReadVariable>


	  EE_ReadVariable(2,&counter_1_2);    //3rd  8-bit of 32 bit read from eeprom
 8001de4:	4927      	ldr	r1, [pc, #156]	; (8001e84 <main+0x114>)
 8001de6:	2002      	movs	r0, #2
 8001de8:	f7ff faea 	bl	80013c0 <EE_ReadVariable>

	  EE_ReadVariable(1,&counter_1_3);    //2rd  8-bit of 32 bit read from eeprom
 8001dec:	4926      	ldr	r1, [pc, #152]	; (8001e88 <main+0x118>)
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7ff fae6 	bl	80013c0 <EE_ReadVariable>

	  EE_ReadVariable(0,&counter_1_4);    //1rd  8-bit of 32 bit read from eeprom
 8001df4:	4925      	ldr	r1, [pc, #148]	; (8001e8c <main+0x11c>)
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff fae2 	bl	80013c0 <EE_ReadVariable>


// Combine all four 8bit into 32 bit value
	counter1value_int = (counter_1_4 << 0) | (counter_1_3 << 8)|(counter_1_2 << 16)|(counter_1_1 << 24);
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <main+0x11c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <main+0x118>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <main+0x114>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	431a      	orrs	r2, r3
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <main+0x110>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	061b      	lsls	r3, r3, #24
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <main+0x120>)
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_TS_GetState(&ts);  // Get Touch pad status
 8001e20:	481c      	ldr	r0, [pc, #112]	; (8001e94 <main+0x124>)
 8001e22:	f001 fa6b 	bl	80032fc <BSP_TS_GetState>





    counter1value_int  = counter1value_int + 300000.0;     // a dummy counter counter to be store before power off// incremented by 300000.0
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <main+0x120>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb8a 	bl	8000544 <__aeabi_ui2d>
 8001e30:	a30f      	add	r3, pc, #60	; (adr r3, 8001e70 <main+0x100>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f7fe fa49 	bl	80002cc <__adddf3>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4621      	mov	r1, r4
 8001e42:	f7fe fed1 	bl	8000be8 <__aeabi_d2uiz>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <main+0x120>)
 8001e4a:	601a      	str	r2, [r3, #0]
	sprintf(tCounter, "Totalizer: %10d",counter1value_int ); // int to string
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <main+0x120>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4911      	ldr	r1, [pc, #68]	; (8001e98 <main+0x128>)
 8001e54:	4811      	ldr	r0, [pc, #68]	; (8001e9c <main+0x12c>)
 8001e56:	f006 ffb1 	bl	8008dbc <siprintf>

	BSP_LCD_DisplayStringAt(20, 200, (uint32_t *)tCounter, LEFT_MODE); // Display on LCD
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <main+0x12c>)
 8001e5e:	21c8      	movs	r1, #200	; 0xc8
 8001e60:	2014      	movs	r0, #20
 8001e62:	f000 fd31 	bl	80028c8 <BSP_LCD_DisplayStringAt>


    HAL_Delay(1000);  //Delay
 8001e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6a:	f002 fb93 	bl	8004594 <HAL_Delay>
  {
 8001e6e:	e7d7      	b.n	8001e20 <main+0xb0>
 8001e70:	00000000 	.word	0x00000000
 8001e74:	41124f80 	.word	0x41124f80
 8001e78:	20000530 	.word	0x20000530
 8001e7c:	ff0000ff 	.word	0xff0000ff
 8001e80:	200004cc 	.word	0x200004cc
 8001e84:	200004c4 	.word	0x200004c4
 8001e88:	2000057c 	.word	0x2000057c
 8001e8c:	2000047c 	.word	0x2000047c
 8001e90:	20000238 	.word	0x20000238
 8001e94:	20000480 	.word	0x20000480
 8001e98:	0800a598 	.word	0x0800a598
 8001e9c:	20000434 	.word	0x20000434

08001ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0b4      	sub	sp, #208	; 0xd0
 8001ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eaa:	2230      	movs	r2, #48	; 0x30
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f006 fb20 	bl	80084f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	2284      	movs	r2, #132	; 0x84
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f006 fb11 	bl	80084f4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ed2:	f004 fb37 	bl	8006544 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <SystemClock_Config+0x120>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a39      	ldr	r2, [pc, #228]	; (8001fc0 <SystemClock_Config+0x120>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <SystemClock_Config+0x120>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eee:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <SystemClock_Config+0x124>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a34      	ldr	r2, [pc, #208]	; (8001fc4 <SystemClock_Config+0x124>)
 8001ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <SystemClock_Config+0x124>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f06:	2309      	movs	r3, #9
 8001f08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f3a:	2309      	movs	r3, #9
 8001f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 fb6f 	bl	8006628 <HAL_RCC_OscConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001f50:	f000 f984 	bl	800225c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f54:	f004 fb18 	bl	8006588 <HAL_PWREx_EnableOverDrive>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f5e:	f000 f97d 	bl	800225c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f62:	230f      	movs	r3, #15
 8001f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f88:	2106      	movs	r1, #6
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fdf0 	bl	8006b70 <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001f96:	f000 f961 	bl	800225c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 ff7f 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001fb4:	f000 f952 	bl	800225c <Error_Handler>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	37d0      	adds	r7, #208	; 0xd0
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000

08001fc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <MX_CRC_Init+0x3c>)
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <MX_CRC_Init+0x40>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_CRC_Init+0x3c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <MX_CRC_Init+0x3c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_CRC_Init+0x3c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <MX_CRC_Init+0x3c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_CRC_Init+0x3c>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <MX_CRC_Init+0x3c>)
 8001ff2:	f002 fc03 	bl	80047fc <HAL_CRC_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001ffc:	f000 f92e 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000458 	.word	0x20000458
 8002008:	40023000 	.word	0x40023000

0800200c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_DMA2D_Init+0x5c>)
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <MX_DMA2D_Init+0x60>)
 8002014:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_DMA2D_Init+0x5c>)
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <MX_DMA2D_Init+0x5c>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <MX_DMA2D_Init+0x5c>)
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <MX_DMA2D_Init+0x5c>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <MX_DMA2D_Init+0x5c>)
 8002030:	2200      	movs	r2, #0
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_DMA2D_Init+0x5c>)
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <MX_DMA2D_Init+0x5c>)
 800203c:	2200      	movs	r2, #0
 800203e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <MX_DMA2D_Init+0x5c>)
 8002042:	f002 fe81 	bl	8004d48 <HAL_DMA2D_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800204c:	f000 f906 	bl	800225c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002050:	2101      	movs	r1, #1
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_DMA2D_Init+0x5c>)
 8002054:	f002 ffd6 	bl	8005004 <HAL_DMA2D_ConfigLayer>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800205e:	f000 f8fd 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200004f0 	.word	0x200004f0
 800206c:	4002b000 	.word	0x4002b000

08002070 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_RTC_Init+0x44>)
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <MX_RTC_Init+0x48>)
 8002078:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_RTC_Init+0x44>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_RTC_Init+0x44>)
 8002082:	227f      	movs	r2, #127	; 0x7f
 8002084:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_RTC_Init+0x44>)
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_RTC_Init+0x44>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_RTC_Init+0x44>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_RTC_Init+0x44>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <MX_RTC_Init+0x44>)
 80020a0:	f005 faf4 	bl	800768c <HAL_RTC_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80020aa:	f000 f8d7 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200004d0 	.word	0x200004d0
 80020b8:	40002800 	.word	0x40002800

080020bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <MX_TIM2_Init+0xa4>)
 80020dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <MX_TIM2_Init+0xa4>)
 80020e4:	2209      	movs	r2, #9
 80020e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <MX_TIM2_Init+0xa4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MX_TIM2_Init+0xa4>)
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_TIM2_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_TIM2_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002102:	4817      	ldr	r0, [pc, #92]	; (8002160 <MX_TIM2_Init+0xa4>)
 8002104:	f005 fba8 	bl	8007858 <HAL_TIM_IC_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800210e:	f000 f8a5 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	480f      	ldr	r0, [pc, #60]	; (8002160 <MX_TIM2_Init+0xa4>)
 8002122:	f006 f911 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800212c:	f000 f896 	bl	800225c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002134:	2301      	movs	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800213c:	230f      	movs	r3, #15
 800213e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <MX_TIM2_Init+0xa4>)
 8002148:	f005 fe47 	bl	8007dda <HAL_TIM_IC_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002152:	f000 f883 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000530 	.word	0x20000530

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <MX_GPIO_Init+0xa4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a22      	ldr	r2, [pc, #136]	; (8002208 <MX_GPIO_Init+0xa4>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <MX_GPIO_Init+0xa4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <MX_GPIO_Init+0xa4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <MX_GPIO_Init+0xa4>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_GPIO_Init+0xa4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_GPIO_Init+0xa4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <MX_GPIO_Init+0xa4>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_GPIO_Init+0xa4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_GPIO_Init+0xa4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a10      	ldr	r2, [pc, #64]	; (8002208 <MX_GPIO_Init+0xa4>)
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_GPIO_Init+0xa4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	2102      	movs	r1, #2
 80021de:	480b      	ldr	r0, [pc, #44]	; (800220c <MX_GPIO_Init+0xa8>)
 80021e0:	f003 fc6a 	bl	8005ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021e4:	2302      	movs	r3, #2
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <MX_GPIO_Init+0xa8>)
 80021fc:	f003 fab2 	bl	8005764 <HAL_GPIO_Init>

}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_PWR_PVDCallback>:




void HAL_PWR_PVDCallback(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0



	//Emergency value store before power failure

         EE_WriteVariable(0,counter1value_int);
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_PWR_PVDCallback+0x48>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4619      	mov	r1, r3
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff f919 	bl	8001454 <EE_WriteVariable>
         EE_WriteVariable(1,counter1value_int>>8);
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_PWR_PVDCallback+0x48>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff f911 	bl	8001454 <EE_WriteVariable>
         EE_WriteVariable(2,counter1value_int>>16);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_PWR_PVDCallback+0x48>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	b29b      	uxth	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	2002      	movs	r0, #2
 800223e:	f7ff f909 	bl	8001454 <EE_WriteVariable>
         EE_WriteVariable(3,counter1value_int>>24);
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_PWR_PVDCallback+0x48>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0e1b      	lsrs	r3, r3, #24
 8002248:	b29b      	uxth	r3, r3
 800224a:	4619      	mov	r1, r3
 800224c:	2003      	movs	r0, #3
 800224e:	f7ff f901 	bl	8001454 <EE_WriteVariable>




}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000238 	.word	0x20000238

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002262:	e7fe      	b.n	8002262 <Error_Handler+0x6>

08002264 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <I2Cx_MspInit+0x150>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d14d      	bne.n	8002310 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a4f      	ldr	r2, [pc, #316]	; (80023b8 <I2Cx_MspInit+0x154>)
 800227a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002290:	2312      	movs	r3, #18
 8002292:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800229c:	2304      	movs	r3, #4
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	4845      	ldr	r0, [pc, #276]	; (80023bc <I2Cx_MspInit+0x158>)
 80022a8:	f003 fa5c 	bl	8005764 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80022ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	4840      	ldr	r0, [pc, #256]	; (80023bc <I2Cx_MspInit+0x158>)
 80022ba:	f003 fa53 	bl	8005764 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80022be:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <I2Cx_MspInit+0x154>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <I2Cx_MspInit+0x154>)
 80022c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <I2Cx_MspInit+0x154>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80022d6:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <I2Cx_MspInit+0x154>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <I2Cx_MspInit+0x154>)
 80022dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80022e2:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <I2Cx_MspInit+0x154>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <I2Cx_MspInit+0x154>)
 80022e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022ec:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	210f      	movs	r1, #15
 80022f2:	2048      	movs	r0, #72	; 0x48
 80022f4:	f002 fa4b 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80022f8:	2048      	movs	r0, #72	; 0x48
 80022fa:	f002 fa64 	bl	80047c6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	210f      	movs	r1, #15
 8002302:	2049      	movs	r0, #73	; 0x49
 8002304:	f002 fa43 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002308:	2049      	movs	r0, #73	; 0x49
 800230a:	f002 fa5c 	bl	80047c6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800230e:	e04d      	b.n	80023ac <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002310:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4a28      	ldr	r2, [pc, #160]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	6313      	str	r3, [r2, #48]	; 0x30
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <I2Cx_MspInit+0x154>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800232e:	2312      	movs	r3, #18
 8002330:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002336:	2302      	movs	r3, #2
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800233a:	2304      	movs	r3, #4
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	481e      	ldr	r0, [pc, #120]	; (80023c0 <I2Cx_MspInit+0x15c>)
 8002346:	f003 fa0d 	bl	8005764 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800234a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800234e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	4619      	mov	r1, r3
 8002356:	481a      	ldr	r0, [pc, #104]	; (80023c0 <I2Cx_MspInit+0x15c>)
 8002358:	f003 fa04 	bl	8005764 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <I2Cx_MspInit+0x154>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002366:	6413      	str	r3, [r2, #64]	; 0x40
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <I2Cx_MspInit+0x154>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <I2Cx_MspInit+0x154>)
 800237a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <I2Cx_MspInit+0x154>)
 8002386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800238a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	210f      	movs	r1, #15
 8002390:	201f      	movs	r0, #31
 8002392:	f002 f9fc 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002396:	201f      	movs	r0, #31
 8002398:	f002 fa15 	bl	80047c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	210f      	movs	r1, #15
 80023a0:	2020      	movs	r0, #32
 80023a2:	f002 f9f4 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80023a6:	2020      	movs	r0, #32
 80023a8:	f002 fa0d 	bl	80047c6 <HAL_NVIC_EnableIRQ>
}
 80023ac:	bf00      	nop
 80023ae:	3730      	adds	r7, #48	; 0x30
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000023c 	.word	0x2000023c
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40020400 	.word	0x40020400

080023c4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f003 fe8f 	bl	80060f0 <HAL_I2C_GetState>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d125      	bne.n	8002424 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <I2Cx_Init+0x68>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <I2Cx_Init+0x6c>)
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e002      	b.n	80023ee <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <I2Cx_Init+0x70>)
 80023ec:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <I2Cx_Init+0x74>)
 80023f2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff23 	bl	8002264 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f003 fb64 	bl	8005aec <HAL_I2C_Init>
  }
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000023c 	.word	0x2000023c
 8002430:	40005c00 	.word	0x40005c00
 8002434:	40005400 	.word	0x40005400
 8002438:	40912732 	.word	0x40912732

0800243c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af04      	add	r7, sp, #16
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	72fb      	strb	r3, [r7, #11]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	b299      	uxth	r1, r3
 800245e:	88f8      	ldrh	r0, [r7, #6]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	9302      	str	r3, [sp, #8]
 8002468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	4603      	mov	r3, r0
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f003 fd22 	bl	8005ebc <HAL_I2C_Mem_Read>
 8002478:	4603      	mov	r3, r0
 800247a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002482:	7afb      	ldrb	r3, [r7, #11]
 8002484:	4619      	mov	r1, r3
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f832 	bl	80024f0 <I2Cx_Error>
  }
  return status;    
 800248c:	7dfb      	ldrb	r3, [r7, #23]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b08a      	sub	sp, #40	; 0x28
 800249a:	af04      	add	r7, sp, #16
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	4608      	mov	r0, r1
 80024a0:	4611      	mov	r1, r2
 80024a2:	461a      	mov	r2, r3
 80024a4:	4603      	mov	r3, r0
 80024a6:	72fb      	strb	r3, [r7, #11]
 80024a8:	460b      	mov	r3, r1
 80024aa:	813b      	strh	r3, [r7, #8]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	b299      	uxth	r1, r3
 80024b8:	88f8      	ldrh	r0, [r7, #6]
 80024ba:	893a      	ldrh	r2, [r7, #8]
 80024bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c0:	9302      	str	r3, [sp, #8]
 80024c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4603      	mov	r3, r0
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f003 fbe1 	bl	8005c94 <HAL_I2C_Mem_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	4619      	mov	r1, r3
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f805 	bl	80024f0 <I2Cx_Error>
  }
  return status;
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f003 fb85 	bl	8005c0c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff5e 	bl	80023c4 <I2Cx_Init>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <TS_IO_Init+0x10>)
 8002516:	f7ff ff55 	bl	80023c4 <I2Cx_Init>
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000023c 	.word	0x2000023c

08002524 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af02      	add	r7, sp, #8
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	460b      	mov	r3, r1
 8002530:	71bb      	strb	r3, [r7, #6]
 8002532:	4613      	mov	r3, r2
 8002534:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	b29a      	uxth	r2, r3
 800253a:	79f9      	ldrb	r1, [r7, #7]
 800253c:	2301      	movs	r3, #1
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	1d7b      	adds	r3, r7, #5
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	4803      	ldr	r0, [pc, #12]	; (8002554 <TS_IO_Write+0x30>)
 8002548:	f7ff ffa5 	bl	8002496 <I2Cx_WriteMultiple>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000023c 	.word	0x2000023c

08002558 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	4603      	mov	r3, r0
 8002560:	460a      	mov	r2, r1
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	4613      	mov	r3, r2
 8002566:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800256c:	79bb      	ldrb	r3, [r7, #6]
 800256e:	b29a      	uxth	r2, r3
 8002570:	79f9      	ldrb	r1, [r7, #7]
 8002572:	2301      	movs	r3, #1
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f107 030f 	add.w	r3, r7, #15
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2301      	movs	r3, #1
 800257e:	4804      	ldr	r0, [pc, #16]	; (8002590 <TS_IO_Read+0x38>)
 8002580:	f7ff ff5c 	bl	800243c <I2Cx_ReadMultiple>

  return read_value;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000023c 	.word	0x2000023c

08002594 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f001 fff9 	bl	8004594 <HAL_Delay>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025b2:	2228      	movs	r2, #40	; 0x28
 80025b4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025b8:	2209      	movs	r2, #9
 80025ba:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025be:	2235      	movs	r2, #53	; 0x35
 80025c0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025c4:	220b      	movs	r2, #11
 80025c6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025ca:	f240 121b 	movw	r2, #283	; 0x11b
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025d2:	f240 2215 	movw	r2, #533	; 0x215
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025da:	f240 121d 	movw	r2, #285	; 0x11d
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025e2:	f240 2235 	movw	r2, #565	; 0x235
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80025e8:	2100      	movs	r1, #0
 80025ea:	4823      	ldr	r0, [pc, #140]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025ec:	f000 fb70 	bl	8002cd0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80025f0:	4b21      	ldr	r3, [pc, #132]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025f6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <BSP_LCD_Init+0xcc>)
 80025fa:	f44f 7288 	mov.w	r2, #272	; 0x110
 80025fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <BSP_LCD_Init+0xcc>)
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <BSP_LCD_Init+0xcc>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <BSP_LCD_Init+0xcc>)
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <BSP_LCD_Init+0xcc>)
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <BSP_LCD_Init+0xcc>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <BSP_LCD_Init+0xcc>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <BSP_LCD_Init+0xcc>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <BSP_LCD_Init+0xcc>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <BSP_LCD_Init+0xd0>)
 8002634:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002636:	4810      	ldr	r0, [pc, #64]	; (8002678 <BSP_LCD_Init+0xcc>)
 8002638:	f001 fa6e 	bl	8003b18 <HAL_LTDC_GetState>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002642:	2100      	movs	r1, #0
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <BSP_LCD_Init+0xcc>)
 8002646:	f000 fa69 	bl	8002b1c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800264a:	480b      	ldr	r0, [pc, #44]	; (8002678 <BSP_LCD_Init+0xcc>)
 800264c:	f001 f876 	bl	800373c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002656:	480a      	ldr	r0, [pc, #40]	; (8002680 <BSP_LCD_Init+0xd4>)
 8002658:	f003 fa2e 	bl	8005ab8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800265c:	2201      	movs	r2, #1
 800265e:	2108      	movs	r1, #8
 8002660:	4808      	ldr	r0, [pc, #32]	; (8002684 <BSP_LCD_Init+0xd8>)
 8002662:	f003 fa29 	bl	8005ab8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002666:	f000 fc53 	bl	8002f10 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800266a:	4807      	ldr	r0, [pc, #28]	; (8002688 <BSP_LCD_Init+0xdc>)
 800266c:	f000 f8a6 	bl	80027bc <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000580 	.word	0x20000580
 800267c:	40016800 	.word	0x40016800
 8002680:	40022000 	.word	0x40022000
 8002684:	40022800 	.word	0x40022800
 8002688:	20000000 	.word	0x20000000

0800268c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <BSP_LCD_GetXSize+0x20>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <BSP_LCD_GetXSize+0x24>)
 8002696:	2134      	movs	r1, #52	; 0x34
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3360      	adds	r3, #96	; 0x60
 80026a0:	681b      	ldr	r3, [r3, #0]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	200002c8 	.word	0x200002c8
 80026b0:	20000580 	.word	0x20000580

080026b4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <BSP_LCD_GetYSize+0x20>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <BSP_LCD_GetYSize+0x24>)
 80026be:	2134      	movs	r1, #52	; 0x34
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3364      	adds	r3, #100	; 0x64
 80026c8:	681b      	ldr	r3, [r3, #0]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	200002c8 	.word	0x200002c8
 80026d8:	20000580 	.word	0x20000580

080026dc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80026dc:	b580      	push	{r7, lr}
 80026de:	b090      	sub	sp, #64	; 0x40
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80026ec:	f7ff ffce 	bl	800268c <BSP_LCD_GetXSize>
 80026f0:	4603      	mov	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026f8:	f7ff ffdc 	bl	80026b4 <BSP_LCD_GetYSize>
 80026fc:	4603      	mov	r3, r0
 80026fe:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002708:	23ff      	movs	r3, #255	; 0xff
 800270a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002728:	2307      	movs	r3, #7
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800272c:	f7ff ffae 	bl	800268c <BSP_LCD_GetXSize>
 8002730:	4603      	mov	r3, r0
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002734:	f7ff ffbe 	bl	80026b4 <BSP_LCD_GetYSize>
 8002738:	4603      	mov	r3, r0
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	f107 030c 	add.w	r3, r7, #12
 8002742:	4619      	mov	r1, r3
 8002744:	4812      	ldr	r0, [pc, #72]	; (8002790 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002746:	f001 f9a9 	bl	8003a9c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	4911      	ldr	r1, [pc, #68]	; (8002794 <BSP_LCD_LayerDefaultInit+0xb8>)
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3304      	adds	r3, #4
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	490c      	ldr	r1, [pc, #48]	; (8002794 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3308      	adds	r3, #8
 8002770:	4a09      	ldr	r2, [pc, #36]	; (8002798 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002772:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	4907      	ldr	r1, [pc, #28]	; (8002794 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	3740      	adds	r7, #64	; 0x40
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000580 	.word	0x20000580
 8002794:	200002cc 	.word	0x200002cc
 8002798:	20000000 	.word	0x20000000

0800279c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <BSP_LCD_SelectLayer+0x1c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
} 
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	200002c8 	.word	0x200002c8

080027bc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <BSP_LCD_SetFont+0x2c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4908      	ldr	r1, [pc, #32]	; (80027ec <BSP_LCD_SetFont+0x30>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3308      	adds	r3, #8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200002c8 	.word	0x200002c8
 80027ec:	200002cc 	.word	0x200002cc

080027f0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <BSP_LCD_Clear+0x48>)
 80027fa:	681c      	ldr	r4, [r3, #0]
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <BSP_LCD_Clear+0x48>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <BSP_LCD_Clear+0x4c>)
 8002802:	2134      	movs	r1, #52	; 0x34
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	335c      	adds	r3, #92	; 0x5c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461d      	mov	r5, r3
 8002810:	f7ff ff3c 	bl	800268c <BSP_LCD_GetXSize>
 8002814:	4606      	mov	r6, r0
 8002816:	f7ff ff4d 	bl	80026b4 <BSP_LCD_GetYSize>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2300      	movs	r3, #0
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	4632      	mov	r2, r6
 8002828:	4629      	mov	r1, r5
 800282a:	4620      	mov	r0, r4
 800282c:	f000 fb24 	bl	8002e78 <LL_FillBuffer>
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002838:	200002c8 	.word	0x200002c8
 800283c:	20000580 	.word	0x20000580

08002840 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
 800284a:	460b      	mov	r3, r1
 800284c:	80bb      	strh	r3, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <BSP_LCD_DisplayChar+0x80>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <BSP_LCD_DisplayChar+0x84>)
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3308      	adds	r3, #8
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6819      	ldr	r1, [r3, #0]
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <BSP_LCD_DisplayChar+0x80>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4c14      	ldr	r4, [pc, #80]	; (80028c4 <BSP_LCD_DisplayChar+0x84>)
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4423      	add	r3, r4
 800287e:	3308      	adds	r3, #8
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002884:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <BSP_LCD_DisplayChar+0x80>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4c0d      	ldr	r4, [pc, #52]	; (80028c4 <BSP_LCD_DisplayChar+0x84>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4423      	add	r3, r4
 8002898:	3308      	adds	r3, #8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	3307      	adds	r3, #7
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da00      	bge.n	80028a6 <BSP_LCD_DisplayChar+0x66>
 80028a4:	3307      	adds	r3, #7
 80028a6:	10db      	asrs	r3, r3, #3
 80028a8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028ac:	18ca      	adds	r2, r1, r3
 80028ae:	88b9      	ldrh	r1, [r7, #4]
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa28 	bl	8002d08 <DrawChar>
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	200002c8 	.word	0x200002c8
 80028c4:	200002cc 	.word	0x200002cc

080028c8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60ba      	str	r2, [r7, #8]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	81fb      	strh	r3, [r7, #14]
 80028d6:	460b      	mov	r3, r1
 80028d8:	81bb      	strh	r3, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80028de:	2301      	movs	r3, #1
 80028e0:	83fb      	strh	r3, [r7, #30]
 80028e2:	2300      	movs	r3, #0
 80028e4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80028f2:	e002      	b.n	80028fa <BSP_LCD_DisplayStringAt+0x32>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	617a      	str	r2, [r7, #20]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f6      	bne.n	80028f4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002906:	f7ff fec1 	bl	800268c <BSP_LCD_GetXSize>
 800290a:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <BSP_LCD_DisplayStringAt+0x180>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	494f      	ldr	r1, [pc, #316]	; (8002a4c <BSP_LCD_DisplayStringAt+0x184>)
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	3308      	adds	r3, #8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	889b      	ldrh	r3, [r3, #4]
 8002920:	fbb0 f3f3 	udiv	r3, r0, r3
 8002924:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d01c      	beq.n	8002966 <BSP_LCD_DisplayStringAt+0x9e>
 800292c:	2b03      	cmp	r3, #3
 800292e:	d017      	beq.n	8002960 <BSP_LCD_DisplayStringAt+0x98>
 8002930:	2b01      	cmp	r3, #1
 8002932:	d12e      	bne.n	8002992 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad1      	subs	r1, r2, r3
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <BSP_LCD_DisplayStringAt+0x180>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4843      	ldr	r0, [pc, #268]	; (8002a4c <BSP_LCD_DisplayStringAt+0x184>)
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	3308      	adds	r3, #8
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	889b      	ldrh	r3, [r3, #4]
 8002950:	fb03 f301 	mul.w	r3, r3, r1
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	4413      	add	r3, r2
 800295c:	83fb      	strh	r3, [r7, #30]
      break;
 800295e:	e01b      	b.n	8002998 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	83fb      	strh	r3, [r7, #30]
      break;
 8002964:	e018      	b.n	8002998 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	b299      	uxth	r1, r3
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <BSP_LCD_DisplayStringAt+0x180>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4836      	ldr	r0, [pc, #216]	; (8002a4c <BSP_LCD_DisplayStringAt+0x184>)
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4403      	add	r3, r0
 800297e:	3308      	adds	r3, #8
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	889b      	ldrh	r3, [r3, #4]
 8002984:	fb11 f303 	smulbb	r3, r1, r3
 8002988:	b29a      	uxth	r2, r3
 800298a:	89fb      	ldrh	r3, [r7, #14]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	83fb      	strh	r3, [r7, #30]
      break;
 8002990:	e002      	b.n	8002998 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	83fb      	strh	r3, [r7, #30]
      break;
 8002996:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002998:	8bfb      	ldrh	r3, [r7, #30]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <BSP_LCD_DisplayStringAt+0xde>
 800299e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	da1d      	bge.n	80029e2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029aa:	e01a      	b.n	80029e2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	89b9      	ldrh	r1, [r7, #12]
 80029b2:	8bfb      	ldrh	r3, [r7, #30]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff43 	bl	8002840 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <BSP_LCD_DisplayStringAt+0x180>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4923      	ldr	r1, [pc, #140]	; (8002a4c <BSP_LCD_DisplayStringAt+0x184>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3308      	adds	r3, #8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	889a      	ldrh	r2, [r3, #4]
 80029d0:	8bfb      	ldrh	r3, [r7, #30]
 80029d2:	4413      	add	r3, r2
 80029d4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
    i++;
 80029dc:	8bbb      	ldrh	r3, [r7, #28]
 80029de:	3301      	adds	r3, #1
 80029e0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf14      	ite	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	2300      	moveq	r3, #0
 80029ee:	b2dc      	uxtb	r4, r3
 80029f0:	f7ff fe4c 	bl	800268c <BSP_LCD_GetXSize>
 80029f4:	4605      	mov	r5, r0
 80029f6:	8bb9      	ldrh	r1, [r7, #28]
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <BSP_LCD_DisplayStringAt+0x180>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4813      	ldr	r0, [pc, #76]	; (8002a4c <BSP_LCD_DisplayStringAt+0x184>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4403      	add	r3, r0
 8002a08:	3308      	adds	r3, #8
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	889b      	ldrh	r3, [r3, #4]
 8002a0e:	fb03 f301 	mul.w	r3, r3, r1
 8002a12:	1aeb      	subs	r3, r5, r3
 8002a14:	b299      	uxth	r1, r3
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <BSP_LCD_DisplayStringAt+0x180>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	480c      	ldr	r0, [pc, #48]	; (8002a4c <BSP_LCD_DisplayStringAt+0x184>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4403      	add	r3, r0
 8002a26:	3308      	adds	r3, #8
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	889b      	ldrh	r3, [r3, #4]
 8002a2c:	4299      	cmp	r1, r3
 8002a2e:	bf2c      	ite	cs
 8002a30:	2301      	movcs	r3, #1
 8002a32:	2300      	movcc	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	4023      	ands	r3, r4
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1b6      	bne.n	80029ac <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002a3e:	bf00      	nop
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bdb0      	pop	{r4, r5, r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200002c8 	.word	0x200002c8
 8002a4c:	200002cc 	.word	0x200002cc

08002a50 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	603a      	str	r2, [r7, #0]
 8002a5a:	80fb      	strh	r3, [r7, #6]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <BSP_LCD_DrawPixel+0x88>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <BSP_LCD_DrawPixel+0x8c>)
 8002a66:	2134      	movs	r1, #52	; 0x34
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3348      	adds	r3, #72	; 0x48
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d116      	bne.n	8002aa4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <BSP_LCD_DrawPixel+0x88>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <BSP_LCD_DrawPixel+0x8c>)
 8002a7c:	2134      	movs	r1, #52	; 0x34
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	681c      	ldr	r4, [r3, #0]
 8002a88:	88bd      	ldrh	r5, [r7, #4]
 8002a8a:	f7ff fdff 	bl	800268c <BSP_LCD_GetXSize>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	fb03 f205 	mul.w	r2, r3, r5
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	4413      	add	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4423      	add	r3, r4
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002aa2:	e015      	b.n	8002ad0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <BSP_LCD_DrawPixel+0x88>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <BSP_LCD_DrawPixel+0x8c>)
 8002aaa:	2134      	movs	r1, #52	; 0x34
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	335c      	adds	r3, #92	; 0x5c
 8002ab4:	681c      	ldr	r4, [r3, #0]
 8002ab6:	88bd      	ldrh	r5, [r7, #4]
 8002ab8:	f7ff fde8 	bl	800268c <BSP_LCD_GetXSize>
 8002abc:	4603      	mov	r3, r0
 8002abe:	fb03 f205 	mul.w	r2, r3, r5
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4423      	add	r3, r4
 8002aca:	461a      	mov	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad8:	200002c8 	.word	0x200002c8
 8002adc:	20000580 	.word	0x20000580

08002ae0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <BSP_LCD_DisplayOn+0x30>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <BSP_LCD_DisplayOn+0x30>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002afa:	4806      	ldr	r0, [pc, #24]	; (8002b14 <BSP_LCD_DisplayOn+0x34>)
 8002afc:	f002 ffdc 	bl	8005ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002b00:	2201      	movs	r2, #1
 8002b02:	2108      	movs	r1, #8
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <BSP_LCD_DisplayOn+0x38>)
 8002b06:	f002 ffd7 	bl	8005ab8 <HAL_GPIO_WritePin>
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000580 	.word	0x20000580
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40022800 	.word	0x40022800

08002b1c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b090      	sub	sp, #64	; 0x40
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002b26:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a63      	ldr	r2, [pc, #396]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b3e:	4b5e      	ldr	r3, [pc, #376]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b5b      	ldr	r3, [pc, #364]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b56:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b5c:	f043 0310 	orr.w	r3, r3, #16
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b6e:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b86:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a4b      	ldr	r2, [pc, #300]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b9e:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a45      	ldr	r2, [pc, #276]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a3f      	ldr	r2, [pc, #252]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <BSP_LCD_MspInit+0x19c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002c0e:	230e      	movs	r3, #14
 8002c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c16:	4619      	mov	r1, r3
 8002c18:	4828      	ldr	r0, [pc, #160]	; (8002cbc <BSP_LCD_MspInit+0x1a0>)
 8002c1a:	f002 fda3 	bl	8005764 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002c28:	2309      	movs	r3, #9
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c30:	4619      	mov	r1, r3
 8002c32:	4823      	ldr	r0, [pc, #140]	; (8002cc0 <BSP_LCD_MspInit+0x1a4>)
 8002c34:	f002 fd96 	bl	8005764 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002c38:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c42:	230e      	movs	r3, #14
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	481d      	ldr	r0, [pc, #116]	; (8002cc4 <BSP_LCD_MspInit+0x1a8>)
 8002c4e:	f002 fd89 	bl	8005764 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002c52:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c5c:	230e      	movs	r3, #14
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	4818      	ldr	r0, [pc, #96]	; (8002cc8 <BSP_LCD_MspInit+0x1ac>)
 8002c68:	f002 fd7c 	bl	8005764 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002c6c:	23f7      	movs	r3, #247	; 0xf7
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c74:	230e      	movs	r3, #14
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4813      	ldr	r0, [pc, #76]	; (8002ccc <BSP_LCD_MspInit+0x1b0>)
 8002c80:	f002 fd70 	bl	8005764 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c92:	4619      	mov	r1, r3
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <BSP_LCD_MspInit+0x1a8>)
 8002c96:	f002 fd65 	bl	8005764 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <BSP_LCD_MspInit+0x1b0>)
 8002caa:	f002 fd5b 	bl	8005764 <HAL_GPIO_Init>
}
 8002cae:	bf00      	nop
 8002cb0:	3740      	adds	r7, #64	; 0x40
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40021800 	.word	0x40021800
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40022400 	.word	0x40022400
 8002ccc:	40022800 	.word	0x40022800

08002cd0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <BSP_LCD_ClockConfig+0x34>)
 8002cdc:	2208      	movs	r2, #8
 8002cde:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <BSP_LCD_ClockConfig+0x34>)
 8002ce2:	22c0      	movs	r2, #192	; 0xc0
 8002ce4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <BSP_LCD_ClockConfig+0x34>)
 8002ce8:	2205      	movs	r2, #5
 8002cea:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <BSP_LCD_ClockConfig+0x34>)
 8002cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002cf4:	4803      	ldr	r0, [pc, #12]	; (8002d04 <BSP_LCD_ClockConfig+0x34>)
 8002cf6:	f004 f8d9 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200002e4 	.word	0x200002e4

08002d08 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	603a      	str	r2, [r7, #0]
 8002d12:	80fb      	strh	r3, [r7, #6]
 8002d14:	460b      	mov	r3, r1
 8002d16:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002d20:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <DrawChar+0x168>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4953      	ldr	r1, [pc, #332]	; (8002e74 <DrawChar+0x16c>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3308      	adds	r3, #8
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	88db      	ldrh	r3, [r3, #6]
 8002d36:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <DrawChar+0x168>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	494d      	ldr	r1, [pc, #308]	; (8002e74 <DrawChar+0x16c>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3308      	adds	r3, #8
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002d50:	8a3b      	ldrh	r3, [r7, #16]
 8002d52:	3307      	adds	r3, #7
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da00      	bge.n	8002d5a <DrawChar+0x52>
 8002d58:	3307      	adds	r3, #7
 8002d5a:	10db      	asrs	r3, r3, #3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	8a3b      	ldrh	r3, [r7, #16]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e076      	b.n	8002e5e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002d70:	8a3b      	ldrh	r3, [r7, #16]
 8002d72:	3307      	adds	r3, #7
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da00      	bge.n	8002d7a <DrawChar+0x72>
 8002d78:	3307      	adds	r3, #7
 8002d7a:	10db      	asrs	r3, r3, #3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fb03 f302 	mul.w	r3, r3, r2
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002d8a:	8a3b      	ldrh	r3, [r7, #16]
 8002d8c:	3307      	adds	r3, #7
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	da00      	bge.n	8002d94 <DrawChar+0x8c>
 8002d92:	3307      	adds	r3, #7
 8002d94:	10db      	asrs	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d002      	beq.n	8002da0 <DrawChar+0x98>
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d004      	beq.n	8002da8 <DrawChar+0xa0>
 8002d9e:	e00c      	b.n	8002dba <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
      break;
 8002da6:	e016      	b.n	8002dd6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	3201      	adds	r2, #1
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
      break;
 8002db8:	e00d      	b.n	8002dd6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	041a      	lsls	r2, r3, #16
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	3202      	adds	r2, #2
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
      break;
 8002dd4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e036      	b.n	8002e4a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002ddc:	8a3a      	ldrh	r2, [r7, #16]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad2      	subs	r2, r2, r3
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	4413      	add	r3, r2
 8002de6:	3b01      	subs	r3, #1
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	4413      	add	r3, r2
 8002e00:	b298      	uxth	r0, r3
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <DrawChar+0x168>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <DrawChar+0x16c>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	88bb      	ldrh	r3, [r7, #4]
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7ff fe1a 	bl	8002a50 <BSP_LCD_DrawPixel>
 8002e1c:	e012      	b.n	8002e44 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	4413      	add	r3, r2
 8002e26:	b298      	uxth	r0, r3
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <DrawChar+0x168>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4911      	ldr	r1, [pc, #68]	; (8002e74 <DrawChar+0x16c>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3304      	adds	r3, #4
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7ff fe06 	bl	8002a50 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	8a3b      	ldrh	r3, [r7, #16]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d3c4      	bcc.n	8002ddc <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	3301      	adds	r3, #1
 8002e56:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	8a7b      	ldrh	r3, [r7, #18]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d384      	bcc.n	8002d70 <DrawChar+0x68>
  }
}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200002c8 	.word	0x200002c8
 8002e74:	200002cc 	.word	0x200002cc

08002e78 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <LL_FillBuffer+0x88>)
 8002e88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e8c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <LL_FillBuffer+0x8c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <LL_FillBuffer+0x90>)
 8002e94:	2134      	movs	r1, #52	; 0x34
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3348      	adds	r3, #72	; 0x48
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d103      	bne.n	8002eac <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <LL_FillBuffer+0x88>)
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	e002      	b.n	8002eb2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <LL_FillBuffer+0x88>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <LL_FillBuffer+0x88>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <LL_FillBuffer+0x88>)
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <LL_FillBuffer+0x94>)
 8002ebc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002ebe:	4810      	ldr	r0, [pc, #64]	; (8002f00 <LL_FillBuffer+0x88>)
 8002ec0:	f001 ff42 	bl	8004d48 <HAL_DMA2D_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d115      	bne.n	8002ef6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <LL_FillBuffer+0x88>)
 8002ece:	f002 f899 	bl	8005004 <HAL_DMA2D_ConfigLayer>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10e      	bne.n	8002ef6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69f9      	ldr	r1, [r7, #28]
 8002ee2:	4807      	ldr	r0, [pc, #28]	; (8002f00 <LL_FillBuffer+0x88>)
 8002ee4:	f001 ff7a 	bl	8004ddc <HAL_DMA2D_Start>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002eee:	210a      	movs	r1, #10
 8002ef0:	4803      	ldr	r0, [pc, #12]	; (8002f00 <LL_FillBuffer+0x88>)
 8002ef2:	f001 ff9e 	bl	8004e32 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000288 	.word	0x20000288
 8002f04:	200002c8 	.word	0x200002c8
 8002f08:	20000580 	.word	0x20000580
 8002f0c:	4002b000 	.word	0x4002b000

08002f10 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f16:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <BSP_SDRAM_Init+0xb0>)
 8002f18:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f22:	2207      	movs	r2, #7
 8002f24:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002f26:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f28:	2204      	movs	r2, #4
 8002f2a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f2e:	2207      	movs	r2, #7
 8002f30:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f34:	2202      	movs	r2, #2
 8002f36:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f40:	2202      	movs	r2, #2
 8002f42:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f52:	2204      	movs	r2, #4
 8002f54:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002f56:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f58:	2210      	movs	r2, #16
 8002f5a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f68:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f76:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002f86:	2100      	movs	r1, #0
 8002f88:	480c      	ldr	r0, [pc, #48]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f8a:	f000 f87f 	bl	800308c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002f8e:	490d      	ldr	r1, [pc, #52]	; (8002fc4 <BSP_SDRAM_Init+0xb4>)
 8002f90:	480a      	ldr	r0, [pc, #40]	; (8002fbc <BSP_SDRAM_Init+0xac>)
 8002f92:	f001 f83d 	bl	8004010 <HAL_SDRAM_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <BSP_SDRAM_Init+0xb8>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e002      	b.n	8002faa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <BSP_SDRAM_Init+0xb8>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002faa:	f240 6003 	movw	r0, #1539	; 0x603
 8002fae:	f000 f80d 	bl	8002fcc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <BSP_SDRAM_Init+0xb8>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000628 	.word	0x20000628
 8002fc0:	a0000140 	.word	0xa0000140
 8002fc4:	20000368 	.word	0x20000368
 8002fc8:	20000030 	.word	0x20000030

08002fcc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ff4:	4923      	ldr	r1, [pc, #140]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ff6:	4824      	ldr	r0, [pc, #144]	; (8003088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ff8:	f001 f848 	bl	800408c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f001 fac9 	bl	8004594 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003004:	2202      	movs	r2, #2
 8003006:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800300a:	2210      	movs	r2, #16
 800300c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003010:	2201      	movs	r2, #1
 8003012:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800301a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301e:	4919      	ldr	r1, [pc, #100]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003020:	4819      	ldr	r0, [pc, #100]	; (8003088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003022:	f001 f833 	bl	800408c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003028:	2203      	movs	r2, #3
 800302a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800302e:	2210      	movs	r2, #16
 8003030:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003034:	2208      	movs	r2, #8
 8003036:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800303e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003042:	4910      	ldr	r1, [pc, #64]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003044:	4810      	ldr	r0, [pc, #64]	; (8003088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003046:	f001 f821 	bl	800408c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800304a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800304e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003052:	2204      	movs	r2, #4
 8003054:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003058:	2210      	movs	r2, #16
 800305a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800305e:	2201      	movs	r2, #1
 8003060:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003066:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800306c:	4905      	ldr	r1, [pc, #20]	; (8003084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800306e:	4806      	ldr	r0, [pc, #24]	; (8003088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003070:	f001 f80c 	bl	800408c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4804      	ldr	r0, [pc, #16]	; (8003088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003078:	f001 f833 	bl	80040e2 <HAL_SDRAM_ProgramRefreshRate>
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000384 	.word	0x20000384
 8003088:	20000628 	.word	0x20000628

0800308c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800308c:	b580      	push	{r7, lr}
 800308e:	b090      	sub	sp, #64	; 0x40
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4a6f      	ldr	r2, [pc, #444]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6393      	str	r3, [r2, #56]	; 0x38
 80030a2:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80030ae:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a69      	ldr	r2, [pc, #420]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	4b64      	ldr	r3, [pc, #400]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a63      	ldr	r2, [pc, #396]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b61      	ldr	r3, [pc, #388]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030de:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a57      	ldr	r2, [pc, #348]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 80030fc:	f043 0310 	orr.w	r3, r3, #16
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b55      	ldr	r3, [pc, #340]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800310e:	4b52      	ldr	r3, [pc, #328]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a51      	ldr	r2, [pc, #324]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003114:	f043 0320 	orr.w	r3, r3, #32
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003126:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 800312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a45      	ldr	r2, [pc, #276]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 8003144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b43      	ldr	r3, [pc, #268]	; (8003258 <BSP_SDRAM_MspInit+0x1cc>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800315a:	2301      	movs	r3, #1
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800315e:	2302      	movs	r3, #2
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003162:	230c      	movs	r3, #12
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003166:	2308      	movs	r3, #8
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800316a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800316e:	4619      	mov	r1, r3
 8003170:	483a      	ldr	r0, [pc, #232]	; (800325c <BSP_SDRAM_MspInit+0x1d0>)
 8003172:	f002 faf7 	bl	8005764 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003176:	f24c 7303 	movw	r3, #50947	; 0xc703
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800317c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003180:	4619      	mov	r1, r3
 8003182:	4837      	ldr	r0, [pc, #220]	; (8003260 <BSP_SDRAM_MspInit+0x1d4>)
 8003184:	f002 faee 	bl	8005764 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003188:	f64f 7383 	movw	r3, #65411	; 0xff83
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800318e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003192:	4619      	mov	r1, r3
 8003194:	4833      	ldr	r0, [pc, #204]	; (8003264 <BSP_SDRAM_MspInit+0x1d8>)
 8003196:	f002 fae5 	bl	8005764 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800319a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80031a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a4:	4619      	mov	r1, r3
 80031a6:	4830      	ldr	r0, [pc, #192]	; (8003268 <BSP_SDRAM_MspInit+0x1dc>)
 80031a8:	f002 fadc 	bl	8005764 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80031ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80031b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b6:	4619      	mov	r1, r3
 80031b8:	482c      	ldr	r0, [pc, #176]	; (800326c <BSP_SDRAM_MspInit+0x1e0>)
 80031ba:	f002 fad3 	bl	8005764 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80031be:	2328      	movs	r3, #40	; 0x28
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80031c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c6:	4619      	mov	r1, r3
 80031c8:	4829      	ldr	r0, [pc, #164]	; (8003270 <BSP_SDRAM_MspInit+0x1e4>)
 80031ca:	f002 facb 	bl	8005764 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 80031e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 80031ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031f0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 80031f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031f8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 8003202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003206:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 800320a:	2200      	movs	r2, #0
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 8003210:	2203      	movs	r2, #3
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 8003216:	2200      	movs	r2, #0
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <BSP_SDRAM_MspInit+0x1ec>)
 8003224:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
 800322c:	4a11      	ldr	r2, [pc, #68]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003232:	4810      	ldr	r0, [pc, #64]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 8003234:	f001 fc7a 	bl	8004b2c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003238:	480e      	ldr	r0, [pc, #56]	; (8003274 <BSP_SDRAM_MspInit+0x1e8>)
 800323a:	f001 fbc9 	bl	80049d0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	210f      	movs	r1, #15
 8003242:	2038      	movs	r0, #56	; 0x38
 8003244:	f001 faa3 	bl	800478e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003248:	2038      	movs	r0, #56	; 0x38
 800324a:	f001 fabc 	bl	80047c6 <HAL_NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3740      	adds	r7, #64	; 0x40
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40021400 	.word	0x40021400
 800326c:	40021800 	.word	0x40021800
 8003270:	40021c00 	.word	0x40021c00
 8003274:	20000394 	.word	0x20000394
 8003278:	40026410 	.word	0x40026410

0800327c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	460a      	mov	r2, r1
 8003286:	80fb      	strh	r3, [r7, #6]
 8003288:	4613      	mov	r3, r2
 800328a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <BSP_TS_Init+0x68>)
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <BSP_TS_Init+0x6c>)
 8003298:	88bb      	ldrh	r3, [r7, #4]
 800329a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <BSP_TS_Init+0x70>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2070      	movs	r0, #112	; 0x70
 80032a2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <BSP_TS_Init+0x70>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2070      	movs	r0, #112	; 0x70
 80032aa:	4798      	blx	r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b51      	cmp	r3, #81	; 0x51
 80032b0:	d111      	bne.n	80032d6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <BSP_TS_Init+0x74>)
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <BSP_TS_Init+0x70>)
 80032b6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <BSP_TS_Init+0x78>)
 80032ba:	2270      	movs	r2, #112	; 0x70
 80032bc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <BSP_TS_Init+0x7c>)
 80032c0:	2208      	movs	r2, #8
 80032c2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <BSP_TS_Init+0x74>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <BSP_TS_Init+0x78>)
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	b292      	uxth	r2, r2
 80032d0:	4610      	mov	r0, r2
 80032d2:	4798      	blx	r3
 80032d4:	e001      	b.n	80032da <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80032d6:	2303      	movs	r3, #3
 80032d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200003f8 	.word	0x200003f8
 80032e8:	200003fa 	.word	0x200003fa
 80032ec:	20000008 	.word	0x20000008
 80032f0:	200003f4 	.word	0x200003f4
 80032f4:	200003fd 	.word	0x200003fd
 80032f8:	200003fc 	.word	0x200003fc

080032fc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b097      	sub	sp, #92	; 0x5c
 8003300:	af02      	add	r7, sp, #8
 8003302:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003316:	4b97      	ldr	r3, [pc, #604]	; (8003574 <BSP_TS_GetState+0x278>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	4a96      	ldr	r2, [pc, #600]	; (8003578 <BSP_TS_GetState+0x27c>)
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	b292      	uxth	r2, r2
 8003322:	4610      	mov	r0, r2
 8003324:	4798      	blx	r3
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 81a8 	beq.w	8003688 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003338:	2300      	movs	r3, #0
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
 800333c:	e197      	b.n	800366e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800333e:	4b8d      	ldr	r3, [pc, #564]	; (8003574 <BSP_TS_GetState+0x278>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4a8c      	ldr	r2, [pc, #560]	; (8003578 <BSP_TS_GetState+0x27c>)
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	b290      	uxth	r0, r2
 800334a:	f107 0120 	add.w	r1, r7, #32
 800334e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003350:	0052      	lsls	r2, r2, #1
 8003352:	188c      	adds	r4, r1, r2
 8003354:	f107 0114 	add.w	r1, r7, #20
 8003358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800335a:	0052      	lsls	r2, r2, #1
 800335c:	440a      	add	r2, r1
 800335e:	4621      	mov	r1, r4
 8003360:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003362:	4b86      	ldr	r3, [pc, #536]	; (800357c <BSP_TS_GetState+0x280>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d11b      	bne.n	80033a2 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800336a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003372:	4413      	add	r3, r2
 8003374:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003380:	440b      	add	r3, r1
 8003382:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800338e:	4413      	add	r3, r2
 8003390:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800339c:	440b      	add	r3, r1
 800339e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80033a2:	4b76      	ldr	r3, [pc, #472]	; (800357c <BSP_TS_GetState+0x280>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80033ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033b6:	4413      	add	r3, r2
 80033b8:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80033bc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80033ca:	440b      	add	r3, r1
 80033cc:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <BSP_TS_GetState+0x280>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80033dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033e4:	4413      	add	r3, r2
 80033e6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80033ea:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80033f8:	440b      	add	r3, r1
 80033fa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <BSP_TS_GetState+0x280>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01b      	beq.n	8003442 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003412:	4413      	add	r3, r2
 8003414:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003420:	440b      	add	r3, r1
 8003422:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800342e:	4413      	add	r3, r2
 8003430:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800343c:	440b      	add	r3, r1
 800343e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800344a:	4413      	add	r3, r2
 800344c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003450:	4619      	mov	r1, r3
 8003452:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <BSP_TS_GetState+0x284>)
 8003454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345a:	4299      	cmp	r1, r3
 800345c:	d90e      	bls.n	800347c <BSP_TS_GetState+0x180>
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003466:	4413      	add	r3, r2
 8003468:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800346c:	4944      	ldr	r1, [pc, #272]	; (8003580 <BSP_TS_GetState+0x284>)
 800346e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003470:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003474:	b29b      	uxth	r3, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	e00d      	b.n	8003498 <BSP_TS_GetState+0x19c>
 800347c:	4a40      	ldr	r2, [pc, #256]	; (8003580 <BSP_TS_GetState+0x284>)
 800347e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	b29a      	uxth	r2, r3
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800348e:	440b      	add	r3, r1
 8003490:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800349c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80034a4:	4413      	add	r3, r2
 80034a6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4a35      	ldr	r2, [pc, #212]	; (8003584 <BSP_TS_GetState+0x288>)
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	4299      	cmp	r1, r3
 80034b6:	d90e      	bls.n	80034d6 <BSP_TS_GetState+0x1da>
 80034b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80034c0:	4413      	add	r3, r2
 80034c2:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80034c6:	492f      	ldr	r1, [pc, #188]	; (8003584 <BSP_TS_GetState+0x288>)
 80034c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	e00d      	b.n	80034f2 <BSP_TS_GetState+0x1f6>
 80034d6:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <BSP_TS_GetState+0x288>)
 80034d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80034e8:	440b      	add	r3, r1
 80034ea:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80034f6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80034fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034fe:	4413      	add	r3, r2
 8003500:	2b05      	cmp	r3, #5
 8003502:	dd17      	ble.n	8003534 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800350c:	4413      	add	r3, r2
 800350e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003512:	4619      	mov	r1, r3
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <BSP_TS_GetState+0x284>)
 8003516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800351c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003524:	4413      	add	r3, r2
 8003526:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800352a:	4619      	mov	r1, r3
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <BSP_TS_GetState+0x288>)
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003534:	4b10      	ldr	r3, [pc, #64]	; (8003578 <BSP_TS_GetState+0x27c>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b70      	cmp	r3, #112	; 0x70
 800353a:	d125      	bne.n	8003588 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800353c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003544:	4413      	add	r3, r2
 8003546:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	460a      	mov	r2, r1
 8003554:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800355e:	4413      	add	r3, r2
 8003560:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003568:	3304      	adds	r3, #4
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	460a      	mov	r2, r1
 8003570:	809a      	strh	r2, [r3, #4]
 8003572:	e02c      	b.n	80035ce <BSP_TS_GetState+0x2d2>
 8003574:	200003f4 	.word	0x200003f4
 8003578:	200003fd 	.word	0x200003fd
 800357c:	200003fc 	.word	0x200003fc
 8003580:	20000400 	.word	0x20000400
 8003584:	20000414 	.word	0x20000414
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003588:	4b42      	ldr	r3, [pc, #264]	; (8003694 <BSP_TS_GetState+0x398>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	4a42      	ldr	r2, [pc, #264]	; (8003698 <BSP_TS_GetState+0x39c>)
 8003590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003596:	fb03 f301 	mul.w	r3, r3, r1
 800359a:	0b1b      	lsrs	r3, r3, #12
 800359c:	b299      	uxth	r1, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	460a      	mov	r2, r1
 80035a8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80035aa:	4b3c      	ldr	r3, [pc, #240]	; (800369c <BSP_TS_GetState+0x3a0>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	4619      	mov	r1, r3
 80035b0:	4a3b      	ldr	r2, [pc, #236]	; (80036a0 <BSP_TS_GetState+0x3a4>)
 80035b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b8:	fb03 f301 	mul.w	r3, r3, r1
 80035bc:	0b1b      	lsrs	r3, r3, #12
 80035be:	b299      	uxth	r1, r3
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c4:	3304      	adds	r3, #4
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	460a      	mov	r2, r1
 80035cc:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80035ce:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <BSP_TS_GetState+0x3a8>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b298      	uxth	r0, r3
 80035d4:	f107 010c 	add.w	r1, r7, #12
 80035d8:	f107 0210 	add.w	r2, r7, #16
 80035dc:	f107 0308 	add.w	r3, r7, #8
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	460b      	mov	r3, r1
 80035e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80035e6:	f7fe fae9 	bl	8001bbc <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	b2d9      	uxtb	r1, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f2:	4413      	add	r3, r2
 80035f4:	3316      	adds	r3, #22
 80035f6:	460a      	mov	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	b2d9      	uxtb	r1, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003602:	4413      	add	r3, r2
 8003604:	3320      	adds	r3, #32
 8003606:	460a      	mov	r2, r1
 8003608:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d827      	bhi.n	8003660 <BSP_TS_GetState+0x364>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <BSP_TS_GetState+0x31c>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003637 	.word	0x08003637
 8003620:	08003645 	.word	0x08003645
 8003624:	08003653 	.word	0x08003653
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	4413      	add	r3, r2
 800362e:	331b      	adds	r3, #27
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
          break;
 8003634:	e018      	b.n	8003668 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363a:	4413      	add	r3, r2
 800363c:	331b      	adds	r3, #27
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
          break;
 8003642:	e011      	b.n	8003668 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003648:	4413      	add	r3, r2
 800364a:	331b      	adds	r3, #27
 800364c:	2203      	movs	r2, #3
 800364e:	701a      	strb	r2, [r3, #0]
          break;
 8003650:	e00a      	b.n	8003668 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003656:	4413      	add	r3, r2
 8003658:	331b      	adds	r3, #27
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
          break;
 800365e:	e003      	b.n	8003668 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003666:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366a:	3301      	adds	r3, #1
 800366c:	64bb      	str	r3, [r7, #72]	; 0x48
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003676:	4293      	cmp	r3, r2
 8003678:	f4ff ae61 	bcc.w	800333e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f813 	bl	80036a8 <BSP_TS_Get_GestureId>
 8003682:	4603      	mov	r3, r0
 8003684:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003688:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800368c:	4618      	mov	r0, r3
 800368e:	3754      	adds	r7, #84	; 0x54
 8003690:	46bd      	mov	sp, r7
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	200003f8 	.word	0x200003f8
 8003698:	20000400 	.word	0x20000400
 800369c:	200003fa 	.word	0x200003fa
 80036a0:	20000414 	.word	0x20000414
 80036a4:	200003fd 	.word	0x200003fd

080036a8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <BSP_TS_Get_GestureId+0x90>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f107 0208 	add.w	r2, r7, #8
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fa60 	bl	8001b8a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b18      	cmp	r3, #24
 80036ce:	d01b      	beq.n	8003708 <BSP_TS_Get_GestureId+0x60>
 80036d0:	2b18      	cmp	r3, #24
 80036d2:	d806      	bhi.n	80036e2 <BSP_TS_Get_GestureId+0x3a>
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d00f      	beq.n	80036f8 <BSP_TS_Get_GestureId+0x50>
 80036d8:	2b14      	cmp	r3, #20
 80036da:	d011      	beq.n	8003700 <BSP_TS_Get_GestureId+0x58>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <BSP_TS_Get_GestureId+0x48>
 80036e0:	e022      	b.n	8003728 <BSP_TS_Get_GestureId+0x80>
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d018      	beq.n	8003718 <BSP_TS_Get_GestureId+0x70>
 80036e6:	2b49      	cmp	r3, #73	; 0x49
 80036e8:	d01a      	beq.n	8003720 <BSP_TS_Get_GestureId+0x78>
 80036ea:	2b1c      	cmp	r3, #28
 80036ec:	d010      	beq.n	8003710 <BSP_TS_Get_GestureId+0x68>
 80036ee:	e01b      	b.n	8003728 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036f6:	e01a      	b.n	800372e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036fe:	e016      	b.n	800372e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003706:	e012      	b.n	800372e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2203      	movs	r2, #3
 800370c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800370e:	e00e      	b.n	800372e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2204      	movs	r2, #4
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003716:	e00a      	b.n	800372e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2205      	movs	r2, #5
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800371e:	e006      	b.n	800372e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2206      	movs	r2, #6
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003726:	e002      	b.n	800372e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200003fd 	.word	0x200003fd

0800373c <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0c7      	b.n	80038e6 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8c2 	bl	80038f4 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003786:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800379c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <HAL_LTDC_Init+0x1b4>)
 80037b8:	400b      	ands	r3, r1
 80037ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b42      	ldr	r3, [pc, #264]	; (80038f0 <HAL_LTDC_Init+0x1b4>)
 80037e6:	400b      	ands	r3, r1
 80037e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_LTDC_Init+0x1b4>)
 8003814:	400b      	ands	r3, r1
 8003816:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6919      	ldr	r1, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6959      	ldr	r1, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_LTDC_Init+0x1b4>)
 8003842:	400b      	ands	r3, r1
 8003844:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6959      	ldr	r1, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0204 	orr.w	r2, r2, #4
 80038b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0202 	orr.w	r2, r2, #2
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	f000f800 	.word	0xf000f800

080038f4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d025      	beq.n	800396a <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01e      	beq.n	800396a <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2204      	movs	r2, #4
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f87b 	bl	8003a60 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d025      	beq.n	80039c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01e      	beq.n	80039c4 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0202 	bic.w	r2, r2, #2
 8003994:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039a4:	f043 0202 	orr.w	r2, r3, #2
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f84e 	bl	8003a60 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01d      	beq.n	8003a0e <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d016      	beq.n	8003a0e <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2201      	movs	r2, #1
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f833 	bl	8003a74 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01d      	beq.n	8003a58 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0208 	bic.w	r2, r2, #8
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2208      	movs	r2, #8
 8003a40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f818 	bl	8003a88 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8003a9c:	b5b0      	push	{r4, r5, r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_LTDC_ConfigLayer+0x1a>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e02c      	b.n	8003b10 <HAL_LTDC_ConfigLayer+0x74>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2134      	movs	r1, #52	; 0x34
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f81f 	bl	8003b34 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdb0      	pop	{r4, r5, r7, pc}

08003b18 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003b26:	b2db      	uxtb	r3, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5c:	4413      	add	r3, r2
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	01db      	lsls	r3, r3, #7
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3384      	adds	r3, #132	; 0x84
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4611      	mov	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	01d2      	lsls	r2, r2, #7
 8003b7c:	440a      	add	r2, r1
 8003b7e:	3284      	adds	r2, #132	; 0x84
 8003b80:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b84:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b96:	4413      	add	r3, r2
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	01db      	lsls	r3, r3, #7
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3384      	adds	r3, #132	; 0x84
 8003ba8:	4619      	mov	r1, r3
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bbe:	4413      	add	r3, r2
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	01db      	lsls	r3, r3, #7
 8003bce:	4413      	add	r3, r2
 8003bd0:	3384      	adds	r3, #132	; 0x84
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	01d2      	lsls	r2, r2, #7
 8003bde:	440a      	add	r2, r1
 8003be0:	3284      	adds	r2, #132	; 0x84
 8003be2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003be6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bf6:	4413      	add	r3, r2
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	01db      	lsls	r3, r3, #7
 8003c04:	440b      	add	r3, r1
 8003c06:	3384      	adds	r3, #132	; 0x84
 8003c08:	4619      	mov	r1, r3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	01db      	lsls	r3, r3, #7
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3384      	adds	r3, #132	; 0x84
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	4611      	mov	r1, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	01d2      	lsls	r2, r2, #7
 8003c2a:	440a      	add	r2, r1
 8003c2c:	3284      	adds	r2, #132	; 0x84
 8003c2e:	f023 0307 	bic.w	r3, r3, #7
 8003c32:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	01db      	lsls	r3, r3, #7
 8003c3e:	4413      	add	r3, r2
 8003c40:	3384      	adds	r3, #132	; 0x84
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	01db      	lsls	r3, r3, #7
 8003c70:	4413      	add	r3, r2
 8003c72:	3384      	adds	r3, #132	; 0x84
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	01db      	lsls	r3, r3, #7
 8003c80:	4413      	add	r3, r2
 8003c82:	3384      	adds	r3, #132	; 0x84
 8003c84:	461a      	mov	r2, r3
 8003c86:	2300      	movs	r3, #0
 8003c88:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c90:	461a      	mov	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	01db      	lsls	r3, r3, #7
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3384      	adds	r3, #132	; 0x84
 8003ca8:	4619      	mov	r1, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	01db      	lsls	r3, r3, #7
 8003cba:	4413      	add	r3, r2
 8003cbc:	3384      	adds	r3, #132	; 0x84
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	01d2      	lsls	r2, r2, #7
 8003cca:	440a      	add	r2, r1
 8003ccc:	3284      	adds	r2, #132	; 0x84
 8003cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cd2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	01db      	lsls	r3, r3, #7
 8003cde:	4413      	add	r3, r2
 8003ce0:	3384      	adds	r3, #132	; 0x84
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	01db      	lsls	r3, r3, #7
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3384      	adds	r3, #132	; 0x84
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	01db      	lsls	r3, r3, #7
 8003d04:	440b      	add	r3, r1
 8003d06:	3384      	adds	r3, #132	; 0x84
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <LTDC_SetConfig+0x338>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	6809      	ldr	r1, [r1, #0]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	01c9      	lsls	r1, r1, #7
 8003d22:	4401      	add	r1, r0
 8003d24:	3184      	adds	r1, #132	; 0x84
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	01db      	lsls	r3, r3, #7
 8003d34:	4413      	add	r3, r2
 8003d36:	3384      	adds	r3, #132	; 0x84
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	01db      	lsls	r3, r3, #7
 8003d44:	4413      	add	r3, r2
 8003d46:	3384      	adds	r3, #132	; 0x84
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	01db      	lsls	r3, r3, #7
 8003d58:	4413      	add	r3, r2
 8003d5a:	3384      	adds	r3, #132	; 0x84
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	e01b      	b.n	8003daa <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d102      	bne.n	8003d80 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e014      	b.n	8003daa <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d00b      	beq.n	8003da0 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d007      	beq.n	8003da0 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d003      	beq.n	8003da0 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d9c:	2b07      	cmp	r3, #7
 8003d9e:	d102      	bne.n	8003da6 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e001      	b.n	8003daa <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	01db      	lsls	r3, r3, #7
 8003db4:	4413      	add	r3, r2
 8003db6:	3384      	adds	r3, #132	; 0x84
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	01d2      	lsls	r2, r2, #7
 8003dc4:	440a      	add	r2, r1
 8003dc6:	3284      	adds	r2, #132	; 0x84
 8003dc8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	fb02 f303 	mul.w	r3, r2, r3
 8003dd8:	041a      	lsls	r2, r3, #16
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	1acb      	subs	r3, r1, r3
 8003de4:	69f9      	ldr	r1, [r7, #28]
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	3303      	adds	r3, #3
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	6809      	ldr	r1, [r1, #0]
 8003df0:	4608      	mov	r0, r1
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	01c9      	lsls	r1, r1, #7
 8003df6:	4401      	add	r1, r0
 8003df8:	3184      	adds	r1, #132	; 0x84
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	01db      	lsls	r3, r3, #7
 8003e08:	4413      	add	r3, r2
 8003e0a:	3384      	adds	r3, #132	; 0x84
 8003e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	01db      	lsls	r3, r3, #7
 8003e18:	440b      	add	r3, r1
 8003e1a:	3384      	adds	r3, #132	; 0x84
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <LTDC_SetConfig+0x33c>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	01db      	lsls	r3, r3, #7
 8003e2e:	4413      	add	r3, r2
 8003e30:	3384      	adds	r3, #132	; 0x84
 8003e32:	461a      	mov	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	01db      	lsls	r3, r3, #7
 8003e44:	4413      	add	r3, r2
 8003e46:	3384      	adds	r3, #132	; 0x84
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	01d2      	lsls	r2, r2, #7
 8003e54:	440a      	add	r2, r1
 8003e56:	3284      	adds	r2, #132	; 0x84
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3724      	adds	r7, #36	; 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	fffff8f8 	.word	0xfffff8f8
 8003e70:	fffff800 	.word	0xfffff800

08003e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_MspInit+0x50>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <HAL_MspInit+0x50>)
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6413      	str	r3, [r2, #64]	; 0x40
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_MspInit+0x50>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_MspInit+0x50>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	4a0b      	ldr	r2, [pc, #44]	; (8003ec4 <HAL_MspInit+0x50>)
 8003e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_MspInit+0x50>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2100      	movs	r1, #0
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f000 fc6d 	bl	800478e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f000 fc86 	bl	80047c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_CRC_MspInit+0x38>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_CRC_MspInit+0x3c>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <HAL_CRC_MspInit+0x3c>)
 8003ee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <HAL_CRC_MspInit+0x3c>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40023000 	.word	0x40023000
 8003f04:	40023800 	.word	0x40023800

08003f08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <HAL_DMA2D_MspInit+0x38>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10b      	bne.n	8003f32 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <HAL_DMA2D_MspInit+0x3c>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_DMA2D_MspInit+0x3c>)
 8003f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f24:	6313      	str	r3, [r2, #48]	; 0x30
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <HAL_DMA2D_MspInit+0x3c>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	4002b000 	.word	0x4002b000
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_RTC_MspInit+0x2c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d105      	bne.n	8003f66 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_RTC_MspInit+0x30>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <HAL_RTC_MspInit+0x30>)
 8003f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40002800 	.word	0x40002800
 8003f78:	40023800 	.word	0x40023800

08003f7c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9c:	d12f      	bne.n	8003ffe <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <HAL_TIM_IC_MspInit+0x8c>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a19      	ldr	r2, [pc, #100]	; (8004008 <HAL_TIM_IC_MspInit+0x8c>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003faa:	4b17      	ldr	r3, [pc, #92]	; (8004008 <HAL_TIM_IC_MspInit+0x8c>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <HAL_TIM_IC_MspInit+0x8c>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <HAL_TIM_IC_MspInit+0x8c>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <HAL_TIM_IC_MspInit+0x8c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4808      	ldr	r0, [pc, #32]	; (800400c <HAL_TIM_IC_MspInit+0x90>)
 8003fea:	f001 fbbb 	bl	8005764 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	201c      	movs	r0, #28
 8003ff4:	f000 fbcb 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ff8:	201c      	movs	r0, #28
 8003ffa:	f000 fbe4 	bl	80047c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ffe:	bf00      	nop
 8004000:	3728      	adds	r7, #40	; 0x28
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	40020000 	.word	0x40020000

08004010 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e025      	b.n	8004070 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f81d 	bl	8004078 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 f8ab 	bl	80041ac <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	461a      	mov	r2, r3
 8004060:	6839      	ldr	r1, [r7, #0]
 8004062:	f000 f915 	bl	8004290 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d101      	bne.n	80040a8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	e018      	b.n	80040da <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f969 	bl	8004390 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d104      	bne.n	80040d0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2205      	movs	r2, #5
 80040ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80040ce:	e003      	b.n	80040d8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d101      	bne.n	80040fc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	e00e      	b.n	800411a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6839      	ldr	r1, [r7, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f961 	bl	80043d2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004126:	e7fe      	b.n	8004126 <NMI_Handler+0x4>

08004128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800412c:	e7fe      	b.n	800412c <HardFault_Handler+0x4>

0800412e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004132:	e7fe      	b.n	8004132 <MemManage_Handler+0x4>

08004134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004138:	e7fe      	b.n	8004138 <BusFault_Handler+0x4>

0800413a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800413e:	e7fe      	b.n	800413e <UsageFault_Handler+0x4>

08004140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800416e:	f000 f9f1 	bl	8004554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}

08004176 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800417a:	f002 f9f3 	bl	8006564 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004188:	4802      	ldr	r0, [pc, #8]	; (8004194 <TIM2_IRQHandler+0x10>)
 800418a:	f003 fd07 	bl	8007b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000530 	.word	0x20000530

08004198 <LTDC_IRQHandler>:



/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <LTDC_IRQHandler+0x10>)
 800419e:	f7ff fbb3 	bl	8003908 <HAL_LTDC_IRQHandler>
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000580 	.word	0x20000580

080041ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d027      	beq.n	8004216 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <FMC_SDRAM_Init+0xe0>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041dc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80041e2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80041e8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80041ee:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80041f4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80041fa:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004200:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004206:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e032      	b.n	800427c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004222:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800422c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004232:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <FMC_SDRAM_Init+0xe0>)
 8004244:	4013      	ands	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004250:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8004256:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800425c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8004262:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004268:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	ffff8000 	.word	0xffff8000

08004290 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d02e      	beq.n	8004308 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042b6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80042d0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80042da:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80042e4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80042ee:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042f8:	4313      	orrs	r3, r2
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	e039      	b.n	800437c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <FMC_SDRAM_Timing_Init+0xfc>)
 8004312:	4013      	ands	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	3b01      	subs	r3, #1
 8004324:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004326:	4313      	orrs	r3, r2
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800433a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800434a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	3b01      	subs	r3, #1
 8004352:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004354:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	3b01      	subs	r3, #1
 800435c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800435e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	3b01      	subs	r3, #1
 8004366:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004368:	4313      	orrs	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	ff0f0fff 	.word	0xff0f0fff

08004390 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80043a8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80043b2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <_sbrk+0x5c>)
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <_sbrk+0x60>)
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <_sbrk+0x64>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <_sbrk+0x64>)
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <_sbrk+0x68>)
 8004418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <_sbrk+0x64>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d207      	bcs.n	8004438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004428:	f004 f83a 	bl	80084a0 <__errno>
 800442c:	4602      	mov	r2, r0
 800442e:	230c      	movs	r3, #12
 8004430:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	e009      	b.n	800444c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <_sbrk+0x64>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <_sbrk+0x64>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	4a05      	ldr	r2, [pc, #20]	; (800445c <_sbrk+0x64>)
 8004448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20050000 	.word	0x20050000
 8004458:	00000400 	.word	0x00000400
 800445c:	20000428 	.word	0x20000428
 8004460:	20000680 	.word	0x20000680

08004464 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <SystemInit+0x20>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <SystemInit+0x20>)
 8004470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800448c:	480d      	ldr	r0, [pc, #52]	; (80044c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800448e:	490e      	ldr	r1, [pc, #56]	; (80044c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004490:	4a0e      	ldr	r2, [pc, #56]	; (80044cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004494:	e002      	b.n	800449c <LoopCopyDataInit>

08004496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800449a:	3304      	adds	r3, #4

0800449c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800449c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800449e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044a0:	d3f9      	bcc.n	8004496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044a2:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044a4:	4c0b      	ldr	r4, [pc, #44]	; (80044d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a8:	e001      	b.n	80044ae <LoopFillZerobss>

080044aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044ac:	3204      	adds	r2, #4

080044ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044b0:	d3fb      	bcc.n	80044aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044b2:	f7ff ffd7 	bl	8004464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044b6:	f003 fff9 	bl	80084ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044ba:	f7fd fc59 	bl	8001d70 <main>
  bx  lr    
 80044be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80044c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80044cc:	0800c2e8 	.word	0x0800c2e8
  ldr r2, =_sbss
 80044d0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80044d4:	20000680 	.word	0x20000680

080044d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d8:	e7fe      	b.n	80044d8 <ADC_IRQHandler>

080044da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044de:	2003      	movs	r0, #3
 80044e0:	f000 f94a 	bl	8004778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044e4:	2000      	movs	r0, #0
 80044e6:	f000 f805 	bl	80044f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80044ea:	f7ff fcc3 	bl	8003e74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <HAL_InitTick+0x54>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_InitTick+0x58>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	4619      	mov	r1, r3
 8004506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800450a:	fbb3 f3f1 	udiv	r3, r3, r1
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f965 	bl	80047e2 <HAL_SYSTICK_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e00e      	b.n	8004540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b0f      	cmp	r3, #15
 8004526:	d80a      	bhi.n	800453e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004528:	2200      	movs	r2, #0
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	f000 f92d 	bl	800478e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004534:	4a06      	ldr	r2, [pc, #24]	; (8004550 <HAL_InitTick+0x5c>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000034 	.word	0x20000034
 800454c:	2000003c 	.word	0x2000003c
 8004550:	20000038 	.word	0x20000038

08004554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_IncTick+0x20>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_IncTick+0x24>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4413      	add	r3, r2
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <HAL_IncTick+0x24>)
 8004566:	6013      	str	r3, [r2, #0]
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000003c 	.word	0x2000003c
 8004578:	2000065c 	.word	0x2000065c

0800457c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return uwTick;
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_GetTick+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	2000065c 	.word	0x2000065c

08004594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff ffee 	bl	800457c <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d005      	beq.n	80045ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <HAL_Delay+0x40>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ba:	bf00      	nop
 80045bc:	f7ff ffde 	bl	800457c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d8f7      	bhi.n	80045bc <HAL_Delay+0x28>
  {
  }
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	2000003c 	.word	0x2000003c

080045d8 <__NVIC_SetPriorityGrouping>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <__NVIC_SetPriorityGrouping+0x40>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045f4:	4013      	ands	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <__NVIC_SetPriorityGrouping+0x44>)
 8004602:	4313      	orrs	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004606:	4a04      	ldr	r2, [pc, #16]	; (8004618 <__NVIC_SetPriorityGrouping+0x40>)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	60d3      	str	r3, [r2, #12]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00
 800461c:	05fa0000 	.word	0x05fa0000

08004620 <__NVIC_GetPriorityGrouping>:
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004624:	4b04      	ldr	r3, [pc, #16]	; (8004638 <__NVIC_GetPriorityGrouping+0x18>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	f003 0307 	and.w	r3, r3, #7
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <__NVIC_EnableIRQ>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	2b00      	cmp	r3, #0
 800464c:	db0b      	blt.n	8004666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	4907      	ldr	r1, [pc, #28]	; (8004674 <__NVIC_EnableIRQ+0x38>)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	2001      	movs	r0, #1
 800465e:	fa00 f202 	lsl.w	r2, r0, r2
 8004662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	e000e100 	.word	0xe000e100

08004678 <__NVIC_SetPriority>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	6039      	str	r1, [r7, #0]
 8004682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004688:	2b00      	cmp	r3, #0
 800468a:	db0a      	blt.n	80046a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	490c      	ldr	r1, [pc, #48]	; (80046c4 <__NVIC_SetPriority+0x4c>)
 8004692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004696:	0112      	lsls	r2, r2, #4
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	440b      	add	r3, r1
 800469c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046a0:	e00a      	b.n	80046b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4908      	ldr	r1, [pc, #32]	; (80046c8 <__NVIC_SetPriority+0x50>)
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	3b04      	subs	r3, #4
 80046b0:	0112      	lsls	r2, r2, #4
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	440b      	add	r3, r1
 80046b6:	761a      	strb	r2, [r3, #24]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	e000e100 	.word	0xe000e100
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <NVIC_EncodePriority>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f1c3 0307 	rsb	r3, r3, #7
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	bf28      	it	cs
 80046ea:	2304      	movcs	r3, #4
 80046ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3304      	adds	r3, #4
 80046f2:	2b06      	cmp	r3, #6
 80046f4:	d902      	bls.n	80046fc <NVIC_EncodePriority+0x30>
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3b03      	subs	r3, #3
 80046fa:	e000      	b.n	80046fe <NVIC_EncodePriority+0x32>
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004700:	f04f 32ff 	mov.w	r2, #4294967295
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43da      	mvns	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	401a      	ands	r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004714:	f04f 31ff 	mov.w	r1, #4294967295
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	43d9      	mvns	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004724:	4313      	orrs	r3, r2
}
 8004726:	4618      	mov	r0, r3
 8004728:	3724      	adds	r7, #36	; 0x24
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3b01      	subs	r3, #1
 8004740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004744:	d301      	bcc.n	800474a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004746:	2301      	movs	r3, #1
 8004748:	e00f      	b.n	800476a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <SysTick_Config+0x40>)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004752:	210f      	movs	r1, #15
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	f7ff ff8e 	bl	8004678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <SysTick_Config+0x40>)
 800475e:	2200      	movs	r2, #0
 8004760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004762:	4b04      	ldr	r3, [pc, #16]	; (8004774 <SysTick_Config+0x40>)
 8004764:	2207      	movs	r2, #7
 8004766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	e000e010 	.word	0xe000e010

08004778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff ff29 	bl	80045d8 <__NVIC_SetPriorityGrouping>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047a0:	f7ff ff3e 	bl	8004620 <__NVIC_GetPriorityGrouping>
 80047a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f7ff ff8e 	bl	80046cc <NVIC_EncodePriority>
 80047b0:	4602      	mov	r2, r0
 80047b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ff5d 	bl	8004678 <__NVIC_SetPriority>
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff31 	bl	800463c <__NVIC_EnableIRQ>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ffa2 	bl	8004734 <SysTick_Config>
 80047f0:	4603      	mov	r3, r0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e054      	b.n	80048b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7f5b      	ldrb	r3, [r3, #29]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fb52 	bl	8003ec8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	791b      	ldrb	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10c      	bne.n	800484c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <HAL_CRC_Init+0xc4>)
 8004838:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0218 	bic.w	r2, r2, #24
 8004848:	609a      	str	r2, [r3, #8]
 800484a:	e00c      	b.n	8004866 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	461a      	mov	r2, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f834 	bl	80048c4 <HAL_CRCEx_Polynomial_Set>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e028      	b.n	80048b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	795b      	ldrb	r3, [r3, #5]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f04f 32ff 	mov.w	r2, #4294967295
 8004876:	611a      	str	r2, [r3, #16]
 8004878:	e004      	b.n	8004884 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6912      	ldr	r2, [r2, #16]
 8004882:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	04c11db7 	.word	0x04c11db7

080048c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80048d4:	231f      	movs	r3, #31
 80048d6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80048d8:	bf00      	nop
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1e5a      	subs	r2, r3, #1
 80048de:	613a      	str	r2, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <HAL_CRCEx_Polynomial_Set+0x34>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b18      	cmp	r3, #24
 80048fc:	d846      	bhi.n	800498c <HAL_CRCEx_Polynomial_Set+0xc8>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004993 	.word	0x08004993
 8004908:	0800498d 	.word	0x0800498d
 800490c:	0800498d 	.word	0x0800498d
 8004910:	0800498d 	.word	0x0800498d
 8004914:	0800498d 	.word	0x0800498d
 8004918:	0800498d 	.word	0x0800498d
 800491c:	0800498d 	.word	0x0800498d
 8004920:	0800498d 	.word	0x0800498d
 8004924:	08004981 	.word	0x08004981
 8004928:	0800498d 	.word	0x0800498d
 800492c:	0800498d 	.word	0x0800498d
 8004930:	0800498d 	.word	0x0800498d
 8004934:	0800498d 	.word	0x0800498d
 8004938:	0800498d 	.word	0x0800498d
 800493c:	0800498d 	.word	0x0800498d
 8004940:	0800498d 	.word	0x0800498d
 8004944:	08004975 	.word	0x08004975
 8004948:	0800498d 	.word	0x0800498d
 800494c:	0800498d 	.word	0x0800498d
 8004950:	0800498d 	.word	0x0800498d
 8004954:	0800498d 	.word	0x0800498d
 8004958:	0800498d 	.word	0x0800498d
 800495c:	0800498d 	.word	0x0800498d
 8004960:	0800498d 	.word	0x0800498d
 8004964:	08004969 	.word	0x08004969
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b06      	cmp	r3, #6
 800496c:	d913      	bls.n	8004996 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004972:	e010      	b.n	8004996 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b07      	cmp	r3, #7
 8004978:	d90f      	bls.n	800499a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800497e:	e00c      	b.n	800499a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b0f      	cmp	r3, #15
 8004984:	d90b      	bls.n	800499e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800498a:	e008      	b.n	800499e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75fb      	strb	r3, [r7, #23]
      break;
 8004990:	e006      	b.n	80049a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004992:	bf00      	nop
 8004994:	e004      	b.n	80049a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800499e:	bf00      	nop
  }
  if (status == HAL_OK)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 0118 	bic.w	r1, r3, #24
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049dc:	f7ff fdce 	bl	800457c <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e099      	b.n	8004b20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0201 	bic.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0c:	e00f      	b.n	8004a2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a0e:	f7ff fdb5 	bl	800457c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d908      	bls.n	8004a2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2203      	movs	r2, #3
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e078      	b.n	8004b20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e8      	bne.n	8004a0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <HAL_DMA_Init+0x158>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d107      	bne.n	8004a98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	4313      	orrs	r3, r2
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d117      	bne.n	8004af2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00e      	beq.n	8004af2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f8bd 	bl	8004c54 <DMA_CheckFifoParam>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004aee:	2301      	movs	r3, #1
 8004af0:	e016      	b.n	8004b20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f874 	bl	8004be8 <DMA_CalcBaseAndBitshift>
 8004b00:	4603      	mov	r3, r0
 8004b02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	223f      	movs	r2, #63	; 0x3f
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	f010803f 	.word	0xf010803f

08004b2c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e050      	b.n	8004be0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d101      	bne.n	8004b4e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e048      	b.n	8004be0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2221      	movs	r2, #33	; 0x21
 8004b8c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f82a 	bl	8004be8 <DMA_CalcBaseAndBitshift>
 8004b94:	4603      	mov	r3, r0
 8004b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	223f      	movs	r2, #63	; 0x3f
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	3b10      	subs	r3, #16
 8004bf8:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <DMA_CalcBaseAndBitshift+0x60>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c02:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <DMA_CalcBaseAndBitshift+0x64>)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d908      	bls.n	8004c28 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <DMA_CalcBaseAndBitshift+0x68>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	1d1a      	adds	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	659a      	str	r2, [r3, #88]	; 0x58
 8004c26:	e006      	b.n	8004c36 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <DMA_CalcBaseAndBitshift+0x68>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	aaaaaaab 	.word	0xaaaaaaab
 8004c4c:	0800c070 	.word	0x0800c070
 8004c50:	fffffc00 	.word	0xfffffc00

08004c54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d11f      	bne.n	8004cae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d855      	bhi.n	8004d20 <DMA_CheckFifoParam+0xcc>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <DMA_CheckFifoParam+0x28>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004c9f 	.word	0x08004c9f
 8004c84:	08004c8d 	.word	0x08004c8d
 8004c88:	08004d21 	.word	0x08004d21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d045      	beq.n	8004d24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c9c:	e042      	b.n	8004d24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca6:	d13f      	bne.n	8004d28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cac:	e03c      	b.n	8004d28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb6:	d121      	bne.n	8004cfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d836      	bhi.n	8004d2c <DMA_CheckFifoParam+0xd8>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <DMA_CheckFifoParam+0x70>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004cdb 	.word	0x08004cdb
 8004ccc:	08004cd5 	.word	0x08004cd5
 8004cd0:	08004ced 	.word	0x08004ced
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	e02f      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d024      	beq.n	8004d30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cea:	e021      	b.n	8004d30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cf4:	d11e      	bne.n	8004d34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cfa:	e01b      	b.n	8004d34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d902      	bls.n	8004d08 <DMA_CheckFifoParam+0xb4>
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d003      	beq.n	8004d0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d06:	e018      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0c:	e015      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1e:	e00b      	b.n	8004d38 <DMA_CheckFifoParam+0xe4>
      break;
 8004d20:	bf00      	nop
 8004d22:	e00a      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      break;
 8004d24:	bf00      	nop
 8004d26:	e008      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      break;
 8004d28:	bf00      	nop
 8004d2a:	e006      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      break;
 8004d2c:	bf00      	nop
 8004d2e:	e004      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      break;
 8004d30:	bf00      	nop
 8004d32:	e002      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      break;   
 8004d34:	bf00      	nop
 8004d36:	e000      	b.n	8004d3a <DMA_CheckFifoParam+0xe6>
      break;
 8004d38:	bf00      	nop
    }
  } 
  
  return status; 
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e039      	b.n	8004dce <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff f8ca 	bl	8003f08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	f023 0107 	bic.w	r1, r3, #7
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <HAL_DMA2D_Init+0x90>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68d1      	ldr	r1, [r2, #12]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	ffffc000 	.word	0xffffc000

08004ddc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_DMA2D_Start+0x1c>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e018      	b.n	8004e2a <HAL_DMA2D_Start+0x4e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f988 	bl	8005128 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d056      	beq.n	8004efc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e4e:	f7ff fb95 	bl	800457c <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e54:	e04b      	b.n	8004eee <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d023      	beq.n	8004eb0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	f043 0201 	orr.w	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2221      	movs	r2, #33	; 0x21
 8004e9a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0a5      	b.n	8004ffc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d01a      	beq.n	8004eee <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7ff fb60 	bl	800457c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <HAL_DMA2D_PollForTransfer+0x9c>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2203      	movs	r2, #3
 8004ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e086      	b.n	8004ffc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ac      	beq.n	8004e56 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d061      	beq.n	8004fe2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f1e:	f7ff fb2d 	bl	800457c <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004f24:	e056      	b.n	8004fd4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02e      	beq.n	8004f96 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	f043 0204 	orr.w	r2, r3, #4
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	f043 0202 	orr.w	r2, r3, #2
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2229      	movs	r2, #41	; 0x29
 8004f80:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2204      	movs	r2, #4
 8004f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e032      	b.n	8004ffc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d01a      	beq.n	8004fd4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f9e:	f7ff faed 	bl	800457c <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d302      	bcc.n	8004fb4 <HAL_DMA2D_PollForTransfer+0x182>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e013      	b.n	8004ffc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0a1      	beq.n	8004f26 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2212      	movs	r2, #18
 8004fe8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_DMA2D_ConfigLayer+0x20>
 8005020:	2302      	movs	r3, #2
 8005022:	e079      	b.n	8005118 <HAL_DMA2D_ConfigLayer+0x114>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	3318      	adds	r3, #24
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800504e:	4b35      	ldr	r3, [pc, #212]	; (8005124 <HAL_DMA2D_ConfigLayer+0x120>)
 8005050:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b0a      	cmp	r3, #10
 8005058:	d003      	beq.n	8005062 <HAL_DMA2D_ConfigLayer+0x5e>
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b09      	cmp	r3, #9
 8005060:	d107      	bne.n	8005072 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e005      	b.n	800507e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d120      	bne.n	80050c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	43db      	mvns	r3, r3
 800508e:	ea02 0103 	and.w	r1, r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	430a      	orrs	r2, r1
 800509a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b0a      	cmp	r3, #10
 80050ac:	d003      	beq.n	80050b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b09      	cmp	r3, #9
 80050b4:	d127      	bne.n	8005106 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
 80050c4:	e01f      	b.n	8005106 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	43db      	mvns	r3, r3
 80050d0:	ea02 0103 	and.w	r1, r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	430a      	orrs	r2, r1
 80050dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b0a      	cmp	r3, #10
 80050ee:	d003      	beq.n	80050f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b09      	cmp	r3, #9
 80050f6:	d106      	bne.n	8005106 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005104:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	ff03000f 	.word	0xff03000f

08005128 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005128:	b480      	push	{r7}
 800512a:	b08b      	sub	sp, #44	; 0x2c
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	041a      	lsls	r2, r3, #16
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	431a      	orrs	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005160:	d174      	bne.n	800524c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005168:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005170:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005178:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d108      	bne.n	800519a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	431a      	orrs	r2, r3
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	4313      	orrs	r3, r2
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	e053      	b.n	8005242 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d106      	bne.n	80051b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
 80051ae:	e048      	b.n	8005242 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d111      	bne.n	80051dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	0cdb      	lsrs	r3, r3, #19
 80051bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	0a9b      	lsrs	r3, r3, #10
 80051c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	08db      	lsrs	r3, r3, #3
 80051c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	02db      	lsls	r3, r3, #11
 80051d2:	4313      	orrs	r3, r2
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	e032      	b.n	8005242 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d117      	bne.n	8005214 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	0fdb      	lsrs	r3, r3, #31
 80051e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	0cdb      	lsrs	r3, r3, #19
 80051ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	0adb      	lsrs	r3, r3, #11
 80051f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	431a      	orrs	r2, r3
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	03db      	lsls	r3, r3, #15
 800520a:	4313      	orrs	r3, r2
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
 8005212:	e016      	b.n	8005242 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	0f1b      	lsrs	r3, r3, #28
 8005218:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	0d1b      	lsrs	r3, r3, #20
 800521e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	0b1b      	lsrs	r3, r3, #12
 8005224:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	011a      	lsls	r2, r3, #4
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	431a      	orrs	r2, r3
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	4313      	orrs	r3, r2
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800524a:	e003      	b.n	8005254 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	60da      	str	r2, [r3, #12]
}
 8005254:	bf00      	nop
 8005256:	372c      	adds	r7, #44	; 0x2c
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005272:	4b27      	ldr	r3, [pc, #156]	; (8005310 <HAL_FLASH_Program+0xb0>)
 8005274:	7d1b      	ldrb	r3, [r3, #20]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_FLASH_Program+0x1e>
 800527a:	2302      	movs	r3, #2
 800527c:	e043      	b.n	8005306 <HAL_FLASH_Program+0xa6>
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_FLASH_Program+0xb0>)
 8005280:	2201      	movs	r2, #1
 8005282:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005284:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005288:	f000 f868 	bl	800535c <FLASH_WaitForLastOperation>
 800528c:	4603      	mov	r3, r0
 800528e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d133      	bne.n	80052fe <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d823      	bhi.n	80052e4 <HAL_FLASH_Program+0x84>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <HAL_FLASH_Program+0x44>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c1 	.word	0x080052c1
 80052ac:	080052cd 	.word	0x080052cd
 80052b0:	080052d9 	.word	0x080052d9
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80052b4:	783b      	ldrb	r3, [r7, #0]
 80052b6:	4619      	mov	r1, r3
 80052b8:	68b8      	ldr	r0, [r7, #8]
 80052ba:	f000 f90b 	bl	80054d4 <FLASH_Program_Byte>
        break;
 80052be:	e012      	b.n	80052e6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80052c0:	883b      	ldrh	r3, [r7, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	68b8      	ldr	r0, [r7, #8]
 80052c6:	f000 f8df 	bl	8005488 <FLASH_Program_HalfWord>
        break;
 80052ca:	e00c      	b.n	80052e6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	4619      	mov	r1, r3
 80052d0:	68b8      	ldr	r0, [r7, #8]
 80052d2:	f000 f8b5 	bl	8005440 <FLASH_Program_Word>
        break;
 80052d6:	e006      	b.n	80052e6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80052d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052dc:	68b8      	ldr	r0, [r7, #8]
 80052de:	f000 f87d 	bl	80053dc <FLASH_Program_DoubleWord>
        break;
 80052e2:	e000      	b.n	80052e6 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80052e4:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052ea:	f000 f837 	bl	800535c <FLASH_WaitForLastOperation>
 80052ee:	4603      	mov	r3, r0
 80052f0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <HAL_FLASH_Program+0xb4>)
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	4a07      	ldr	r2, [pc, #28]	; (8005314 <HAL_FLASH_Program+0xb4>)
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052fe:	4b04      	ldr	r3, [pc, #16]	; (8005310 <HAL_FLASH_Program+0xb0>)
 8005300:	2200      	movs	r2, #0
 8005302:	751a      	strb	r2, [r3, #20]

  return status;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000660 	.word	0x20000660
 8005314:	40023c00 	.word	0x40023c00

08005318 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_FLASH_Unlock+0x38>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	da0b      	bge.n	8005342 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <HAL_FLASH_Unlock+0x38>)
 800532c:	4a09      	ldr	r2, [pc, #36]	; (8005354 <HAL_FLASH_Unlock+0x3c>)
 800532e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <HAL_FLASH_Unlock+0x38>)
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_FLASH_Unlock+0x40>)
 8005334:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_FLASH_Unlock+0x38>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	da01      	bge.n	8005342 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005342:	79fb      	ldrb	r3, [r7, #7]
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40023c00 	.word	0x40023c00
 8005354:	45670123 	.word	0x45670123
 8005358:	cdef89ab 	.word	0xcdef89ab

0800535c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <FLASH_WaitForLastOperation+0x78>)
 800536a:	2200      	movs	r2, #0
 800536c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800536e:	f7ff f905 	bl	800457c <HAL_GetTick>
 8005372:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005374:	e010      	b.n	8005398 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d00c      	beq.n	8005398 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <FLASH_WaitForLastOperation+0x38>
 8005384:	f7ff f8fa 	bl	800457c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d201      	bcs.n	8005398 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e019      	b.n	80053cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <FLASH_WaitForLastOperation+0x7c>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e8      	bne.n	8005376 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <FLASH_WaitForLastOperation+0x7c>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80053b0:	f000 f8b4 	bl	800551c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e009      	b.n	80053cc <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <FLASH_WaitForLastOperation+0x7c>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <FLASH_WaitForLastOperation+0x7c>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
  
}  
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000660 	.word	0x20000660
 80053d8:	40023c00 	.word	0x40023c00

080053dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80053dc:	b490      	push	{r4, r7}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <FLASH_Program_DoubleWord+0x60>)
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <FLASH_Program_DoubleWord+0x60>)
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <FLASH_Program_DoubleWord+0x60>)
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	4a10      	ldr	r2, [pc, #64]	; (800543c <FLASH_Program_DoubleWord+0x60>)
 80053fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80053fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <FLASH_Program_DoubleWord+0x60>)
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	4a0d      	ldr	r2, [pc, #52]	; (800543c <FLASH_Program_DoubleWord+0x60>)
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005412:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005416:	e9d7 1200 	ldrd	r1, r2, [r7]
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	f04f 0400 	mov.w	r4, #0
 8005422:	0013      	movs	r3, r2
 8005424:	2400      	movs	r4, #0
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	3204      	adds	r2, #4
 800542a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800542c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bc90      	pop	{r4, r7}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40023c00 	.word	0x40023c00

08005440 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <FLASH_Program_Word+0x44>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <FLASH_Program_Word+0x44>)
 8005450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005454:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <FLASH_Program_Word+0x44>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <FLASH_Program_Word+0x44>)
 800545c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005460:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <FLASH_Program_Word+0x44>)
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <FLASH_Program_Word+0x44>)
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40023c00 	.word	0x40023c00

08005488 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <FLASH_Program_HalfWord+0x48>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4a0d      	ldr	r2, [pc, #52]	; (80054d0 <FLASH_Program_HalfWord+0x48>)
 800549a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <FLASH_Program_HalfWord+0x48>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <FLASH_Program_HalfWord+0x48>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054ac:	4b08      	ldr	r3, [pc, #32]	; (80054d0 <FLASH_Program_HalfWord+0x48>)
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	4a07      	ldr	r2, [pc, #28]	; (80054d0 <FLASH_Program_HalfWord+0x48>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40023c00 	.word	0x40023c00

080054d4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80054e0:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <FLASH_Program_Byte+0x44>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	4a0c      	ldr	r2, [pc, #48]	; (8005518 <FLASH_Program_Byte+0x44>)
 80054e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <FLASH_Program_Byte+0x44>)
 80054ee:	4a0a      	ldr	r2, [pc, #40]	; (8005518 <FLASH_Program_Byte+0x44>)
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054f4:	4b08      	ldr	r3, [pc, #32]	; (8005518 <FLASH_Program_Byte+0x44>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	4a07      	ldr	r2, [pc, #28]	; (8005518 <FLASH_Program_Byte+0x44>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40023c00 	.word	0x40023c00

0800551c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005520:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <FLASH_SetErrorCode+0x8c>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800552c:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <FLASH_SetErrorCode+0x90>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f043 0320 	orr.w	r3, r3, #32
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <FLASH_SetErrorCode+0x90>)
 8005536:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005538:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <FLASH_SetErrorCode+0x8c>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005544:	4b19      	ldr	r3, [pc, #100]	; (80055ac <FLASH_SetErrorCode+0x90>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f043 0310 	orr.w	r3, r3, #16
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <FLASH_SetErrorCode+0x90>)
 800554e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005550:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <FLASH_SetErrorCode+0x8c>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <FLASH_SetErrorCode+0x90>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f043 0308 	orr.w	r3, r3, #8
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <FLASH_SetErrorCode+0x90>)
 8005566:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005568:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <FLASH_SetErrorCode+0x8c>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005574:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <FLASH_SetErrorCode+0x90>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f043 0304 	orr.w	r3, r3, #4
 800557c:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <FLASH_SetErrorCode+0x90>)
 800557e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8005580:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <FLASH_SetErrorCode+0x8c>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <FLASH_SetErrorCode+0x90>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f043 0302 	orr.w	r3, r3, #2
 8005594:	4a05      	ldr	r2, [pc, #20]	; (80055ac <FLASH_SetErrorCode+0x90>)
 8005596:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <FLASH_SetErrorCode+0x8c>)
 800559a:	22f2      	movs	r2, #242	; 0xf2
 800559c:	60da      	str	r2, [r3, #12]
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	40023c00 	.word	0x40023c00
 80055ac:	20000660 	.word	0x20000660

080055b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055c2:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <HAL_FLASHEx_Erase+0xd0>)
 80055c4:	7d1b      	ldrb	r3, [r3, #20]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_FLASHEx_Erase+0x1e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e053      	b.n	8005676 <HAL_FLASHEx_Erase+0xc6>
 80055ce:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <HAL_FLASHEx_Erase+0xd0>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055d8:	f7ff fec0 	bl	800535c <FLASH_WaitForLastOperation>
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d143      	bne.n	800566e <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d112      	bne.n	800561c <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f843 	bl	8005688 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005602:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005606:	f7ff fea9 	bl	800535c <FLASH_WaitForLastOperation>
 800560a:	4603      	mov	r3, r0
 800560c:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_FLASHEx_Erase+0xd4>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <HAL_FLASHEx_Erase+0xd4>)
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	6113      	str	r3, [r2, #16]
 800561a:	e028      	b.n	800566e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	e01c      	b.n	800565e <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	68b8      	ldr	r0, [r7, #8]
 800562e:	f000 f84f 	bl	80056d0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005632:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005636:	f7ff fe91 	bl	800535c <FLASH_WaitForLastOperation>
 800563a:	4603      	mov	r3, r0
 800563c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_FLASHEx_Erase+0xd4>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <HAL_FLASHEx_Erase+0xd4>)
 8005644:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8005648:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	601a      	str	r2, [r3, #0]
          break;
 8005656:	e00a      	b.n	800566e <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3301      	adds	r3, #1
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4413      	add	r3, r2
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	d3da      	bcc.n	8005624 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <HAL_FLASHEx_Erase+0xd0>)
 8005670:	2200      	movs	r2, #0
 8005672:	751a      	strb	r2, [r3, #20]

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000660 	.word	0x20000660
 8005684:	40023c00 	.word	0x40023c00

08005688 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <FLASH_MassErase+0x44>)
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4a0d      	ldr	r2, [pc, #52]	; (80056cc <FLASH_MassErase+0x44>)
 8005698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <FLASH_MassErase+0x44>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <FLASH_MassErase+0x44>)
 80056a4:	f043 0304 	orr.w	r3, r3, #4
 80056a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <FLASH_MassErase+0x44>)
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	4313      	orrs	r3, r2
 80056b4:	4a05      	ldr	r2, [pc, #20]	; (80056cc <FLASH_MassErase+0x44>)
 80056b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ba:	6113      	str	r3, [r2, #16]
 80056bc:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40023c00 	.word	0x40023c00

080056d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e010      	b.n	800570e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d103      	bne.n	80056fa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e009      	b.n	800570e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d103      	bne.n	8005708 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	e002      	b.n	800570e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800570c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <FLASH_Erase_Sector+0x90>)
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	4a13      	ldr	r2, [pc, #76]	; (8005760 <FLASH_Erase_Sector+0x90>)
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <FLASH_Erase_Sector+0x90>)
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	4910      	ldr	r1, [pc, #64]	; (8005760 <FLASH_Erase_Sector+0x90>)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8005726:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <FLASH_Erase_Sector+0x90>)
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <FLASH_Erase_Sector+0x90>)
 800572c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005730:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005732:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <FLASH_Erase_Sector+0x90>)
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4313      	orrs	r3, r2
 800573c:	4a08      	ldr	r2, [pc, #32]	; (8005760 <FLASH_Erase_Sector+0x90>)
 800573e:	f043 0302 	orr.w	r3, r3, #2
 8005742:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <FLASH_Erase_Sector+0x90>)
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <FLASH_Erase_Sector+0x90>)
 800574a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574e:	6113      	str	r3, [r2, #16]
 8005750:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40023c00 	.word	0x40023c00

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005776:	2300      	movs	r3, #0
 8005778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	e175      	b.n	8005a70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005784:	2201      	movs	r2, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4013      	ands	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	429a      	cmp	r2, r3
 800579e:	f040 8164 	bne.w	8005a6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d00b      	beq.n	80057c2 <HAL_GPIO_Init+0x5e>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d007      	beq.n	80057c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057b6:	2b11      	cmp	r3, #17
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b12      	cmp	r3, #18
 80057c0:	d130      	bne.n	8005824 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2203      	movs	r2, #3
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057f8:	2201      	movs	r2, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 0201 	and.w	r2, r3, #1
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x100>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b12      	cmp	r3, #18
 8005862:	d123      	bne.n	80058ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	08da      	lsrs	r2, r3, #3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3208      	adds	r2, #8
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	220f      	movs	r2, #15
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	43db      	mvns	r3, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4313      	orrs	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	08da      	lsrs	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3208      	adds	r2, #8
 80058a6:	69b9      	ldr	r1, [r7, #24]
 80058a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	2203      	movs	r2, #3
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 0203 	and.w	r2, r3, #3
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80be 	beq.w	8005a6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ee:	4b65      	ldr	r3, [pc, #404]	; (8005a84 <HAL_GPIO_Init+0x320>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	4a64      	ldr	r2, [pc, #400]	; (8005a84 <HAL_GPIO_Init+0x320>)
 80058f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f8:	6453      	str	r3, [r2, #68]	; 0x44
 80058fa:	4b62      	ldr	r3, [pc, #392]	; (8005a84 <HAL_GPIO_Init+0x320>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005906:	4a60      	ldr	r2, [pc, #384]	; (8005a88 <HAL_GPIO_Init+0x324>)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	3302      	adds	r3, #2
 800590e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005912:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	220f      	movs	r2, #15
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a57      	ldr	r2, [pc, #348]	; (8005a8c <HAL_GPIO_Init+0x328>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d037      	beq.n	80059a2 <HAL_GPIO_Init+0x23e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a56      	ldr	r2, [pc, #344]	; (8005a90 <HAL_GPIO_Init+0x32c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d031      	beq.n	800599e <HAL_GPIO_Init+0x23a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a55      	ldr	r2, [pc, #340]	; (8005a94 <HAL_GPIO_Init+0x330>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d02b      	beq.n	800599a <HAL_GPIO_Init+0x236>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a54      	ldr	r2, [pc, #336]	; (8005a98 <HAL_GPIO_Init+0x334>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d025      	beq.n	8005996 <HAL_GPIO_Init+0x232>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a53      	ldr	r2, [pc, #332]	; (8005a9c <HAL_GPIO_Init+0x338>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01f      	beq.n	8005992 <HAL_GPIO_Init+0x22e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a52      	ldr	r2, [pc, #328]	; (8005aa0 <HAL_GPIO_Init+0x33c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d019      	beq.n	800598e <HAL_GPIO_Init+0x22a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a51      	ldr	r2, [pc, #324]	; (8005aa4 <HAL_GPIO_Init+0x340>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_GPIO_Init+0x226>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a50      	ldr	r2, [pc, #320]	; (8005aa8 <HAL_GPIO_Init+0x344>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00d      	beq.n	8005986 <HAL_GPIO_Init+0x222>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a4f      	ldr	r2, [pc, #316]	; (8005aac <HAL_GPIO_Init+0x348>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <HAL_GPIO_Init+0x21e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a4e      	ldr	r2, [pc, #312]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d101      	bne.n	800597e <HAL_GPIO_Init+0x21a>
 800597a:	2309      	movs	r3, #9
 800597c:	e012      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 800597e:	230a      	movs	r3, #10
 8005980:	e010      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 8005982:	2308      	movs	r3, #8
 8005984:	e00e      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 8005986:	2307      	movs	r3, #7
 8005988:	e00c      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 800598a:	2306      	movs	r3, #6
 800598c:	e00a      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 800598e:	2305      	movs	r3, #5
 8005990:	e008      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 8005992:	2304      	movs	r3, #4
 8005994:	e006      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 8005996:	2303      	movs	r3, #3
 8005998:	e004      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 800599a:	2302      	movs	r3, #2
 800599c:	e002      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <HAL_GPIO_Init+0x240>
 80059a2:	2300      	movs	r3, #0
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	f002 0203 	and.w	r2, r2, #3
 80059aa:	0092      	lsls	r2, r2, #2
 80059ac:	4093      	lsls	r3, r2
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059b4:	4934      	ldr	r1, [pc, #208]	; (8005a88 <HAL_GPIO_Init+0x324>)
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	089b      	lsrs	r3, r3, #2
 80059ba:	3302      	adds	r3, #2
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059c2:	4b3c      	ldr	r3, [pc, #240]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059e6:	4a33      	ldr	r2, [pc, #204]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059ec:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4013      	ands	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a10:	4a28      	ldr	r2, [pc, #160]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a40:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a64:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <HAL_GPIO_Init+0x350>)
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	f67f ae86 	bls.w	8005784 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a78:	bf00      	nop
 8005a7a:	3724      	adds	r7, #36	; 0x24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40023800 	.word	0x40023800
 8005a88:	40013800 	.word	0x40013800
 8005a8c:	40020000 	.word	0x40020000
 8005a90:	40020400 	.word	0x40020400
 8005a94:	40020800 	.word	0x40020800
 8005a98:	40020c00 	.word	0x40020c00
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40021400 	.word	0x40021400
 8005aa4:	40021800 	.word	0x40021800
 8005aa8:	40021c00 	.word	0x40021c00
 8005aac:	40022000 	.word	0x40022000
 8005ab0:	40022400 	.word	0x40022400
 8005ab4:	40013c00 	.word	0x40013c00

08005ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	807b      	strh	r3, [r7, #2]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ac8:	787b      	ldrb	r3, [r7, #1]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ace:	887a      	ldrh	r2, [r7, #2]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ad4:	e003      	b.n	8005ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005ad6:	887b      	ldrh	r3, [r7, #2]
 8005ad8:	041a      	lsls	r2, r3, #16
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	619a      	str	r2, [r3, #24]
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e07f      	b.n	8005bfe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f8a9 	bl	8005c6a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	; 0x24
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d107      	bne.n	8005b66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b62:	609a      	str	r2, [r3, #8]
 8005b64:	e006      	b.n	8005b74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d104      	bne.n	8005b86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <HAL_I2C_Init+0x11c>)
 8005b92:	430b      	orrs	r3, r1
 8005b94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	ea42 0103 	orr.w	r1, r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69d9      	ldr	r1, [r3, #28]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	02008000 	.word	0x02008000

08005c0c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e021      	b.n	8005c62 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2224      	movs	r2, #36	; 0x24
 8005c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f821 	bl	8005c7e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	813b      	strh	r3, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	f040 80f9 	bne.w	8005eae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_I2C_Mem_Write+0x34>
 8005cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0ed      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2C_Mem_Write+0x4e>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e0e6      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cea:	f7fe fc47 	bl	800457c <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2319      	movs	r3, #25
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fad1 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0d1      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2221      	movs	r2, #33	; 0x21
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2240      	movs	r2, #64	; 0x40
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a3a      	ldr	r2, [r7, #32]
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d34:	88f8      	ldrh	r0, [r7, #6]
 8005d36:	893a      	ldrh	r2, [r7, #8]
 8005d38:	8979      	ldrh	r1, [r7, #10]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4603      	mov	r3, r0
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f9e1 	bl	800610c <I2C_RequestMemoryWrite>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0a9      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2bff      	cmp	r3, #255	; 0xff
 8005d64:	d90e      	bls.n	8005d84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	22ff      	movs	r2, #255	; 0xff
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	8979      	ldrh	r1, [r7, #10]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fbb3 	bl	80064e8 <I2C_TransferConfig>
 8005d82:	e00f      	b.n	8005da4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	8979      	ldrh	r1, [r7, #10]
 8005d96:	2300      	movs	r3, #0
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fba2 	bl	80064e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fabb 	bl	8006324 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e07b      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d034      	beq.n	8005e5c <HAL_I2C_Mem_Write+0x1c8>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d130      	bne.n	8005e5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	2200      	movs	r2, #0
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 fa4d 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e04d      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2bff      	cmp	r3, #255	; 0xff
 8005e1c:	d90e      	bls.n	8005e3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	22ff      	movs	r2, #255	; 0xff
 8005e22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	8979      	ldrh	r1, [r7, #10]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fb57 	bl	80064e8 <I2C_TransferConfig>
 8005e3a:	e00f      	b.n	8005e5c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	8979      	ldrh	r1, [r7, #10]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fb46 	bl	80064e8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d19e      	bne.n	8005da4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fa9a 	bl	80063a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e01a      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6859      	ldr	r1, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <HAL_I2C_Mem_Write+0x224>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	fe00e800 	.word	0xfe00e800

08005ebc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	817b      	strh	r3, [r7, #10]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	813b      	strh	r3, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	f040 80fd 	bne.w	80060de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_I2C_Mem_Read+0x34>
 8005eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0f1      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_I2C_Mem_Read+0x4e>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e0ea      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f12:	f7fe fb33 	bl	800457c <HAL_GetTick>
 8005f16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	2319      	movs	r3, #25
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f9bd 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0d5      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2222      	movs	r2, #34	; 0x22
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2240      	movs	r2, #64	; 0x40
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a3a      	ldr	r2, [r7, #32]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f5c:	88f8      	ldrh	r0, [r7, #6]
 8005f5e:	893a      	ldrh	r2, [r7, #8]
 8005f60:	8979      	ldrh	r1, [r7, #10]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f921 	bl	80061b4 <I2C_RequestMemoryRead>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0ad      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2bff      	cmp	r3, #255	; 0xff
 8005f8c:	d90e      	bls.n	8005fac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	22ff      	movs	r2, #255	; 0xff
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	8979      	ldrh	r1, [r7, #10]
 8005f9c:	4b52      	ldr	r3, [pc, #328]	; (80060e8 <HAL_I2C_Mem_Read+0x22c>)
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fa9f 	bl	80064e8 <I2C_TransferConfig>
 8005faa:	e00f      	b.n	8005fcc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	8979      	ldrh	r1, [r7, #10]
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <HAL_I2C_Mem_Read+0x22c>)
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fa8e 	bl	80064e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2104      	movs	r1, #4
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f964 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07c      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d034      	beq.n	800608c <HAL_I2C_Mem_Read+0x1d0>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d130      	bne.n	800608c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	2200      	movs	r2, #0
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f935 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e04d      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	2bff      	cmp	r3, #255	; 0xff
 800604c:	d90e      	bls.n	800606c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	22ff      	movs	r2, #255	; 0xff
 8006052:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006058:	b2da      	uxtb	r2, r3
 800605a:	8979      	ldrh	r1, [r7, #10]
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fa3f 	bl	80064e8 <I2C_TransferConfig>
 800606a:	e00f      	b.n	800608c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	b2da      	uxtb	r2, r3
 800607c:	8979      	ldrh	r1, [r7, #10]
 800607e:	2300      	movs	r3, #0
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fa2e 	bl	80064e8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d19a      	bne.n	8005fcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f982 	bl	80063a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e01a      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2220      	movs	r2, #32
 80060b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6859      	ldr	r1, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_I2C_Mem_Read+0x230>)
 80060be:	400b      	ands	r3, r1
 80060c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	80002400 	.word	0x80002400
 80060ec:	fe00e800 	.word	0xfe00e800

080060f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060fe:	b2db      	uxtb	r3, r3
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	461a      	mov	r2, r3
 800611a:	4603      	mov	r3, r0
 800611c:	817b      	strh	r3, [r7, #10]
 800611e:	460b      	mov	r3, r1
 8006120:	813b      	strh	r3, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	8979      	ldrh	r1, [r7, #10]
 800612c:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <I2C_RequestMemoryWrite+0xa4>)
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f9d7 	bl	80064e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	69b9      	ldr	r1, [r7, #24]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f8f0 	bl	8006324 <I2C_WaitOnTXISFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e02c      	b.n	80061a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d105      	bne.n	8006160 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006154:	893b      	ldrh	r3, [r7, #8]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	629a      	str	r2, [r3, #40]	; 0x28
 800615e:	e015      	b.n	800618c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006160:	893b      	ldrh	r3, [r7, #8]
 8006162:	0a1b      	lsrs	r3, r3, #8
 8006164:	b29b      	uxth	r3, r3
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f8d6 	bl	8006324 <I2C_WaitOnTXISFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e012      	b.n	80061a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006182:	893b      	ldrh	r3, [r7, #8]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2200      	movs	r2, #0
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f884 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	80002000 	.word	0x80002000

080061b4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	817b      	strh	r3, [r7, #10]
 80061c6:	460b      	mov	r3, r1
 80061c8:	813b      	strh	r3, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	8979      	ldrh	r1, [r7, #10]
 80061d4:	4b20      	ldr	r3, [pc, #128]	; (8006258 <I2C_RequestMemoryRead+0xa4>)
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f984 	bl	80064e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	69b9      	ldr	r1, [r7, #24]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f89d 	bl	8006324 <I2C_WaitOnTXISFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e02c      	b.n	800624e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d105      	bne.n	8006206 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061fa:	893b      	ldrh	r3, [r7, #8]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28
 8006204:	e015      	b.n	8006232 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006206:	893b      	ldrh	r3, [r7, #8]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b29b      	uxth	r3, r3
 800620c:	b2da      	uxtb	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	69b9      	ldr	r1, [r7, #24]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f883 	bl	8006324 <I2C_WaitOnTXISFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e012      	b.n	800624e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2200      	movs	r2, #0
 800623a:	2140      	movs	r1, #64	; 0x40
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f831 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	80002000 	.word	0x80002000

0800625c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d103      	bne.n	800627a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b01      	cmp	r3, #1
 8006286:	d007      	beq.n	8006298 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	619a      	str	r2, [r3, #24]
  }
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062b4:	e022      	b.n	80062fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d01e      	beq.n	80062fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fe f95d 	bl	800457c <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d113      	bne.n	80062fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d8:	f043 0220 	orr.w	r2, r3, #32
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e00f      	b.n	800631c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	429a      	cmp	r2, r3
 8006318:	d0cd      	beq.n	80062b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006330:	e02c      	b.n	800638c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f870 	bl	800641c <I2C_IsAcknowledgeFailed>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e02a      	b.n	800639c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d01e      	beq.n	800638c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634e:	f7fe f915 	bl	800457c <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d302      	bcc.n	8006364 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d113      	bne.n	800638c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e007      	b.n	800639c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d1cb      	bne.n	8006332 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063b0:	e028      	b.n	8006404 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f830 	bl	800641c <I2C_IsAcknowledgeFailed>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e026      	b.n	8006414 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c6:	f7fe f8d9 	bl	800457c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d302      	bcc.n	80063dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d113      	bne.n	8006404 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e007      	b.n	8006414 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b20      	cmp	r3, #32
 8006410:	d1cf      	bne.n	80063b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b10      	cmp	r3, #16
 8006434:	d151      	bne.n	80064da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006436:	e022      	b.n	800647e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d01e      	beq.n	800647e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006440:	f7fe f89c 	bl	800457c <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	429a      	cmp	r2, r3
 800644e:	d302      	bcc.n	8006456 <I2C_IsAcknowledgeFailed+0x3a>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d113      	bne.n	800647e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e02e      	b.n	80064dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b20      	cmp	r3, #32
 800648a:	d1d5      	bne.n	8006438 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2210      	movs	r2, #16
 8006492:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2220      	movs	r2, #32
 800649a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff fedd 	bl	800625c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6859      	ldr	r1, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80064ae:	400b      	ands	r3, r1
 80064b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	fe00e800 	.word	0xfe00e800

080064e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	817b      	strh	r3, [r7, #10]
 80064f6:	4613      	mov	r3, r2
 80064f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	0d5b      	lsrs	r3, r3, #21
 8006504:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006508:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <I2C_TransferConfig+0x58>)
 800650a:	430b      	orrs	r3, r1
 800650c:	43db      	mvns	r3, r3
 800650e:	ea02 0103 	and.w	r1, r2, r3
 8006512:	897b      	ldrh	r3, [r7, #10]
 8006514:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006518:	7a7b      	ldrb	r3, [r7, #9]
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	431a      	orrs	r2, r3
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	431a      	orrs	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	03ff63ff 	.word	0x03ff63ff

08006544 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a04      	ldr	r2, [pc, #16]	; (8006560 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800654e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006552:	6013      	str	r3, [r2, #0]
}
 8006554:	bf00      	nop
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40007000 	.word	0x40007000

08006564 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_PWR_PVD_IRQHandler+0x20>)
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006574:	f7fb fe4c 	bl	8002210 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <HAL_PWR_PVD_IRQHandler+0x20>)
 800657a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800657e:	615a      	str	r2, [r3, #20]
  }
}
 8006580:	bf00      	nop
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40013c00 	.word	0x40013c00

08006588 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <HAL_PWREx_EnableOverDrive+0x98>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	4a22      	ldr	r2, [pc, #136]	; (8006620 <HAL_PWREx_EnableOverDrive+0x98>)
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659c:	6413      	str	r3, [r2, #64]	; 0x40
 800659e:	4b20      	ldr	r3, [pc, #128]	; (8006620 <HAL_PWREx_EnableOverDrive+0x98>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065aa:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065b6:	f7fd ffe1 	bl	800457c <HAL_GetTick>
 80065ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065bc:	e009      	b.n	80065d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065be:	f7fd ffdd 	bl	800457c <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065cc:	d901      	bls.n	80065d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e022      	b.n	8006618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065d2:	4b14      	ldr	r3, [pc, #80]	; (8006624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065de:	d1ee      	bne.n	80065be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a0f      	ldr	r2, [pc, #60]	; (8006624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065ec:	f7fd ffc6 	bl	800457c <HAL_GetTick>
 80065f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065f2:	e009      	b.n	8006608 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065f4:	f7fd ffc2 	bl	800457c <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006602:	d901      	bls.n	8006608 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e007      	b.n	8006618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_PWREx_EnableOverDrive+0x9c>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006614:	d1ee      	bne.n	80065f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40023800 	.word	0x40023800
 8006624:	40007000 	.word	0x40007000

08006628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006630:	2300      	movs	r3, #0
 8006632:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e291      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 8087 	beq.w	800675a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800664c:	4b96      	ldr	r3, [pc, #600]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b04      	cmp	r3, #4
 8006656:	d00c      	beq.n	8006672 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006658:	4b93      	ldr	r3, [pc, #588]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b08      	cmp	r3, #8
 8006662:	d112      	bne.n	800668a <HAL_RCC_OscConfig+0x62>
 8006664:	4b90      	ldr	r3, [pc, #576]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006670:	d10b      	bne.n	800668a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006672:	4b8d      	ldr	r3, [pc, #564]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d06c      	beq.n	8006758 <HAL_RCC_OscConfig+0x130>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d168      	bne.n	8006758 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e26b      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x7a>
 8006694:	4b84      	ldr	r3, [pc, #528]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a83      	ldr	r2, [pc, #524]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 800669a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e02e      	b.n	8006700 <HAL_RCC_OscConfig+0xd8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x9c>
 80066aa:	4b7f      	ldr	r3, [pc, #508]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a7e      	ldr	r2, [pc, #504]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4b7c      	ldr	r3, [pc, #496]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a7b      	ldr	r2, [pc, #492]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e01d      	b.n	8006700 <HAL_RCC_OscConfig+0xd8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0xc0>
 80066ce:	4b76      	ldr	r3, [pc, #472]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b73      	ldr	r3, [pc, #460]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a72      	ldr	r2, [pc, #456]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0xd8>
 80066e8:	4b6f      	ldr	r3, [pc, #444]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a6e      	ldr	r2, [pc, #440]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	4b6c      	ldr	r3, [pc, #432]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a6b      	ldr	r2, [pc, #428]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80066fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d013      	beq.n	8006730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fd ff38 	bl	800457c <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006710:	f7fd ff34 	bl	800457c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b64      	cmp	r3, #100	; 0x64
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e21f      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006722:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0xe8>
 800672e:	e014      	b.n	800675a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fd ff24 	bl	800457c <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006738:	f7fd ff20 	bl	800457c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	; 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e20b      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674a:	4b57      	ldr	r3, [pc, #348]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x110>
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d069      	beq.n	800683a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006766:	4b50      	ldr	r3, [pc, #320]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 030c 	and.w	r3, r3, #12
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006772:	4b4d      	ldr	r3, [pc, #308]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b08      	cmp	r3, #8
 800677c:	d11c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x190>
 800677e:	4b4a      	ldr	r3, [pc, #296]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d116      	bne.n	80067b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800678a:	4b47      	ldr	r3, [pc, #284]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_RCC_OscConfig+0x17a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d001      	beq.n	80067a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e1df      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a2:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	493d      	ldr	r1, [pc, #244]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067b6:	e040      	b.n	800683a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d023      	beq.n	8006808 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c0:	4b39      	ldr	r3, [pc, #228]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a38      	ldr	r2, [pc, #224]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fd fed6 	bl	800457c <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d4:	f7fd fed2 	bl	800457c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e1bd      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e6:	4b30      	ldr	r3, [pc, #192]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f2:	4b2d      	ldr	r3, [pc, #180]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	4929      	ldr	r1, [pc, #164]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006802:	4313      	orrs	r3, r2
 8006804:	600b      	str	r3, [r1, #0]
 8006806:	e018      	b.n	800683a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006808:	4b27      	ldr	r3, [pc, #156]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 800680e:	f023 0301 	bic.w	r3, r3, #1
 8006812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fd feb2 	bl	800457c <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681c:	f7fd feae 	bl	800457c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e199      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682e:	4b1e      	ldr	r3, [pc, #120]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d038      	beq.n	80068b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d019      	beq.n	8006882 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685a:	f7fd fe8f 	bl	800457c <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006862:	f7fd fe8b 	bl	800457c <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e176      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x23a>
 8006880:	e01a      	b.n	80068b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006886:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <HAL_RCC_OscConfig+0x280>)
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688e:	f7fd fe75 	bl	800457c <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006894:	e00a      	b.n	80068ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006896:	f7fd fe71 	bl	800457c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d903      	bls.n	80068ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e15c      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
 80068a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ac:	4b91      	ldr	r3, [pc, #580]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 80068ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1ee      	bne.n	8006896 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80a4 	beq.w	8006a0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c6:	4b8b      	ldr	r3, [pc, #556]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10d      	bne.n	80068ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d2:	4b88      	ldr	r3, [pc, #544]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	4a87      	ldr	r2, [pc, #540]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 80068d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068dc:	6413      	str	r3, [r2, #64]	; 0x40
 80068de:	4b85      	ldr	r3, [pc, #532]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e6:	60bb      	str	r3, [r7, #8]
 80068e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ee:	4b82      	ldr	r3, [pc, #520]	; (8006af8 <HAL_RCC_OscConfig+0x4d0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d118      	bne.n	800692c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80068fa:	4b7f      	ldr	r3, [pc, #508]	; (8006af8 <HAL_RCC_OscConfig+0x4d0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a7e      	ldr	r2, [pc, #504]	; (8006af8 <HAL_RCC_OscConfig+0x4d0>)
 8006900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006906:	f7fd fe39 	bl	800457c <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690e:	f7fd fe35 	bl	800457c <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b64      	cmp	r3, #100	; 0x64
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e120      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006920:	4b75      	ldr	r3, [pc, #468]	; (8006af8 <HAL_RCC_OscConfig+0x4d0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f0      	beq.n	800690e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d106      	bne.n	8006942 <HAL_RCC_OscConfig+0x31a>
 8006934:	4b6f      	ldr	r3, [pc, #444]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006938:	4a6e      	ldr	r2, [pc, #440]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	6713      	str	r3, [r2, #112]	; 0x70
 8006940:	e02d      	b.n	800699e <HAL_RCC_OscConfig+0x376>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10c      	bne.n	8006964 <HAL_RCC_OscConfig+0x33c>
 800694a:	4b6a      	ldr	r3, [pc, #424]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694e:	4a69      	ldr	r2, [pc, #420]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006950:	f023 0301 	bic.w	r3, r3, #1
 8006954:	6713      	str	r3, [r2, #112]	; 0x70
 8006956:	4b67      	ldr	r3, [pc, #412]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	4a66      	ldr	r2, [pc, #408]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 800695c:	f023 0304 	bic.w	r3, r3, #4
 8006960:	6713      	str	r3, [r2, #112]	; 0x70
 8006962:	e01c      	b.n	800699e <HAL_RCC_OscConfig+0x376>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b05      	cmp	r3, #5
 800696a:	d10c      	bne.n	8006986 <HAL_RCC_OscConfig+0x35e>
 800696c:	4b61      	ldr	r3, [pc, #388]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006970:	4a60      	ldr	r2, [pc, #384]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006972:	f043 0304 	orr.w	r3, r3, #4
 8006976:	6713      	str	r3, [r2, #112]	; 0x70
 8006978:	4b5e      	ldr	r3, [pc, #376]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	4a5d      	ldr	r2, [pc, #372]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	6713      	str	r3, [r2, #112]	; 0x70
 8006984:	e00b      	b.n	800699e <HAL_RCC_OscConfig+0x376>
 8006986:	4b5b      	ldr	r3, [pc, #364]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a5a      	ldr	r2, [pc, #360]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	6713      	str	r3, [r2, #112]	; 0x70
 8006992:	4b58      	ldr	r3, [pc, #352]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	4a57      	ldr	r2, [pc, #348]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d015      	beq.n	80069d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a6:	f7fd fde9 	bl	800457c <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ac:	e00a      	b.n	80069c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ae:	f7fd fde5 	bl	800457c <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069bc:	4293      	cmp	r3, r2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e0ce      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c4:	4b4b      	ldr	r3, [pc, #300]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 80069c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0ee      	beq.n	80069ae <HAL_RCC_OscConfig+0x386>
 80069d0:	e014      	b.n	80069fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d2:	f7fd fdd3 	bl	800457c <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d8:	e00a      	b.n	80069f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069da:	f7fd fdcf 	bl	800457c <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e0b8      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f0:	4b40      	ldr	r3, [pc, #256]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1ee      	bne.n	80069da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a02:	4b3c      	ldr	r3, [pc, #240]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	4a3b      	ldr	r2, [pc, #236]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80a4 	beq.w	8006b60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a18:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 030c 	and.w	r3, r3, #12
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d06b      	beq.n	8006afc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d149      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2c:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a30      	ldr	r2, [pc, #192]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fd fda0 	bl	800457c <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fd fd9c 	bl	800457c <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e087      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	4b28      	ldr	r3, [pc, #160]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	019b      	lsls	r3, r3, #6
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	3b01      	subs	r3, #1
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	061b      	lsls	r3, r3, #24
 8006a82:	4313      	orrs	r3, r2
 8006a84:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fd fd70 	bl	800457c <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fd fd6c 	bl	800457c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e057      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x478>
 8006abe:	e04f      	b.n	8006b60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fd fd56 	bl	800457c <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad4:	f7fd fd52 	bl	800457c <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e03d      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae6:	4b03      	ldr	r3, [pc, #12]	; (8006af4 <HAL_RCC_OscConfig+0x4cc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f0      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x4ac>
 8006af2:	e035      	b.n	8006b60 <HAL_RCC_OscConfig+0x538>
 8006af4:	40023800 	.word	0x40023800
 8006af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006afc:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <HAL_RCC_OscConfig+0x544>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d028      	beq.n	8006b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d121      	bne.n	8006b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d11a      	bne.n	8006b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d111      	bne.n	8006b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	3b01      	subs	r3, #1
 8006b46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800

08006b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0d0      	b.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b88:	4b6a      	ldr	r3, [pc, #424]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d910      	bls.n	8006bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b96:	4b67      	ldr	r3, [pc, #412]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f023 020f 	bic.w	r2, r3, #15
 8006b9e:	4965      	ldr	r1, [pc, #404]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba6:	4b63      	ldr	r3, [pc, #396]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0b8      	b.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d020      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bd0:	4b59      	ldr	r3, [pc, #356]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4a58      	ldr	r2, [pc, #352]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006be8:	4b53      	ldr	r3, [pc, #332]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4a52      	ldr	r2, [pc, #328]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf4:	4b50      	ldr	r3, [pc, #320]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	494d      	ldr	r1, [pc, #308]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d040      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1a:	4b47      	ldr	r3, [pc, #284]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d115      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e07f      	b.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d107      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c32:	4b41      	ldr	r3, [pc, #260]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e073      	b.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c42:	4b3d      	ldr	r3, [pc, #244]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e06b      	b.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c52:	4b39      	ldr	r3, [pc, #228]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f023 0203 	bic.w	r2, r3, #3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	4936      	ldr	r1, [pc, #216]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c64:	f7fd fc8a 	bl	800457c <HAL_GetTick>
 8006c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c6c:	f7fd fc86 	bl	800457c <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e053      	b.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c82:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 020c 	and.w	r2, r3, #12
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d1eb      	bne.n	8006c6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d210      	bcs.n	8006cc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca2:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 020f 	bic.w	r2, r3, #15
 8006caa:	4922      	ldr	r1, [pc, #136]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b20      	ldr	r3, [pc, #128]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e032      	b.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd0:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	4916      	ldr	r1, [pc, #88]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	490e      	ldr	r1, [pc, #56]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d02:	f000 f821 	bl	8006d48 <HAL_RCC_GetSysClockFreq>
 8006d06:	4601      	mov	r1, r0
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <HAL_RCC_ClockConfig+0x1cc>)
 8006d14:	5cd3      	ldrb	r3, [r2, r3]
 8006d16:	fa21 f303 	lsr.w	r3, r1, r3
 8006d1a:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <HAL_RCC_ClockConfig+0x1d0>)
 8006d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <HAL_RCC_ClockConfig+0x1d4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fd fbe6 	bl	80044f4 <HAL_InitTick>

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40023c00 	.word	0x40023c00
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	0800c060 	.word	0x0800c060
 8006d40:	20000034 	.word	0x20000034
 8006d44:	20000038 	.word	0x20000038

08006d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	2300      	movs	r3, #0
 8006d58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d5e:	4b50      	ldr	r3, [pc, #320]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d007      	beq.n	8006d7a <HAL_RCC_GetSysClockFreq+0x32>
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d008      	beq.n	8006d80 <HAL_RCC_GetSysClockFreq+0x38>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 808d 	bne.w	8006e8e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d74:	4b4b      	ldr	r3, [pc, #300]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d76:	60bb      	str	r3, [r7, #8]
      break;
 8006d78:	e08c      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d7a:	4b4b      	ldr	r3, [pc, #300]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d7c:	60bb      	str	r3, [r7, #8]
      break;
 8006d7e:	e089      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d80:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d88:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d8a:	4b45      	ldr	r3, [pc, #276]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d023      	beq.n	8006dde <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d96:	4b42      	ldr	r3, [pc, #264]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	099b      	lsrs	r3, r3, #6
 8006d9c:	f04f 0400 	mov.w	r4, #0
 8006da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	ea03 0501 	and.w	r5, r3, r1
 8006dac:	ea04 0602 	and.w	r6, r4, r2
 8006db0:	4a3d      	ldr	r2, [pc, #244]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006db2:	fb02 f106 	mul.w	r1, r2, r6
 8006db6:	2200      	movs	r2, #0
 8006db8:	fb02 f205 	mul.w	r2, r2, r5
 8006dbc:	440a      	add	r2, r1
 8006dbe:	493a      	ldr	r1, [pc, #232]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dc0:	fba5 0101 	umull	r0, r1, r5, r1
 8006dc4:	1853      	adds	r3, r2, r1
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f04f 0400 	mov.w	r4, #0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4623      	mov	r3, r4
 8006dd2:	f7f9 ff29 	bl	8000c28 <__aeabi_uldivmod>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	460c      	mov	r4, r1
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e049      	b.n	8006e72 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dde:	4b30      	ldr	r3, [pc, #192]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	f04f 0400 	mov.w	r4, #0
 8006de8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	ea03 0501 	and.w	r5, r3, r1
 8006df4:	ea04 0602 	and.w	r6, r4, r2
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4632      	mov	r2, r6
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	f04f 0400 	mov.w	r4, #0
 8006e04:	0154      	lsls	r4, r2, #5
 8006e06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e0a:	014b      	lsls	r3, r1, #5
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4622      	mov	r2, r4
 8006e10:	1b49      	subs	r1, r1, r5
 8006e12:	eb62 0206 	sbc.w	r2, r2, r6
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	f04f 0400 	mov.w	r4, #0
 8006e1e:	0194      	lsls	r4, r2, #6
 8006e20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e24:	018b      	lsls	r3, r1, #6
 8006e26:	1a5b      	subs	r3, r3, r1
 8006e28:	eb64 0402 	sbc.w	r4, r4, r2
 8006e2c:	f04f 0100 	mov.w	r1, #0
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	00e2      	lsls	r2, r4, #3
 8006e36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e3a:	00d9      	lsls	r1, r3, #3
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4614      	mov	r4, r2
 8006e40:	195b      	adds	r3, r3, r5
 8006e42:	eb44 0406 	adc.w	r4, r4, r6
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	02a2      	lsls	r2, r4, #10
 8006e50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e54:	0299      	lsls	r1, r3, #10
 8006e56:	460b      	mov	r3, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	461a      	mov	r2, r3
 8006e66:	4623      	mov	r3, r4
 8006e68:	f7f9 fede 	bl	8000c28 <__aeabi_uldivmod>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e72:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	0c1b      	lsrs	r3, r3, #16
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8a:	60bb      	str	r3, [r7, #8]
      break;
 8006e8c:	e002      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006e90:	60bb      	str	r3, [r7, #8]
      break;
 8006e92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e94:	68bb      	ldr	r3, [r7, #8]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	00f42400 	.word	0x00f42400
 8006ea8:	017d7840 	.word	0x017d7840

08006eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d012      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ed4:	4b69      	ldr	r3, [pc, #420]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4a68      	ldr	r2, [pc, #416]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ede:	6093      	str	r3, [r2, #8]
 8006ee0:	4b66      	ldr	r3, [pc, #408]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	4964      	ldr	r1, [pc, #400]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d017      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f06:	4b5d      	ldr	r3, [pc, #372]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f14:	4959      	ldr	r1, [pc, #356]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f24:	d101      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f26:	2301      	movs	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d017      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f42:	4b4e      	ldr	r3, [pc, #312]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	494a      	ldr	r1, [pc, #296]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f60:	d101      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 808b 	beq.w	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f90:	4b3a      	ldr	r3, [pc, #232]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	4a39      	ldr	r2, [pc, #228]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f9c:	4b37      	ldr	r3, [pc, #220]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	60bb      	str	r3, [r7, #8]
 8006fa6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fa8:	4b35      	ldr	r3, [pc, #212]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a34      	ldr	r2, [pc, #208]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb4:	f7fd fae2 	bl	800457c <HAL_GetTick>
 8006fb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fba:	e008      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fbc:	f7fd fade 	bl	800457c <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b64      	cmp	r3, #100	; 0x64
 8006fc8:	d901      	bls.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e357      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fce:	4b2c      	ldr	r3, [pc, #176]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0f0      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fda:	4b28      	ldr	r3, [pc, #160]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d035      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d02e      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ff8:	4b20      	ldr	r3, [pc, #128]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007002:	4b1e      	ldr	r3, [pc, #120]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	4a1d      	ldr	r2, [pc, #116]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800700c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800700e:	4b1b      	ldr	r3, [pc, #108]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007012:	4a1a      	ldr	r2, [pc, #104]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007018:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800701a:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007020:	4b16      	ldr	r3, [pc, #88]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b01      	cmp	r3, #1
 800702a:	d114      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fd faa6 	bl	800457c <HAL_GetTick>
 8007030:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007032:	e00a      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007034:	f7fd faa2 	bl	800457c <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007042:	4293      	cmp	r3, r2
 8007044:	d901      	bls.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e319      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0ee      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007062:	d111      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007072:	400b      	ands	r3, r1
 8007074:	4901      	ldr	r1, [pc, #4]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007076:	4313      	orrs	r3, r2
 8007078:	608b      	str	r3, [r1, #8]
 800707a:	e00b      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800707c:	40023800 	.word	0x40023800
 8007080:	40007000 	.word	0x40007000
 8007084:	0ffffcff 	.word	0x0ffffcff
 8007088:	4bb1      	ldr	r3, [pc, #708]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	4ab0      	ldr	r2, [pc, #704]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800708e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007092:	6093      	str	r3, [r2, #8]
 8007094:	4bae      	ldr	r3, [pc, #696]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a0:	49ab      	ldr	r1, [pc, #684]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d010      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070b2:	4ba7      	ldr	r3, [pc, #668]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b8:	4aa5      	ldr	r2, [pc, #660]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070c2:	4ba3      	ldr	r3, [pc, #652]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	49a0      	ldr	r1, [pc, #640]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070e0:	4b9b      	ldr	r3, [pc, #620]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ee:	4998      	ldr	r1, [pc, #608]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007102:	4b93      	ldr	r3, [pc, #588]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007110:	498f      	ldr	r1, [pc, #572]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007124:	4b8a      	ldr	r3, [pc, #552]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007132:	4987      	ldr	r1, [pc, #540]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007146:	4b82      	ldr	r3, [pc, #520]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007154:	497e      	ldr	r1, [pc, #504]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007168:	4b79      	ldr	r3, [pc, #484]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716e:	f023 0203 	bic.w	r2, r3, #3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	4976      	ldr	r1, [pc, #472]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800718a:	4b71      	ldr	r3, [pc, #452]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007190:	f023 020c 	bic.w	r2, r3, #12
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007198:	496d      	ldr	r1, [pc, #436]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071ac:	4b68      	ldr	r3, [pc, #416]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	4965      	ldr	r1, [pc, #404]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071ce:	4b60      	ldr	r3, [pc, #384]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071dc:	495c      	ldr	r1, [pc, #368]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071f0:	4b57      	ldr	r3, [pc, #348]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	4954      	ldr	r1, [pc, #336]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007200:	4313      	orrs	r3, r2
 8007202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007212:	4b4f      	ldr	r3, [pc, #316]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007220:	494b      	ldr	r1, [pc, #300]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007234:	4b46      	ldr	r3, [pc, #280]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007242:	4943      	ldr	r1, [pc, #268]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007256:	4b3e      	ldr	r3, [pc, #248]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007264:	493a      	ldr	r1, [pc, #232]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007278:	4b35      	ldr	r3, [pc, #212]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800727a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007286:	4932      	ldr	r1, [pc, #200]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d011      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800729a:	4b2d      	ldr	r3, [pc, #180]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800729c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a8:	4929      	ldr	r1, [pc, #164]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072b8:	d101      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072ba:	2301      	movs	r3, #1
 80072bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072da:	4b1d      	ldr	r3, [pc, #116]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e8:	4919      	ldr	r1, [pc, #100]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072fc:	4b14      	ldr	r3, [pc, #80]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007302:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800730c:	4910      	ldr	r1, [pc, #64]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800730e:	4313      	orrs	r3, r2
 8007310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d006      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 80d9 	beq.w	80074da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a08      	ldr	r2, [pc, #32]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800732e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007334:	f7fd f922 	bl	800457c <HAL_GetTick>
 8007338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800733a:	e00b      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800733c:	f7fd f91e 	bl	800457c <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b64      	cmp	r3, #100	; 0x64
 8007348:	d904      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e197      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007354:	4b6c      	ldr	r3, [pc, #432]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1ed      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d021      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11d      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007374:	4b64      	ldr	r3, [pc, #400]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007382:	4b61      	ldr	r3, [pc, #388]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007388:	0e1b      	lsrs	r3, r3, #24
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	019a      	lsls	r2, r3, #6
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	431a      	orrs	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	061b      	lsls	r3, r3, #24
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	071b      	lsls	r3, r3, #28
 80073a8:	4957      	ldr	r1, [pc, #348]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c4:	d00a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d02e      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073da:	d129      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073dc:	4b4a      	ldr	r3, [pc, #296]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e2:	0c1b      	lsrs	r3, r3, #16
 80073e4:	f003 0303 	and.w	r3, r3, #3
 80073e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073ea:	4b47      	ldr	r3, [pc, #284]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f0:	0f1b      	lsrs	r3, r3, #28
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	019a      	lsls	r2, r3, #6
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	041b      	lsls	r3, r3, #16
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	431a      	orrs	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	071b      	lsls	r3, r3, #28
 8007410:	493d      	ldr	r1, [pc, #244]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007418:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800741e:	f023 021f 	bic.w	r2, r3, #31
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	3b01      	subs	r3, #1
 8007428:	4937      	ldr	r1, [pc, #220]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01d      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800743c:	4b32      	ldr	r3, [pc, #200]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800743e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007442:	0e1b      	lsrs	r3, r3, #24
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800744a:	4b2f      	ldr	r3, [pc, #188]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800744c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007450:	0f1b      	lsrs	r3, r3, #28
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	019a      	lsls	r2, r3, #6
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	431a      	orrs	r2, r3
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	431a      	orrs	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	071b      	lsls	r3, r3, #28
 8007470:	4925      	ldr	r1, [pc, #148]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d011      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	019a      	lsls	r2, r3, #6
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	061b      	lsls	r3, r3, #24
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	071b      	lsls	r3, r3, #28
 80074a0:	4919      	ldr	r1, [pc, #100]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074a8:	4b17      	ldr	r3, [pc, #92]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a16      	ldr	r2, [pc, #88]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074b4:	f7fd f862 	bl	800457c <HAL_GetTick>
 80074b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074bc:	f7fd f85e 	bl	800457c <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b64      	cmp	r3, #100	; 0x64
 80074c8:	d901      	bls.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e0d7      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ce:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0f0      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	f040 80cd 	bne.w	800767c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074e2:	4b09      	ldr	r3, [pc, #36]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a08      	ldr	r2, [pc, #32]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ee:	f7fd f845 	bl	800457c <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074f4:	e00a      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074f6:	f7fd f841 	bl	800457c <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b64      	cmp	r3, #100	; 0x64
 8007502:	d903      	bls.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e0ba      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007508:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800750c:	4b5e      	ldr	r3, [pc, #376]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007518:	d0ed      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007536:	2b00      	cmp	r3, #0
 8007538:	d02e      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d12a      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007542:	4b51      	ldr	r3, [pc, #324]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007550:	4b4d      	ldr	r3, [pc, #308]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007556:	0f1b      	lsrs	r3, r3, #28
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	019a      	lsls	r2, r3, #6
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	061b      	lsls	r3, r3, #24
 8007570:	431a      	orrs	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	071b      	lsls	r3, r3, #28
 8007576:	4944      	ldr	r1, [pc, #272]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800757e:	4b42      	ldr	r3, [pc, #264]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007584:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	3b01      	subs	r3, #1
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	493d      	ldr	r1, [pc, #244]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d022      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ac:	d11d      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075ae:	4b36      	ldr	r3, [pc, #216]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b4:	0e1b      	lsrs	r3, r3, #24
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075bc:	4b32      	ldr	r3, [pc, #200]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	0f1b      	lsrs	r3, r3, #28
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	019a      	lsls	r2, r3, #6
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	041b      	lsls	r3, r3, #16
 80075d6:	431a      	orrs	r2, r3
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	061b      	lsls	r3, r3, #24
 80075dc:	431a      	orrs	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	071b      	lsls	r3, r3, #28
 80075e2:	4929      	ldr	r1, [pc, #164]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d028      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075f6:	4b24      	ldr	r3, [pc, #144]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fc:	0e1b      	lsrs	r3, r3, #24
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007604:	4b20      	ldr	r3, [pc, #128]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760a:	0c1b      	lsrs	r3, r3, #16
 800760c:	f003 0303 	and.w	r3, r3, #3
 8007610:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	019a      	lsls	r2, r3, #6
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	431a      	orrs	r2, r3
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	061b      	lsls	r3, r3, #24
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	071b      	lsls	r3, r3, #28
 800762a:	4917      	ldr	r1, [pc, #92]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007632:	4b15      	ldr	r3, [pc, #84]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	4911      	ldr	r1, [pc, #68]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007648:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a0e      	ldr	r2, [pc, #56]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800764e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007654:	f7fc ff92 	bl	800457c <HAL_GetTick>
 8007658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800765a:	e008      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800765c:	f7fc ff8e 	bl	800457c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	; 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e007      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800767a:	d1ef      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800

0800768c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e081      	b.n	80077a2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7f5b      	ldrb	r3, [r3, #29]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d105      	bne.n	80076b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fc fc4a 	bl	8003f48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	22ca      	movs	r2, #202	; 0xca
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2253      	movs	r2, #83	; 0x53
 80076c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f898 	bl	8007800 <RTC_EnterInitMode>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	22ff      	movs	r2, #255	; 0xff
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2204      	movs	r2, #4
 80076e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e05c      	b.n	80077a2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6899      	ldr	r1, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4b2e      	ldr	r3, [pc, #184]	; (80077ac <HAL_RTC_Init+0x120>)
 80076f4:	400b      	ands	r3, r1
 80076f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6899      	ldr	r1, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	68d2      	ldr	r2, [r2, #12]
 800771e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6919      	ldr	r1, [r3, #16]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	041a      	lsls	r2, r3, #16
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007742:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10e      	bne.n	8007770 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f82c 	bl	80077b0 <HAL_RTC_WaitForSynchro>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	22ff      	movs	r2, #255	; 0xff
 8007764:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e018      	b.n	80077a2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0208 	bic.w	r2, r2, #8
 800777e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	22ff      	movs	r2, #255	; 0xff
 8007798:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80077a0:	2300      	movs	r3, #0
  }
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	ff8fffbf 	.word	0xff8fffbf

080077b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077cc:	f7fc fed6 	bl	800457c <HAL_GetTick>
 80077d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80077d2:	e009      	b.n	80077e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80077d4:	f7fc fed2 	bl	800457c <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077e2:	d901      	bls.n	80077e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e007      	b.n	80077f8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0ee      	beq.n	80077d4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d119      	bne.n	800784e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f04f 32ff 	mov.w	r2, #4294967295
 8007822:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007824:	f7fc feaa 	bl	800457c <HAL_GetTick>
 8007828:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800782a:	e009      	b.n	8007840 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800782c:	f7fc fea6 	bl	800457c <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800783a:	d901      	bls.n	8007840 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e007      	b.n	8007850 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0ee      	beq.n	800782c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e049      	b.n	80078fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fc fb7c 	bl	8003f7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f000 fb66 	bl	8007f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <HAL_TIM_IC_Start_IT+0x1a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800791e:	b2db      	uxtb	r3, r3
 8007920:	e023      	b.n	800796a <HAL_TIM_IC_Start_IT+0x62>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b04      	cmp	r3, #4
 8007926:	d104      	bne.n	8007932 <HAL_TIM_IC_Start_IT+0x2a>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e01b      	b.n	800796a <HAL_TIM_IC_Start_IT+0x62>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d104      	bne.n	8007942 <HAL_TIM_IC_Start_IT+0x3a>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800793e:	b2db      	uxtb	r3, r3
 8007940:	e013      	b.n	800796a <HAL_TIM_IC_Start_IT+0x62>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b0c      	cmp	r3, #12
 8007946:	d104      	bne.n	8007952 <HAL_TIM_IC_Start_IT+0x4a>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800794e:	b2db      	uxtb	r3, r3
 8007950:	e00b      	b.n	800796a <HAL_TIM_IC_Start_IT+0x62>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b10      	cmp	r3, #16
 8007956:	d104      	bne.n	8007962 <HAL_TIM_IC_Start_IT+0x5a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800795e:	b2db      	uxtb	r3, r3
 8007960:	e003      	b.n	800796a <HAL_TIM_IC_Start_IT+0x62>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007968:	b2db      	uxtb	r3, r3
 800796a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <HAL_TIM_IC_Start_IT+0x74>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007978:	b2db      	uxtb	r3, r3
 800797a:	e013      	b.n	80079a4 <HAL_TIM_IC_Start_IT+0x9c>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d104      	bne.n	800798c <HAL_TIM_IC_Start_IT+0x84>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007988:	b2db      	uxtb	r3, r3
 800798a:	e00b      	b.n	80079a4 <HAL_TIM_IC_Start_IT+0x9c>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b08      	cmp	r3, #8
 8007990:	d104      	bne.n	800799c <HAL_TIM_IC_Start_IT+0x94>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007998:	b2db      	uxtb	r3, r3
 800799a:	e003      	b.n	80079a4 <HAL_TIM_IC_Start_IT+0x9c>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d102      	bne.n	80079b2 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d001      	beq.n	80079b6 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e0dd      	b.n	8007b72 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_IC_Start_IT+0xbe>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079c4:	e023      	b.n	8007a0e <HAL_TIM_IC_Start_IT+0x106>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d104      	bne.n	80079d6 <HAL_TIM_IC_Start_IT+0xce>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d4:	e01b      	b.n	8007a0e <HAL_TIM_IC_Start_IT+0x106>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d104      	bne.n	80079e6 <HAL_TIM_IC_Start_IT+0xde>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e4:	e013      	b.n	8007a0e <HAL_TIM_IC_Start_IT+0x106>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b0c      	cmp	r3, #12
 80079ea:	d104      	bne.n	80079f6 <HAL_TIM_IC_Start_IT+0xee>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079f4:	e00b      	b.n	8007a0e <HAL_TIM_IC_Start_IT+0x106>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b10      	cmp	r3, #16
 80079fa:	d104      	bne.n	8007a06 <HAL_TIM_IC_Start_IT+0xfe>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a04:	e003      	b.n	8007a0e <HAL_TIM_IC_Start_IT+0x106>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_TIM_IC_Start_IT+0x116>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a1c:	e013      	b.n	8007a46 <HAL_TIM_IC_Start_IT+0x13e>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d104      	bne.n	8007a2e <HAL_TIM_IC_Start_IT+0x126>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a2c:	e00b      	b.n	8007a46 <HAL_TIM_IC_Start_IT+0x13e>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d104      	bne.n	8007a3e <HAL_TIM_IC_Start_IT+0x136>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a3c:	e003      	b.n	8007a46 <HAL_TIM_IC_Start_IT+0x13e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2202      	movs	r2, #2
 8007a42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b0c      	cmp	r3, #12
 8007a4a:	d841      	bhi.n	8007ad0 <HAL_TIM_IC_Start_IT+0x1c8>
 8007a4c:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <HAL_TIM_IC_Start_IT+0x14c>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a89 	.word	0x08007a89
 8007a58:	08007ad1 	.word	0x08007ad1
 8007a5c:	08007ad1 	.word	0x08007ad1
 8007a60:	08007ad1 	.word	0x08007ad1
 8007a64:	08007a9b 	.word	0x08007a9b
 8007a68:	08007ad1 	.word	0x08007ad1
 8007a6c:	08007ad1 	.word	0x08007ad1
 8007a70:	08007ad1 	.word	0x08007ad1
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007ad1 	.word	0x08007ad1
 8007a84:	08007abf 	.word	0x08007abf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0202 	orr.w	r2, r2, #2
 8007a96:	60da      	str	r2, [r3, #12]
      break;
 8007a98:	e01b      	b.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0204 	orr.w	r2, r2, #4
 8007aa8:	60da      	str	r2, [r3, #12]
      break;
 8007aaa:	e012      	b.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0208 	orr.w	r2, r2, #8
 8007aba:	60da      	str	r2, [r3, #12]
      break;
 8007abc:	e009      	b.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0210 	orr.w	r2, r2, #16
 8007acc:	60da      	str	r2, [r3, #12]
      break;
 8007ace:	e000      	b.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8007ad0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fc0e 	bl	80082fc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <HAL_TIM_IC_Start_IT+0x274>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d022      	beq.n	8007b30 <HAL_TIM_IC_Start_IT+0x228>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af2:	d01d      	beq.n	8007b30 <HAL_TIM_IC_Start_IT+0x228>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <HAL_TIM_IC_Start_IT+0x278>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d018      	beq.n	8007b30 <HAL_TIM_IC_Start_IT+0x228>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <HAL_TIM_IC_Start_IT+0x27c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d013      	beq.n	8007b30 <HAL_TIM_IC_Start_IT+0x228>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <HAL_TIM_IC_Start_IT+0x280>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00e      	beq.n	8007b30 <HAL_TIM_IC_Start_IT+0x228>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <HAL_TIM_IC_Start_IT+0x284>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d009      	beq.n	8007b30 <HAL_TIM_IC_Start_IT+0x228>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1b      	ldr	r2, [pc, #108]	; (8007b90 <HAL_TIM_IC_Start_IT+0x288>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d004      	beq.n	8007b30 <HAL_TIM_IC_Start_IT+0x228>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1a      	ldr	r2, [pc, #104]	; (8007b94 <HAL_TIM_IC_Start_IT+0x28c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d115      	bne.n	8007b5c <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <HAL_TIM_IC_Start_IT+0x290>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b06      	cmp	r3, #6
 8007b40:	d015      	beq.n	8007b6e <HAL_TIM_IC_Start_IT+0x266>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b48:	d011      	beq.n	8007b6e <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5a:	e008      	b.n	8007b6e <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	e000      	b.n	8007b70 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40000400 	.word	0x40000400
 8007b84:	40000800 	.word	0x40000800
 8007b88:	40000c00 	.word	0x40000c00
 8007b8c:	40010400 	.word	0x40010400
 8007b90:	40014000 	.word	0x40014000
 8007b94:	40001800 	.word	0x40001800
 8007b98:	00010007 	.word	0x00010007

08007b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d122      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d11b      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0202 	mvn.w	r2, #2
 8007bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f9a3 	bl	8007f2a <HAL_TIM_IC_CaptureCallback>
 8007be4:	e005      	b.n	8007bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f995 	bl	8007f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f9a6 	bl	8007f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d122      	bne.n	8007c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d11b      	bne.n	8007c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f06f 0204 	mvn.w	r2, #4
 8007c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f979 	bl	8007f2a <HAL_TIM_IC_CaptureCallback>
 8007c38:	e005      	b.n	8007c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f96b 	bl	8007f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f97c 	bl	8007f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b08      	cmp	r3, #8
 8007c58:	d122      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d11b      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0208 	mvn.w	r2, #8
 8007c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f94f 	bl	8007f2a <HAL_TIM_IC_CaptureCallback>
 8007c8c:	e005      	b.n	8007c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f941 	bl	8007f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f952 	bl	8007f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0310 	and.w	r3, r3, #16
 8007caa:	2b10      	cmp	r3, #16
 8007cac:	d122      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0310 	and.w	r3, r3, #16
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d11b      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0210 	mvn.w	r2, #16
 8007cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2208      	movs	r2, #8
 8007cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f925 	bl	8007f2a <HAL_TIM_IC_CaptureCallback>
 8007ce0:	e005      	b.n	8007cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f917 	bl	8007f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f928 	bl	8007f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0201 	mvn.w	r2, #1
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8f1 	bl	8007f02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2a:	2b80      	cmp	r3, #128	; 0x80
 8007d2c:	d10e      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d38:	2b80      	cmp	r3, #128	; 0x80
 8007d3a:	d107      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fb96 	bl	8008478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d5a:	d10e      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b80      	cmp	r3, #128	; 0x80
 8007d68:	d107      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fb89 	bl	800848c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d84:	2b40      	cmp	r3, #64	; 0x40
 8007d86:	d10e      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d107      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f8d6 	bl	8007f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d10e      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d107      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f06f 0220 	mvn.w	r2, #32
 8007dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fb49 	bl	8008464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e082      	b.n	8007efa <HAL_TIM_IC_ConfigChannel+0x120>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d11b      	bne.n	8007e3a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f000 f949 	bl	80080a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699a      	ldr	r2, [r3, #24]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 020c 	bic.w	r2, r2, #12
 8007e24:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6999      	ldr	r1, [r3, #24]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	619a      	str	r2, [r3, #24]
 8007e38:	e05a      	b.n	8007ef0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d11c      	bne.n	8007e7a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6819      	ldr	r1, [r3, #0]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f000 f99e 	bl	8008190 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e62:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6999      	ldr	r1, [r3, #24]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	021a      	lsls	r2, r3, #8
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	619a      	str	r2, [r3, #24]
 8007e78:	e03a      	b.n	8007ef0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d11b      	bne.n	8007eb8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6819      	ldr	r1, [r3, #0]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f000 f9bb 	bl	800820a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69da      	ldr	r2, [r3, #28]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 020c 	bic.w	r2, r2, #12
 8007ea2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69d9      	ldr	r1, [r3, #28]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	61da      	str	r2, [r3, #28]
 8007eb6:	e01b      	b.n	8007ef0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6819      	ldr	r1, [r3, #0]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f000 f9db 	bl	8008282 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69da      	ldr	r2, [r3, #28]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007eda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	69d9      	ldr	r1, [r3, #28]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	021a      	lsls	r2, r3, #8
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a40      	ldr	r2, [pc, #256]	; (800807c <TIM_Base_SetConfig+0x114>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d013      	beq.n	8007fa8 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f86:	d00f      	beq.n	8007fa8 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a3d      	ldr	r2, [pc, #244]	; (8008080 <TIM_Base_SetConfig+0x118>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00b      	beq.n	8007fa8 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a3c      	ldr	r2, [pc, #240]	; (8008084 <TIM_Base_SetConfig+0x11c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d007      	beq.n	8007fa8 <TIM_Base_SetConfig+0x40>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a3b      	ldr	r2, [pc, #236]	; (8008088 <TIM_Base_SetConfig+0x120>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d003      	beq.n	8007fa8 <TIM_Base_SetConfig+0x40>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a3a      	ldr	r2, [pc, #232]	; (800808c <TIM_Base_SetConfig+0x124>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d108      	bne.n	8007fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a2f      	ldr	r2, [pc, #188]	; (800807c <TIM_Base_SetConfig+0x114>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d02b      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc8:	d027      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2c      	ldr	r2, [pc, #176]	; (8008080 <TIM_Base_SetConfig+0x118>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d023      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2b      	ldr	r2, [pc, #172]	; (8008084 <TIM_Base_SetConfig+0x11c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d01f      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2a      	ldr	r2, [pc, #168]	; (8008088 <TIM_Base_SetConfig+0x120>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01b      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a29      	ldr	r2, [pc, #164]	; (800808c <TIM_Base_SetConfig+0x124>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d017      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a28      	ldr	r2, [pc, #160]	; (8008090 <TIM_Base_SetConfig+0x128>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d013      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a27      	ldr	r2, [pc, #156]	; (8008094 <TIM_Base_SetConfig+0x12c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00f      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a26      	ldr	r2, [pc, #152]	; (8008098 <TIM_Base_SetConfig+0x130>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00b      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a25      	ldr	r2, [pc, #148]	; (800809c <TIM_Base_SetConfig+0x134>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d007      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a24      	ldr	r2, [pc, #144]	; (80080a0 <TIM_Base_SetConfig+0x138>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d003      	beq.n	800801a <TIM_Base_SetConfig+0xb2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a23      	ldr	r2, [pc, #140]	; (80080a4 <TIM_Base_SetConfig+0x13c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d108      	bne.n	800802c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a0a      	ldr	r2, [pc, #40]	; (800807c <TIM_Base_SetConfig+0x114>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_Base_SetConfig+0xf8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a0c      	ldr	r2, [pc, #48]	; (800808c <TIM_Base_SetConfig+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d103      	bne.n	8008068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	615a      	str	r2, [r3, #20]
}
 800806e:	bf00      	nop
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40010000 	.word	0x40010000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800
 8008088:	40000c00 	.word	0x40000c00
 800808c:	40010400 	.word	0x40010400
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800
 800809c:	40001800 	.word	0x40001800
 80080a0:	40001c00 	.word	0x40001c00
 80080a4:	40002000 	.word	0x40002000

080080a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f023 0201 	bic.w	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4a28      	ldr	r2, [pc, #160]	; (8008174 <TIM_TI1_SetConfig+0xcc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01b      	beq.n	800810e <TIM_TI1_SetConfig+0x66>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080dc:	d017      	beq.n	800810e <TIM_TI1_SetConfig+0x66>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a25      	ldr	r2, [pc, #148]	; (8008178 <TIM_TI1_SetConfig+0xd0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <TIM_TI1_SetConfig+0x66>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4a24      	ldr	r2, [pc, #144]	; (800817c <TIM_TI1_SetConfig+0xd4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00f      	beq.n	800810e <TIM_TI1_SetConfig+0x66>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4a23      	ldr	r2, [pc, #140]	; (8008180 <TIM_TI1_SetConfig+0xd8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00b      	beq.n	800810e <TIM_TI1_SetConfig+0x66>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a22      	ldr	r2, [pc, #136]	; (8008184 <TIM_TI1_SetConfig+0xdc>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d007      	beq.n	800810e <TIM_TI1_SetConfig+0x66>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4a21      	ldr	r2, [pc, #132]	; (8008188 <TIM_TI1_SetConfig+0xe0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <TIM_TI1_SetConfig+0x66>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4a20      	ldr	r2, [pc, #128]	; (800818c <TIM_TI1_SetConfig+0xe4>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d101      	bne.n	8008112 <TIM_TI1_SetConfig+0x6a>
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <TIM_TI1_SetConfig+0x6c>
 8008112:	2300      	movs	r3, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e003      	b.n	8008132 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	b2db      	uxtb	r3, r3
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f023 030a 	bic.w	r3, r3, #10
 800814c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f003 030a 	and.w	r3, r3, #10
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	621a      	str	r2, [r3, #32]
}
 8008166:	bf00      	nop
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	40010000 	.word	0x40010000
 8008178:	40000400 	.word	0x40000400
 800817c:	40000800 	.word	0x40000800
 8008180:	40000c00 	.word	0x40000c00
 8008184:	40010400 	.word	0x40010400
 8008188:	40014000 	.word	0x40014000
 800818c:	40001800 	.word	0x40001800

08008190 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	f023 0210 	bic.w	r2, r3, #16
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	031b      	lsls	r3, r3, #12
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	621a      	str	r2, [r3, #32]
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800820a:	b480      	push	{r7}
 800820c:	b087      	sub	sp, #28
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008246:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	b2db      	uxtb	r3, r3
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800825a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008282:	b480      	push	{r7}
 8008284:	b087      	sub	sp, #28
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
 800828e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	031b      	lsls	r3, r3, #12
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80082d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	031b      	lsls	r3, r3, #12
 80082da:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	621a      	str	r2, [r3, #32]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 031f 	and.w	r3, r3, #31
 800830e:	2201      	movs	r2, #1
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a1a      	ldr	r2, [r3, #32]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	43db      	mvns	r3, r3
 800831e:	401a      	ands	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a1a      	ldr	r2, [r3, #32]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	fa01 f303 	lsl.w	r3, r1, r3
 8008334:	431a      	orrs	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008358:	2b01      	cmp	r3, #1
 800835a:	d101      	bne.n	8008360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800835c:	2302      	movs	r3, #2
 800835e:	e06d      	b.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a30      	ldr	r2, [pc, #192]	; (8008448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d004      	beq.n	8008394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a2f      	ldr	r2, [pc, #188]	; (800844c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d108      	bne.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800839a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a20      	ldr	r2, [pc, #128]	; (8008448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d022      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d2:	d01d      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1d      	ldr	r2, [pc, #116]	; (8008450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d018      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1c      	ldr	r2, [pc, #112]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1a      	ldr	r2, [pc, #104]	; (8008458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00e      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a15      	ldr	r2, [pc, #84]	; (800844c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d009      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a16      	ldr	r2, [pc, #88]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a15      	ldr	r2, [pc, #84]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10c      	bne.n	800842a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4313      	orrs	r3, r2
 8008420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	40010000 	.word	0x40010000
 800844c:	40010400 	.word	0x40010400
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40014000 	.word	0x40014000
 8008460:	40001800 	.word	0x40001800

08008464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <__errno>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	; (80084a8 <__errno+0x8>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000040 	.word	0x20000040

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4e0d      	ldr	r6, [pc, #52]	; (80084e4 <__libc_init_array+0x38>)
 80084b0:	4c0d      	ldr	r4, [pc, #52]	; (80084e8 <__libc_init_array+0x3c>)
 80084b2:	1ba4      	subs	r4, r4, r6
 80084b4:	10a4      	asrs	r4, r4, #2
 80084b6:	2500      	movs	r5, #0
 80084b8:	42a5      	cmp	r5, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	4e0b      	ldr	r6, [pc, #44]	; (80084ec <__libc_init_array+0x40>)
 80084be:	4c0c      	ldr	r4, [pc, #48]	; (80084f0 <__libc_init_array+0x44>)
 80084c0:	f002 f85e 	bl	800a580 <_init>
 80084c4:	1ba4      	subs	r4, r4, r6
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	2500      	movs	r5, #0
 80084ca:	42a5      	cmp	r5, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084d4:	4798      	blx	r3
 80084d6:	3501      	adds	r5, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084de:	4798      	blx	r3
 80084e0:	3501      	adds	r5, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	0800c2e0 	.word	0x0800c2e0
 80084e8:	0800c2e0 	.word	0x0800c2e0
 80084ec:	0800c2e0 	.word	0x0800c2e0
 80084f0:	0800c2e4 	.word	0x0800c2e4

080084f4 <memset>:
 80084f4:	4402      	add	r2, r0
 80084f6:	4603      	mov	r3, r0
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d100      	bne.n	80084fe <memset+0xa>
 80084fc:	4770      	bx	lr
 80084fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008502:	e7f9      	b.n	80084f8 <memset+0x4>

08008504 <__cvt>:
 8008504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	ec55 4b10 	vmov	r4, r5, d0
 800850c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800850e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008512:	2d00      	cmp	r5, #0
 8008514:	460e      	mov	r6, r1
 8008516:	4691      	mov	r9, r2
 8008518:	4619      	mov	r1, r3
 800851a:	bfb8      	it	lt
 800851c:	4622      	movlt	r2, r4
 800851e:	462b      	mov	r3, r5
 8008520:	f027 0720 	bic.w	r7, r7, #32
 8008524:	bfbb      	ittet	lt
 8008526:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800852a:	461d      	movlt	r5, r3
 800852c:	2300      	movge	r3, #0
 800852e:	232d      	movlt	r3, #45	; 0x2d
 8008530:	bfb8      	it	lt
 8008532:	4614      	movlt	r4, r2
 8008534:	2f46      	cmp	r7, #70	; 0x46
 8008536:	700b      	strb	r3, [r1, #0]
 8008538:	d004      	beq.n	8008544 <__cvt+0x40>
 800853a:	2f45      	cmp	r7, #69	; 0x45
 800853c:	d100      	bne.n	8008540 <__cvt+0x3c>
 800853e:	3601      	adds	r6, #1
 8008540:	2102      	movs	r1, #2
 8008542:	e000      	b.n	8008546 <__cvt+0x42>
 8008544:	2103      	movs	r1, #3
 8008546:	ab03      	add	r3, sp, #12
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	ab02      	add	r3, sp, #8
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4632      	mov	r2, r6
 8008550:	4653      	mov	r3, sl
 8008552:	ec45 4b10 	vmov	d0, r4, r5
 8008556:	f000 fcdf 	bl	8008f18 <_dtoa_r>
 800855a:	2f47      	cmp	r7, #71	; 0x47
 800855c:	4680      	mov	r8, r0
 800855e:	d102      	bne.n	8008566 <__cvt+0x62>
 8008560:	f019 0f01 	tst.w	r9, #1
 8008564:	d026      	beq.n	80085b4 <__cvt+0xb0>
 8008566:	2f46      	cmp	r7, #70	; 0x46
 8008568:	eb08 0906 	add.w	r9, r8, r6
 800856c:	d111      	bne.n	8008592 <__cvt+0x8e>
 800856e:	f898 3000 	ldrb.w	r3, [r8]
 8008572:	2b30      	cmp	r3, #48	; 0x30
 8008574:	d10a      	bne.n	800858c <__cvt+0x88>
 8008576:	2200      	movs	r2, #0
 8008578:	2300      	movs	r3, #0
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	f7f8 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 8008582:	b918      	cbnz	r0, 800858c <__cvt+0x88>
 8008584:	f1c6 0601 	rsb	r6, r6, #1
 8008588:	f8ca 6000 	str.w	r6, [sl]
 800858c:	f8da 3000 	ldr.w	r3, [sl]
 8008590:	4499      	add	r9, r3
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f8 fab5 	bl	8000b08 <__aeabi_dcmpeq>
 800859e:	b938      	cbnz	r0, 80085b0 <__cvt+0xac>
 80085a0:	2230      	movs	r2, #48	; 0x30
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	454b      	cmp	r3, r9
 80085a6:	d205      	bcs.n	80085b4 <__cvt+0xb0>
 80085a8:	1c59      	adds	r1, r3, #1
 80085aa:	9103      	str	r1, [sp, #12]
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e7f8      	b.n	80085a2 <__cvt+0x9e>
 80085b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085b8:	eba3 0308 	sub.w	r3, r3, r8
 80085bc:	4640      	mov	r0, r8
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	b004      	add	sp, #16
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080085c6 <__exponent>:
 80085c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c8:	2900      	cmp	r1, #0
 80085ca:	4604      	mov	r4, r0
 80085cc:	bfba      	itte	lt
 80085ce:	4249      	neglt	r1, r1
 80085d0:	232d      	movlt	r3, #45	; 0x2d
 80085d2:	232b      	movge	r3, #43	; 0x2b
 80085d4:	2909      	cmp	r1, #9
 80085d6:	f804 2b02 	strb.w	r2, [r4], #2
 80085da:	7043      	strb	r3, [r0, #1]
 80085dc:	dd20      	ble.n	8008620 <__exponent+0x5a>
 80085de:	f10d 0307 	add.w	r3, sp, #7
 80085e2:	461f      	mov	r7, r3
 80085e4:	260a      	movs	r6, #10
 80085e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80085ea:	fb06 1115 	mls	r1, r6, r5, r1
 80085ee:	3130      	adds	r1, #48	; 0x30
 80085f0:	2d09      	cmp	r5, #9
 80085f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085f6:	f103 32ff 	add.w	r2, r3, #4294967295
 80085fa:	4629      	mov	r1, r5
 80085fc:	dc09      	bgt.n	8008612 <__exponent+0x4c>
 80085fe:	3130      	adds	r1, #48	; 0x30
 8008600:	3b02      	subs	r3, #2
 8008602:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008606:	42bb      	cmp	r3, r7
 8008608:	4622      	mov	r2, r4
 800860a:	d304      	bcc.n	8008616 <__exponent+0x50>
 800860c:	1a10      	subs	r0, r2, r0
 800860e:	b003      	add	sp, #12
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008612:	4613      	mov	r3, r2
 8008614:	e7e7      	b.n	80085e6 <__exponent+0x20>
 8008616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800861a:	f804 2b01 	strb.w	r2, [r4], #1
 800861e:	e7f2      	b.n	8008606 <__exponent+0x40>
 8008620:	2330      	movs	r3, #48	; 0x30
 8008622:	4419      	add	r1, r3
 8008624:	7083      	strb	r3, [r0, #2]
 8008626:	1d02      	adds	r2, r0, #4
 8008628:	70c1      	strb	r1, [r0, #3]
 800862a:	e7ef      	b.n	800860c <__exponent+0x46>

0800862c <_printf_float>:
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	b08d      	sub	sp, #52	; 0x34
 8008632:	460c      	mov	r4, r1
 8008634:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008638:	4616      	mov	r6, r2
 800863a:	461f      	mov	r7, r3
 800863c:	4605      	mov	r5, r0
 800863e:	f001 fa23 	bl	8009a88 <_localeconv_r>
 8008642:	6803      	ldr	r3, [r0, #0]
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	4618      	mov	r0, r3
 8008648:	f7f7 fde2 	bl	8000210 <strlen>
 800864c:	2300      	movs	r3, #0
 800864e:	930a      	str	r3, [sp, #40]	; 0x28
 8008650:	f8d8 3000 	ldr.w	r3, [r8]
 8008654:	9005      	str	r0, [sp, #20]
 8008656:	3307      	adds	r3, #7
 8008658:	f023 0307 	bic.w	r3, r3, #7
 800865c:	f103 0208 	add.w	r2, r3, #8
 8008660:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008664:	f8d4 b000 	ldr.w	fp, [r4]
 8008668:	f8c8 2000 	str.w	r2, [r8]
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008674:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008678:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	4ba7      	ldr	r3, [pc, #668]	; (8008924 <_printf_float+0x2f8>)
 8008688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800868c:	f7f8 fa6e 	bl	8000b6c <__aeabi_dcmpun>
 8008690:	bb70      	cbnz	r0, 80086f0 <_printf_float+0xc4>
 8008692:	f04f 32ff 	mov.w	r2, #4294967295
 8008696:	4ba3      	ldr	r3, [pc, #652]	; (8008924 <_printf_float+0x2f8>)
 8008698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869c:	f7f8 fa48 	bl	8000b30 <__aeabi_dcmple>
 80086a0:	bb30      	cbnz	r0, 80086f0 <_printf_float+0xc4>
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7f8 fa37 	bl	8000b1c <__aeabi_dcmplt>
 80086ae:	b110      	cbz	r0, 80086b6 <_printf_float+0x8a>
 80086b0:	232d      	movs	r3, #45	; 0x2d
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b6:	4a9c      	ldr	r2, [pc, #624]	; (8008928 <_printf_float+0x2fc>)
 80086b8:	4b9c      	ldr	r3, [pc, #624]	; (800892c <_printf_float+0x300>)
 80086ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086be:	bf8c      	ite	hi
 80086c0:	4690      	movhi	r8, r2
 80086c2:	4698      	movls	r8, r3
 80086c4:	2303      	movs	r3, #3
 80086c6:	f02b 0204 	bic.w	r2, fp, #4
 80086ca:	6123      	str	r3, [r4, #16]
 80086cc:	6022      	str	r2, [r4, #0]
 80086ce:	f04f 0900 	mov.w	r9, #0
 80086d2:	9700      	str	r7, [sp, #0]
 80086d4:	4633      	mov	r3, r6
 80086d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80086d8:	4621      	mov	r1, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 f9e6 	bl	8008aac <_printf_common>
 80086e0:	3001      	adds	r0, #1
 80086e2:	f040 808d 	bne.w	8008800 <_printf_float+0x1d4>
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	b00d      	add	sp, #52	; 0x34
 80086ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f8 fa38 	bl	8000b6c <__aeabi_dcmpun>
 80086fc:	b110      	cbz	r0, 8008704 <_printf_float+0xd8>
 80086fe:	4a8c      	ldr	r2, [pc, #560]	; (8008930 <_printf_float+0x304>)
 8008700:	4b8c      	ldr	r3, [pc, #560]	; (8008934 <_printf_float+0x308>)
 8008702:	e7da      	b.n	80086ba <_printf_float+0x8e>
 8008704:	6861      	ldr	r1, [r4, #4]
 8008706:	1c4b      	adds	r3, r1, #1
 8008708:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800870c:	a80a      	add	r0, sp, #40	; 0x28
 800870e:	d13e      	bne.n	800878e <_printf_float+0x162>
 8008710:	2306      	movs	r3, #6
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	2300      	movs	r3, #0
 8008716:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800871a:	ab09      	add	r3, sp, #36	; 0x24
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	ec49 8b10 	vmov	d0, r8, r9
 8008722:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008726:	6022      	str	r2, [r4, #0]
 8008728:	f8cd a004 	str.w	sl, [sp, #4]
 800872c:	6861      	ldr	r1, [r4, #4]
 800872e:	4628      	mov	r0, r5
 8008730:	f7ff fee8 	bl	8008504 <__cvt>
 8008734:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008738:	2b47      	cmp	r3, #71	; 0x47
 800873a:	4680      	mov	r8, r0
 800873c:	d109      	bne.n	8008752 <_printf_float+0x126>
 800873e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008740:	1cd8      	adds	r0, r3, #3
 8008742:	db02      	blt.n	800874a <_printf_float+0x11e>
 8008744:	6862      	ldr	r2, [r4, #4]
 8008746:	4293      	cmp	r3, r2
 8008748:	dd47      	ble.n	80087da <_printf_float+0x1ae>
 800874a:	f1aa 0a02 	sub.w	sl, sl, #2
 800874e:	fa5f fa8a 	uxtb.w	sl, sl
 8008752:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008758:	d824      	bhi.n	80087a4 <_printf_float+0x178>
 800875a:	3901      	subs	r1, #1
 800875c:	4652      	mov	r2, sl
 800875e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008762:	9109      	str	r1, [sp, #36]	; 0x24
 8008764:	f7ff ff2f 	bl	80085c6 <__exponent>
 8008768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876a:	1813      	adds	r3, r2, r0
 800876c:	2a01      	cmp	r2, #1
 800876e:	4681      	mov	r9, r0
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	dc02      	bgt.n	800877a <_printf_float+0x14e>
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	07d1      	lsls	r1, r2, #31
 8008778:	d501      	bpl.n	800877e <_printf_float+0x152>
 800877a:	3301      	adds	r3, #1
 800877c:	6123      	str	r3, [r4, #16]
 800877e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0a5      	beq.n	80086d2 <_printf_float+0xa6>
 8008786:	232d      	movs	r3, #45	; 0x2d
 8008788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800878c:	e7a1      	b.n	80086d2 <_printf_float+0xa6>
 800878e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008792:	f000 8177 	beq.w	8008a84 <_printf_float+0x458>
 8008796:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800879a:	d1bb      	bne.n	8008714 <_printf_float+0xe8>
 800879c:	2900      	cmp	r1, #0
 800879e:	d1b9      	bne.n	8008714 <_printf_float+0xe8>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e7b6      	b.n	8008712 <_printf_float+0xe6>
 80087a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80087a8:	d119      	bne.n	80087de <_printf_float+0x1b2>
 80087aa:	2900      	cmp	r1, #0
 80087ac:	6863      	ldr	r3, [r4, #4]
 80087ae:	dd0c      	ble.n	80087ca <_printf_float+0x19e>
 80087b0:	6121      	str	r1, [r4, #16]
 80087b2:	b913      	cbnz	r3, 80087ba <_printf_float+0x18e>
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	07d2      	lsls	r2, r2, #31
 80087b8:	d502      	bpl.n	80087c0 <_printf_float+0x194>
 80087ba:	3301      	adds	r3, #1
 80087bc:	440b      	add	r3, r1
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80087c4:	f04f 0900 	mov.w	r9, #0
 80087c8:	e7d9      	b.n	800877e <_printf_float+0x152>
 80087ca:	b913      	cbnz	r3, 80087d2 <_printf_float+0x1a6>
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	07d0      	lsls	r0, r2, #31
 80087d0:	d501      	bpl.n	80087d6 <_printf_float+0x1aa>
 80087d2:	3302      	adds	r3, #2
 80087d4:	e7f3      	b.n	80087be <_printf_float+0x192>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e7f1      	b.n	80087be <_printf_float+0x192>
 80087da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80087de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80087e2:	4293      	cmp	r3, r2
 80087e4:	db05      	blt.n	80087f2 <_printf_float+0x1c6>
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	07d1      	lsls	r1, r2, #31
 80087ec:	d5e8      	bpl.n	80087c0 <_printf_float+0x194>
 80087ee:	3301      	adds	r3, #1
 80087f0:	e7e5      	b.n	80087be <_printf_float+0x192>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bfd4      	ite	le
 80087f6:	f1c3 0302 	rsble	r3, r3, #2
 80087fa:	2301      	movgt	r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	e7de      	b.n	80087be <_printf_float+0x192>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	055a      	lsls	r2, r3, #21
 8008804:	d407      	bmi.n	8008816 <_printf_float+0x1ea>
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	4642      	mov	r2, r8
 800880a:	4631      	mov	r1, r6
 800880c:	4628      	mov	r0, r5
 800880e:	47b8      	blx	r7
 8008810:	3001      	adds	r0, #1
 8008812:	d12b      	bne.n	800886c <_printf_float+0x240>
 8008814:	e767      	b.n	80086e6 <_printf_float+0xba>
 8008816:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800881a:	f240 80dc 	bls.w	80089d6 <_printf_float+0x3aa>
 800881e:	2200      	movs	r2, #0
 8008820:	2300      	movs	r3, #0
 8008822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008826:	f7f8 f96f 	bl	8000b08 <__aeabi_dcmpeq>
 800882a:	2800      	cmp	r0, #0
 800882c:	d033      	beq.n	8008896 <_printf_float+0x26a>
 800882e:	2301      	movs	r3, #1
 8008830:	4a41      	ldr	r2, [pc, #260]	; (8008938 <_printf_float+0x30c>)
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	f43f af54 	beq.w	80086e6 <_printf_float+0xba>
 800883e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008842:	429a      	cmp	r2, r3
 8008844:	db02      	blt.n	800884c <_printf_float+0x220>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	07d8      	lsls	r0, r3, #31
 800884a:	d50f      	bpl.n	800886c <_printf_float+0x240>
 800884c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	f43f af45 	beq.w	80086e6 <_printf_float+0xba>
 800885c:	f04f 0800 	mov.w	r8, #0
 8008860:	f104 091a 	add.w	r9, r4, #26
 8008864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008866:	3b01      	subs	r3, #1
 8008868:	4543      	cmp	r3, r8
 800886a:	dc09      	bgt.n	8008880 <_printf_float+0x254>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	079b      	lsls	r3, r3, #30
 8008870:	f100 8103 	bmi.w	8008a7a <_printf_float+0x44e>
 8008874:	68e0      	ldr	r0, [r4, #12]
 8008876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008878:	4298      	cmp	r0, r3
 800887a:	bfb8      	it	lt
 800887c:	4618      	movlt	r0, r3
 800887e:	e734      	b.n	80086ea <_printf_float+0xbe>
 8008880:	2301      	movs	r3, #1
 8008882:	464a      	mov	r2, r9
 8008884:	4631      	mov	r1, r6
 8008886:	4628      	mov	r0, r5
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	f43f af2b 	beq.w	80086e6 <_printf_float+0xba>
 8008890:	f108 0801 	add.w	r8, r8, #1
 8008894:	e7e6      	b.n	8008864 <_printf_float+0x238>
 8008896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	dc2b      	bgt.n	80088f4 <_printf_float+0x2c8>
 800889c:	2301      	movs	r3, #1
 800889e:	4a26      	ldr	r2, [pc, #152]	; (8008938 <_printf_float+0x30c>)
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b8      	blx	r7
 80088a6:	3001      	adds	r0, #1
 80088a8:	f43f af1d 	beq.w	80086e6 <_printf_float+0xba>
 80088ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ae:	b923      	cbnz	r3, 80088ba <_printf_float+0x28e>
 80088b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b2:	b913      	cbnz	r3, 80088ba <_printf_float+0x28e>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	07d9      	lsls	r1, r3, #31
 80088b8:	d5d8      	bpl.n	800886c <_printf_float+0x240>
 80088ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	f43f af0e 	beq.w	80086e6 <_printf_float+0xba>
 80088ca:	f04f 0900 	mov.w	r9, #0
 80088ce:	f104 0a1a 	add.w	sl, r4, #26
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	425b      	negs	r3, r3
 80088d6:	454b      	cmp	r3, r9
 80088d8:	dc01      	bgt.n	80088de <_printf_float+0x2b2>
 80088da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088dc:	e794      	b.n	8008808 <_printf_float+0x1dc>
 80088de:	2301      	movs	r3, #1
 80088e0:	4652      	mov	r2, sl
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	47b8      	blx	r7
 80088e8:	3001      	adds	r0, #1
 80088ea:	f43f aefc 	beq.w	80086e6 <_printf_float+0xba>
 80088ee:	f109 0901 	add.w	r9, r9, #1
 80088f2:	e7ee      	b.n	80088d2 <_printf_float+0x2a6>
 80088f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088f8:	429a      	cmp	r2, r3
 80088fa:	bfa8      	it	ge
 80088fc:	461a      	movge	r2, r3
 80088fe:	2a00      	cmp	r2, #0
 8008900:	4691      	mov	r9, r2
 8008902:	dd07      	ble.n	8008914 <_printf_float+0x2e8>
 8008904:	4613      	mov	r3, r2
 8008906:	4631      	mov	r1, r6
 8008908:	4642      	mov	r2, r8
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f aee9 	beq.w	80086e6 <_printf_float+0xba>
 8008914:	f104 031a 	add.w	r3, r4, #26
 8008918:	f04f 0b00 	mov.w	fp, #0
 800891c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008920:	9306      	str	r3, [sp, #24]
 8008922:	e015      	b.n	8008950 <_printf_float+0x324>
 8008924:	7fefffff 	.word	0x7fefffff
 8008928:	0800c07c 	.word	0x0800c07c
 800892c:	0800c078 	.word	0x0800c078
 8008930:	0800c084 	.word	0x0800c084
 8008934:	0800c080 	.word	0x0800c080
 8008938:	0800c088 	.word	0x0800c088
 800893c:	2301      	movs	r3, #1
 800893e:	9a06      	ldr	r2, [sp, #24]
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f aecd 	beq.w	80086e6 <_printf_float+0xba>
 800894c:	f10b 0b01 	add.w	fp, fp, #1
 8008950:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008954:	ebaa 0309 	sub.w	r3, sl, r9
 8008958:	455b      	cmp	r3, fp
 800895a:	dcef      	bgt.n	800893c <_printf_float+0x310>
 800895c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008960:	429a      	cmp	r2, r3
 8008962:	44d0      	add	r8, sl
 8008964:	db15      	blt.n	8008992 <_printf_float+0x366>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	07da      	lsls	r2, r3, #31
 800896a:	d412      	bmi.n	8008992 <_printf_float+0x366>
 800896c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008970:	eba3 020a 	sub.w	r2, r3, sl
 8008974:	eba3 0a01 	sub.w	sl, r3, r1
 8008978:	4592      	cmp	sl, r2
 800897a:	bfa8      	it	ge
 800897c:	4692      	movge	sl, r2
 800897e:	f1ba 0f00 	cmp.w	sl, #0
 8008982:	dc0e      	bgt.n	80089a2 <_printf_float+0x376>
 8008984:	f04f 0800 	mov.w	r8, #0
 8008988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800898c:	f104 091a 	add.w	r9, r4, #26
 8008990:	e019      	b.n	80089c6 <_printf_float+0x39a>
 8008992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008996:	4631      	mov	r1, r6
 8008998:	4628      	mov	r0, r5
 800899a:	47b8      	blx	r7
 800899c:	3001      	adds	r0, #1
 800899e:	d1e5      	bne.n	800896c <_printf_float+0x340>
 80089a0:	e6a1      	b.n	80086e6 <_printf_float+0xba>
 80089a2:	4653      	mov	r3, sl
 80089a4:	4642      	mov	r2, r8
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	d1e9      	bne.n	8008984 <_printf_float+0x358>
 80089b0:	e699      	b.n	80086e6 <_printf_float+0xba>
 80089b2:	2301      	movs	r3, #1
 80089b4:	464a      	mov	r2, r9
 80089b6:	4631      	mov	r1, r6
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	f43f ae92 	beq.w	80086e6 <_printf_float+0xba>
 80089c2:	f108 0801 	add.w	r8, r8, #1
 80089c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089ca:	1a9b      	subs	r3, r3, r2
 80089cc:	eba3 030a 	sub.w	r3, r3, sl
 80089d0:	4543      	cmp	r3, r8
 80089d2:	dcee      	bgt.n	80089b2 <_printf_float+0x386>
 80089d4:	e74a      	b.n	800886c <_printf_float+0x240>
 80089d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089d8:	2a01      	cmp	r2, #1
 80089da:	dc01      	bgt.n	80089e0 <_printf_float+0x3b4>
 80089dc:	07db      	lsls	r3, r3, #31
 80089de:	d53a      	bpl.n	8008a56 <_printf_float+0x42a>
 80089e0:	2301      	movs	r3, #1
 80089e2:	4642      	mov	r2, r8
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f ae7b 	beq.w	80086e6 <_printf_float+0xba>
 80089f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f108 0801 	add.w	r8, r8, #1
 8008a00:	f43f ae71 	beq.w	80086e6 <_printf_float+0xba>
 8008a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a06:	2200      	movs	r2, #0
 8008a08:	f103 3aff 	add.w	sl, r3, #4294967295
 8008a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a10:	2300      	movs	r3, #0
 8008a12:	f7f8 f879 	bl	8000b08 <__aeabi_dcmpeq>
 8008a16:	b9c8      	cbnz	r0, 8008a4c <_printf_float+0x420>
 8008a18:	4653      	mov	r3, sl
 8008a1a:	4642      	mov	r2, r8
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	d10e      	bne.n	8008a44 <_printf_float+0x418>
 8008a26:	e65e      	b.n	80086e6 <_printf_float+0xba>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4652      	mov	r2, sl
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f ae57 	beq.w	80086e6 <_printf_float+0xba>
 8008a38:	f108 0801 	add.w	r8, r8, #1
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	4543      	cmp	r3, r8
 8008a42:	dcf1      	bgt.n	8008a28 <_printf_float+0x3fc>
 8008a44:	464b      	mov	r3, r9
 8008a46:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a4a:	e6de      	b.n	800880a <_printf_float+0x1de>
 8008a4c:	f04f 0800 	mov.w	r8, #0
 8008a50:	f104 0a1a 	add.w	sl, r4, #26
 8008a54:	e7f2      	b.n	8008a3c <_printf_float+0x410>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e7df      	b.n	8008a1a <_printf_float+0x3ee>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	464a      	mov	r2, r9
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae3e 	beq.w	80086e6 <_printf_float+0xba>
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	4543      	cmp	r3, r8
 8008a76:	dcf0      	bgt.n	8008a5a <_printf_float+0x42e>
 8008a78:	e6fc      	b.n	8008874 <_printf_float+0x248>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	f104 0919 	add.w	r9, r4, #25
 8008a82:	e7f4      	b.n	8008a6e <_printf_float+0x442>
 8008a84:	2900      	cmp	r1, #0
 8008a86:	f43f ae8b 	beq.w	80087a0 <_printf_float+0x174>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a90:	ab09      	add	r3, sp, #36	; 0x24
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	ec49 8b10 	vmov	d0, r8, r9
 8008a98:	6022      	str	r2, [r4, #0]
 8008a9a:	f8cd a004 	str.w	sl, [sp, #4]
 8008a9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f7ff fd2e 	bl	8008504 <__cvt>
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	e648      	b.n	800873e <_printf_float+0x112>

08008aac <_printf_common>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	4691      	mov	r9, r2
 8008ab2:	461f      	mov	r7, r3
 8008ab4:	688a      	ldr	r2, [r1, #8]
 8008ab6:	690b      	ldr	r3, [r1, #16]
 8008ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	bfb8      	it	lt
 8008ac0:	4613      	movlt	r3, r2
 8008ac2:	f8c9 3000 	str.w	r3, [r9]
 8008ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aca:	4606      	mov	r6, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	b112      	cbz	r2, 8008ad6 <_printf_common+0x2a>
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	f8c9 3000 	str.w	r3, [r9]
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	0699      	lsls	r1, r3, #26
 8008ada:	bf42      	ittt	mi
 8008adc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ae0:	3302      	addmi	r3, #2
 8008ae2:	f8c9 3000 	strmi.w	r3, [r9]
 8008ae6:	6825      	ldr	r5, [r4, #0]
 8008ae8:	f015 0506 	ands.w	r5, r5, #6
 8008aec:	d107      	bne.n	8008afe <_printf_common+0x52>
 8008aee:	f104 0a19 	add.w	sl, r4, #25
 8008af2:	68e3      	ldr	r3, [r4, #12]
 8008af4:	f8d9 2000 	ldr.w	r2, [r9]
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	42ab      	cmp	r3, r5
 8008afc:	dc28      	bgt.n	8008b50 <_printf_common+0xa4>
 8008afe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b02:	6822      	ldr	r2, [r4, #0]
 8008b04:	3300      	adds	r3, #0
 8008b06:	bf18      	it	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	0692      	lsls	r2, r2, #26
 8008b0c:	d42d      	bmi.n	8008b6a <_printf_common+0xbe>
 8008b0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b12:	4639      	mov	r1, r7
 8008b14:	4630      	mov	r0, r6
 8008b16:	47c0      	blx	r8
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d020      	beq.n	8008b5e <_printf_common+0xb2>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	68e5      	ldr	r5, [r4, #12]
 8008b20:	f8d9 2000 	ldr.w	r2, [r9]
 8008b24:	f003 0306 	and.w	r3, r3, #6
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	bf08      	it	eq
 8008b2c:	1aad      	subeq	r5, r5, r2
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	6922      	ldr	r2, [r4, #16]
 8008b32:	bf0c      	ite	eq
 8008b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b38:	2500      	movne	r5, #0
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bfc4      	itt	gt
 8008b3e:	1a9b      	subgt	r3, r3, r2
 8008b40:	18ed      	addgt	r5, r5, r3
 8008b42:	f04f 0900 	mov.w	r9, #0
 8008b46:	341a      	adds	r4, #26
 8008b48:	454d      	cmp	r5, r9
 8008b4a:	d11a      	bne.n	8008b82 <_printf_common+0xd6>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e008      	b.n	8008b62 <_printf_common+0xb6>
 8008b50:	2301      	movs	r3, #1
 8008b52:	4652      	mov	r2, sl
 8008b54:	4639      	mov	r1, r7
 8008b56:	4630      	mov	r0, r6
 8008b58:	47c0      	blx	r8
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d103      	bne.n	8008b66 <_printf_common+0xba>
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b66:	3501      	adds	r5, #1
 8008b68:	e7c3      	b.n	8008af2 <_printf_common+0x46>
 8008b6a:	18e1      	adds	r1, r4, r3
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	2030      	movs	r0, #48	; 0x30
 8008b70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b74:	4422      	add	r2, r4
 8008b76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b7e:	3302      	adds	r3, #2
 8008b80:	e7c5      	b.n	8008b0e <_printf_common+0x62>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4622      	mov	r2, r4
 8008b86:	4639      	mov	r1, r7
 8008b88:	4630      	mov	r0, r6
 8008b8a:	47c0      	blx	r8
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d0e6      	beq.n	8008b5e <_printf_common+0xb2>
 8008b90:	f109 0901 	add.w	r9, r9, #1
 8008b94:	e7d8      	b.n	8008b48 <_printf_common+0x9c>
	...

08008b98 <_printf_i>:
 8008b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	7e09      	ldrb	r1, [r1, #24]
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	296e      	cmp	r1, #110	; 0x6e
 8008ba8:	4617      	mov	r7, r2
 8008baa:	4606      	mov	r6, r0
 8008bac:	4698      	mov	r8, r3
 8008bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bb0:	f000 80b3 	beq.w	8008d1a <_printf_i+0x182>
 8008bb4:	d822      	bhi.n	8008bfc <_printf_i+0x64>
 8008bb6:	2963      	cmp	r1, #99	; 0x63
 8008bb8:	d036      	beq.n	8008c28 <_printf_i+0x90>
 8008bba:	d80a      	bhi.n	8008bd2 <_printf_i+0x3a>
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	f000 80b9 	beq.w	8008d34 <_printf_i+0x19c>
 8008bc2:	2958      	cmp	r1, #88	; 0x58
 8008bc4:	f000 8083 	beq.w	8008cce <_printf_i+0x136>
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008bd0:	e032      	b.n	8008c38 <_printf_i+0xa0>
 8008bd2:	2964      	cmp	r1, #100	; 0x64
 8008bd4:	d001      	beq.n	8008bda <_printf_i+0x42>
 8008bd6:	2969      	cmp	r1, #105	; 0x69
 8008bd8:	d1f6      	bne.n	8008bc8 <_printf_i+0x30>
 8008bda:	6820      	ldr	r0, [r4, #0]
 8008bdc:	6813      	ldr	r3, [r2, #0]
 8008bde:	0605      	lsls	r5, r0, #24
 8008be0:	f103 0104 	add.w	r1, r3, #4
 8008be4:	d52a      	bpl.n	8008c3c <_printf_i+0xa4>
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6011      	str	r1, [r2, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	da03      	bge.n	8008bf6 <_printf_i+0x5e>
 8008bee:	222d      	movs	r2, #45	; 0x2d
 8008bf0:	425b      	negs	r3, r3
 8008bf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008bf6:	486f      	ldr	r0, [pc, #444]	; (8008db4 <_printf_i+0x21c>)
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	e039      	b.n	8008c70 <_printf_i+0xd8>
 8008bfc:	2973      	cmp	r1, #115	; 0x73
 8008bfe:	f000 809d 	beq.w	8008d3c <_printf_i+0x1a4>
 8008c02:	d808      	bhi.n	8008c16 <_printf_i+0x7e>
 8008c04:	296f      	cmp	r1, #111	; 0x6f
 8008c06:	d020      	beq.n	8008c4a <_printf_i+0xb2>
 8008c08:	2970      	cmp	r1, #112	; 0x70
 8008c0a:	d1dd      	bne.n	8008bc8 <_printf_i+0x30>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	f043 0320 	orr.w	r3, r3, #32
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	e003      	b.n	8008c1e <_printf_i+0x86>
 8008c16:	2975      	cmp	r1, #117	; 0x75
 8008c18:	d017      	beq.n	8008c4a <_printf_i+0xb2>
 8008c1a:	2978      	cmp	r1, #120	; 0x78
 8008c1c:	d1d4      	bne.n	8008bc8 <_printf_i+0x30>
 8008c1e:	2378      	movs	r3, #120	; 0x78
 8008c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c24:	4864      	ldr	r0, [pc, #400]	; (8008db8 <_printf_i+0x220>)
 8008c26:	e055      	b.n	8008cd4 <_printf_i+0x13c>
 8008c28:	6813      	ldr	r3, [r2, #0]
 8008c2a:	1d19      	adds	r1, r3, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6011      	str	r1, [r2, #0]
 8008c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e08c      	b.n	8008d56 <_printf_i+0x1be>
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6011      	str	r1, [r2, #0]
 8008c40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c44:	bf18      	it	ne
 8008c46:	b21b      	sxthne	r3, r3
 8008c48:	e7cf      	b.n	8008bea <_printf_i+0x52>
 8008c4a:	6813      	ldr	r3, [r2, #0]
 8008c4c:	6825      	ldr	r5, [r4, #0]
 8008c4e:	1d18      	adds	r0, r3, #4
 8008c50:	6010      	str	r0, [r2, #0]
 8008c52:	0628      	lsls	r0, r5, #24
 8008c54:	d501      	bpl.n	8008c5a <_printf_i+0xc2>
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	e002      	b.n	8008c60 <_printf_i+0xc8>
 8008c5a:	0668      	lsls	r0, r5, #25
 8008c5c:	d5fb      	bpl.n	8008c56 <_printf_i+0xbe>
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	4854      	ldr	r0, [pc, #336]	; (8008db4 <_printf_i+0x21c>)
 8008c62:	296f      	cmp	r1, #111	; 0x6f
 8008c64:	bf14      	ite	ne
 8008c66:	220a      	movne	r2, #10
 8008c68:	2208      	moveq	r2, #8
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c70:	6865      	ldr	r5, [r4, #4]
 8008c72:	60a5      	str	r5, [r4, #8]
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	f2c0 8095 	blt.w	8008da4 <_printf_i+0x20c>
 8008c7a:	6821      	ldr	r1, [r4, #0]
 8008c7c:	f021 0104 	bic.w	r1, r1, #4
 8008c80:	6021      	str	r1, [r4, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d13d      	bne.n	8008d02 <_printf_i+0x16a>
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	f040 808e 	bne.w	8008da8 <_printf_i+0x210>
 8008c8c:	4665      	mov	r5, ip
 8008c8e:	2a08      	cmp	r2, #8
 8008c90:	d10b      	bne.n	8008caa <_printf_i+0x112>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	07db      	lsls	r3, r3, #31
 8008c96:	d508      	bpl.n	8008caa <_printf_i+0x112>
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	6862      	ldr	r2, [r4, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	bfde      	ittt	le
 8008ca0:	2330      	movle	r3, #48	; 0x30
 8008ca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ca6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008caa:	ebac 0305 	sub.w	r3, ip, r5
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	f8cd 8000 	str.w	r8, [sp]
 8008cb4:	463b      	mov	r3, r7
 8008cb6:	aa03      	add	r2, sp, #12
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff fef6 	bl	8008aac <_printf_common>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d14d      	bne.n	8008d60 <_printf_i+0x1c8>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	b005      	add	sp, #20
 8008cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cce:	4839      	ldr	r0, [pc, #228]	; (8008db4 <_printf_i+0x21c>)
 8008cd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008cd4:	6813      	ldr	r3, [r2, #0]
 8008cd6:	6821      	ldr	r1, [r4, #0]
 8008cd8:	1d1d      	adds	r5, r3, #4
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6015      	str	r5, [r2, #0]
 8008cde:	060a      	lsls	r2, r1, #24
 8008ce0:	d50b      	bpl.n	8008cfa <_printf_i+0x162>
 8008ce2:	07ca      	lsls	r2, r1, #31
 8008ce4:	bf44      	itt	mi
 8008ce6:	f041 0120 	orrmi.w	r1, r1, #32
 8008cea:	6021      	strmi	r1, [r4, #0]
 8008cec:	b91b      	cbnz	r3, 8008cf6 <_printf_i+0x15e>
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	f022 0220 	bic.w	r2, r2, #32
 8008cf4:	6022      	str	r2, [r4, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	e7b7      	b.n	8008c6a <_printf_i+0xd2>
 8008cfa:	064d      	lsls	r5, r1, #25
 8008cfc:	bf48      	it	mi
 8008cfe:	b29b      	uxthmi	r3, r3
 8008d00:	e7ef      	b.n	8008ce2 <_printf_i+0x14a>
 8008d02:	4665      	mov	r5, ip
 8008d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d08:	fb02 3311 	mls	r3, r2, r1, r3
 8008d0c:	5cc3      	ldrb	r3, [r0, r3]
 8008d0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d12:	460b      	mov	r3, r1
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d1f5      	bne.n	8008d04 <_printf_i+0x16c>
 8008d18:	e7b9      	b.n	8008c8e <_printf_i+0xf6>
 8008d1a:	6813      	ldr	r3, [r2, #0]
 8008d1c:	6825      	ldr	r5, [r4, #0]
 8008d1e:	6961      	ldr	r1, [r4, #20]
 8008d20:	1d18      	adds	r0, r3, #4
 8008d22:	6010      	str	r0, [r2, #0]
 8008d24:	0628      	lsls	r0, r5, #24
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	d501      	bpl.n	8008d2e <_printf_i+0x196>
 8008d2a:	6019      	str	r1, [r3, #0]
 8008d2c:	e002      	b.n	8008d34 <_printf_i+0x19c>
 8008d2e:	066a      	lsls	r2, r5, #25
 8008d30:	d5fb      	bpl.n	8008d2a <_printf_i+0x192>
 8008d32:	8019      	strh	r1, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	4665      	mov	r5, ip
 8008d3a:	e7b9      	b.n	8008cb0 <_printf_i+0x118>
 8008d3c:	6813      	ldr	r3, [r2, #0]
 8008d3e:	1d19      	adds	r1, r3, #4
 8008d40:	6011      	str	r1, [r2, #0]
 8008d42:	681d      	ldr	r5, [r3, #0]
 8008d44:	6862      	ldr	r2, [r4, #4]
 8008d46:	2100      	movs	r1, #0
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f7f7 fa69 	bl	8000220 <memchr>
 8008d4e:	b108      	cbz	r0, 8008d54 <_printf_i+0x1bc>
 8008d50:	1b40      	subs	r0, r0, r5
 8008d52:	6060      	str	r0, [r4, #4]
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	6123      	str	r3, [r4, #16]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5e:	e7a7      	b.n	8008cb0 <_printf_i+0x118>
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	462a      	mov	r2, r5
 8008d64:	4639      	mov	r1, r7
 8008d66:	4630      	mov	r0, r6
 8008d68:	47c0      	blx	r8
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d0aa      	beq.n	8008cc4 <_printf_i+0x12c>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	079b      	lsls	r3, r3, #30
 8008d72:	d413      	bmi.n	8008d9c <_printf_i+0x204>
 8008d74:	68e0      	ldr	r0, [r4, #12]
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	4298      	cmp	r0, r3
 8008d7a:	bfb8      	it	lt
 8008d7c:	4618      	movlt	r0, r3
 8008d7e:	e7a3      	b.n	8008cc8 <_printf_i+0x130>
 8008d80:	2301      	movs	r3, #1
 8008d82:	464a      	mov	r2, r9
 8008d84:	4639      	mov	r1, r7
 8008d86:	4630      	mov	r0, r6
 8008d88:	47c0      	blx	r8
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d09a      	beq.n	8008cc4 <_printf_i+0x12c>
 8008d8e:	3501      	adds	r5, #1
 8008d90:	68e3      	ldr	r3, [r4, #12]
 8008d92:	9a03      	ldr	r2, [sp, #12]
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	42ab      	cmp	r3, r5
 8008d98:	dcf2      	bgt.n	8008d80 <_printf_i+0x1e8>
 8008d9a:	e7eb      	b.n	8008d74 <_printf_i+0x1dc>
 8008d9c:	2500      	movs	r5, #0
 8008d9e:	f104 0919 	add.w	r9, r4, #25
 8008da2:	e7f5      	b.n	8008d90 <_printf_i+0x1f8>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1ac      	bne.n	8008d02 <_printf_i+0x16a>
 8008da8:	7803      	ldrb	r3, [r0, #0]
 8008daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008db2:	e76c      	b.n	8008c8e <_printf_i+0xf6>
 8008db4:	0800c08a 	.word	0x0800c08a
 8008db8:	0800c09b 	.word	0x0800c09b

08008dbc <siprintf>:
 8008dbc:	b40e      	push	{r1, r2, r3}
 8008dbe:	b500      	push	{lr}
 8008dc0:	b09c      	sub	sp, #112	; 0x70
 8008dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8008dc4:	9002      	str	r0, [sp, #8]
 8008dc6:	9006      	str	r0, [sp, #24]
 8008dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dcc:	4809      	ldr	r0, [pc, #36]	; (8008df4 <siprintf+0x38>)
 8008dce:	9107      	str	r1, [sp, #28]
 8008dd0:	9104      	str	r1, [sp, #16]
 8008dd2:	4909      	ldr	r1, [pc, #36]	; (8008df8 <siprintf+0x3c>)
 8008dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd8:	9105      	str	r1, [sp, #20]
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	a902      	add	r1, sp, #8
 8008de0:	f001 fa5e 	bl	800a2a0 <_svfiprintf_r>
 8008de4:	9b02      	ldr	r3, [sp, #8]
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	b01c      	add	sp, #112	; 0x70
 8008dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df0:	b003      	add	sp, #12
 8008df2:	4770      	bx	lr
 8008df4:	20000040 	.word	0x20000040
 8008df8:	ffff0208 	.word	0xffff0208

08008dfc <quorem>:
 8008dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	6903      	ldr	r3, [r0, #16]
 8008e02:	690c      	ldr	r4, [r1, #16]
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	4680      	mov	r8, r0
 8008e08:	f2c0 8082 	blt.w	8008f10 <quorem+0x114>
 8008e0c:	3c01      	subs	r4, #1
 8008e0e:	f101 0714 	add.w	r7, r1, #20
 8008e12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008e16:	f100 0614 	add.w	r6, r0, #20
 8008e1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008e1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008e22:	eb06 030c 	add.w	r3, r6, ip
 8008e26:	3501      	adds	r5, #1
 8008e28:	eb07 090c 	add.w	r9, r7, ip
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e32:	b395      	cbz	r5, 8008e9a <quorem+0x9e>
 8008e34:	f04f 0a00 	mov.w	sl, #0
 8008e38:	4638      	mov	r0, r7
 8008e3a:	46b6      	mov	lr, r6
 8008e3c:	46d3      	mov	fp, sl
 8008e3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e42:	b293      	uxth	r3, r2
 8008e44:	fb05 a303 	mla	r3, r5, r3, sl
 8008e48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	ebab 0303 	sub.w	r3, fp, r3
 8008e52:	0c12      	lsrs	r2, r2, #16
 8008e54:	f8de b000 	ldr.w	fp, [lr]
 8008e58:	fb05 a202 	mla	r2, r5, r2, sl
 8008e5c:	fa13 f38b 	uxtah	r3, r3, fp
 8008e60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008e64:	fa1f fb82 	uxth.w	fp, r2
 8008e68:	f8de 2000 	ldr.w	r2, [lr]
 8008e6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e7a:	4581      	cmp	r9, r0
 8008e7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008e80:	f84e 3b04 	str.w	r3, [lr], #4
 8008e84:	d2db      	bcs.n	8008e3e <quorem+0x42>
 8008e86:	f856 300c 	ldr.w	r3, [r6, ip]
 8008e8a:	b933      	cbnz	r3, 8008e9a <quorem+0x9e>
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	3b04      	subs	r3, #4
 8008e90:	429e      	cmp	r6, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	d330      	bcc.n	8008ef8 <quorem+0xfc>
 8008e96:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	f001 f82a 	bl	8009ef4 <__mcmp>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	db25      	blt.n	8008ef0 <quorem+0xf4>
 8008ea4:	3501      	adds	r5, #1
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f04f 0c00 	mov.w	ip, #0
 8008eac:	f857 2b04 	ldr.w	r2, [r7], #4
 8008eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8008eb4:	b293      	uxth	r3, r2
 8008eb6:	ebac 0303 	sub.w	r3, ip, r3
 8008eba:	0c12      	lsrs	r2, r2, #16
 8008ebc:	fa13 f38e 	uxtah	r3, r3, lr
 8008ec0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ece:	45b9      	cmp	r9, r7
 8008ed0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ed4:	f840 3b04 	str.w	r3, [r0], #4
 8008ed8:	d2e8      	bcs.n	8008eac <quorem+0xb0>
 8008eda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008ede:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008ee2:	b92a      	cbnz	r2, 8008ef0 <quorem+0xf4>
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	429e      	cmp	r6, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	d30b      	bcc.n	8008f04 <quorem+0x108>
 8008eec:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	b003      	add	sp, #12
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	3b04      	subs	r3, #4
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	d1ca      	bne.n	8008e96 <quorem+0x9a>
 8008f00:	3c01      	subs	r4, #1
 8008f02:	e7c5      	b.n	8008e90 <quorem+0x94>
 8008f04:	6812      	ldr	r2, [r2, #0]
 8008f06:	3b04      	subs	r3, #4
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	d1ef      	bne.n	8008eec <quorem+0xf0>
 8008f0c:	3c01      	subs	r4, #1
 8008f0e:	e7ea      	b.n	8008ee6 <quorem+0xea>
 8008f10:	2000      	movs	r0, #0
 8008f12:	e7ee      	b.n	8008ef2 <quorem+0xf6>
 8008f14:	0000      	movs	r0, r0
	...

08008f18 <_dtoa_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	ec57 6b10 	vmov	r6, r7, d0
 8008f20:	b097      	sub	sp, #92	; 0x5c
 8008f22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f24:	9106      	str	r1, [sp, #24]
 8008f26:	4604      	mov	r4, r0
 8008f28:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f30:	e9cd 6700 	strd	r6, r7, [sp]
 8008f34:	b93d      	cbnz	r5, 8008f46 <_dtoa_r+0x2e>
 8008f36:	2010      	movs	r0, #16
 8008f38:	f000 fdb4 	bl	8009aa4 <malloc>
 8008f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f42:	6005      	str	r5, [r0, #0]
 8008f44:	60c5      	str	r5, [r0, #12]
 8008f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f48:	6819      	ldr	r1, [r3, #0]
 8008f4a:	b151      	cbz	r1, 8008f62 <_dtoa_r+0x4a>
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	604a      	str	r2, [r1, #4]
 8008f50:	2301      	movs	r3, #1
 8008f52:	4093      	lsls	r3, r2
 8008f54:	608b      	str	r3, [r1, #8]
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 fdeb 	bl	8009b32 <_Bfree>
 8008f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	1e3b      	subs	r3, r7, #0
 8008f64:	bfbb      	ittet	lt
 8008f66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f6a:	9301      	strlt	r3, [sp, #4]
 8008f6c:	2300      	movge	r3, #0
 8008f6e:	2201      	movlt	r2, #1
 8008f70:	bfac      	ite	ge
 8008f72:	f8c8 3000 	strge.w	r3, [r8]
 8008f76:	f8c8 2000 	strlt.w	r2, [r8]
 8008f7a:	4baf      	ldr	r3, [pc, #700]	; (8009238 <_dtoa_r+0x320>)
 8008f7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f80:	ea33 0308 	bics.w	r3, r3, r8
 8008f84:	d114      	bne.n	8008fb0 <_dtoa_r+0x98>
 8008f86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f88:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	9b00      	ldr	r3, [sp, #0]
 8008f90:	b923      	cbnz	r3, 8008f9c <_dtoa_r+0x84>
 8008f92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f000 8542 	beq.w	8009a20 <_dtoa_r+0xb08>
 8008f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800924c <_dtoa_r+0x334>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8544 	beq.w	8009a30 <_dtoa_r+0xb18>
 8008fa8:	f10b 0303 	add.w	r3, fp, #3
 8008fac:	f000 bd3e 	b.w	8009a2c <_dtoa_r+0xb14>
 8008fb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4630      	mov	r0, r6
 8008fba:	4639      	mov	r1, r7
 8008fbc:	f7f7 fda4 	bl	8000b08 <__aeabi_dcmpeq>
 8008fc0:	4681      	mov	r9, r0
 8008fc2:	b168      	cbz	r0, 8008fe0 <_dtoa_r+0xc8>
 8008fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8524 	beq.w	8009a1a <_dtoa_r+0xb02>
 8008fd2:	4b9a      	ldr	r3, [pc, #616]	; (800923c <_dtoa_r+0x324>)
 8008fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fd6:	f103 3bff 	add.w	fp, r3, #4294967295
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	f000 bd28 	b.w	8009a30 <_dtoa_r+0xb18>
 8008fe0:	aa14      	add	r2, sp, #80	; 0x50
 8008fe2:	a915      	add	r1, sp, #84	; 0x54
 8008fe4:	ec47 6b10 	vmov	d0, r6, r7
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fffa 	bl	8009fe2 <__d2b>
 8008fee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ff2:	9004      	str	r0, [sp, #16]
 8008ff4:	2d00      	cmp	r5, #0
 8008ff6:	d07c      	beq.n	80090f2 <_dtoa_r+0x1da>
 8008ff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ffc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009000:	46b2      	mov	sl, r6
 8009002:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800900a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800900e:	2200      	movs	r2, #0
 8009010:	4b8b      	ldr	r3, [pc, #556]	; (8009240 <_dtoa_r+0x328>)
 8009012:	4650      	mov	r0, sl
 8009014:	4659      	mov	r1, fp
 8009016:	f7f7 f957 	bl	80002c8 <__aeabi_dsub>
 800901a:	a381      	add	r3, pc, #516	; (adr r3, 8009220 <_dtoa_r+0x308>)
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	f7f7 fb0a 	bl	8000638 <__aeabi_dmul>
 8009024:	a380      	add	r3, pc, #512	; (adr r3, 8009228 <_dtoa_r+0x310>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 f94f 	bl	80002cc <__adddf3>
 800902e:	4606      	mov	r6, r0
 8009030:	4628      	mov	r0, r5
 8009032:	460f      	mov	r7, r1
 8009034:	f7f7 fa96 	bl	8000564 <__aeabi_i2d>
 8009038:	a37d      	add	r3, pc, #500	; (adr r3, 8009230 <_dtoa_r+0x318>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 fafb 	bl	8000638 <__aeabi_dmul>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 f93f 	bl	80002cc <__adddf3>
 800904e:	4606      	mov	r6, r0
 8009050:	460f      	mov	r7, r1
 8009052:	f7f7 fda1 	bl	8000b98 <__aeabi_d2iz>
 8009056:	2200      	movs	r2, #0
 8009058:	4682      	mov	sl, r0
 800905a:	2300      	movs	r3, #0
 800905c:	4630      	mov	r0, r6
 800905e:	4639      	mov	r1, r7
 8009060:	f7f7 fd5c 	bl	8000b1c <__aeabi_dcmplt>
 8009064:	b148      	cbz	r0, 800907a <_dtoa_r+0x162>
 8009066:	4650      	mov	r0, sl
 8009068:	f7f7 fa7c 	bl	8000564 <__aeabi_i2d>
 800906c:	4632      	mov	r2, r6
 800906e:	463b      	mov	r3, r7
 8009070:	f7f7 fd4a 	bl	8000b08 <__aeabi_dcmpeq>
 8009074:	b908      	cbnz	r0, 800907a <_dtoa_r+0x162>
 8009076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800907a:	f1ba 0f16 	cmp.w	sl, #22
 800907e:	d859      	bhi.n	8009134 <_dtoa_r+0x21c>
 8009080:	4970      	ldr	r1, [pc, #448]	; (8009244 <_dtoa_r+0x32c>)
 8009082:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800908a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908e:	f7f7 fd63 	bl	8000b58 <__aeabi_dcmpgt>
 8009092:	2800      	cmp	r0, #0
 8009094:	d050      	beq.n	8009138 <_dtoa_r+0x220>
 8009096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800909a:	2300      	movs	r3, #0
 800909c:	930f      	str	r3, [sp, #60]	; 0x3c
 800909e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a0:	1b5d      	subs	r5, r3, r5
 80090a2:	f1b5 0801 	subs.w	r8, r5, #1
 80090a6:	bf49      	itett	mi
 80090a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80090ac:	2300      	movpl	r3, #0
 80090ae:	9305      	strmi	r3, [sp, #20]
 80090b0:	f04f 0800 	movmi.w	r8, #0
 80090b4:	bf58      	it	pl
 80090b6:	9305      	strpl	r3, [sp, #20]
 80090b8:	f1ba 0f00 	cmp.w	sl, #0
 80090bc:	db3e      	blt.n	800913c <_dtoa_r+0x224>
 80090be:	2300      	movs	r3, #0
 80090c0:	44d0      	add	r8, sl
 80090c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80090c6:	9307      	str	r3, [sp, #28]
 80090c8:	9b06      	ldr	r3, [sp, #24]
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	f200 8090 	bhi.w	80091f0 <_dtoa_r+0x2d8>
 80090d0:	2b05      	cmp	r3, #5
 80090d2:	bfc4      	itt	gt
 80090d4:	3b04      	subgt	r3, #4
 80090d6:	9306      	strgt	r3, [sp, #24]
 80090d8:	9b06      	ldr	r3, [sp, #24]
 80090da:	f1a3 0302 	sub.w	r3, r3, #2
 80090de:	bfcc      	ite	gt
 80090e0:	2500      	movgt	r5, #0
 80090e2:	2501      	movle	r5, #1
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	f200 808f 	bhi.w	8009208 <_dtoa_r+0x2f0>
 80090ea:	e8df f003 	tbb	[pc, r3]
 80090ee:	7f7d      	.short	0x7f7d
 80090f0:	7131      	.short	0x7131
 80090f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80090f6:	441d      	add	r5, r3
 80090f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80090fc:	2820      	cmp	r0, #32
 80090fe:	dd13      	ble.n	8009128 <_dtoa_r+0x210>
 8009100:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	fa08 f800 	lsl.w	r8, r8, r0
 800910a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800910e:	fa23 f000 	lsr.w	r0, r3, r0
 8009112:	ea48 0000 	orr.w	r0, r8, r0
 8009116:	f7f7 fa15 	bl	8000544 <__aeabi_ui2d>
 800911a:	2301      	movs	r3, #1
 800911c:	4682      	mov	sl, r0
 800911e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009122:	3d01      	subs	r5, #1
 8009124:	9313      	str	r3, [sp, #76]	; 0x4c
 8009126:	e772      	b.n	800900e <_dtoa_r+0xf6>
 8009128:	9b00      	ldr	r3, [sp, #0]
 800912a:	f1c0 0020 	rsb	r0, r0, #32
 800912e:	fa03 f000 	lsl.w	r0, r3, r0
 8009132:	e7f0      	b.n	8009116 <_dtoa_r+0x1fe>
 8009134:	2301      	movs	r3, #1
 8009136:	e7b1      	b.n	800909c <_dtoa_r+0x184>
 8009138:	900f      	str	r0, [sp, #60]	; 0x3c
 800913a:	e7b0      	b.n	800909e <_dtoa_r+0x186>
 800913c:	9b05      	ldr	r3, [sp, #20]
 800913e:	eba3 030a 	sub.w	r3, r3, sl
 8009142:	9305      	str	r3, [sp, #20]
 8009144:	f1ca 0300 	rsb	r3, sl, #0
 8009148:	9307      	str	r3, [sp, #28]
 800914a:	2300      	movs	r3, #0
 800914c:	930e      	str	r3, [sp, #56]	; 0x38
 800914e:	e7bb      	b.n	80090c8 <_dtoa_r+0x1b0>
 8009150:	2301      	movs	r3, #1
 8009152:	930a      	str	r3, [sp, #40]	; 0x28
 8009154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009156:	2b00      	cmp	r3, #0
 8009158:	dd59      	ble.n	800920e <_dtoa_r+0x2f6>
 800915a:	9302      	str	r3, [sp, #8]
 800915c:	4699      	mov	r9, r3
 800915e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009160:	2200      	movs	r2, #0
 8009162:	6072      	str	r2, [r6, #4]
 8009164:	2204      	movs	r2, #4
 8009166:	f102 0014 	add.w	r0, r2, #20
 800916a:	4298      	cmp	r0, r3
 800916c:	6871      	ldr	r1, [r6, #4]
 800916e:	d953      	bls.n	8009218 <_dtoa_r+0x300>
 8009170:	4620      	mov	r0, r4
 8009172:	f000 fcaa 	bl	8009aca <_Balloc>
 8009176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009178:	6030      	str	r0, [r6, #0]
 800917a:	f1b9 0f0e 	cmp.w	r9, #14
 800917e:	f8d3 b000 	ldr.w	fp, [r3]
 8009182:	f200 80e6 	bhi.w	8009352 <_dtoa_r+0x43a>
 8009186:	2d00      	cmp	r5, #0
 8009188:	f000 80e3 	beq.w	8009352 <_dtoa_r+0x43a>
 800918c:	ed9d 7b00 	vldr	d7, [sp]
 8009190:	f1ba 0f00 	cmp.w	sl, #0
 8009194:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009198:	dd74      	ble.n	8009284 <_dtoa_r+0x36c>
 800919a:	4a2a      	ldr	r2, [pc, #168]	; (8009244 <_dtoa_r+0x32c>)
 800919c:	f00a 030f 	and.w	r3, sl, #15
 80091a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091a4:	ed93 7b00 	vldr	d7, [r3]
 80091a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80091ac:	06f0      	lsls	r0, r6, #27
 80091ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80091b2:	d565      	bpl.n	8009280 <_dtoa_r+0x368>
 80091b4:	4b24      	ldr	r3, [pc, #144]	; (8009248 <_dtoa_r+0x330>)
 80091b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091be:	f7f7 fb65 	bl	800088c <__aeabi_ddiv>
 80091c2:	e9cd 0100 	strd	r0, r1, [sp]
 80091c6:	f006 060f 	and.w	r6, r6, #15
 80091ca:	2503      	movs	r5, #3
 80091cc:	4f1e      	ldr	r7, [pc, #120]	; (8009248 <_dtoa_r+0x330>)
 80091ce:	e04c      	b.n	800926a <_dtoa_r+0x352>
 80091d0:	2301      	movs	r3, #1
 80091d2:	930a      	str	r3, [sp, #40]	; 0x28
 80091d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d6:	4453      	add	r3, sl
 80091d8:	f103 0901 	add.w	r9, r3, #1
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	464b      	mov	r3, r9
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	bfb8      	it	lt
 80091e4:	2301      	movlt	r3, #1
 80091e6:	e7ba      	b.n	800915e <_dtoa_r+0x246>
 80091e8:	2300      	movs	r3, #0
 80091ea:	e7b2      	b.n	8009152 <_dtoa_r+0x23a>
 80091ec:	2300      	movs	r3, #0
 80091ee:	e7f0      	b.n	80091d2 <_dtoa_r+0x2ba>
 80091f0:	2501      	movs	r5, #1
 80091f2:	2300      	movs	r3, #0
 80091f4:	9306      	str	r3, [sp, #24]
 80091f6:	950a      	str	r5, [sp, #40]	; 0x28
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	9302      	str	r3, [sp, #8]
 80091fe:	4699      	mov	r9, r3
 8009200:	2200      	movs	r2, #0
 8009202:	2312      	movs	r3, #18
 8009204:	920b      	str	r2, [sp, #44]	; 0x2c
 8009206:	e7aa      	b.n	800915e <_dtoa_r+0x246>
 8009208:	2301      	movs	r3, #1
 800920a:	930a      	str	r3, [sp, #40]	; 0x28
 800920c:	e7f4      	b.n	80091f8 <_dtoa_r+0x2e0>
 800920e:	2301      	movs	r3, #1
 8009210:	9302      	str	r3, [sp, #8]
 8009212:	4699      	mov	r9, r3
 8009214:	461a      	mov	r2, r3
 8009216:	e7f5      	b.n	8009204 <_dtoa_r+0x2ec>
 8009218:	3101      	adds	r1, #1
 800921a:	6071      	str	r1, [r6, #4]
 800921c:	0052      	lsls	r2, r2, #1
 800921e:	e7a2      	b.n	8009166 <_dtoa_r+0x24e>
 8009220:	636f4361 	.word	0x636f4361
 8009224:	3fd287a7 	.word	0x3fd287a7
 8009228:	8b60c8b3 	.word	0x8b60c8b3
 800922c:	3fc68a28 	.word	0x3fc68a28
 8009230:	509f79fb 	.word	0x509f79fb
 8009234:	3fd34413 	.word	0x3fd34413
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	0800c089 	.word	0x0800c089
 8009240:	3ff80000 	.word	0x3ff80000
 8009244:	0800c0e8 	.word	0x0800c0e8
 8009248:	0800c0c0 	.word	0x0800c0c0
 800924c:	0800c0b5 	.word	0x0800c0b5
 8009250:	07f1      	lsls	r1, r6, #31
 8009252:	d508      	bpl.n	8009266 <_dtoa_r+0x34e>
 8009254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925c:	f7f7 f9ec 	bl	8000638 <__aeabi_dmul>
 8009260:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009264:	3501      	adds	r5, #1
 8009266:	1076      	asrs	r6, r6, #1
 8009268:	3708      	adds	r7, #8
 800926a:	2e00      	cmp	r6, #0
 800926c:	d1f0      	bne.n	8009250 <_dtoa_r+0x338>
 800926e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009276:	f7f7 fb09 	bl	800088c <__aeabi_ddiv>
 800927a:	e9cd 0100 	strd	r0, r1, [sp]
 800927e:	e01a      	b.n	80092b6 <_dtoa_r+0x39e>
 8009280:	2502      	movs	r5, #2
 8009282:	e7a3      	b.n	80091cc <_dtoa_r+0x2b4>
 8009284:	f000 80a0 	beq.w	80093c8 <_dtoa_r+0x4b0>
 8009288:	f1ca 0600 	rsb	r6, sl, #0
 800928c:	4b9f      	ldr	r3, [pc, #636]	; (800950c <_dtoa_r+0x5f4>)
 800928e:	4fa0      	ldr	r7, [pc, #640]	; (8009510 <_dtoa_r+0x5f8>)
 8009290:	f006 020f 	and.w	r2, r6, #15
 8009294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092a0:	f7f7 f9ca 	bl	8000638 <__aeabi_dmul>
 80092a4:	e9cd 0100 	strd	r0, r1, [sp]
 80092a8:	1136      	asrs	r6, r6, #4
 80092aa:	2300      	movs	r3, #0
 80092ac:	2502      	movs	r5, #2
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d17f      	bne.n	80093b2 <_dtoa_r+0x49a>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e1      	bne.n	800927a <_dtoa_r+0x362>
 80092b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 8087 	beq.w	80093cc <_dtoa_r+0x4b4>
 80092be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80092c2:	2200      	movs	r2, #0
 80092c4:	4b93      	ldr	r3, [pc, #588]	; (8009514 <_dtoa_r+0x5fc>)
 80092c6:	4630      	mov	r0, r6
 80092c8:	4639      	mov	r1, r7
 80092ca:	f7f7 fc27 	bl	8000b1c <__aeabi_dcmplt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d07c      	beq.n	80093cc <_dtoa_r+0x4b4>
 80092d2:	f1b9 0f00 	cmp.w	r9, #0
 80092d6:	d079      	beq.n	80093cc <_dtoa_r+0x4b4>
 80092d8:	9b02      	ldr	r3, [sp, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dd35      	ble.n	800934a <_dtoa_r+0x432>
 80092de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80092e2:	9308      	str	r3, [sp, #32]
 80092e4:	4639      	mov	r1, r7
 80092e6:	2200      	movs	r2, #0
 80092e8:	4b8b      	ldr	r3, [pc, #556]	; (8009518 <_dtoa_r+0x600>)
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7f7 f9a4 	bl	8000638 <__aeabi_dmul>
 80092f0:	e9cd 0100 	strd	r0, r1, [sp]
 80092f4:	9f02      	ldr	r7, [sp, #8]
 80092f6:	3501      	adds	r5, #1
 80092f8:	4628      	mov	r0, r5
 80092fa:	f7f7 f933 	bl	8000564 <__aeabi_i2d>
 80092fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009302:	f7f7 f999 	bl	8000638 <__aeabi_dmul>
 8009306:	2200      	movs	r2, #0
 8009308:	4b84      	ldr	r3, [pc, #528]	; (800951c <_dtoa_r+0x604>)
 800930a:	f7f6 ffdf 	bl	80002cc <__adddf3>
 800930e:	4605      	mov	r5, r0
 8009310:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009314:	2f00      	cmp	r7, #0
 8009316:	d15d      	bne.n	80093d4 <_dtoa_r+0x4bc>
 8009318:	2200      	movs	r2, #0
 800931a:	4b81      	ldr	r3, [pc, #516]	; (8009520 <_dtoa_r+0x608>)
 800931c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009320:	f7f6 ffd2 	bl	80002c8 <__aeabi_dsub>
 8009324:	462a      	mov	r2, r5
 8009326:	4633      	mov	r3, r6
 8009328:	e9cd 0100 	strd	r0, r1, [sp]
 800932c:	f7f7 fc14 	bl	8000b58 <__aeabi_dcmpgt>
 8009330:	2800      	cmp	r0, #0
 8009332:	f040 8288 	bne.w	8009846 <_dtoa_r+0x92e>
 8009336:	462a      	mov	r2, r5
 8009338:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800933c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009340:	f7f7 fbec 	bl	8000b1c <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	f040 827c 	bne.w	8009842 <_dtoa_r+0x92a>
 800934a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800934e:	e9cd 2300 	strd	r2, r3, [sp]
 8009352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009354:	2b00      	cmp	r3, #0
 8009356:	f2c0 8150 	blt.w	80095fa <_dtoa_r+0x6e2>
 800935a:	f1ba 0f0e 	cmp.w	sl, #14
 800935e:	f300 814c 	bgt.w	80095fa <_dtoa_r+0x6e2>
 8009362:	4b6a      	ldr	r3, [pc, #424]	; (800950c <_dtoa_r+0x5f4>)
 8009364:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009368:	ed93 7b00 	vldr	d7, [r3]
 800936c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009374:	f280 80d8 	bge.w	8009528 <_dtoa_r+0x610>
 8009378:	f1b9 0f00 	cmp.w	r9, #0
 800937c:	f300 80d4 	bgt.w	8009528 <_dtoa_r+0x610>
 8009380:	f040 825e 	bne.w	8009840 <_dtoa_r+0x928>
 8009384:	2200      	movs	r2, #0
 8009386:	4b66      	ldr	r3, [pc, #408]	; (8009520 <_dtoa_r+0x608>)
 8009388:	ec51 0b17 	vmov	r0, r1, d7
 800938c:	f7f7 f954 	bl	8000638 <__aeabi_dmul>
 8009390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009394:	f7f7 fbd6 	bl	8000b44 <__aeabi_dcmpge>
 8009398:	464f      	mov	r7, r9
 800939a:	464e      	mov	r6, r9
 800939c:	2800      	cmp	r0, #0
 800939e:	f040 8234 	bne.w	800980a <_dtoa_r+0x8f2>
 80093a2:	2331      	movs	r3, #49	; 0x31
 80093a4:	f10b 0501 	add.w	r5, fp, #1
 80093a8:	f88b 3000 	strb.w	r3, [fp]
 80093ac:	f10a 0a01 	add.w	sl, sl, #1
 80093b0:	e22f      	b.n	8009812 <_dtoa_r+0x8fa>
 80093b2:	07f2      	lsls	r2, r6, #31
 80093b4:	d505      	bpl.n	80093c2 <_dtoa_r+0x4aa>
 80093b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ba:	f7f7 f93d 	bl	8000638 <__aeabi_dmul>
 80093be:	3501      	adds	r5, #1
 80093c0:	2301      	movs	r3, #1
 80093c2:	1076      	asrs	r6, r6, #1
 80093c4:	3708      	adds	r7, #8
 80093c6:	e772      	b.n	80092ae <_dtoa_r+0x396>
 80093c8:	2502      	movs	r5, #2
 80093ca:	e774      	b.n	80092b6 <_dtoa_r+0x39e>
 80093cc:	f8cd a020 	str.w	sl, [sp, #32]
 80093d0:	464f      	mov	r7, r9
 80093d2:	e791      	b.n	80092f8 <_dtoa_r+0x3e0>
 80093d4:	4b4d      	ldr	r3, [pc, #308]	; (800950c <_dtoa_r+0x5f4>)
 80093d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80093de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d047      	beq.n	8009474 <_dtoa_r+0x55c>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	2000      	movs	r0, #0
 80093ea:	494e      	ldr	r1, [pc, #312]	; (8009524 <_dtoa_r+0x60c>)
 80093ec:	f7f7 fa4e 	bl	800088c <__aeabi_ddiv>
 80093f0:	462a      	mov	r2, r5
 80093f2:	4633      	mov	r3, r6
 80093f4:	f7f6 ff68 	bl	80002c8 <__aeabi_dsub>
 80093f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093fc:	465d      	mov	r5, fp
 80093fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009402:	f7f7 fbc9 	bl	8000b98 <__aeabi_d2iz>
 8009406:	4606      	mov	r6, r0
 8009408:	f7f7 f8ac 	bl	8000564 <__aeabi_i2d>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009414:	f7f6 ff58 	bl	80002c8 <__aeabi_dsub>
 8009418:	3630      	adds	r6, #48	; 0x30
 800941a:	f805 6b01 	strb.w	r6, [r5], #1
 800941e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009422:	e9cd 0100 	strd	r0, r1, [sp]
 8009426:	f7f7 fb79 	bl	8000b1c <__aeabi_dcmplt>
 800942a:	2800      	cmp	r0, #0
 800942c:	d163      	bne.n	80094f6 <_dtoa_r+0x5de>
 800942e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009432:	2000      	movs	r0, #0
 8009434:	4937      	ldr	r1, [pc, #220]	; (8009514 <_dtoa_r+0x5fc>)
 8009436:	f7f6 ff47 	bl	80002c8 <__aeabi_dsub>
 800943a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800943e:	f7f7 fb6d 	bl	8000b1c <__aeabi_dcmplt>
 8009442:	2800      	cmp	r0, #0
 8009444:	f040 80b7 	bne.w	80095b6 <_dtoa_r+0x69e>
 8009448:	eba5 030b 	sub.w	r3, r5, fp
 800944c:	429f      	cmp	r7, r3
 800944e:	f77f af7c 	ble.w	800934a <_dtoa_r+0x432>
 8009452:	2200      	movs	r2, #0
 8009454:	4b30      	ldr	r3, [pc, #192]	; (8009518 <_dtoa_r+0x600>)
 8009456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800945a:	f7f7 f8ed 	bl	8000638 <__aeabi_dmul>
 800945e:	2200      	movs	r2, #0
 8009460:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009464:	4b2c      	ldr	r3, [pc, #176]	; (8009518 <_dtoa_r+0x600>)
 8009466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800946a:	f7f7 f8e5 	bl	8000638 <__aeabi_dmul>
 800946e:	e9cd 0100 	strd	r0, r1, [sp]
 8009472:	e7c4      	b.n	80093fe <_dtoa_r+0x4e6>
 8009474:	462a      	mov	r2, r5
 8009476:	4633      	mov	r3, r6
 8009478:	f7f7 f8de 	bl	8000638 <__aeabi_dmul>
 800947c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009480:	eb0b 0507 	add.w	r5, fp, r7
 8009484:	465e      	mov	r6, fp
 8009486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800948a:	f7f7 fb85 	bl	8000b98 <__aeabi_d2iz>
 800948e:	4607      	mov	r7, r0
 8009490:	f7f7 f868 	bl	8000564 <__aeabi_i2d>
 8009494:	3730      	adds	r7, #48	; 0x30
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800949e:	f7f6 ff13 	bl	80002c8 <__aeabi_dsub>
 80094a2:	f806 7b01 	strb.w	r7, [r6], #1
 80094a6:	42ae      	cmp	r6, r5
 80094a8:	e9cd 0100 	strd	r0, r1, [sp]
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	d126      	bne.n	8009500 <_dtoa_r+0x5e8>
 80094b2:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <_dtoa_r+0x60c>)
 80094b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094b8:	f7f6 ff08 	bl	80002cc <__adddf3>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094c4:	f7f7 fb48 	bl	8000b58 <__aeabi_dcmpgt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d174      	bne.n	80095b6 <_dtoa_r+0x69e>
 80094cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094d0:	2000      	movs	r0, #0
 80094d2:	4914      	ldr	r1, [pc, #80]	; (8009524 <_dtoa_r+0x60c>)
 80094d4:	f7f6 fef8 	bl	80002c8 <__aeabi_dsub>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094e0:	f7f7 fb1c 	bl	8000b1c <__aeabi_dcmplt>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f43f af30 	beq.w	800934a <_dtoa_r+0x432>
 80094ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094ee:	2b30      	cmp	r3, #48	; 0x30
 80094f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80094f4:	d002      	beq.n	80094fc <_dtoa_r+0x5e4>
 80094f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80094fa:	e04a      	b.n	8009592 <_dtoa_r+0x67a>
 80094fc:	4615      	mov	r5, r2
 80094fe:	e7f4      	b.n	80094ea <_dtoa_r+0x5d2>
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <_dtoa_r+0x600>)
 8009502:	f7f7 f899 	bl	8000638 <__aeabi_dmul>
 8009506:	e9cd 0100 	strd	r0, r1, [sp]
 800950a:	e7bc      	b.n	8009486 <_dtoa_r+0x56e>
 800950c:	0800c0e8 	.word	0x0800c0e8
 8009510:	0800c0c0 	.word	0x0800c0c0
 8009514:	3ff00000 	.word	0x3ff00000
 8009518:	40240000 	.word	0x40240000
 800951c:	401c0000 	.word	0x401c0000
 8009520:	40140000 	.word	0x40140000
 8009524:	3fe00000 	.word	0x3fe00000
 8009528:	e9dd 6700 	ldrd	r6, r7, [sp]
 800952c:	465d      	mov	r5, fp
 800952e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009532:	4630      	mov	r0, r6
 8009534:	4639      	mov	r1, r7
 8009536:	f7f7 f9a9 	bl	800088c <__aeabi_ddiv>
 800953a:	f7f7 fb2d 	bl	8000b98 <__aeabi_d2iz>
 800953e:	4680      	mov	r8, r0
 8009540:	f7f7 f810 	bl	8000564 <__aeabi_i2d>
 8009544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009548:	f7f7 f876 	bl	8000638 <__aeabi_dmul>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4630      	mov	r0, r6
 8009552:	4639      	mov	r1, r7
 8009554:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009558:	f7f6 feb6 	bl	80002c8 <__aeabi_dsub>
 800955c:	f805 6b01 	strb.w	r6, [r5], #1
 8009560:	eba5 060b 	sub.w	r6, r5, fp
 8009564:	45b1      	cmp	r9, r6
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	d139      	bne.n	80095e0 <_dtoa_r+0x6c8>
 800956c:	f7f6 feae 	bl	80002cc <__adddf3>
 8009570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009574:	4606      	mov	r6, r0
 8009576:	460f      	mov	r7, r1
 8009578:	f7f7 faee 	bl	8000b58 <__aeabi_dcmpgt>
 800957c:	b9c8      	cbnz	r0, 80095b2 <_dtoa_r+0x69a>
 800957e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7f7 fabf 	bl	8000b08 <__aeabi_dcmpeq>
 800958a:	b110      	cbz	r0, 8009592 <_dtoa_r+0x67a>
 800958c:	f018 0f01 	tst.w	r8, #1
 8009590:	d10f      	bne.n	80095b2 <_dtoa_r+0x69a>
 8009592:	9904      	ldr	r1, [sp, #16]
 8009594:	4620      	mov	r0, r4
 8009596:	f000 facc 	bl	8009b32 <_Bfree>
 800959a:	2300      	movs	r3, #0
 800959c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800959e:	702b      	strb	r3, [r5, #0]
 80095a0:	f10a 0301 	add.w	r3, sl, #1
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 8241 	beq.w	8009a30 <_dtoa_r+0xb18>
 80095ae:	601d      	str	r5, [r3, #0]
 80095b0:	e23e      	b.n	8009a30 <_dtoa_r+0xb18>
 80095b2:	f8cd a020 	str.w	sl, [sp, #32]
 80095b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ba:	2a39      	cmp	r2, #57	; 0x39
 80095bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80095c0:	d108      	bne.n	80095d4 <_dtoa_r+0x6bc>
 80095c2:	459b      	cmp	fp, r3
 80095c4:	d10a      	bne.n	80095dc <_dtoa_r+0x6c4>
 80095c6:	9b08      	ldr	r3, [sp, #32]
 80095c8:	3301      	adds	r3, #1
 80095ca:	9308      	str	r3, [sp, #32]
 80095cc:	2330      	movs	r3, #48	; 0x30
 80095ce:	f88b 3000 	strb.w	r3, [fp]
 80095d2:	465b      	mov	r3, fp
 80095d4:	781a      	ldrb	r2, [r3, #0]
 80095d6:	3201      	adds	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	e78c      	b.n	80094f6 <_dtoa_r+0x5de>
 80095dc:	461d      	mov	r5, r3
 80095de:	e7ea      	b.n	80095b6 <_dtoa_r+0x69e>
 80095e0:	2200      	movs	r2, #0
 80095e2:	4b9b      	ldr	r3, [pc, #620]	; (8009850 <_dtoa_r+0x938>)
 80095e4:	f7f7 f828 	bl	8000638 <__aeabi_dmul>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f7f7 fa8a 	bl	8000b08 <__aeabi_dcmpeq>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d09a      	beq.n	800952e <_dtoa_r+0x616>
 80095f8:	e7cb      	b.n	8009592 <_dtoa_r+0x67a>
 80095fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f000 808b 	beq.w	8009718 <_dtoa_r+0x800>
 8009602:	9a06      	ldr	r2, [sp, #24]
 8009604:	2a01      	cmp	r2, #1
 8009606:	dc6e      	bgt.n	80096e6 <_dtoa_r+0x7ce>
 8009608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800960a:	2a00      	cmp	r2, #0
 800960c:	d067      	beq.n	80096de <_dtoa_r+0x7c6>
 800960e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009612:	9f07      	ldr	r7, [sp, #28]
 8009614:	9d05      	ldr	r5, [sp, #20]
 8009616:	9a05      	ldr	r2, [sp, #20]
 8009618:	2101      	movs	r1, #1
 800961a:	441a      	add	r2, r3
 800961c:	4620      	mov	r0, r4
 800961e:	9205      	str	r2, [sp, #20]
 8009620:	4498      	add	r8, r3
 8009622:	f000 fb26 	bl	8009c72 <__i2b>
 8009626:	4606      	mov	r6, r0
 8009628:	2d00      	cmp	r5, #0
 800962a:	dd0c      	ble.n	8009646 <_dtoa_r+0x72e>
 800962c:	f1b8 0f00 	cmp.w	r8, #0
 8009630:	dd09      	ble.n	8009646 <_dtoa_r+0x72e>
 8009632:	4545      	cmp	r5, r8
 8009634:	9a05      	ldr	r2, [sp, #20]
 8009636:	462b      	mov	r3, r5
 8009638:	bfa8      	it	ge
 800963a:	4643      	movge	r3, r8
 800963c:	1ad2      	subs	r2, r2, r3
 800963e:	9205      	str	r2, [sp, #20]
 8009640:	1aed      	subs	r5, r5, r3
 8009642:	eba8 0803 	sub.w	r8, r8, r3
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	b1eb      	cbz	r3, 8009686 <_dtoa_r+0x76e>
 800964a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964c:	2b00      	cmp	r3, #0
 800964e:	d067      	beq.n	8009720 <_dtoa_r+0x808>
 8009650:	b18f      	cbz	r7, 8009676 <_dtoa_r+0x75e>
 8009652:	4631      	mov	r1, r6
 8009654:	463a      	mov	r2, r7
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fbaa 	bl	8009db0 <__pow5mult>
 800965c:	9a04      	ldr	r2, [sp, #16]
 800965e:	4601      	mov	r1, r0
 8009660:	4606      	mov	r6, r0
 8009662:	4620      	mov	r0, r4
 8009664:	f000 fb0e 	bl	8009c84 <__multiply>
 8009668:	9904      	ldr	r1, [sp, #16]
 800966a:	9008      	str	r0, [sp, #32]
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fa60 	bl	8009b32 <_Bfree>
 8009672:	9b08      	ldr	r3, [sp, #32]
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	9b07      	ldr	r3, [sp, #28]
 8009678:	1bda      	subs	r2, r3, r7
 800967a:	d004      	beq.n	8009686 <_dtoa_r+0x76e>
 800967c:	9904      	ldr	r1, [sp, #16]
 800967e:	4620      	mov	r0, r4
 8009680:	f000 fb96 	bl	8009db0 <__pow5mult>
 8009684:	9004      	str	r0, [sp, #16]
 8009686:	2101      	movs	r1, #1
 8009688:	4620      	mov	r0, r4
 800968a:	f000 faf2 	bl	8009c72 <__i2b>
 800968e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009690:	4607      	mov	r7, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 81d0 	beq.w	8009a38 <_dtoa_r+0xb20>
 8009698:	461a      	mov	r2, r3
 800969a:	4601      	mov	r1, r0
 800969c:	4620      	mov	r0, r4
 800969e:	f000 fb87 	bl	8009db0 <__pow5mult>
 80096a2:	9b06      	ldr	r3, [sp, #24]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	4607      	mov	r7, r0
 80096a8:	dc40      	bgt.n	800972c <_dtoa_r+0x814>
 80096aa:	9b00      	ldr	r3, [sp, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d139      	bne.n	8009724 <_dtoa_r+0x80c>
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d136      	bne.n	8009728 <_dtoa_r+0x810>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096c0:	0d1b      	lsrs	r3, r3, #20
 80096c2:	051b      	lsls	r3, r3, #20
 80096c4:	b12b      	cbz	r3, 80096d2 <_dtoa_r+0x7ba>
 80096c6:	9b05      	ldr	r3, [sp, #20]
 80096c8:	3301      	adds	r3, #1
 80096ca:	9305      	str	r3, [sp, #20]
 80096cc:	f108 0801 	add.w	r8, r8, #1
 80096d0:	2301      	movs	r3, #1
 80096d2:	9307      	str	r3, [sp, #28]
 80096d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d12a      	bne.n	8009730 <_dtoa_r+0x818>
 80096da:	2001      	movs	r0, #1
 80096dc:	e030      	b.n	8009740 <_dtoa_r+0x828>
 80096de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096e4:	e795      	b.n	8009612 <_dtoa_r+0x6fa>
 80096e6:	9b07      	ldr	r3, [sp, #28]
 80096e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80096ec:	42bb      	cmp	r3, r7
 80096ee:	bfbf      	itttt	lt
 80096f0:	9b07      	ldrlt	r3, [sp, #28]
 80096f2:	9707      	strlt	r7, [sp, #28]
 80096f4:	1afa      	sublt	r2, r7, r3
 80096f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80096f8:	bfbb      	ittet	lt
 80096fa:	189b      	addlt	r3, r3, r2
 80096fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80096fe:	1bdf      	subge	r7, r3, r7
 8009700:	2700      	movlt	r7, #0
 8009702:	f1b9 0f00 	cmp.w	r9, #0
 8009706:	bfb5      	itete	lt
 8009708:	9b05      	ldrlt	r3, [sp, #20]
 800970a:	9d05      	ldrge	r5, [sp, #20]
 800970c:	eba3 0509 	sublt.w	r5, r3, r9
 8009710:	464b      	movge	r3, r9
 8009712:	bfb8      	it	lt
 8009714:	2300      	movlt	r3, #0
 8009716:	e77e      	b.n	8009616 <_dtoa_r+0x6fe>
 8009718:	9f07      	ldr	r7, [sp, #28]
 800971a:	9d05      	ldr	r5, [sp, #20]
 800971c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800971e:	e783      	b.n	8009628 <_dtoa_r+0x710>
 8009720:	9a07      	ldr	r2, [sp, #28]
 8009722:	e7ab      	b.n	800967c <_dtoa_r+0x764>
 8009724:	2300      	movs	r3, #0
 8009726:	e7d4      	b.n	80096d2 <_dtoa_r+0x7ba>
 8009728:	9b00      	ldr	r3, [sp, #0]
 800972a:	e7d2      	b.n	80096d2 <_dtoa_r+0x7ba>
 800972c:	2300      	movs	r3, #0
 800972e:	9307      	str	r3, [sp, #28]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009736:	6918      	ldr	r0, [r3, #16]
 8009738:	f000 fa4d 	bl	8009bd6 <__hi0bits>
 800973c:	f1c0 0020 	rsb	r0, r0, #32
 8009740:	4440      	add	r0, r8
 8009742:	f010 001f 	ands.w	r0, r0, #31
 8009746:	d047      	beq.n	80097d8 <_dtoa_r+0x8c0>
 8009748:	f1c0 0320 	rsb	r3, r0, #32
 800974c:	2b04      	cmp	r3, #4
 800974e:	dd3b      	ble.n	80097c8 <_dtoa_r+0x8b0>
 8009750:	9b05      	ldr	r3, [sp, #20]
 8009752:	f1c0 001c 	rsb	r0, r0, #28
 8009756:	4403      	add	r3, r0
 8009758:	9305      	str	r3, [sp, #20]
 800975a:	4405      	add	r5, r0
 800975c:	4480      	add	r8, r0
 800975e:	9b05      	ldr	r3, [sp, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x858>
 8009764:	461a      	mov	r2, r3
 8009766:	9904      	ldr	r1, [sp, #16]
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fb6f 	bl	8009e4c <__lshift>
 800976e:	9004      	str	r0, [sp, #16]
 8009770:	f1b8 0f00 	cmp.w	r8, #0
 8009774:	dd05      	ble.n	8009782 <_dtoa_r+0x86a>
 8009776:	4639      	mov	r1, r7
 8009778:	4642      	mov	r2, r8
 800977a:	4620      	mov	r0, r4
 800977c:	f000 fb66 	bl	8009e4c <__lshift>
 8009780:	4607      	mov	r7, r0
 8009782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009784:	b353      	cbz	r3, 80097dc <_dtoa_r+0x8c4>
 8009786:	4639      	mov	r1, r7
 8009788:	9804      	ldr	r0, [sp, #16]
 800978a:	f000 fbb3 	bl	8009ef4 <__mcmp>
 800978e:	2800      	cmp	r0, #0
 8009790:	da24      	bge.n	80097dc <_dtoa_r+0x8c4>
 8009792:	2300      	movs	r3, #0
 8009794:	220a      	movs	r2, #10
 8009796:	9904      	ldr	r1, [sp, #16]
 8009798:	4620      	mov	r0, r4
 800979a:	f000 f9e1 	bl	8009b60 <__multadd>
 800979e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a0:	9004      	str	r0, [sp, #16]
 80097a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 814d 	beq.w	8009a46 <_dtoa_r+0xb2e>
 80097ac:	2300      	movs	r3, #0
 80097ae:	4631      	mov	r1, r6
 80097b0:	220a      	movs	r2, #10
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 f9d4 	bl	8009b60 <__multadd>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	4606      	mov	r6, r0
 80097be:	dc4f      	bgt.n	8009860 <_dtoa_r+0x948>
 80097c0:	9b06      	ldr	r3, [sp, #24]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	dd4c      	ble.n	8009860 <_dtoa_r+0x948>
 80097c6:	e011      	b.n	80097ec <_dtoa_r+0x8d4>
 80097c8:	d0c9      	beq.n	800975e <_dtoa_r+0x846>
 80097ca:	9a05      	ldr	r2, [sp, #20]
 80097cc:	331c      	adds	r3, #28
 80097ce:	441a      	add	r2, r3
 80097d0:	9205      	str	r2, [sp, #20]
 80097d2:	441d      	add	r5, r3
 80097d4:	4498      	add	r8, r3
 80097d6:	e7c2      	b.n	800975e <_dtoa_r+0x846>
 80097d8:	4603      	mov	r3, r0
 80097da:	e7f6      	b.n	80097ca <_dtoa_r+0x8b2>
 80097dc:	f1b9 0f00 	cmp.w	r9, #0
 80097e0:	dc38      	bgt.n	8009854 <_dtoa_r+0x93c>
 80097e2:	9b06      	ldr	r3, [sp, #24]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	dd35      	ble.n	8009854 <_dtoa_r+0x93c>
 80097e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80097ec:	9b02      	ldr	r3, [sp, #8]
 80097ee:	b963      	cbnz	r3, 800980a <_dtoa_r+0x8f2>
 80097f0:	4639      	mov	r1, r7
 80097f2:	2205      	movs	r2, #5
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 f9b3 	bl	8009b60 <__multadd>
 80097fa:	4601      	mov	r1, r0
 80097fc:	4607      	mov	r7, r0
 80097fe:	9804      	ldr	r0, [sp, #16]
 8009800:	f000 fb78 	bl	8009ef4 <__mcmp>
 8009804:	2800      	cmp	r0, #0
 8009806:	f73f adcc 	bgt.w	80093a2 <_dtoa_r+0x48a>
 800980a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800980c:	465d      	mov	r5, fp
 800980e:	ea6f 0a03 	mvn.w	sl, r3
 8009812:	f04f 0900 	mov.w	r9, #0
 8009816:	4639      	mov	r1, r7
 8009818:	4620      	mov	r0, r4
 800981a:	f000 f98a 	bl	8009b32 <_Bfree>
 800981e:	2e00      	cmp	r6, #0
 8009820:	f43f aeb7 	beq.w	8009592 <_dtoa_r+0x67a>
 8009824:	f1b9 0f00 	cmp.w	r9, #0
 8009828:	d005      	beq.n	8009836 <_dtoa_r+0x91e>
 800982a:	45b1      	cmp	r9, r6
 800982c:	d003      	beq.n	8009836 <_dtoa_r+0x91e>
 800982e:	4649      	mov	r1, r9
 8009830:	4620      	mov	r0, r4
 8009832:	f000 f97e 	bl	8009b32 <_Bfree>
 8009836:	4631      	mov	r1, r6
 8009838:	4620      	mov	r0, r4
 800983a:	f000 f97a 	bl	8009b32 <_Bfree>
 800983e:	e6a8      	b.n	8009592 <_dtoa_r+0x67a>
 8009840:	2700      	movs	r7, #0
 8009842:	463e      	mov	r6, r7
 8009844:	e7e1      	b.n	800980a <_dtoa_r+0x8f2>
 8009846:	f8dd a020 	ldr.w	sl, [sp, #32]
 800984a:	463e      	mov	r6, r7
 800984c:	e5a9      	b.n	80093a2 <_dtoa_r+0x48a>
 800984e:	bf00      	nop
 8009850:	40240000 	.word	0x40240000
 8009854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009856:	f8cd 9008 	str.w	r9, [sp, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 80fa 	beq.w	8009a54 <_dtoa_r+0xb3c>
 8009860:	2d00      	cmp	r5, #0
 8009862:	dd05      	ble.n	8009870 <_dtoa_r+0x958>
 8009864:	4631      	mov	r1, r6
 8009866:	462a      	mov	r2, r5
 8009868:	4620      	mov	r0, r4
 800986a:	f000 faef 	bl	8009e4c <__lshift>
 800986e:	4606      	mov	r6, r0
 8009870:	9b07      	ldr	r3, [sp, #28]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d04c      	beq.n	8009910 <_dtoa_r+0x9f8>
 8009876:	6871      	ldr	r1, [r6, #4]
 8009878:	4620      	mov	r0, r4
 800987a:	f000 f926 	bl	8009aca <_Balloc>
 800987e:	6932      	ldr	r2, [r6, #16]
 8009880:	3202      	adds	r2, #2
 8009882:	4605      	mov	r5, r0
 8009884:	0092      	lsls	r2, r2, #2
 8009886:	f106 010c 	add.w	r1, r6, #12
 800988a:	300c      	adds	r0, #12
 800988c:	f000 f912 	bl	8009ab4 <memcpy>
 8009890:	2201      	movs	r2, #1
 8009892:	4629      	mov	r1, r5
 8009894:	4620      	mov	r0, r4
 8009896:	f000 fad9 	bl	8009e4c <__lshift>
 800989a:	9b00      	ldr	r3, [sp, #0]
 800989c:	f8cd b014 	str.w	fp, [sp, #20]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	46b1      	mov	r9, r6
 80098a6:	9307      	str	r3, [sp, #28]
 80098a8:	4606      	mov	r6, r0
 80098aa:	4639      	mov	r1, r7
 80098ac:	9804      	ldr	r0, [sp, #16]
 80098ae:	f7ff faa5 	bl	8008dfc <quorem>
 80098b2:	4649      	mov	r1, r9
 80098b4:	4605      	mov	r5, r0
 80098b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80098ba:	9804      	ldr	r0, [sp, #16]
 80098bc:	f000 fb1a 	bl	8009ef4 <__mcmp>
 80098c0:	4632      	mov	r2, r6
 80098c2:	9000      	str	r0, [sp, #0]
 80098c4:	4639      	mov	r1, r7
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 fb2e 	bl	8009f28 <__mdiff>
 80098cc:	68c3      	ldr	r3, [r0, #12]
 80098ce:	4602      	mov	r2, r0
 80098d0:	bb03      	cbnz	r3, 8009914 <_dtoa_r+0x9fc>
 80098d2:	4601      	mov	r1, r0
 80098d4:	9008      	str	r0, [sp, #32]
 80098d6:	9804      	ldr	r0, [sp, #16]
 80098d8:	f000 fb0c 	bl	8009ef4 <__mcmp>
 80098dc:	9a08      	ldr	r2, [sp, #32]
 80098de:	4603      	mov	r3, r0
 80098e0:	4611      	mov	r1, r2
 80098e2:	4620      	mov	r0, r4
 80098e4:	9308      	str	r3, [sp, #32]
 80098e6:	f000 f924 	bl	8009b32 <_Bfree>
 80098ea:	9b08      	ldr	r3, [sp, #32]
 80098ec:	b9a3      	cbnz	r3, 8009918 <_dtoa_r+0xa00>
 80098ee:	9a06      	ldr	r2, [sp, #24]
 80098f0:	b992      	cbnz	r2, 8009918 <_dtoa_r+0xa00>
 80098f2:	9a07      	ldr	r2, [sp, #28]
 80098f4:	b982      	cbnz	r2, 8009918 <_dtoa_r+0xa00>
 80098f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098fa:	d029      	beq.n	8009950 <_dtoa_r+0xa38>
 80098fc:	9b00      	ldr	r3, [sp, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	dd01      	ble.n	8009906 <_dtoa_r+0x9ee>
 8009902:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009906:	9b05      	ldr	r3, [sp, #20]
 8009908:	1c5d      	adds	r5, r3, #1
 800990a:	f883 8000 	strb.w	r8, [r3]
 800990e:	e782      	b.n	8009816 <_dtoa_r+0x8fe>
 8009910:	4630      	mov	r0, r6
 8009912:	e7c2      	b.n	800989a <_dtoa_r+0x982>
 8009914:	2301      	movs	r3, #1
 8009916:	e7e3      	b.n	80098e0 <_dtoa_r+0x9c8>
 8009918:	9a00      	ldr	r2, [sp, #0]
 800991a:	2a00      	cmp	r2, #0
 800991c:	db04      	blt.n	8009928 <_dtoa_r+0xa10>
 800991e:	d125      	bne.n	800996c <_dtoa_r+0xa54>
 8009920:	9a06      	ldr	r2, [sp, #24]
 8009922:	bb1a      	cbnz	r2, 800996c <_dtoa_r+0xa54>
 8009924:	9a07      	ldr	r2, [sp, #28]
 8009926:	bb0a      	cbnz	r2, 800996c <_dtoa_r+0xa54>
 8009928:	2b00      	cmp	r3, #0
 800992a:	ddec      	ble.n	8009906 <_dtoa_r+0x9ee>
 800992c:	2201      	movs	r2, #1
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fa8b 	bl	8009e4c <__lshift>
 8009936:	4639      	mov	r1, r7
 8009938:	9004      	str	r0, [sp, #16]
 800993a:	f000 fadb 	bl	8009ef4 <__mcmp>
 800993e:	2800      	cmp	r0, #0
 8009940:	dc03      	bgt.n	800994a <_dtoa_r+0xa32>
 8009942:	d1e0      	bne.n	8009906 <_dtoa_r+0x9ee>
 8009944:	f018 0f01 	tst.w	r8, #1
 8009948:	d0dd      	beq.n	8009906 <_dtoa_r+0x9ee>
 800994a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800994e:	d1d8      	bne.n	8009902 <_dtoa_r+0x9ea>
 8009950:	9b05      	ldr	r3, [sp, #20]
 8009952:	9a05      	ldr	r2, [sp, #20]
 8009954:	1c5d      	adds	r5, r3, #1
 8009956:	2339      	movs	r3, #57	; 0x39
 8009958:	7013      	strb	r3, [r2, #0]
 800995a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800995e:	2b39      	cmp	r3, #57	; 0x39
 8009960:	f105 32ff 	add.w	r2, r5, #4294967295
 8009964:	d04f      	beq.n	8009a06 <_dtoa_r+0xaee>
 8009966:	3301      	adds	r3, #1
 8009968:	7013      	strb	r3, [r2, #0]
 800996a:	e754      	b.n	8009816 <_dtoa_r+0x8fe>
 800996c:	9a05      	ldr	r2, [sp, #20]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f102 0501 	add.w	r5, r2, #1
 8009974:	dd06      	ble.n	8009984 <_dtoa_r+0xa6c>
 8009976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800997a:	d0e9      	beq.n	8009950 <_dtoa_r+0xa38>
 800997c:	f108 0801 	add.w	r8, r8, #1
 8009980:	9b05      	ldr	r3, [sp, #20]
 8009982:	e7c2      	b.n	800990a <_dtoa_r+0x9f2>
 8009984:	9a02      	ldr	r2, [sp, #8]
 8009986:	f805 8c01 	strb.w	r8, [r5, #-1]
 800998a:	eba5 030b 	sub.w	r3, r5, fp
 800998e:	4293      	cmp	r3, r2
 8009990:	d021      	beq.n	80099d6 <_dtoa_r+0xabe>
 8009992:	2300      	movs	r3, #0
 8009994:	220a      	movs	r2, #10
 8009996:	9904      	ldr	r1, [sp, #16]
 8009998:	4620      	mov	r0, r4
 800999a:	f000 f8e1 	bl	8009b60 <__multadd>
 800999e:	45b1      	cmp	r9, r6
 80099a0:	9004      	str	r0, [sp, #16]
 80099a2:	f04f 0300 	mov.w	r3, #0
 80099a6:	f04f 020a 	mov.w	r2, #10
 80099aa:	4649      	mov	r1, r9
 80099ac:	4620      	mov	r0, r4
 80099ae:	d105      	bne.n	80099bc <_dtoa_r+0xaa4>
 80099b0:	f000 f8d6 	bl	8009b60 <__multadd>
 80099b4:	4681      	mov	r9, r0
 80099b6:	4606      	mov	r6, r0
 80099b8:	9505      	str	r5, [sp, #20]
 80099ba:	e776      	b.n	80098aa <_dtoa_r+0x992>
 80099bc:	f000 f8d0 	bl	8009b60 <__multadd>
 80099c0:	4631      	mov	r1, r6
 80099c2:	4681      	mov	r9, r0
 80099c4:	2300      	movs	r3, #0
 80099c6:	220a      	movs	r2, #10
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 f8c9 	bl	8009b60 <__multadd>
 80099ce:	4606      	mov	r6, r0
 80099d0:	e7f2      	b.n	80099b8 <_dtoa_r+0xaa0>
 80099d2:	f04f 0900 	mov.w	r9, #0
 80099d6:	2201      	movs	r2, #1
 80099d8:	9904      	ldr	r1, [sp, #16]
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fa36 	bl	8009e4c <__lshift>
 80099e0:	4639      	mov	r1, r7
 80099e2:	9004      	str	r0, [sp, #16]
 80099e4:	f000 fa86 	bl	8009ef4 <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	dcb6      	bgt.n	800995a <_dtoa_r+0xa42>
 80099ec:	d102      	bne.n	80099f4 <_dtoa_r+0xadc>
 80099ee:	f018 0f01 	tst.w	r8, #1
 80099f2:	d1b2      	bne.n	800995a <_dtoa_r+0xa42>
 80099f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80099fe:	f47f af0a 	bne.w	8009816 <_dtoa_r+0x8fe>
 8009a02:	4615      	mov	r5, r2
 8009a04:	e7f6      	b.n	80099f4 <_dtoa_r+0xadc>
 8009a06:	4593      	cmp	fp, r2
 8009a08:	d105      	bne.n	8009a16 <_dtoa_r+0xafe>
 8009a0a:	2331      	movs	r3, #49	; 0x31
 8009a0c:	f10a 0a01 	add.w	sl, sl, #1
 8009a10:	f88b 3000 	strb.w	r3, [fp]
 8009a14:	e6ff      	b.n	8009816 <_dtoa_r+0x8fe>
 8009a16:	4615      	mov	r5, r2
 8009a18:	e79f      	b.n	800995a <_dtoa_r+0xa42>
 8009a1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009a80 <_dtoa_r+0xb68>
 8009a1e:	e007      	b.n	8009a30 <_dtoa_r+0xb18>
 8009a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a22:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009a84 <_dtoa_r+0xb6c>
 8009a26:	b11b      	cbz	r3, 8009a30 <_dtoa_r+0xb18>
 8009a28:	f10b 0308 	add.w	r3, fp, #8
 8009a2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	4658      	mov	r0, fp
 8009a32:	b017      	add	sp, #92	; 0x5c
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	9b06      	ldr	r3, [sp, #24]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	f77f ae35 	ble.w	80096aa <_dtoa_r+0x792>
 8009a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a42:	9307      	str	r3, [sp, #28]
 8009a44:	e649      	b.n	80096da <_dtoa_r+0x7c2>
 8009a46:	9b02      	ldr	r3, [sp, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dc03      	bgt.n	8009a54 <_dtoa_r+0xb3c>
 8009a4c:	9b06      	ldr	r3, [sp, #24]
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	f73f aecc 	bgt.w	80097ec <_dtoa_r+0x8d4>
 8009a54:	465d      	mov	r5, fp
 8009a56:	4639      	mov	r1, r7
 8009a58:	9804      	ldr	r0, [sp, #16]
 8009a5a:	f7ff f9cf 	bl	8008dfc <quorem>
 8009a5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a62:	f805 8b01 	strb.w	r8, [r5], #1
 8009a66:	9a02      	ldr	r2, [sp, #8]
 8009a68:	eba5 030b 	sub.w	r3, r5, fp
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	ddb0      	ble.n	80099d2 <_dtoa_r+0xaba>
 8009a70:	2300      	movs	r3, #0
 8009a72:	220a      	movs	r2, #10
 8009a74:	9904      	ldr	r1, [sp, #16]
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 f872 	bl	8009b60 <__multadd>
 8009a7c:	9004      	str	r0, [sp, #16]
 8009a7e:	e7ea      	b.n	8009a56 <_dtoa_r+0xb3e>
 8009a80:	0800c088 	.word	0x0800c088
 8009a84:	0800c0ac 	.word	0x0800c0ac

08009a88 <_localeconv_r>:
 8009a88:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <_localeconv_r+0x14>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6a18      	ldr	r0, [r3, #32]
 8009a8e:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <_localeconv_r+0x18>)
 8009a90:	2800      	cmp	r0, #0
 8009a92:	bf08      	it	eq
 8009a94:	4618      	moveq	r0, r3
 8009a96:	30f0      	adds	r0, #240	; 0xf0
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	20000040 	.word	0x20000040
 8009aa0:	200000a4 	.word	0x200000a4

08009aa4 <malloc>:
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <malloc+0xc>)
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f000 bb45 	b.w	800a138 <_malloc_r>
 8009aae:	bf00      	nop
 8009ab0:	20000040 	.word	0x20000040

08009ab4 <memcpy>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	1e43      	subs	r3, r0, #1
 8009ab8:	440a      	add	r2, r1
 8009aba:	4291      	cmp	r1, r2
 8009abc:	d100      	bne.n	8009ac0 <memcpy+0xc>
 8009abe:	bd10      	pop	{r4, pc}
 8009ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ac8:	e7f7      	b.n	8009aba <memcpy+0x6>

08009aca <_Balloc>:
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ace:	4604      	mov	r4, r0
 8009ad0:	460e      	mov	r6, r1
 8009ad2:	b93d      	cbnz	r5, 8009ae4 <_Balloc+0x1a>
 8009ad4:	2010      	movs	r0, #16
 8009ad6:	f7ff ffe5 	bl	8009aa4 <malloc>
 8009ada:	6260      	str	r0, [r4, #36]	; 0x24
 8009adc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ae0:	6005      	str	r5, [r0, #0]
 8009ae2:	60c5      	str	r5, [r0, #12]
 8009ae4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009ae6:	68eb      	ldr	r3, [r5, #12]
 8009ae8:	b183      	cbz	r3, 8009b0c <_Balloc+0x42>
 8009aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009af2:	b9b8      	cbnz	r0, 8009b24 <_Balloc+0x5a>
 8009af4:	2101      	movs	r1, #1
 8009af6:	fa01 f506 	lsl.w	r5, r1, r6
 8009afa:	1d6a      	adds	r2, r5, #5
 8009afc:	0092      	lsls	r2, r2, #2
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 fabe 	bl	800a080 <_calloc_r>
 8009b04:	b160      	cbz	r0, 8009b20 <_Balloc+0x56>
 8009b06:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009b0a:	e00e      	b.n	8009b2a <_Balloc+0x60>
 8009b0c:	2221      	movs	r2, #33	; 0x21
 8009b0e:	2104      	movs	r1, #4
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fab5 	bl	800a080 <_calloc_r>
 8009b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b18:	60e8      	str	r0, [r5, #12]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e4      	bne.n	8009aea <_Balloc+0x20>
 8009b20:	2000      	movs	r0, #0
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	6802      	ldr	r2, [r0, #0]
 8009b26:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b30:	e7f7      	b.n	8009b22 <_Balloc+0x58>

08009b32 <_Bfree>:
 8009b32:	b570      	push	{r4, r5, r6, lr}
 8009b34:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b36:	4606      	mov	r6, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	b93c      	cbnz	r4, 8009b4c <_Bfree+0x1a>
 8009b3c:	2010      	movs	r0, #16
 8009b3e:	f7ff ffb1 	bl	8009aa4 <malloc>
 8009b42:	6270      	str	r0, [r6, #36]	; 0x24
 8009b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b48:	6004      	str	r4, [r0, #0]
 8009b4a:	60c4      	str	r4, [r0, #12]
 8009b4c:	b13d      	cbz	r5, 8009b5e <_Bfree+0x2c>
 8009b4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b50:	686a      	ldr	r2, [r5, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b58:	6029      	str	r1, [r5, #0]
 8009b5a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}

08009b60 <__multadd>:
 8009b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b64:	690d      	ldr	r5, [r1, #16]
 8009b66:	461f      	mov	r7, r3
 8009b68:	4606      	mov	r6, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f101 0c14 	add.w	ip, r1, #20
 8009b70:	2300      	movs	r3, #0
 8009b72:	f8dc 0000 	ldr.w	r0, [ip]
 8009b76:	b281      	uxth	r1, r0
 8009b78:	fb02 7101 	mla	r1, r2, r1, r7
 8009b7c:	0c0f      	lsrs	r7, r1, #16
 8009b7e:	0c00      	lsrs	r0, r0, #16
 8009b80:	fb02 7000 	mla	r0, r2, r0, r7
 8009b84:	b289      	uxth	r1, r1
 8009b86:	3301      	adds	r3, #1
 8009b88:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009b8c:	429d      	cmp	r5, r3
 8009b8e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009b92:	f84c 1b04 	str.w	r1, [ip], #4
 8009b96:	dcec      	bgt.n	8009b72 <__multadd+0x12>
 8009b98:	b1d7      	cbz	r7, 8009bd0 <__multadd+0x70>
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	42ab      	cmp	r3, r5
 8009b9e:	dc12      	bgt.n	8009bc6 <__multadd+0x66>
 8009ba0:	6861      	ldr	r1, [r4, #4]
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	3101      	adds	r1, #1
 8009ba6:	f7ff ff90 	bl	8009aca <_Balloc>
 8009baa:	6922      	ldr	r2, [r4, #16]
 8009bac:	3202      	adds	r2, #2
 8009bae:	f104 010c 	add.w	r1, r4, #12
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	0092      	lsls	r2, r2, #2
 8009bb6:	300c      	adds	r0, #12
 8009bb8:	f7ff ff7c 	bl	8009ab4 <memcpy>
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7ff ffb7 	bl	8009b32 <_Bfree>
 8009bc4:	4644      	mov	r4, r8
 8009bc6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bca:	3501      	adds	r5, #1
 8009bcc:	615f      	str	r7, [r3, #20]
 8009bce:	6125      	str	r5, [r4, #16]
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bd6 <__hi0bits>:
 8009bd6:	0c02      	lsrs	r2, r0, #16
 8009bd8:	0412      	lsls	r2, r2, #16
 8009bda:	4603      	mov	r3, r0
 8009bdc:	b9b2      	cbnz	r2, 8009c0c <__hi0bits+0x36>
 8009bde:	0403      	lsls	r3, r0, #16
 8009be0:	2010      	movs	r0, #16
 8009be2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009be6:	bf04      	itt	eq
 8009be8:	021b      	lsleq	r3, r3, #8
 8009bea:	3008      	addeq	r0, #8
 8009bec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009bf0:	bf04      	itt	eq
 8009bf2:	011b      	lsleq	r3, r3, #4
 8009bf4:	3004      	addeq	r0, #4
 8009bf6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009bfa:	bf04      	itt	eq
 8009bfc:	009b      	lsleq	r3, r3, #2
 8009bfe:	3002      	addeq	r0, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	db06      	blt.n	8009c12 <__hi0bits+0x3c>
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	d503      	bpl.n	8009c10 <__hi0bits+0x3a>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	4770      	bx	lr
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e7e8      	b.n	8009be2 <__hi0bits+0xc>
 8009c10:	2020      	movs	r0, #32
 8009c12:	4770      	bx	lr

08009c14 <__lo0bits>:
 8009c14:	6803      	ldr	r3, [r0, #0]
 8009c16:	f013 0207 	ands.w	r2, r3, #7
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	d00b      	beq.n	8009c36 <__lo0bits+0x22>
 8009c1e:	07da      	lsls	r2, r3, #31
 8009c20:	d423      	bmi.n	8009c6a <__lo0bits+0x56>
 8009c22:	0798      	lsls	r0, r3, #30
 8009c24:	bf49      	itett	mi
 8009c26:	085b      	lsrmi	r3, r3, #1
 8009c28:	089b      	lsrpl	r3, r3, #2
 8009c2a:	2001      	movmi	r0, #1
 8009c2c:	600b      	strmi	r3, [r1, #0]
 8009c2e:	bf5c      	itt	pl
 8009c30:	600b      	strpl	r3, [r1, #0]
 8009c32:	2002      	movpl	r0, #2
 8009c34:	4770      	bx	lr
 8009c36:	b298      	uxth	r0, r3
 8009c38:	b9a8      	cbnz	r0, 8009c66 <__lo0bits+0x52>
 8009c3a:	0c1b      	lsrs	r3, r3, #16
 8009c3c:	2010      	movs	r0, #16
 8009c3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c42:	bf04      	itt	eq
 8009c44:	0a1b      	lsreq	r3, r3, #8
 8009c46:	3008      	addeq	r0, #8
 8009c48:	071a      	lsls	r2, r3, #28
 8009c4a:	bf04      	itt	eq
 8009c4c:	091b      	lsreq	r3, r3, #4
 8009c4e:	3004      	addeq	r0, #4
 8009c50:	079a      	lsls	r2, r3, #30
 8009c52:	bf04      	itt	eq
 8009c54:	089b      	lsreq	r3, r3, #2
 8009c56:	3002      	addeq	r0, #2
 8009c58:	07da      	lsls	r2, r3, #31
 8009c5a:	d402      	bmi.n	8009c62 <__lo0bits+0x4e>
 8009c5c:	085b      	lsrs	r3, r3, #1
 8009c5e:	d006      	beq.n	8009c6e <__lo0bits+0x5a>
 8009c60:	3001      	adds	r0, #1
 8009c62:	600b      	str	r3, [r1, #0]
 8009c64:	4770      	bx	lr
 8009c66:	4610      	mov	r0, r2
 8009c68:	e7e9      	b.n	8009c3e <__lo0bits+0x2a>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	4770      	bx	lr
 8009c6e:	2020      	movs	r0, #32
 8009c70:	4770      	bx	lr

08009c72 <__i2b>:
 8009c72:	b510      	push	{r4, lr}
 8009c74:	460c      	mov	r4, r1
 8009c76:	2101      	movs	r1, #1
 8009c78:	f7ff ff27 	bl	8009aca <_Balloc>
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	6144      	str	r4, [r0, #20]
 8009c80:	6102      	str	r2, [r0, #16]
 8009c82:	bd10      	pop	{r4, pc}

08009c84 <__multiply>:
 8009c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	4614      	mov	r4, r2
 8009c8a:	690a      	ldr	r2, [r1, #16]
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	bfb8      	it	lt
 8009c92:	460b      	movlt	r3, r1
 8009c94:	4688      	mov	r8, r1
 8009c96:	bfbc      	itt	lt
 8009c98:	46a0      	movlt	r8, r4
 8009c9a:	461c      	movlt	r4, r3
 8009c9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ca0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ca4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ca8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009cac:	eb07 0609 	add.w	r6, r7, r9
 8009cb0:	42b3      	cmp	r3, r6
 8009cb2:	bfb8      	it	lt
 8009cb4:	3101      	addlt	r1, #1
 8009cb6:	f7ff ff08 	bl	8009aca <_Balloc>
 8009cba:	f100 0514 	add.w	r5, r0, #20
 8009cbe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4573      	cmp	r3, lr
 8009cc8:	d316      	bcc.n	8009cf8 <__multiply+0x74>
 8009cca:	f104 0214 	add.w	r2, r4, #20
 8009cce:	f108 0114 	add.w	r1, r8, #20
 8009cd2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009cd6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	9b00      	ldr	r3, [sp, #0]
 8009cde:	9201      	str	r2, [sp, #4]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d80c      	bhi.n	8009cfe <__multiply+0x7a>
 8009ce4:	2e00      	cmp	r6, #0
 8009ce6:	dd03      	ble.n	8009cf0 <__multiply+0x6c>
 8009ce8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05d      	beq.n	8009dac <__multiply+0x128>
 8009cf0:	6106      	str	r6, [r0, #16]
 8009cf2:	b003      	add	sp, #12
 8009cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf8:	f843 2b04 	str.w	r2, [r3], #4
 8009cfc:	e7e3      	b.n	8009cc6 <__multiply+0x42>
 8009cfe:	f8b2 b000 	ldrh.w	fp, [r2]
 8009d02:	f1bb 0f00 	cmp.w	fp, #0
 8009d06:	d023      	beq.n	8009d50 <__multiply+0xcc>
 8009d08:	4689      	mov	r9, r1
 8009d0a:	46ac      	mov	ip, r5
 8009d0c:	f04f 0800 	mov.w	r8, #0
 8009d10:	f859 4b04 	ldr.w	r4, [r9], #4
 8009d14:	f8dc a000 	ldr.w	sl, [ip]
 8009d18:	b2a3      	uxth	r3, r4
 8009d1a:	fa1f fa8a 	uxth.w	sl, sl
 8009d1e:	fb0b a303 	mla	r3, fp, r3, sl
 8009d22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d26:	f8dc 4000 	ldr.w	r4, [ip]
 8009d2a:	4443      	add	r3, r8
 8009d2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d30:	fb0b 840a 	mla	r4, fp, sl, r8
 8009d34:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009d38:	46e2      	mov	sl, ip
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d40:	454f      	cmp	r7, r9
 8009d42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d46:	f84a 3b04 	str.w	r3, [sl], #4
 8009d4a:	d82b      	bhi.n	8009da4 <__multiply+0x120>
 8009d4c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009d50:	9b01      	ldr	r3, [sp, #4]
 8009d52:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009d56:	3204      	adds	r2, #4
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	d020      	beq.n	8009da0 <__multiply+0x11c>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	4689      	mov	r9, r1
 8009d62:	46a8      	mov	r8, r5
 8009d64:	f04f 0b00 	mov.w	fp, #0
 8009d68:	f8b9 c000 	ldrh.w	ip, [r9]
 8009d6c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009d70:	fb0a 440c 	mla	r4, sl, ip, r4
 8009d74:	445c      	add	r4, fp
 8009d76:	46c4      	mov	ip, r8
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d7e:	f84c 3b04 	str.w	r3, [ip], #4
 8009d82:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d86:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009d8a:	0c1b      	lsrs	r3, r3, #16
 8009d8c:	fb0a b303 	mla	r3, sl, r3, fp
 8009d90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009d94:	454f      	cmp	r7, r9
 8009d96:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009d9a:	d805      	bhi.n	8009da8 <__multiply+0x124>
 8009d9c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009da0:	3504      	adds	r5, #4
 8009da2:	e79b      	b.n	8009cdc <__multiply+0x58>
 8009da4:	46d4      	mov	ip, sl
 8009da6:	e7b3      	b.n	8009d10 <__multiply+0x8c>
 8009da8:	46e0      	mov	r8, ip
 8009daa:	e7dd      	b.n	8009d68 <__multiply+0xe4>
 8009dac:	3e01      	subs	r6, #1
 8009dae:	e799      	b.n	8009ce4 <__multiply+0x60>

08009db0 <__pow5mult>:
 8009db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db4:	4615      	mov	r5, r2
 8009db6:	f012 0203 	ands.w	r2, r2, #3
 8009dba:	4606      	mov	r6, r0
 8009dbc:	460f      	mov	r7, r1
 8009dbe:	d007      	beq.n	8009dd0 <__pow5mult+0x20>
 8009dc0:	3a01      	subs	r2, #1
 8009dc2:	4c21      	ldr	r4, [pc, #132]	; (8009e48 <__pow5mult+0x98>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dca:	f7ff fec9 	bl	8009b60 <__multadd>
 8009dce:	4607      	mov	r7, r0
 8009dd0:	10ad      	asrs	r5, r5, #2
 8009dd2:	d035      	beq.n	8009e40 <__pow5mult+0x90>
 8009dd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009dd6:	b93c      	cbnz	r4, 8009de8 <__pow5mult+0x38>
 8009dd8:	2010      	movs	r0, #16
 8009dda:	f7ff fe63 	bl	8009aa4 <malloc>
 8009dde:	6270      	str	r0, [r6, #36]	; 0x24
 8009de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009de4:	6004      	str	r4, [r0, #0]
 8009de6:	60c4      	str	r4, [r0, #12]
 8009de8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009df0:	b94c      	cbnz	r4, 8009e06 <__pow5mult+0x56>
 8009df2:	f240 2171 	movw	r1, #625	; 0x271
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7ff ff3b 	bl	8009c72 <__i2b>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e02:	4604      	mov	r4, r0
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	f04f 0800 	mov.w	r8, #0
 8009e0a:	07eb      	lsls	r3, r5, #31
 8009e0c:	d50a      	bpl.n	8009e24 <__pow5mult+0x74>
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4622      	mov	r2, r4
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff ff36 	bl	8009c84 <__multiply>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4681      	mov	r9, r0
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff fe88 	bl	8009b32 <_Bfree>
 8009e22:	464f      	mov	r7, r9
 8009e24:	106d      	asrs	r5, r5, #1
 8009e26:	d00b      	beq.n	8009e40 <__pow5mult+0x90>
 8009e28:	6820      	ldr	r0, [r4, #0]
 8009e2a:	b938      	cbnz	r0, 8009e3c <__pow5mult+0x8c>
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7ff ff27 	bl	8009c84 <__multiply>
 8009e36:	6020      	str	r0, [r4, #0]
 8009e38:	f8c0 8000 	str.w	r8, [r0]
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	e7e4      	b.n	8009e0a <__pow5mult+0x5a>
 8009e40:	4638      	mov	r0, r7
 8009e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e46:	bf00      	nop
 8009e48:	0800c1b0 	.word	0x0800c1b0

08009e4c <__lshift>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	460c      	mov	r4, r1
 8009e52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	6849      	ldr	r1, [r1, #4]
 8009e5a:	eb0a 0903 	add.w	r9, sl, r3
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	4607      	mov	r7, r0
 8009e62:	4616      	mov	r6, r2
 8009e64:	f109 0501 	add.w	r5, r9, #1
 8009e68:	42ab      	cmp	r3, r5
 8009e6a:	db32      	blt.n	8009ed2 <__lshift+0x86>
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff fe2c 	bl	8009aca <_Balloc>
 8009e72:	2300      	movs	r3, #0
 8009e74:	4680      	mov	r8, r0
 8009e76:	f100 0114 	add.w	r1, r0, #20
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	4553      	cmp	r3, sl
 8009e7e:	db2b      	blt.n	8009ed8 <__lshift+0x8c>
 8009e80:	6920      	ldr	r0, [r4, #16]
 8009e82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e86:	f104 0314 	add.w	r3, r4, #20
 8009e8a:	f016 021f 	ands.w	r2, r6, #31
 8009e8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e96:	d025      	beq.n	8009ee4 <__lshift+0x98>
 8009e98:	f1c2 0e20 	rsb	lr, r2, #32
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	681e      	ldr	r6, [r3, #0]
 8009ea0:	468a      	mov	sl, r1
 8009ea2:	4096      	lsls	r6, r2
 8009ea4:	4330      	orrs	r0, r6
 8009ea6:	f84a 0b04 	str.w	r0, [sl], #4
 8009eaa:	f853 0b04 	ldr.w	r0, [r3], #4
 8009eae:	459c      	cmp	ip, r3
 8009eb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8009eb4:	d814      	bhi.n	8009ee0 <__lshift+0x94>
 8009eb6:	6048      	str	r0, [r1, #4]
 8009eb8:	b108      	cbz	r0, 8009ebe <__lshift+0x72>
 8009eba:	f109 0502 	add.w	r5, r9, #2
 8009ebe:	3d01      	subs	r5, #1
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f8c8 5010 	str.w	r5, [r8, #16]
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	f7ff fe33 	bl	8009b32 <_Bfree>
 8009ecc:	4640      	mov	r0, r8
 8009ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed2:	3101      	adds	r1, #1
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	e7c7      	b.n	8009e68 <__lshift+0x1c>
 8009ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009edc:	3301      	adds	r3, #1
 8009ede:	e7cd      	b.n	8009e7c <__lshift+0x30>
 8009ee0:	4651      	mov	r1, sl
 8009ee2:	e7dc      	b.n	8009e9e <__lshift+0x52>
 8009ee4:	3904      	subs	r1, #4
 8009ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eea:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eee:	459c      	cmp	ip, r3
 8009ef0:	d8f9      	bhi.n	8009ee6 <__lshift+0x9a>
 8009ef2:	e7e4      	b.n	8009ebe <__lshift+0x72>

08009ef4 <__mcmp>:
 8009ef4:	6903      	ldr	r3, [r0, #16]
 8009ef6:	690a      	ldr	r2, [r1, #16]
 8009ef8:	1a9b      	subs	r3, r3, r2
 8009efa:	b530      	push	{r4, r5, lr}
 8009efc:	d10c      	bne.n	8009f18 <__mcmp+0x24>
 8009efe:	0092      	lsls	r2, r2, #2
 8009f00:	3014      	adds	r0, #20
 8009f02:	3114      	adds	r1, #20
 8009f04:	1884      	adds	r4, r0, r2
 8009f06:	4411      	add	r1, r2
 8009f08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f10:	4295      	cmp	r5, r2
 8009f12:	d003      	beq.n	8009f1c <__mcmp+0x28>
 8009f14:	d305      	bcc.n	8009f22 <__mcmp+0x2e>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4618      	mov	r0, r3
 8009f1a:	bd30      	pop	{r4, r5, pc}
 8009f1c:	42a0      	cmp	r0, r4
 8009f1e:	d3f3      	bcc.n	8009f08 <__mcmp+0x14>
 8009f20:	e7fa      	b.n	8009f18 <__mcmp+0x24>
 8009f22:	f04f 33ff 	mov.w	r3, #4294967295
 8009f26:	e7f7      	b.n	8009f18 <__mcmp+0x24>

08009f28 <__mdiff>:
 8009f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	4607      	mov	r7, r0
 8009f30:	4611      	mov	r1, r2
 8009f32:	4628      	mov	r0, r5
 8009f34:	4614      	mov	r4, r2
 8009f36:	f7ff ffdd 	bl	8009ef4 <__mcmp>
 8009f3a:	1e06      	subs	r6, r0, #0
 8009f3c:	d108      	bne.n	8009f50 <__mdiff+0x28>
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff fdc2 	bl	8009aca <_Balloc>
 8009f46:	2301      	movs	r3, #1
 8009f48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f50:	bfa4      	itt	ge
 8009f52:	4623      	movge	r3, r4
 8009f54:	462c      	movge	r4, r5
 8009f56:	4638      	mov	r0, r7
 8009f58:	6861      	ldr	r1, [r4, #4]
 8009f5a:	bfa6      	itte	ge
 8009f5c:	461d      	movge	r5, r3
 8009f5e:	2600      	movge	r6, #0
 8009f60:	2601      	movlt	r6, #1
 8009f62:	f7ff fdb2 	bl	8009aca <_Balloc>
 8009f66:	692b      	ldr	r3, [r5, #16]
 8009f68:	60c6      	str	r6, [r0, #12]
 8009f6a:	6926      	ldr	r6, [r4, #16]
 8009f6c:	f105 0914 	add.w	r9, r5, #20
 8009f70:	f104 0214 	add.w	r2, r4, #20
 8009f74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009f78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009f7c:	f100 0514 	add.w	r5, r0, #20
 8009f80:	f04f 0e00 	mov.w	lr, #0
 8009f84:	f852 ab04 	ldr.w	sl, [r2], #4
 8009f88:	f859 4b04 	ldr.w	r4, [r9], #4
 8009f8c:	fa1e f18a 	uxtah	r1, lr, sl
 8009f90:	b2a3      	uxth	r3, r4
 8009f92:	1ac9      	subs	r1, r1, r3
 8009f94:	0c23      	lsrs	r3, r4, #16
 8009f96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009f9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f9e:	b289      	uxth	r1, r1
 8009fa0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009fa4:	45c8      	cmp	r8, r9
 8009fa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009faa:	4694      	mov	ip, r2
 8009fac:	f845 3b04 	str.w	r3, [r5], #4
 8009fb0:	d8e8      	bhi.n	8009f84 <__mdiff+0x5c>
 8009fb2:	45bc      	cmp	ip, r7
 8009fb4:	d304      	bcc.n	8009fc0 <__mdiff+0x98>
 8009fb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009fba:	b183      	cbz	r3, 8009fde <__mdiff+0xb6>
 8009fbc:	6106      	str	r6, [r0, #16]
 8009fbe:	e7c5      	b.n	8009f4c <__mdiff+0x24>
 8009fc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009fc4:	fa1e f381 	uxtah	r3, lr, r1
 8009fc8:	141a      	asrs	r2, r3, #16
 8009fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009fd8:	f845 3b04 	str.w	r3, [r5], #4
 8009fdc:	e7e9      	b.n	8009fb2 <__mdiff+0x8a>
 8009fde:	3e01      	subs	r6, #1
 8009fe0:	e7e9      	b.n	8009fb6 <__mdiff+0x8e>

08009fe2 <__d2b>:
 8009fe2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fe6:	460e      	mov	r6, r1
 8009fe8:	2101      	movs	r1, #1
 8009fea:	ec59 8b10 	vmov	r8, r9, d0
 8009fee:	4615      	mov	r5, r2
 8009ff0:	f7ff fd6b 	bl	8009aca <_Balloc>
 8009ff4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ffe:	bb34      	cbnz	r4, 800a04e <__d2b+0x6c>
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	f1b8 0300 	subs.w	r3, r8, #0
 800a006:	d027      	beq.n	800a058 <__d2b+0x76>
 800a008:	a802      	add	r0, sp, #8
 800a00a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a00e:	f7ff fe01 	bl	8009c14 <__lo0bits>
 800a012:	9900      	ldr	r1, [sp, #0]
 800a014:	b1f0      	cbz	r0, 800a054 <__d2b+0x72>
 800a016:	9a01      	ldr	r2, [sp, #4]
 800a018:	f1c0 0320 	rsb	r3, r0, #32
 800a01c:	fa02 f303 	lsl.w	r3, r2, r3
 800a020:	430b      	orrs	r3, r1
 800a022:	40c2      	lsrs	r2, r0
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	9201      	str	r2, [sp, #4]
 800a028:	9b01      	ldr	r3, [sp, #4]
 800a02a:	61bb      	str	r3, [r7, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	bf14      	ite	ne
 800a030:	2102      	movne	r1, #2
 800a032:	2101      	moveq	r1, #1
 800a034:	6139      	str	r1, [r7, #16]
 800a036:	b1c4      	cbz	r4, 800a06a <__d2b+0x88>
 800a038:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a03c:	4404      	add	r4, r0
 800a03e:	6034      	str	r4, [r6, #0]
 800a040:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a044:	6028      	str	r0, [r5, #0]
 800a046:	4638      	mov	r0, r7
 800a048:	b003      	add	sp, #12
 800a04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a04e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a052:	e7d5      	b.n	800a000 <__d2b+0x1e>
 800a054:	6179      	str	r1, [r7, #20]
 800a056:	e7e7      	b.n	800a028 <__d2b+0x46>
 800a058:	a801      	add	r0, sp, #4
 800a05a:	f7ff fddb 	bl	8009c14 <__lo0bits>
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	2101      	movs	r1, #1
 800a064:	6139      	str	r1, [r7, #16]
 800a066:	3020      	adds	r0, #32
 800a068:	e7e5      	b.n	800a036 <__d2b+0x54>
 800a06a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a06e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a072:	6030      	str	r0, [r6, #0]
 800a074:	6918      	ldr	r0, [r3, #16]
 800a076:	f7ff fdae 	bl	8009bd6 <__hi0bits>
 800a07a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a07e:	e7e1      	b.n	800a044 <__d2b+0x62>

0800a080 <_calloc_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	fb02 f401 	mul.w	r4, r2, r1
 800a086:	4621      	mov	r1, r4
 800a088:	f000 f856 	bl	800a138 <_malloc_r>
 800a08c:	4605      	mov	r5, r0
 800a08e:	b118      	cbz	r0, 800a098 <_calloc_r+0x18>
 800a090:	4622      	mov	r2, r4
 800a092:	2100      	movs	r1, #0
 800a094:	f7fe fa2e 	bl	80084f4 <memset>
 800a098:	4628      	mov	r0, r5
 800a09a:	bd38      	pop	{r3, r4, r5, pc}

0800a09c <_free_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4605      	mov	r5, r0
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	d045      	beq.n	800a130 <_free_r+0x94>
 800a0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a8:	1f0c      	subs	r4, r1, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfb8      	it	lt
 800a0ae:	18e4      	addlt	r4, r4, r3
 800a0b0:	f000 fa29 	bl	800a506 <__malloc_lock>
 800a0b4:	4a1f      	ldr	r2, [pc, #124]	; (800a134 <_free_r+0x98>)
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	b933      	cbnz	r3, 800a0ca <_free_r+0x2e>
 800a0bc:	6063      	str	r3, [r4, #4]
 800a0be:	6014      	str	r4, [r2, #0]
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0c6:	f000 ba1f 	b.w	800a508 <__malloc_unlock>
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	d90c      	bls.n	800a0e8 <_free_r+0x4c>
 800a0ce:	6821      	ldr	r1, [r4, #0]
 800a0d0:	1862      	adds	r2, r4, r1
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	bf04      	itt	eq
 800a0d6:	681a      	ldreq	r2, [r3, #0]
 800a0d8:	685b      	ldreq	r3, [r3, #4]
 800a0da:	6063      	str	r3, [r4, #4]
 800a0dc:	bf04      	itt	eq
 800a0de:	1852      	addeq	r2, r2, r1
 800a0e0:	6022      	streq	r2, [r4, #0]
 800a0e2:	6004      	str	r4, [r0, #0]
 800a0e4:	e7ec      	b.n	800a0c0 <_free_r+0x24>
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	b10a      	cbz	r2, 800a0f0 <_free_r+0x54>
 800a0ec:	42a2      	cmp	r2, r4
 800a0ee:	d9fa      	bls.n	800a0e6 <_free_r+0x4a>
 800a0f0:	6819      	ldr	r1, [r3, #0]
 800a0f2:	1858      	adds	r0, r3, r1
 800a0f4:	42a0      	cmp	r0, r4
 800a0f6:	d10b      	bne.n	800a110 <_free_r+0x74>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	4401      	add	r1, r0
 800a0fc:	1858      	adds	r0, r3, r1
 800a0fe:	4282      	cmp	r2, r0
 800a100:	6019      	str	r1, [r3, #0]
 800a102:	d1dd      	bne.n	800a0c0 <_free_r+0x24>
 800a104:	6810      	ldr	r0, [r2, #0]
 800a106:	6852      	ldr	r2, [r2, #4]
 800a108:	605a      	str	r2, [r3, #4]
 800a10a:	4401      	add	r1, r0
 800a10c:	6019      	str	r1, [r3, #0]
 800a10e:	e7d7      	b.n	800a0c0 <_free_r+0x24>
 800a110:	d902      	bls.n	800a118 <_free_r+0x7c>
 800a112:	230c      	movs	r3, #12
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	e7d3      	b.n	800a0c0 <_free_r+0x24>
 800a118:	6820      	ldr	r0, [r4, #0]
 800a11a:	1821      	adds	r1, r4, r0
 800a11c:	428a      	cmp	r2, r1
 800a11e:	bf04      	itt	eq
 800a120:	6811      	ldreq	r1, [r2, #0]
 800a122:	6852      	ldreq	r2, [r2, #4]
 800a124:	6062      	str	r2, [r4, #4]
 800a126:	bf04      	itt	eq
 800a128:	1809      	addeq	r1, r1, r0
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	605c      	str	r4, [r3, #4]
 800a12e:	e7c7      	b.n	800a0c0 <_free_r+0x24>
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	bf00      	nop
 800a134:	2000042c 	.word	0x2000042c

0800a138 <_malloc_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	1ccd      	adds	r5, r1, #3
 800a13c:	f025 0503 	bic.w	r5, r5, #3
 800a140:	3508      	adds	r5, #8
 800a142:	2d0c      	cmp	r5, #12
 800a144:	bf38      	it	cc
 800a146:	250c      	movcc	r5, #12
 800a148:	2d00      	cmp	r5, #0
 800a14a:	4606      	mov	r6, r0
 800a14c:	db01      	blt.n	800a152 <_malloc_r+0x1a>
 800a14e:	42a9      	cmp	r1, r5
 800a150:	d903      	bls.n	800a15a <_malloc_r+0x22>
 800a152:	230c      	movs	r3, #12
 800a154:	6033      	str	r3, [r6, #0]
 800a156:	2000      	movs	r0, #0
 800a158:	bd70      	pop	{r4, r5, r6, pc}
 800a15a:	f000 f9d4 	bl	800a506 <__malloc_lock>
 800a15e:	4a21      	ldr	r2, [pc, #132]	; (800a1e4 <_malloc_r+0xac>)
 800a160:	6814      	ldr	r4, [r2, #0]
 800a162:	4621      	mov	r1, r4
 800a164:	b991      	cbnz	r1, 800a18c <_malloc_r+0x54>
 800a166:	4c20      	ldr	r4, [pc, #128]	; (800a1e8 <_malloc_r+0xb0>)
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	b91b      	cbnz	r3, 800a174 <_malloc_r+0x3c>
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 f98f 	bl	800a490 <_sbrk_r>
 800a172:	6020      	str	r0, [r4, #0]
 800a174:	4629      	mov	r1, r5
 800a176:	4630      	mov	r0, r6
 800a178:	f000 f98a 	bl	800a490 <_sbrk_r>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d124      	bne.n	800a1ca <_malloc_r+0x92>
 800a180:	230c      	movs	r3, #12
 800a182:	6033      	str	r3, [r6, #0]
 800a184:	4630      	mov	r0, r6
 800a186:	f000 f9bf 	bl	800a508 <__malloc_unlock>
 800a18a:	e7e4      	b.n	800a156 <_malloc_r+0x1e>
 800a18c:	680b      	ldr	r3, [r1, #0]
 800a18e:	1b5b      	subs	r3, r3, r5
 800a190:	d418      	bmi.n	800a1c4 <_malloc_r+0x8c>
 800a192:	2b0b      	cmp	r3, #11
 800a194:	d90f      	bls.n	800a1b6 <_malloc_r+0x7e>
 800a196:	600b      	str	r3, [r1, #0]
 800a198:	50cd      	str	r5, [r1, r3]
 800a19a:	18cc      	adds	r4, r1, r3
 800a19c:	4630      	mov	r0, r6
 800a19e:	f000 f9b3 	bl	800a508 <__malloc_unlock>
 800a1a2:	f104 000b 	add.w	r0, r4, #11
 800a1a6:	1d23      	adds	r3, r4, #4
 800a1a8:	f020 0007 	bic.w	r0, r0, #7
 800a1ac:	1ac3      	subs	r3, r0, r3
 800a1ae:	d0d3      	beq.n	800a158 <_malloc_r+0x20>
 800a1b0:	425a      	negs	r2, r3
 800a1b2:	50e2      	str	r2, [r4, r3]
 800a1b4:	e7d0      	b.n	800a158 <_malloc_r+0x20>
 800a1b6:	428c      	cmp	r4, r1
 800a1b8:	684b      	ldr	r3, [r1, #4]
 800a1ba:	bf16      	itet	ne
 800a1bc:	6063      	strne	r3, [r4, #4]
 800a1be:	6013      	streq	r3, [r2, #0]
 800a1c0:	460c      	movne	r4, r1
 800a1c2:	e7eb      	b.n	800a19c <_malloc_r+0x64>
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	6849      	ldr	r1, [r1, #4]
 800a1c8:	e7cc      	b.n	800a164 <_malloc_r+0x2c>
 800a1ca:	1cc4      	adds	r4, r0, #3
 800a1cc:	f024 0403 	bic.w	r4, r4, #3
 800a1d0:	42a0      	cmp	r0, r4
 800a1d2:	d005      	beq.n	800a1e0 <_malloc_r+0xa8>
 800a1d4:	1a21      	subs	r1, r4, r0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f000 f95a 	bl	800a490 <_sbrk_r>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d0cf      	beq.n	800a180 <_malloc_r+0x48>
 800a1e0:	6025      	str	r5, [r4, #0]
 800a1e2:	e7db      	b.n	800a19c <_malloc_r+0x64>
 800a1e4:	2000042c 	.word	0x2000042c
 800a1e8:	20000430 	.word	0x20000430

0800a1ec <__ssputs_r>:
 800a1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	688e      	ldr	r6, [r1, #8]
 800a1f2:	429e      	cmp	r6, r3
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	4690      	mov	r8, r2
 800a1fa:	4699      	mov	r9, r3
 800a1fc:	d837      	bhi.n	800a26e <__ssputs_r+0x82>
 800a1fe:	898a      	ldrh	r2, [r1, #12]
 800a200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a204:	d031      	beq.n	800a26a <__ssputs_r+0x7e>
 800a206:	6825      	ldr	r5, [r4, #0]
 800a208:	6909      	ldr	r1, [r1, #16]
 800a20a:	1a6f      	subs	r7, r5, r1
 800a20c:	6965      	ldr	r5, [r4, #20]
 800a20e:	2302      	movs	r3, #2
 800a210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a214:	fb95 f5f3 	sdiv	r5, r5, r3
 800a218:	f109 0301 	add.w	r3, r9, #1
 800a21c:	443b      	add	r3, r7
 800a21e:	429d      	cmp	r5, r3
 800a220:	bf38      	it	cc
 800a222:	461d      	movcc	r5, r3
 800a224:	0553      	lsls	r3, r2, #21
 800a226:	d530      	bpl.n	800a28a <__ssputs_r+0x9e>
 800a228:	4629      	mov	r1, r5
 800a22a:	f7ff ff85 	bl	800a138 <_malloc_r>
 800a22e:	4606      	mov	r6, r0
 800a230:	b950      	cbnz	r0, 800a248 <__ssputs_r+0x5c>
 800a232:	230c      	movs	r3, #12
 800a234:	f8ca 3000 	str.w	r3, [sl]
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	f04f 30ff 	mov.w	r0, #4294967295
 800a244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a248:	463a      	mov	r2, r7
 800a24a:	6921      	ldr	r1, [r4, #16]
 800a24c:	f7ff fc32 	bl	8009ab4 <memcpy>
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	6126      	str	r6, [r4, #16]
 800a25e:	6165      	str	r5, [r4, #20]
 800a260:	443e      	add	r6, r7
 800a262:	1bed      	subs	r5, r5, r7
 800a264:	6026      	str	r6, [r4, #0]
 800a266:	60a5      	str	r5, [r4, #8]
 800a268:	464e      	mov	r6, r9
 800a26a:	454e      	cmp	r6, r9
 800a26c:	d900      	bls.n	800a270 <__ssputs_r+0x84>
 800a26e:	464e      	mov	r6, r9
 800a270:	4632      	mov	r2, r6
 800a272:	4641      	mov	r1, r8
 800a274:	6820      	ldr	r0, [r4, #0]
 800a276:	f000 f92d 	bl	800a4d4 <memmove>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	1b9b      	subs	r3, r3, r6
 800a27e:	60a3      	str	r3, [r4, #8]
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	441e      	add	r6, r3
 800a284:	6026      	str	r6, [r4, #0]
 800a286:	2000      	movs	r0, #0
 800a288:	e7dc      	b.n	800a244 <__ssputs_r+0x58>
 800a28a:	462a      	mov	r2, r5
 800a28c:	f000 f93d 	bl	800a50a <_realloc_r>
 800a290:	4606      	mov	r6, r0
 800a292:	2800      	cmp	r0, #0
 800a294:	d1e2      	bne.n	800a25c <__ssputs_r+0x70>
 800a296:	6921      	ldr	r1, [r4, #16]
 800a298:	4650      	mov	r0, sl
 800a29a:	f7ff feff 	bl	800a09c <_free_r>
 800a29e:	e7c8      	b.n	800a232 <__ssputs_r+0x46>

0800a2a0 <_svfiprintf_r>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	461d      	mov	r5, r3
 800a2a6:	898b      	ldrh	r3, [r1, #12]
 800a2a8:	061f      	lsls	r7, r3, #24
 800a2aa:	b09d      	sub	sp, #116	; 0x74
 800a2ac:	4680      	mov	r8, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	d50f      	bpl.n	800a2d4 <_svfiprintf_r+0x34>
 800a2b4:	690b      	ldr	r3, [r1, #16]
 800a2b6:	b96b      	cbnz	r3, 800a2d4 <_svfiprintf_r+0x34>
 800a2b8:	2140      	movs	r1, #64	; 0x40
 800a2ba:	f7ff ff3d 	bl	800a138 <_malloc_r>
 800a2be:	6020      	str	r0, [r4, #0]
 800a2c0:	6120      	str	r0, [r4, #16]
 800a2c2:	b928      	cbnz	r0, 800a2d0 <_svfiprintf_r+0x30>
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	f8c8 3000 	str.w	r3, [r8]
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ce:	e0c8      	b.n	800a462 <_svfiprintf_r+0x1c2>
 800a2d0:	2340      	movs	r3, #64	; 0x40
 800a2d2:	6163      	str	r3, [r4, #20]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2de:	2330      	movs	r3, #48	; 0x30
 800a2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2e4:	9503      	str	r5, [sp, #12]
 800a2e6:	f04f 0b01 	mov.w	fp, #1
 800a2ea:	4637      	mov	r7, r6
 800a2ec:	463d      	mov	r5, r7
 800a2ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2f2:	b10b      	cbz	r3, 800a2f8 <_svfiprintf_r+0x58>
 800a2f4:	2b25      	cmp	r3, #37	; 0x25
 800a2f6:	d13e      	bne.n	800a376 <_svfiprintf_r+0xd6>
 800a2f8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a2fc:	d00b      	beq.n	800a316 <_svfiprintf_r+0x76>
 800a2fe:	4653      	mov	r3, sl
 800a300:	4632      	mov	r2, r6
 800a302:	4621      	mov	r1, r4
 800a304:	4640      	mov	r0, r8
 800a306:	f7ff ff71 	bl	800a1ec <__ssputs_r>
 800a30a:	3001      	adds	r0, #1
 800a30c:	f000 80a4 	beq.w	800a458 <_svfiprintf_r+0x1b8>
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	4453      	add	r3, sl
 800a314:	9309      	str	r3, [sp, #36]	; 0x24
 800a316:	783b      	ldrb	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 809d 	beq.w	800a458 <_svfiprintf_r+0x1b8>
 800a31e:	2300      	movs	r3, #0
 800a320:	f04f 32ff 	mov.w	r2, #4294967295
 800a324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	9307      	str	r3, [sp, #28]
 800a32c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a330:	931a      	str	r3, [sp, #104]	; 0x68
 800a332:	462f      	mov	r7, r5
 800a334:	2205      	movs	r2, #5
 800a336:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a33a:	4850      	ldr	r0, [pc, #320]	; (800a47c <_svfiprintf_r+0x1dc>)
 800a33c:	f7f5 ff70 	bl	8000220 <memchr>
 800a340:	9b04      	ldr	r3, [sp, #16]
 800a342:	b9d0      	cbnz	r0, 800a37a <_svfiprintf_r+0xda>
 800a344:	06d9      	lsls	r1, r3, #27
 800a346:	bf44      	itt	mi
 800a348:	2220      	movmi	r2, #32
 800a34a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a34e:	071a      	lsls	r2, r3, #28
 800a350:	bf44      	itt	mi
 800a352:	222b      	movmi	r2, #43	; 0x2b
 800a354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a358:	782a      	ldrb	r2, [r5, #0]
 800a35a:	2a2a      	cmp	r2, #42	; 0x2a
 800a35c:	d015      	beq.n	800a38a <_svfiprintf_r+0xea>
 800a35e:	9a07      	ldr	r2, [sp, #28]
 800a360:	462f      	mov	r7, r5
 800a362:	2000      	movs	r0, #0
 800a364:	250a      	movs	r5, #10
 800a366:	4639      	mov	r1, r7
 800a368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36c:	3b30      	subs	r3, #48	; 0x30
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d94d      	bls.n	800a40e <_svfiprintf_r+0x16e>
 800a372:	b1b8      	cbz	r0, 800a3a4 <_svfiprintf_r+0x104>
 800a374:	e00f      	b.n	800a396 <_svfiprintf_r+0xf6>
 800a376:	462f      	mov	r7, r5
 800a378:	e7b8      	b.n	800a2ec <_svfiprintf_r+0x4c>
 800a37a:	4a40      	ldr	r2, [pc, #256]	; (800a47c <_svfiprintf_r+0x1dc>)
 800a37c:	1a80      	subs	r0, r0, r2
 800a37e:	fa0b f000 	lsl.w	r0, fp, r0
 800a382:	4318      	orrs	r0, r3
 800a384:	9004      	str	r0, [sp, #16]
 800a386:	463d      	mov	r5, r7
 800a388:	e7d3      	b.n	800a332 <_svfiprintf_r+0x92>
 800a38a:	9a03      	ldr	r2, [sp, #12]
 800a38c:	1d11      	adds	r1, r2, #4
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	9103      	str	r1, [sp, #12]
 800a392:	2a00      	cmp	r2, #0
 800a394:	db01      	blt.n	800a39a <_svfiprintf_r+0xfa>
 800a396:	9207      	str	r2, [sp, #28]
 800a398:	e004      	b.n	800a3a4 <_svfiprintf_r+0x104>
 800a39a:	4252      	negs	r2, r2
 800a39c:	f043 0302 	orr.w	r3, r3, #2
 800a3a0:	9207      	str	r2, [sp, #28]
 800a3a2:	9304      	str	r3, [sp, #16]
 800a3a4:	783b      	ldrb	r3, [r7, #0]
 800a3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a8:	d10c      	bne.n	800a3c4 <_svfiprintf_r+0x124>
 800a3aa:	787b      	ldrb	r3, [r7, #1]
 800a3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ae:	d133      	bne.n	800a418 <_svfiprintf_r+0x178>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	1d1a      	adds	r2, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	9203      	str	r2, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfb8      	it	lt
 800a3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c0:	3702      	adds	r7, #2
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	4d2e      	ldr	r5, [pc, #184]	; (800a480 <_svfiprintf_r+0x1e0>)
 800a3c6:	7839      	ldrb	r1, [r7, #0]
 800a3c8:	2203      	movs	r2, #3
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f7f5 ff28 	bl	8000220 <memchr>
 800a3d0:	b138      	cbz	r0, 800a3e2 <_svfiprintf_r+0x142>
 800a3d2:	2340      	movs	r3, #64	; 0x40
 800a3d4:	1b40      	subs	r0, r0, r5
 800a3d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	4303      	orrs	r3, r0
 800a3de:	3701      	adds	r7, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	7839      	ldrb	r1, [r7, #0]
 800a3e4:	4827      	ldr	r0, [pc, #156]	; (800a484 <_svfiprintf_r+0x1e4>)
 800a3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ea:	2206      	movs	r2, #6
 800a3ec:	1c7e      	adds	r6, r7, #1
 800a3ee:	f7f5 ff17 	bl	8000220 <memchr>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d038      	beq.n	800a468 <_svfiprintf_r+0x1c8>
 800a3f6:	4b24      	ldr	r3, [pc, #144]	; (800a488 <_svfiprintf_r+0x1e8>)
 800a3f8:	bb13      	cbnz	r3, 800a440 <_svfiprintf_r+0x1a0>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	f023 0307 	bic.w	r3, r3, #7
 800a402:	3308      	adds	r3, #8
 800a404:	9303      	str	r3, [sp, #12]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	444b      	add	r3, r9
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	e76d      	b.n	800a2ea <_svfiprintf_r+0x4a>
 800a40e:	fb05 3202 	mla	r2, r5, r2, r3
 800a412:	2001      	movs	r0, #1
 800a414:	460f      	mov	r7, r1
 800a416:	e7a6      	b.n	800a366 <_svfiprintf_r+0xc6>
 800a418:	2300      	movs	r3, #0
 800a41a:	3701      	adds	r7, #1
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	4619      	mov	r1, r3
 800a420:	250a      	movs	r5, #10
 800a422:	4638      	mov	r0, r7
 800a424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a428:	3a30      	subs	r2, #48	; 0x30
 800a42a:	2a09      	cmp	r2, #9
 800a42c:	d903      	bls.n	800a436 <_svfiprintf_r+0x196>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0c8      	beq.n	800a3c4 <_svfiprintf_r+0x124>
 800a432:	9105      	str	r1, [sp, #20]
 800a434:	e7c6      	b.n	800a3c4 <_svfiprintf_r+0x124>
 800a436:	fb05 2101 	mla	r1, r5, r1, r2
 800a43a:	2301      	movs	r3, #1
 800a43c:	4607      	mov	r7, r0
 800a43e:	e7f0      	b.n	800a422 <_svfiprintf_r+0x182>
 800a440:	ab03      	add	r3, sp, #12
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	4622      	mov	r2, r4
 800a446:	4b11      	ldr	r3, [pc, #68]	; (800a48c <_svfiprintf_r+0x1ec>)
 800a448:	a904      	add	r1, sp, #16
 800a44a:	4640      	mov	r0, r8
 800a44c:	f7fe f8ee 	bl	800862c <_printf_float>
 800a450:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a454:	4681      	mov	r9, r0
 800a456:	d1d6      	bne.n	800a406 <_svfiprintf_r+0x166>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	065b      	lsls	r3, r3, #25
 800a45c:	f53f af35 	bmi.w	800a2ca <_svfiprintf_r+0x2a>
 800a460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a462:	b01d      	add	sp, #116	; 0x74
 800a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a468:	ab03      	add	r3, sp, #12
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4622      	mov	r2, r4
 800a46e:	4b07      	ldr	r3, [pc, #28]	; (800a48c <_svfiprintf_r+0x1ec>)
 800a470:	a904      	add	r1, sp, #16
 800a472:	4640      	mov	r0, r8
 800a474:	f7fe fb90 	bl	8008b98 <_printf_i>
 800a478:	e7ea      	b.n	800a450 <_svfiprintf_r+0x1b0>
 800a47a:	bf00      	nop
 800a47c:	0800c1bc 	.word	0x0800c1bc
 800a480:	0800c1c2 	.word	0x0800c1c2
 800a484:	0800c1c6 	.word	0x0800c1c6
 800a488:	0800862d 	.word	0x0800862d
 800a48c:	0800a1ed 	.word	0x0800a1ed

0800a490 <_sbrk_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4c06      	ldr	r4, [pc, #24]	; (800a4ac <_sbrk_r+0x1c>)
 800a494:	2300      	movs	r3, #0
 800a496:	4605      	mov	r5, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	f7f9 ffac 	bl	80043f8 <_sbrk>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_sbrk_r+0x1a>
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_sbrk_r+0x1a>
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	2000067c 	.word	0x2000067c

0800a4b0 <__ascii_mbtowc>:
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	b901      	cbnz	r1, 800a4b6 <__ascii_mbtowc+0x6>
 800a4b4:	a901      	add	r1, sp, #4
 800a4b6:	b142      	cbz	r2, 800a4ca <__ascii_mbtowc+0x1a>
 800a4b8:	b14b      	cbz	r3, 800a4ce <__ascii_mbtowc+0x1e>
 800a4ba:	7813      	ldrb	r3, [r2, #0]
 800a4bc:	600b      	str	r3, [r1, #0]
 800a4be:	7812      	ldrb	r2, [r2, #0]
 800a4c0:	1c10      	adds	r0, r2, #0
 800a4c2:	bf18      	it	ne
 800a4c4:	2001      	movne	r0, #1
 800a4c6:	b002      	add	sp, #8
 800a4c8:	4770      	bx	lr
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	e7fb      	b.n	800a4c6 <__ascii_mbtowc+0x16>
 800a4ce:	f06f 0001 	mvn.w	r0, #1
 800a4d2:	e7f8      	b.n	800a4c6 <__ascii_mbtowc+0x16>

0800a4d4 <memmove>:
 800a4d4:	4288      	cmp	r0, r1
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	eb01 0302 	add.w	r3, r1, r2
 800a4dc:	d807      	bhi.n	800a4ee <memmove+0x1a>
 800a4de:	1e42      	subs	r2, r0, #1
 800a4e0:	4299      	cmp	r1, r3
 800a4e2:	d00a      	beq.n	800a4fa <memmove+0x26>
 800a4e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4ec:	e7f8      	b.n	800a4e0 <memmove+0xc>
 800a4ee:	4283      	cmp	r3, r0
 800a4f0:	d9f5      	bls.n	800a4de <memmove+0xa>
 800a4f2:	1881      	adds	r1, r0, r2
 800a4f4:	1ad2      	subs	r2, r2, r3
 800a4f6:	42d3      	cmn	r3, r2
 800a4f8:	d100      	bne.n	800a4fc <memmove+0x28>
 800a4fa:	bd10      	pop	{r4, pc}
 800a4fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a500:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a504:	e7f7      	b.n	800a4f6 <memmove+0x22>

0800a506 <__malloc_lock>:
 800a506:	4770      	bx	lr

0800a508 <__malloc_unlock>:
 800a508:	4770      	bx	lr

0800a50a <_realloc_r>:
 800a50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50c:	4607      	mov	r7, r0
 800a50e:	4614      	mov	r4, r2
 800a510:	460e      	mov	r6, r1
 800a512:	b921      	cbnz	r1, 800a51e <_realloc_r+0x14>
 800a514:	4611      	mov	r1, r2
 800a516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a51a:	f7ff be0d 	b.w	800a138 <_malloc_r>
 800a51e:	b922      	cbnz	r2, 800a52a <_realloc_r+0x20>
 800a520:	f7ff fdbc 	bl	800a09c <_free_r>
 800a524:	4625      	mov	r5, r4
 800a526:	4628      	mov	r0, r5
 800a528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a52a:	f000 f821 	bl	800a570 <_malloc_usable_size_r>
 800a52e:	42a0      	cmp	r0, r4
 800a530:	d20f      	bcs.n	800a552 <_realloc_r+0x48>
 800a532:	4621      	mov	r1, r4
 800a534:	4638      	mov	r0, r7
 800a536:	f7ff fdff 	bl	800a138 <_malloc_r>
 800a53a:	4605      	mov	r5, r0
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d0f2      	beq.n	800a526 <_realloc_r+0x1c>
 800a540:	4631      	mov	r1, r6
 800a542:	4622      	mov	r2, r4
 800a544:	f7ff fab6 	bl	8009ab4 <memcpy>
 800a548:	4631      	mov	r1, r6
 800a54a:	4638      	mov	r0, r7
 800a54c:	f7ff fda6 	bl	800a09c <_free_r>
 800a550:	e7e9      	b.n	800a526 <_realloc_r+0x1c>
 800a552:	4635      	mov	r5, r6
 800a554:	e7e7      	b.n	800a526 <_realloc_r+0x1c>

0800a556 <__ascii_wctomb>:
 800a556:	b149      	cbz	r1, 800a56c <__ascii_wctomb+0x16>
 800a558:	2aff      	cmp	r2, #255	; 0xff
 800a55a:	bf85      	ittet	hi
 800a55c:	238a      	movhi	r3, #138	; 0x8a
 800a55e:	6003      	strhi	r3, [r0, #0]
 800a560:	700a      	strbls	r2, [r1, #0]
 800a562:	f04f 30ff 	movhi.w	r0, #4294967295
 800a566:	bf98      	it	ls
 800a568:	2001      	movls	r0, #1
 800a56a:	4770      	bx	lr
 800a56c:	4608      	mov	r0, r1
 800a56e:	4770      	bx	lr

0800a570 <_malloc_usable_size_r>:
 800a570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a574:	1f18      	subs	r0, r3, #4
 800a576:	2b00      	cmp	r3, #0
 800a578:	bfbc      	itt	lt
 800a57a:	580b      	ldrlt	r3, [r1, r0]
 800a57c:	18c0      	addlt	r0, r0, r3
 800a57e:	4770      	bx	lr

0800a580 <_init>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	bf00      	nop
 800a584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a586:	bc08      	pop	{r3}
 800a588:	469e      	mov	lr, r3
 800a58a:	4770      	bx	lr

0800a58c <_fini>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	bf00      	nop
 800a590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a592:	bc08      	pop	{r3}
 800a594:	469e      	mov	lr, r3
 800a596:	4770      	bx	lr
